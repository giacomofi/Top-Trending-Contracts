['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '/*\n', "    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\n", "    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\n", '    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\n', '    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\n', "    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\n", "    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\n", "    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\n", '              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\n', '             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\n', "          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\n", "        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\n", "       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\n", "      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\n", '     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\n', "    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\n", '   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\n', "    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\n", "       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\n", "          ...'..     .';;;;;;;;;;;;;;,,,'.\n", '                       ...............\n', '*/\n', '\n', '// https://github.com/trusttoken/smart-contracts\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/common/Initializable.sol\n', '\n', '// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\n', '// Added public isInitialized() view of private initialized bool.\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Return true if and only if the contract has been initialized\n', '     * @return whether the contract has been initialized\n', '     */\n', '    function isInitialized() public view returns (bool) {\n', '        return initialized;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: contracts/common/UpgradeableERC20.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {Address} from "@openzeppelin/contracts/utils/Address.sol";\n', '// import {Context} from "@openzeppelin/contracts/GSN/Context.sol";\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import {Initializable} from "contracts/common/Initializable.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public virtual view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public virtual override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero")\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '\n', '    function updateNameAndSymbol(string memory __name, string memory __symbol) internal {\n', '        _name = __name;\n', '        _symbol = __symbol;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/common/UpgradeableClaimable.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {Context} from "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '// import {Initializable} from "contracts/common/Initializable.sol";\n', '\n', '/**\n', ' * @title UpgradeableClaimable\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. Since\n', ' * this contract combines Claimable and UpgradableOwnable contracts, ownership\n', ' * can be later change via 2 step method {transferOwnership} and {claimOwnership}\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract UpgradeableClaimable is Initializable, Context {\n', '    address private _owner;\n', '    address private _pendingOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting a custom initial owner of choice.\n', '     * @param __owner Initial owner of contract to be set.\n', '     */\n', '    function initialize(address __owner) internal initializer {\n', '        _owner = __owner;\n', '        emit OwnershipTransferred(address(0), __owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the pending owner.\n', '     */\n', '    function pendingOwner() public view returns (address) {\n', '        return _pendingOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == _pendingOwner, "Ownable: caller is not the pending owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        emit OwnershipTransferred(_owner, _pendingOwner);\n', '        _owner = _pendingOwner;\n', '        _pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/I1Inch3.sol\n', '\n', '// pragma solidity 0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface I1Inch3 {\n', '    struct SwapDescription {\n', '        address srcToken;\n', '        address dstToken;\n', '        address srcReceiver;\n', '        address dstReceiver;\n', '        uint256 amount;\n', '        uint256 minReturnAmount;\n', '        uint256 flags;\n', '        bytes permit;\n', '    }\n', '\n', '    function swap(\n', '        address caller,\n', '        SwapDescription calldata desc,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns (\n', '            uint256 returnAmount,\n', '            uint256 gasLeft,\n', '            uint256 chiSpent\n', '        );\n', '\n', '    function unoswap(\n', '        address srcToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        bytes32[] calldata /* pools */\n', '    ) external payable returns (uint256 returnAmount);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/libraries/OneInchExchange.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import {I1Inch3} from "contracts/truefi2/interface/I1Inch3.sol";\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', 'interface IUniRouter {\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '}\n', '\n', 'library OneInchExchange {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n', '    uint256 constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    event Swapped(I1Inch3.SwapDescription description, uint256 returnedAmount);\n', '\n', '    /**\n', '     * @dev Forward data to 1Inch contract\n', '     * @param _1inchExchange address of 1Inch (currently 0x11111112542d85b3ef69ae05771c2dccff4faa26 for mainnet)\n', '     * @param data Data that is forwarded into the 1inch exchange contract. Can be acquired from 1Inch API https://api.1inch.exchange/v3.0/1/swap\n', '     * [See more](https://docs.1inch.exchange/api/quote-swap#swap)\n', '     *\n', '     * @return description - description of the swap\n', '     */\n', '\n', '    function exchange(I1Inch3 _1inchExchange, bytes calldata data)\n', '        internal\n', '        returns (I1Inch3.SwapDescription memory description, uint256 returnedAmount)\n', '    {\n', '        if (data[0] == 0x7c) {\n', '            // call `swap()`\n', '            (, description, ) = abi.decode(data[4:], (address, I1Inch3.SwapDescription, bytes));\n', '        } else {\n', '            // call `unoswap()`\n', '            (address srcToken, uint256 amount, uint256 minReturn, bytes32[] memory pathData) = abi.decode(\n', '                data[4:],\n', '                (address, uint256, uint256, bytes32[])\n', '            );\n', '            description.srcToken = srcToken;\n', '            description.amount = amount;\n', '            description.minReturnAmount = minReturn;\n', '            description.flags = 0;\n', '            uint256 lastPath = uint256(pathData[pathData.length - 1]);\n', '            IUniRouter uniRouter = IUniRouter(address(lastPath & ADDRESS_MASK));\n', '            bool isReverse = lastPath & REVERSE_MASK > 0;\n', '            description.dstToken = isReverse ? uniRouter.token0() : uniRouter.token1();\n', '            description.dstReceiver = address(this);\n', '        }\n', '\n', '        IERC20(description.srcToken).safeApprove(address(_1inchExchange), description.amount);\n', '        uint256 balanceBefore = IERC20(description.dstToken).balanceOf(description.dstReceiver);\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, ) = address(_1inchExchange).call(data);\n', '        if (!success) {\n', '            // Revert with original error message\n', '            assembly {\n', '                let ptr := mload(0x40)\n', '                let size := returndatasize()\n', '                returndatacopy(ptr, 0, size)\n', '                revert(ptr, size)\n', '            }\n', '        }\n', '\n', '        uint256 balanceAfter = IERC20(description.dstToken).balanceOf(description.dstReceiver);\n', '        returnedAmount = balanceAfter.sub(balanceBefore);\n', '\n', '        emit Swapped(description, returnedAmount);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/ITrueLender2.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {ITrueFiPool2} from "contracts/truefi2/interface/ITrueFiPool2.sol";\n', '// import {ILoanToken2} from "contracts/truefi2/interface/ILoanToken2.sol";\n', '\n', 'interface ITrueLender2 {\n', '    // @dev calculate overall value of the pools\n', '    function value(ITrueFiPool2 pool) external view returns (uint256);\n', '\n', '    // @dev distribute a basket of tokens for exiting user\n', '    function distribute(\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) external;\n', '\n', '    function transferAllLoanTokens(ILoanToken2 loan, address recipient) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/IERC20WithDecimals.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IERC20WithDecimals is IERC20 {\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/ITrueFiPoolOracle.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20WithDecimals} from "contracts/truefi2/interface/IERC20WithDecimals.sol";\n', '\n', '/**\n', ' * @dev Oracle that converts any token to and from TRU\n', ' * Used for liquidations and valuing of liquidated TRU in the pool\n', ' */\n', 'interface ITrueFiPoolOracle {\n', '    // token address\n', '    function token() external view returns (IERC20WithDecimals);\n', '\n', '    // amount of tokens 1 TRU is worth\n', '    function truToToken(uint256 truAmount) external view returns (uint256);\n', '\n', '    // amount of TRU 1 token is worth\n', '    function tokenToTru(uint256 tokenAmount) external view returns (uint256);\n', '\n', '    // USD price of token with 18 decimals\n', '    function tokenToUsd(uint256 tokenAmount) external view returns (uint256);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/ISAFU.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ISAFU {\n', '    function poolDeficit(address pool) external view returns (uint256);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/ITrueFiPool2.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {ERC20, IERC20} from "contracts/common/UpgradeableERC20.sol";\n', '// import {ITrueLender2, ILoanToken2} from "contracts/truefi2/interface/ITrueLender2.sol";\n', '// import {ITrueFiPoolOracle} from "contracts/truefi2/interface/ITrueFiPoolOracle.sol";\n', '// import {I1Inch3} from "contracts/truefi2/interface/I1Inch3.sol";\n', '// import {ISAFU} from "contracts/truefi2/interface/ISAFU.sol";\n', '\n', 'interface ITrueFiPool2 is IERC20 {\n', '    function initialize(\n', '        ERC20 _token,\n', '        ERC20 _stakingToken,\n', '        ITrueLender2 _lender,\n', '        I1Inch3 __1Inch,\n', '        ISAFU safu,\n', '        address __owner\n', '    ) external;\n', '\n', '    function token() external view returns (ERC20);\n', '\n', '    function oracle() external view returns (ITrueFiPoolOracle);\n', '\n', '    /**\n', '     * @dev Join the pool by depositing tokens\n', '     * @param amount amount of tokens to deposit\n', '     */\n', '    function join(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev borrow from pool\n', '     * 1. Transfer TUSD to sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function borrow(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev pay borrowed money back to pool\n', '     * 1. Transfer TUSD from sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function repay(uint256 currencyAmount) external;\n', '\n', '    /**\n', '     * @dev SAFU buys LoanTokens from the pool\n', '     */\n', '    function liquidate(ILoanToken2 loan) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/ILoanToken2.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {ERC20} from "contracts/common/UpgradeableERC20.sol";\n', '// import {ITrueFiPool2} from "contracts/truefi2/interface/ITrueFiPool2.sol";\n', '\n', 'interface ILoanToken2 is IERC20 {\n', '    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\n', '\n', '    function borrower() external view returns (address);\n', '\n', '    function amount() external view returns (uint256);\n', '\n', '    function term() external view returns (uint256);\n', '\n', '    function apy() external view returns (uint256);\n', '\n', '    function start() external view returns (uint256);\n', '\n', '    function lender() external view returns (address);\n', '\n', '    function debt() external view returns (uint256);\n', '\n', '    function pool() external view returns (ITrueFiPool2);\n', '\n', '    function profit() external view returns (uint256);\n', '\n', '    function status() external view returns (Status);\n', '\n', '    function getParameters()\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function fund() external;\n', '\n', '    function withdraw(address _beneficiary) external;\n', '\n', '    function settle() external;\n', '\n', '    function enterDefault() external;\n', '\n', '    function liquidate() external;\n', '\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function repay(address _sender, uint256 _amount) external;\n', '\n', '    function repayInFull(address _sender) external;\n', '\n', '    function reclaim() external;\n', '\n', '    function allowTransfer(address account, bool _status) external;\n', '\n', '    function repaid() external view returns (uint256);\n', '\n', '    function isRepaid() external view returns (bool);\n', '\n', '    function balance() external view returns (uint256);\n', '\n', '    function value(uint256 _balance) external view returns (uint256);\n', '\n', '    function token() external view returns (ERC20);\n', '\n', '    function version() external pure returns (uint8);\n', '}\n', '\n', '//interface IContractWithPool {\n', '//    function pool() external view returns (ITrueFiPool2);\n', '//}\n', '//\n', '//// Had to be split because of multiple inheritance problem\n', '//interface ILoanToken2 is ILoanToken, IContractWithPool {\n', '//\n', '//}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/IStakingPool.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IStakingPool is IERC20 {\n', '    function stakeSupply() external view returns (uint256);\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function payFee(uint256 amount, uint256 endTime) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi2/interface/IPoolFactory.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IPoolFactory {\n', '    function isPool(address pool) external view returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueRatingAgency.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ITrueRatingAgency {\n', '    function getResults(address id)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function submit(address id) external;\n', '\n', '    function retract(address id) external;\n', '\n', '    function yes(address id, uint256 stake) external;\n', '\n', '    function no(address id, uint256 stake) external;\n', '\n', '    function withdraw(address id, uint256 stake) external;\n', '\n', '    function claim(address id, address voter) external;\n', '}\n', '\n', '\n', '// Root file: contracts/truefi2/TrueLender2.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', '// import {ERC20} from "contracts/common/UpgradeableERC20.sol";\n', '// import {UpgradeableClaimable} from "contracts/common/UpgradeableClaimable.sol";\n', '// import {OneInchExchange} from "contracts/truefi2/libraries/OneInchExchange.sol";\n', '\n', '// import {ILoanToken2} from "contracts/truefi2/interface/ILoanToken2.sol";\n', '// import {IStakingPool} from "contracts/truefi/interface/IStakingPool.sol";\n', '// import {ITrueLender2} from "contracts/truefi2/interface/ITrueLender2.sol";\n', '// import {ITrueFiPool2, ITrueFiPoolOracle, I1Inch3} from "contracts/truefi2/interface/ITrueFiPool2.sol";\n', '// import {IPoolFactory} from "contracts/truefi2/interface/IPoolFactory.sol";\n', '// import {ITrueRatingAgency} from "contracts/truefi/interface/ITrueRatingAgency.sol";\n', '// import {IERC20WithDecimals} from "contracts/truefi2/interface/IERC20WithDecimals.sol";\n', '\n', '/**\n', ' * @title TrueLender v2.0\n', ' * @dev Loans management helper\n', ' * This contract is a bridge that helps to transfer funds from pool to the loans and back\n', ' * TrueLender holds all LoanTokens and may distribute them on pool exits\n', ' */\n', 'contract TrueLender2 is ITrueLender2, UpgradeableClaimable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '    using SafeERC20 for IERC20WithDecimals;\n', '    using OneInchExchange for I1Inch3;\n', '\n', '    // basis point for ratio\n', '    uint256 private constant BASIS_RATIO = 10000;\n', '\n', '    uint256 private constant ONE_INCH_PARTIAL_FILL_FLAG = 0x01;\n', '\n', '    // ================ WARNING ==================\n', '    // ===== THIS CONTRACT IS INITIALIZABLE ======\n', '    // === STORAGE VARIABLES ARE DECLARED BELOW ==\n', '    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\n', '    // ========= IN STORAGE CORRUPTION ===========\n', '\n', '    mapping(ITrueFiPool2 => ILoanToken2[]) public poolLoans;\n', '\n', '    // maximum amount of loans lender can handle at once\n', '    uint256 public maxLoans;\n', '\n', '    // which part of interest should be paid to the stakers\n', '    uint256 public fee;\n', '\n', '    IStakingPool public stakingPool;\n', '\n', '    IPoolFactory public factory;\n', '\n', '    ITrueRatingAgency public ratingAgency;\n', '\n', '    I1Inch3 public _1inch;\n', '\n', '    // Loan fees should be swapped for this token, deposited into the feePool\n', "    // and pool's LP tokens should be sent to the stakers\n", '    IERC20WithDecimals public feeToken;\n', '    ITrueFiPool2 public feePool;\n', '\n', '    // Minimal possible fee swap slippage\n', '    // basis precision: 10000 = 100%\n', '    uint256 public swapFeeSlippage;\n', '\n', '    // ===== Voting parameters =====\n', '\n', '    // How many votes are needed for a loan to be approved\n', '    uint256 public minVotes;\n', '\n', '    // Minimum ratio of yes votes to total votes for a loan to be approved\n', '    // basis precision: 10000 = 100%\n', '    uint256 public minRatio;\n', '\n', '    // minimum prediction market voting period\n', '    uint256 public votingPeriod;\n', '\n', '    // ======= STORAGE DECLARATION END ============\n', '\n', '    /**\n', '     * @dev Emitted when loans limit is changed\n', '     * @param maxLoans new maximum amount of loans\n', '     */\n', '    event LoansLimitChanged(uint256 maxLoans);\n', '\n', '    /**\n', '     * @dev Emitted when minVotes changed\n', '     * @param minVotes New minVotes\n', '     */\n', '    event MinVotesChanged(uint256 minVotes);\n', '\n', '    /**\n', '     * @dev Emitted when risk aversion changed\n', '     * @param minRatio New risk aversion factor\n', '     */\n', '    event MinRatioChanged(uint256 minRatio);\n', '\n', '    /**\n', '     * @dev Emitted when the minimum voting period is changed\n', '     * @param votingPeriod New voting period\n', '     */\n', '    event VotingPeriodChanged(uint256 votingPeriod);\n', '\n', '    /**\n', '     * @dev Emitted when loan fee is changed\n', '     * @param newFee New fee value in basis points\n', '     */\n', '    event FeeChanged(uint256 newFee);\n', '\n', '    /**\n', '     * @dev Emitted when loan fee pool is changed\n', '     * @param newFeePool New fee pool address\n', '     */\n', '    event FeePoolChanged(ITrueFiPool2 newFeePool);\n', '\n', '    /**\n', '     * @dev Emitted when a loan is funded\n', '     * @param loanToken LoanToken contract which was funded\n', '     * @param amount Amount funded\n', '     */\n', '    event Funded(address indexed pool, address loanToken, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted when funds are reclaimed from the LoanToken contract\n', '     * @param loanToken LoanToken from which funds were reclaimed\n', '     * @param amount Amount repaid\n', '     */\n', '    event Reclaimed(address indexed pool, address loanToken, uint256 amount);\n', '\n', '    /**\n', '     * @dev Can be only called by a pool\n', '     */\n', '    modifier onlyPool() {\n', '        require(factory.isPool(msg.sender), "TrueLender: Pool not created by the factory");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize the contract with parameters\n', '     * @param _stakingPool stkTRU address\n', '     * @param _factory PoolFactory address\n', '     * @param _ratingAgency TrueRatingAgencyV2 address\n', '     * @param __1inch 1Inch exchange address (0x11111112542d85b3ef69ae05771c2dccff4faa26 for mainnet)\n', '     */\n', '    function initialize(\n', '        IStakingPool _stakingPool,\n', '        IPoolFactory _factory,\n', '        ITrueRatingAgency _ratingAgency,\n', '        I1Inch3 __1inch\n', '    ) public initializer {\n', '        UpgradeableClaimable.initialize(msg.sender);\n', '\n', '        stakingPool = _stakingPool;\n', '        factory = _factory;\n', '        ratingAgency = _ratingAgency;\n', '        _1inch = __1inch;\n', '\n', '        swapFeeSlippage = 100; // 1%\n', '        minVotes = 15 * (10**6) * (10**8);\n', '        minRatio = 8000;\n', '        votingPeriod = 7 days;\n', '        fee = 1000;\n', '        maxLoans = 100;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new minimum voting period in credit rating market.\n', '     * Only owner can change parameters\n', '     * @param newVotingPeriod new minimum voting period\n', '     */\n', '    function setVotingPeriod(uint256 newVotingPeriod) external onlyOwner {\n', '        votingPeriod = newVotingPeriod;\n', '        emit VotingPeriodChanged(newVotingPeriod);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new minimal amount of votes for loan to be approved. Only owner can change parameters.\n', '     * @param newMinVotes New minVotes.\n', '     */\n', '    function setMinVotes(uint256 newMinVotes) external onlyOwner {\n', '        minVotes = newMinVotes;\n', '        emit MinVotesChanged(newMinVotes);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new yes to no votes ratio. Only owner can change parameters.\n', '     * @param newMinRatio New yes to no votes ratio\n', '     */\n', '    function setMinRatio(uint256 newMinRatio) external onlyOwner {\n', '        require(newMinRatio <= BASIS_RATIO, "TrueLender: minRatio cannot be more than 100%");\n', '        minRatio = newMinRatio;\n', '        emit MinRatioChanged(newMinRatio);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new loans limit. Only owner can change parameters.\n', '     * @param newLoansLimit New loans limit\n', '     */\n', '    function setLoansLimit(uint256 newLoansLimit) external onlyOwner {\n', '        maxLoans = newLoansLimit;\n', '        emit LoansLimitChanged(maxLoans);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new fee pool and fee token.\n', '     * Only owner can change parameters\n', '     * @param newFeePool new pool address\n', '     */\n', '    function setFeePool(ITrueFiPool2 newFeePool) external onlyOwner {\n', '        feeToken = IERC20WithDecimals(address(newFeePool.token()));\n', '        feePool = newFeePool;\n', '        emit FeePoolChanged(newFeePool);\n', '    }\n', '\n', '    /**\n', '     * @dev Set loan interest fee that goes to the stakers.\n', '     * @param newFee New loans limit\n', '     */\n', '    function setFee(uint256 newFee) external onlyOwner {\n', '        require(newFee <= BASIS_RATIO, "TrueLender: fee cannot be more than 100%");\n', '        fee = newFee;\n', '        emit FeeChanged(newFee);\n', '    }\n', '\n', '    /**\n', '     * @dev Get currently funded loans for a pool\n', '     * @param pool pool address\n', '     * @return result Array of loans currently funded\n', '     */\n', '    function loans(ITrueFiPool2 pool) public view returns (ILoanToken2[] memory result) {\n', '        result = poolLoans[pool];\n', '    }\n', '\n', '    /**\n', '     * @dev Fund a loan\n', '     * LoanToken should be created by the LoanFactory over the pool\n', '     * than was also created by the PoolFactory.\n', '     * Method should be called by the loan borrower\n', '     *\n', '     * When called, lender takes funds from the pool, gives it to the loan and holds all LoanTokens\n', '     * Origination fee is transferred to the stake\n', '     *\n', '     * @param loanToken LoanToken to fund\n', '     */\n', '    function fund(ILoanToken2 loanToken) external {\n', '        require(msg.sender == loanToken.borrower(), "TrueLender: Sender is not borrower");\n', '        ITrueFiPool2 pool = loanToken.pool();\n', '\n', '        require(factory.isPool(address(pool)), "TrueLender: Pool not created by the factory");\n', '        require(loanToken.token() == pool.token(), "TrueLender: Loan and pool token mismatch");\n', '        require(poolLoans[pool].length < maxLoans, "TrueLender: Loans number has reached the limit");\n', '\n', '        uint256 amount = loanToken.amount();\n', '        (uint256 start, uint256 no, uint256 yes) = ratingAgency.getResults(address(loanToken));\n', '\n', '        require(votingLastedLongEnough(start), "TrueLender: Voting time is below minimum");\n', '        require(votesThresholdReached(yes.add(no)), "TrueLender: Not enough votes given for the loan");\n', '        require(loanIsCredible(yes, no), "TrueLender: Loan risk is too high");\n', '\n', '        poolLoans[pool].push(loanToken);\n', '        pool.borrow(amount);\n', '        pool.token().safeApprove(address(loanToken), amount);\n', '        loanToken.fund();\n', '\n', '        emit Funded(address(pool), address(loanToken), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Loop through loan tokens for the pool and calculate theoretical value of all loans\n', '     * There should never be too many loans in the pool to run out of gas\n', '     * @param pool pool address\n', '     * @return Theoretical value of all the loans funded by this strategy\n', '     */\n', '    function value(ITrueFiPool2 pool) external override view returns (uint256) {\n', '        ILoanToken2[] storage _loans = poolLoans[pool];\n', '        uint256 totalValue;\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            totalValue = totalValue.add(_loans[index].value(_loans[index].balanceOf(address(this))));\n', '        }\n', '        return totalValue;\n', '    }\n', '\n', '    /**\n', '     * @dev For settled loans, redeem LoanTokens for underlying funds\n', '     * @param loanToken Loan to reclaim capital from (must be previously funded)\n', '     */\n', '    function reclaim(ILoanToken2 loanToken, bytes calldata data) external {\n', '        ITrueFiPool2 pool = loanToken.pool();\n', '        ILoanToken2.Status status = loanToken.status();\n', '        require(status >= ILoanToken2.Status.Settled, "TrueLender: LoanToken is not closed yet");\n', '\n', '        if (status != ILoanToken2.Status.Settled) {\n', '            require(msg.sender == owner(), "TrueLender: Only owner can reclaim from defaulted loan");\n', '        }\n', '\n', '        // find the token, repay loan and remove loan from loan array\n', '        ILoanToken2[] storage _loans = poolLoans[pool];\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            if (_loans[index] == loanToken) {\n', '                _loans[index] = _loans[_loans.length - 1];\n', '                _loans.pop();\n', '\n', '                uint256 fundsReclaimed = _redeemAndRepay(loanToken, pool, data);\n', '                emit Reclaimed(address(pool), address(loanToken), fundsReclaimed);\n', '                return;\n', '            }\n', '        }\n', '        // If we reach this, it means loanToken was not present in _loans array\n', '        // This prevents invalid loans from being reclaimed\n', '        revert("TrueLender: This loan has not been funded by the lender");\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to redeem funds from `loanToken` and repay them into the `pool`\n', '     * @param loanToken Loan to reclaim capital from\n', '     * @param pool Pool from which the loan was funded\n', '     */\n', '    function _redeemAndRepay(\n', '        ILoanToken2 loanToken,\n', '        ITrueFiPool2 pool,\n', '        bytes calldata data\n', '    ) internal returns (uint256) {\n', '        // call redeem function on LoanToken\n', '        uint256 balanceBefore = pool.token().balanceOf(address(this));\n', '        loanToken.redeem(loanToken.balanceOf(address(this)));\n', '        uint256 balanceAfter = pool.token().balanceOf(address(this));\n', '\n', '        // gets reclaimed amount and pays back to pool\n', '        uint256 fundsReclaimed = balanceAfter.sub(balanceBefore);\n', '\n', '        uint256 feeAmount = 0;\n', '        if (address(feeToken) != address(0)) {\n', '            // swap fee for feeToken\n', '            feeAmount = _swapFee(pool, loanToken, data);\n', '        }\n', '\n', '        pool.token().safeApprove(address(pool), fundsReclaimed.sub(feeAmount));\n', '        pool.repay(fundsReclaimed.sub(feeAmount));\n', '\n', '        if (address(feeToken) != address(0)) {\n', '            // join pool and reward stakers\n', '            _transferFeeToStakers();\n', '        }\n', '        return fundsReclaimed;\n', '    }\n', '\n', '    /// @dev Swap `token` for `feeToken` on 1inch\n', '    function _swapFee(\n', '        ITrueFiPool2 pool,\n', '        ILoanToken2 loanToken,\n', '        bytes calldata data\n', '    ) internal returns (uint256) {\n', '        uint256 feeAmount = loanToken.debt().sub(loanToken.amount()).mul(fee).div(BASIS_RATIO);\n', '        IERC20WithDecimals token = IERC20WithDecimals(address(pool.token()));\n', '        if (token == feeToken) {\n', '            return feeAmount;\n', '        }\n', '        if (feeAmount == 0) {\n', '            return 0;\n', '        }\n', '        (I1Inch3.SwapDescription memory swap, uint256 balanceDiff) = _1inch.exchange(data);\n', '        uint256 expectedDiff = pool.oracle().tokenToUsd(feeAmount).mul(10**feeToken.decimals()).div(1 ether);\n', '\n', '        require(swap.srcToken == address(token), "TrueLender: Source token is not same as pool\'s token");\n', '        require(swap.dstToken == address(feeToken), "TrueLender: Destination token is not fee token");\n', '        require(swap.dstReceiver == address(this), "TrueLender: Receiver is not lender");\n', '        require(swap.amount == feeAmount, "TrueLender: Incorrect fee swap amount");\n', '        require(swap.flags & ONE_INCH_PARTIAL_FILL_FLAG == 0, "TrueLender: Partial fill is not allowed");\n', '        require(\n', '            balanceDiff >= expectedDiff.mul(BASIS_RATIO.sub(swapFeeSlippage)).div(BASIS_RATIO),\n', '            "TrueLender: Fee returned from swap is too small"\n', '        );\n', '\n', '        return feeAmount;\n', '    }\n', '\n', '    /// @dev Deposit feeToken to pool and transfer LP tokens to the stakers\n', '    function _transferFeeToStakers() internal {\n', '        uint256 amount = feeToken.balanceOf(address(this));\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '        feeToken.safeApprove(address(feePool), amount);\n', '        feePool.join(amount);\n', '        feePool.transfer(address(stakingPool), feePool.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a basket of tokens held by the pool\n', '     * Function is expected to be called by the pool\n', '     * When exiting the pool, the pool contract calls this function\n', '     * to withdraw a fraction of all the loans held by the pool\n', "     * Loop through recipient's share of LoanTokens and calculate versus total per loan.\n", '     * There should never be too many loans in the pool to run out of gas\n', '     *\n', '     * @param recipient Recipient of basket\n', '     * @param numerator Numerator of fraction to withdraw\n', '     * @param denominator Denominator of fraction to withdraw\n', '     */\n', '    function distribute(\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) external override onlyPool {\n', '        _distribute(recipient, numerator, denominator, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow pool to transfer all LoanTokens to the SAFU in case of liquidation\n', '     * @param loan LoanToken address\n', '     * @param recipient expected to be SAFU address\n', '     */\n', '    function transferAllLoanTokens(ILoanToken2 loan, address recipient) external override onlyPool {\n', '        _transferAllLoanTokens(loan, recipient);\n', '    }\n', '\n', '    function _transferAllLoanTokens(ILoanToken2 loan, address recipient) internal {\n', '        // find the token, transfer to SAFU and remove loan from loans list\n', '        ILoanToken2[] storage _loans = poolLoans[loan.pool()];\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            if (_loans[index] == loan) {\n', '                _loans[index] = _loans[_loans.length - 1];\n', '                _loans.pop();\n', '\n', '                _transferLoan(loan, recipient, 1, 1);\n', '                return;\n', '            }\n', '        }\n', '        // If we reach this, it means loanToken was not present in _loans array\n', '        // This prevents invalid loans from being reclaimed\n', '        revert("TrueLender: This loan has not been funded by the lender");\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan has been in the credit market long enough\n', '     * @param start Timestamp at which rating began\n', '     * @return Whether a loan has been rated for long enough\n', '     */\n', '    function votingLastedLongEnough(uint256 start) public view returns (bool) {\n', '        return start.add(votingPeriod) <= block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan has enough votes to be approved\n', '     * @param votes Total number of votes\n', '     * @return Whether a loan has reached the required voting threshold\n', '     */\n', '    function votesThresholdReached(uint256 votes) public view returns (bool) {\n', '        return votes >= minVotes;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if yes to no votes ratio reached the minimum rate\n', '     * @param yesVotes Number of YES votes in credit market\n', '     * @param noVotes Number of NO votes in credit market\n', '     */\n', '    function loanIsCredible(uint256 yesVotes, uint256 noVotes) public view returns (bool) {\n', '        uint256 totalVotes = yesVotes.add(noVotes);\n', '        return yesVotes >= totalVotes.mul(minRatio).div(BASIS_RATIO);\n', '    }\n', '\n', '    /// @dev Helper used in tests\n', '    function _distribute(\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator,\n', '        address pool\n', '    ) internal {\n', '        ILoanToken2[] storage _loans = poolLoans[ITrueFiPool2(pool)];\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            _transferLoan(_loans[index], recipient, numerator, denominator);\n', '        }\n', '    }\n', '\n', '    // @dev Transfer (numerator/denominator)*balance of loan to the recipient\n', '    function _transferLoan(\n', '        ILoanToken2 loan,\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) internal {\n', '        loan.transfer(recipient, numerator.mul(loan.balanceOf(address(this))).div(denominator));\n', '    }\n', '}']