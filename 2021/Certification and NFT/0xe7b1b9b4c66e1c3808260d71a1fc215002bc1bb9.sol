['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-10\n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface I{\n', '\tfunction getPair(address t, address t1) external view returns(address);\n', '\tfunction createPair(address t, address t1) external returns(address);\n', '\tfunction init(uint Eth,address pair) external;\n', '\tfunction deposit() external payable;\n', '\tfunction transfer(address to, uint value) external returns(bool);\n', '\tfunction mint(address to) external returns(uint liquidity);\n', '}\n', '\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '// Author: Sam Porter\n', "// With LGE it's now possible to create fairer distribution and fund promising projects without VC vultures at all.\n", '// Non-upgradeable, not owned, liquidity is being created automatically on first transaction after last block of LGE.\n', "// Founders' liquidity is not locked, instead an incentive to keep it is introduced.\n", '// The Event lasts for ~2 months to ensure fair distribution.\n', '// 0,5% of contributed Eth goes to developer for earliest development expenses including audits and bug bounties.\n', '// Blockchain needs no VCs, no authorities.\n', '\n', '//import "./I.sol";\n', '\n', 'contract FoundingEvent {\n', '\tmapping(address => uint) public contributions;\n', '\taddress payable private _deployer;\n', '\tbool private _lgeOngoing;\n', '\taddress private _staking;\n', '\tuint88 private _ETHDeposited;\n', '\tbool private _notInit;\n', '\n', '\tconstructor() {_deployer = msg.sender;_notInit = true;_lgeOngoing = true;}\n', '\tfunction init(address c) public {require(msg.sender == _deployer && _notInit == true);delete _notInit; _staking = c;}\n', '\n', '\tfunction depositEth() external payable {\n', '\t\trequire(_lgeOngoing == true);\n', '\t\tuint amount = msg.value;\n', '\t\tuint deployerShare = amount/200; amount -= deployerShare; _deployer.transfer(deployerShare);\n', '\t\tcontributions[msg.sender] += amount;\n', '\t\tif (block.number >= 12638999) {_createLiquidity();}\n', '\t}\n', '\n', '\tfunction _createLiquidity() internal {\n', '\t\taddress WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\t\taddress token = 0xdff92dCc99150Df99D54BC3291bD7e5522bB1Edd;// hardcoded token address after erc20 will be deployed\n', '\t\taddress staking = _staking;\n', '\t\taddress factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\t\taddress tknETHLP = I(factory).getPair(token,WETH);\n', '\t\tif (tknETHLP == address(0)) {tknETHLP=I(factory).createPair(token, WETH);}\n', '\t\tuint ETHDeposited = address(this).balance;\n', '\t\tI(WETH).deposit{value: ETHDeposited}();\n', '\t\tI(token).transfer(tknETHLP, 1e24);\n', '\t\tI(WETH).transfer(tknETHLP, ETHDeposited);\n', '\t\tI(tknETHLP).mint(staking);\n', '\t\tI(staking).init(ETHDeposited, tknETHLP);\n', '\t\tdelete _staking; delete _lgeOngoing; delete _deployer;\n', '\t}\n', '}']