['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.8.4 <0.9.0;\n', '// stable coin based grants in next implementation\n', '// i am thinking of moving all beneficiary logic out of treasury in next implementation\n', 'interface I{function transfer(address to, uint value) external returns(bool);function balanceOf(address) external returns(uint);}\n', 'contract Treasury {\n', '\taddress private _governance;\n', '\tuint8 private _governanceSet;\n', '\tbool private _init;\n', '\n', '\tstruct Beneficiary {bool solid; uint88 amount; uint32 lastClaim; uint16 emission;}\n', '\tmapping (address => Beneficiary) public bens;\n', '\n', '\tfunction init() public {\n', '\t\trequire(_init == false && msg.sender == 0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2);\n', '\t\t_init=true;\n', '\t\t_governance = msg.sender;\n', '\t\tsetBeneficiary(0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2,true,32857142857e12,0,1e4);\n', '\t\tsetBeneficiary(0x174F4EbE08a7193833e985d4ef0Ad6ce50F7cBc4,true,28857142857e12,0,1e4);\n', '\t\tsetBeneficiary(0xFA9675E41a9457E8278B2701C504cf4d132Fe2c2,true,25285714286e12,0,1e4);\n', '\t}\n', '// so we assume that not only beneficiaries but also the governance is malicious\n', '// the function can overwrite some existing beneficiaries parameters\n', '// or we do it differently: a boolean that makes a grant editable/removable/irremovable, so that governance can express trust,\n', "// because if a malicious beneficiary scams governance, governance can ruin that beneficiary' reputation,\n", "// however if malicious governance scams a beneficiary, beneficiary can't do anything\n", '// best solution is yet to be found, design could change\n', '// another way could be is to disallow editing/removing grants at all but give those grants in small parts instead\n', '// so future small parts could be cancelled if required\n', '\tfunction setBeneficiary(address a, bool solid, uint amount, uint lastClaim, uint emission) public {\n', '\t\trequire(msg.sender == _governance && bens[a].solid == false && amount<=4e22 && lastClaim < block.number+1e6 && emission >= 1e2 && emission <=1e4);\n', '\t\tif(lastClaim < block.number) {lastClaim = block.number;}\n', '\t\tif(lastClaim < 12510400) {lastClaim = 12510400;}\n', '\t\tif(lastClaim > 12510400 && lastClaim < 1264e4) {lastClaim = 1264e4;}//so it adds even more convenience\n', '\t\tif (solid == true) {bens[a].solid = true;}\n', '\t\tuint lc = bens[a].lastClaim;\n', '\t\tif (lc == 0) {bens[a].lastClaim = uint32(lastClaim+129600);} // this 3 weeks delay disallows deployer to be malicious, can be removed after the governance will have control over treasury\n', '\t\tif (bens[a].amount == 0 && lc != 0) {bens[a].lastClaim = uint32(lastClaim);}\n', '\t\tbens[a].amount = uint88(amount);\n', '\t\tbens[a].emission = uint16(emission);\n', '\t}\n', '\n', '\tfunction getBeneficiaryRewards() external{\n', '\t\tuint lastClaim = bens[msg.sender].lastClaim; uint rate = 1e11; uint quarter = block.number/1e7;\n', '\t\tif (quarter>1) { for (uint i=1;i<quarter;i++) {rate=rate*3/4;} }\n', '\t\tuint toClaim = (block.number - lastClaim)*bens[msg.sender].emission*rate;\n', '\t\tbens[msg.sender].lastClaim = uint32(block.number);\n', '\t\tbens[msg.sender].amount -= uint88(toClaim);\n', '\t\tI(0x1565616E3994353482Eb032f7583469F5e0bcBEC).transfer(msg.sender, toClaim);\n', '\t}\n', '\n', '// these checks leave less room for deployer to be malicious\n', '\tfunction getRewards(address a,uint amount) external{ //for posters, providers and oracles\n', '\t\trequire(msg.sender == 0x109533F9e10d4AEEf6d74F1e2D59a9ed11266f27 || msg.sender == 0xEcCD8639eA31FAfe9e9646Fbf31310Ec489ad1C8 || msg.sender == 0xde97e5a2fAe859ac24F70D1f251B82D6A9B77296);\n', '\t\tif (msg.sender == 0xEcCD8639eA31FAfe9e9646Fbf31310Ec489ad1C8) {// if job market(posters)\n', '\t\t\t\tuint withd =  999e24 - I(0x1565616E3994353482Eb032f7583469F5e0bcBEC).balanceOf(address(this));// balanceOf(treasury)\n', '\t\t\t\tuint allowed = (block.number - 1264e4)*168e15 - withd;//40% of all emission max\n', '\t\t\t\trequire(amount <= allowed);\n', '\t\t}\n', '\t\tif (msg.sender == 0xde97e5a2fAe859ac24F70D1f251B82D6A9B77296) {// if oracle registry\n', '\t\t\t\tuint withd =  999e24 - I(0x1565616E3994353482Eb032f7583469F5e0bcBEC).balanceOf(address(this));// balanceOf(treasury)\n', '\t\t\t\tuint allowed = (block.number - 1264e4)*42e15 - withd;//10% of all emission max, maybe actually should be less, depends on stuff\n', '\t\t\t\trequire(amount <= allowed);\n', '\t\t}\n', '\t\tI(0x1565616E3994353482Eb032f7583469F5e0bcBEC).transfer(a, amount);\n', '\t}\n', '\n', '\tfunction setGovernance(address a) public {require(_governanceSet < 3 && msg.sender == _governance);_governanceSet += 1;_governance = a;}\n', '}']