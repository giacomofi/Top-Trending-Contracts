['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.1;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Genesis_Voting is Ownable {\n', '\n', '  struct proposal {\n', '    uint256 votes_for;\n', '    uint256 votes_against;\n', '    uint256 opens;\n', '    uint256 expires;\n', '    bool valid_vote;\n', '  }\n', '\n', '  mapping(address => mapping(uint16 => bool)) public user_votes;\n', '  mapping(uint16 => proposal) public proposals;\n', '\n', '  address public token_address;\n', '  uint16 public total_proposals;\n', '\n', '  constructor(address _token_address) {\n', '    token_address = _token_address;\n', '    emit Token_Address_Changed(_token_address);\n', '  }\n', '\n', '  event Proposal_Created(uint16 indexed proposal_id, string url, uint256 opens, uint256 expires);\n', '  event Token_Address_Changed(address token_address);\n', '  event Vote_Cast(uint16 indexed proposal_id, address indexed user, uint256 user_balance);\n', '\n', '  function create_proposal(string calldata url, uint256 opens, uint256 expires) public onlyOwner {\n', '    require(opens > block.timestamp, "Proposal cannot start in the past");\n', '    require(expires > opens, "Proposal cannot end before it starts");\n', '    proposals[total_proposals] = proposal(0, 0, opens, expires, false);\n', '    emit Proposal_Created(total_proposals, url, opens, expires);\n', '    total_proposals += 1;\n', '  }\n', '\n', '  function get_proposal_result(uint16 proposal_id) public view returns (bool) {\n', '    require(proposals[proposal_id].expires < block.timestamp, "Proposal not finished");\n', '    require(proposals[proposal_id].valid_vote, "Insufficient participation");\n', '    return proposals[proposal_id].votes_for > proposals[proposal_id].votes_against;\n', '  }\n', '\n', '  function vote(uint16 proposal_id, bool vote_choice) public {\n', '    uint256 user_balance = IERC20(token_address).balanceOf(msg.sender);\n', '    require(user_balance > 0, "User has no tokens");\n', '    require(proposals[proposal_id].opens < block.timestamp, "Proposal not started");\n', '    require(proposals[proposal_id].expires > block.timestamp, "Proposal invalid or expired");\n', '    require(!user_votes[msg.sender][proposal_id], "User has already voted");\n', '    if(!proposals[proposal_id].valid_vote && proposals[proposal_id].votes_for + proposals[proposal_id].votes_against > 0){\n', '      // someone else already voted\n', '      proposals[proposal_id].valid_vote = true;\n', '    }\n', '\n', '    if(vote_choice) {\n', '      proposals[proposal_id].votes_for += user_balance;\n', '    } else {\n', '      proposals[proposal_id].votes_against += user_balance;\n', '    }\n', '\n', '    user_votes[msg.sender][proposal_id] = true;\n', '    emit Vote_Cast(proposal_id, msg.sender, user_balance);\n', '  }\n', '\n', '  function update_token_address(address _token_address) onlyOwner public {\n', '    token_address = _token_address;\n', '    emit Token_Address_Changed(_token_address);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMWEMMMMMMMMMMMMMMMMMMMMMMMMMM...............MMMMMMMMMMMMM\n', 'MMMMMMLOVEMMMMMMMMMMMMMMMMMMMMMM...............MMMMMMMMMMMMM\n', 'MMMMMMMMMMHIXELMMMMMMMMMMMM....................MMMMMNNMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMM....................MMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMM88=........................+MMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMM....................MMMMM...MMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMM....................MMMMM...MMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMM.........................MM+..MMM....+MMMMMMMMMM\n', 'MMMMMMMMMNMM...................... ..MM?..MMM.. .+MMMMMMMMMM\n', 'MMMMNDDMM+........................+MM........MM..+MMMMMMMMMM\n', 'MMMMZ.............................+MM....................MMM\n', 'MMMMZ.............................+MM....................MMM\n', 'MMMMZ.............................+MM....................DDD\n', 'MMMMZ.............................+MM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MMMMZ.............................+MM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MM..............................MMZ....ZMMMMMMMMMMMMMMMMMMMM\n', 'MM............................MM.......ZMMMMMMMMMMMMMMMMMMMM\n', 'MM............................MM.......ZMMMMMMMMMMMMMMMMMMMM\n', 'MM......................ZMMMMM.......MMMMMMMMMMMMMMMMMMMMMMM\n', 'MM............... ......ZMMMMM.... ..MMMMMMMMMMMMMMMMMMMMMMM\n', 'MM...............MMMMM88~.........+MM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MM.......$DDDDDDD.......$DDDDD..DDNMM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MM.......$DDDDDDD.......$DDDDD..DDNMM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MM.......ZMMMMMMM.......ZMMMMM..MMMMM..ZMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMM+.......MMMMM88NMMMMM..MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMM+.......MMMMM88NMMMMM..MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/']