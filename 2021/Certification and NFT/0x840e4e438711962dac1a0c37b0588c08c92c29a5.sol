['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-18\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\n', '    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        // If the rewards are null or if the time of the last update is in the future or present, return 0\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '\n', '        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '\n', '        // If too much time elapsed, return the max reward\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '\n', '        // Calculate the reward\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '\n', '        // If the reward is higher than max, set it to max\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '\n', '        // Determine the actual receiver and send funds\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract OracleLike {\n', '    function getResultWithValidity() virtual external view returns (uint256, bool);\n', '}\n', 'abstract contract AccountingEngineLike {\n', '    function modifyParameters(bytes32, uint256) virtual external;\n', '}\n', '\n', 'contract DebtAuctionInitialParameterSetter is IncreasingTreasuryReimbursement {\n', '    // --- Variables ---\n', '    // Delay between updates after which the reward starts to increase\n', '    uint256 public updateDelay;\n', '    // Last timestamp when the median was updated\n', '    uint256 public lastUpdateTime;                                              // [unix timestamp]\n', '    // Min amount of protocol tokens that should be offered in the auction\n', '    uint256 public minProtocolTokenAmountOffered;                               // [wad]\n', '    // Premium subtracted from the new amount of protocol tokens to be offered\n', '    uint256 public protocolTokenPremium;                                        // [thousand]\n', '    // Value of the initial debt bid\n', '    uint256 public bidTargetValue;                                              // [wad]\n', '\n', '    // The protocol token oracle\n', '    OracleLike           public protocolTokenOrcl;\n', '    // The system coin oracle\n', '    OracleLike           public systemCoinOrcl;\n', '    // The accounting engine contract\n', '    AccountingEngineLike public accountingEngine;\n', '\n', '    // --- Events ---\n', '    event SetDebtAuctionInitialParameters(uint256 debtAuctionBidSize, uint256 initialDebtAuctionMintedTokens);\n', '\n', '    constructor(\n', '      address protocolTokenOrcl_,\n', '      address systemCoinOrcl_,\n', '      address accountingEngine_,\n', '      address treasury_,\n', '      uint256 updateDelay_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_,\n', '      uint256 minProtocolTokenAmountOffered_,\n', '      uint256 protocolTokenPremium_,\n', '      uint256 bidTargetValue_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        require(minProtocolTokenAmountOffered_ > 0, "DebtAuctionInitialParameterSetter/null-min-prot-amt");\n', '        require(protocolTokenPremium_ < THOUSAND, "DebtAuctionInitialParameterSetter/invalid-prot-token-premium");\n', '        require(both(both(protocolTokenOrcl_ != address(0), systemCoinOrcl_ != address(0)), accountingEngine_ != address(0)), "DebtAuctionInitialParameterSetter/invalid-contract-address");\n', '        require(updateDelay_ > 0, "DebtAuctionInitialParameterSetter/null-update-delay");\n', '        require(bidTargetValue_ > 0, "DebtAuctionInitialParameterSetter/invalid-bid-target-value");\n', '\n', '        protocolTokenOrcl              = OracleLike(protocolTokenOrcl_);\n', '        systemCoinOrcl                 = OracleLike(systemCoinOrcl_);\n', '        accountingEngine               = AccountingEngineLike(accountingEngine_);\n', '\n', '        minProtocolTokenAmountOffered  = minProtocolTokenAmountOffered_;\n', '        protocolTokenPremium           = protocolTokenPremium_;\n', '        updateDelay                    = updateDelay_;\n', '        bidTargetValue                 = bidTargetValue_;\n', '\n', '        emit ModifyParameters(bytes32("protocolTokenOrcl"), protocolTokenOrcl_);\n', '        emit ModifyParameters(bytes32("systemCoinOrcl"), systemCoinOrcl_);\n', '        emit ModifyParameters(bytes32("accountingEngine"), accountingEngine_);\n', '        emit ModifyParameters(bytes32("bidTargetValue"), bidTargetValue);\n', '        emit ModifyParameters(bytes32("minProtocolTokenAmountOffered"), minProtocolTokenAmountOffered);\n', '        emit ModifyParameters(bytes32("protocolTokenPremium"), protocolTokenPremium);\n', '        emit ModifyParameters(bytes32("updateDelay"), updateDelay);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '      assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Math ---\n', '    uint internal constant THOUSAND = 10 ** 3;\n', '    function divide(uint x, uint y) internal pure returns (uint z) {\n', '        require(y > 0, "divide-null-y");\n', '        z = x / y;\n', '        require(z <= x);\n', '    }\n', '\n', '    // --- Administration ---\n', '    /*\n', '    * @notice Modify the address of a contract integrated with this setter\n', '    * @param parameter Name of the contract to set a new address for\n', '    * @param addr The new address\n', '    */\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        require(addr != address(0), "DebtAuctionInitialParameterSetter/null-addr");\n', '        if (parameter == "protocolTokenOrcl") protocolTokenOrcl = OracleLike(addr);\n', '        else if (parameter == "systemCoinOrcl") systemCoinOrcl = OracleLike(addr);\n', '        else if (parameter == "accountingEngine") accountingEngine = AccountingEngineLike(addr);\n', '        else if (parameter == "treasury") {\n', '          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), "DebtAuctionInitialParameterSetter/treasury-coin-not-set");\n', '      \t  treasury = StabilityFeeTreasuryLike(addr);\n', '        }\n', '        else revert("DebtAuctionInitialParameterSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, addr);\n', '    }\n', '    /*\n', '    * @notice Modify a uint256 parameter\n', '    * @param parameter Name of the parameter\n', '    * @param addr The new parameter value\n', '    */\n', '    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n', '        if (parameter == "minProtocolTokenAmountOffered") {\n', '          require(val > 0, "DebtAuctionInitialParameterSetter/null-min-prot-amt");\n', '          minProtocolTokenAmountOffered = val;\n', '        }\n', '        else if (parameter == "protocolTokenPremium") {\n', '          require(val < THOUSAND, "DebtAuctionInitialParameterSetter/invalid-prot-token-premium");\n', '          protocolTokenPremium = val;\n', '        }\n', '        else if (parameter == "baseUpdateCallerReward") {\n', '            require(val <= maxUpdateCallerReward, "DebtAuctionInitialParameterSetter/invalid-base-caller-reward");\n', '            baseUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(val >= baseUpdateCallerReward, "DebtAuctionInitialParameterSetter/invalid-max-reward");\n', '          maxUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(val >= RAY, "DebtAuctionInitialParameterSetter/invalid-reward-increase");\n', '          perSecondCallerRewardIncrease = val;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(val > 0, "DebtAuctionInitialParameterSetter/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = val;\n', '        }\n', '        else if (parameter == "updateDelay") {\n', '          require(val > 0, "DebtAuctionInitialParameterSetter/null-update-delay");\n', '          updateDelay = val;\n', '        }\n', '        else if (parameter == "bidTargetValue") {\n', '          require(val > 0, "DebtAuctionInitialParameterSetter/invalid-bid-target-value");\n', '          bidTargetValue = val;\n', '        }\n', '        else if (parameter == "lastUpdateTime") {\n', '          require(val > now, "DebtAuctionInitialParameterSetter/");\n', '          lastUpdateTime = val;\n', '        }\n', '        else revert("DebtAuctionInitialParameterSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, val);\n', '    }\n', '\n', '    // --- Setter ---\n', '    /*\n', '    * @notify View function that returns the new, initial debt auction bid\n', '    * @returns debtAuctionBidSize The new, initial debt auction bid\n', '    */\n', '    function getNewDebtBid() external view returns (uint256 debtAuctionBidSize) {\n', '        // Get token price\n', '        (uint256 systemCoinPrice, bool validSysCoinPrice)   = systemCoinOrcl.getResultWithValidity();\n', '        require(both(systemCoinPrice > 0, validSysCoinPrice), "DebtAuctionInitialParameterSetter/invalid-price");\n', '\n', '        // Compute the bid size\n', '        debtAuctionBidSize = divide(multiply(multiply(bidTargetValue, WAD), RAY), systemCoinPrice);\n', '        if (debtAuctionBidSize < RAY) {\n', '          debtAuctionBidSize = RAY;\n', '        }\n', '    }\n', '    /*\n', '    * @notify View function that returns the initial amount of protocol tokens which should be offered in a debt auction\n', '    * @returns debtAuctionMintedTokens The initial amount of protocol tokens that should be offered in a debt auction\n', '    */\n', '    function getRawProtocolTokenAmount() external view returns (uint256 debtAuctionMintedTokens) {\n', '        // Get token price\n', '        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\n', '        require(both(validProtocolPrice, protocolTknPrice > 0), "DebtAuctionInitialParameterSetter/invalid-price");\n', '\n', '        // Compute the amont of protocol tokens without the premium\n', '        debtAuctionMintedTokens = divide(multiply(bidTargetValue, WAD), protocolTknPrice);\n', '\n', '        // Take into account the minimum amount of protocol tokens to offer\n', '        if (debtAuctionMintedTokens < minProtocolTokenAmountOffered) {\n', '          debtAuctionMintedTokens = minProtocolTokenAmountOffered;\n', '        }\n', '    }\n', '    /*\n', '    * @notify View function that returns the initial amount of protocol tokens with a premium added on top\n', '    * @returns debtAuctionMintedTokens The initial amount of protocol tokens with a premium added on top\n', '    */\n', '    function getPremiumAdjustedProtocolTokenAmount() external view returns (uint256 debtAuctionMintedTokens) {\n', '        // Get token price\n', '        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\n', '        require(both(validProtocolPrice, protocolTknPrice > 0), "DebtAuctionInitialParameterSetter/invalid-price");\n', '\n', '        // Compute the amont of protocol tokens without the premium and apply it\n', '        debtAuctionMintedTokens = divide(multiply(divide(multiply(bidTargetValue, WAD), protocolTknPrice), protocolTokenPremium), THOUSAND);\n', '\n', '        // Take into account the minimum amount of protocol tokens to offer\n', '        if (debtAuctionMintedTokens < minProtocolTokenAmountOffered) {\n', '          debtAuctionMintedTokens = minProtocolTokenAmountOffered;\n', '        }\n', '    }\n', '    /*\n', '    * @notify Set the new debtAuctionBidSize and initialDebtAuctionMintedTokens inside the AccountingEngine\n', '    * @param feeReceiver The address that will receive the reward for setting new params\n', '    */\n', '    function setDebtAuctionInitialParameters(address feeReceiver) external {\n', '        // Check delay between calls\n', '        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), "DebtAuctionInitialParameterSetter/wait-more");\n', "        // Get the caller's reward\n", '        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\n', '        // Store the timestamp of the update\n', '        lastUpdateTime = now;\n', '\n', '        // Get token prices\n', '        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\n', '        (uint256 systemCoinPrice, bool validSysCoinPrice)   = systemCoinOrcl.getResultWithValidity();\n', '        require(both(validProtocolPrice, validSysCoinPrice), "DebtAuctionInitialParameterSetter/invalid-prices");\n', '        require(both(protocolTknPrice > 0, systemCoinPrice > 0), "DebtAuctionInitialParameterSetter/null-prices");\n', '\n', '        // Compute the scaled bid target value\n', '        uint256 scaledBidTargetValue = multiply(bidTargetValue, WAD);\n', '\n', '        // Compute the amont of protocol tokens without the premium\n', '        uint256 initialDebtAuctionMintedTokens = divide(scaledBidTargetValue, protocolTknPrice);\n', '\n', '        // Apply the premium\n', '        initialDebtAuctionMintedTokens = divide(multiply(initialDebtAuctionMintedTokens, protocolTokenPremium), THOUSAND);\n', '\n', '        // Take into account the minimum amount of protocol tokens to offer\n', '        if (initialDebtAuctionMintedTokens < minProtocolTokenAmountOffered) {\n', '          initialDebtAuctionMintedTokens = minProtocolTokenAmountOffered;\n', '        }\n', '\n', '        // Compute the debtAuctionBidSize as a RAD taking into account the minimum amount to bid\n', '        uint256 debtAuctionBidSize = divide(multiply(scaledBidTargetValue, RAY), systemCoinPrice);\n', '        if (debtAuctionBidSize < RAY) {\n', '          debtAuctionBidSize = RAY;\n', '        }\n', '\n', '        // Set the debt bid and the associated protocol token amount in the accounting engine\n', '        accountingEngine.modifyParameters("debtAuctionBidSize", debtAuctionBidSize);\n', '        accountingEngine.modifyParameters("initialDebtAuctionMintedTokens", initialDebtAuctionMintedTokens);\n', '\n', '        // Emit an event\n', '        emit SetDebtAuctionInitialParameters(debtAuctionBidSize, initialDebtAuctionMintedTokens);\n', '\n', '        // Pay the caller for updating the rate\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '    /*\n', '    * @notice Manually set initial debt auction parameters\n', '    * @param debtAuctionBidSize The initial debt auction bid size\n', '    * @param initialDebtAuctionMintedTokens The initial amount of protocol tokens to mint in exchange for debtAuctionBidSize system coins\n', '    */\n', '    function manualSetDebtAuctionParameters(uint256 debtAuctionBidSize, uint256 initialDebtAuctionMintedTokens)\n', '      external isAuthorized {\n', '        accountingEngine.modifyParameters("debtAuctionBidSize", debtAuctionBidSize);\n', '        accountingEngine.modifyParameters("initialDebtAuctionMintedTokens", initialDebtAuctionMintedTokens);\n', '        emit SetDebtAuctionInitialParameters(debtAuctionBidSize, initialDebtAuctionMintedTokens);\n', '    }\n', '}']