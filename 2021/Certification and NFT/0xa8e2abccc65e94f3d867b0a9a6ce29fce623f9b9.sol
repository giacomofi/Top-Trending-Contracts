['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.4;\n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    \n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface cyToken {\n', '    function borrow(uint borrowAmount) external returns (uint);\n', '    function repayBorrow(uint repayAmount) external returns (uint);\n', '    function underlying() external view returns (address);\n', '    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n', '}\n', '\n', 'contract ibAgreement {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address public immutable executor;\n', '    address public immutable borrower;\n', '    cyToken public immutable cy;\n', '    IERC20 public immutable underlying;\n', '    \n', '    constructor(address _executor, address _borrower, address _cy) {\n', '        executor = _executor;\n', '        borrower = _borrower;\n', '        cy = cyToken(_cy);\n', '        underlying = IERC20(cyToken(_cy).underlying());\n', '    }\n', '    \n', '    function debt() external view returns (uint borrowBalance) {\n', '        (,,borrowBalance,) = cy.getAccountSnapshot(address(this));\n', '    }\n', '    \n', '    function seize(IERC20 token, uint amount) external {\n', '        require(msg.sender == executor);\n', '        token.safeTransfer(executor, amount);\n', '    }\n', '    \n', '    function borrow(uint _amount) external {\n', '        require(msg.sender == borrower);\n', "        require(cy.borrow(_amount) == 0, 'borrow failed');\n", '        underlying.safeTransfer(borrower, _amount);\n', '    }\n', '    \n', '    function repay() external {\n', '        uint _balance = underlying.balanceOf(address(this));\n', '        underlying.safeApprove(address(cy), _balance);\n', '        cy.repayBorrow(_balance);\n', '    }\n', '}']