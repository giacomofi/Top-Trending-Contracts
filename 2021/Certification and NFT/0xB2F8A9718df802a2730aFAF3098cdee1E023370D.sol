['pragma solidity 0.6.6;\n', '\n', 'import "./Ownable.sol";\n', '\n', 'contract StrategiesWhitelist is Ownable {\n', '    mapping(address => uint8) public whitelistedAllocationStrategies;\n', '\n', '    event AllocationStrategyWhitelisted(address indexed submittedBy, address indexed allocationStrategy);\n', '    event AllocationStrategyRemovedFromWhitelist(address indexed submittedBy, address indexed allocationStrategy);\n', '\n', '    constructor() public {\n', '        _setOwner(msg.sender);\n', '    }\n', '\n', '    function isWhitelisted(address _allocationStrategy) external view returns (uint8 answer) {\n', '        return whitelistedAllocationStrategies[_allocationStrategy];\n', '    }\n', '\n', '    function addToWhitelist(address _allocationStrategy) external onlyOwner {\n', '        whitelistedAllocationStrategies[_allocationStrategy] = 1;\n', '        emit AllocationStrategyWhitelisted(msg.sender, _allocationStrategy);\n', '    }\n', '\n', '    function removeFromWhitelist(address _allocationStrategy) external onlyOwner {\n', '        whitelistedAllocationStrategies[_allocationStrategy] = 0;\n', '        emit AllocationStrategyRemovedFromWhitelist(msg.sender, _allocationStrategy);\n', '    }\n', '}\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '// Copied from PieDAO smart pools repo. Which is audited\n', '\n', 'contract Ownable {\n', '\n', '    bytes32 constant public oSlot = keccak256("Ownable.storage.location");\n', '\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // Ownable struct\n', '    struct os {\n', '        address owner;\n', '    }\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == los().owner, "Ownable.onlyOwner: msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @notice Get owner\n', '        @return Address of the owner\n', '    */\n', '    function owner() public view returns(address) {\n', '        return los().owner;\n', '    }\n', '\n', '    /**\n', '        @notice Transfer ownership to a new address\n', '        @param _newOwner Address of the new owner\n', '    */\n', '    function transferOwnership(address _newOwner) onlyOwner external {\n', '        _setOwner(_newOwner);\n', '    }\n', '\n', '    /**\n', '        @notice Internal method to set the owner\n', '        @param _newOwner Address of the new owner\n', '    */\n', '    function _setOwner(address _newOwner) internal {\n', '        emit OwnerChanged(los().owner, _newOwner);\n', '        los().owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @notice Load ownable storage\n', '        @return s Storage pointer to the Ownable storage struct\n', '    */\n', '    function los() internal pure returns (os storage s) {\n', '        bytes32 loc = oSlot;\n', '        assembly {\n', '            s_slot := loc\n', '        }\n', '    }\n', '\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']