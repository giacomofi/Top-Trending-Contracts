['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-22\n', '*/\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Storage {\n', '    \n', '    address public fnxColPool = 0xfDf252995da6D6c54C03FC993e7AA6B593A57B8d; \n', '    address public usdcColPool = 0x120f18F5B8EdCaA3c083F9464c57C11D81a9E549;\n', '    \n', '    //fnxColPool inclue fnx token\n', '    address public fnxToken = 0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B;\n', '    \n', '    //usdccolpool inclue usdc and usdt\n', '    address public usdcToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public usdtToken = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    \n', '    address public cfnxToken = 0x9d7beb4265817a4923FAD9Ca9EF8af138499615d;\n', '    address public fnxOracle = 0x43BD92bF3Bb25EBB3BdC2524CBd6156E3Fdd41F3;\n', '    address public fixedMinePool = 0xf1FF936B72499382983a8fBa9985C41cB80BE17D;\n', '\n', '    \n', '    address public temp1 =  address(0x0);\n', '    address public temp2 =  address(0x0);\n', '    address public temp3 =  address(0x0);\n', '    \n', '}\n', '\n', '\n', 'interface IFixedMinePool {\n', '     function getUserCurrentAPY(address account,address mineCoin) external view returns (uint256);\n', '     function getUserFPTBBalance(address account) external view returns (uint256);\n', '     function getUserFPTABalance(address account) external view returns (uint256);\n', '     function getMinerBalance(address account,address mineCoin) external view returns(uint256);\n', '}\n', '\n', 'interface IFnxOracle {\n', '     function getPrice(address asset) external view returns (uint256);\n', '}\n', '\n', 'interface ICollateralPool {\n', '     function getTokenNetworth() external view returns (uint256);\n', '     function userInputCollateral(address user,address collateral) external view returns (uint256);\n', '     function getUserPayingUsd(address account) external view returns (uint256);\n', '\n', '}\n', '\n', 'interface IMineConverter {\n', '     function lockedBalanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'contract FnxMineDebankView is Storage,Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    function getMinedUnclaimedBalance(address _user) public view returns (uint256) {\n', '        return IFixedMinePool(fixedMinePool).getMinerBalance(_user,cfnxToken);\n', '    }\n', '\n', '    function getConverterLockedBalance(address _user) public view returns (uint256) {\n', '        return IMineConverter(cfnxToken).lockedBalanceOf(_user);\n', '    }\n', '\n', '    \n', '    function getApy(address _user) public view returns (uint256) {\n', '            uint256 mineofyear = IFixedMinePool(fixedMinePool).getUserCurrentAPY(_user,cfnxToken);\n', '            \n', '            uint256 FTPA = IFixedMinePool(fixedMinePool).getUserFPTABalance(_user);\n', '            uint256 FTPB = IFixedMinePool(fixedMinePool).getUserFPTBBalance(_user);\n', '            uint256 fnxprice =  IFnxOracle(fnxOracle).getPrice(fnxToken);\n', '            uint256 fptaprice = ICollateralPool(usdcColPool).getTokenNetworth();\n', '            uint256 fptbprice = ICollateralPool(fnxColPool).getTokenNetworth();\n', '\n', '            uint256 denominater = (FTPA.mul(fptaprice)).add(FTPB.mul(fptbprice));\n', '            \n', '            if(denominater==0) {\n', '               return 0;\n', '            }\n', '            \n', '            return mineofyear.mul(fnxprice).mul(1000).div(denominater);\n', '    }\n', '    \n', '    \n', '    function getFnxPoolColValue(address _user) public view returns (uint256) {\n', '       return ICollateralPool(fnxColPool).getUserPayingUsd(_user);\n', '    }\n', '\n', '\n', '    function getUsdcPoolColValue(address _user)  public view returns (uint256) {\n', '        return ICollateralPool(usdcColPool).getUserPayingUsd(_user);\n', '    }\n', '    \n', '    /**\n', "     * @dev Retrieve user's locked balance. \n", '     * @param _user account.\n', '     * @param _collateral the collateal token address\n', '     * @param _pool the collateal pool     \n', '     */\n', '    function getUserInputCollateral(address _user,address _collateral,address _pool) public view returns (uint256){\n', '      return ICollateralPool(_pool).userInputCollateral(_user,_collateral);   \n', '    }\n', '    \n', '    function getVersion() public pure returns (uint256)  {\n', '        return 1;\n', '    }\n', '    \n', '\n', '    function resetTokenAddress( \n', '                                address _fnxColPool, \n', '                                address _usdcColPool, \n', '                                address _fnxToken,   \n', '                                address _usdcToken, \n', '                                address _usdtToken,\n', '                                address _cfnxToken,\n', '                                address _fnxOracle,\n', '                                address _fixedMinePool\n', '                                \n', '                              )  public onlyOwner {\n', '                                  \n', '        fnxColPool  = _fnxColPool;\n', '        usdcColPool = _usdcColPool;\n', '        fnxToken    = _fnxToken; \n', '        usdcToken   = _usdcToken;\n', '        usdtToken   = _usdtToken;\n', '        cfnxToken   = _cfnxToken;\n', '        fnxOracle    = _fnxOracle;\n', '        fixedMinePool = _fixedMinePool;\n', '    }\n', '    \n', '    \n', '}']