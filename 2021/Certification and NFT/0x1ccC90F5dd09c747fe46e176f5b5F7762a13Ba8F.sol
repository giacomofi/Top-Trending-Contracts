['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', '    @title Interface for Bridge contract.\n', '    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0 except for \n', '         the addition of `deposit()` so that this contract can be called from Sink and Source Oracle contracts.\n', '    @author ChainSafe Systems.\n', ' */\n', 'interface IBridge {\n', '    /**\n', '        @notice Exposing getter for {_chainID} instead of forcing the use of call.\n', '        @return uint8 The {_chainID} that is currently set for the Bridge contract.\n', '     */\n', '    function _chainID() external returns (uint8);\n', '\n', '    function deposit(\n', '        uint8 destinationChainID,\n', '        bytes32 resourceID,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../oracle/interfaces/FinderInterface.sol";\n', 'import "../oracle/implementation/Constants.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./IBridge.sol";\n', '\n', '/**\n', ' * @title Governance relayer contract on L1 that receives messages from the owner (Governor) and sends them to L2.\n', ' */\n', 'contract SourceGovernor is Ownable {\n', '    FinderInterface public finder;\n', '    uint8 public currentChainId;\n', '    bytes32 internal currentRequestHash;\n', '\n', '    event RelayedGovernanceRequest(\n', '        uint8 indexed destinationChainId,\n', '        address indexed to,\n', '        uint256 value,\n', '        bytes indexed data\n', '    );\n', '\n', '    constructor(FinderInterface _finder, uint8 _currentChainId) {\n', '        finder = _finder;\n', '        currentChainId = _currentChainId;\n', '        currentRequestHash = bytes32(0);\n', '    }\n', '\n', '    /**\n', '     * @notice This is the first method that should be called in order to relay a governance request to another network\n', '     * marked by `sinkChainID`. Note: this can only be called by the owner (presumably the L1 governor).\n', '     */\n', '    function relayGovernance(\n', '        uint8 destinationChainId,\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) external onlyOwner {\n', '        require(currentRequestHash == bytes32(0), "Request hash already set");\n', '        currentRequestHash = _computeRequestHash(to, value, data);\n', '        _getBridge().deposit(destinationChainId, getResourceId(), _formatMetadata(to, value, data));\n', '        currentRequestHash = bytes32(0);\n', '        emit RelayedGovernanceRequest(destinationChainId, to, value, data);\n', '    }\n', '\n', '    /**\n', '     * @notice This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call\n', '     * `GenericHandler.deposit()` and ultimately this method.\n', '     * @dev This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.\n', '     */\n', '    function verifyRequest(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) external view {\n', '        require(currentRequestHash == _computeRequestHash(to, value, data), "Invalid Request");\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the resource id to send to the bridge.\n', '     */\n', '    function getResourceId() public view returns (bytes32) {\n', '        return keccak256(abi.encode("Governor", currentChainId));\n', '    }\n', '\n', '    function _getBridge() internal view returns (IBridge) {\n', '        return IBridge(finder.getImplementationAddress(OracleInterfaces.Bridge));\n', '    }\n', '\n', '    function _formatMetadata(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal pure returns (bytes memory) {\n', '        bytes memory metadata = abi.encode(to, value, data);\n', '        return abi.encodePacked(metadata.length, metadata);\n', '    }\n', '\n', '    function _computeRequestHash(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal pure returns (bytes32) {\n', '        return keccak256(abi.encode(to, value, data));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Stores common interface names used throughout the DVM by registration in the Finder.\n', ' */\n', 'library OracleInterfaces {\n', '    bytes32 public constant Oracle = "Oracle";\n', '    bytes32 public constant IdentifierWhitelist = "IdentifierWhitelist";\n', '    bytes32 public constant Store = "Store";\n', '    bytes32 public constant FinancialContractsAdmin = "FinancialContractsAdmin";\n', '    bytes32 public constant Registry = "Registry";\n', '    bytes32 public constant CollateralWhitelist = "CollateralWhitelist";\n', '    bytes32 public constant OptimisticOracle = "OptimisticOracle";\n', '    bytes32 public constant Bridge = "Bridge";\n', '    bytes32 public constant GenericHandler = "GenericHandler";\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Provides addresses of the live contracts implementing certain interfaces.\n', ' * @dev Examples are the Oracle or Store interfaces.\n', ' */\n', 'interface FinderInterface {\n', '    /**\n', '     * @notice Updates the address of the contract that implements `interfaceName`.\n', '     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n', '     * @param implementationAddress address of the deployed contract that implements the interface.\n', '     */\n', '    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\n', '\n', '    /**\n', '     * @notice Gets the address of the contract that implements the given `interfaceName`.\n', '     * @param interfaceName queried interface.\n', '     * @return implementationAddress address of the deployed contract that implements the interface.\n', '     */\n', '    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 199\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']