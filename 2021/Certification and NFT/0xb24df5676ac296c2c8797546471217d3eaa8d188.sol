['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.0 https://hardhat.org\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/IQLF.sol\n', '\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', 'abstract contract IQLF is IERC165 {\n', '    /**\n', '     * @dev Returns if the given address is qualified, implemented on demand.\n', '     */\n', '    function ifQualified (address account) virtual external view returns (bool);\n', '\n', '    /**\n', '     * @dev Logs if the given address is qualified, implemented on demand.\n', '     */\n', '    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\n', '\n', '    /**\n', '     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector ||\n', '        interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\n', '    }\n', '\n', '    /**\n', '     * @dev Emit when `ifQualified` is called to decide if the given `address`\n', '     * is `qualified` according to the preset rule by the contract creator and\n', '     * the current block `number` and the current block `timestamp`.\n', '     */\n', '    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\n', '}\n', '\n', '\n', '// File contracts/qualification.sol\n', '//import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract EVA_QLF is IQLF, Ownable {\n', '    string private name;\n', '    uint256 private creation_time;\n', '    uint256 start_time;\n', '    mapping(address => bool) white_list;\n', '\n', '    constructor (string memory _name, uint256 _start_time) {\n', '        name = _name;\n', '        creation_time = block.timestamp;\n', '        start_time = _start_time;\n', '    }\n', '\n', '    function get_name() public view returns (string memory) {\n', '        return name;\n', '    }\n', '\n', '    function get_creation_time() public view returns (uint256) {\n', '        return creation_time;\n', '    }\n', '\n', '    function get_start_time() public view returns (uint256) {\n', '        return start_time;\n', '    }\n', '\n', '    function set_start_time(uint256 _start_time) public onlyOwner {\n', '        start_time = _start_time;\n', '    }\n', '\n', '    function add_address(address account) public onlyOwner returns(bool){\n', '        white_list[account] = true;\n', '        return true;\n', '    }\n', '\n', '    function del_address(address account) public onlyOwner returns(bool){\n', '        delete(white_list[account]);\n', '        return true;\n', '    }\n', '\n', '    function add_whitelist(address[] calldata addrs) external onlyOwner {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            white_list[addrs[i]] = true;\n', '        }\n', '    }\n', '\n', '    function remove_whitelist(address[] calldata addrs) external onlyOwner {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            delete white_list[addrs[i]];\n', '        }\n', '    }\n', '\n', '    function ifQualified(address addr) public view override returns (bool qualified) {\n', '        if(white_list[addr]){\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\n', '        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\n', '            emit Qualification(account, false, block.number, block.timestamp);\n', '            return false;\n', '        }\n', '\n', '        if (white_list[account]) {\n', '            emit Qualification(account, true, block.number, block.timestamp);\n', '            return true;\n', '        }\n', '        emit Qualification(account, false, block.number, block.timestamp);\n', '        return false;\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector ||\n', '        interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\n', '        interfaceId == this.get_start_time.selector;\n', '    }\n', '}']