['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface Structs {\n', '    struct Val {\n', '        uint256 value;\n', '    }\n', '\n', '    enum ActionType {\n', '      Deposit,   // supply tokens\n', '      Withdraw,  // borrow tokens\n', '      Transfer,  // transfer balance between accounts\n', '      Buy,       // buy an amount of some token (externally)\n', '      Sell,      // sell an amount of some token (externally)\n', '      Trade,     // trade tokens against another account\n', '      Liquidate, // liquidate an undercollateralized or expiring account\n', '      Vaporize,  // use excess tokens to zero-out a completely negative account\n', '      Call       // send arbitrary data to an address\n', '    }\n', '\n', '    enum AssetDenomination {\n', '        Wei // the amount is denominated in wei\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta // the amount is given as a delta from the current value\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct Info {\n', '        address owner;  // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', 'contract DyDxPool is Structs {\n', '    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\n', '    function operate(Info[] memory, ActionArgs[] memory) public;\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract DyDxFlashLoan is Structs {\n', '    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\n', '\n', '    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    mapping(address => uint256) public currencies;\n', '\n', '    constructor() public {\n', '        currencies[WETH] = 1;\n', '        currencies[SAI] = 2;\n', '        currencies[USDC] = 3;\n', '        currencies[DAI] = 4;\n', '    }\n', '\n', '    modifier onlyPool() {\n', '        require(\n', '            msg.sender == address(pool),\n', '            "FlashLoan: could be called by DyDx pool only"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function tokenToMarketId(address token) public view returns (uint256) {\n', '        uint256 marketId = currencies[token];\n', '        require(marketId != 0, "FlashLoan: Unsupported token");\n', '        return marketId - 1;\n', '    }\n', '\n', '    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\n', '    function flashloan(address token, uint256 amount, bytes memory data)\n', '        internal\n', '    {\n', '        IERC20(token).approve(address(pool), amount + 1);\n', '        Info[] memory infos = new Info[](1);\n', '        ActionArgs[] memory args = new ActionArgs[](3);\n', '\n', '        infos[0] = Info(address(this), 0);\n', '\n', '        AssetAmount memory wamt = AssetAmount(\n', '            false,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount\n', '        );\n', '        ActionArgs memory withdraw;\n', '        withdraw.actionType = ActionType.Withdraw;\n', '        withdraw.accountId = 0;\n', '        withdraw.amount = wamt;\n', '        withdraw.primaryMarketId = tokenToMarketId(token);\n', '        withdraw.otherAddress = address(this);\n', '\n', '        args[0] = withdraw;\n', '\n', '        ActionArgs memory call;\n', '        call.actionType = ActionType.Call;\n', '        call.accountId = 0;\n', '        call.otherAddress = address(this);\n', '        call.data = data;\n', '\n', '        args[1] = call;\n', '\n', '        ActionArgs memory deposit;\n', '        AssetAmount memory damt = AssetAmount(\n', '            true,\n', '            AssetDenomination.Wei,\n', '            AssetReference.Delta,\n', '            amount + 1\n', '        );\n', '        deposit.actionType = ActionType.Deposit;\n', '        deposit.accountId = 0;\n', '        deposit.amount = damt;\n', '        deposit.primaryMarketId = tokenToMarketId(token);\n', '        deposit.otherAddress = address(this);\n', '\n', '        args[2] = deposit;\n', '\n', '        pool.operate(infos, args);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract Flashloan is DyDxFlashLoan {\n', '    uint256 public loan;\n', '\n', '    constructor() public payable {\n', '        (bool success, ) = WETH.call.value(msg.value)("");\n', '        require(success, "fail to get weth");\n', '    }\n', '\n', '    function getFlashloan(address flashToken, uint256 flashAmount) external {\n', '        uint256 balanceBefore = IERC20(flashToken).balanceOf(address(this));\n', '        bytes memory data = abi.encode(flashToken, flashAmount, balanceBefore);\n', '        flashloan(flashToken, flashAmount, data); // execution goes to `callFunction`\n', '    }\n', '\n', '    function callFunction(\n', '        address, /* sender */\n', '        Info calldata, /* accountInfo */\n', '        bytes calldata data\n', '    ) external onlyPool {\n', '        (address flashToken, uint256 flashAmount, uint256 balanceBefore) = abi\n', '            .decode(data, (address, uint256, uint256));\n', '        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));\n', '        require(\n', '            balanceAfter - balanceBefore == flashAmount,\n', '            "contract did not get the loan"\n', '        );\n', '        loan = balanceAfter;\n', '\n', '        /*******\n', '        * Pseudo-code\n', '        * Use the money here!\n', '        *******/\n', '\n', '        // function arb() internal {\n', '        //     uint amount = 10000000000000000000; // 100 tokens\n', '        //     ERC20(token).approve(exchange1, amount); // Approve tokens\n', '        //     uint ethAmount = Exchange1(exchange1).sellTokens(token, amount); // Sell Tokens for Ether\n', '        //     Exchange2(exchange1).buyTokens.value(ethAmount)(token); // Buys tokens back\n', '        // }\n', '            \n', '        // }\n', '\n', '\n', '\n', '    }\n', '}']