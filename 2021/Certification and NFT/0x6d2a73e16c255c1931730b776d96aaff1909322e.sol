['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/// FixedDiscountCollateralAuctionHouse.sol\n', '\n', '// Copyright (C) 2018 Rain <[email\xa0protected]>, 2020 Reflexer Labs, INC\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function transferInternalCoins(address,address,uint256) virtual external;\n', '    function transferCollateral(bytes32,address,address,uint256) virtual external;\n', '}\n', 'abstract contract OracleRelayerLike {\n', '    function redemptionPrice() virtual public returns (uint256);\n', '}\n', 'abstract contract OracleLike {\n', '    function priceSource() virtual public view returns (address);\n', '    function getResultWithValidity() virtual public view returns (uint256, bool);\n', '}\n', 'abstract contract LiquidationEngineLike {\n', '    function removeCoinsFromAuction(uint256) virtual public;\n', '}\n', '\n', '/*\n', '   This thing lets you sell some collateral at a fixed discount in order to instantly recapitalize the system\n', '*/\n', '\n', 'contract FixedDiscountCollateralAuctionHouse {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "FixedDiscountCollateralAuctionHouse/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Data ---\n', '    struct Bid {\n', '        // System coins raised up until now\n', '        uint256 raisedAmount;                                                                                         // [rad]\n', '        // Amount of collateral that has been sold up until now\n', '        uint256 soldAmount;                                                                                           // [wad]\n', '        // How much collateral is sold in an auction\n', '        uint256 amountToSell;                                                                                         // [wad]\n', '        // Total/max amount of coins to raise\n', '        uint256 amountToRaise;                                                                                        // [rad]\n', '        // Duration of time after which the auction can be settled\n', '        uint48  auctionDeadline;                                                                                      // [unix epoch time]\n', '        // Who (which SAFE) receives leftover collateral that is not sold in the auction; usually the liquidated SAFE\n', '        address forgoneCollateralReceiver;\n', '        // Who receives the coins raised from the auction; usually the accounting engine\n', '        address auctionIncomeRecipient;\n', '    }\n', '\n', '    // Bid data for each separate auction\n', '    mapping (uint256 => Bid) public bids;\n', '\n', '    // SAFE database\n', '    SAFEEngineLike public safeEngine;\n', '    // Collateral type name\n', '    bytes32       public collateralType;\n', '\n', '    // Minimum acceptable bid\n', '    uint256  public   minimumBid = 5 * WAD;                                                                           // [wad]\n', '    // Total length of the auction. Kept to adhere to the same interface as the English auction but redundant\n', '    uint48   public   totalAuctionLength = uint48(-1);                                                                // [seconds]\n', '    // Number of auctions started up until now\n', '    uint256  public   auctionsStarted = 0;\n', '    // The last read redemption price\n', '    uint256  public   lastReadRedemptionPrice;\n', "    // Discount (compared to the system coin's current redemption price) at which collateral is being sold\n", '    uint256  public   discount = 0.95E18;                         // 5% discount                                      // [wad]\n', '    // Max lower bound deviation that the collateral median can have compared to the FSM price\n', '    uint256  public   lowerCollateralMedianDeviation = 0.90E18;   // 10% deviation                                    // [wad]\n', '    // Max upper bound deviation that the collateral median can have compared to the FSM price\n', '    uint256  public   upperCollateralMedianDeviation = 0.95E18;   // 5% deviation                                     // [wad]\n', '    // Max lower bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n', '    uint256  public   lowerSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n', '    // Max upper bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n', '    uint256  public   upperSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n', '    // Min deviation for the system coin median result compared to the redemption price in order to take the median into account\n', '    uint256  public   minSystemCoinMedianDeviation   = 0.999E18;                                                      // [wad]\n', '\n', '    OracleRelayerLike     public oracleRelayer;\n', '    OracleLike            public collateralFSM;\n', '    OracleLike            public systemCoinOracle;\n', '    LiquidationEngineLike public liquidationEngine;\n', '\n', '    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32("COLLATERAL");\n', '    bytes32 public constant AUCTION_TYPE       = bytes32("FIXED_DISCOUNT");\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event StartAuction(\n', '        uint256 id,\n', '        uint256 auctionsStarted,\n', '        uint256 amountToSell,\n', '        uint256 initialBid,\n', '        uint256 indexed amountToRaise,\n', '        address indexed forgoneCollateralReceiver,\n', '        address indexed auctionIncomeRecipient,\n', '        uint256 auctionDeadline\n', '    );\n', '    event ModifyParameters(bytes32 parameter, uint256 data);\n', '    event ModifyParameters(bytes32 parameter, address data);\n', '    event BuyCollateral(uint256 indexed id, uint256 wad, uint256 boughtCollateral);\n', '    event SettleAuction(uint256 indexed id, uint256 leftoverCollateral);\n', '    event TerminateAuctionPrematurely(uint256 indexed id, address sender, uint256 collateralAmount);\n', '\n', '    // --- Init ---\n', '    constructor(address safeEngine_, address liquidationEngine_, bytes32 collateralType_) public {\n', '        safeEngine = SAFEEngineLike(safeEngine_);\n', '        liquidationEngine = LiquidationEngineLike(liquidationEngine_);\n', '        collateralType = collateralType_;\n', '        authorizedAccounts[msg.sender] = 1;\n', '        emit AddAuthorization(msg.sender);\n', '    }\n', '\n', '    // --- Math ---\n', '    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n', '        require((z = x + y) >= x, "FixedDiscountCollateralAuctionHouse/add-uint48-overflow");\n', '    }\n', '    function addUint256(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "FixedDiscountCollateralAuctionHouse/add-uint256-overflow");\n', '    }\n', '    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "FixedDiscountCollateralAuctionHouse/sub-underflow");\n', '    }\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "FixedDiscountCollateralAuctionHouse/mul-overflow");\n', '    }\n', '    uint256 constant WAD = 10 ** 18;\n', '    function wmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    uint256 constant RAY = 10 ** 27;\n', '    function rdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y > 0, "FixedDiscountCollateralAuctionHouse/rdiv-by-zero");\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y > 0, "FixedDiscountCollateralAuctionHouse/wdiv-by-zero");\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function minimum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = (x >= y) ? x : y;\n', '    }\n', '\n', '    // --- General Utils ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Admin ---\n', '    /**\n', '     * @notice Modify auction parameters\n', '     * @param parameter The name of the parameter modified\n', '     * @param data New value for the parameter\n', '     */\n', '    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n', '        if (parameter == "discount") {\n', '            require(data < WAD, "FixedDiscountCollateralAuctionHouse/no-discount-offered");\n', '            discount = data;\n', '        }\n', '        else if (parameter == "lowerCollateralMedianDeviation") {\n', '            require(data <= WAD, "FixedDiscountCollateralAuctionHouse/invalid-lower-collateral-median-deviation");\n', '            lowerCollateralMedianDeviation = data;\n', '        }\n', '        else if (parameter == "upperCollateralMedianDeviation") {\n', '            require(data <= WAD, "FixedDiscountCollateralAuctionHouse/invalid-upper-collateral-median-deviation");\n', '            upperCollateralMedianDeviation = data;\n', '        }\n', '        else if (parameter == "lowerSystemCoinMedianDeviation") {\n', '            require(data <= WAD, "FixedDiscountCollateralAuctionHouse/invalid-lower-system-coin-median-deviation");\n', '            lowerSystemCoinMedianDeviation = data;\n', '        }\n', '        else if (parameter == "upperSystemCoinMedianDeviation") {\n', '            require(data <= WAD, "FixedDiscountCollateralAuctionHouse/invalid-upper-system-coin-median-deviation");\n', '            upperSystemCoinMedianDeviation = data;\n', '        }\n', '        else if (parameter == "minSystemCoinMedianDeviation") {\n', '            minSystemCoinMedianDeviation = data;\n', '        }\n', '        else if (parameter == "minimumBid") {\n', '            minimumBid = data;\n', '        }\n', '        else revert("FixedDiscountCollateralAuctionHouse/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, data);\n', '    }\n', '    /**\n', '     * @notice Modify oracle related integrations\n', '     * @param parameter The name of the contract address being updated\n', '     * @param data New address for the oracle contract\n', '     */\n', '    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n', '        if (parameter == "oracleRelayer") oracleRelayer = OracleRelayerLike(data);\n', '        else if (parameter == "collateralFSM") {\n', '          collateralFSM = OracleLike(data);\n', '          // Check that priceSource() is implemented\n', '          collateralFSM.priceSource();\n', '        }\n', '        else if (parameter == "systemCoinOracle") systemCoinOracle = OracleLike(data);\n', '        else if (parameter == "liquidationEngine") liquidationEngine = LiquidationEngineLike(data);\n', '        else revert("FixedDiscountCollateralAuctionHouse/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, data);\n', '    }\n', '\n', '    // --- Private Auction Utils ---\n', '    /*\n', '    * @notify Get the amount of bought collateral from a specific auction using custom collateral price feeds and a system coin price feed\n', '    * @param id The ID of the auction to bid in and get collateral from\n', '    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n', '    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n', '    * @param systemCoinPriceFeedValue The system coin market price fetched from the oracle\n', '    * @param adjustedBid The system coin bid\n', '    */\n', '    function getBoughtCollateral(\n', '        uint256 id,\n', '        uint256 collateralFsmPriceFeedValue,\n', '        uint256 collateralMedianPriceFeedValue,\n', '        uint256 systemCoinPriceFeedValue,\n', '        uint256 adjustedBid\n', '    ) private view returns (uint256) {\n', '        // calculate the collateral price in relation to the latest system coin price and apply the discount\n', '        uint256 discountedCollateralPrice =\n', '          getDiscountedCollateralPrice(\n', '            collateralFsmPriceFeedValue,\n', '            collateralMedianPriceFeedValue,\n', '            systemCoinPriceFeedValue,\n', '            discount\n', '          );\n', '        // calculate the amount of collateral bought\n', '        uint256 boughtCollateral = wdivide(adjustedBid, discountedCollateralPrice);\n', '        // if the calculated collateral amount exceeds the amount still up for sale, adjust it to the remaining amount\n', '        boughtCollateral = (boughtCollateral > subtract(bids[id].amountToSell, bids[id].soldAmount)) ?\n', '                           subtract(bids[id].amountToSell, bids[id].soldAmount) : boughtCollateral;\n', '\n', '        return boughtCollateral;\n', '    }\n', '\n', '    // --- Public Auction Utils ---\n', '    /*\n', '    * @notice Fetch the collateral median price (from the oracle, not FSM)\n', '    * @returns The collateral price from the oracle median; zero if the address of the collateralMedian (as fetched from the FSM) is null\n', '    */\n', '    function getCollateralMedianPrice() public view returns (uint256 priceFeed) {\n', '        // Fetch the collateral median address from the collateral FSM\n', '        address collateralMedian;\n', '        try collateralFSM.priceSource() returns (address median) {\n', '          collateralMedian = median;\n', '        } catch (bytes memory revertReason) {}\n', '\n', '        if (collateralMedian == address(0)) return 0;\n', '\n', '        // wrapped call toward the collateral median\n', '        try OracleLike(collateralMedian).getResultWithValidity()\n', '          returns (uint256 price, bool valid) {\n', '          if (valid) {\n', '            priceFeed = uint256(price);\n', '          }\n', '        } catch (bytes memory revertReason) {\n', '          return 0;\n', '        }\n', '    }\n', '    /*\n', '    * @notice Fetch the system coin market price\n', '    * @returns The system coin market price fetch from the oracle\n', '    */\n', '    function getSystemCoinMarketPrice() public view returns (uint256 priceFeed) {\n', '        if (address(systemCoinOracle) == address(0)) return 0;\n', '\n', '        // wrapped call toward the system coin oracle\n', '        try systemCoinOracle.getResultWithValidity()\n', '          returns (uint256 price, bool valid) {\n', '          if (valid) {\n', '            priceFeed = uint256(price) * 10 ** 9; // scale to RAY\n', '          }\n', '        } catch (bytes memory revertReason) {\n', '          return 0;\n', '        }\n', '    }\n', '    /*\n', "    * @notice Get the smallest possible price that's at max minSystemCoinMedianDeviation deviated from the redemption price and at least\n", '    *         minSystemCoinMedianDeviation deviated\n', '    */\n', '    function getSystemCoinFloorDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 floorPrice) {\n', '        uint256 minFloorDeviatedPrice = wmultiply(redemptionPrice, minSystemCoinMedianDeviation);\n', '        floorPrice = wmultiply(redemptionPrice, lowerSystemCoinMedianDeviation);\n', '        floorPrice = (floorPrice <= minFloorDeviatedPrice) ? floorPrice : redemptionPrice;\n', '    }\n', '    /*\n', "    * @notice Get the highest possible price that's at max upperSystemCoinMedianDeviation deviated from the redemption price and at least\n", '    *         minSystemCoinMedianDeviation deviated\n', '    */\n', '    function getSystemCoinCeilingDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 ceilingPrice) {\n', '        uint256 minCeilingDeviatedPrice = wmultiply(redemptionPrice, subtract(2 * WAD, minSystemCoinMedianDeviation));\n', '        ceilingPrice = wmultiply(redemptionPrice, subtract(2 * WAD, upperSystemCoinMedianDeviation));\n', '        ceilingPrice = (ceilingPrice >= minCeilingDeviatedPrice) ? ceilingPrice : redemptionPrice;\n', '    }\n', '    /*\n', '    * @notice Get the collateral price from the FSM and the final system coin price that will be used when bidding in an auction\n', '    * @param systemCoinRedemptionPrice The system coin redemption price\n', '    * @returns The collateral price from the FSM and the final system coin price used for bidding (picking between redemption and market prices)\n', '    */\n', '    function getCollateralFSMAndFinalSystemCoinPrices(uint256 systemCoinRedemptionPrice) public view returns (uint256, uint256) {\n', '        require(systemCoinRedemptionPrice > 0, "FixedDiscountCollateralAuctionHouse/invalid-redemption-price-provided");\n', '        (uint256 collateralFsmPriceFeedValue, bool collateralFsmHasValidValue) = collateralFSM.getResultWithValidity();\n', '        if (!collateralFsmHasValidValue) {\n', '          return (0, 0);\n', '        }\n', '\n', '        uint256 systemCoinAdjustedPrice  = systemCoinRedemptionPrice;\n', '        uint256 systemCoinPriceFeedValue = getSystemCoinMarketPrice();\n', '\n', '        if (systemCoinPriceFeedValue > 0) {\n', '          uint256 floorPrice   = getSystemCoinFloorDeviatedPrice(systemCoinAdjustedPrice);\n', '          uint256 ceilingPrice = getSystemCoinCeilingDeviatedPrice(systemCoinAdjustedPrice);\n', '\n', '          if (uint(systemCoinPriceFeedValue) < systemCoinAdjustedPrice) {\n', '            systemCoinAdjustedPrice = maximum(uint256(systemCoinPriceFeedValue), floorPrice);\n', '          } else {\n', '            systemCoinAdjustedPrice = minimum(uint256(systemCoinPriceFeedValue), ceilingPrice);\n', '          }\n', '        }\n', '\n', '        return (uint256(collateralFsmPriceFeedValue), systemCoinAdjustedPrice);\n', '    }\n', '    /*\n', '    * @notice Get the collateral price used in bidding by picking between the raw FSM and the oracle median price and taking into account\n', '    *         deviation limits\n', '    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n', '    * @param collateralMedianPriceFeedValue The collateral price fetched from the median attached to the FSM\n', '    */\n', '    function getFinalBaseCollateralPrice(\n', '        uint256 collateralFsmPriceFeedValue,\n', '        uint256 collateralMedianPriceFeedValue\n', '    ) public view returns (uint256) {\n', '        uint256 floorPrice   = wmultiply(collateralFsmPriceFeedValue, lowerCollateralMedianDeviation);\n', '        uint256 ceilingPrice = wmultiply(collateralFsmPriceFeedValue, subtract(2 * WAD, upperCollateralMedianDeviation));\n', '\n', '        uint256 adjustedMedianPrice = (collateralMedianPriceFeedValue == 0) ?\n', '          collateralFsmPriceFeedValue : collateralMedianPriceFeedValue;\n', '\n', '        if (adjustedMedianPrice < collateralFsmPriceFeedValue) {\n', '          return maximum(adjustedMedianPrice, floorPrice);\n', '        } else {\n', '          return minimum(adjustedMedianPrice, ceilingPrice);\n', '        }\n', '    }\n', '    /*\n', '    * @notice Get the discounted collateral price (using a custom discount)\n', '    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n', '    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n', '    * @param systemCoinPriceFeedValue The system coin price fetched from the oracle\n', '    * @param customDiscount The custom discount used to calculate the collateral price offered\n', '    */\n', '    function getDiscountedCollateralPrice(\n', '        uint256 collateralFsmPriceFeedValue,\n', '        uint256 collateralMedianPriceFeedValue,\n', '        uint256 systemCoinPriceFeedValue,\n', '        uint256 customDiscount\n', '    ) public view returns (uint256) {\n', '        // calculate the collateral price in relation to the latest system coin price and apply the discount\n', '        return wmultiply(\n', '          rdivide(getFinalBaseCollateralPrice(collateralFsmPriceFeedValue, collateralMedianPriceFeedValue), systemCoinPriceFeedValue),\n', '          customDiscount\n', '        );\n', '    }\n', '    /*\n', '    * @notice Get the actual bid that will be used in an auction (taking into account the bidder input)\n', '    * @param id The id of the auction to calculate the adjusted bid for\n', '    * @param wad The initial bid submitted\n', '    * @returns Whether the bid is valid or not and the adjusted bid\n', '    */\n', '    function getAdjustedBid(\n', '        uint256 id, uint256 wad\n', '    ) public view returns (bool, uint256) {\n', '        if (either(\n', '          either(bids[id].amountToSell == 0, bids[id].amountToRaise == 0),\n', '          either(wad == 0, wad < minimumBid)\n', '        )) {\n', '          return (false, wad);\n', '        }\n', '\n', '        uint256 remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n', '\n', '        // bound max amount offered in exchange for collateral\n', '        uint256 adjustedBid = wad;\n', '        if (multiply(adjustedBid, RAY) > remainingToRaise) {\n', '            adjustedBid = addUint256(remainingToRaise / RAY, 1);\n', '        }\n', '\n', '        remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n', '        if (both(remainingToRaise > 0, remainingToRaise < RAY)) {\n', '            return (false, adjustedBid);\n', '        }\n', '\n', '        return (true, adjustedBid);\n', '    }\n', '\n', '    // --- Core Auction Logic ---\n', '    /**\n', '     * @notice Start a new collateral auction\n', '     * @param forgoneCollateralReceiver Who receives leftover collateral that is not auctioned\n', '     * @param auctionIncomeRecipient Who receives the amount raised in the auction\n', '     * @param amountToRaise Total amount of coins to raise (rad)\n', '     * @param amountToSell Total amount of collateral available to sell (wad)\n', '     * @param initialBid Unused\n', '     */\n', '    function startAuction(\n', '        address forgoneCollateralReceiver,\n', '        address auctionIncomeRecipient,\n', '        uint256 amountToRaise,\n', '        uint256 amountToSell,\n', '        uint256 initialBid\n', '    ) public isAuthorized returns (uint256 id) {\n', '        require(auctionsStarted < uint256(-1), "FixedDiscountCollateralAuctionHouse/overflow");\n', '        require(amountToSell > 0, "FixedDiscountCollateralAuctionHouse/no-collateral-for-sale");\n', '        require(amountToRaise > 0, "FixedDiscountCollateralAuctionHouse/nothing-to-raise");\n', '        require(amountToRaise >= RAY, "FixedDiscountCollateralAuctionHouse/dusty-auction");\n', '        id = ++auctionsStarted;\n', '\n', '        bids[id].auctionDeadline = uint48(-1);\n', '        bids[id].amountToSell = amountToSell;\n', '        bids[id].forgoneCollateralReceiver = forgoneCollateralReceiver;\n', '        bids[id].auctionIncomeRecipient = auctionIncomeRecipient;\n', '        bids[id].amountToRaise = amountToRaise;\n', '\n', '        safeEngine.transferCollateral(collateralType, msg.sender, address(this), amountToSell);\n', '\n', '        emit StartAuction(\n', '          id,\n', '          auctionsStarted,\n', '          amountToSell,\n', '          initialBid,\n', '          amountToRaise,\n', '          forgoneCollateralReceiver,\n', '          auctionIncomeRecipient,\n', '          bids[id].auctionDeadline\n', '        );\n', '    }\n', '    /**\n', '     * @notice Calculate how much collateral someone would buy from an auction using the last read redemption price\n', '     * @param id ID of the auction to buy collateral from\n', '     * @param wad New bid submitted\n', '     */\n', '    function getApproximateCollateralBought(uint256 id, uint256 wad) external view returns (uint256, uint256) {\n', '        if (lastReadRedemptionPrice == 0) return (0, wad);\n', '\n', '        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n', '        if (!validAuctionAndBid) {\n', '            return (0, adjustedBid);\n', '        }\n', '\n', "        // check that the oracle doesn't return an invalid value\n", '        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n', '        if (collateralFsmPriceFeedValue == 0) {\n', '          return (0, adjustedBid);\n', '        }\n', '\n', '        return (getBoughtCollateral(\n', '          id,\n', '          collateralFsmPriceFeedValue,\n', '          getCollateralMedianPrice(),\n', '          systemCoinPriceFeedValue,\n', '          adjustedBid\n', '        ), adjustedBid);\n', '    }\n', '    /**\n', '     * @notice Calculate how much collateral someone would buy from an auction using the latest redemption price fetched from the OracleRelayer\n', '     * @param id ID of the auction to buy collateral from\n', '     * @param wad New bid submitted\n', '     */\n', '    function getCollateralBought(uint256 id, uint256 wad) external returns (uint256, uint256) {\n', '        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n', '        if (!validAuctionAndBid) {\n', '            return (0, adjustedBid);\n', '        }\n', '\n', '        // Read the redemption price\n', '        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n', '\n', "        // check that the oracle doesn't return an invalid value\n", '        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n', '        if (collateralFsmPriceFeedValue == 0) {\n', '          return (0, adjustedBid);\n', '        }\n', '\n', '        return (getBoughtCollateral(\n', '          id,\n', '          collateralFsmPriceFeedValue,\n', '          getCollateralMedianPrice(),\n', '          systemCoinPriceFeedValue,\n', '          adjustedBid\n', '        ), adjustedBid);\n', '    }\n', '    /**\n', '     * @notice Buy collateral from an auction at a fixed discount\n', '     * @param id ID of the auction to buy collateral from\n', '     * @param wad New bid submitted (as a WAD which has 18 decimals)\n', '     */\n', '    function buyCollateral(uint256 id, uint256 wad) external {\n', '        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), "FixedDiscountCollateralAuctionHouse/inexistent-auction");\n', '\n', '        uint256 remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n', '        require(both(wad > 0, wad >= minimumBid), "FixedDiscountCollateralAuctionHouse/invalid-bid");\n', '\n', '        // bound max amount offered in exchange for collateral (in case someone offers more than is necessary)\n', '        uint256 adjustedBid = wad;\n', '        if (multiply(adjustedBid, RAY) > remainingToRaise) {\n', '            adjustedBid = addUint256(remainingToRaise / RAY, 1);\n', '        }\n', '\n', '        // update amount raised\n', '        bids[id].raisedAmount = addUint256(bids[id].raisedAmount, multiply(adjustedBid, RAY));\n', '\n', "        // check that there's at least RAY left to raise if raisedAmount < amountToRaise\n", '        if (bids[id].raisedAmount < bids[id].amountToRaise) {\n', '            require(subtract(bids[id].amountToRaise, bids[id].raisedAmount) >= RAY, "FixedDiscountCollateralAuctionHouse/invalid-left-to-raise");\n', '        }\n', '\n', '        // Read the redemption price\n', '        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n', '\n', "        // check that the collateral FSM doesn't return an invalid value\n", '        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n', '        require(collateralFsmPriceFeedValue > 0, "FixedDiscountCollateralAuctionHouse/collateral-fsm-invalid-value");\n', '\n', '        // get the amount of collateral bought\n', '        uint256 boughtCollateral = getBoughtCollateral(\n', '          id, collateralFsmPriceFeedValue, getCollateralMedianPrice(), systemCoinPriceFeedValue, adjustedBid\n', '        );\n', '        // check that the calculated amount is greater than zero\n', '        require(boughtCollateral > 0, "FixedDiscountCollateralAuctionHouse/null-bought-amount");\n', '        // update the amount of collateral already sold\n', '        bids[id].soldAmount = addUint256(bids[id].soldAmount, boughtCollateral);\n', '\n', '        // transfer the bid to the income recipient and the collateral to the bidder\n', '        safeEngine.transferInternalCoins(msg.sender, bids[id].auctionIncomeRecipient, multiply(adjustedBid, RAY));\n', '        safeEngine.transferCollateral(collateralType, address(this), msg.sender, boughtCollateral);\n', '\n', '        // Emit the buy event\n', '        emit BuyCollateral(id, adjustedBid, boughtCollateral);\n', '\n', '        // Remove coins from the liquidation buffer\n', '        bool soldAll = either(bids[id].amountToRaise <= bids[id].raisedAmount, bids[id].amountToSell == bids[id].soldAmount);\n', '        if (soldAll) {\n', '          liquidationEngine.removeCoinsFromAuction(remainingToRaise);\n', '        } else {\n', '          liquidationEngine.removeCoinsFromAuction(multiply(adjustedBid, RAY));\n', '        }\n', '\n', '        // If the auction raised the whole amount or all collateral was sold,\n', '        // send remaining collateral back to the forgone receiver\n', '        if (soldAll) {\n', '            uint256 leftoverCollateral = subtract(bids[id].amountToSell, bids[id].soldAmount);\n', '            safeEngine.transferCollateral(collateralType, address(this), bids[id].forgoneCollateralReceiver, leftoverCollateral);\n', '            delete bids[id];\n', '            emit SettleAuction(id, leftoverCollateral);\n', '        }\n', '    }\n', '    /**\n', '     * @notice Settle/finish an auction\n', '     * @param id ID of the auction to settle\n', '     */\n', '    function settleAuction(uint256 id) external {\n', '        return;\n', '    }\n', '    /**\n', '     * @notice Terminate an auction prematurely. Usually called by Global Settlement.\n', '     * @param id ID of the auction to settle\n', '     */\n', '    function terminateAuctionPrematurely(uint256 id) external isAuthorized {\n', '        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), "FixedDiscountCollateralAuctionHouse/inexistent-auction");\n', '        uint256 leftoverCollateral = subtract(bids[id].amountToSell, bids[id].soldAmount);\n', '        liquidationEngine.removeCoinsFromAuction(subtract(bids[id].amountToRaise, bids[id].raisedAmount));\n', '        safeEngine.transferCollateral(collateralType, address(this), msg.sender, leftoverCollateral);\n', '        delete bids[id];\n', '        emit TerminateAuctionPrematurely(id, msg.sender, leftoverCollateral);\n', '    }\n', '\n', '    // --- Getters ---\n', '    function bidAmount(uint256 id) public view returns (uint256) {\n', '        return 0;\n', '    }\n', '    function remainingAmountToSell(uint256 id) public view returns (uint256) {\n', '        return subtract(bids[id].amountToSell, bids[id].soldAmount);\n', '    }\n', '    function forgoneCollateralReceiver(uint256 id) public view returns (address) {\n', '        return bids[id].forgoneCollateralReceiver;\n', '    }\n', '    function raisedAmount(uint256 id) public view returns (uint256) {\n', '        return bids[id].raisedAmount;\n', '    }\n', '    function amountToRaise(uint256 id) public view returns (uint256) {\n', '        return bids[id].amountToRaise;\n', '    }\n', '}']