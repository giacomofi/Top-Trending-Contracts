['/**\n', '* SPDX-License-Identifier: LicenseRef-Aktionariat\n', '*\n', '* MIT License with Automated License Fee Payments\n', '*\n', '* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\n', '*\n', '* Permission is hereby granted to any person obtaining a copy of this software\n', '* and associated documentation files (the "Software"), to deal in the Software\n', '* without restriction, including without limitation the rights to use, copy,\n', '* modify, merge, publish, distribute, sublicense, and/or sell copies of the\n', '* Software, and to permit persons to whom the Software is furnished to do so,\n', '* subject to the following conditions:\n', '*\n', '* - The above copyright notice and this permission notice shall be included in\n', '*   all copies or substantial portions of the Software.\n', '* - All automated license fee payments integrated into this and related Software\n', '*   are preserved.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '* SOFTWARE.\n', '*/\n', 'pragma solidity >=0.8;\n', '\n', 'import "./ERC20Recoverable.sol";\n', 'import "./ERC20Draggable.sol";\n', '\n', '/**\n', ' * @title Draggable CompanyName AG Shares\n', ' * @author Luzius Meisser, [email\xa0protected]\n', ' *\n', ' * This is an ERC-20 token representing shares of CompanyName AG that are bound to\n', " * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\n", ' * The shareholder agreement is partially enforced through this smart contract. The agreement\n', ' * is designed to facilitate a complete acquisition of the firm even if a minority of shareholders\n', ' * disagree with the acquisition, to protect the interest of the minority shareholders by requiring\n', ' * the acquirer to offer the same conditions to everyone when acquiring the company, and to\n', ' * facilitate an update of the shareholder agreement even if a minority of the shareholders that\n', ' * are bound to this agreement disagree. The name "draggable" stems from the convention of calling\n', ' * the right to drag a minority along with a sale of the company "drag-along" rights. The name is\n', ' * chosen to ensure that token holders are aware that they are bound to such an agreement.\n', ' *\n', ' * The percentage of token holders that must agree with an update of the terms is defined by the\n', ' * constant UPDATE_QUORUM. The percentage of yes-votes that is needed to successfully complete an\n', ' * acquisition is defined in the constant ACQUISITION_QUORUM. Note that the update quorum is based\n', ' * on the total number of tokens in circulation. In contrast, the acquisition quorum is based on the\n', ' * number of votes cast during the voting period, not taking into account those who did not bother\n', ' * to vote.\n', ' */\n', '\n', 'contract DraggableShares is ERC20Recoverable, ERC20Draggable {\n', '\n', '    string public terms;\n', '\n', '    constructor(string memory _terms, address wrappedToken, uint256 quorumBps, uint256 votePeriodSeconds)\n', '        ERC20Draggable(wrappedToken, quorumBps, votePeriodSeconds) {\n', '        terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\n', '    }\n', '\n', '    function transfer(address to, uint256 value) override(ERC20Recoverable, ERC20) public returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function getClaimDeleter() public view override returns (address) {\n', '        return IRecoverable(address(wrapped)).getClaimDeleter();\n', '    }\n', '\n', '    function getCollateralRate(address collateralType) public view override returns (uint256) {\n', '        uint256 rate = super.getCollateralRate(collateralType);\n', '        if (rate > 0) {\n', '            return rate;\n', '        } else if (collateralType == address(wrapped)) {\n', '            return unwrapConversionFactor;\n', '        } else {\n', '            // If the wrapped contract allows for a specific collateral, we should too.\n', '            // If the wrapped contract is not IRecoverable, we will fail here, but would fail anyway.\n', '            return IRecoverable(address(wrapped)).getCollateralRate(collateralType) * unwrapConversionFactor;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'abstract contract IRecoverable {\n', '    function getCollateralRate(address) public virtual view returns (uint256);\n', '    function getClaimDeleter() public virtual view returns (address);\n', '}']