['pragma solidity 0.8.3;\n', '\n', 'import "./ERC721.sol";\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'contract Exponential is ERC721 {\n', '    \n', '    uint public exponentsMinted;\n', '    address contractCreator;\n', '    string baseURI;\n', '    \n', '    constructor() ERC721("Exponential", "EXP") {\n', '        contractCreator = msg.sender;\n', '        baseURI = "ipfs://QmbuZUpMQGmbyjGH6XstCMcsynxUN4QN7TEzkNHAGDCqnk/";\n', '    }\n', '    \n', '    \n', '    modifier isContractCreator() {\n', '        require(msg.sender == contractCreator);\n', '        _;\n', '    }\n', '\n', '    function mint() external payable returns (uint256) {\n', '        require(msg.value == 2 ** exponentsMinted);\n', '        uint id = exponentsMinted++;\n', '\n', '        _safeMint(msg.sender, id);\n', '        return id;\n', '    }\n', '    \n', '    \n', '    function _baseURI() internal override view virtual returns (string memory) {\n', '        return baseURI;\n', '    }\n', '    \n', '    function updateBaseURI(string memory uri) external isContractCreator {\n', '        baseURI = uri;\n', '    }\n', '    \n', '    function updateOwner(address newOwner) external isContractCreator {\n', '        contractCreator = newOwner;\n', '    }\n', '    \n', '    function withdrawEarnings() external isContractCreator {\n', '        payable(msg.sender).transfer(address(this).balance);\n', '    }\n', '}']