['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.3;\n', '\n', 'import "./Context.sol";\n', 'import "./IERC1155.sol";\n', 'import "./SafeMath.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', 'interface ISTAKE {\n', '  function manualUpdate(address account) external;\n', '}\n', '\n', 'contract Boost is Context, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public BoostNFTID;\n', '    IERC1155 private NFT;\n', '    ISTAKE private LOOTFARM;\n', '    ISTAKE private LPFARM;\n', '\n', '    mapping(address => bool) private staked;\n', '\n', '    constructor (uint256 _id, address _nft, address lootfarm, address lpfarm) {\n', '        BoostNFTID = _id;\n', '        NFT = IERC1155(_nft);\n', '        LOOTFARM = ISTAKE(lootfarm);\n', '        LPFARM = ISTAKE(lpfarm);\n', '    }\n', '\n', '    function stake() public nonReentrant {\n', '        require(staked[_msgSender()] == false, "Already staked NFT");\n', '        LOOTFARM.manualUpdate(_msgSender());\n', '        LOOTFARM.manualUpdate(_msgSender());\n', '        staked[_msgSender()] = true;\n', '        NFT.safeTransferFrom(_msgSender(), address(this), BoostNFTID, 1, "");\n', '    }\n', '\n', '    function unstake() public nonReentrant {\n', '        require(staked[_msgSender()] == true, "No staked NFT");\n', '        LOOTFARM.manualUpdate(_msgSender());\n', '        LPFARM.manualUpdate(_msgSender());\n', '        staked[_msgSender()] = false;\n', '        NFT.safeTransferFrom(address(this), _msgSender(), BoostNFTID, 1, "");\n', '    }\n', '\n', '    function hasBoost(address account) public view returns (bool) {\n', '        return staked[account];\n', '    }\n', '}']