['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface OracleSecurityModule {\n', '    function peek() external view returns (uint256, bool);\n', '    function peep() external view returns (uint256, bool);\n', '    function bud(address) external view returns (uint256);\n', '}\n', '\n', 'interface EACAggregatorProxy {\n', '    function decimals() external view returns (uint8);\n', '    function latestAnswer() external view returns (int256);\n', '}\n', '\n', 'contract OSMedianizer {\n', '    mapping(address => bool) public authorized;\n', '    address public governance;\n', '    address public token;\n', '\n', '    OracleSecurityModule public OSM;\n', '    EACAggregatorProxy public MEDIANIZER;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '        token = address(0x514910771AF9Ca656af840dff83E8264EcF986CA);\n', '        OSM = OracleSecurityModule(0x9B0C694C6939b5EA9584e9b61C7815E8d97D9cC7);\n', '        MEDIANIZER = EACAggregatorProxy(0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c);\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function setAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = true;\n', '    }\n', '    \n', '    function revokeAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = false;\n', '    }\n', '    \n', '    function read() external view returns (uint price, bool osm) {\n', '        if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {\n', '            (price, osm) = OSM.peek();\n', '            if (osm) return (price, true);\n', '        }\n', '        return (uint(MEDIANIZER.latestAnswer()) * 1e10, false);\n', '    }\n', '    \n', '    function foresight() external view returns (uint price, bool osm) {\n', '        if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {\n', '            (price, osm) = OSM.peep();\n', '            if (osm) return (price, true);\n', '        }\n', '        return (uint(MEDIANIZER.latestAnswer()) * 1e10, false);\n', '    }\n', '}']