['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.6.12;\n', '\n', "import './libraries/SafeMath.sol';\n", "import './libraries/TransferHelper.sol';\n", "import './interfaces/IERC20.sol';\n", "import './interfaces/IWETH.sol';\n", "import './interfaces/ICentaurFactory.sol';\n", "import './interfaces/ICentaurPool.sol';\n", "import './interfaces/ICentaurRouter.sol';\n", 'import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', 'contract CentaurRouter is ICentaurRouter {\n', '\tusing SafeMath for uint;\n', '\n', '\taddress public override factory;\n', '    address public immutable override WETH;\n', '    bool public override onlyEOAEnabled;\n', '    mapping(address => bool) public override whitelistContracts;\n', '\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'CentaurSwap: EXPIRED');\n", '        _;\n', '    }\n', '\n', '    modifier onlyEOA(address _address) {\n', '        if (onlyEOAEnabled) {\n', "            require((!Address.isContract(_address) || whitelistContracts[_address]), 'CentaurSwap: ONLY_EOA_ALLOWED');\n", '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactory() {\n', "        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\n", '        _;\n', '    }\n', '\n', '    constructor(address _factory, address _WETH) public {\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '        onlyEOAEnabled = true;\n', '    }\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '    // **** ADD LIQUIDITY ****\n', '    function _addLiquidity(\n', '        address _baseToken,\n', '        uint _amount,\n', '        uint _minLiquidity\n', '    ) internal view virtual returns (uint liquidity) {\n', '\t\tICentaurPool pool = ICentaurPool(ICentaurFactory(factory).getPool(_baseToken));\n', '\n', '        uint _totalSupply = pool.totalSupply();\n', '        uint _baseTokenTargetAmount = pool.baseTokenTargetAmount();\n', '        liquidity = _amount;\n', '\n', '        if (_totalSupply == 0) {\n', '            liquidity = _amount.add(_baseTokenTargetAmount);\n', '        } else {\n', '            liquidity = _amount.mul(_totalSupply).div(_baseTokenTargetAmount);\n', '        }\n', '\n', "    \trequire(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '    }\n', '\n', '    function addLiquidity(\n', '        address _baseToken,\n', '        uint _amount,\n', '        address _to,\n', '        uint _minLiquidity,\n', '        uint _deadline\n', '    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount, uint liquidity) {\n', '        address pool = ICentaurFactory(factory).getPool(_baseToken);\n', "        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\n", '\n', '        (liquidity) = _addLiquidity(_baseToken, _amount, _minLiquidity);\n', '        \n', '        TransferHelper.safeTransferFrom(_baseToken, msg.sender, pool, _amount);\n', '        liquidity = ICentaurPool(pool).mint(_to);\n', "        require(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '\n', '        return (_amount, liquidity);\n', '    }\n', '\n', '    function removeLiquidity(\n', '        address _baseToken,\n', '        uint _liquidity,\n', '        address _to,\n', '        uint _minAmount,\n', '        uint _deadline\n', '    ) public virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount) {\n', '        address pool = ICentaurFactory(factory).getPool(_baseToken);\n', "        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\n", '\n', '        ICentaurPool(pool).transferFrom(msg.sender, pool, _liquidity); // send liquidity to pool\n', '        amount = ICentaurPool(pool).burn(_to);\n', "        require(amount > _minAmount, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '\n', '        return amount;\n', '    }\n', '\n', '    function swapExactTokensForTokens(\n', '        address _fromToken,\n', '        uint _amountIn,\n', '        address _toToken,\n', '        uint _amountOutMin,\n', '        address _to,\n', '        uint _deadline\n', '    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\n', "        require(getAmountOut(_fromToken, _toToken, _amountIn) >= _amountOutMin, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        \n', '        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\n', '\n', '        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, _amountIn);\n', '\n', '        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\n', '        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\n', '    }\n', '\n', '    function swapTokensForExactTokens(\n', '        address _fromToken,\n', '        uint _amountInMax,\n', '        address _toToken,\n', '        uint _amountOut,\n', '        address _to,\n', '        uint _deadline\n', '    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\n', '        uint amountIn = getAmountIn(_fromToken, _toToken, _amountOut);\n', "        require(amountIn <= _amountInMax, 'CentaurSwap: EXCESSIVE_INPUT_AMOUNT');\n", '        \n', '        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\n', '\n', '        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, amountIn);\n', '\n', '        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\n', '        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\n', '    }\n', '\n', '    function swapSettle(address _sender, address _pool) external virtual override returns (uint amount) {\n', '        amount = ICentaurPool(_pool).swapSettle(_sender);\n', '    }\n', '\n', '    function swapSettleMultiple(address _sender, address[] memory _pools) external virtual override {\n', '        for(uint i = 0; i < _pools.length; i++) {\n', '            ICentaurPool(_pools[i]).swapSettle(_sender);\n', '        }\n', '    }\n', '\n', '    function validatePools(address _fromToken, address _toToken) public view virtual override returns (address inputTokenPool, address outputTokenPool) {\n', '        inputTokenPool = ICentaurFactory(factory).getPool(_fromToken);\n', "        require(inputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\n", '\n', '        outputTokenPool = ICentaurFactory(factory).getPool(_toToken);\n', "        require(outputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\n", '\n', '        return (inputTokenPool, outputTokenPool);\n', '    } \n', '\n', '    function getAmountOut(\n', '        address _fromToken,\n', '        address _toToken,\n', '        uint _amountIn\n', '    ) public view virtual override returns (uint amountOut) {\n', '        uint poolFee = ICentaurFactory(factory).poolFee();\n', '        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getValueFromAmountIn(_amountIn);\n', '        uint amountOutBeforeFees = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getAmountOutFromValue(value);\n', '        amountOut = (amountOutBeforeFees).mul(uint(100 ether).sub(poolFee)).div(100 ether);\n', '    }\n', '\n', '    function getAmountIn(\n', '        address _fromToken,\n', '        address _toToken,\n', '        uint _amountOut\n', '    ) public view virtual override returns (uint amountIn) {\n', '        uint poolFee = ICentaurFactory(factory).poolFee();\n', '        uint amountOut = _amountOut.mul(100 ether).div(uint(100 ether).sub(poolFee));\n', '        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getValueFromAmountOut(amountOut);\n', '        amountIn = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getAmountInFromValue(value);\n', '    }\n', '\n', '    // Helper functions\n', '    function setFactory(address _factory) external virtual override onlyFactory {\n', '        factory = _factory;\n', '    }\n', '\n', '    function setOnlyEOAEnabled(bool _onlyEOAEnabled) external virtual override onlyFactory {\n', '        onlyEOAEnabled = _onlyEOAEnabled;\n', '    }\n', '\n', '    function addContractToWhitelist(address _address) external virtual override onlyFactory {\n', "        require(Address.isContract(_address), 'CentaurSwap: NOT_CONTRACT');\n", '        whitelistContracts[_address] = true;\n', '    }\n', '\n', '    function removeContractFromWhitelist(address _address) external virtual override onlyFactory {\n', '        whitelistContracts[_address] = false;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    function symbol() external pure returns (string memory);\n', '    /**\n', '     * @dev Returns the token decimal.\n', '     */\n', '    function decimals() external pure returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ICentaurFactory {\n', '    event PoolCreated(address indexed token, address pool, uint);\n', '\n', '    function poolFee() external view returns (uint);\n', '\n', '    function poolLogic() external view returns (address);\n', '    function cloneFactory() external view returns (address);\n', '    function settlement() external view returns (address);\n', '    function router() external view returns (address payable);\n', '\n', '    function getPool(address token) external view returns (address pool);\n', '    function allPools(uint) external view returns (address pool);\n', '    function allPoolsLength() external view returns (uint);\n', '    function isValidPool(address pool) external view returns (bool);\n', '\n', '    function createPool(address token, address oracle, uint poolUtilizationPercentage) external returns (address pool);\n', '    function addPool(address pool) external;\n', '    function removePool(address pool) external;\n', '\n', '    function setPoolLiquidityParameter(address, uint) external;\n', '    function setPoolTradeEnabled(address, bool) external;\n', '    function setPoolDepositEnabled(address, bool) external;\n', '    function setPoolWithdrawEnabled(address, bool) external;\n', '    function setAllPoolsTradeEnabled(bool) external;\n', '    function setAllPoolsDepositEnabled(bool) external;\n', '    function setAllPoolsWithdrawEnabled(bool) external;\n', '    function emergencyWithdrawFromPool(address, address, uint, address) external;\n', '\n', '    function setRouterOnlyEOAEnabled(bool) external;\n', '    function setRouterContractWhitelist(address, bool) external;\n', '\n', '    function setSettlementDuration(uint) external;\n', '\n', '    function setPoolFee(uint) external;\n', '    function setPoolLogic(address) external;\n', '    function setCloneFactory(address) external;\n', '    function setSettlement(address) external;\n', '    function setRouter(address payable) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ICentaurPool {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    event Mint(address indexed sender, uint amount);\n', '    event Burn(address indexed sender, uint amount, address indexed to);\n', '    event AmountIn(address indexed sender, uint amount);\n', '    event AmountOut(address indexed sender, uint amount, address indexed to);\n', '    event EmergencyWithdraw(uint256 _timestamp, address indexed _token, uint256 _amount, address indexed _to);\n', '\n', '    function factory() external view returns (address);\n', '    function settlement() external view returns (address);\n', '    function baseToken() external view returns (address);\n', '    function baseTokenDecimals() external view returns (uint);\n', '    function oracle() external view returns (address);\n', '    function oracleDecimals() external view returns (uint);\n', '    function baseTokenTargetAmount() external view returns (uint);\n', '    function baseTokenBalance() external view returns (uint);\n', '    function liquidityParameter() external view returns (uint);\n', '\n', '    function init(address, address, address, uint) external;\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount);\n', '\n', '    function swapTo(address _sender, address _fromToken, uint _amountIn, uint _value, address _receiver) external returns (uint maxAmount);\n', '    function swapFrom(address _sender) external returns (uint amount, uint value);\n', '    function swapSettle(address _sender) external returns (uint);\n', '\n', '    function getOraclePrice() external view returns (uint price);\n', '    function getAmountOutFromValue(uint _value) external view returns (uint amount);\n', '    function getValueFromAmountIn(uint _amount) external view returns (uint value);\n', '    function getAmountInFromValue(uint _value) external view returns (uint amount);\n', '    function getValueFromAmountOut(uint _amount) external view returns (uint value);\n', '\n', '    function setFactory(address) external;\n', '    function setTradeEnabled(bool) external;\n', '    function setDepositEnabled(bool) external;\n', '    function setWithdrawEnabled(bool) external;\n', '    function setLiquidityParameter(uint) external;\n', '    function emergencyWithdraw(address, uint, address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface ICentaurRouter {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function onlyEOAEnabled() external pure returns (bool);\n', '    function whitelistContracts(address _address) external view returns (bool);\n', '\n', '    function addLiquidity(\n', '        address _baseToken,\n', '        uint _amount,\n', '        address _to,\n', '        uint _minLiquidity,\n', '        uint _deadline\n', '    ) external returns (uint amount, uint liquidity);\n', '    function removeLiquidity(\n', '        address _baseToken,\n', '        uint _liquidity,\n', '        address _to,\n', '        uint _minAmount,\n', '        uint _deadline\n', '    ) external returns (uint amount);\n', '\n', '    function swapExactTokensForTokens(\n', '        address _fromToken,\n', '        uint _amountIn,\n', '        address _toToken,\n', '        uint _amountOutMin,\n', '        address to,\n', '        uint _deadline\n', '    ) external;\n', '    function swapTokensForExactTokens(\n', '        address _fromToken,\n', '        uint _amountInMax,\n', '        address _toToken,\n', '        uint _amountOut,\n', '        address _to,\n', '        uint _deadline\n', '    ) external;\n', '\n', '    function swapSettle(address _sender, address _pool) external returns (uint amount);\n', '    function swapSettleMultiple(address _sender, address[] memory _pools) external;\n', '\n', '    function validatePools(address _fromToken, address _toToken) external view returns (address inputTokenPool, address outputTokenPool);\n', '    function getAmountOut(address _fromToken, address _toToken, uint _amountIn) external view returns (uint amountOut);\n', '    function getAmountIn(address _fromToken, address _toToken, uint _amountOut) external view returns (uint amountIn);\n', '\n', '    function setFactory(address) external;\n', '    function setOnlyEOAEnabled(bool) external;\n', '    function addContractToWhitelist(address) external;\n', '    function removeContractFromWhitelist(address) external;\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']