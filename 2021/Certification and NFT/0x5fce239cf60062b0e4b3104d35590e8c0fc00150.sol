['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function decimals() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', 'interface IyVault {\n', '    function token() external view returns (address);\n', '    function deposit(uint, address) external returns (uint);\n', '    function withdraw(uint, address, uint) external returns (uint);\n', '    function permit(address, address, uint, uint, bytes32) external view returns (bool);\n', '    function pricePerShare() external view returns (uint);\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract yAffiliateTokenV2 {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    /// @notice EIP-20 token name for this token\n', '    string public name;\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public symbol;\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint256 public decimals;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0;\n', '\n', '    mapping(address => mapping (address => uint)) internal allowances;\n', '    mapping(address => uint) internal balances;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '    bytes32 public immutable DOMAINSEPARATOR;\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    \n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '    \n', '    uint public index = 0;\n', '    uint public bal = 0;\n', '    \n', '    function update() external {\n', '        _update();\n', '    }\n', '    \n', '    function _update() internal {\n', '        if (totalSupply > 0) {\n', '            uint256 _bal = IyVault(vault).pricePerShare();\n', '            if (_bal > bal) {\n', '                uint256 _diff = _bal - bal;\n', '                if (_diff > 0) {\n', '                    uint256 _ratio = _diff * 10**decimals / totalSupply;\n', '                    if (_ratio > 0) {\n', '                      index += _ratio;\n', '                      bal = _bal;\n', '                    }\n', '                }\n', '            }\n', '        } else {\n', '            bal = IyVault(vault).pricePerShare();\n', '        }\n', '    }\n', '    \n', '    function _mint(address dst, uint amount) internal {\n', '        // mint the amount\n', '        totalSupply += amount;\n', '        // transfer the amount to the recipient\n', '        balances[dst] += amount;\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '    \n', '    function _burn(address dst, uint amount) internal {\n', '        // burn the amount\n', '        totalSupply -= amount;\n', '        // transfer the amount from the recipient\n', '        balances[dst] -= amount;\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '    \n', '    address public affiliate;\n', '    address public governance;\n', '    address public pendingGovernance;\n', '    \n', '    address public immutable token;\n', '    address public immutable vault;\n', '    \n', '    constructor(address _governance, string memory _moniker, address _affiliate, address _token, address _vault) {\n', '        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\n', '        affiliate = _affiliate;\n', '        governance = _governance;\n', '        token = _token;\n', '        vault = _vault;\n', '        \n', '        name = string(abi.encodePacked(_moniker, "-yearn ", IERC20(_token).name()));\n', '        symbol = string(abi.encodePacked(_moniker, "-yv", IERC20(_token).symbol()));\n', '        decimals = IERC20(_token).decimals();\n', '        \n', '        IERC20(_token).approve(_vault, type(uint).max);\n', '    }\n', '    \n', '    function setGovernance(address _gov) external {\n', '        require(msg.sender == governance);\n', '        pendingGovernance = _gov;\n', '    } \n', '    \n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance);\n', '        governance = pendingGovernance;\n', '    }\n', '    \n', '    function currentContribution() external view returns (uint) {\n', '        return 1e18 * IERC20(vault).balanceOf(address(this)) / IERC20(vault).totalSupply();\n', '    }\n', '    \n', '    function setAffiliate(address _affiliate) external {\n', '        require(msg.sender == governance || msg.sender == affiliate);\n', '        affiliate = _affiliate;\n', '    }\n', '    \n', '    function depositAll() external {\n', '        _deposit(IERC20(token).balanceOf(msg.sender));\n', '    }\n', '    \n', '    function deposit(uint amount) external {\n', '        _deposit(amount);\n', '    }\n', '    \n', '    function _deposit(uint amount) internal {\n', '        _update();\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '        _mint(msg.sender, IyVault(vault).deposit(amount, address(this)));\n', '    }\n', '    \n', '    function withdrawAll(uint maxLoss) external {\n', '        _withdraw(balances[msg.sender], maxLoss);\n', '    }\n', '    \n', '    function withdraw(uint amount, uint maxLoss) external {\n', '        _withdraw(amount, maxLoss);\n', '    }\n', '    \n', '    function _withdraw(uint amount, uint maxLoss) internal {\n', '        _update();\n', '        _burn(msg.sender, amount);\n', '        IyVault(vault).withdraw(amount, msg.sender, maxLoss);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAINSEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "permit: signature");\n', '        require(signatory == owner, "permit: unauthorized");\n', '        require(block.timestamp <= deadline, "permit: expired");\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint amount) external returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != type(uint).max) {\n', '            uint newAllowance = spenderAllowance - amount;\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        balances[src] -= amount;\n', '        balances[dst] += amount;\n', '        \n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function _getChainId() internal view returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}\n', '\n', 'contract yAffiliateFactoryV2 {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address public governance;\n', '    address public pendingGovernance;\n', '    \n', '    address[] public _affiliates;\n', '    mapping(address => bool) isAffiliate;\n', '    \n', '    address[] public _yAffiliateTokens;\n', '    \n', '    mapping(address => mapping(address => address[])) affiliateTokens;\n', '    mapping(address => mapping(address => bool)) isTokenAffiliate;\n', '    mapping(address => address[]) tokenAffiliates;\n', '    \n', '    function yAffiliateTokens() external view returns (address[] memory) {\n', '        return _yAffiliateTokens;\n', '    }\n', '    \n', '    function affiliates() external view returns (address[] memory) {\n', '        return _affiliates;\n', '    }\n', '    \n', '    constructor() {\n', '        governance = msg.sender;\n', '    }\n', '    \n', '    function lookupAffiliates(address token) external view returns (address[] memory) {\n', '        return tokenAffiliates[token];\n', '    }\n', '    \n', '    function lookupAffiliateToken(address token, address affiliate) external view returns (address[] memory) {\n', '        return affiliateTokens[token][affiliate];\n', '    }\n', '    \n', '    function setGovernance(address _gov) external {\n', '        require(msg.sender == governance);\n', '        pendingGovernance = _gov;\n', '    } \n', '    \n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance);\n', '        governance = pendingGovernance;\n', '    }\n', '    \n', '    function deploy(string memory _moniker, address _affiliate, address _token, address _vault) external {\n', '        require(msg.sender == governance);\n', '        if (!isAffiliate[_affiliate]) {\n', '            _affiliates.push(_affiliate);\n', '            isAffiliate[_affiliate] = true;\n', '        }\n', '        if (!isTokenAffiliate[_token][_affiliate]) {\n', '            tokenAffiliates[_token].push(_affiliate);\n', '            isTokenAffiliate[_token][_affiliate] = true;\n', '        }\n', '        address _yAffiliateToken = address(new yAffiliateTokenV2(governance, _moniker, _affiliate, _token, _vault));\n', '        _yAffiliateTokens.push(_yAffiliateToken);\n', '        \n', '        affiliateTokens[_token][_affiliate].push(_yAffiliateToken);\n', '    }\n', '    \n', '}']