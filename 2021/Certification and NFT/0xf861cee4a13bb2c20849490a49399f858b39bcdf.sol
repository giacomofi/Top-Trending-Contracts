['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * This file is part of the 1st Solidity Gas Golfing Contest.\n', ' *\n', ' * Author: Zachary Williamson\n', ' *\n', ' * This work is licensed under Creative Commons Attribution ShareAlike 3.0.\n', ' * https://creativecommons.org/licenses/by-sa/3.0/\n', ' */\n', '\n', 'library UniqueAddresses {\n', '    function uniquify(address[]) external view returns(address[]) {\n', '        assembly {\n', "            // first, let's check there's actually some data to operate on\n", '            0x24 calldataload 0x01 lt has_data jumpi\n', '            calldatacopy(0, 0x04, calldatasize)\n', '            return(0x00, sub(calldatasize, 0x04))\n', '        has_data:\n', '            0x44\n', '            dup1 calldataload\n', '            dup2 0x20 add calldataload\n', '        test_run:\n', '            lt input_is_ordered jumpi\n', '            jump(maybe_has_non_trivial_structure)\n', '        input_is_ordered:\n', '            0x20 add\n', '            dup1 calldataload\n', '            dup2 0x20 add calldataload\n', '            0x140 calldatasize sub dup4 lt test_run jumpi\n', '        calldatacopy(0, 0x04, calldatasize)\n', '        return(0x00, sub(calldatasize, 0x04))\n', '\n', '        maybe_has_non_trivial_structure:\n', '            pop\n', '            0x44\n', '            dup1 calldataload\n', '            dup2 0x20 add calldataload\n', '        test_reverse_run:\n', '            gt input_is_reverse_ordered jumpi\n', '            jump(probably_has_non_trivial_structure)\n', '        input_is_reverse_ordered:\n', '            0x20 add\n', '            dup1 calldataload\n', '            dup2 0x20 add calldataload\n', '            0x140 calldatasize sub dup4 lt test_reverse_run jumpi\n', '        calldatacopy(0, 0x04, calldatasize)\n', '        return(0x00, sub(calldatasize, 0x04))\n', '\n', '        probably_has_non_trivial_structure:\n', '        pop\n', '        0x64 0x44 calldataload         // prev index\n', '        test_identical_loop:\n', '            dup2 calldataload              // current prev index\n', '            dup1 swap2                     // prev current current index\n', '            eq iszero somewhat_likely_has_non_trivial_structure jumpi         // prev index        \n', "            swap1 0x20 add swap1           // prev i'\n", '            dup2 0x140 gt test_identical_loop jumpi\n', '            0x20 0x00 mstore\n', '            0x01 0x20 mstore\n', '            0x44 calldataload 0x40 mstore\n', '        return(0x00, 0x60) // hey, everything is the same!\n', '\n', '        somewhat_likely_has_non_trivial_structure:\n', '        pop pop\n', '        0x44 0x44 calldataload\n', '        test_pairs_outer_loop:\n', "            swap1 0x20 add swap1            // prev i'\n", '            dup2 calldataload               // current prev index\n', '            dup1 swap2                      // prev current current index\n', '            eq test_pairs_outer_loop jumpi  // current index\n', '            // ok, now we have two unique elements  // a index\n', '            0x44 calldataload                   // b a index\n', '            test_pairs_inner_loop:\n', '                swap2 0x20 add swap2            // b a index\n', '                dup2                        // a b a index\n', '                dup4 calldataload           // x a b a index\n', '                dup3 dup2                   // x b x a b a index\n', '                eq                          // (x=b?) x a b a\n', '                swap2 eq or                 // (x=a|b) b a index\n', '                iszero definitely_has_non_trivial_structure jumpi   // b a index\n', '                dup3 0x140 calldatasize sub gt test_pairs_inner_loop jumpi\n', '                // hey! There are only two elements!\n', '                0x20 0x00 mstore\n', '                0x02 0x20 mstore\n', '                0x40 mstore\n', '                0x60 mstore\n', '                0x80 0x00 return\n', '\n', '\n', '        definitely_has_non_trivial_structure:\n', '            pop pop pop\n', '            // Ok, at this point we have some interesting data to work on and this is where the algorithm really begins.\n', '            // Push the calldata pointer onto the stack. First array element will be at index 0x44\n', '            0x44\n', '            // Create the hash table: converts a 8-bit key into a 256-bit\n', '            // value. Only one bit is set high and there are 256 unique\n', '            // permutations in the lookup table\n', '            1 0x0 mstore\n', '            2 0x20 mstore\n', '            4 0x40 mstore\n', '            8 0x60 mstore\n', '            16 0x80 mstore\n', '            32 0xa0 mstore\n', '            64 0xc0 mstore\n', '            128 0xe0 mstore\n', '\n', "            // We want to use 'msize' as our pointer to the next element in our\n", "            // output array. It's self-incrementing, so we don't need to call\n", "            // '0x20 add' every iteration. It also costs 2 gas, as opposed to\n", '            // duplicating a stack-based pointer which costs 3 gas.\n', '            // Reducing the stack depth also removes the need for 1 swap op (3 gas),\n', '            // as we would otherwise need to increment both the output array pointer\n', '            // and the calldata pointer, which requires a swap\n', '            // Total gas saving: 10 gas per iteration\n', '\n', '            // in order to do this, we store data in a word that is one word after the\n', '            // reserved bloom filter memory.\n', '            // We use the memory from 0x100 to 0x900 to store our bloom filter,\n', '            // which is 64 machine words. Having a value that is a power of 2 allows for\n', '            // very cheap indexing in our main loop, which is worth the extra gas costs of a larger filter\n', '            0x01 0x500 mstore\n', '    // ### MAIN LOOP\n', "    // We know there's at least one array element, so fall into the loop\n", '        loop_start:\n', '            dup1 calldataload           // stack state: v\n', '            0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47 mul // stack state: h s\n', '            dup1 0x3e0 and 0x100 add    // stack state: i h s\n', '            swap1 28 byte mload         // stack state: b i s\n', '            dup2 mload dup2 and skip_add_to_set jumpi\n', '                dup3 calldataload msize mstore\n', '                dup2 mload or           // stack state: r i s\n', '                swap1 mstore            // stack state: s\n', "                0x20 add                // stack state: s'\n", '\n', '        // 2nd iteration\n', '            dup1 calldataload           // stack state: v\n', '            0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47 mul // stack state: h s\n', '            dup1 0x3e0 and 0x100 add    // stack state: i h s\n', '            swap1 28 byte mload         // stack state: b i s\n', '            dup2 mload dup2 and skip_add_to_set jumpi\n', '                dup3 calldataload msize mstore\n', '                dup2 mload or           // stack state: r i s\n', '                swap1 mstore            // stack state: s\n', "                0x20 add                // stack state: s'\n", '\n', '            calldatasize dup2 lt loop_start jumpi\n', '\n', '            0x20 0x4e0 mstore          // stack state: s\n', '            0x520 msize sub            // stack state: l s\n', '            0x20 dup2 div 0x500 mstore // stack state: l s\n', '            0x40 add 0x4e0 return\n', '\n', '            skip_add_to_set:\n', '                pop pop\n', '                0x20 add\n', '                calldatasize dup2 lt loop_start jumpi\n', '            0x20 0x4e0 mstore          // stack state:\n', '            0x520 msize sub            // stack state: l\n', '            0x20 dup2 div 0x500 mstore // stack state: l\n', '            0x40 add 0x4e0 return\n', '\n', "            // the variable number of 'pop' instructions in the main loop upsets the compiler, poor thing\n", '            // pop a stack variable to prevent it from throwing errors\n', '            pop\n', '        }\n', '    }\n', '}']