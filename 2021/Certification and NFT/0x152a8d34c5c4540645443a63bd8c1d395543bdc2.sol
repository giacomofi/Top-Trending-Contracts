['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/access/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT;\n', 'pragma solidity ^0.7.6;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/security/Pausable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', '\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor() {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', '\n', 'abstract contract Ownable is Pausable {\n', '    address public _owner;\n', '    address public _admin;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor(address ownerAddress) {\n', '        _owner = msg.sender;\n', '        _admin = ownerAddress;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(_admin == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyAdmin {\n', '        emit OwnershipTransferred(_owner, _admin);\n', '        _owner = _admin;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/legacy/U2Legacy.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract AdminV2 {\n', '    struct tokenInfo {\n', '        bool isExist;\n', '        uint8 decimal;\n', '        uint256 userStakeLimit;\n', '        uint256 maxStake;\n', '        uint256 lockableDays;\n', '        bool optionableStatus;\n', '    }\n', '\n', '    uint256 public stakeDuration;\n', '    uint256 public refPercentage;\n', '    uint256 public optionableBenefit;\n', '    mapping(address => address[]) public tokensSequenceList;\n', '    mapping(address => tokenInfo) public tokenDetails;\n', '    mapping(address => mapping(address => uint256))\n', '        public tokenDailyDistribution;\n', '    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '\n', '    function safeWithdraw(address tokenAddress, uint256 amount)\n', '        external\n', '        virtual;\n', '\n', '    function transferOwnership(address newOwner) external virtual;\n', '\n', '    function owner() external virtual returns (address);\n', '}\n', '\n', 'abstract contract U2Legacy is AdminV2 {\n', '    mapping(address => uint256) public totalStaking;\n', '\n', '    function viewStakingDetails(address _user)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            address[] memory,\n', '            address[] memory,\n', '            bool[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory\n', '        );\n', '}\n', '\n', '\n', '// File contracts/proxy/AdminV2Proxy.sol\n', '\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract AdminV2Proxy {\n', '    mapping(address => uint256) public totalUnStakingB;\n', '    mapping(address => uint256) public totalUnStakingA;\n', '    mapping(address => mapping(uint256 => bool)) public unstakeStatus;\n', '\n', '    function safeWithdraw(address tokenAddress, uint256 amount)\n', '        external\n', '        virtual;\n', '\n', '    function transferOwnership(address newOwner) external virtual;\n', '\n', '    function owner() external virtual returns (address);\n', '}\n', '\n', '\n', '// File contracts/proxy/U2Proxy.sol\n', '\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract U2Proxy is AdminV2Proxy {\n', '    function totalStakingDetails(address tokenAddress)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/abstract/IERC20.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '// File contracts/U2ProxyUpgradablity.sol\n', '\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '\n', '\n', '\n', 'contract U2ProxyUpgradablity is Ownable {\n', '    /// @notice LockableToken struct for storing token lockable details\n', '    struct LockableTokens {\n', '        uint256 lockableDays;\n', '        bool optionableStatus;\n', '    }\n', '\n', '    /// @notice u2 Instance\n', '    U2Legacy public u2;\n', '\n', '    /// @notice u2Proxy Instance\n', '    U2Proxy public u2Proxy;\n', '\n', '    /// @notice poolStartTime when pool starts\n', '    uint256 public poolStartTime;\n', '\n', '    /// @notice SafeMath using for arithmatic operations\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice intervalDays for reward calculation x days.\n', '    uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\n', '\n', '    /// @notice DAYS stand 86400 seconds\n', '    uint256 public constant DAYS = 1 days;\n', '\n', '    /// @notice u2UpgradeTotalUnstaking to update totalUnStaking in U2Upgrade;\n', '    mapping(address => uint256) public u2UpgradeTotalUnStaking;\n', '\n', '    /// @notice u2UpgardeLockableDetails reterive lock token details\n', '    mapping(address => LockableTokens) public u2UpgradeLockableDetails;\n', '\n', '    /// @notice u2UnstakeStatus return true or false basis of you active staking.\n', '    mapping(address => mapping(uint256 => bool)) public u2UnstakeStatus;\n', '\n', '    /// @notice event IntervalDaysDetails emit on every update of Intervaldays.\n', '    event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\n', '\n', '    event Claim(\n', '        address indexed userAddress,\n', '        address indexed stakedTokenAddress,\n', '        address indexed tokenAddress,\n', '        uint256 claimRewards,\n', '        uint256 time\n', '    );\n', '\n', '    event UnStake(\n', '        address indexed userAddress,\n', '        address indexed unStakedtokenAddress,\n', '        uint256 unStakedAmount,\n', '        uint256 time,\n', '        uint256 stakeID\n', '    );\n', '\n', '    event ReferralEarn(\n', '        address indexed userAddress,\n', '        address indexed callerAddress,\n', '        address indexed rewardTokenAddress,\n', '        uint256 rewardAmount,\n', '        uint256 time\n', '    );\n', '\n', '    event LockableTokenDetails(\n', '        address indexed tokenAddress,\n', '        uint256 lockableDys,\n', '        bool optionalbleStatus,\n', '        uint256 updatedTime\n', '    );\n', '\n', '    event WithdrawDetails(\n', '        address indexed tokenAddress,\n', '        uint256 withdrawalAmount,\n', '        uint256 time\n', '    );\n', '\n', '    constructor() Ownable(msg.sender) {}\n', '\n', '    function init(address[] memory tokenAddress)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < tokenAddress.length; i++) {\n', '            safeTransfer(tokenAddress[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function lockableToken(\n', '        address tokenAddress,\n', '        uint8 lockableStatus,\n', '        uint256 lockedDays,\n', '        bool optionableStatus\n', '    ) external onlyOwner {\n', '        require(\n', '            lockableStatus == 1 || lockableStatus == 2 || lockableStatus == 3,\n', '            "Invalid Lockable Status"\n', '        );\n', '\n', '        (bool tokenExist, , , , , ) = u2.tokenDetails(tokenAddress);\n', '\n', '        require(tokenExist == true, "Token Not Exist");\n', '\n', '        if (lockableStatus == 1) {\n', '            u2UpgradeLockableDetails[tokenAddress].lockableDays = block\n', '            .timestamp\n', '            .add(lockedDays);\n', '        } else if (lockableStatus == 2)\n', '            u2UpgradeLockableDetails[tokenAddress].lockableDays = 0;\n', '        else if (lockableStatus == 3)\n', '            u2UpgradeLockableDetails[tokenAddress]\n', '            .optionableStatus = optionableStatus;\n', '\n', '        emit LockableTokenDetails(\n', '            tokenAddress,\n', '            u2UpgradeLockableDetails[tokenAddress].lockableDays,\n', '            u2UpgradeLockableDetails[tokenAddress].optionableStatus,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function safeTransfer(address tokenAddress) internal {\n', '        uint256 bal = IERC20(tokenAddress).balanceOf(address(u2Proxy));\n', '        if (bal > 0) u2Proxy.safeWithdraw(tokenAddress, bal);\n', '    }\n', '\n', '    function setPoolStartTime(uint256 epoch) external onlyOwner returns (bool) {\n', '        poolStartTime = epoch;\n', '        return true;\n', '    }\n', '\n', '    function setLegacyU2Addresses(address u2_, address u2Proxy_)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        u2 = U2Legacy(u2_);\n', '        u2Proxy = U2Proxy(u2Proxy_);\n', '        return true;\n', '    }\n', '\n', '    function updateIntervalDays(uint256[] memory _interval) external onlyOwner {\n', '        intervalDays = new uint256[](0);\n', '\n', '        for (uint8 i = 0; i < _interval.length; i++) {\n', '            uint256 noD = u2.stakeDuration().div(DAYS);\n', '            require(noD > _interval[i], "Invalid Interval Day");\n', '            intervalDays.push(_interval[i]);\n', '        }\n', '        emit IntervalDaysDetails(intervalDays, block.timestamp);\n', '    }\n', '\n', '    function safeWithdraw(address tokenAddress, uint256 amount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '            "SAFEWITHDRAW: Insufficient Balance"\n', '        );\n', '\n', '        require(\n', '            IERC20(tokenAddress).transfer(_owner, amount) == true,\n', '            "SAFEWITHDRAW: Transfer failed"\n', '        );\n', '\n', '        emit WithdrawDetails(tokenAddress, amount, block.timestamp);\n', '    }\n', '\n', '    function transferV2ProxyOwnership(address newOwner) external onlyOwner {\n', '        u2Proxy.transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @notice Get rewards for one day\n', '     * @param stakedAmount Stake amount of the user\n', '     * @param stakedToken Staked token address of the user\n', '     * @param rewardToken Reward token address\n', '     * @param totalStake totalStakeAmount\n', '     * @return reward One dayh reward for the user\n', '     */\n', '\n', '    function getOneDayReward(\n', '        uint256 stakedAmount,\n', '        address stakedToken,\n', '        address rewardToken,\n', '        uint256 totalStake\n', '    ) public view returns (uint256 reward) {\n', '        uint256 lockBenefit;\n', '\n', '        if (u2UpgradeLockableDetails[stakedToken].optionableStatus) {\n', '            stakedAmount = stakedAmount.mul(u2.optionableBenefit());\n', '            lockBenefit = stakedAmount.mul(u2.optionableBenefit().sub(1));\n', '            reward = (\n', '                stakedAmount.mul(\n', '                    u2.tokenDailyDistribution(stakedToken, rewardToken)\n', '                )\n', '            )\n', '            .div(totalStake.add(lockBenefit));\n', '        } else\n', '            reward = (\n', '                stakedAmount.mul(\n', '                    u2.tokenDailyDistribution(stakedToken, rewardToken)\n', '                )\n', '            )\n', '            .div(totalStake);\n', '    }\n', '\n', '    /**\n', '     * @notice send rewards\n', '     * @param stakedToken Stake amount of the user\n', '     * @param tokenAddress Reward token address\n', '     * @param amount Amount to be transferred as reward\n', '     */\n', '\n', '    function sendToken(\n', '        address user,\n', '        address stakedToken,\n', '        address tokenAddress,\n', '        uint256 amount\n', '    ) internal {\n', '        // Checks\n', '\n', '        if (tokenAddress != address(0)) {\n', '            require(\n', '                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '                "SEND : Insufficient Balance"\n', '            );\n', '            // Transfer of rewards\n', '            require(\n', '                IERC20(tokenAddress).transfer(user, amount),\n', '                "Transfer failed"\n', '            );\n', '            // Emit state changes\n', '            emit Claim(\n', '                user,\n', '                stakedToken,\n', '                tokenAddress,\n', '                amount,\n', '                block.timestamp\n', '            );\n', '        }\n', '    }\n', '\n', '    function getTotalStaking(address tokenAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 totalUnstaking = getTotalUnstaking(tokenAddress);\n', '        return u2.totalStaking(tokenAddress).sub(totalUnstaking);\n', '    }\n', '\n', '    function getTotalUnstaking(address tokenAddress)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            u2UpgradeTotalUnStaking[tokenAddress]\n', '                .add(u2Proxy.totalUnStakingB(tokenAddress))\n', '                .add(u2Proxy.totalUnStakingA(tokenAddress));\n', '    }\n', '\n', '    /**\n', '     * @notice Unstake and claim rewards\n', '     * @param stakeId Stake ID of the user\n', '     */\n', '    function unStake(address user, uint256 stakeId) external whenNotPaused {\n', '        require(\n', '            msg.sender == user || msg.sender == _owner,\n', '            "UNSTAKE: Invalid User Entry"\n', '        );\n', '\n', '        (\n', '            ,\n', '            address[] memory tokenAddress,\n', '            bool[] memory activeStatus,\n', '            ,\n', '            uint256[] memory stakedAmount,\n', '            uint256[] memory startTime\n', '        ) = (u2.viewStakingDetails(user));\n', '\n', '        bool isAlreadyUnstaked = u2Proxy.unstakeStatus(user, stakeId);\n', '\n', '        // lockableDays check\n', '        require(\n', '            u2UpgradeLockableDetails[tokenAddress[stakeId]].lockableDays <=\n', '                block.timestamp,\n', '            "Token Locked"\n', '        );\n', '\n', '        // optional lock check\n', '        if (\n', '            u2UpgradeLockableDetails[tokenAddress[stakeId]].optionableStatus ==\n', '            true\n', '        ) {\n', '            require(\n', '                poolStartTime.add(u2.stakeDuration()) <= block.timestamp,\n', '                "Locked in optional lock"\n', '            );\n', '        }\n', '\n', '        // Checks\n', '        if (\n', '            u2UnstakeStatus[user][stakeId] == false &&\n', '            activeStatus[stakeId] == true &&\n', '            isAlreadyUnstaked == false\n', '        ) u2UnstakeStatus[user][stakeId] = true;\n', '        else revert("UNSTAKE : Unstaked Already");\n', '\n', '        // State updation\n', '        uint256 totalUnstaking = getTotalUnstaking(tokenAddress[stakeId]);\n', '        uint256 totalStaking = u2.totalStaking(tokenAddress[stakeId]).sub(\n', '            totalUnstaking\n', '        );\n', '\n', '        // increase total unstaking\n', '        u2UpgradeTotalUnStaking[\n', '            tokenAddress[stakeId]\n', '        ] = u2UpgradeTotalUnStaking[tokenAddress[stakeId]].add(\n', '            stakedAmount[stakeId]\n', '        );\n', '\n', '        // Balance check\n', '        require(\n', '            IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\n', '                stakedAmount[stakeId],\n', '            "UNSTAKE : Insufficient Balance"\n', '        );\n', '\n', '        IERC20(tokenAddress[stakeId]).transfer(user, stakedAmount[stakeId]);\n', '\n', '        if (startTime[stakeId] < poolStartTime.add(u2.stakeDuration())) {\n', '            claimRewards(user, stakeId, totalStaking);\n', '        }\n', '\n', '        // Emit state changes\n', '        emit UnStake(\n', '            user,\n', '            tokenAddress[stakeId],\n', '            stakedAmount[stakeId],\n', '            block.timestamp,\n', '            stakeId\n', '        );\n', '    }\n', '\n', '    function claimRewards(\n', '        address user,\n', '        uint256 stakeId,\n', '        uint256 totalStaking\n', '    ) internal {\n', '        (\n', '            address[] memory referrerAddress,\n', '            address[] memory tokenAddress,\n', '            ,\n', '            ,\n', '            uint256[] memory stakedAmount,\n', '            uint256[] memory startTime\n', '        ) = (u2.viewStakingDetails(user));\n', '\n', '        // Local variables\n', '        uint256 interval;\n', '        uint256 endOfProfit;\n', '\n', '        interval = poolStartTime.add(u2.stakeDuration());\n', '\n', '        if (interval > block.timestamp) endOfProfit = block.timestamp;\n', '        else endOfProfit = interval;\n', '\n', '        interval = endOfProfit.sub(startTime[stakeId]);\n', '        // Reward calculation\n', '\n', '        if (interval >= DAYS)\n', '            _rewardCalculation(\n', '                user,\n', '                referrerAddress[stakeId],\n', '                tokenAddress[stakeId],\n', '                stakedAmount[stakeId],\n', '                interval,\n', '                totalStaking\n', '            );\n', '    }\n', '\n', '    function _rewardCalculation(\n', '        address user,\n', '        address referrerAddress,\n', '        address stakedToken,\n', '        uint256 stakedAmount,\n', '        uint256 interval,\n', '        uint256 totalStake\n', '    ) internal {\n', '        uint256 rewardsEarned;\n', '        uint256 noOfDays;\n', '\n', '        noOfDays = interval.div(DAYS);\n', '\n', '        rewardsEarned = noOfDays.mul(\n', '            getOneDayReward(stakedAmount, stakedToken, stakedToken, totalStake)\n', '        );\n', '\n', '        // Referrer Earning\n', '        if (referrerAddress != address(0)) {\n', '            uint256 refEarned = (rewardsEarned.mul(u2.refPercentage())).div(\n', '                100 ether\n', '            );\n', '            rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '            require(\n', '                IERC20(stakedToken).transfer(referrerAddress, refEarned),\n', '                "Transfer Failed"\n', '            );\n', '\n', '            emit ReferralEarn(\n', '                referrerAddress,\n', '                user,\n', '                stakedToken,\n', '                refEarned,\n', '                block.timestamp\n', '            );\n', '        }\n', '\n', '        //  Rewards Send\n', '        sendToken(user, stakedToken, stakedToken, rewardsEarned);\n', '\n', '        uint8 i = 1;\n', '\n', '        while (i < intervalDays.length) {\n', '            if (noOfDays >= intervalDays[i]) {\n', '                uint256 balDays = noOfDays.sub((intervalDays[i].sub(1)));\n', '                address rewardToken = u2.tokensSequenceList(stakedToken, i);\n', '\n', '                if (\n', '                    rewardToken != stakedToken &&\n', '                    u2.tokenBlockedStatus(stakedToken, rewardToken) == false\n', '                ) {\n', '                    rewardsEarned = balDays.mul(\n', '                        getOneDayReward(\n', '                            stakedAmount,\n', '                            stakedToken,\n', '                            rewardToken,\n', '                            totalStake\n', '                        )\n', '                    );\n', '                    // Referrer Earning\n', '                    if (referrerAddress != address(0)) {\n', '                        uint256 refEarned = (\n', '                            rewardsEarned.mul(u2.refPercentage())\n', '                        )\n', '                        .div(100 ether);\n', '                        rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '                        require(\n', '                            IERC20(rewardToken).transfer(\n', '                                referrerAddress,\n', '                                refEarned\n', '                            ),\n', '                            "Transfer Failed"\n', '                        );\n', '\n', '                        emit ReferralEarn(\n', '                            referrerAddress,\n', '                            user,\n', '                            rewardToken,\n', '                            refEarned,\n', '                            block.timestamp\n', '                        );\n', '                    }\n', '                    //  Rewards Send\n', '                    sendToken(user, stakedToken, rewardToken, rewardsEarned);\n', '                }\n', '                i = i + 1;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function emergencyUnstake(\n', '        uint256 stakeId,\n', '        address userAddress,\n', '        address[] memory rewardtokens,\n', '        uint256[] memory amount\n', '    ) external onlyOwner {\n', '        (\n', '            address[] memory referrerAddress,\n', '            address[] memory tokenAddress,\n', '            bool[] memory activeStatus,\n', '            ,\n', '            uint256[] memory stakedAmount,\n', '\n', '        ) = (u2.viewStakingDetails(userAddress));\n', '\n', '        // Checks\n', '        bool isAlreadyUnstaked = u2Proxy.unstakeStatus(userAddress, stakeId);\n', '\n', '        if (\n', '            u2UnstakeStatus[userAddress][stakeId] == false &&\n', '            activeStatus[stakeId] == true &&\n', '            isAlreadyUnstaked == false\n', '        ) u2UnstakeStatus[userAddress][stakeId] = true;\n', '        else revert("EMERGENCY: Unstaked Already");\n', '\n', '        safeTransfer(tokenAddress[stakeId]);\n', '\n', '        // Balance check\n', '        require(\n', '            IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\n', '                stakedAmount[stakeId],\n', '            "EMERGENCY : Insufficient Balance"\n', '        );\n', '\n', '        u2UpgradeTotalUnStaking[\n', '            tokenAddress[stakeId]\n', '        ] = u2UpgradeTotalUnStaking[tokenAddress[stakeId]].add(\n', '            stakedAmount[stakeId]\n', '        );\n', '\n', '        IERC20(tokenAddress[stakeId]).transfer(\n', '            userAddress,\n', '            stakedAmount[stakeId]\n', '        );\n', '\n', '        for (uint256 i = 0; i < rewardtokens.length; i++) {\n', '            require(\n', '                IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i],\n', '                "EMERGENCY : Insufficient Reward Balance"\n', '            );\n', '\n', '            uint256 rewardsEarned = amount[i];\n', '\n', '            safeTransfer(tokenAddress[stakeId]);\n', '\n', '            if (referrerAddress[stakeId] != address(0)) {\n', '                uint256 refEarned = (rewardsEarned.mul(u2.refPercentage())).div(\n', '                    100 ether\n', '                );\n', '                rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '                require(\n', '                    IERC20(rewardtokens[i]).transfer(\n', '                        referrerAddress[stakeId],\n', '                        refEarned\n', '                    ),\n', '                    "EMERGENCY : Transfer Failed"\n', '                );\n', '\n', '                emit ReferralEarn(\n', '                    referrerAddress[stakeId],\n', '                    userAddress,\n', '                    rewardtokens[i],\n', '                    refEarned,\n', '                    block.timestamp\n', '                );\n', '            }\n', '\n', '            sendToken(\n', '                userAddress,\n', '                tokenAddress[stakeId],\n', '                rewardtokens[i],\n', '                rewardsEarned\n', '            );\n', '        }\n', '\n', '        // Emit state changes\n', '        emit UnStake(\n', '            userAddress,\n', '            tokenAddress[stakeId],\n', '            stakedAmount[stakeId],\n', '            block.timestamp,\n', '            stakeId\n', '        );\n', '    }\n', '\n', '    function lockContract(bool pauseStatus) external onlyOwner {\n', '        if (pauseStatus == true) _pause();\n', '        else if (pauseStatus == false) _unpause();\n', '    }\n', '}']