['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-09\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity ^0.7.5;\n', '\n', '//MATH OPERATIONS -- designed to avoid possibility of errors with built-in math functions\n', 'library SafeMath {\n', '    //@dev Multiplies two numbers, throws on overflow.\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    //@dev Integer division of two numbers, truncating the quotient (i.e. rounds down).\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    //@dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    //@dev Adds two numbers, throws on overflow.\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '//end library\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract Ownable {\n', '    address internal _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract QUAI_Staking is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public constant quaiToken = 0x40821CD074dfeCb1524286923bC69315075b5c89; //token to stake\n', '\n', '\t//STAKING PARAMETERS\n', '\tuint256 public constant stakingPeriod = 30 days; //period over which tokens are locked after staking\n', '\tuint256 public stakingEnd; //point after which staking rewards cease to accumulate\n', '\tuint256 public rewardRate = 14; //14% linear return per staking period\n', '\tuint256 public totalStaked; //sum of all user stakes\n', '\tuint256 public maxTotalStaked = 58e23; //5.8 million tokens\n', '\tuint256 public minStaked = 1e21; //1000 tokens. min staked per user\n', '\n', '\t//STAKING MAPPINGS\n', '\tmapping (address => uint256) public stakedTokens; //amount of tokens that address has staked\n', '\tmapping (address => uint256) public lastStaked; //last time at which address staked, deposited, or "rolled over" their position by calling updateStake directly\n', '\tmapping (address => uint256) public totalEarnedTokens; //total tokens earned through staking by each user\n', '\t\n', '\tconstructor(){\n', '\t\tstakingEnd = (block.timestamp + 180 days);\n', '\t}\n', '\n', '\t//STAKING FUNCTIONS\n', '\tfunction deposit(uint256 amountTokens) external {\n', '\t\trequire( (stakedTokens[msg.sender] >= minStaked || amountTokens >= minStaked), "deposit: must exceed minimum stake" );\n', '\t\trequire(totalStaked + amountTokens <= maxTotalStaked, "deposit: amount would exceed max stake. call updateStake to claim dividends");\n', '\t\tupdateStake();\n', '\t\tIERC20(quaiToken).transferFrom(msg.sender, address(this), amountTokens);\n', '\t\tstakedTokens[msg.sender] += amountTokens;\n', '\t\ttotalStaked += amountTokens;\n', '\t}\n', '\n', '\tfunction updateStake() public {\n', '\t\tuint256 stakedUntil = min(block.timestamp, stakingEnd);\n', '\t\tuint256 periodStaked = stakedUntil.sub(lastStaked[msg.sender]);\n', '\t\tuint256 dividends;\n', '\t\t//linear rewards up to stakingPeriod\n', '\t\tif(periodStaked < stakingPeriod) {\n', '\t\t\tdividends = periodStaked.mul(stakedTokens[msg.sender]).mul(rewardRate).div(stakingPeriod).div(100);\n', '\t\t} else {\n', '\t\t\tdividends = stakedTokens[msg.sender].mul(rewardRate).div(100);\n', '\t\t}\n', '\t\t//update lastStaked time for msg.sender -- user cannot unstake until end of another stakingPeriod\n', '\t\tlastStaked[msg.sender] = stakedUntil;\n', '\t\t//withdraw dividends for user if rolling over dividends would exceed staking cap, else stake the dividends automatically\n', '\t\tif(totalStaked + dividends > maxTotalStaked) {\n', '\t\t\tIERC20(quaiToken).transfer(msg.sender, dividends);\n', '\t\t\ttotalEarnedTokens[msg.sender] += dividends;\n', '\t\t} else {\n', '\t\t\tstakedTokens[msg.sender] += dividends;\n', '\t\t\ttotalStaked += dividends;\n', '\t\t\ttotalEarnedTokens[msg.sender] += dividends;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction withdrawDividends() external {\n', '\t\tuint256 stakedUntil = min(block.timestamp, stakingEnd);\n', '\t\tuint256 periodStaked = stakedUntil.sub(lastStaked[msg.sender]);\n', '\t\tuint256 dividends;\n', '\t\t//linear rewards up to stakingPeriod\n', '\t\tif(periodStaked < stakingPeriod) {\n', '\t\t\tdividends = periodStaked.mul(stakedTokens[msg.sender]).mul(rewardRate).div(stakingPeriod).div(100);\n', '\t\t} else {\n', '\t\t\tdividends = stakedTokens[msg.sender].mul(rewardRate).div(100);\n', '\t\t}\n', '\t\t//update lastStaked time for msg.sender -- user cannot unstake until end of another stakingPeriod\n', '\t\tlastStaked[msg.sender] = stakedUntil;\n', '\t\t//withdraw dividends for user\n', '\t\tIERC20(quaiToken).transfer(msg.sender, dividends);\n', '\t\ttotalEarnedTokens[msg.sender] += dividends;\n', '\t}\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '\tfunction unstake() external {\n', '\t\tuint256 timeSinceStake = (block.timestamp).sub(lastStaked[msg.sender]);\n', '\t\trequire(timeSinceStake >= stakingPeriod || block.timestamp > stakingEnd, "unstake: staking period for user still ongoing");\n', '\t\tupdateStake();\n', '\t\tuint256 toTransfer = stakedTokens[msg.sender];\n', '\t\tstakedTokens[msg.sender] = 0;\n', '\t\tIERC20(quaiToken).transfer(msg.sender, toTransfer);\n', '\t\ttotalStaked = totalStaked.sub(toTransfer);\n', '\t}\n', '\n', '\tfunction getPendingDivs(address user) external view returns(uint256) {\n', '\t\tuint256 stakedUntil = min(block.timestamp, stakingEnd);\n', '\t\tuint256 periodStaked = stakedUntil.sub(lastStaked[user]);\n', '\t\tuint256 dividends;\n', '\t\t//linear rewards up to stakingPeriod\n', '\t\tif(periodStaked < stakingPeriod) {\n', '\t\t\tdividends = periodStaked.mul(stakedTokens[user]).mul(rewardRate).div(stakingPeriod).div(100);\n', '\t\t} else {\n', '\t\t\tdividends = stakedTokens[user].mul(rewardRate).div(100);\n', '\t\t}\n', '\t\treturn(dividends);\n', '\t}\n', '\n', '\t//OWNER ONLY FUNCTIONS\n', '\tfunction updateMinStake(uint256 newMinStake) external onlyOwner() {\n', '\t\tminStaked = newMinStake;\n', '\t}\n', '\n', '\tfunction updateStakingEnd(uint256 newStakingEnd) external onlyOwner() {\n', '\t\trequire(newStakingEnd >= block.timestamp, "updateStakingEnd: newStakingEnd must be in future");\n', '\t\tstakingEnd = newStakingEnd;\n', '\t}\n', '\n', '\tfunction updateRewardRate(uint256 newRewardRate) external onlyOwner() {\n', '\t\trequire(newRewardRate <= 100, "what are you, crazy?");\n', '\t\trewardRate = newRewardRate;\n', '\t}\n', '\n', '\tfunction updateMaxTotalStaked(uint256 newMaxTotalStaked) external onlyOwner() {\n', '\t\tmaxTotalStaked = newMaxTotalStaked;\n', '\t}\n', '\n', '\t//allows owner to recover ERC20 tokens for users when they are mistakenly sent to contract\n', '\tfunction recoverTokens(address tokenAddress, address dest, uint256 amountTokens) external onlyOwner() {\n', '\t\trequire(tokenAddress != quaiToken, "recoverTokens: cannot move staked token");\n', '\t\tIERC20(tokenAddress).transfer(dest, amountTokens);\n', '\t}\n', '\n', '\t//allows owner to reclaim any tokens not distributed during staking\n', '\tfunction recoverQUAI() external onlyOwner() {\n', '\t\trequire(block.timestamp >= (stakingEnd + 30 days), "recoverQUAI: too early");\n', '\t\tuint256 amountToSend = IERC20(quaiToken).balanceOf(address(this));\n', '\t\tIERC20(quaiToken).transfer(msg.sender, amountToSend);\n', '\t}\n', '}']