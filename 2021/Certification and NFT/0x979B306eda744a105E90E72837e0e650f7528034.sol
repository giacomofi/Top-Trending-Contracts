['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/model/StoredOfferModel.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', 'abstract contract StoredOfferModel {\n', '\n', '    // The order of fields in this struct is optimised to use the fewest storage slots\n', '    struct StoredOffer {\n', '        uint32 nonce;\n', '        uint32 timelockPeriod;\n', '        address loanTokenAddress;\n', '        address itemTokenAddress;\n', '        uint256 itemTokenId;\n', '        uint256 itemValue;\n', '        uint256 redemptionPrice;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/utils/FractionMath.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', 'library FractionMath {\n', '    using SafeMath for uint256;\n', '\n', '    struct Fraction {\n', '        uint48 numerator;\n', '        uint48 denominator;\n', '    }\n', '\n', '    function sanitize(Fraction calldata fraction) internal pure returns (Fraction calldata) {\n', '        require(fraction.denominator > 0, "FractionMath: denominator must be greater than zero");\n', '        return fraction;\n', '    }\n', '\n', '    function mul(Fraction storage fraction, uint256 value) internal view returns (uint256) {\n', '        return value.mul(fraction.numerator).div(fraction.denominator);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/model/LoanModel.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "contracts/model/StoredOfferModel.sol";\n', '// import "contracts/utils/FractionMath.sol";\n', '\n', 'abstract contract LoanModel is StoredOfferModel {\n', '    enum LoanStatus {\n', '        TAKEN,\n', '        RETURNED,\n', '        CLAIMED\n', '    }\n', '\n', '    // The order of fields in this struct is optimised to use the fewest storage slots\n', '    struct Loan {\n', '        StoredOffer offer;\n', '        LoanStatus status;\n', '        address borrowerAddress;\n', '        address lenderAddress;\n', '        uint48 redemptionFeeNumerator;\n', '        uint48 redemptionFeeDenominator;\n', '        uint256 timestamp;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/model/StakingModel.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '// For deeper understanding of the meaning of StakingState fields refer to `docs/PawnshopStaking.md` document\n', '\n', 'abstract contract StakingModel {\n', '    struct StakingState {\n', '        IERC20 token;\n', '        uint256 totalClaimedRewards; // total amount of rewards already transferred to the stakers\n', '        uint256 totalRewards; // total amount of rewards collected\n', '        uint256 cRPT; // cumulative reward per token\n', '        mapping(address => uint256) alreadyPaidCRPT; // cumulative reward per token already "paid" to the staker\n', '        mapping(address => uint256) claimableReward; // the amount of rewards that can be withdrawn from the contract by the staker\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/handlers/IHandler.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', 'interface IHandler {\n', '    function supportToken(address token) external;\n', '\n', '    function stopSupportingToken(address token) external;\n', '\n', '    function isSupported(address token) external view returns (bool);\n', '\n', '    function deposit(address from, address token, uint256 tokenId) external;\n', '\n', '    function withdraw(address recipient, address token, uint256 tokenId) external;\n', '\n', '    function changeOwnership(address recipient, address token, uint256 tokenId) external;\n', '\n', '    function ownerOf(address token, uint256 tokenId) external view returns (address);\n', '\n', '    function depositTimestamp(address tokenContract, uint256 tokenId) external view returns (uint256);\n', '}\n', '\n', '\n', '// Dependency file: contracts/utils/EnumerableMap.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '/**\n', " * This library was copied from OpenZeppelin's EnumerableMap.sol and adjusted to our needs.\n", ' * The only changes made are:\n', ' * - change // pragma solidity to 0.7.3\n', ' * - change UintToAddressMap to AddressToAddressMap by renaming and adjusting methods\n', ' * - add SupportState enum declaration\n', ' * - clone AddressToAddressMap and change it to AddressToSupportStateMap by renaming and adjusting methods\n', ' */\n', 'library EnumerableMap {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Map type with\n', '    // bytes32 keys and values.\n', '    // The Map implementation uses private functions, and user-facing\n', '    // implementations (such as Uint256ToAddressMap) are just wrappers around\n', '    // the underlying Map.\n', '    // This means that we can only create new EnumerableMaps for types that fit\n', '    // in bytes32.\n', '\n', '    struct MapEntry {\n', '        bytes32 _key;\n', '        bytes32 _value;\n', '    }\n', '\n', '    struct Map {\n', '        // Storage of map keys and values\n', '        MapEntry[] _entries;\n', '\n', '        // Position of the entry defined by a key in the `entries` array, plus 1\n', '        // because index 0 means a key is not in the map.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n', '            map._entries.push(MapEntry({ _key: key, _value: value }));\n', '            // The entry is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            map._indexes[key] = map._entries.length;\n', '            return true;\n', '        } else {\n', '            map._entries[keyIndex - 1]._value = value;\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a key-value pair from a map. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function _remove(Map storage map, bytes32 key) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex != 0) { // Equivalent to contains(map, key)\n', '            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n', "            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = keyIndex - 1;\n', '            uint256 lastIndex = map._entries.length - 1;\n', '\n', '            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            MapEntry storage lastEntry = map._entries[lastIndex];\n', '\n', '            // Move the last entry to the index where the entry to delete is\n', '            map._entries[toDeleteIndex] = lastEntry;\n', '            // Update the index for the moved entry\n', '            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved entry was stored\n', '            map._entries.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete map._indexes[key];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n', '        return map._indexes[key] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of key-value pairs in the map. O(1).\n', '     */\n', '    function _length(Map storage map) private view returns (uint256) {\n', '        return map._entries.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of entries inside the\n', '    * array, and it may change when more entries are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n', '        require(map._entries.length > index, "EnumerableMap: index out of bounds");\n', '\n', '        MapEntry storage entry = map._entries[index];\n', '        return (entry._key, entry._value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n', '        return _get(map, key, "EnumerableMap: nonexistent key");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    // AddressToAddressMap\n', '\n', '    struct AddressToAddressMap {\n', '        Map _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\n', '        return _set(map._inner, bytes32(uint256(key)), bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(uint256(key)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(uint256(key)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(AddressToAddressMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address, address) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (address(uint256(key)), address(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(uint256(key)))));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function get(AddressToAddressMap storage map, address key, string memory errorMessage) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(uint256(key)), errorMessage)));\n', '    }\n', '\n', '\n', '    // AddressToSupportStateMap\n', '\n', '    struct AddressToSupportStateMap {\n', '        Map _inner;\n', '    }\n', '\n', '    enum SupportState {\n', '        UNSUPPORTED,\n', '        SUPPORTED,\n', '        SUPPORT_STOPPED\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(AddressToSupportStateMap storage map, address key, SupportState value) internal returns (bool) {\n', '        return _set(map._inner, bytes32(uint256(key)), bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(AddressToSupportStateMap storage map, address key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(uint256(key)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(AddressToSupportStateMap storage map, address key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(uint256(key)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(AddressToSupportStateMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the element stored at position `index` in the set. O(1).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(AddressToSupportStateMap storage map, uint256 index) internal view returns (address, SupportState) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (address(uint256(key)), SupportState(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(AddressToSupportStateMap storage map, address key) internal view returns (SupportState) {\n', '        return SupportState(uint256(_get(map._inner, bytes32(uint256(key)))));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function get(AddressToSupportStateMap storage map, address key, string memory errorMessage) internal view returns (SupportState) {\n', '        return SupportState(uint256(_get(map._inner, bytes32(uint256(key)), errorMessage)));\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/PawnshopStorage.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "@openzeppelin/contracts/utils/EnumerableSet.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "contracts/model/LoanModel.sol";\n', '// import "contracts/model/StakingModel.sol";\n', '// import "contracts/handlers/IHandler.sol";\n', '// import "contracts/utils/EnumerableMap.sol";\n', '// import "contracts/utils/FractionMath.sol";\n', '\n', 'abstract contract PawnshopStorage is LoanModel, StakingModel {\n', '    // Initializable.sol\n', '    bool internal _initialized;\n', '    bool internal _initializing;\n', '\n', '    // Ownable.sol\n', '    address internal _owner;\n', '\n', '    // ReentrancyGuard.sol\n', '    uint256 internal _guardStatus;\n', '\n', '    // Pawnshop.sol\n', '    mapping (bytes32 => Loan) internal _loans;\n', '    mapping (bytes32 => bool) internal _usedOfferSignatures;\n', '\n', '    // PawnshopConfig.sol\n', '    uint256 internal _maxTimelockPeriod;\n', '    EnumerableMap.AddressToAddressMap internal _tokenAddressToHandlerAddress;\n', '    EnumerableMap.AddressToSupportStateMap internal _loanTokens;\n', '    mapping (address => FractionMath.Fraction) internal _minLenderProfits;\n', '    mapping (address => FractionMath.Fraction) internal _depositFees;\n', '    mapping (address => FractionMath.Fraction) internal _redemptionFees;\n', '    mapping (address => FractionMath.Fraction) internal _flashFees;\n', '\n', '    // PawnshopStaking.sol\n', '    IERC20 internal _stakingToken;\n', '    mapping(address => uint256) internal _staked;\n', '    uint256 internal _totalStaked;\n', '    mapping(address => StakingState) internal _stakingStates;\n', '\n', '    // EIP712Domain.sol\n', '    bytes32 internal DOMAIN_SEPARATOR; // solhint-disable-line var-name-mixedcase\n', '}\n', '\n', '\n', '// Dependency file: contracts/Initializable.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable is PawnshopStorage {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    // bool _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    // bool _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || isConstructor() || !_initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/Ownable.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is PawnshopStorage, Initializable {\n', '    // address _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function __Ownable_init_unchained(address owner) internal initializer {\n', '        _owner = owner;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/Initializable.sol";\n', '\n', 'abstract contract ReentrancyGuard is PawnshopStorage, Initializable {\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    // uint256 _guardStatus;\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '        _guardStatus = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_guardStatus != _ENTERED, "ReentrancyGuard: reentrant call");\n', '        _guardStatus = _ENTERED;\n', '        _;\n', '        _guardStatus = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/PawnshopConfig.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/EnumerableSet.sol";\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/Initializable.sol";\n', '// import "contracts/Ownable.sol";\n', '// import "contracts/utils/EnumerableMap.sol";\n', '// import "contracts/utils/FractionMath.sol";\n', '\n', 'abstract contract PawnshopConfig is PawnshopStorage, Ownable {\n', '    using SafeMath for uint256;\n', '    using EnumerableMap for EnumerableMap.AddressToAddressMap;\n', '    using EnumerableMap for EnumerableMap.AddressToSupportStateMap;\n', '    using FractionMath for FractionMath.Fraction;\n', '\n', '    // uint256 _maxTimelockPeriod;\n', '    // EnumerableMap.AddressToAddressMap _tokenAddressToHandlerAddress;\n', '    // EnumerableMap.AddressToSupportStateMap _loanTokens;\n', '    // mapping (address => FractionMath.Fraction) _minLenderProfits;\n', '    // mapping (address => FractionMath.Fraction) _depositFees;\n', '    // mapping (address => FractionMath.Fraction) _redemptionFees;\n', '    // mapping (address => FractionMath.Fraction) _flashFees;\n', '\n', '    event MaxTimelockPeriodSet(uint256 indexed time);\n', '    event MinLenderProfitSet(address indexed loanTokenAddress, FractionMath.Fraction minProfit);\n', '    event PawnshopFeesSet(\n', '        address indexed loanTokenAddress,\n', '        FractionMath.Fraction depositFee,\n', '        FractionMath.Fraction redemptionFee,\n', '        FractionMath.Fraction flashFee\n', '    );\n', '    event ItemSupported(address indexed tokenAddress);\n', '    event LoanTokenSupported(address indexed tokenAddress);\n', '    event ItemSupportStopped(address indexed tokenAddress);\n', '    event LoanTokenSupportStopped(address indexed tokenAddress);\n', '\n', '    function setMaxTimelockPeriod(uint256 time) external onlyOwner {\n', '        _setMaxTimelockPeriod(time);\n', '    }\n', '\n', '    function _setMaxTimelockPeriod(uint256 time) internal {\n', '        require(time > 0, "Pawnshop: the max timelock period must be greater than 0");\n', '        _maxTimelockPeriod = time;\n', '        emit MaxTimelockPeriodSet(time);\n', '    }\n', '\n', '    function setMinLenderProfit(address loanTokenAddress, FractionMath.Fraction calldata minProfit) public onlyOwner {\n', '        require(isLoanTokenSupported(loanTokenAddress), "Pawnshop: the loan token is not supported");\n', '        _minLenderProfits[loanTokenAddress] = FractionMath.sanitize(minProfit);\n', '\n', '        emit MinLenderProfitSet(loanTokenAddress, minProfit);\n', '    }\n', '\n', '    function setPawnshopFees(\n', '        address loanTokenAddress,\n', '        FractionMath.Fraction calldata depositFee,\n', '        FractionMath.Fraction calldata redemptionFee,\n', '        FractionMath.Fraction calldata flashFee\n', '    ) public onlyOwner {\n', '        require(isLoanTokenSupported(loanTokenAddress), "Pawnshop: the loan token is not supported");\n', '        _depositFees[loanTokenAddress] = FractionMath.sanitize(depositFee);\n', '        _redemptionFees[loanTokenAddress] = FractionMath.sanitize(redemptionFee);\n', '        _flashFees[loanTokenAddress] = FractionMath.sanitize(flashFee);\n', '\n', '        emit PawnshopFeesSet(\n', '            loanTokenAddress,\n', '            depositFee,\n', '            redemptionFee,\n', '            flashFee\n', '        );\n', '    }\n', '\n', '    function supportItem(IHandler handler, address tokenAddress) external onlyOwner {\n', '        require(!handler.isSupported(tokenAddress), "Pawnshop: the item is already supported");\n', '        handler.supportToken(tokenAddress);\n', '        _tokenAddressToHandlerAddress.set(tokenAddress, address(handler));\n', '        emit ItemSupported(tokenAddress);\n', '    }\n', '\n', '    function supportLoanToken(\n', '        address tokenAddress,\n', '        FractionMath.Fraction calldata minProfit,\n', '        FractionMath.Fraction calldata depositFee,\n', '        FractionMath.Fraction calldata redemptionFee,\n', '        FractionMath.Fraction calldata flashFee\n', '    ) external onlyOwner {\n', '        require(!isLoanTokenSupported(tokenAddress), "Pawnshop: the ERC20 loan token is already supported");\n', '        require(tokenAddress != address(_stakingToken), "Pawnshop: cannot support the staking token");\n', '        _loanTokens.set(tokenAddress, EnumerableMap.SupportState.SUPPORTED);\n', '        StakingState storage newStakingState = _stakingStates[tokenAddress];\n', '        newStakingState.token = IERC20(tokenAddress);\n', '        setMinLenderProfit(tokenAddress, minProfit);\n', '        setPawnshopFees(tokenAddress, depositFee, redemptionFee, flashFee);\n', '        emit LoanTokenSupported(tokenAddress);\n', '    }\n', '\n', '    function stopSupportingItem(address tokenAddress) external onlyOwner {\n', '        IHandler handler = itemHandler(tokenAddress);\n', '        handler.stopSupportingToken(tokenAddress);\n', '        emit ItemSupportStopped(tokenAddress);\n', '    }\n', '\n', '    function stopSupportingLoanToken(address tokenAddress) external onlyOwner {\n', '        require(isLoanTokenSupported(tokenAddress), "Pawnshop: the ERC20 loan token is not supported");\n', '        _loanTokens.set(tokenAddress, EnumerableMap.SupportState.SUPPORT_STOPPED);\n', '        emit LoanTokenSupportStopped(tokenAddress);\n', '    }\n', '\n', '    function isLoanTokenSupported(address tokenAddress) public view returns (bool) {\n', '        return _loanTokens.contains(tokenAddress) &&\n', '            _loanTokens.get(tokenAddress) == EnumerableMap.SupportState.SUPPORTED;\n', '    }\n', '\n', '    function wasLoanTokenEverSupported(address tokenAddress) public view returns (bool) {\n', '        return _loanTokens.contains(tokenAddress);\n', '    }\n', '\n', '    function isItemTokenSupported(address tokenAddress) external view returns (bool) {\n', '        if (!_tokenAddressToHandlerAddress.contains(tokenAddress)) {\n', '            return false;\n', '        }\n', '        address handler = _tokenAddressToHandlerAddress.get(tokenAddress);\n', '        return IHandler(handler).isSupported(tokenAddress);\n', '    }\n', '\n', '    function totalItemTokens() external view returns (uint256) {\n', '        return _tokenAddressToHandlerAddress.length();\n', '    }\n', '\n', '    function itemTokenByIndex(uint256 index) external view returns (address tokenAddress, address handlerAddress, bool isCurrentlySupported) {\n', '        (tokenAddress, handlerAddress) = _tokenAddressToHandlerAddress.at(index);\n', '        isCurrentlySupported = IHandler(handlerAddress).isSupported(tokenAddress);\n', '    }\n', '\n', '    function maxTimelockPeriod() external view returns (uint256) {\n', '        return _maxTimelockPeriod;\n', '    }\n', '\n', '    function minLenderProfit(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\n', '        return _minLenderProfits[loanTokenAddress];\n', '    }\n', '\n', '    function depositFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\n', '        return _depositFees[loanTokenAddress];\n', '    }\n', '\n', '    function redemptionFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\n', '        return _redemptionFees[loanTokenAddress];\n', '    }\n', '\n', '    function flashFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\n', '        return _flashFees[loanTokenAddress];\n', '    }\n', '\n', '    function totalLoanTokens() external view returns (uint256) {\n', '        return _loanTokens.length();\n', '    }\n', '\n', '    function loanTokenByIndex(uint256 index) external view returns (address, EnumerableMap.SupportState) {\n', '        return _loanTokens.at(index);\n', '    }\n', '\n', '    function itemHandler(address itemTokenAddress) public view returns (IHandler) {\n', '        return IHandler(_tokenAddressToHandlerAddress.get(itemTokenAddress, "Pawnshop: the item is not supported"));\n', '    }\n', '\n', '    function minReturnAmount(address loanTokenAddress, uint256 loanAmount) public view returns (uint256) {\n', '        FractionMath.Fraction storage minProfit = _minLenderProfits[loanTokenAddress];\n', '        uint256 lenderProfit = minProfit.mul(loanAmount);\n', '        return loanAmount.add(lenderProfit);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/PawnshopStaking.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/PawnshopConfig.sol";\n', '// import "contracts/model/StakingModel.sol";\n', '// import "contracts/utils/EnumerableMap.sol";\n', '\n', '\n', 'abstract contract PawnshopStaking is StakingModel, PawnshopStorage, PawnshopConfig {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using EnumerableMap for EnumerableMap.AddressToSupportStateMap;\n', '\n', '    uint256 private constant PRECISION = 1e30;\n', '\n', '    // IERC20 _stakingToken;\n', '    // mapping(address => uint256) _staked;\n', '    // uint256 _totalStaked;\n', '    // mapping(address => StakingState) _stakingStates;\n', '\n', '    event Staked(address indexed staker, uint256 amount);\n', '    event Unstaked(address indexed staker, uint256 amount);\n', '    event RewardClaimed(address indexed staker, address indexed token, uint256 amount);\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function __PawnshopStaking_init_unchained(IERC20 stakingToken) internal initializer {\n', '        _stakingToken = stakingToken;\n', '    }\n', '\n', '    function stake(uint256 amount) external {\n', '        if (_totalStaked > 0) {\n', '            _updateRewards();\n', '        }\n', '        _staked[msg.sender] = _staked[msg.sender].add(amount);\n', '        _totalStaked = _totalStaked.add(amount);\n', '        _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function unstake(uint256 amount) external {\n', '        require(amount <= _staked[msg.sender], "PawnshopStaking: cannot unstake more than was staked");\n', '        _updateRewards();\n', '        _staked[msg.sender] = _staked[msg.sender].sub(amount);\n', '        _totalStaked = _totalStaked.sub(amount);\n', '        _stakingToken.safeTransfer(msg.sender, amount);\n', '        emit Unstaked(msg.sender, amount);\n', '    }\n', '\n', '    function claimRewards() external {\n', '        uint256 loanTokensCount = _loanTokens.length();\n', '        for (uint256 i = 0; i < loanTokensCount; i++) {\n', '            (address loanToken,) = _loanTokens.at(i);\n', '            StakingState storage state = _stakingStates[loanToken];\n', '            if (_totalStaked > 0) {\n', '                _updateSingleTokenRewards(state);\n', '            }\n', '            _transferReward(state);\n', '        }\n', '    }\n', '\n', '    function emergencyStakeRecovery() external onlyOwner {\n', '        uint256 balance = _stakingToken.balanceOf(address(this));\n', '        uint256 recoveryAmount = balance.sub(_totalStaked);\n', '        require(recoveryAmount > 0, "PawnshopStaking: there are no additional staking tokens for recovery in the contract");\n', '        _stakingToken.safeTransfer(msg.sender, recoveryAmount);\n', '    }\n', '\n', '    function _updateRewards() private {\n', '        uint256 loanTokensCount = _loanTokens.length();\n', '        for (uint256 i = 0; i < loanTokensCount; i++) {\n', '            (address loanToken,) = _loanTokens.at(i);\n', '            _updateSingleTokenRewards(_stakingStates[loanToken]);\n', '        }\n', '    }\n', '\n', '    function _updateSingleTokenRewards(StakingState storage state) private {\n', '        uint256 newTotalRewards = _calculateNewTotalRewards(state);\n', '        uint256 newCRPT = _calculateNewCRPT(state, newTotalRewards);\n', '        state.claimableReward[msg.sender] = _calculateNewClaimableReward(state, newCRPT, msg.sender);\n', '        state.alreadyPaidCRPT[msg.sender] = newCRPT;\n', '        state.cRPT = newCRPT;\n', '        state.totalRewards = newTotalRewards;\n', '    }\n', '\n', '    function _calculateNewTotalRewards(StakingState storage state) private view returns (uint256) {\n', '        uint256 currentLoanTokenBalance = state.token.balanceOf(address(this));\n', '        return currentLoanTokenBalance.add(state.totalClaimedRewards);\n', '    }\n', '\n', '    function _calculateNewCRPT(StakingState storage state, uint256 newTotalRewards) private view returns (uint256) {\n', '        uint256 newRewards = newTotalRewards.sub(state.totalRewards);\n', '        uint256 rewardPerToken = newRewards.mul(PRECISION).div(_totalStaked);\n', '        return state.cRPT.add(rewardPerToken);\n', '    }\n', '\n', '    function _calculateNewClaimableReward(StakingState storage state, uint256 newCRPT, address staker) private view returns (uint256) {\n', '        uint256 stakerCRPT = newCRPT.sub(state.alreadyPaidCRPT[staker]);\n', '        uint256 stakerCurrentlyClaimableReward = _staked[staker].mul(stakerCRPT).div(PRECISION);\n', '        return state.claimableReward[staker].add(stakerCurrentlyClaimableReward);\n', '    }\n', '\n', '    function _transferReward(StakingState storage state) private {\n', '        uint256 rewardToClaim = state.claimableReward[msg.sender];\n', '        state.totalClaimedRewards = state.totalClaimedRewards.add(rewardToClaim);\n', '        state.claimableReward[msg.sender] = 0;\n', '        state.token.safeTransfer(msg.sender, rewardToClaim);\n', '        emit RewardClaimed(msg.sender, address(state.token), rewardToClaim);\n', '    }\n', '\n', '    function stakedAmount(address staker) external view returns (uint256) {\n', '        return _staked[staker];\n', '    }\n', '\n', '    function totalStaked() external view returns (uint256) {\n', '        return _totalStaked;\n', '    }\n', '\n', '    function claimableReward(address stakerAddress, address loanTokenAddress) external view returns (uint256) {\n', '        require(wasLoanTokenEverSupported(loanTokenAddress), "PawnshopStaking: the ERC20 loan token was never supported");\n', '        StakingState storage state = _stakingStates[loanTokenAddress];\n', '        uint256 newTotalRewards = _calculateNewTotalRewards(state);\n', '        uint256 newCRPT = _totalStaked > 0 ? _calculateNewCRPT(state, newTotalRewards) : state.cRPT;\n', '        return _calculateNewClaimableReward(state, newCRPT, stakerAddress);\n', '    }\n', '\n', '    function totalClaimedRewards(address loanTokenAddress) external view returns (uint256) {\n', '        require(wasLoanTokenEverSupported(loanTokenAddress), "PawnshopStaking: the ERC20 loan token was never supported");\n', '        return _stakingStates[loanTokenAddress].totalClaimedRewards;\n', '    }\n', '\n', '    function totalRewards(address loanTokenAddress) external view returns (uint256) {\n', '        require(wasLoanTokenEverSupported(loanTokenAddress), "PawnshopStaking: the ERC20 loan token was never supported");\n', '        StakingState storage state = _stakingStates[loanTokenAddress];\n', '        return _calculateNewTotalRewards(state);\n', '    }\n', '\n', '    function stakingToken() external view returns (IERC20) {\n', '        return _stakingToken;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/model/OfferModel.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', 'abstract contract OfferModel {\n', '    string internal constant ITEM__TYPE = "Item(address tokenAddress,uint256 tokenId,uint256 depositTimestamp)";\n', '    string internal constant LOAN_PARAMS__TYPE = "LoanParams(uint256 itemValue,uint256 redemptionPrice,uint32 timelockPeriod)";\n', '    string internal constant OFFER__TYPE = "Offer(uint32 nonce,uint40 expirationTime,address loanTokenAddress,Item collateralItem,LoanParams loanParams)"\n', '                                           "Item(address tokenAddress,uint256 tokenId,uint256 depositTimestamp)"\n', '                                           "LoanParams(uint256 itemValue,uint256 redemptionPrice,uint32 timelockPeriod)";\n', '\n', '    struct Item {\n', '        address tokenAddress;\n', '        uint256 tokenId;\n', '        uint256 depositTimestamp;\n', '    }\n', '\n', '    struct LoanParams {\n', '        uint256 itemValue;\n', '        uint256 redemptionPrice;\n', '        uint32 timelockPeriod;\n', '    }\n', '\n', '    struct Offer {\n', '        uint32 nonce;\n', '        uint40 expirationTime;\n', '        address loanTokenAddress;\n', '        Item collateralItem;\n', '        LoanParams loanParams;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/cryptography/ECDSA.sol\n', '\n', '\n', '// pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * // importANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/verifiers/EIP712Domain.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "contracts/Initializable.sol";\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/model/OfferModel.sol";\n', '\n', 'abstract contract EIP712Domain is PawnshopStorage, Initializable {\n', '    string private constant EIP712_DOMAIN = "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)";\n', '    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\n', '\n', '    // bytes32 DOMAIN_SEPARATOR;\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function __EIP712Domain_init_unchained() internal initializer {\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(\n', '                EIP712_DOMAIN_TYPEHASH,\n', '                keccak256("Pawnshop"),\n', '                keccak256("1.0.0"),\n', '                _getChainId(),\n', '                address(this)\n', '            ));\n', '    }\n', '\n', '    function _getChainId() private pure returns (uint256 id) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            id := chainid()\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/verifiers/OfferSigVerifier.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "@openzeppelin/contracts/cryptography/ECDSA.sol";\n', '\n', '// import "contracts/verifiers/EIP712Domain.sol";\n', '// import "contracts/model/OfferModel.sol";\n', '\n', 'abstract contract OfferSigVerifier is OfferModel, EIP712Domain {\n', '    using ECDSA for bytes32;\n', '\n', '    bytes32 private constant ITEM__TYPEHASH = keccak256(abi.encodePacked(ITEM__TYPE));\n', '    bytes32 private constant LOAN_PARAMS__TYPEHASH = keccak256(abi.encodePacked(LOAN_PARAMS__TYPE));\n', '    bytes32 private constant OFFER__TYPEHASH = keccak256(abi.encodePacked(OFFER__TYPE));\n', '\n', '    function _hashItem(Item calldata item) private pure returns (bytes32) {\n', '        return keccak256(abi.encode(\n', '                ITEM__TYPEHASH,\n', '                item.tokenAddress,\n', '                item.tokenId,\n', '                item.depositTimestamp\n', '            ));\n', '    }\n', '\n', '    function _hashLoanParams(LoanParams calldata params) private pure returns (bytes32) {\n', '        return keccak256(abi.encode(\n', '                LOAN_PARAMS__TYPEHASH,\n', '                params.itemValue,\n', '                params.redemptionPrice,\n', '                params.timelockPeriod\n', '            ));\n', '    }\n', '\n', '    function _hashOffer(Offer calldata offer) private view returns (bytes32) {\n', '        return keccak256(abi.encodePacked(\n', '                "\\x19\\x01",\n', '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(\n', '                    OFFER__TYPEHASH,\n', '                    offer.nonce,\n', '                    offer.expirationTime,\n', '                    offer.loanTokenAddress,\n', '                    _hashItem(offer.collateralItem),\n', '                    _hashLoanParams(offer.loanParams)\n', '                ))\n', '            ));\n', '    }\n', '\n', '    function _verifyOffer(address signerAddress, bytes calldata signature, Offer calldata offer) internal view returns (bool) {\n', '        bytes32 hash = _hashOffer(offer);\n', '        return hash.recover(signature) == signerAddress;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/model/FlashOfferModel.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', 'abstract contract FlashOfferModel {\n', '    string internal constant FLASH_OFFER__TYPE = "FlashOffer(uint32 nonce,uint40 expirationTime,address loanTokenAddress,uint256 loanAmount,uint256 returnAmount)";\n', '\n', '    struct FlashOffer {\n', '        uint32 nonce;\n', '        uint40 expirationTime;\n', '        address loanTokenAddress;\n', '        uint256 loanAmount;\n', '        uint256 returnAmount;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/verifiers/FlashOfferSigVerifier.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', '// import "@openzeppelin/contracts/cryptography/ECDSA.sol";\n', '\n', '// import "contracts/verifiers/EIP712Domain.sol";\n', '// import "contracts/model/FlashOfferModel.sol";\n', '\n', 'abstract contract FlashOfferSigVerifier is FlashOfferModel, EIP712Domain {\n', '    using ECDSA for bytes32;\n', '\n', '    bytes32 private constant FLASH_OFFER__TYPEHASH = keccak256(abi.encodePacked(FLASH_OFFER__TYPE));\n', '\n', '    function _hashFlashOffer(FlashOffer calldata offer) private view returns (bytes32) {\n', '        return keccak256(abi.encodePacked(\n', '                "\\x19\\x01",\n', '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(\n', '                    FLASH_OFFER__TYPEHASH,\n', '                    offer.nonce,\n', '                    offer.expirationTime,\n', '                    offer.loanTokenAddress,\n', '                    offer.loanAmount,\n', '                    offer.returnAmount\n', '                ))\n', '            ));\n', '    }\n', '\n', '    function _verifyFlashOffer(\n', '        address signerAddress,\n', '        bytes calldata signature,\n', '        FlashOffer calldata offer\n', '    ) internal view returns (bool) {\n', '        bytes32 hash = _hashFlashOffer(offer);\n', '        return hash.recover(signature) == signerAddress;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IERC3156FlashBorrower.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '\n', 'interface IERC3156FlashBorrower {\n', '\n', '    /**\n', '     * @dev Receive a flash loan.\n', '     * @param sender The initiator of the loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param fee The additional amount of tokens to repay.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     */\n', '    function onFlashLoan(\n', '        address sender,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/FlashLoan.sol\n', '\n', '\n', '// pragma solidity 0.7.3;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import "contracts/PawnshopConfig.sol";\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/utils/FractionMath.sol";\n', '// import "contracts/model/FlashOfferModel.sol";\n', '// import "contracts/verifiers/FlashOfferSigVerifier.sol";\n', '// import "contracts/interfaces/IERC3156FlashBorrower.sol";\n', '\n', 'abstract contract FlashLoan is FlashOfferModel, PawnshopStorage, FlashOfferSigVerifier, PawnshopConfig {\n', '    using FractionMath for FractionMath.Fraction;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    event FlashLoanMade(\n', '        address indexed borrowerAddress,\n', '        address indexed receiverAddress,\n', '        address indexed lenderAddress,\n', '        bytes32 signatureHash\n', '    );\n', '\n', '    function flashLoan(\n', '        IERC3156FlashBorrower receiver,\n', '        address lenderAddress,\n', '        bytes calldata signature,\n', '        FlashOffer calldata offer,\n', '        bytes calldata data\n', '    ) external {\n', '        require(isLoanTokenSupported(offer.loanTokenAddress), "FlashLoan: the ERC20 loan token is not supported");\n', '        require(block.timestamp < offer.expirationTime, "FlashLoan: the offer has expired");\n', '        require(offer.loanAmount > 0, "FlashLoan: loan amount must be greater than 0");\n', '        require(offer.returnAmount > 0, "FlashLoan: return amount must be greater than 0");\n', '        require(offer.returnAmount >= minReturnAmount(offer.loanTokenAddress, offer.loanAmount),\n', '            "FlashLoan: the return amount is less then the minimum return amount for this loan token and loan amount");\n', '        require(_verifyFlashOffer(lenderAddress, signature, offer), "FlashLoan: the signature of the offer is invalid");\n', '\n', '        bytes32 signatureHash = keccak256(signature);\n', '        require(!_usedOfferSignatures[signatureHash], "FlashLoan: the loan has already been taken or the offer was cancelled");\n', '        _usedOfferSignatures[signatureHash] = true;\n', '\n', '        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, address(receiver), offer.loanAmount);\n', '\n', '        uint256 flashFee = _flashFees[offer.loanTokenAddress].mul(offer.loanAmount);\n', '        uint256 totalFee = offer.returnAmount.sub(offer.loanAmount).add(flashFee);\n', '        receiver.onFlashLoan(msg.sender, offer.loanTokenAddress, offer.loanAmount, totalFee, data);\n', '\n', '        IERC20(offer.loanTokenAddress).safeTransferFrom(address(receiver), lenderAddress, offer.returnAmount);\n', '        IERC20(offer.loanTokenAddress).safeTransferFrom(address(receiver), address(this), flashFee);\n', '\n', '        emit FlashLoanMade(msg.sender, address(receiver), lenderAddress, signatureHash);\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/Pawnshop.sol\n', '\n', '\n', 'pragma solidity 0.7.3;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";\n', '\n', '// import "contracts/PawnshopStorage.sol";\n', '// import "contracts/Initializable.sol";\n', '// import "contracts/Ownable.sol";\n', '// import "contracts/ReentrancyGuard.sol";\n', '// import "contracts/PawnshopConfig.sol";\n', '// import "contracts/PawnshopStaking.sol";\n', '// import "contracts/model/LoanModel.sol";\n', '// import "contracts/model/OfferModel.sol";\n', '// import "contracts/verifiers/OfferSigVerifier.sol";\n', '// import "contracts/handlers/IHandler.sol";\n', '// import "contracts/FlashLoan.sol";\n', '// import "contracts/utils/FractionMath.sol";\n', '\n', 'contract Pawnshop is LoanModel, PawnshopStorage, Initializable, Ownable, ReentrancyGuard, OfferSigVerifier, PawnshopConfig, PawnshopStaking, FlashLoan, IERC721Receiver {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using FractionMath for FractionMath.Fraction;\n', '\n', '    // mapping (bytes32 => Loan) _loans;\n', '    // mapping (bytes32 => bool) _usedOfferSignatures;\n', '\n', '    modifier onlyBorrower(bytes32 signatureHash) {\n', '        Loan storage loan = _loans[signatureHash];\n', '        require(msg.sender == loan.borrowerAddress, "Pawnshop: caller is not the borrower");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyLender(bytes32 signatureHash) {\n', '        Loan storage loan = _loans[signatureHash];\n', '        require(msg.sender == loan.lenderAddress, "Pawnshop: caller is not the lender");\n', '\n', '        _;\n', '    }\n', '\n', '    event ItemDeposited(address indexed previousOwner, address indexed tokenAddress, uint256 indexed tokenId);\n', '    event ItemWithdrawn(address indexed ownerAddress, address indexed tokenAddress, uint256 indexed tokenId);\n', '    event LoanTaken(address indexed borrowerAddress, address indexed lenderAddress, bytes32 signatureHash);\n', '    event OfferCanceled(address indexed lenderAddres, bytes32 signatureHash);\n', '    event ItemRedeemed(address indexed borrowerAddress, bytes32 signatureHash);\n', '    event ItemClaimed(address indexed lenderAddress, bytes32 signatureHash);\n', '\n', '    constructor(address owner) {\n', '        __Ownable_init_unchained(owner);\n', '    }\n', '\n', '    function initialize(address owner, IERC20 stakingToken, uint256 maxTimelockPeriod) public initializer {\n', '        __Ownable_init_unchained(owner);\n', '        __ReentrancyGuard_init_unchained();\n', '        __EIP712Domain_init_unchained();\n', '        __PawnshopStaking_init_unchained(stakingToken);\n', '        __Pawnshop_init_unchained(maxTimelockPeriod);\n', '    }\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function __Pawnshop_init_unchained(uint256 maxTimelockPeriod) internal {\n', '        _setMaxTimelockPeriod(maxTimelockPeriod);\n', '    }\n', '\n', '    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n', '        revert("Pawnshop: tokens cannot be transferred directly, use Pawnshop.depositItem function instead");\n', '    }\n', '\n', '    function itemOwner(address tokenAddress, uint256 tokenId) external view returns (address) {\n', '        IHandler handler = itemHandler(tokenAddress);\n', '        return handler.ownerOf(tokenAddress, tokenId);\n', '    }\n', '\n', '    function _calculateRedemptionFee(Loan storage loan) private view returns (uint256) {\n', '        return loan.offer.redemptionPrice\n', '            .mul(loan.redemptionFeeNumerator)\n', '            .div(loan.redemptionFeeDenominator);\n', '    }\n', '\n', '    function depositItem(address tokenAddress, uint256 tokenId) external {\n', '        IHandler handler = itemHandler(tokenAddress);\n', '        handler.deposit(msg.sender, tokenAddress, tokenId);\n', '        emit ItemDeposited(msg.sender, tokenAddress, tokenId);\n', '    }\n', '\n', '    function itemDepositTimestamp(address tokenAddress, uint256 tokenId) public view returns (uint256) {\n', '        IHandler handler = itemHandler(tokenAddress);\n', '        return handler.depositTimestamp(tokenAddress, tokenId);\n', '    }\n', '\n', '    function takeLoan(address lenderAddress, bytes calldata signature, Offer calldata offer) external nonReentrant {\n', '        Item calldata item = offer.collateralItem;\n', '        LoanParams calldata params = offer.loanParams;\n', '        IHandler handler = itemHandler(item.tokenAddress);\n', '\n', '        require(handler.isSupported(item.tokenAddress), "Pawnshop: the item is not supported");\n', '        require(isLoanTokenSupported(offer.loanTokenAddress), "Pawnshop: the ERC20 loan token is not supported");\n', '        require(block.timestamp < offer.expirationTime, "Pawnshop: the offer has expired");\n', '        require(params.itemValue > 0, "Pawnshop: the item value must be greater than 0");\n', '        require(params.redemptionPrice > 0, "Pawnshop: the redemption price must be greater than 0");\n', '        require(params.timelockPeriod > 0, "Pawnshop: the timelock period must be greater than 0");\n', '        require(params.timelockPeriod <= _maxTimelockPeriod, "Pawnshop: the timelock period must be less or equal to the max timelock period");\n', '        require(params.redemptionPrice >= minReturnAmount(offer.loanTokenAddress, params.itemValue),\n', '            "Pawnshop: the redemption price is less then the minimum return amount for this loan token and loan amount");\n', '\n', '        require(_verifyOffer(lenderAddress, signature, offer), "Pawnshop: the signature of the offer is invalid");\n', '\n', '        bytes32 signatureHash = keccak256(signature);\n', '        require(!_usedOfferSignatures[signatureHash], "Pawnshop: the loan has already been taken or the offer was cancelled");\n', '        require(handler.ownerOf(item.tokenAddress, item.tokenId) == msg.sender, "Pawnshop: the item must be deposited to the pawnshop first");\n', '        require(handler.depositTimestamp(item.tokenAddress, item.tokenId) == item.depositTimestamp, "Pawnshop: the item was redeposited after offer signing");\n', '\n', '        uint256 depositFee = _depositFees[offer.loanTokenAddress].mul(params.itemValue);\n', '        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, address(this), depositFee);\n', '        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, msg.sender, params.itemValue.sub(depositFee));\n', '\n', '        _usedOfferSignatures[signatureHash] = true;\n', '        _loans[signatureHash] = Loan({\n', '            offer: StoredOffer({\n', '                nonce: offer.nonce,\n', '                timelockPeriod: offer.loanParams.timelockPeriod,\n', '                loanTokenAddress: offer.loanTokenAddress,\n', '                itemTokenAddress: offer.collateralItem.tokenAddress,\n', '                itemTokenId: offer.collateralItem.tokenId,\n', '                itemValue: offer.loanParams.itemValue,\n', '                redemptionPrice: offer.loanParams.redemptionPrice\n', '            }),\n', '            status: LoanStatus.TAKEN,\n', '            borrowerAddress: msg.sender,\n', '            lenderAddress: lenderAddress,\n', '            redemptionFeeNumerator: _redemptionFees[offer.loanTokenAddress].numerator,\n', '            redemptionFeeDenominator: _redemptionFees[offer.loanTokenAddress].denominator,\n', '            timestamp: block.timestamp\n', '        });\n', '\n', '        handler.changeOwnership(address(this), item.tokenAddress, item.tokenId);\n', '\n', '        emit LoanTaken(msg.sender, lenderAddress, signatureHash);\n', '    }\n', '\n', '    function loan(bytes32 signatureHash) external view returns (Loan memory) {\n', '        Loan storage _loan = _loans[signatureHash];\n', '        require(_loan.timestamp != 0, "Pawnshop: there\'s no loan with given signature");\n', '        return _loan;\n', '    }\n', '\n', '    function isSignatureUsed(bytes32 signatureHash) external view returns (bool) {\n', '        return _usedOfferSignatures[signatureHash];\n', '    }\n', '\n', '    function cancelOffer(bytes calldata signature, Offer calldata offer) external {\n', '        require(_verifyOffer(msg.sender, signature, offer), "Pawnshop: the transaction sender is not the offer signer");\n', '\n', '        bytes32 signatureHash = keccak256(signature);\n', '        _usedOfferSignatures[signatureHash] = true;\n', '\n', '        emit OfferCanceled(msg.sender, signatureHash);\n', '    }\n', '\n', '    function redemptionPriceWithFee(bytes32 signatureHash) external view returns (uint256) {\n', '        Loan storage _loan = _loans[signatureHash];\n', '        require(_loan.timestamp != 0, "Pawnshop: there\'s no loan with given signature");\n', '\n', '        return _loan.offer.redemptionPrice.add(_calculateRedemptionFee(_loan));\n', '    }\n', '\n', '    function redemptionDeadline(bytes32 signatureHash) public view returns (uint256) {\n', '        Loan storage _loan = _loans[signatureHash];\n', '        require(_loan.timestamp != 0, "Pawnshop: there\'s no loan with given signature");\n', '\n', '        return _loan.timestamp.add(_loan.offer.timelockPeriod);\n', '    }\n', '\n', '    function _reedemItem(bytes32 signatureHash) private returns (Loan storage _loan) {\n', '        _loan = _loans[signatureHash];\n', '        StoredOffer storage offer = _loan.offer;\n', '        require(block.timestamp <= redemptionDeadline(signatureHash), "Pawnshop: the redemption time has already passed");\n', '        require(_loan.status == LoanStatus.TAKEN, "Pawnshop: the item was already redeemed/claimed");\n', '\n', '        address loanTokenAddress = offer.loanTokenAddress;\n', '        uint256 redemptionFee = _calculateRedemptionFee(_loan);\n', '        IERC20(loanTokenAddress).safeTransferFrom(_loan.borrowerAddress, address(this), redemptionFee);\n', '        IERC20(loanTokenAddress).safeTransferFrom(_loan.borrowerAddress, _loan.lenderAddress, offer.redemptionPrice);\n', '\n', '        IHandler handler = itemHandler(offer.itemTokenAddress);\n', '        handler.changeOwnership(msg.sender, offer.itemTokenAddress, offer.itemTokenId);\n', '        _loan.status = LoanStatus.RETURNED;\n', '\n', '        emit ItemRedeemed(msg.sender, signatureHash);\n', '    }\n', '\n', '    function redeemItem(bytes32 signatureHash) external onlyBorrower(signatureHash) {\n', '        _reedemItem(signatureHash);\n', '    }\n', '\n', '    function _claimItem(bytes32 signatureHash) private returns (Loan storage _loan) {\n', '        _loan = _loans[signatureHash];\n', '        StoredOffer storage offer = _loan.offer;\n', '        require(block.timestamp > redemptionDeadline(signatureHash), "Pawnshop: the item timelock period hasn\'t passed yet");\n', '        require(_loan.status == LoanStatus.TAKEN, "Pawnshop: the item was already redeemed/claimed");\n', '\n', '        IHandler handler = itemHandler(offer.itemTokenAddress);\n', '        handler.changeOwnership(msg.sender, offer.itemTokenAddress, offer.itemTokenId);\n', '        _loan.status = LoanStatus.CLAIMED;\n', '\n', '        emit ItemClaimed(msg.sender, signatureHash);\n', '    }\n', '\n', '    function claimItem(bytes32 signatureHash) external onlyLender(signatureHash) {\n', '        _claimItem(signatureHash);\n', '    }\n', '\n', '    function withdrawItem(address tokenAddress, uint256 tokenId) public {\n', '        IHandler handler = itemHandler(tokenAddress);\n', '        handler.withdraw(msg.sender, tokenAddress, tokenId);\n', '        emit ItemWithdrawn(msg.sender, tokenAddress, tokenId);\n', '    }\n', '\n', '    function redeemAndWithdrawItem(bytes32 signatureHash) external onlyBorrower(signatureHash) {\n', '        Loan storage _loan = _reedemItem(signatureHash);\n', '        withdrawItem(_loan.offer.itemTokenAddress, _loan.offer.itemTokenId);\n', '    }\n', '\n', '    function claimAndWithdrawItem(bytes32 signatureHash) external onlyLender(signatureHash) {\n', '        Loan storage _loan = _claimItem(signatureHash);\n', '        withdrawItem(_loan.offer.itemTokenAddress, _loan.offer.itemTokenId);\n', '    }\n', '}']