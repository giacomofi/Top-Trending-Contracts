['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// File: original_contracts/IWhitelisted.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface IWhitelisted {\n', '\n', '    function hasRole(\n', '        bytes32 role,\n', '        address account\n', '    )\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function WHITELISTED_ROLE() external view returns(bytes32);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: original_contracts/lib/IExchange.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/**\n', '* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\n', '*/\n', 'interface IExchange {\n', '\n', '    /**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '   //TODO: REMOVE RETURN STATEMENT\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable;\n', '\n', '  /**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Max Amount of source tokens to be swapped\n', '   * @param toAmount Destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '    function buy(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable;\n', '\n', '    /**\n', '   * @dev This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information\n', '   * encoded in payload param of swap will calculated in this case\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   */\n', '    function onChainSwap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount\n', '    ) external payable returns (uint256);\n', '\n', '    /**\n', '    * @dev Certain adapters/exchanges needs to be initialized.\n', '    * This method will be called from Augustus\n', '    */\n', '    function initialize(bytes calldata data) external;\n', '\n', '    /**\n', '    * @dev Returns unique identifier for the adapter\n', '    */\n', '    function getKey() external pure returns(bytes32);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/SafeERC20.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: original_contracts/ITokenTransferProxy.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface ITokenTransferProxy {\n', '\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external;\n', '\n', '    function freeReduxTokens(address user, uint256 tokensToFree) external;\n', '}\n', '\n', '// File: original_contracts/lib/Utils.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library Utils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address constant ETH_ADDRESS = address(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '\n', '    address constant WETH_ADDRESS = address(\n', '        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    );\n', '\n', '    uint256 constant MAX_UINT = 2 ** 256 - 1;\n', '\n', '    /**\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   * @param expectedAmount Expected amount of destination tokens without slippage\n', '   * @param beneficiary Beneficiary address\n', '   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\n', '   * @param referrer referral id\n', '   * @param path Route to be taken for this swap to take place\n', '\n', '   */\n', '    struct SellData {\n', '        address fromToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        uint256 expectedAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.Path[] path;\n', '\n', '    }\n', '\n', '    struct MegaSwapSellData {\n', '        address fromToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        uint256 expectedAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.MegaSwapPath[] path;\n', '    }\n', '\n', '    struct BuyData {\n', '        address fromToken;\n', '        address toToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.BuyRoute[] route;\n', '    }\n', '\n', '    struct Route {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint percent;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    struct MegaSwapPath {\n', '        uint256 fromAmountPercent;\n', '        Path[] path;\n', '    }\n', '\n', '    struct Path {\n', '        address to;\n', '        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\n', '        Route[] routes;\n', '    }\n', '\n', '    struct BuyRoute {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\n', '\n', '    function wethAddress() internal pure returns (address) {return WETH_ADDRESS;}\n', '\n', '    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\n', '\n', '    function approve(\n', '        address addressToApprove,\n', '        address token,\n', '        uint256 amount\n', '    ) internal {\n', '        if (token != ETH_ADDRESS) {\n', '            IERC20 _token = IERC20(token);\n', '\n', '            uint allowance = _token.allowance(address(this), addressToApprove);\n', '\n', '            if (allowance < amount) {\n', '                _token.safeApprove(addressToApprove, 0);\n', '                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferTokens(\n', '        address token,\n', '        address payable destination,\n', '        uint256 amount\n', '    )\n', '    internal\n', '    {\n', '        if (amount > 0) {\n', '            if (token == ETH_ADDRESS) {\n', '                (bool result, ) = destination.call{value: amount, gas: 4000}("");\n', '                require(result, "Failed to transfer Ether");\n', '            }\n', '            else {\n', '                IERC20(token).safeTransfer(destination, amount);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    function tokenBalance(\n', '        address token,\n', '        address account\n', '    )\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '        if (token == ETH_ADDRESS) {\n', '            return account.balance;\n', '        } else {\n', '            return IERC20(token).balanceOf(account);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to refund gas using gas tokens\n', '    */\n', '    function refundGas(\n', '        address account,\n', '        address tokenTransferProxy,\n', '        uint256 initialGas\n', '    )\n', '        internal\n', '    {\n', '        uint256 freeBase = 14154;\n', '        uint256 freeToken = 6870;\n', '        uint256 reimburse = 24000;\n', '\n', '        uint256 tokens = initialGas.sub(\n', '            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\n', '        );\n', '\n', '        freeGasTokens(account, tokenTransferProxy, tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to free gas tokens\n', '    */\n', '    function freeGasTokens(address account, address tokenTransferProxy, uint256 tokens) internal {\n', '\n', '        uint256 tokensToFree = tokens;\n', '        uint256 safeNumTokens = 0;\n', '        uint256 gas = gasleft();\n', '\n', '        if (gas >= 27710) {\n', '            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\n', '        }\n', '\n', '        if (tokensToFree > safeNumTokens) {\n', '            tokensToFree = safeNumTokens;\n', '        }\n', '        ITokenTransferProxy(tokenTransferProxy).freeReduxTokens(account, tokensToFree);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: original_contracts/IReduxToken.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', 'interface IReduxToken {\n', '\n', '    function freeUpTo(uint256 value) external returns (uint256 freed);\n', '\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '\n', '    function mint(uint256 value) external;\n', '}\n', '\n', '// File: original_contracts/TokenTransferProxy.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @dev Allows owner of the contract to transfer tokens on behalf of user.\n', '* User will need to approve this contract to spend tokens on his/her behalf\n', '* on Paraswap platform\n', '*/\n', 'contract TokenTransferProxy is Ownable, ITokenTransferProxy {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IReduxToken public reduxToken;\n', '\n', '    constructor(address _reduxToken) public {\n', '        reduxToken = IReduxToken(_reduxToken);\n', '    }\n', '\n', '    /**\n', "    * @dev Allows owner of the contract to transfer tokens on user's behalf\n", '    * @dev Swapper contract will be the owner of this contract\n', '    * @param token Address of the token\n', '    * @param from Address from which tokens will be transferred\n', '    * @param to Receipent address of the tokens\n', '    * @param amount Amount of tokens to transfer\n', '    */\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        IERC20(token).safeTransferFrom(from, to, amount);\n', '    }\n', '\n', '    function freeReduxTokens(address user, uint256 tokensToFree) external override onlyOwner {\n', '        reduxToken.freeFromUpTo(user, tokensToFree);\n', '    }\n', '\n', '}\n', '\n', '// File: original_contracts/IPartnerRegistry.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface IPartnerRegistry {\n', '\n', '    function getPartnerContract(string calldata referralId) external view returns(address);\n', '\n', '}\n', '\n', '// File: original_contracts/IPartner.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface IPartner {\n', '\n', '    function getPartnerInfo() external view returns(\n', '        address payable feeWallet,\n', '        uint256 fee,\n', '        uint256 partnerShare,\n', '        uint256 paraswapShare,\n', '        bool positiveSlippageToUser,\n', '        bool noPositiveSlippage\n', '    );\n', '}\n', '\n', '// File: original_contracts/lib/TokenFetcherAugustus.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', 'contract TokenFetcherAugustus {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    /**\n', '    * @dev Allows owner of the contract to transfer any tokens which are assigned to the contract\n', '    * This method is for safety if by any chance tokens or ETHs are assigned to the contract by mistake\n', '    * @dev token Address of the token to be transferred\n', '    * @dev destination Recepient of the token\n', '    * @dev amount Amount of tokens to be transferred\n', '    */\n', '    function transferTokens(\n', '        address token,\n', '        address payable destination,\n', '        uint256 amount\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        Utils.transferTokens(token, destination, amount);\n', '    }\n', '}\n', '\n', '// File: original_contracts/IWETH.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', 'abstract contract IWETH is IERC20 {\n', '    function deposit() external virtual payable;\n', '    function withdraw(uint256 amount) external virtual;\n', '}\n', '\n', '// File: original_contracts/IUniswapProxy.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface IUniswapProxy {\n', '    function swapOnUniswap(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        returns (uint256);\n', '\n', '    function swapOnUniswapFork(\n', '        address factory,\n', '        bytes32 initCode,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        returns (uint256);\n', '\n', '    function buyOnUniswap(\n', '        uint256 amountInMax,\n', '        uint256 amountOut,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        returns (uint256 tokensSold);\n', '\n', '    function buyOnUniswapFork(\n', '        address factory,\n', '        bytes32 initCode,\n', '        uint256 amountInMax,\n', '        uint256 amountOut,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        returns (uint256 tokensSold);\n', '\n', '   function setupTokenSpender(address tokenSpender) external;\n', '\n', '}\n', '\n', '// File: original_contracts/AdapterStorage.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', 'contract AdapterStorage {\n', '\n', '    mapping (bytes32 => bool) internal adapterInitialized;\n', '    mapping (bytes32 => bytes) internal adapterVsData;\n', '    ITokenTransferProxy internal _tokenTransferProxy;\n', '\n', '    function isInitialized(bytes32 key) public view returns(bool) {\n', '        return adapterInitialized[key];\n', '    }\n', '\n', '    function getData(bytes32 key) public view returns(bytes memory) {\n', '        return adapterVsData[key];\n', '    }\n', '\n', '    function getTokenTransferProxy() public view returns (address) {\n', '        return address(_tokenTransferProxy);\n', '    }\n', '}\n', '\n', '// File: original_contracts/AugustusSwapper.sol\n', '\n', 'pragma solidity 0.7.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AugustusSwapper is AdapterStorage, TokenFetcherAugustus {\n', '    using SafeMath for uint256;\n', '\n', '    IWhitelisted private _whitelisted;\n', '\n', '    IPartnerRegistry private _partnerRegistry;\n', '\n', '    address payable private _feeWallet;\n', '\n', '    address private _uniswapProxy;\n', '\n', '    address private _pendingUniswapProxy;\n', '\n', '    uint256 private _changeRequestedBlock;\n', '\n', '    //Number of blocks after which UniswapProxy change can be confirmed\n', '    uint256 private _timelock;\n', '\n', '    event Swapped(\n', '        address initiator,\n', '        address indexed beneficiary,\n', '        address indexed srcToken,\n', '        address indexed destToken,\n', '        uint256 srcAmount,\n', '        uint256 receivedAmount,\n', '        uint256 expectedAmount,\n', '        string referrer\n', '    );\n', '\n', '    event Bought(\n', '        address initiator,\n', '        address indexed beneficiary,\n', '        address indexed srcToken,\n', '        address indexed destToken,\n', '        uint256 srcAmount,\n', '        uint256 receivedAmount,\n', '        string referrer\n', '    );\n', '\n', '    event FeeTaken(\n', '        uint256 fee,\n', '        uint256 partnerShare,\n', '        uint256 paraswapShare\n', '    );\n', '\n', '    event AdapterInitialized(address indexed adapter);\n', '\n', '    modifier onlySelf() {\n', '        require(\n', '            msg.sender == address(this),\n', '            "AugustusSwapper: Invalid access"\n', '        );\n', '        _;\n', '    }\n', '\n', '    receive () payable external {\n', '\n', '    }\n', '\n', '    function getTimeLock() external view returns(uint256) {\n', '      return _timelock;\n', '    }\n', '\n', '    function initialize(\n', '        address whitelist,\n', '        address reduxToken,\n', '        address partnerRegistry,\n', '        address payable feeWallet,\n', '        address uniswapProxy,\n', '        uint256 timelock\n', '    )\n', '        external\n', '    {\n', '        require(address(_tokenTransferProxy) == address(0), "Contract already initialized!!");\n', '        _partnerRegistry = IPartnerRegistry(partnerRegistry);\n', '        TokenTransferProxy lTokenTransferProxy = new TokenTransferProxy(reduxToken);\n', '        _tokenTransferProxy = ITokenTransferProxy(lTokenTransferProxy);\n', '        _whitelisted = IWhitelisted(whitelist);\n', '        _feeWallet = feeWallet;\n', '        _uniswapProxy = uniswapProxy;\n', '        _owner = msg.sender;\n', '        _timelock = timelock;\n', '    }\n', '\n', '    function initializeAdapter(address adapter, bytes calldata data) external onlyOwner {\n', '\n', '        require(\n', '            _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), adapter),\n', '            "Exchange not whitelisted"\n', '        );\n', '        (bool success,) = adapter.delegatecall(abi.encodeWithSelector(IExchange.initialize.selector, data));\n', '        require(success, "Failed to initialize adapter");\n', '        emit AdapterInitialized(adapter);\n', '    }\n', '\n', '    function getPendingUniswapProxy() external view returns(address) {\n', '      return  _pendingUniswapProxy;\n', '    }\n', '\n', '    function getChangeRequestedBlock() external view returns(uint256) {\n', '      return _changeRequestedBlock;\n', '    }\n', '\n', '    function getUniswapProxy() external view returns(address) {\n', '        return _uniswapProxy;\n', '    }\n', '\n', '    function getVersion() external view returns(string memory) {\n', '        return "4.0.0";\n', '    }\n', '\n', '    function getPartnerRegistry() external view returns(address) {\n', '        return address(_partnerRegistry);\n', '    }\n', '\n', '    function getWhitelistAddress() external view returns(address) {\n', '        return address(_whitelisted);\n', '    }\n', '\n', '    function getFeeWallet() external view returns(address) {\n', '        return _feeWallet;\n', '    }\n', '\n', '    function changeUniswapProxy(address uniswapProxy) external onlyOwner {\n', '        require(uniswapProxy != address(0), "Invalid address");\n', '        _changeRequestedBlock = block.number;\n', '        _pendingUniswapProxy = uniswapProxy;\n', '    }\n', '\n', '    function confirmUniswapProxyChange() external onlyOwner {\n', '        require(\n', '            block.number >= _changeRequestedBlock.add(_timelock),\n', '            "Time lock check failed"\n', '        );\n', '\n', '        require(_pendingUniswapProxy != address(0), "No pending request");\n', '\n', '        _changeRequestedBlock = 0;\n', '        _uniswapProxy = _pendingUniswapProxy;\n', '        _pendingUniswapProxy = address(0);\n', '    }\n', '\n', '    function setFeeWallet(address payable feeWallet) external onlyOwner {\n', '        require(feeWallet != address(0), "Invalid address");\n', '        _feeWallet = feeWallet;\n', '    }\n', '\n', '    function setPartnerRegistry(address partnerRegistry) external onlyOwner {\n', '        require(partnerRegistry != address(0), "Invalid address");\n', '        _partnerRegistry = IPartnerRegistry(partnerRegistry);\n', '    }\n', '\n', '    function setWhitelistAddress(address whitelisted) external onlyOwner {\n', '        require(whitelisted != address(0), "Invalid whitelist address");\n', '        _whitelisted = IWhitelisted(whitelisted);\n', '    }\n', '\n', '    function swapOnUniswap(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        uint8 referrer\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        //DELEGATING CALL TO THE ADAPTER\n', '        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\n', '            abi.encodeWithSelector(\n', '                IUniswapProxy.swapOnUniswap.selector,\n', '                amountIn,\n', '                amountOutMin,\n', '                path\n', '            )\n', '        );\n', '        require(success, "Call to uniswap proxy failed");\n', '\n', '    }\n', '\n', '    function buyOnUniswap(\n', '        uint256 amountInMax,\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        uint8 referrer\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        //DELEGATING CALL TO THE ADAPTER\n', '        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\n', '            abi.encodeWithSelector(\n', '                IUniswapProxy.buyOnUniswap.selector,\n', '                amountInMax,\n', '                amountOut,\n', '                path\n', '            )\n', '        );\n', '        require(success, "Call to uniswap proxy failed");\n', '\n', '    }\n', '\n', '    function buyOnUniswapFork(\n', '        address factory,\n', '        bytes32 initCode,\n', '        uint256 amountInMax,\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        uint8 referrer\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        //DELEGATING CALL TO THE ADAPTER\n', '        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\n', '            abi.encodeWithSelector(\n', '                IUniswapProxy.buyOnUniswapFork.selector,\n', '                factory,\n', '                initCode,\n', '                amountInMax,\n', '                amountOut,\n', '                path\n', '            )\n', '        );\n', '        require(success, "Call to uniswap proxy failed");\n', '\n', '    }\n', '\n', '    function swapOnUniswapFork(\n', '        address factory,\n', '        bytes32 initCode,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        uint8 referrer\n', '    )\n', '        external\n', '        payable\n', '\n', '    {\n', '        //DELEGATING CALL TO THE ADAPTER\n', '        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\n', '            abi.encodeWithSelector(\n', '                IUniswapProxy.swapOnUniswapFork.selector,\n', '                factory,\n', '                initCode,\n', '                amountIn,\n', '                amountOutMin,\n', '                path\n', '            )\n', '        );\n', '        require(success, "Call to uniswap proxy failed");\n', '\n', '    }\n', '\n', '    function simplBuy(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address[] memory callees,\n', '        bytes memory exchangeData,\n', '        uint256[] memory startIndexes,\n', '        uint256[] memory values,\n', '        address payable beneficiary,\n', '        string memory referrer,\n', '        bool useReduxToken\n', '    )\n', '        external\n', '        payable\n', '\n', '    {\n', '        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n', '        uint receivedAmount = performSimpleSwap(\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            toAmount,\n', '            toAmount,//expected amount and to amount are same in case of buy\n', '            callees,\n', '            exchangeData,\n', '            startIndexes,\n', '            values,\n', '            beneficiary,\n', '            referrer,\n', '            useReduxToken\n', '        );\n', '\n', '        uint256 remainingAmount = Utils.tokenBalance(\n', '            fromToken,\n', '            address(this)\n', '        );\n', '\n', '        if (remainingAmount > 0) {\n', '            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\n', '        }\n', '\n', '        emit Bought(\n', '            msg.sender,\n', '            beneficiary,\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            receivedAmount,\n', '            referrer\n', '        );\n', '    }\n', '\n', '    function approve(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external\n', '        onlySelf\n', '    {\n', '        Utils.approve(to, token, amount);\n', '    }\n', '\n', '    function simpleSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        uint256 expectedAmount,\n', '        address[] memory callees,\n', '        bytes memory exchangeData,\n', '        uint256[] memory startIndexes,\n', '        uint256[] memory values,\n', '        address payable beneficiary,\n', '        string memory referrer,\n', '        bool useReduxToken\n', '    )\n', '        public\n', '        payable\n', '        returns (uint256 receivedAmount)\n', '    {\n', '        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n', '        receivedAmount = performSimpleSwap(\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            toAmount,\n', '            expectedAmount,\n', '            callees,\n', '            exchangeData,\n', '            startIndexes,\n', '            values,\n', '            beneficiary,\n', '            referrer,\n', '            useReduxToken\n', '        );\n', '\n', '        emit Swapped(\n', '            msg.sender,\n', '            beneficiary,\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            receivedAmount,\n', '            expectedAmount,\n', '            referrer\n', '        );\n', '\n', '        return receivedAmount;\n', '    }\n', '\n', '    function transferTokensFromProxy(\n', '        address token,\n', '        uint256 amount\n', '    )\n', '      private\n', '    {\n', '        if (token != Utils.ethAddress()) {\n', '            _tokenTransferProxy.transferFrom(\n', '                token,\n', '                msg.sender,\n', '                address(this),\n', '                amount\n', '            );\n', '        }\n', '    }\n', '\n', '    function performSimpleSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        uint256 expectedAmount,\n', '        address[] memory callees,\n', '        bytes memory exchangeData,\n', '        uint256[] memory startIndexes,\n', '        uint256[] memory values,\n', '        address payable beneficiary,\n', '        string memory referrer,\n', '        bool useReduxToken\n', '    )\n', '        private\n', '        returns (uint256 receivedAmount)\n', '    {\n', '        require(toAmount > 0, "toAmount is too low");\n', '        require(\n', '            callees.length + 1 == startIndexes.length,\n', '            "Start indexes must be 1 greater then number of callees"\n', '        );\n', '\n', '        uint initialGas = gasleft();\n', '\n', '        //If source token is not ETH than transfer required amount of tokens\n', '        //from sender to this contract\n', '        transferTokensFromProxy(fromToken, fromAmount);\n', '\n', '        for (uint256 i = 0; i < callees.length; i++) {\n', '            require(\n', '                callees[i] != address(_tokenTransferProxy),\n', '                "Can not call TokenTransferProxy Contract"\n', '            );\n', '\n', '            bool result = externalCall(\n', '                callees[i], //destination\n', '                values[i], //value to send\n', '                startIndexes[i], // start index of call data\n', '                startIndexes[i + 1].sub(startIndexes[i]), // length of calldata\n', '                exchangeData// total calldata\n', '            );\n', '            require(result, "External call failed");\n', '        }\n', '\n', '        receivedAmount = Utils.tokenBalance(\n', '            toToken,\n', '            address(this)\n', '        );\n', '\n', '        require(\n', '            receivedAmount >= toAmount,\n', '            "Received amount of tokens are less then expected"\n', '        );\n', '\n', '        takeFeeAndTransferTokens(\n', '            toToken,\n', '            expectedAmount,\n', '            receivedAmount,\n', '            beneficiary,\n', '            referrer\n', '        );\n', '\n', '        if (useReduxToken) {\n', '            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n', '        }\n', '\n', '        return receivedAmount;\n', '    }\n', '\n', '    /**\n', '   * @dev This function sends the WETH returned during the exchange to the user.\n', '   * @param token: The WETH Address\n', '   */\n', '    function withdrawAllWETH(IWETH token) external onlySelf {\n', '        uint256 amount = token.balanceOf(address(this));\n', '        token.withdraw(amount);\n', '    }\n', '\n', '    /**\n', '   * @dev The function which performs the multi path swap.\n', '   * @param data Data required to perform swap.\n', '   */\n', '    function multiSwap(\n', '        Utils.SellData memory data\n', '    )\n', '        public\n', '        payable\n', '        returns (uint256)\n', '    {\n', '        uint initialGas = gasleft();\n', '\n', '        address fromToken = data.fromToken;\n', '        uint256 fromAmount = data.fromAmount;\n', '        uint256 toAmount = data.toAmount;\n', '        uint256 expectedAmount = data.expectedAmount;\n', '        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n', '        string memory referrer = data.referrer;\n', '        Utils.Path[] memory path = data.path;\n', '        address toToken = path[path.length - 1].to;\n', '        bool useReduxToken = data.useReduxToken;\n', '\n', '        //Referral can never be empty\n', '        require(bytes(referrer).length > 0, "Invalid referrer");\n', '\n', '        require(toAmount > 0, "To amount can not be 0");\n', '\n', '        //if fromToken is not ETH then transfer tokens from user to this contract\n', '        if (fromToken != Utils.ethAddress()) {\n', '            _tokenTransferProxy.transferFrom(\n', '                fromToken,\n', '                msg.sender,\n', '                address(this),\n', '                fromAmount\n', '            );\n', '        }\n', '\n', '        performSwap(\n', '            fromToken,\n', '            fromAmount,\n', '            path\n', '        );\n', '\n', '\n', '        uint256 receivedAmount = Utils.tokenBalance(\n', '            toToken,\n', '            address(this)\n', '        );\n', '\n', '        require(\n', '            receivedAmount >= toAmount,\n', '            "Received amount of tokens are less then expected"\n', '        );\n', '\n', '\n', '        takeFeeAndTransferTokens(\n', '            toToken,\n', '            expectedAmount,\n', '            receivedAmount,\n', '            beneficiary,\n', '            referrer\n', '        );\n', '\n', '        if (useReduxToken) {\n', '            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n', '        }\n', '\n', '        emit Swapped(\n', '            msg.sender,\n', '            beneficiary,\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            receivedAmount,\n', '            expectedAmount,\n', '            referrer\n', '        );\n', '\n', '        return receivedAmount;\n', '    }\n', '\n', '    /**\n', '   * @dev The function which performs the mega path swap.\n', '   * @param data Data required to perform swap.\n', '   */\n', '    function megaSwap(\n', '        Utils.MegaSwapSellData memory data\n', '    )\n', '        public\n', '        payable\n', '        returns (uint256)\n', '    {\n', '        uint initialGas = gasleft();\n', '\n', '        address fromToken = data.fromToken;\n', '        uint256 fromAmount = data.fromAmount;\n', '        uint256 toAmount = data.toAmount;\n', '        uint256 expectedAmount = data.expectedAmount;\n', '        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n', '        string memory referrer = data.referrer;\n', '        Utils.MegaSwapPath[] memory path = data.path;\n', '        address toToken = path[0].path[path[0].path.length - 1].to;\n', '        bool useReduxToken = data.useReduxToken;\n', '\n', '        //Referral can never be empty\n', '        require(bytes(referrer).length > 0, "Invalid referrer");\n', '\n', '        require(toAmount > 0, "To amount can not be 0");\n', '\n', '        //if fromToken is not ETH then transfer tokens from user to this contract\n', '        if (fromToken != Utils.ethAddress()) {\n', '            _tokenTransferProxy.transferFrom(\n', '                fromToken,\n', '                msg.sender,\n', '                address(this),\n', '                fromAmount\n', '            );\n', '        }\n', '\n', '        for (uint8 i = 0; i < uint8(path.length); i++) {\n', '            uint256 _fromAmount = fromAmount.mul(path[i].fromAmountPercent).div(10000);\n', '            if (i == path.length - 1) {\n', '                _fromAmount = Utils.tokenBalance(address(fromToken), address(this));\n', '            }\n', '            performSwap(\n', '                fromToken,\n', '                _fromAmount,\n', '                path[i].path\n', '            );\n', '        }\n', '\n', '        uint256 receivedAmount = Utils.tokenBalance(\n', '            toToken,\n', '            address(this)\n', '        );\n', '\n', '        require(\n', '            receivedAmount >= toAmount,\n', '            "Received amount of tokens are less then expected"\n', '        );\n', '\n', '\n', '        takeFeeAndTransferTokens(\n', '            toToken,\n', '            expectedAmount,\n', '            receivedAmount,\n', '            beneficiary,\n', '            referrer\n', '        );\n', '\n', '        if (useReduxToken) {\n', '            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n', '        }\n', '\n', '        emit Swapped(\n', '            msg.sender,\n', '            beneficiary,\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            receivedAmount,\n', '            expectedAmount,\n', '            referrer\n', '        );\n', '\n', '        return receivedAmount;\n', '    }\n', '\n', '    /**\n', '   * @dev The function which performs the single path buy.\n', '   * @param data Data required to perform swap.\n', '   */\n', '    function buy(\n', '        Utils.BuyData memory data\n', '    )\n', '        public\n', '        payable\n', '        returns (uint256)\n', '    {\n', '\n', '        address fromToken = data.fromToken;\n', '        uint256 fromAmount = data.fromAmount;\n', '        uint256 toAmount = data.toAmount;\n', '        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n', '        string memory referrer = data.referrer;\n', '        Utils.BuyRoute[] memory route = data.route;\n', '        address toToken = data.toToken;\n', '        bool useReduxToken = data.useReduxToken;\n', '\n', '        //Referral id can never be empty\n', '        require(bytes(referrer).length > 0, "Invalid referrer");\n', '\n', '        require(toAmount > 0, "To amount can not be 0");\n', '\n', '        uint256 receivedAmount = performBuy(\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            toAmount,\n', '            route,\n', '            useReduxToken\n', '        );\n', '\n', '        takeFeeAndTransferTokens(\n', '            toToken,\n', '            toAmount,\n', '            receivedAmount,\n', '            beneficiary,\n', '            referrer\n', '        );\n', '\n', '        uint256 remainingAmount = Utils.tokenBalance(\n', '            fromToken,\n', '            address(this)\n', '        );\n', '\n', '        if (remainingAmount > 0) {\n', '            Utils.transferTokens(fromToken, msg.sender, remainingAmount);\n', '        }\n', '\n', '        emit Bought(\n', '            msg.sender,\n', '            beneficiary,\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            receivedAmount,\n', '            referrer\n', '        );\n', '\n', '        return receivedAmount;\n', '    }\n', '\n', '    //Helper function to transfer final amount to the beneficiaries\n', '    function takeFeeAndTransferTokens(\n', '        address toToken,\n', '        uint256 expectedAmount,\n', '        uint256 receivedAmount,\n', '        address payable beneficiary,\n', '        string memory referrer\n', '\n', '    )\n', '        private\n', '    {\n', '        uint256 remainingAmount = receivedAmount;\n', '\n', '        address partnerContract = _partnerRegistry.getPartnerContract(referrer);\n', '\n', '        //Take partner fee\n', '        ( uint256 fee ) = _takeFee(\n', '            toToken,\n', '            receivedAmount,\n', '            expectedAmount,\n', '            partnerContract\n', '        );\n', '        remainingAmount = receivedAmount.sub(fee);\n', '\n', '        //If there is a positive slippage after taking partner fee then 50% goes to paraswap and 50% to the user\n', '        if ((remainingAmount > expectedAmount) && fee == 0) {\n', '            uint256 positiveSlippageShare = remainingAmount.sub(expectedAmount).div(2);\n', '            remainingAmount = remainingAmount.sub(positiveSlippageShare);\n', '            Utils.transferTokens(toToken, _feeWallet, positiveSlippageShare);\n', '        }\n', '\n', '        Utils.transferTokens(toToken, beneficiary, remainingAmount);\n', '\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Source take from GNOSIS MultiSigWallet\n', '    * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '    */\n', '    function externalCall(\n', '        address destination,\n', '        uint256 value,\n', '        uint256 dataOffset,\n', '        uint dataLength,\n', '        bytes memory data\n', '    )\n', '    private\n', '    returns (bool)\n', '    {\n', '        bool result = false;\n', '\n', '        assembly {\n', '            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas(), 34710), // 34710 is the value that solidity is currently emitting\n', '                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                add(d, dataOffset),\n', '                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\n', '                x,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '\n', '    //Helper function to perform swap\n', '    function performSwap(\n', '        address fromToken,\n', '        uint256 fromAmount,\n', '        Utils.Path[] memory path\n', '    )\n', '        private\n', '    {\n', '\n', '        require(path.length > 0, "Path not provided for swap");\n', '\n', '        //Assuming path will not be too long to reach out of gas exception\n', '        for (uint i = 0; i < path.length; i++) {\n', '            //_fromToken will be either fromToken or toToken of the previous path\n', '            address _fromToken = i > 0 ? path[i - 1].to : fromToken;\n', '            address _toToken = path[i].to;\n', '\n', '            uint256 _fromAmount = i > 0 ? Utils.tokenBalance(_fromToken, address(this)) : fromAmount;\n', '            if (i > 0 && _fromToken == Utils.ethAddress()) {\n', '                _fromAmount = _fromAmount.sub(path[i].totalNetworkFee);\n', '            }\n', '\n', '            for (uint j = 0; j < path[i].routes.length; j++) {\n', '                Utils.Route memory route = path[i].routes[j];\n', '\n', '                //Check if exchange is supported\n', '                require(\n', '                    _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\n', '                    "Exchange not whitelisted"\n', '                );\n', '\n', '                //Calculating tokens to be passed to the relevant exchange\n', '                //percentage should be 200 for 2%\n', '                uint fromAmountSlice = _fromAmount.mul(route.percent).div(10000);\n', '                uint256 value = route.networkFee;\n', '\n', '                if (i > 0 && j == path[i].routes.length.sub(1)) {\n', '                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\n', '\n', '                    fromAmountSlice = remBal;\n', '\n', '                    if (address(_fromToken) == Utils.ethAddress()) {\n', '                        //subtract network fee\n', '                        fromAmountSlice = fromAmountSlice.sub(value);\n', '                    }\n', '                }\n', '\n', '                //DELEGATING CALL TO THE ADAPTER\n', '                (bool success,) = route.exchange.delegatecall(\n', '                    abi.encodeWithSelector(\n', '                        IExchange.swap.selector,\n', '                        _fromToken,\n', '                        _toToken,\n', '                        fromAmountSlice,\n', '                        1,\n', '                        route.targetExchange,\n', '                        route.payload\n', '                    )\n', '                );\n', '\n', '                require(success, "Call to adapter failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    //Helper function to perform swap\n', '    function performBuy(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        Utils.BuyRoute[] memory routes,\n', '        bool useReduxToken\n', '    )\n', '        private\n', '        returns(uint256)\n', '    {\n', '        uint initialGas = gasleft();\n', '\n', '        //if fromToken is not ETH then transfer tokens from user to this contract\n', '        if (fromToken != Utils.ethAddress()) {\n', '            _tokenTransferProxy.transferFrom(\n', '                fromToken,\n', '                msg.sender,\n', '                address(this),\n', '                fromAmount\n', '            );\n', '        }\n', '\n', '        for (uint j = 0; j < routes.length; j++) {\n', '            Utils.BuyRoute memory route = routes[j];\n', '\n', '            //Check if exchange is supported\n', '            require(\n', '                _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\n', '                "Exchange not whitelisted"\n', '            );\n', '\n', '            //delegate Call to the exchange\n', '            (bool success,) = route.exchange.delegatecall(\n', '                abi.encodeWithSelector(\n', '                    IExchange.buy.selector,\n', '                    fromToken,\n', '                    toToken,\n', '                    route.fromAmount,\n', '                    route.toAmount,\n', '                    route.targetExchange,\n', '                    route.payload\n', '                )\n', '            );\n', '            require(success, "Call to adapter failed");\n', '        }\n', '\n', '        uint256 receivedAmount = Utils.tokenBalance(\n', '            toToken,\n', '            address(this)\n', '        );\n', '        require(\n', '            receivedAmount >= toAmount,\n', '            "Received amount of tokens are less then expected tokens"\n', '        );\n', '\n', '        if (useReduxToken) {\n', '            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n', '        }\n', '        return receivedAmount;\n', '    }\n', '\n', '    function _takeFee(\n', '        address toToken,\n', '        uint256 receivedAmount,\n', '        uint256 expectedAmount,\n', '        address partnerContract\n', '    )\n', '        private\n', '        returns(uint256 fee)\n', '    {\n', '        //If there is no partner associated with the referral id then no fee will be taken\n', '        if (partnerContract == address(0)) {\n', '            return (0);\n', '        }\n', '\n', '        (\n', '            address payable partnerFeeWallet,\n', '            uint256 feePercent,\n', '            uint256 partnerSharePercent,\n', '            ,\n', '            bool positiveSlippageToUser,\n', '            bool noPositiveSlippage\n', '        ) = IPartner(partnerContract).getPartnerInfo();\n', '\n', '        uint256 partnerShare = 0;\n', '        uint256 paraswapShare = 0;\n', '\n', '        if (!noPositiveSlippage && feePercent <= 50 && receivedAmount > expectedAmount) {\n', '            uint256 halfPositiveSlippage = receivedAmount.sub(expectedAmount).div(2);\n', '            //Calculate total fee to be taken\n', '            fee = expectedAmount.mul(feePercent).div(10000);\n', "            //Calculate partner's share\n", '            partnerShare = fee.mul(partnerSharePercent).div(10000);\n', "            //All remaining fee is paraswap's share\n", '            paraswapShare = fee.sub(partnerShare);\n', '            paraswapShare = paraswapShare.add(halfPositiveSlippage);\n', '\n', '            fee = fee.add(halfPositiveSlippage);\n', '\n', '            if (!positiveSlippageToUser) {\n', '                partnerShare = partnerShare.add(halfPositiveSlippage);\n', '                fee = fee.add(halfPositiveSlippage);\n', '            }\n', '        }\n', '        else {\n', '            //Calculate total fee to be taken\n', '            fee = receivedAmount.mul(feePercent).div(10000);\n', "            //Calculate partner's share\n", '            partnerShare = fee.mul(partnerSharePercent).div(10000);\n', "            //All remaining fee is paraswap's share\n", '            paraswapShare = fee.sub(partnerShare);\n', '        }\n', '        Utils.transferTokens(toToken, partnerFeeWallet, partnerShare);\n', '        Utils.transferTokens(toToken, _feeWallet, paraswapShare);\n', '\n', '        emit FeeTaken(fee, partnerShare, paraswapShare);\n', '        return (fee);\n', '    }\n', '}']