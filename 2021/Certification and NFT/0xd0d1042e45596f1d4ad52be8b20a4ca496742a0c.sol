['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    address payable private _Powner;   \n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address payable msgSender = _msgSender();\n', '        _owner = msgSender; \n', '        _Powner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    function owner_payable() public view virtual returns (address payable) {\n', '        return _Powner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address payable newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '        _Powner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//雞巴大小\n', 'contract DickSizeToken is Ownable, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => uint256) private _maximums;\n', '    \n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 public _limitICO; // limit for faucet and mining\n', '    uint256 private _coinbase; // profit from mining per member\n', '    uint256 private _bigBonusLim;  // max bonus for bigDick\n', '    uint256 public _bonusWins; // How many BigDicks was\n', '    uint256 public _kingsize; // the royal size of penis\n', '    uint256 public _micropenis;    \n', '    uint256 public _ratioInchPerEther;  //price for buy \n', '    uint256 public _minWei; // the minimal wei in address to consider it real. For mining \n', '    \n', '    uint256 public _LastRecordSet;  // sets by func IhaveTheBiggestDick. For big bonus  \n', '    address public _theBiggestDick; // arddress of the biggest dick\n', '    string public _MessageFromBigDick; //mess to the all world\n', '    string public _Intro; // \'hurry up! Less than two million mens will have a king size (7") penis\';\n', '    \n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '  \n', '    event BuyDickInch(address indexed from, uint256 amountWEI);  \n', '    event BigDickBonus(address indexed to, uint256 amountInch);\n', '    event BigDickSays(address indexed from, string Says);    \n', '\n', '\n', '    constructor () public { //string memory name_, string memory symbol_\n', '\n', '        _name = "DickSize"; //"DickSize";\n', '       _symbol = "inch";//"inch"; \n', '       _decimals = 2;  //_setupDecimals(2);\n', '       _mint(_msgSender(),1500000000); \n', '       _coinbase=100;     //setup_coinbase(100);\n', '       _bigBonusLim = 10000; //setup_bigBonusLim(10000) ;\n', '       _kingsize = 700;\n', '       _micropenis = 300;\n', '       _limitICO = 1000000000; //setup_limitICO(1000000000);\n', '       _ratioInchPerEther = 2000; //setup_ratioInchPerEther(20); //averege 100$\n', '       _minWei = 10**14; //setup_minWei(10**14);\n', '    }\n', '    \n', ' \n', '    // setups\n', '    function setup_Intro(string memory value)public virtual onlyOwner{\n', '        _Intro = value;\n', '    }\n', '    \n', '    function setup_bigBonusLim(uint256 value)public virtual onlyOwner{\n', '        _bigBonusLim = value;\n', '    }\n', '    \n', '    function setup_ratioInchPerEther(uint256 price)public virtual onlyOwner{\n', '        _ratioInchPerEther = price.mul(10**_decimals);\n', '    }\n', '    \n', '    function setup_minWei(uint256 value)public virtual onlyOwner{\n', '        _minWei = value;\n', '    }\n', '    \n', '    function setup_limitICO(uint256 value)public virtual onlyOwner{\n', '        _limitICO = value;\n', '    } \n', '    \n', '    function setup_coinbase(uint256 value)public virtual onlyOwner{\n', '        _coinbase = value;\n', '    } \n', '    \n', '\n', '    \n', '    function send_to (address[] memory newMembers,uint256 value) public virtual onlyOwner{\n', '        uint256 len = newMembers.length;\n', '        for (uint256 i = 0; i < len; i++)\n', '        extend(newMembers[i],value); \n', '        \n', '    }\n', '    \n', '    // setups\n', '\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        if (_maximums[recipient]<_balances[recipient]) _maximums[recipient]=_balances[recipient];\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        \n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        \n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n', '\n', '//feature\n', '//coinbase for mining\n', '    function coinbase() public view virtual  returns (uint256) {\n', '        uint256 declim  = totalSupply().sub(_limitICO);\n', '        if (_balances[owner()]<declim) return 0;\n', '        return _coinbase;\n', '    }\n', '    \n', '\n', '//coinbase to the new memders\n', '    function giftbase() public view virtual  returns (uint256) {\n', '        if (coinbase()==0) return 0;\n', '        return coinbase().div(2);\n', '    }\n', '\n', '// bonus for the biggest dick    \n', '    function bigbonus() public view virtual  returns (uint256) {\n', '        if (_bonusWins.mul(100)>=_bigBonusLim) return _bigBonusLim;\n', '        return _bonusWins.mul(100);\n', '    }\n', '\n', '//real length of champion\n', '    function BigDickLength() public view virtual returns (uint256){\n', '        return balanceOf(_theBiggestDick);\n', '    }  \n', '\n', '    function isNew(address to) public view virtual returns (bool){\n', '        return  _maximums[to]==0 && address(to).balance>=_minWei;    \n', '    }\n', '\n', ' \n', '//    function isNewCheck(address to) public virtual returns (bool){\n', '//            require(address(to).balance>=_minWei, "isNew: recipient must have _minWei");        \n', '//            require(_balances[to]==0, "isNew: recipient already have inches");\n', '//            return true;\n', '//    }\n', '\n', '    function extend(address to, uint256 amount) internal virtual returns (bool){ \n', '        require(amount < _balances[owner()], "Opps! The global men\'s fund is almost empty");\n', '        _balances[owner()] = _balances[owner()].sub(amount);\n', '        _balances[to] = _balances[to].add(amount);\n', '        if (_maximums[to]<_balances[to]) _maximums[to]=_balances[to];\n', '        emit Transfer(owner(), to, amount); \n', '        return true;\n', '    }\n', '\n', '// free inch    \n', '    function faucet () public returns (bool){\n', '         require(coinbase() != 0, "Coinbase is zero");   \n', '         require(_maximums[_msgSender()]<_micropenis, "faucet: You already have minimum inches, try to mining");\n', '         extend(_msgSender(),coinbase()); \n', '         return true;\n', '    }  \n', '\n', '\n', '// You can buy Inches by Ether with price\'s ratio "_ratioInchPerEther"  \n', '    function buyInches() payable external  {\n', '        uint256 amountEth = msg.value;\n', '        uint256 amountToken = amountEth.mul(_ratioInchPerEther).div(10**18);\n', '        require(amountEth > 0, "You need to send some ether to buy inches");\n', '        require(amountToken > 0, "Oh! It is not enough to buy even a small piece");        \n', '\n', '        extend(_msgSender(),amountToken); \n', '        owner_payable().transfer(amountEth);\n', '        emit BuyDickInch(_msgSender(), amountEth);  \n', '    }\n', '\n', '//if you really have the biggest dick, then capture it in history and leave a message to posterity\n', '    function IhaveTheBiggestDick(string memory MessageToTheWorld) public returns (bool){\n', '        require(_msgSender()!=owner(), "Sorry, the owner has no rights"); \n', '        require(_msgSender()!=_theBiggestDick, "You already have The Biggest dick");\n', '        require(_balances[_msgSender()]>_balances[_theBiggestDick], "Sorry, it\'s not true");\n', '        _theBiggestDick = _msgSender();\n', '        _MessageFromBigDick = MessageToTheWorld;\n', '        \n', '//BigDickBonus - if you exceed the previous record by more than double bonus, you will receive a bonus \n', '        if (_balances[_msgSender()]>=_LastRecordSet.add(bigbonus().mul(2))){\n', '             extend(_msgSender(),bigbonus());\n', '             _bonusWins++;\n', '             emit BigDickBonus(_msgSender(),bigbonus());\n', '        }\n', '        \n', '        _LastRecordSet = _balances[_theBiggestDick];\n', '        emit BigDickSays(_theBiggestDick,_MessageFromBigDick);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '// Mining by newMembers without this token with minimum wei \n', '    function mining (address[] memory newMembers) public returns (bool){\n', '        require(coinbase() != 0, "Coinbase is zero");   \n', '        uint256 len = newMembers.length;\n', '        for (uint256 i = 0; i < len; i++)\n', '        if (isNew(newMembers[i])) {\n', '        extend(newMembers[i],giftbase()); \n', '        extend(_msgSender(),coinbase()); \n', '        }\n', '        return true;\n', '    }  \n', '\n', '\n', '// Size without decimals\n', '    function mySizeInInch(address YourAddress) public  view virtual returns (uint256) {\n', '        return balanceOf(YourAddress).div(10**_decimals);\n', '    }\n', '    \n', '// Size in centimeters without decimals\n', '    function mySizeInCM(address YourAddress) public  view virtual returns (uint256) {\n', '      //  return balanceOf(_msgSender()).mul(254).div(100).div(10**_decimals);\n', '      return balanceOf(YourAddress).mul(254).div(100).div(10**_decimals);\n', '    }    \n', '    \n', '//feature    \n', '    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '\n', '//    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '//        require(b > 0, "SafeMath: modulo by zero");\n', '//        return a % b;\n', '//    }\n', '    \n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '\n', '//    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '//        require(b > 0, errorMessage);\n', '//        return a % b;\n', '//    }\n', '\n', '\n', '}']