['// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title Protocol adapter interface.\n', ' * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n', ' * @author Igor Sobolev <[email\xa0protected]>\n', ' */\n', 'interface ProtocolAdapter {\n', '\n', '    /**\n', '     * @dev MUST return "Asset" or "Debt".\n', '     * SHOULD be implemented by the public constant state variable.\n', '     */\n', '    function adapterType() external pure returns (string memory);\n', '\n', '    /**\n', '     * @dev MUST return token type (default is "ERC20").\n', '     * SHOULD be implemented by the public constant state variable.\n', '     */\n', '    function tokenType() external pure returns (string memory);\n', '\n', '    /**\n', '     * @dev MUST return amount of the given token locked on the protocol by the given account.\n', '     */\n', '    function getBalance(address token, address account) external view returns (uint256);\n', '}\n', '\n', '// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { ProtocolAdapter } from "../ProtocolAdapter.sol";\n', '\n', '\n', '/**\n', ' * @dev Tube contract interface.\n', ' * Only the functions required for MustStakingAdapter contract are added.\n', ' * The Tube contract is available here\n', ' * etherscan.io/address/0x048Dda990f581e80EFfc72E4e1996AE548f8d64C#code\n', ' * \n', ' */\n', 'interface StakingRewards {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function earned(address account) external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Adapter for Tube protocol.\n', ' * @dev Implementation of ProtocolAdapter interface.\n', ' */\n', 'contract MustStakingAdapter is ProtocolAdapter {\n', '\n', '    string public constant override adapterType = "Asset";\n', '\n', '    string public constant override tokenType = "ERC20";\n', '\n', '    address internal constant MUST = 0x9C78EE466D6Cb57A4d01Fd887D2b5dFb2D46288f;\n', '    address internal constant UNI_V2_WETH_POOL = 0x15861b072abAd08b24460Add30b09E1481290F94;\n', '    address internal constant STAKING_REWARD = 0x048Dda990f581e80EFfc72E4e1996AE548f8d64C;\n', '\n', '    /**\n', '     * @return Amount of TUBE for a given account.\n', '     * @dev Implementation of ProtocolAdapter interface function.\n', '     */\n', '    function getBalance(address token, address account) external view override returns (uint256) {\n', 'if (token == MUST) {\n', 'return StakingRewards(STAKING_REWARD).earned(account);\n', '} else if (token == UNI_V2_WETH_POOL) {\n', 'return StakingRewards(STAKING_REWARD).balanceOf(account);\n', '} else {\n', 'return 0;\n', '}\n', '}\n', '}']