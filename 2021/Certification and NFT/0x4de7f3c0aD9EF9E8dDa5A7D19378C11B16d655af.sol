['// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', '// Audit-1: ok\n', 'interface IModule {\n', '  enum VotingStatus {\n', '    UNKNOWN,\n', '    OPEN,\n', '    CLOSED,\n', '    PASSED\n', '  }\n', '\n', '  function onCreateProposal (\n', '    bytes32 communityId,\n', '    uint256 totalMemberCount,\n', '    uint256 totalValueLocked,\n', '    address proposer,\n', '    uint256 proposerBalance,\n', '    uint256 startDate,\n', '    bytes calldata internalActions,\n', '    bytes calldata externalActions\n', '  ) external view;\n', '\n', '  function onProcessProposal (\n', '    bytes32 proposalId,\n', '    bytes32 communityId,\n', '    uint256 totalMemberCount,\n', '    uint256 totalVoteCount,\n', '    uint256 totalVotingShares,\n', '    uint256 totalVotingSignal,\n', '    uint256 totalValueLocked,\n', '    uint256 secondsPassed\n', '  ) external view returns (VotingStatus, uint256 secondsTillClose, uint256 quorumPercent);\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', "import '../IModule.sol';\n", '\n', '/// @notice Seven Day Voting - Simple Majority Voting.\n', '/// Used for protocol upgrades and funding proposals.\n', '/// * 7 day voting period.\n', '/// * Quorum >= 10%.\n', '/// * 0.1% of TVL needed to propose.\n', '/// * A proposal passes if the total signal (average preference) is over 50% (YES).\n', '// Audit-1: ok\n', 'contract SevenDayVoting is IModule {\n', '  /// @notice Called on proposal creation.\n', '  /// Checks if `proposerBalance` is at least TVL / 1000 (0.1%)\n', '  function onCreateProposal (\n', '    bytes32 /*communityId*/,\n', '    uint256 /*totalMemberCount*/,\n', '    uint256 totalValueLocked,\n', '    address /*proposer*/,\n', '    uint256 proposerBalance,\n', '    uint256 /*startDate*/,\n', '    bytes calldata /*internalActions*/,\n', '    bytes calldata /*externalActions*/\n', '  ) external pure override\n', '  {\n', '    uint256 minProposerBalance = totalValueLocked / 1000;\n', '    require(\n', '      proposerBalance >= minProposerBalance,\n', "      'Not enough balance'\n", '    );\n', '  }\n', '\n', '  /// @notice See requirements for this contract.\n', '  function onProcessProposal (\n', '    bytes32 /*proposalId*/,\n', '    bytes32 /*communityId*/,\n', '    uint256 /*totalMemberCount*/,\n', '    uint256 totalVoteCount,\n', '    uint256 totalVotingShares,\n', '    uint256 totalVotingSignal,\n', '    uint256 totalValueLocked,\n', '    uint256 secondsPassed\n', '  ) external pure override returns (VotingStatus, uint256, uint256) {\n', '    // 7 days\n', '    uint256 VOTING_DURATION = 604800;\n', '    uint256 secondsTillClose = secondsPassed > VOTING_DURATION ? 0 : VOTING_DURATION - secondsPassed;\n', '    uint256 minQuorum = totalValueLocked / 10;\n', '    // both variables are used for frontend purposes\n', '    // assuming `totalValueLocked` can not be over `totalVotingShares`\n', '    uint256 onePercent = totalValueLocked / 100;\n', '    uint256 q = onePercent == 0 ? 0 : totalVotingShares / onePercent;\n', '\n', '    // Proposal stays open if VOTING_DURATION has not yet passed.\n', '    if (secondsPassed < VOTING_DURATION) {\n', '      return (VotingStatus.OPEN, secondsTillClose, q);\n', '    }\n', '\n', '    // Proposal is closed if less than 10% of TVL voted on this proposal.\n', '    if (totalVotingShares < minQuorum || totalVoteCount == 0) {\n', '      return (VotingStatus.CLOSED, secondsTillClose, q);\n', '    }\n', '\n', '    // at this point we reached the `minQuorum` requirement.\n', '    // `totalVoteCount` can not be 0 here.\n', '    uint256 averageSignal = totalVotingSignal / totalVoteCount;\n', '    if (averageSignal > 50) {\n', '      return (VotingStatus.PASSED, secondsTillClose, q);\n', '    }\n', '\n', '    // defaults to closed if `averageSignal` is not reached\n', '    return (VotingStatus.CLOSED, secondsTillClose, q);\n', '  }\n', '}\n', '\n', '{\n', '  "evmVersion": "berlin",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "optimizer": {\n', '    "details": {\n', '      "constantOptimizer": true,\n', '      "cse": true,\n', '      "deduplicate": true,\n', '      "jumpdestRemover": true,\n', '      "orderLiterals": false,\n', '      "peephole": true,\n', '      "yul": false\n', '    },\n', '    "runs": 256\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']