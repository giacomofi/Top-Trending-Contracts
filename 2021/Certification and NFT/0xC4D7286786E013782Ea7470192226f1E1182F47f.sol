['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.6;\n', '\n', 'contract ChizDispenserV2 {\n', '    struct Claim {\n', '        bool claimed;\n', '        uint256 ratId;\n', '    }\n', '\n', '    mapping(uint256 => Claim) existingClaims;\n', '\n', '    ChizDispenser chizDispenser = ChizDispenser(0x5e7fDe13483e5b51da88D2898e0f6a6d7B0c6899);\n', '    ERC721 ratContract = ERC721(0xd21a23606D2746f086f6528Cd6873bAD3307b903);\n', '    ERC20 chizContract = ERC20(0x5c761c1a21637362374204000e383204d347064C);\n', '\n', '    bool paused = false;\n', '    address deployer;\n', '    uint256 amount = 10000 * 1 ether;\n', '\n', '    event Dispense(uint256 amount, uint256 ratId);\n', '\n', '    constructor() {\n', '        deployer = msg.sender;\n', '    }\n', '\n', '    modifier onlyDeployer() {\n', '        require(msg.sender == deployer);\n', '        _;\n', '    }\n', '\n', '    modifier pauseable() {\n', "        require(paused == false, 'contract is paused');\n", '        _;\n', '    }\n', '\n', '    modifier isNotClaimed(uint256 ratId) {\n', '        bool claimed = isClaimed(ratId);\n', "        require(claimed == false, 'tokens for this rat have already been claimed');\n", '        _;\n', '    }\n', '\n', '    function isClaimed(uint256 ratId) public view returns (bool) {\n', '        Claim memory claim = existingClaims[ratId];\n', '        if (claim.claimed) return true;\n', '        (bool claimed, ) = chizDispenser.existingClaims(ratId);\n', '        if (claimed) return true;\n', '        return false;\n', '    }\n', '\n', '    function pause() public onlyDeployer {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyDeployer {\n', '        paused = false;\n', '    }\n', '\n', '    function setAmount(uint256 newAmount) public onlyDeployer pauseable {\n', '        amount = newAmount;\n', '    }\n', '\n', '    function withdraw(uint256 withdrawAmount) public onlyDeployer pauseable {\n', '        chizContract.transfer(msg.sender, withdrawAmount);\n', '    }\n', '\n', '    function claimChiz(uint256 ratId) public pauseable isNotClaimed(ratId) {\n', '        address ratOwner = ratContract.ownerOf(ratId);\n', "        require(msg.sender == ratOwner, 'caller is not owner of this rat');\n", '\n', '        existingClaims[ratId] = Claim(true, ratId);\n', '        chizContract.transfer(msg.sender, amount);\n', '\n', '        emit Dispense(amount, ratId);\n', '    }\n', '\n', '    function multiClaimChiz(uint256[] memory ratIds) public pauseable {\n', '        for (uint256 i = 0; i < ratIds.length; i++) {\n', '            bool claimed = isClaimed(ratIds[i]);\n', '            if (!claimed) claimChiz(ratIds[i]);\n', '        }\n', '    }\n', '\n', '    function megaClaimChiz() public pauseable {\n', '        uint256 ratBalance = ratContract.balanceOf(msg.sender);\n', '        for (uint256 i = 0; i < ratBalance; i++) {\n', '            uint256 tokenId = ratContract.tokenOfOwnerByIndex(msg.sender, i);\n', '            bool claimed = isClaimed(tokenId);\n', '            if (!claimed) claimChiz(tokenId);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract ChizDispenser {\n', '    struct Claim {\n', '        bool claimed;\n', '        uint256 ratId;\n', '    }\n', '    mapping(uint256 => Claim) public existingClaims;\n', '\n', '    function claimChiz(uint256 ratId) public virtual;\n', '}\n', '\n', 'abstract contract ERC721 {\n', '    function ownerOf(uint256 id) public virtual returns (address owner);\n', '\n', '    function balanceOf(address owner) public virtual returns (uint256 balance);\n', '\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public virtual returns (uint256 id);\n', '}\n', '\n', 'abstract contract ERC20 {\n', '    function transfer(address to, uint256 value) public virtual;\n', '}']