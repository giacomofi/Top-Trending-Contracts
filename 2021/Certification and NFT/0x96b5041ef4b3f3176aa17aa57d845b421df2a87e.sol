['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./interfaces/IChainLinkOracle.sol";\n', 'import "./interfaces/IKeeperOracle.sol";\n', 'import "./ERC20/IERC20.sol";\n', 'import "./utils/Ownable.sol";\n', 'import "./interfaces/IOracle.sol";\n', '\n', 'contract Oracle is IOracle, Ownable {\n', '    mapping(address => address) public chainlinkPriceUSD;\n', '    mapping(address => address) public chainlinkPriceETH;\n', '\n', '    address constant public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    IKeeperOracle public uniswapKeeperOracle = IKeeperOracle(0x73353801921417F465377c8d898c6f4C0270282C);\n', '    IKeeperOracle public sushiswapKeeperOracle = IKeeperOracle(0xf67Ab1c914deE06Ba0F264031885Ea7B276a7cDa);\n', '\n', '    constructor () {\n', '        chainlinkPriceUSD[weth] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // WETH\n', '        chainlinkPriceUSD[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // wBTC\n', '        chainlinkPriceUSD[0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // renBTC\n', '        chainlinkPriceUSD[0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713] = 0x0ad50393F11FfAc4dd0fe5F1056448ecb75226Cf; // COVER\n', '        chainlinkPriceUSD[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9; // DAI\n', '        chainlinkPriceUSD[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6; // USDC\n', '        chainlinkPriceUSD[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D; // USDT\n', '\n', '        chainlinkPriceETH[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e] = 0x7c5d4F8345e66f68099581Db340cd65B078C41f4; // YFI\n', '        chainlinkPriceETH[0x6B3595068778DD592e39A122f4f5a5cF09C90fE2] = 0xe572CeF69f43c2E488b33924AF04BDacE19079cf; // SUSHI\n', '        chainlinkPriceETH[0x4E15361FD6b4BB609Fa63C81A2be19d873717870] = 0x2DE7E4a9488488e0058B95854CC2f7955B35dC9b; // FTM\n', '        chainlinkPriceETH[0x2ba592F78dB6436527729929AAf6c908497cB200] = 0x82597CFE6af8baad7c0d441AA82cbC3b51759607; // CREAM\n', '        chainlinkPriceETH[0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713] = 0x7B6230EF79D5E97C11049ab362c0b685faCBA0C2; // COVER\n', '        initializeOwner();\n', '    }\n', '\n', '    /// @notice Returns price in USD multiplied by 1e8, chainlink.latestAnswer returns 1e8 for USD answers, 1e18 for ETH answers, IKeeperOracle.current returns 1e18\n', '    function getPriceUSD(address _asset) external override view returns (uint256 price) {\n', '        // If token has ChainLink USD oracle\n', '        if (chainlinkPriceUSD[_asset] != address(0)) {\n', '            price = IChainLinkOracle(chainlinkPriceUSD[_asset]).latestAnswer();\n', '        } else { // Fetch token price in ETH\n', '            uint256 wethPrice = IChainLinkOracle(chainlinkPriceUSD[weth]).latestAnswer(); // returned in 1e8\n', '            // If token has ChainLink ETH oracle\n', '            if (chainlinkPriceETH[_asset] != address(0)) {\n', '                uint256 _priceInETH = IChainLinkOracle(chainlinkPriceETH[_asset]).latestAnswer(); // returned in 1e18\n', '                // Cancel out 1e18 multiplier from ETH ChainLink answer\n', '                price = _priceInETH * wethPrice / 1e18;\n', '            } else { // Rely on UniQuote\n', '                uint256 decimals = IERC20(_asset).decimals();\n', '                // If token has SushiSwap Keeper oracle\n', '                address sushiPair = sushiswapKeeperOracle.pairFor(_asset, weth);\n', '                if (sushiswapKeeperOracle.observationLength(sushiPair) > 0) {\n', '                    uint256 _priceInETH = sushiswapKeeperOracle.current(_asset, 10 ** decimals, weth); // returned in 1e18\n', '                    // Cancel out 1e18 multiplier from Keeper oracle\n', '                    price = _priceInETH * wethPrice / 1e18;\n', '                } else { \n', '                    // If token has Uniswap Keeper oracle\n', '                    // Fetch Uniswap pair here to avoid extra call above\n', '                    address uniPair = uniswapKeeperOracle.pairFor(_asset, weth);\n', '                    if (uniswapKeeperOracle.observationLength(uniPair) > 0) {\n', '                        uint256 _priceInETH = uniswapKeeperOracle.current(_asset, 10 ** decimals, weth); // returned in 1e18\n', '                        // Cancel out 1e18 multiplier from Keeper oracle\n', '                        price = _priceInETH * wethPrice / 1e18;\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function updateFeedETH(address _asset, address _feed) external override onlyOwner {\n', '        chainlinkPriceETH[_asset] = _feed; // 0x0 to remove feed\n', '    }\n', '    \n', '    function updateFeedUSD(address _asset, address _feed) external override onlyOwner {\n', '        chainlinkPriceUSD[_asset] = _feed; // 0x0 to remove feed\n', '    }\n', '\n', '    function setSushiKeeperOracle(address _sushiOracle) external override onlyOwner {\n', '        require(_sushiOracle != address(0), "Oracle: IKeeperOracle is 0");\n', '        sushiswapKeeperOracle = IKeeperOracle(_sushiOracle);\n', '    }\n', '\n', '    function setUniKeeperOracle(address _uniOracle) external override onlyOwner {\n', '        require(_uniOracle != address(0), "Oracle: IKeeperOracle is 0");\n', '        uniswapKeeperOracle = IKeeperOracle(_uniOracle);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IChainLinkOracle {\n', '    function latestAnswer() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IKeeperOracle {\n', '    function current(address, uint, address) external view returns (uint256);\n', '    function pairFor(address, address) external view returns (address);\n', '    function observationLength(address) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' * @author crypto-pumpkin\n', ' *\n', ' * By initialization, the owner account will be the one that called initializeOwner. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Ruler: Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initializeOwner() internal initializer {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IOracle {\n', '    function getPriceUSD(address _asset) external view returns (uint256 price);\n', '    \n', '    // admin functions\n', '    function updateFeedETH(address _asset, address _feed) external;\n', '    function updateFeedUSD(address _asset, address _feed) external;\n', '    function setSushiKeeperOracle(address _sushiOracle) external;\n', '    function setUniKeeperOracle(address _uniOracle) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}']