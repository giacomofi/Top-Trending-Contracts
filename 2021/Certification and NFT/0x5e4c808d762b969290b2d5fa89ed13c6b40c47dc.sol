['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', '/*******************************************************\n', ' *                       Interfaces                    *\n', ' *******************************************************/\n', 'interface IV2Vault {\n', '    function token() external view returns (address);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '}\n', '\n', 'interface IOracle {\n', '    function getNormalizedValueUsdc(address tokenAddress, uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getPriceUsdcRecommended(address tokenAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IHelper {\n', '    function assetStrategiesDelegatedBalance(address)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IAddressesGenerator {\n', '    function assetsAddresses() external view returns (address[] memory);\n', '\n', '    function assetsLength() external view returns (uint256);\n', '}\n', '\n', '/*******************************************************\n', ' *                     Adapter Logic                   *\n', ' *******************************************************/\n', 'contract TvlAdapter_VAULT_V2 {\n', '    /*******************************************************\n', '     *           Common code shared by all adapters        *\n', '     *******************************************************/\n', '\n', '    IOracle public oracle; // The oracle is used to fetch USDC normalized pricing data\n', '    IHelper public helper; // A helper utility is used for batch allowance fetching and address array merging\n', '    IAddressesGenerator public addressesGenerator; // A utility for fetching assets addresses and length\n', '\n', '    /**\n', '     * TVL breakdown for an asset\n', '     */\n', '    struct AssetTvl {\n', '        address assetId; // Asset address\n', '        address tokenId; // Token address\n', '        uint256 tokenPriceUsdc; // Token price in USDC\n', '        TokenAmount underlyingTokenBalance; // Amount of underlying token in asset\n', '        TokenAmount delegatedBalance; // Amount of underlying token balance that is delegated\n', '        TokenAmount adjustedBalance; // TVL = underlyingTokenBalance - delegatedBalance\n', '    }\n', '\n', '    /**\n', '     * Token amount representation\n', '     */\n', '    struct TokenAmount {\n', '        uint256 amount; // Amount in underlying token decimals\n', '        uint256 amountUsdc; // Amount in USDC (6 decimals)\n', '    }\n', '\n', '    /**\n', '     * Information about the adapter\n', '     */\n', '    struct AdapterInfo {\n', '        address id; // Adapter address\n', '        string typeId; // Adapter typeId (for example "VAULT_V2" or "IRON_BANK_MARKET")\n', '        string categoryId; // Adapter categoryId (for example "VAULT")\n', '    }\n', '\n', '    /**\n', '     * Configure adapter\n', '     */\n', '    constructor(\n', '        address _oracleAddress,\n', '        address _helperAddress,\n', '        address _addressesGeneratorAddress\n', '    ) {\n', '        require(_oracleAddress != address(0), "Missing oracle address");\n', '        require(_helperAddress != address(0), "Missing helper address");\n', '        require(\n', '            _addressesGeneratorAddress != address(0),\n', '            "Missing addresses generator address"\n', '        );\n', '        oracle = IOracle(_oracleAddress);\n', '        helper = IHelper(_helperAddress);\n', '        addressesGenerator = IAddressesGenerator(_addressesGeneratorAddress);\n', '    }\n', '\n', '    function adapterInfo() public view returns (AdapterInfo memory) {\n', '        return\n', '            AdapterInfo({\n', '                id: address(this),\n', '                typeId: "VAULT_V2",\n', '                categoryId: "VAULT"\n', '            });\n', '    }\n', '\n', '    /**\n', '     * Fetch the underlying token address of an asset\n', '     */\n', '    function underlyingTokenAddress(address assetAddress)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        IV2Vault vault = IV2Vault(assetAddress);\n', '        address tokenAddress = vault.token();\n', '        return tokenAddress;\n', '    }\n', '\n', '    /**\n', '     * Fetch the total number of assets for this adapter\n', '     */\n', '    function assetsLength() public view returns (uint256) {\n', '        return addressesGenerator.assetsLength();\n', '    }\n', '\n', '    /**\n', '     * Fetch all asset addresses for this adapter\n', '     */\n', '    function assetsAddresses() public view returns (address[] memory) {\n', '        return addressesGenerator.assetsAddresses();\n', '    }\n', '\n', '    /**\n', '     * Internal method for constructing a TokenAmount struct given a token balance and address\n', '     */\n', '    function tokenAmount(uint256 amount, address tokenAddress)\n', '        internal\n', '        view\n', '        returns (TokenAmount memory)\n', '    {\n', '        return\n', '            TokenAmount({\n', '                amount: amount,\n', '                amountUsdc: oracle.getNormalizedValueUsdc(tokenAddress, amount)\n', '            });\n', '    }\n', '\n', '    /**\n', '     * Fetch asset balance in underlying tokens\n', '     */\n', '    function assetBalance(address assetAddress) public view returns (uint256) {\n', '        IV2Vault vault = IV2Vault(assetAddress);\n', '        return vault.totalAssets();\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL of an asset in USDC\n', '     */\n', '    function assetTvlUsdc(address assetAddress) public view returns (uint256) {\n', '        address tokenAddress = underlyingTokenAddress(assetAddress);\n', '        uint256 underlyingBalanceAmount = assetBalance(assetAddress);\n', '        uint256 delegatedBalanceAmount =\n', '            helper.assetStrategiesDelegatedBalance(assetAddress);\n', '        uint256 adjustedBalanceAmount =\n', '            underlyingBalanceAmount - delegatedBalanceAmount;\n', '        uint256 adjustedBalanceUsdc =\n', '            oracle.getNormalizedValueUsdc(tokenAddress, adjustedBalanceAmount);\n', '        return adjustedBalanceUsdc;\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL breakdown of an asset\n', '     */\n', '    function assetTvl(address assetAddress)\n', '        public\n', '        view\n', '        returns (AssetTvl memory)\n', '    {\n', '        address tokenAddress = underlyingTokenAddress(assetAddress);\n', '        uint256 underlyingBalanceAmount = assetBalance(assetAddress);\n', '        uint256 delegatedBalanceAmount =\n', '            helper.assetStrategiesDelegatedBalance(assetAddress);\n', '        uint256 adjustedBalance =\n', '            underlyingBalanceAmount - delegatedBalanceAmount;\n', '        return\n', '            AssetTvl({\n', '                assetId: assetAddress,\n', '                tokenId: tokenAddress,\n', '                tokenPriceUsdc: oracle.getPriceUsdcRecommended(tokenAddress),\n', '                underlyingTokenBalance: tokenAmount(\n', '                    underlyingBalanceAmount,\n', '                    tokenAddress\n', '                ),\n', '                delegatedBalance: tokenAmount(\n', '                    delegatedBalanceAmount,\n', '                    tokenAddress\n', '                ),\n', '                adjustedBalance: tokenAmount(adjustedBalance, tokenAddress)\n', '            });\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL for adapter\n', '     */\n', '    function assetsTvlUsdc() external view returns (uint256) {\n', '        uint256 tvl;\n', '        address[] memory assetAddresses = assetsAddresses();\n', '        uint256 numberOfAssets = assetAddresses.length;\n', '        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\n', '            address assetAddress = assetAddresses[assetIdx];\n', '            uint256 _assetTvl = assetTvlUsdc(assetAddress);\n', '            tvl += _assetTvl;\n', '        }\n', '        return tvl;\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL for adapter\n', '     */\n', '    function assetsTvl() external view returns (AssetTvl[] memory) {\n', '        address[] memory _assetsAddresses = assetsAddresses();\n', '        uint256 numberOfAssets = _assetsAddresses.length;\n', '\n', '        AssetTvl[] memory tvlData = new AssetTvl[](numberOfAssets);\n', '        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\n', '            address assetAddress = _assetsAddresses[assetIdx];\n', '            AssetTvl memory tvl = assetTvl(assetAddress);\n', '            tvlData[assetIdx] = tvl;\n', '        }\n', '        return tvlData;\n', '    }\n', '}']