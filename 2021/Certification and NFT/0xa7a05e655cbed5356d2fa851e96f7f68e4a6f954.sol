['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-09\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.8 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard, basic interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' * Note: The ERC-165 identifier for this interface is 0x80ac58cd.\n', ' */\n', 'interface IERC721 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n', '\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n', '\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /**\n', '     * Gets the balance of the specified address\n', '     * @param owner address to query the balance of\n', '     * @return balance uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * Gets the owner of the specified ID\n', '     * @param tokenId uint256 ID to query the owner of\n', '     * @return owner address currently marked as the owner of the given ID\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * Approves another address to transfer the given token ID\n', '     * @dev The zero address indicates there is no approved address.\n', '     * @dev There can only be one approved address per token at a given time.\n', '     * @dev Can only be called by the token owner or an approved operator.\n', '     * @param to address to be approved for the given token ID\n', '     * @param tokenId uint256 ID of the token to be approved\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * Gets the approved address for a token ID, or zero if no address set\n', '     * @dev Reverts if the token ID does not exist.\n', '     * @param tokenId uint256 ID of the token to query the approval of\n', '     * @return operator address currently approved for the given token ID\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * Sets or unsets the approval of a given operator\n', '     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '     * @param operator operator address to set the approval\n', '     * @param approved representing the status of the approval to be set\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', '     * Tells whether an operator is approved by a given owner\n', '     * @param owner owner address which you want to query the approval of\n', '     * @param operator operator address which you want to query the approval of\n', '     * @return bool whether the given operator is approved by the given owner\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * Transfers the ownership of a given token ID to another address\n', '     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * Safely transfers the ownership of a given token ID to another address\n', '     *\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     *\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * Safely transfers the ownership of a given token ID to another address\n', '     *\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     *\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param data bytes data to send along with a safe transfer check\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' * Note: The ERC-165 identifier for this interface is 0x5b5e139f.\n', ' */\n', 'interface IERC721Metadata {\n', '    /**\n', '     * @dev Gets the token name\n', '     * @return string representing the token name\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Gets the token symbol\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns an URI for a given token ID\n', '     * Throws if the token ID does not exist. May return an empty string.\n', '     * @param tokenId uint256 ID of the token to query\n', '     * @return string URI of given token ID\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard, optional unsafe batchTransfer interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' * Note: The ERC-165 identifier for this interface is.\n', ' */\n', 'interface IERC721BatchTransfer {\n', '    /**\n', '     * Unsafely transfers a batch of tokens.\n', '     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if one of `tokenIds` is not owned by `from`.\n', '     * @dev Resets the token approval for each of `tokenIds`.\n', '     * @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n', '     * @param from Current tokens owner.\n', '     * @param to Address of the new token owner.\n', '     * @param tokenIds Identifiers of the tokens to transfer.\n', '     */\n', '    function batchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] calldata tokenIds\n', '    ) external;\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', '    @title ERC721 Non-Fungible Token Standard, token receiver\n', '    @dev See https://eips.ethereum.org/EIPS/eip-721\n', '    Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\n', '    Note: The ERC-165 identifier for this interface is 0x150b7a02.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '        @notice Handle the receipt of an NFT\n', '        @dev The ERC721 smart contract calls this function on the recipient\n', '        after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n', '        otherwise the caller will revert the transaction. The selector to be\n', '        returned can be obtained as `this.onERC721Received.selector`. This\n', '        function MAY throw to revert and reject the transfer.\n', '        Note: the ERC721 contract address is always the message sender.\n', '        @param operator The address which called `safeTransferFrom` function\n', '        @param from The address which previously owned the token\n', '        @param tokenId The NFT identifier which is being transferred\n', '        @param data Additional data with no specified format\n', '        @return bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(\n', '        address operator,\n', '        address from,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Multi Token Standard, basic interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Note: The ERC-165 identifier for this interface is 0xd9b67a26.\n', ' */\n', 'interface IERC1155 {\n', '    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n', '\n', '    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n', '\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    event URI(string _value, uint256 indexed _id);\n', '\n', '    /**\n', '     * Safely transfers some token.\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if `from` has an insufficient balance.\n', '     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\n', '     * @dev Emits a `TransferSingle` event.\n', '     * @param from Current token owner.\n', '     * @param to Address of the new token owner.\n', '     * @param id Identifier of the token to transfer.\n', '     * @param value Amount of token to transfer.\n', '     * @param data Optional data to send along to a receiver contract.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    /**\n', '     * Safely transfers a batch of tokens.\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if `ids` and `values` have different lengths.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if `from` has an insufficient balance for any of `ids`.\n', '     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n', '     * @dev Emits a `TransferBatch` event.\n', '     * @param from Current token owner.\n', '     * @param to Address of the new token owner.\n', '     * @param ids Identifiers of the tokens to transfer.\n', '     * @param values Amounts of tokens to transfer.\n', '     * @param data Optional data to send along to a receiver contract.\n', '     */\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    /**\n', '     * Retrieves the balance of `id` owned by account `owner`.\n', '     * @param owner The account to retrieve the balance of.\n', '     * @param id The identifier to retrieve the balance of.\n', '     * @return The balance of `id` owned by account `owner`.\n', '     */\n', '    function balanceOf(address owner, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * Retrieves the balances of `ids` owned by accounts `owners`. For each pair:\n', '     * @dev Reverts if `owners` and `ids` have different lengths.\n', '     * @param owners The addresses of the token holders\n', '     * @param ids The identifiers to retrieve the balance of.\n', '     * @return The balances of `ids` owned by accounts `owners`.\n', '     */\n', '    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * Enables or disables an operator's approval.\n", '     * @dev Emits an `ApprovalForAll` event.\n', '     * @param operator Address of the operator.\n', '     * @param approved True to approve the operator, false to revoke an approval.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', '     * Retrieves the approval status of an operator for a given owner.\n', '     * @param owner Address of the authorisation giver.\n', '     * @param operator Address of the operator.\n', '     * @return True if the operator is approved, false if not.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Multi Token Standard, optional metadata URI extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Note: The ERC-165 identifier for this interface is 0x0e89341c.\n', ' */\n', 'interface IERC1155MetadataURI {\n', '    /**\n', '     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n', '     * @dev URIs are defined in RFC 3986.\n', '     * @dev The URI MUST point to a JSON file that conforms to the "ERC-1155 Metadata URI JSON Schema".\n', '     * @dev The uri function SHOULD be used to retrieve values if no event was emitted.\n', '     * @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\n', '     * @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\n', '     *  an implementation to return a valid string even if the token does not exist.\n', '     * @return URI string\n', '     */\n', '    function uri(uint256 id) external view returns (string memory);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Multi Token Standard, optional Inventory extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\n', ' * Interface for fungible/non-fungible tokens management on a 1155-compliant contract.\n', ' *\n', ' * This interface rationalizes the co-existence of fungible and non-fungible tokens\n', ' * within the same contract. As several kinds of fungible tokens can be managed under\n', ' * the Multi-Token standard, we consider that non-fungible tokens can be classified\n', ' * under their own specific type. We introduce the concept of non-fungible collection\n', ' * and consider the usage of 3 types of identifiers:\n', ' * (a) Fungible Token identifiers, each representing a set of Fungible Tokens,\n', ' * (b) Non-Fungible Collection identifiers, each representing a set of Non-Fungible Tokens (this is not a token),\n', ' * (c) Non-Fungible Token identifiers. \n', '\n', ' * Identifiers nature\n', ' * |       Type                | isFungible  | isCollection | isToken |\n', ' * |  Fungible Token           |   true      |     true     |  true   |\n', ' * |  Non-Fungible Collection  |   false     |     true     |  false  |\n', ' * |  Non-Fungible Token       |   false     |     false    |  true   |\n', ' *\n', ' * Identifiers compatibilities\n', ' * |       Type                |  transfer  |   balance    |   supply    |  owner  |\n', ' * |  Fungible Token           |    OK      |     OK       |     OK      |   NOK   |\n', ' * |  Non-Fungible Collection  |    NOK     |     OK       |     OK      |   NOK   |\n', ' * |  Non-Fungible Token       |    OK      |   0 or 1     |   0 or 1    |   OK    |\n', ' *\n', ' * Note: The ERC-165 identifier for this interface is 0x469bd23f.\n', ' */\n', 'interface IERC1155Inventory {\n', '    /**\n', '     * Optional event emitted when a collection (Fungible Token or Non-Fungible Collection) is created.\n', '     *  This event can be used by a client application to determine which identifiers are meaningful\n', '     *  to track through the functions `balanceOf`, `balanceOfBatch` and `totalSupply`.\n', '     * @dev This event MUST NOT be emitted twice for the same `collectionId`.\n', '     */\n', '    event CollectionCreated(uint256 indexed collectionId, bool indexed fungible);\n', '\n', '    /**\n', '     * Retrieves the owner of a non-fungible token (ERC721-compatible).\n', '     * @dev Reverts if `nftId` is owned by the zero address.\n', '     * @param nftId Identifier of the token to query.\n', '     * @return Address of the current owner of the token.\n', '     */\n', '    function ownerOf(uint256 nftId) external view returns (address);\n', '\n', '    /**\n', '     * Introspects whether or not `id` represents a fungible token.\n', '     *  This function MUST return true even for a fungible token which is not-yet created.\n', '     * @param id The identifier to query.\n', '     * @return bool True if `id` represents afungible token, false otherwise.\n', '     */\n', '    function isFungible(uint256 id) external pure returns (bool);\n', '\n', '    /**\n', '     * Introspects the non-fungible collection to which `nftId` belongs.\n', '     * @dev This function MUST return a value representing a non-fungible collection.\n', '     * @dev This function MUST return a value for a non-existing token, and SHOULD NOT be used to check the existence of a non-fungible token.\n', '     * @dev Reverts if `nftId` does not represent a non-fungible token.\n', '     * @param nftId The token identifier to query the collection of.\n', '     * @return The non-fungible collection identifier to which `nftId` belongs.\n', '     */\n', '    function collectionOf(uint256 nftId) external pure returns (uint256);\n', '\n', '    /**\n', '     * Retrieves the total supply of `id`.\n', '     * @param id The identifier for which to retrieve the supply of.\n', '     * @return\n', '     *  If `id` represents a collection (fungible token or non-fungible collection), the total supply for this collection.\n', '     *  If `id` represents a non-fungible token, 1 if the token exists, else 0.\n', '     */\n', '    function totalSupply(uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice this documentation overrides {IERC1155-balanceOf(address,uint256)}.\n', '     * Retrieves the balance of `id` owned by account `owner`.\n', '     * @param owner The account to retrieve the balance of.\n', '     * @param id The identifier to retrieve the balance of.\n', '     * @return\n', '     *  If `id` represents a collection (fungible token or non-fungible collection), the balance for this collection.\n', '     *  If `id` represents a non-fungible token, 1 if the token is owned by `owner`, else 0.\n', '     */\n', '    // function balanceOf(address owner, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice this documentation overrides {IERC1155-balanceOfBatch(address[],uint256[])}.\n', '     * Retrieves the balances of `ids` owned by accounts `owners`.\n', '     * @dev Reverts if `owners` and `ids` have different lengths.\n', '     * @param owners The accounts to retrieve the balances of.\n', '     * @param ids The identifiers to retrieve the balances of.\n', '     * @return An array of elements such as for each pair `id`/`owner`:\n', '     *  If `id` represents a collection (fungible token or non-fungible collection), the balance for this collection.\n', '     *  If `id` represents a non-fungible token, 1 if the token is owned by `owner`, else 0.\n', '     */\n', '    // function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', '     * @notice this documentation overrides its {IERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n', '     * Safely transfers some token.\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if `id` does not represent a token.\n', '     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n', '     * @dev Reverts if `id` represents a non-fungible token and is not owned by `from`.\n', '     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n', '     * @dev Reverts if `id` represents a fungible token and `from` has an insufficient balance.\n', '     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\n', '     * @dev Emits an {IERC1155-TransferSingle} event.\n', '     * @param from Current token owner.\n', '     * @param to Address of the new token owner.\n', '     * @param id Identifier of the token to transfer.\n', '     * @param value Amount of token to transfer.\n', '     * @param data Optional data to pass to the receiver contract.\n', '     */\n', '    // function safeTransferFrom(\n', '    //     address from,\n', '    //     address to,\n', '    //     uint256 id,\n', '    //     uint256 value,\n', '    //     bytes calldata data\n', '    // ) external;\n', '\n', '    /**\n', '     * @notice this documentation overrides its {IERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n', '     * Safely transfers a batch of tokens.\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if one of `ids` does not represent a token.\n', '     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\n', '     * @dev Reverts if one of `ids` represents a non-fungible token and is not owned by `from`.\n', '     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\n', '     * @dev Reverts if one of `ids` represents a fungible token and `from` has an insufficient balance.\n', '     * @dev Reverts if one of `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n', '     * @dev Emits an {IERC1155-TransferBatch} event.\n', '     * @param from Current tokens owner.\n', '     * @param to Address of the new tokens owner.\n', '     * @param ids Identifiers of the tokens to transfer.\n', '     * @param values Amounts of tokens to transfer.\n', '     * @param data Optional data to pass to the receiver contract.\n', '     */\n', '    // function safeBatchTransferFrom(\n', '    //     address from,\n', '    //     address to,\n', '    //     uint256[] calldata ids,\n', '    //     uint256[] calldata values,\n', '    //     bytes calldata data\n', '    // ) external;\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Multi Token Standard, token receiver\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n', ' * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n', ' */\n', 'interface IERC1155TokenReceiver {\n', '    /**\n', '     * @notice Handle the receipt of a single ERC1155 token type.\n', '     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n', '     * This function MUST return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '     *  (i.e. 0xf23a6e61) to accept the transfer.\n', '     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n', '     * @param operator  The address which initiated the transfer (i.e. msg.sender)\n', '     * @param from      The address which previously owned the token\n', '     * @param id        The ID of the token being transferred\n', '     * @param value     The amount of tokens being transferred\n', '     * @param data      Additional data with no specified format\n', '     * @return bytes4   `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '     */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '\n', '    /**\n', '     * @notice Handle the receipt of multiple ERC1155 token types.\n', '     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n', '     * This function MUST return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '     *  (i.e. 0xbc197c81) if to accept the transfer(s).\n', '     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n', '     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\n', '     * @param from      The address which previously owned the token\n', '     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\n', '     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\n', '     * @param data      Additional data with no specified format\n', '     * @return          `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '     */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC1155InventoryIdentifiersLib, a library to introspect inventory identifiers.\n', ' * @dev With N=32, representing the Non-Fungible Collection mask length, identifiers are represented as follow:\n', ' * (a) a Fungible Token:\n', ' *     - most significant bit == 0\n', ' * (b) a Non-Fungible Collection:\n', ' *     - most significant bit == 1\n', ' *     - (256-N) least significant bits == 0\n', ' * (c) a Non-Fungible Token:\n', ' *     - most significant bit == 1\n', ' *     - (256-N) least significant bits != 0\n', ' */\n', 'library ERC1155InventoryIdentifiersLib {\n', '    // Non-fungible bit. If an id has this bit set, it is a non-fungible (either collection or token)\n', '    uint256 internal constant _NF_BIT = 1 << 255;\n', '\n', '    // Mask for non-fungible collection (including the nf bit)\n', '    uint256 internal constant _NF_COLLECTION_MASK = uint256(type(uint32).max) << 224;\n', '    uint256 internal constant _NF_TOKEN_MASK = ~_NF_COLLECTION_MASK;\n', '\n', '    function isFungibleToken(uint256 id) internal pure returns (bool) {\n', '        return id & _NF_BIT == 0;\n', '    }\n', '\n', '    function isNonFungibleToken(uint256 id) internal pure returns (bool) {\n', '        return id & _NF_BIT != 0 && id & _NF_TOKEN_MASK != 0;\n', '    }\n', '\n', '    function getNonFungibleCollection(uint256 nftId) internal pure returns (uint256) {\n', '        return nftId & _NF_COLLECTION_MASK;\n', '    }\n', '}\n', '\n', 'abstract contract ERC1155InventoryBase is IERC1155, IERC1155MetadataURI, IERC1155Inventory, IERC165, Context {\n', '    using ERC1155InventoryIdentifiersLib for uint256;\n', '\n', '    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\n', '    bytes4 private constant _ERC1155_INTERFACE_ID = type(IERC1155).interfaceId;\n', '    bytes4 private constant _ERC1155_METADATA_URI_INTERFACE_ID = type(IERC1155MetadataURI).interfaceId;\n', '    bytes4 private constant _ERC1155_INVENTORY_INTERFACE_ID = type(IERC1155Inventory).interfaceId;\n', '\n', '    // bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))\n', '    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\n', '\n', '    // bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))\n', '    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\n', '\n', "    // Burnt non-fungible token owner's magic value\n", '    uint256 internal constant _BURNT_NFT_OWNER = 0xdead000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    /* owner => operator => approved */\n', '    mapping(address => mapping(address => bool)) internal _operators;\n', '\n', '    /* collection ID => owner => balance */\n', '    mapping(uint256 => mapping(address => uint256)) internal _balances;\n', '\n', '    /* collection ID => supply */\n', '    mapping(uint256 => uint256) internal _supplies;\n', '\n', '    /* NFT ID => owner */\n', '    mapping(uint256 => uint256) internal _owners;\n', '\n', '    /* collection ID => creator */\n', '    mapping(uint256 => address) internal _creators;\n', '\n', '    /// @dev See {IERC165-supportsInterface}.\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return\n', '            interfaceId == _ERC165_INTERFACE_ID ||\n', '            interfaceId == _ERC1155_INTERFACE_ID ||\n', '            interfaceId == _ERC1155_METADATA_URI_INTERFACE_ID ||\n', '            interfaceId == _ERC1155_INVENTORY_INTERFACE_ID;\n', '    }\n', '\n', '    //================================== ERC1155 =======================================/\n', '\n', '    /// @dev See {IERC1155-balanceOf(address,uint256)}.\n', '    function balanceOf(address owner, uint256 id) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "Inventory: zero address");\n', '\n', '        if (id.isNonFungibleToken()) {\n', '            return address(_owners[id]) == owner ? 1 : 0;\n', '        }\n', '\n', '        return _balances[id][owner];\n', '    }\n', '\n', '    /// @dev See {IERC1155-balanceOfBatch(address[],uint256[])}.\n', '    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory) {\n', '        require(owners.length == ids.length, "Inventory: inconsistent arrays");\n', '\n', '        uint256[] memory balances = new uint256[](owners.length);\n', '\n', '        for (uint256 i = 0; i != owners.length; ++i) {\n', '            balances[i] = balanceOf(owners[i], ids[i]);\n', '        }\n', '\n', '        return balances;\n', '    }\n', '\n', '    /// @dev See {IERC1155-setApprovalForAll(address,bool)}.\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        address sender = _msgSender();\n', '        require(operator != sender, "Inventory: self-approval");\n', '        _operators[sender][operator] = approved;\n', '        emit ApprovalForAll(sender, operator, approved);\n', '    }\n', '\n', '    /// @dev See {IERC1155-isApprovedForAll(address,address)}.\n', '    function isApprovedForAll(address tokenOwner, address operator) public view virtual override returns (bool) {\n', '        return _operators[tokenOwner][operator];\n', '    }\n', '\n', '    //================================== ERC1155Inventory =======================================/\n', '\n', '    /// @dev See {IERC1155Inventory-isFungible(uint256)}.\n', '    function isFungible(uint256 id) external pure virtual override returns (bool) {\n', '        return id.isFungibleToken();\n', '    }\n', '\n', '    /// @dev See {IERC1155Inventory-collectionOf(uint256)}.\n', '    function collectionOf(uint256 nftId) external pure virtual override returns (uint256) {\n', '        require(nftId.isNonFungibleToken(), "Inventory: not an NFT");\n', '        return nftId.getNonFungibleCollection();\n', '    }\n', '\n', '    /// @dev See {IERC1155Inventory-ownerOf(uint256)}.\n', '    function ownerOf(uint256 nftId) public view virtual override returns (address) {\n', '        address owner = address(_owners[nftId]);\n', '        require(owner != address(0), "Inventory: non-existing NFT");\n', '        return owner;\n', '    }\n', '\n', '    /// @dev See {IERC1155Inventory-totalSupply(uint256)}.\n', '    function totalSupply(uint256 id) external view virtual override returns (uint256) {\n', '        if (id.isNonFungibleToken()) {\n', '            return address(_owners[id]) == address(0) ? 0 : 1;\n', '        } else {\n', '            return _supplies[id];\n', '        }\n', '    }\n', '\n', '    //================================== ABI-level Internal Functions =======================================/\n', '\n', '    /**\n', '     * Creates a collection (optional).\n', '     * @dev Reverts if `collectionId` does not represent a collection.\n', '     * @dev Reverts if `collectionId` has already been created.\n', '     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\n', '     * @param collectionId Identifier of the collection.\n', '     */\n', '    function _createCollection(uint256 collectionId) internal virtual {\n', '        require(!collectionId.isNonFungibleToken(), "Inventory: not a collection");\n', '        require(_creators[collectionId] == address(0), "Inventory: existing collection");\n', '        _creators[collectionId] = _msgSender();\n', '        emit CollectionCreated(collectionId, collectionId.isFungibleToken());\n', '    }\n', '\n', '    /// @dev See {IERC1155InventoryCreator-creator(uint256)}.\n', '    function _creator(uint256 collectionId) internal view virtual returns (address) {\n', '        require(!collectionId.isNonFungibleToken(), "Inventory: not a collection");\n', '        return _creators[collectionId];\n', '    }\n', '\n', '    //================================== Internal Helper Functions =======================================/\n', '\n', '    /**\n', '     * Returns whether `sender` is authorised to make a transfer on behalf of `from`.\n', '     * @param from The address to check operatibility upon.\n', '     * @param sender The sender address.\n', '     * @return True if sender is `from` or an operator for `from`, false otherwise.\n', '     */\n', '    function _isOperatable(address from, address sender) internal view virtual returns (bool) {\n', '        return (from == sender) || _operators[from][sender];\n', '    }\n', '\n', '    /**\n', '     * Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\n', '     * @dev Reverts if `to` is not a contract.\n', '     * @dev Reverts if the call to the target fails or is refused.\n', '     * @param from Previous token owner.\n', '     * @param to New token owner.\n', '     * @param id Identifier of the token transferred.\n', '     * @param value Amount of token transferred.\n', '     * @param data Optional data to send along with the receiver contract call.\n', '     */\n', '    function _callOnERC1155Received(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal {\n', '        require(IERC1155TokenReceiver(to).onERC1155Received(_msgSender(), from, id, value, data) == _ERC1155_RECEIVED, "Inventory: transfer refused");\n', '    }\n', '\n', '    /**\n', '     * Calls {IERC1155TokenReceiver-onERC1155batchReceived} on a target contract.\n', '     * @dev Reverts if `to` is not a contract.\n', '     * @dev Reverts if the call to the target fails or is refused.\n', '     * @param from Previous tokens owner.\n', '     * @param to New tokens owner.\n', '     * @param ids Identifiers of the tokens to transfer.\n', '     * @param values Amounts of tokens to transfer.\n', '     * @param data Optional data to send along with the receiver contract call.\n', '     */\n', '    function _callOnERC1155BatchReceived(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) internal {\n', '        require(\n', '            IERC1155TokenReceiver(to).onERC1155BatchReceived(_msgSender(), from, ids, values, data) == _ERC1155_BATCH_RECEIVED,\n', '            "Inventory: transfer refused"\n', '        );\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC1155721Inventory, an ERC1155Inventory with additional support for ERC721.\n', ' */\n', 'abstract contract ERC1155721Inventory is IERC721, IERC721Metadata, IERC721BatchTransfer, ERC1155InventoryBase {\n', '    using Address for address;\n', '\n', '    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\n', '    bytes4 private constant _ERC1155_TOKEN_RECEIVER_INTERFACE_ID = type(IERC1155TokenReceiver).interfaceId;\n', '    bytes4 private constant _ERC721_INTERFACE_ID = type(IERC721).interfaceId;\n', '    bytes4 private constant _ERC721_METADATA_INTERFACE_ID = type(IERC721Metadata).interfaceId;\n', '\n', '    bytes4 internal constant _ERC721_RECEIVED = type(IERC721Receiver).interfaceId;\n', '\n', '    uint256 internal constant _APPROVAL_BIT_TOKEN_OWNER_ = 1 << 160;\n', '\n', '    /* owner => NFT balance */\n', '    mapping(address => uint256) internal _nftBalances;\n', '\n', '    /* NFT ID => operator */\n', '    mapping(uint256 => address) internal _nftApprovals;\n', '\n', '    /// @dev See {IERC165-supportsInterface(bytes4)}.\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return super.supportsInterface(interfaceId) || interfaceId == _ERC721_INTERFACE_ID || interfaceId == _ERC721_METADATA_INTERFACE_ID;\n', '    }\n', '\n', '    //===================================== ERC721 ==========================================/\n', '\n', '    /// @dev See {IERC721-balanceOf(address)}.\n', '    function balanceOf(address tokenOwner) external view virtual override returns (uint256) {\n', '        require(tokenOwner != address(0), "Inventory: zero address");\n', '        return _nftBalances[tokenOwner];\n', '    }\n', '\n', '    /// @dev See {IERC721-ownerOf(uint256)} and {IERC1155Inventory-ownerOf(uint256)}.\n', '    function ownerOf(uint256 nftId) public view virtual override(IERC721, ERC1155InventoryBase) returns (address) {\n', '        return ERC1155InventoryBase.ownerOf(nftId);\n', '    }\n', '\n', '    /// @dev See {IERC721-approve(address,uint256)}.\n', '    function approve(address to, uint256 nftId) external virtual override {\n', '        address tokenOwner = ownerOf(nftId);\n', '        require(to != tokenOwner, "Inventory: self-approval");\n', '        require(_isOperatable(tokenOwner, _msgSender()), "Inventory: non-approved sender");\n', '        _owners[nftId] = uint256(tokenOwner) | _APPROVAL_BIT_TOKEN_OWNER_;\n', '        _nftApprovals[nftId] = to;\n', '        emit Approval(tokenOwner, to, nftId);\n', '    }\n', '\n', '    /// @dev See {IERC721-getApproved(uint256)}.\n', '    function getApproved(uint256 nftId) external view virtual override returns (address) {\n', '        uint256 tokenOwner = _owners[nftId];\n', '        require(address(tokenOwner) != address(0), "Inventory: non-existing NFT");\n', '        if (tokenOwner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) {\n', '            return _nftApprovals[nftId];\n', '        } else {\n', '            return address(0);\n', '        }\n', '    }\n', '\n', '    /// @dev See {IERC721-isApprovedForAll(address,address)} and {IERC1155-isApprovedForAll(address,address)}\n', '    function isApprovedForAll(address tokenOwner, address operator) public view virtual override(IERC721, ERC1155InventoryBase) returns (bool) {\n', '        return ERC1155InventoryBase.isApprovedForAll(tokenOwner, operator);\n', '    }\n', '\n', '    /// @dev See {IERC721-isApprovedForAll(address,address)} and {IERC1155-isApprovedForAll(address,address)}\n', '    function setApprovalForAll(address operator, bool approved) public virtual override(IERC721, ERC1155InventoryBase) {\n', '        return ERC1155InventoryBase.setApprovalForAll(operator, approved);\n', '    }\n', '\n', '    /**\n', '     * Unsafely transfers a Non-Fungible Token (ERC721-compatible).\n', '     * @dev See {IERC1155721Inventory-transferFrom(address,address,uint256)}.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId\n', '    ) public virtual override {\n', '        _transferFrom(\n', '            from,\n', '            to,\n', '            nftId,\n', '            "",\n', '            /* safe */\n', '            false\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Safely transfers a Non-Fungible Token (ERC721-compatible).\n', '     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256)}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId\n', '    ) public virtual override {\n', '        _transferFrom(\n', '            from,\n', '            to,\n', '            nftId,\n', '            "",\n', '            /* safe */\n', '            true\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Safely transfers a Non-Fungible Token (ERC721-compatible).\n', '     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256,bytes)}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        _transferFrom(\n', '            from,\n', '            to,\n', '            nftId,\n', '            data,\n', '            /* safe */\n', '            true\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Unsafely transfers a batch of Non-Fungible Tokens (ERC721-compatible).\n', '     * @dev See {IERC1155721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n', '     */\n', '    function batchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory nftIds\n', '    ) public virtual override {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        uint256 length = nftIds.length;\n', '        uint256[] memory values = new uint256[](length);\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 nftId = nftIds[i];\n', '            values[i] = 1;\n', '            _transferNFT(from, to, nftId, 1, operatable, true);\n', '            emit Transfer(from, to, nftId);\n', '            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n', '            if (nfCollectionId == 0) {\n', '                nfCollectionId = nextCollectionId;\n', '                nfCollectionCount = 1;\n', '            } else {\n', '                if (nextCollectionId != nfCollectionId) {\n', '                    _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    ++nfCollectionCount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (nfCollectionId != 0) {\n', '            _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n', '            _transferNFTUpdateBalances(from, to, length);\n', '        }\n', '\n', '        emit TransferBatch(_msgSender(), from, to, nftIds, values);\n', '        if (to.isContract() && _isERC1155TokenReceiver(to)) {\n', '            _callOnERC1155BatchReceived(from, to, nftIds, values, "");\n', '        }\n', '    }\n', '\n', '    /// @dev See {IERC721Metadata-tokenURI(uint256)}.\n', '    function tokenURI(uint256 nftId) external view virtual override returns (string memory) {\n', '        require(address(_owners[nftId]) != address(0), "Inventory: non-existing NFT");\n', '        return uri(nftId);\n', '    }\n', '\n', '    //================================== ERC1155 =======================================/\n', '\n', '    /**\n', '     * Safely transfers some token (ERC1155-compatible).\n', '     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        address sender = _msgSender();\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        if (id.isFungibleToken()) {\n', '            _transferFungible(from, to, id, value, operatable);\n', '        } else if (id.isNonFungibleToken()) {\n', '            _transferNFT(from, to, id, value, operatable, false);\n', '            emit Transfer(from, to, id);\n', '        } else {\n', '            revert("Inventory: not a token id");\n', '        }\n', '\n', '        emit TransferSingle(sender, from, to, id, value);\n', '        if (to.isContract()) {\n', '            _callOnERC1155Received(from, to, id, value, data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Safely transfers a batch of tokens (ERC1155-compatible).\n', '     * @dev See {IERC1155721Inventory-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n', '     */\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        // internal function to avoid stack too deep error\n', '        _safeBatchTransferFrom(from, to, ids, values, data);\n', '    }\n', '\n', '    //================================== ERC1155MetadataURI =======================================/\n', '\n', '    /// @dev See {IERC1155MetadataURI-uri(uint256)}.\n', '    function uri(uint256) public view virtual override returns (string memory);\n', '\n', '    //================================== ABI-level Internal Functions =======================================/\n', '\n', '    /**\n', '     * Safely or unsafely transfers some token (ERC721-compatible).\n', '     * @dev For `safe` transfer, see {IERC1155721Inventory-transferFrom(address,address,uint256)}.\n', '     * @dev For un`safe` transfer, see {IERC1155721Inventory-safeTransferFrom(address,address,uint256,bytes)}.\n', '     */\n', '    function _transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data,\n', '        bool safe\n', '    ) internal {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        _transferNFT(from, to, nftId, 1, operatable, false);\n', '\n', '        emit Transfer(from, to, nftId);\n', '        emit TransferSingle(sender, from, to, nftId, 1);\n', '        if (to.isContract()) {\n', '            if (_isERC1155TokenReceiver(to)) {\n', '                _callOnERC1155Received(from, to, nftId, 1, data);\n', '            } else if (safe) {\n', '                _callOnERC721Received(from, to, nftId, data);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Safely transfers a batch of tokens (ERC1155-compatible).\n', '     * @dev See {IERC1155721Inventory-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n', '     */\n', '    function _safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) internal {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        uint256 length = ids.length;\n', '        require(length == values.length, "Inventory: inconsistent arrays");\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        uint256 nftsCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 id = ids[i];\n', '            if (id.isFungibleToken()) {\n', '                _transferFungible(from, to, id, values[i], operatable);\n', '            } else if (id.isNonFungibleToken()) {\n', '                _transferNFT(from, to, id, values[i], operatable, true);\n', '                emit Transfer(from, to, id);\n', '                uint256 nextCollectionId = id.getNonFungibleCollection();\n', '                if (nfCollectionId == 0) {\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    if (nextCollectionId != nfCollectionId) {\n', '                        _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n', '                        nfCollectionId = nextCollectionId;\n', '                        nftsCount += nfCollectionCount;\n', '                        nfCollectionCount = 1;\n', '                    } else {\n', '                        ++nfCollectionCount;\n', '                    }\n', '                }\n', '            } else {\n', '                revert("Inventory: not a token id");\n', '            }\n', '        }\n', '\n', '        if (nfCollectionId != 0) {\n', '            _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n', '            nftsCount += nfCollectionCount;\n', '            _transferNFTUpdateBalances(from, to, nftsCount);\n', '        }\n', '\n', '        emit TransferBatch(_msgSender(), from, to, ids, values);\n', '        if (to.isContract()) {\n', '            _callOnERC1155BatchReceived(from, to, ids, values, data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Safely or unsafely mints some token (ERC721-compatible).\n', '     * @dev For `safe` mint, see {IERC1155721InventoryMintable-mint(address,uint256)}.\n', '     * @dev For un`safe` mint, see {IERC1155721InventoryMintable-safeMint(address,uint256,bytes)}.\n', '     */\n', '    function _mint(\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data,\n', '        bool safe\n', '    ) internal {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        require(nftId.isNonFungibleToken(), "Inventory: not an NFT");\n', '\n', '        _mintNFT(to, nftId, 1, false);\n', '\n', '        emit Transfer(address(0), to, nftId);\n', '        emit TransferSingle(_msgSender(), address(0), to, nftId, 1);\n', '        if (to.isContract()) {\n', '            if (_isERC1155TokenReceiver(to)) {\n', '                _callOnERC1155Received(address(0), to, nftId, 1, data);\n', '            } else if (safe) {\n', '                _callOnERC721Received(address(0), to, nftId, data);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256[])}.\n', '     */\n', '    function _batchMint(address to, uint256[] memory nftIds) internal {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '\n', '        uint256 length = nftIds.length;\n', '        uint256[] memory values = new uint256[](length);\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 nftId = nftIds[i];\n', '            require(nftId.isNonFungibleToken(), "Inventory: not an NFT");\n', '            values[i] = 1;\n', '            _mintNFT(to, nftId, 1, true);\n', '            emit Transfer(address(0), to, nftId);\n', '            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n', '            if (nfCollectionId == 0) {\n', '                nfCollectionId = nextCollectionId;\n', '                nfCollectionCount = 1;\n', '            } else {\n', '                if (nextCollectionId != nfCollectionId) {\n', '                    _balances[nfCollectionId][to] += nfCollectionCount;\n', '                    _supplies[nfCollectionId] += nfCollectionCount;\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    ++nfCollectionCount;\n', '                }\n', '            }\n', '        }\n', '\n', '        _balances[nfCollectionId][to] += nfCollectionCount;\n', '        _supplies[nfCollectionId] += nfCollectionCount;\n', '        _nftBalances[to] += length;\n', '\n', '        emit TransferBatch(_msgSender(), address(0), to, nftIds, values);\n', '        if (to.isContract() && _isERC1155TokenReceiver(to)) {\n', '            _callOnERC1155BatchReceived(address(0), to, nftIds, values, "");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Safely mints some token (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\n', '     */\n', '    function _safeMint(\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal virtual {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        address sender = _msgSender();\n', '        if (id.isFungibleToken()) {\n', '            _mintFungible(to, id, value);\n', '        } else if (id.isNonFungibleToken()) {\n', '            _mintNFT(to, id, value, false);\n', '            emit Transfer(address(0), to, id);\n', '        } else {\n', '            revert("Inventory: not a token id");\n', '        }\n', '\n', '        emit TransferSingle(sender, address(0), to, id, value);\n', '        if (to.isContract()) {\n', '            _callOnERC1155Received(address(0), to, id, value, data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Safely mints a batch of tokens (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n', '     */\n', '    function _safeBatchMint(\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) internal virtual {\n', '        require(to != address(0), "Inventory: transfer to zero");\n', '        uint256 length = ids.length;\n', '        require(length == values.length, "Inventory: inconsistent arrays");\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        uint256 nftsCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 id = ids[i];\n', '            uint256 value = values[i];\n', '            if (id.isFungibleToken()) {\n', '                _mintFungible(to, id, value);\n', '            } else if (id.isNonFungibleToken()) {\n', '                _mintNFT(to, id, value, true);\n', '                emit Transfer(address(0), to, id);\n', '                uint256 nextCollectionId = id.getNonFungibleCollection();\n', '                if (nfCollectionId == 0) {\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    if (nextCollectionId != nfCollectionId) {\n', '                        _balances[nfCollectionId][to] += nfCollectionCount;\n', '                        _supplies[nfCollectionId] += nfCollectionCount;\n', '                        nfCollectionId = nextCollectionId;\n', '                        nftsCount += nfCollectionCount;\n', '                        nfCollectionCount = 1;\n', '                    } else {\n', '                        ++nfCollectionCount;\n', '                    }\n', '                }\n', '            } else {\n', '                revert("Inventory: not a token id");\n', '            }\n', '        }\n', '\n', '        if (nfCollectionId != 0) {\n', '            _balances[nfCollectionId][to] += nfCollectionCount;\n', '            _supplies[nfCollectionId] += nfCollectionCount;\n', '            nftsCount += nfCollectionCount;\n', '            _nftBalances[to] += nftsCount;\n', '        }\n', '\n', '        emit TransferBatch(_msgSender(), address(0), to, ids, values);\n', '        if (to.isContract()) {\n', '            _callOnERC1155BatchReceived(address(0), to, ids, values, data);\n', '        }\n', '    }\n', '\n', '    //============================== Internal Helper Functions =======================================/\n', '\n', '    function _mintFungible(\n', '        address to,\n', '        uint256 id,\n', '        uint256 value\n', '    ) internal {\n', '        require(value != 0, "Inventory: zero value");\n', '        uint256 supply = _supplies[id];\n', '        uint256 newSupply = supply + value;\n', '        require(newSupply > supply, "Inventory: supply overflow");\n', '        _supplies[id] = newSupply;\n', '        // cannot overflow as supply cannot overflow\n', '        _balances[id][to] += value;\n', '    }\n', '\n', '    function _mintNFT(\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bool isBatch\n', '    ) internal {\n', '        require(value == 1, "Inventory: wrong NFT value");\n', '        require(_owners[id] == 0, "Inventory: existing/burnt NFT");\n', '\n', '        _owners[id] = uint256(to);\n', '\n', '        if (!isBatch) {\n', '            uint256 collectionId = id.getNonFungibleCollection();\n', '            // it is virtually impossible that a non-fungible collection supply\n', '            // overflows due to the cost of minting individual tokens\n', '            ++_supplies[collectionId];\n', '            ++_balances[collectionId][to];\n', '            ++_nftBalances[to];\n', '        }\n', '    }\n', '\n', '    function _transferFungible(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bool operatable\n', '    ) internal {\n', '        require(operatable, "Inventory: non-approved sender");\n', '        require(value != 0, "Inventory: zero value");\n', '        uint256 balance = _balances[id][from];\n', '        require(balance >= value, "Inventory: not enough balance");\n', '        if (from != to) {\n', '            _balances[id][from] = balance - value;\n', '            // cannot overflow as supply cannot overflow\n', '            _balances[id][to] += value;\n', '        }\n', '    }\n', '\n', '    function _transferNFT(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bool operatable,\n', '        bool isBatch\n', '    ) internal virtual {\n', '        require(value == 1, "Inventory: wrong NFT value");\n', '        uint256 owner = _owners[id];\n', '        require(from == address(owner), "Inventory: non-owned NFT");\n', '        if (!operatable) {\n', '            require((owner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) && _msgSender() == _nftApprovals[id], "Inventory: non-approved sender");\n', '        }\n', '        _owners[id] = uint256(to);\n', '        if (!isBatch) {\n', '            _transferNFTUpdateBalances(from, to, 1);\n', '            _transferNFTUpdateCollection(from, to, id.getNonFungibleCollection(), 1);\n', '        }\n', '    }\n', '\n', '    function _transferNFTUpdateBalances(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        if (from != to) {\n', '            // cannot underflow as balance is verified through ownership\n', '            _nftBalances[from] -= amount;\n', '            //  cannot overflow as supply cannot overflow\n', '            _nftBalances[to] += amount;\n', '        }\n', '    }\n', '\n', '    function _transferNFTUpdateCollection(\n', '        address from,\n', '        address to,\n', '        uint256 collectionId,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        if (from != to) {\n', '            // cannot underflow as balance is verified through ownership\n', '            _balances[collectionId][from] -= amount;\n', '            // cannot overflow as supply cannot overflow\n', '            _balances[collectionId][to] += amount;\n', '        }\n', '    }\n', '\n', '    ///////////////////////////////////// Receiver Calls Internal /////////////////////////////////////\n', '\n', '    /**\n', '     * Queries whether a contract implements ERC1155TokenReceiver.\n', '     * @param _contract address of the contract.\n', '     * @return wheter the given contract implements ERC1155TokenReceiver.\n', '     */\n', '    function _isERC1155TokenReceiver(address _contract) internal view returns (bool) {\n', '        bool success;\n', '        bool result;\n', '        bytes memory staticCallData = abi.encodeWithSelector(_ERC165_INTERFACE_ID, _ERC1155_TOKEN_RECEIVER_INTERFACE_ID);\n', '        assembly {\n', '            let call_ptr := add(0x20, staticCallData)\n', '            let call_size := mload(staticCallData)\n', '            let output := mload(0x40) // Find empty storage location using "free memory pointer"\n', '            mstore(output, 0x0)\n', '            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\n', '            result := mload(output)\n', '        }\n', '        // (10000 / 63) "not enough for supportsInterface(...)" // consume all gas, so caller can potentially know that there was not enough gas\n', '        assert(gasleft() > 158);\n', '        return success && result;\n', '    }\n', '\n', '    /**\n', '     * Calls {IERC721Receiver-onERC721Received} on a target contract.\n', '     * @dev Reverts if `to` is not a contract.\n', '     * @dev Reverts if the call to the target fails or is refused.\n', '     * @param from Previous token owner.\n', '     * @param to New token owner.\n', '     * @param nftId Identifier of the token transferred.\n', '     * @param data Optional data to send along with the receiver contract call.\n', '     */\n', '    function _callOnERC721Received(\n', '        address from,\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data\n', '    ) internal {\n', '        require(IERC721Receiver(to).onERC721Received(_msgSender(), from, nftId, data) == _ERC721_RECEIVED, "Inventory: transfer refused");\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title IERC1155721InventoryBurnable interface.\n', ' * The function {IERC721Burnable-burnFrom(address,uint256)} is not provided as\n', ' *  {IERC1155Burnable-burnFrom(address,uint256,uint256)} can be used instead.\n', ' */\n', 'interface IERC1155721InventoryBurnable {\n', '    /**\n', '     * Burns some token (ERC1155-compatible).\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if `id` does not represent a token.\n', '     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n', "     * @dev Reverts if `id` represents a fungible token and `value` is higher than `from`'s balance.\n", '     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n', '     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\n', '     * @dev Emits an {IERC721-Transfer} event to the zero address if `id` represents a non-fungible token.\n', '     * @dev Emits an {IERC1155-TransferSingle} event to the zero address.\n', '     * @param from Address of the current token owner.\n', '     * @param id Identifier of the token to burn.\n', '     * @param value Amount of token to burn.\n', '     */\n', '    function burnFrom(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value\n', '    ) external;\n', '\n', '    /**\n', '     * Burns multiple tokens (ERC1155-compatible).\n', '     * @dev Reverts if `ids` and `values` have different lengths.\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if one of `ids` does not represent a token.\n', '     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\n', "     * @dev Reverts if one of `ids` represents a fungible token and `value` is higher than `from`'s balance.\n", '     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\n', '     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\n', '     * @dev Emits an {IERC721-Transfer} event to the zero address for each burnt non-fungible token.\n', '     * @dev Emits an {IERC1155-TransferBatch} event to the zero address.\n', '     * @param from Address of the current tokens owner.\n', '     * @param ids Identifiers of the tokens to burn.\n', '     * @param values Amounts of tokens to burn.\n', '     */\n', '    function batchBurnFrom(\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values\n', '    ) external;\n', '\n', '    /**\n', '     * Burns a batch of Non-Fungible Tokens (ERC721-compatible).\n', '     * @dev Reverts if the sender is not approved.\n', '     * @dev Reverts if one of `nftIds` does not represent a non-fungible token.\n', '     * @dev Reverts if one of `nftIds` is not owned by `from`.\n', '     * @dev Emits an {IERC721-Transfer} event to the zero address for each of `nftIds`.\n', '     * @dev Emits an {IERC1155-TransferBatch} event to the zero address.\n', '     * @param from Current token owner.\n', '     * @param nftIds Identifiers of the tokens to transfer.\n', '     */\n', '    function batchBurnFrom(address from, uint256[] calldata nftIds) external;\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '/**\n', ' * @title ERC1155721InventoryBurnable, a burnable ERC1155721Inventory.\n', ' */\n', 'abstract contract ERC1155721InventoryBurnable is IERC1155721InventoryBurnable, ERC1155721Inventory {\n', '    //============================== ERC1155721InventoryBurnable =======================================/\n', '\n', '    /**\n', '     * Burns some token (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryBurnable-burnFrom(address,uint256,uint256)}.\n', '     */\n', '    function burnFrom(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value\n', '    ) public virtual override {\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        if (id.isFungibleToken()) {\n', '            _burnFungible(from, id, value, operatable);\n', '        } else if (id.isNonFungibleToken()) {\n', '            _burnNFT(from, id, value, operatable, false);\n', '            emit Transfer(from, address(0), id);\n', '        } else {\n', '            revert("Inventory: not a token id");\n', '        }\n', '\n', '        emit TransferSingle(sender, from, address(0), id, value);\n', '    }\n', '\n', '    /**\n', '     * Burns a batch of token (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryBurnable-batchBurnFrom(address,uint256[],uint256[])}.\n', '     */\n', '    function batchBurnFrom(\n', '        address from,\n', '        uint256[] memory ids,\n', '        uint256[] memory values\n', '    ) public virtual override {\n', '        uint256 length = ids.length;\n', '        require(length == values.length, "Inventory: inconsistent arrays");\n', '\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        uint256 nftsCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 id = ids[i];\n', '            if (id.isFungibleToken()) {\n', '                _burnFungible(from, id, values[i], operatable);\n', '            } else if (id.isNonFungibleToken()) {\n', '                _burnNFT(from, id, values[i], operatable, true);\n', '                emit Transfer(from, address(0), id);\n', '                uint256 nextCollectionId = id.getNonFungibleCollection();\n', '                if (nfCollectionId == 0) {\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    if (nextCollectionId != nfCollectionId) {\n', '                        _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n', '                        nfCollectionId = nextCollectionId;\n', '                        nftsCount += nfCollectionCount;\n', '                        nfCollectionCount = 1;\n', '                    } else {\n', '                        ++nfCollectionCount;\n', '                    }\n', '                }\n', '            } else {\n', '                revert("Inventory: not a token id");\n', '            }\n', '        }\n', '\n', '        if (nfCollectionId != 0) {\n', '            _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n', '            nftsCount += nfCollectionCount;\n', '            // cannot underflow as balance is verified through ownership\n', '            _nftBalances[from] -= nftsCount;\n', '        }\n', '\n', '        emit TransferBatch(sender, from, address(0), ids, values);\n', '    }\n', '\n', '    /**\n', '     * Burns a batch of token (ERC721-compatible).\n', '     * @dev See {IERC1155721InventoryBurnable-batchBurnFrom(address,uint256[])}.\n', '     */\n', '    function batchBurnFrom(address from, uint256[] memory nftIds) public virtual override {\n', '        address sender = _msgSender();\n', '        bool operatable = _isOperatable(from, sender);\n', '\n', '        uint256 length = nftIds.length;\n', '        uint256[] memory values = new uint256[](length);\n', '\n', '        uint256 nfCollectionId;\n', '        uint256 nfCollectionCount;\n', '        for (uint256 i; i != length; ++i) {\n', '            uint256 nftId = nftIds[i];\n', '            values[i] = 1;\n', '            _burnNFT(from, nftId, values[i], operatable, true);\n', '            emit Transfer(from, address(0), nftId);\n', '            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n', '            if (nfCollectionId == 0) {\n', '                nfCollectionId = nextCollectionId;\n', '                nfCollectionCount = 1;\n', '            } else {\n', '                if (nextCollectionId != nfCollectionId) {\n', '                    _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n', '                    nfCollectionId = nextCollectionId;\n', '                    nfCollectionCount = 1;\n', '                } else {\n', '                    ++nfCollectionCount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (nfCollectionId != 0) {\n', '            _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n', '            _nftBalances[from] -= length;\n', '        }\n', '\n', '        emit TransferBatch(sender, from, address(0), nftIds, values);\n', '    }\n', '\n', '    //============================== Internal Helper Functions =======================================/\n', '\n', '    function _burnFungible(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bool operatable\n', '    ) internal {\n', '        require(value != 0, "Inventory: zero value");\n', '        require(operatable, "Inventory: non-approved sender");\n', '        uint256 balance = _balances[id][from];\n', '        require(balance >= value, "Inventory: not enough balance");\n', '        _balances[id][from] = balance - value;\n', '        // Cannot underflow\n', '        _supplies[id] -= value;\n', '    }\n', '\n', '    function _burnNFT(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bool operatable,\n', '        bool isBatch\n', '    ) internal virtual {\n', '        require(value == 1, "Inventory: wrong NFT value");\n', '        uint256 owner = _owners[id];\n', '        require(from == address(owner), "Inventory: non-owned NFT");\n', '        if (!operatable) {\n', '            require((owner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) && _msgSender() == _nftApprovals[id], "Inventory: non-approved sender");\n', '        }\n', '        _owners[id] = _BURNT_NFT_OWNER;\n', '\n', '        if (!isBatch) {\n', '            _burnNFTUpdateCollection(from, id.getNonFungibleCollection(), 1);\n', '\n', '            // cannot underflow as balance is verified through NFT ownership\n', '            --_nftBalances[from];\n', '        }\n', '    }\n', '\n', '    function _burnNFTUpdateCollection(\n', '        address from,\n', '        uint256 collectionId,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        // cannot underflow as balance is verified through NFT ownership\n', '        _balances[collectionId][from] -= amount;\n', '        _supplies[collectionId] -= amount;\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title IERC1155721InventoryMintable interface.\n', ' * The function {IERC721Mintable-safeMint(address,uint256,bytes)} is not provided as\n', ' *  {IERC1155Mintable-safeMint(address,uint256,uint256,bytes)} can be used instead.\n', ' */\n', 'interface IERC1155721InventoryMintable {\n', '    /**\n', '     * Safely mints some token (ERC1155-compatible).\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if `id` is not a token.\n', '     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n', '     * @dev Reverts if `id` represents a non-fungible token which has already been minted.\n', '     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n', '     * @dev Reverts if `id` represents a fungible token and there is an overflow of supply.\n', '     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails or is refused.\n', '     * @dev Emits an {IERC721-Transfer} event from the zero address if `id` represents a non-fungible token.\n', '     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n', '     * @param to Address of the new token owner.\n', '     * @param id Identifier of the token to mint.\n', '     * @param value Amount of token to mint.\n', '     * @param data Optional data to send along to a receiver contract.\n', '     */\n', '    function safeMint(\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    /**\n', '     * Safely mints a batch of tokens (ERC1155-compatible).\n', '     * @dev Reverts if `ids` and `values` have different lengths.\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if one of `ids` is not a token.\n', '     * @dev Reverts if one of `ids` represents a non-fungible token and its paired value is not 1.\n', '     * @dev Reverts if one of `ids` represents a non-fungible token which has already been minted.\n', '     * @dev Reverts if one of `ids` represents a fungible token and its paired value is 0.\n', '     * @dev Reverts if one of `ids` represents a fungible token and there is an overflow of supply.\n', '     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n', '     * @dev Emits an {IERC721-Transfer} event from the zero address for each non-fungible token minted.\n', '     * @dev Emits an {IERC1155-TransferBatch} event from the zero address.\n', '     * @param to Address of the new tokens owner.\n', '     * @param ids Identifiers of the tokens to mint.\n', '     * @param values Amounts of tokens to mint.\n', '     * @param data Optional data to send along to a receiver contract.\n', '     */\n', '    function safeBatchMint(\n', '        address to,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    /**\n', '     * Unsafely mints a Non-Fungible Token (ERC721-compatible).\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if `nftId` does not represent a non-fungible token.\n', '     * @dev Reverts if `nftId` has already been minted.\n', '     * @dev Emits an {IERC721-Transfer} event from the zero address.\n', '     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n', '     * @dev If `to` is a contract and supports ERC1155TokenReceiver, calls {IERC1155TokenReceiver-onERC1155Received} with empty data.\n', '     * @param to Address of the new token owner.\n', '     * @param nftId Identifier of the token to mint.\n', '     */\n', '    function mint(address to, uint256 nftId) external;\n', '\n', '    /**\n', '     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if one of `nftIds` does not represent a non-fungible token.\n', '     * @dev Reverts if one of `nftIds` has already been minted.\n', '     * @dev Emits an {IERC721-Transfer} event from the zero address for each of `nftIds`.\n', '     * @dev Emits an {IERC1155-TransferBatch} event from the zero address.\n', '     * @dev If `to` is a contract and supports ERC1155TokenReceiver, calls {IERC1155TokenReceiver-onERC1155BatchReceived} with empty data.\n', '     * @param to Address of the new token owner.\n', '     * @param nftIds Identifiers of the tokens to mint.\n', '     */\n', '    function batchMint(address to, uint256[] calldata nftIds) external;\n', '\n', '    /**\n', '     * Safely mints a token (ERC721-compatible).\n', '     * @dev Reverts if `to` is the zero address.\n', '     * @dev Reverts if `tokenId` has already ben minted.\n', '     * @dev Reverts if `to` is a contract which does not implement IERC721Receiver or IERC1155TokenReceiver.\n', '     * @dev Reverts if `to` is an IERC1155TokenReceiver or IERC721TokenReceiver contract which refuses the transfer.\n', '     * @dev Emits an {IERC721-Transfer} event from the zero address.\n', '     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n', '     * @param to Address of the new token owner.\n', '     * @param nftId Identifier of the token to mint.\n', '     * @param data Optional data to pass along to the receiver call.\n', '     */\n', '    function safeMint(\n', '        address to,\n', '        uint256 nftId,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Inventory, additional creator interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-1155\n', ' */\n', 'interface IERC1155InventoryCreator {\n', '    /**\n', '     * Returns the creator of a collection, or the zero address if the collection has not been created.\n', '     * @dev Reverts if `collectionId` does not represent a collection.\n', '     * @param collectionId Identifier of the collection.\n', '     * @return The creator of a collection, or the zero address if the collection has not been created.\n', '     */\n', '    function creator(uint256 collectionId) external view returns (address);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-core_library/contracts/utils/types/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', 'library UInt256ToDecimalString {\n', '    function toDecimalString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OpenZeppelin's String.toString() implementation - MIT licence\n", '        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8b10cb38d8fedf34f2d89b0ed604f2dceb76d6a9/contracts/utils/Strings.sol\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        uint256 index = digits - 1;\n', '        temp = value;\n', '        while (temp != 0) {\n', '            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\n', '            temp /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/metadata/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', 'contract BaseMetadataURI is Ownable {\n', '    using UInt256ToDecimalString for uint256;\n', '\n', '    event BaseMetadataURISet(string baseMetadataURI);\n', '\n', '    string public baseMetadataURI;\n', '\n', '    function setBaseMetadataURI(string calldata baseMetadataURI_) external onlyOwner {\n', '        baseMetadataURI = baseMetadataURI_;\n', '        emit BaseMetadataURISet(baseMetadataURI_);\n', '    }\n', '\n', '    function _uri(uint256 id) internal view virtual returns (string memory) {\n', '        return string(abi.encodePacked(baseMetadataURI, id.toDecimalString()));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-core_library/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * Contract module which allows derived contracts access control over token\n', ' * minting operations.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyMinter`, which can be applied to the minting functions of your contract.\n', ' * Those functions will only be accessible to accounts with the minter role\n', ' * once the modifer is put in place.\n', ' */\n', 'contract MinterRole is AccessControl {\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    /**\n', '     * Modifier to make a function callable only by accounts with the minter role.\n', '     */\n', '    modifier onlyMinter() {\n', '        require(isMinter(_msgSender()), "MinterRole: not a Minter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     */\n', '    constructor() internal {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        emit MinterAdded(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * Validates whether or not the given account has been granted the minter role.\n', '     * @param account The account to validate.\n', '     * @return True if the account has been granted the minter role, false otherwise.\n', '     */\n', '    function isMinter(address account) public view returns (bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, account);\n', '    }\n', '\n', '    /**\n', '     * Grants the minter role to a non-minter.\n', '     * @param account The account to grant the minter role to.\n', '     */\n', '    function addMinter(address account) public onlyMinter {\n', '        require(!isMinter(account), "MinterRole: already Minter");\n', '        grantRole(DEFAULT_ADMIN_ROLE, account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    /**\n', '     * Renounces the granted minter role.\n', '     */\n', '    function renounceMinter() public onlyMinter {\n', '        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        emit MinterRemoved(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solc-0.6/token/ERC1155721/REVVInventory.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract REVVInventory is\n', '    Ownable,\n', '    Pausable,\n', '    ERC1155721InventoryBurnable,\n', '    IERC1155721InventoryMintable,\n', '    IERC1155InventoryCreator,\n', '    BaseMetadataURI,\n', '    MinterRole\n', '{\n', '    // solhint-disable-next-line const-name-snakecase\n', '    string public constant override name = "REVV Inventory";\n', '    // solhint-disable-next-line const-name-snakecase\n', '    string public constant override symbol = "REVV-I";\n', '\n', '    //================================== ERC1155MetadataURI =======================================/\n', '\n', '    /// @dev See {IERC1155MetadataURI-uri(uint256)}.\n', '    function uri(uint256 id) public view virtual override returns (string memory) {\n', '        return _uri(id);\n', '    }\n', '\n', '    //================================== ERC1155InventoryCreator =======================================/\n', '\n', '    /// @dev See {IERC1155InventoryCreator-creator(uint256)}.\n', '    function creator(uint256 collectionId) external view override returns (address) {\n', '        return _creator(collectionId);\n', '    }\n', '\n', '    // ===================================================================================================\n', '    //                               Admin Public Functions\n', '    // ===================================================================================================\n', '\n', '    //================================== Pausable =======================================/\n', '\n', '    function pause() external virtual {\n', '        require(owner() == _msgSender(), "Inventory: not the owner");\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external virtual {\n', '        require(owner() == _msgSender(), "Inventory: not the owner");\n', '        _unpause();\n', '    }\n', '\n', '    //================================== ERC1155Inventory =======================================/\n', '\n', '    /**\n', '     * Creates a collection.\n', '     * @dev Reverts if `collectionId` does not represent a collection.\n', '     * @dev Reverts if `collectionId` has already been created.\n', '     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\n', '     * @param collectionId Identifier of the collection.\n', '     */\n', '    function createCollection(uint256 collectionId) external onlyOwner {\n', '        _createCollection(collectionId);\n', '    }\n', '\n', '    //================================== ERC1155721InventoryMintable =======================================/\n', '\n', '    /**\n', '     * Unsafely mints a Non-Fungible Token (ERC721-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256)}.\n', '     */\n', '    function mint(address to, uint256 nftId) public virtual override {\n', '        require(isMinter(_msgSender()), "Inventory: not a minter");\n', '        _mint(to, nftId, "", false);\n', '    }\n', '\n', '    /**\n', '     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256[])}.\n', '     */\n', '    function batchMint(address to, uint256[] memory nftIds) public virtual override {\n', '        require(isMinter(_msgSender()), "Inventory: not a minter");\n', '        _batchMint(to, nftIds);\n', '    }\n', '\n', '    /**\n', '     * Safely mints a Non-Fungible Token (ERC721-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,bytes)}.\n', '     */\n', '    function safeMint(\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(isMinter(_msgSender()), "Inventory: not a minter");\n', '        _mint(to, nftId, data, true);\n', '    }\n', '\n', '    /**\n', '     * Safely mints some token (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\n', '     */\n', '    function safeMint(\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(isMinter(_msgSender()), "Inventory: not a minter");\n', '        _safeMint(to, id, value, data);\n', '    }\n', '\n', '    /**\n', '     * Safely mints a batch of tokens (ERC1155-compatible).\n', '     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n', '     */\n', '    function safeBatchMint(\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(isMinter(_msgSender()), "Inventory: not a minter");\n', '        _safeBatchMint(to, ids, values, data);\n', '    }\n', '\n', '    //================================== ERC721 =======================================/\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.transferFrom(from, to, nftId);\n', '    }\n', '\n', '    function batchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory nftIds\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.batchTransferFrom(from, to, nftIds);\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.safeTransferFrom(from, to, nftId);\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 nftId,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.safeTransferFrom(from, to, nftId, data);\n', '    }\n', '\n', '    function batchBurnFrom(address from, uint256[] memory nftIds) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.batchBurnFrom(from, nftIds);\n', '    }\n', '\n', '    //================================== ERC1155 =======================================/\n', '\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.safeTransferFrom(from, to, id, value, data);\n', '    }\n', '\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.safeBatchTransferFrom(from, to, ids, values, data);\n', '    }\n', '\n', '    function burnFrom(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.burnFrom(from, id, value);\n', '    }\n', '\n', '    function batchBurnFrom(\n', '        address from,\n', '        uint256[] memory ids,\n', '        uint256[] memory values\n', '    ) public virtual override {\n', '        require(!paused(), "Inventory: paused");\n', '        super.batchBurnFrom(from, ids, values);\n', '    }\n', '}']