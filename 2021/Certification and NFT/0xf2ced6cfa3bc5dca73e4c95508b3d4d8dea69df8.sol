['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/GVoting.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev An interface to extend gTokens with voting delegation capabilities.\n', ' *      See GTokenType3.sol for further documentation.\n', ' */\n', 'interface GVoting\n', '{\n', '\t// view functions\n', '\tfunction votes(address _candidate) external view returns (uint256 _votes);\n', '\tfunction candidate(address _voter) external view returns (address _candidate);\n', '\n', '\t// open functions\n', '\tfunction setCandidate(address _newCandidate) external;\n', '\n', '\t// emitted events\n', '\tevent ChangeCandidate(address indexed _voter, address indexed _oldCandidate, address indexed _newCandidate);\n', '\tevent ChangeVotes(address indexed _candidate, uint256 _oldVotes, uint256 _newVotes);\n', '}\n', '\n', '// File: contracts/modules/Math.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library implements auxiliary math definitions.\n', ' */\n', 'library Math\n', '{\n', '\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n', '\t{\n', '\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\n', '\t}\n', '}\n', '\n', '// File: contracts/interop/Gnosis.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface Enum\n', '{\n', '\tenum Operation { Call, DelegateCall }\n', '}\n', '\n', 'interface OwnerManager\n', '{\n', '\tfunction getOwners() external view returns (address[] memory _owners);\n', '\tfunction isOwner(address _owner) external view returns (bool _isOwner);\n', '}\n', '\n', 'interface ModuleManager\n', '{\n', '\tfunction execTransactionFromModule(address _to, uint256 _value, bytes calldata _data, Enum.Operation _operation) external returns (bool _success);\n', '}\n', '\n', 'interface Safe is OwnerManager, ModuleManager\n', '{\n', '}\n', '\n', '// File: contracts/modules/Multisig.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev This library abstracts the Gnosis Safe multisig operations.\n', ' */\n', 'library Multisig\n', '{\n', '\t/**\n', '\t * @dev Lists the current owners/signers of a Gnosis Safe multisig.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @return _owners The list of current owners/signers of the multisig.\n', '\t */\n', '\tfunction _getOwners(address _safe) internal view returns (address[] memory _owners)\n', '\t{\n', '\t\treturn Safe(_safe).getOwners();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Checks if an address is a signer of the Gnosis Safe multisig.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @param _owner The address to check if it is a owner/signer of the multisig.\n', '\t * @return _isOnwer A boolean indicating if the provided address is\n', '\t *                  indeed a signer.\n', '\t */\n', '\tfunction _isOwner(address _safe, address _owner) internal view returns (bool _isOnwer)\n', '\t{\n', '\t\treturn Safe(_safe).isOwner(_owner);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Adds a signer to the multisig by calling the Gnosis Safe function\n', '\t *      addOwnerWithThreshold() via the execTransactionFromModule()\n', '\t *      primitive.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @param _owner The owner/signer to be added to the multisig.\n', '\t * @param _threshold The new threshold (minimum number of signers) to be set.\n', '\t * @return _success A boolean indicating if the operation succeded.\n', '\t */\n', '\tfunction _addOwnerWithThreshold(address _safe, address _owner, uint256 _threshold) internal returns (bool _success)\n', '\t{\n', '\t\tbytes memory _data = abi.encodeWithSignature("addOwnerWithThreshold(address,uint256)", _owner, _threshold);\n', '\t\treturn _execTransactionFromModule(_safe, _data);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Removes a signer to the multisig by calling the Gnosis Safe function\n', '\t *      removeOwner() via the execTransactionFromModule()\n', '\t *      primitive.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @param _prevOwner The previous owner/signer in the multisig linked list.\n', '\t * @param _owner The owner/signer to be added to the multisig.\n', '\t * @param _threshold The new threshold (minimum number of signers) to be set.\n', '\t * @return _success A boolean indicating if the operation succeded.\n', '\t */\n', '\tfunction _removeOwner(address _safe, address _prevOwner, address _owner, uint256 _threshold) internal returns (bool _success)\n', '\t{\n', '\t\tbytes memory _data = abi.encodeWithSignature("removeOwner(address,address,uint256)", _prevOwner, _owner, _threshold);\n', '\t\treturn _execTransactionFromModule(_safe, _data);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Changes minimum number of signers of the multisig by calling the\n', '\t *      Gnosis Safe function changeThreshold() via the\n', '\t *      execTransactionFromModule() primitive.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @param _threshold The new threshold (minimum number of signers) to be set.\n', '\t * @return _success A boolean indicating if the operation succeded.\n', '\t */\n', '\tfunction _changeThreshold(address _safe, uint256 _threshold) internal returns (bool _success)\n', '\t{\n', '\t\tbytes memory _data = abi.encodeWithSignature("changeThreshold(uint256)", _threshold);\n', '\t\treturn _execTransactionFromModule(_safe, _data);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calls the execTransactionFrom() module primitive handling\n', '\t *      possible errors.\n', '\t * @param _safe The Gnosis Safe contract address.\n', '\t * @param _data The encoded data describing the function signature and\n', '\t *              argument values.\n', '\t * @return _success A boolean indicating if the operation succeded.\n', '\t */\n', '\tfunction _execTransactionFromModule(address _safe, bytes memory _data) internal returns (bool _success)\n', '\t{\n', '\t\ttry Safe(_safe).execTransactionFromModule(_safe, 0, _data, Enum.Operation.Call) returns (bool _result) {\n', '\t\t\treturn _result;\n', '\t\t} catch (bytes memory /* _data */) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: contracts/GDAOModule.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice This contract implements a Gnosis Safe extension module to allow\n', ' *         replacing the multisig signers using the 1-level delegation voting\n', ' *         provided by stkGRO. Every 24 hours, around 0 UTC, a new voting round\n', ' *         starts and the candidates appointed in the previous round can become\n', ' *         the signers of the multisig. This module allows up to 7 signers with\n', ' *         a minimum of 4 signatures to take any action. There are 3 consecutive\n', ' *         phases in the process, each occuring at a 24 hour voting round. In\n', ' *         the first round, stkGRO holders can delegate their votes (stkGRO\n', ' *         balance) to candidates; vote balance is frozen by the end of that\n', ' *         round. In the second round, most voted candidates can appoint\n', ' *         themselves to become signers, replacing a previous candidate from the\n', ' *         current list. In the third and final round, the list of appointed\n', ' *         candidates is set as the list of signers to the multisig. The 3\n', ' *         phases overlap so that, when one list of signers is being set, the\n', ' *         list for the next day is being build, and yet the votes for\n', ' *         subsequent day are being counted. See GVoting and GTokenType3 for\n', ' *         further documentation.\n', ' */\n', 'contract GDAOModule is ReentrancyGuard\n', '{\n', '\tusing SafeMath for uint256;\n', '\tusing EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '\tstring public constant NAME = "GrowthDeFi DAO Module";\n', '\tstring public constant VERSION = "0.0.2";\n', '\n', '\tuint256 constant VOTING_ROUND_INTERVAL = 1 days;\n', '\n', '\tuint256 constant SIGNING_OWNERS = 7;\n', '\tuint256 constant SIGNING_THRESHOLD = 4;\n', '\n', '\taddress public immutable safe;\n', '\taddress public immutable votingToken;\n', '\n', '\tuint256 private votingRound;\n', '\tEnumerableSet.AddressSet private candidates;\n', '\n', '\tbool public pendingChanges;\n', '\n', '\t/**\n', '\t * @dev Restricts execution to Externally Owned Accounts (EOA).\n', '\t */\n', '\tmodifier onlyEOA()\n', '\t{\n', '\t\trequire(tx.origin == msg.sender, "not an externally owned account");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Constructor for the Gnosis Safe extension module.\n', '\t * @param _safe The Gnosis Safe multisig contract address.\n', '\t * @param _votingToken The ERC-20 token used for voting (stkGRO).\n', '\t */\n', '\tconstructor (address _safe, address _votingToken) public\n', '\t{\n', '\t\tsafe = _safe;\n', '\t\tvotingToken = _votingToken;\n', '\n', '\t\tvotingRound = _currentVotingRound();\n', '\n', '\t\taddress[] memory _owners = Multisig._getOwners(_safe);\n', '\t\tuint256 _ownersCount = _owners.length;\n', '\t\tfor (uint256 _index = 0; _index < _ownersCount; _index++) {\n', '\t\t\taddress _owner = _owners[_index];\n', '\t\t\tbool _success = candidates.add(_owner);\n', '\t\t\tassert(_success);\n', '\t\t}\n', '\n', '\t\tpendingChanges = false;\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Returns the current voting round. This value gets incremented\n', '\t *         every 24 hours.\n', '\t * @return _votingRound The current voting round.\n', '\t */\n', '\tfunction currentVotingRound() public view returns (uint256 _votingRound)\n', '\t{\n', '\t\treturn _currentVotingRound();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Returns the approximate number of seconds remaining until a\n', '\t *         a new voting round starts.\n', '\t * @return _timeToNextVotingRound The number of seconds to the next\n', '\t *                                voting round.\n', '\t */\n', '\tfunction timeToNextVotingRound() public view returns (uint256 _timeToNextVotingRound)\n', '\t{\n', '\t\treturn now.div(VOTING_ROUND_INTERVAL).add(1).mul(VOTING_ROUND_INTERVAL).sub(now);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Returns a boolean indicating whether or not turnOver()\n', '\t *         can be called to apply pending changes.\n', '\t * @return _available Returns true if a new round has started and there\n', '\t *                    are pending changes.\n', '\t */\n', '\tfunction turnOverAvailable() public view returns (bool _available)\n', '\t{\n', '\t\treturn _turnOverAvailable();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Returns the current number of appointed candidates in the list.\n', '\t * @return _count The size of the appointed candidate list.\n', '\t */\n', '\tfunction candidateCount() public view returns (uint256 _count)\n', '\t{\n', '\t\treturn candidates.length();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Returns the i-th appointed candidates on the list.\n', '\t * @return _candidate The address of an stkGRO holder appointed to the\n', '\t *                    candidate list.\n', '\t */\n', '\tfunction candidateAt(uint256 _index) public view returns (address _candidate)\n', '\t{\n', '\t\treturn candidates.at(_index);\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Appoints as candidate to be a signer for the multisig,\n', '\t *         starting on the next voting round. Only the actual candidate\n', '\t *         can appoint himself and he must have a vote count large\n', '\t *         enough to kick someone else from the appointed candidate list.\n', '\t *         No that the first candidate appointment on a round may update\n', '\t *         the multisig signers with the list from the previous round, if\n', '\t *         there are changes.\n', '\t */\n', '\tfunction appointCandidate() public onlyEOA nonReentrant\n', '\t{\n', '\t\taddress _candidate = msg.sender;\n', '\t\tif (_turnOverAvailable()) _turnOver();\n', '\t\trequire(!candidates.contains(_candidate), "already eligible");\n', '\t\trequire(_appointCandidate(_candidate), "not eligible");\n', '\t}\n', '\n', '\t/**\n', '\t * @notice Updates the multisig signers with the appointed candidade\n', '\t *         list from the previous round. Anyone can call this method\n', '\t *         as soon as a new voting round starts. See hasPendingTurnOver()\n', '\t *         to figure out whether or not there are pending changes to\n', '\t *         be applied to the multisig.\n', '\t */\n', '\tfunction turnOver() public onlyEOA nonReentrant\n', '\t{\n', '\t\trequire(_turnOverAvailable(), "not available");\n', '\t\t_turnOver();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Finds the appointed candidates with the least amount of votes\n', '\t *      for the current list. This is used to find the candidate to be\n', '\t *      removed when a new candidate with more votes is appointed.\n', '\t * @return _leastVoted The address of the least voted appointed candidate.\n', '\t * @return _leastVotes The actual number of votes for the least voted\n', '\t *                     appointed candidate.\n', '\t */\n', '\tfunction _findLeastVoted() internal view returns (address _leastVoted, uint256 _leastVotes)\n', '\t{\n', '\t\t_leastVoted = address(0);\n', '\t\t_leastVotes = uint256(-1);\n', '\t\tuint256 _candidateCount = candidates.length();\n', '\t\tfor (uint256 _index = 0; _index < _candidateCount; _index++) {\n', '\t\t\taddress _candidate = candidates.at(_index);\n', '\t\t\tuint256 _votes = _countVotes(_candidate);\n', '\t\t\tif (_votes < _leastVotes) {\n', '\t\t\t\t_leastVoted = _candidate;\n', '\t\t\t\t_leastVotes = _votes;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn (_leastVoted, _leastVotes);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Implements the logic for appointing a new candidate. It looks\n', '\t *      for the appointed candidate with the least votes and if the\n', '\t *      prospect given canditate has strictly more votes, it replaces\n', '\t *      it on the list. Note that, if the list has less than 7 appointed\n', '\t *      candidates, the operation always succeeds.\n', '\t * @param _newCandidate The given prospect candidate, assumed not to be\n', '\t *                      on the list.\n', '\t * @return _success A boolean indicating if indeed the prospect appointed\n', '\t *                  candidate has enough votes to beat someone on the\n', '\t *                  list and the operation succeded.\n', '\t */\n', '\tfunction _appointCandidate(address _newCandidate) internal returns(bool _success)\n', '\t{\n', '\t\taddress _oldCandidate = address(0);\n', '\t\tuint256 _candidateCount = candidates.length();\n', '\t\tif (_candidateCount == SIGNING_OWNERS) {\n', '\t\t\tuint256 _oldVotes;\n', '\t\t\t(_oldCandidate, _oldVotes) = _findLeastVoted();\n', '\t\t\tuint256 _newVotes = _countVotes(_newCandidate);\n', '\t\t\tif (_newVotes <= _oldVotes) return false;\n', '\n', '\t\t\t_success = candidates.remove(_oldCandidate);\n', '\t\t\tassert(_success);\n', '\t\t}\n', '\t\t_success = candidates.add(_newCandidate);\n', '\t\tassert(_success);\n', '\n', '\t\tpendingChanges = true;\n', '\n', '\t\temit CandidateChange(votingRound, _oldCandidate, _newCandidate);\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates the current voting round.\n', '\t * @return _votingRound The current voting round as calculated.\n', '\t */\n', '\tfunction _currentVotingRound() internal view returns (uint256 _votingRound)\n', '\t{\n', '\t\treturn now.div(VOTING_ROUND_INTERVAL);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns a boolean indicating whether or not the multisig\n', '\t *      can be updated with new signers.\n', '\t * @return _available Returns true if a new round has started and there\n', '\t *                    are pending changes.\n', '\t */\n', '\tfunction _turnOverAvailable() internal view returns (bool _available)\n', '\t{\n', '\t\tuint256 _votingRound = _currentVotingRound();\n', '\t\treturn _votingRound > votingRound && pendingChanges;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Implements the turn over by first adding all the missing\n', '\t *      candidates from the appointed list to the multisig signers\n', '\t *      list, and later removing the multisig signers not present\n', '\t *      in the current appointed list. At last, it sets the minimum\n', '\t *      number of signers to 4 (or the size of the list if smaller than\n', '\t *      4). This function is optimized to skip the process if it is\n', '\t *      in sync, i.e no candidates were appointed since the last update.\n', '\t */\n', '\tfunction _turnOver() internal\n', '\t{\n', '\t\tvotingRound = _currentVotingRound();\n', '\n', '\t\t// adds new candidates\n', '\t\tuint256 _candidateCount = candidates.length();\n', '\t\tfor (uint256 _index = 0; _index < _candidateCount; _index++) {\n', '\t\t\taddress _candidate = candidates.at(_index);\n', '\t\t\tif (Multisig._isOwner(safe, _candidate)) continue;\n', '\t\t\tbool _success = Multisig._addOwnerWithThreshold(safe, _candidate, 1);\n', '\t\t\tassert(_success);\n', '\t\t}\n', '\n', '\t\t// removes old candidates\n', '\t\taddress[] memory _owners = Multisig._getOwners(safe);\n', '\t\tuint256 _ownersCount = _owners.length;\n', '\t\taddress _prevOwner = address(0x1); // sentinel from Gnosis\n', '\t\tfor (uint256 _index = 0; _index < _ownersCount; _index++) {\n', '\t\t\taddress _owner = _owners[_index];\n', '\t\t\tif (candidates.contains(_owner)) {\n', '\t\t\t\t_prevOwner = _owner;\n', '\t\t\t\tcontinue;\n', '\t\t\t}\n', '\t\t\tbool _success = Multisig._removeOwner(safe, _prevOwner, _owner, 1);\n', '\t\t\tassert(_success);\n', '\t\t}\n', '\n', '\t\t// updates minimum number of signers\n', '\t\tuint256 _threshold = Math._min(_candidateCount, SIGNING_THRESHOLD);\n', '\t\tbool _success = Multisig._changeThreshold(safe, _threshold);\n', '\t\tassert(_success);\n', '\n', '\t\tpendingChanges = false;\n', '\n', '\t\temit TurnOver(votingRound);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the vote count for a given candidate.\n', '\t * @param _candidate The given candidate.\n', '\t * @return _votes The number of votes delegated to the given candidate.\n', '\t */\n', '\tfunction _countVotes(address _candidate) internal view virtual returns (uint256 _votes)\n', '\t{\n', '\t\treturn GVoting(votingToken).votes(_candidate);\n', '\t}\n', '\n', '\tevent TurnOver(uint256 indexed _votingRound);\n', '\tevent CandidateChange(uint256 indexed _votingRound, address indexed _oldCandidate, address indexed _newCandidate);\n', '}']