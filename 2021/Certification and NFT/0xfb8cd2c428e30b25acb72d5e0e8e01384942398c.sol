['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// File: localhost/abstract/OracleSimple.sol\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @title OracleSimple\n', ' **/\n', 'abstract contract OracleSimple {\n', '    // returns Q112-encoded value\n', '    function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}\n', '}\n', '\n', '\n', '/**\n', ' * @title OracleSimplePoolToken\n', ' **/\n', 'abstract contract OracleSimplePoolToken is OracleSimple {\n', '    ChainlinkedOracleSimple public oracleMainAsset;\n', '}\n', '\n', '\n', '/**\n', ' * @title ChainlinkedOracleSimple\n', ' **/\n', 'abstract contract ChainlinkedOracleSimple is OracleSimple {\n', '    address public WETH;\n', '    // returns ordinary value\n', '    function ethToUsd(uint ethAmount) public virtual view returns (uint) {}\n', '\n', '    // returns Q112-encoded value\n', '    function assetToEth(address asset, uint amount) public virtual view returns (uint) {}\n', '}\n', '\n', '// File: localhost/helpers/IUniswapV2Pair.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: localhost/helpers/SafeMath.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: localhost/impl/ChainlinkedKeep3rV1OraclePoolToken.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ChainlinkedKeep3rV1OraclePoolToken\n', ' * @dev Calculates the USD price of Uniswap LP tokens\n', ' **/\n', 'contract ChainlinkedKeep3rV1OraclePoolToken is OracleSimplePoolToken {\n', '    using SafeMath for uint;\n', '\n', '    uint public immutable Q112 = 2 ** 112;\n', '\n', '    constructor(address _chainlinkOracleWrapperMainAsset) public {\n', '        oracleMainAsset = ChainlinkedOracleSimple(_chainlinkOracleWrapperMainAsset);\n', '    }\n', '\n', '    /**\n', '     * @notice This function implements flashloan-resistant logic to determine USD price of Uniswap LP tokens\n', '     * @notice Pair must be registered at Chainlink\n', '     * @param asset The LP token address\n', '     * @param amount Amount of asset\n', '     * @return Q112 encoded price of asset in USD\n', '     **/\n', '    function assetToUsd(\n', '        address asset,\n', '        uint amount\n', '    )\n', '        public\n', '        override\n', '        view\n', '        returns (uint)\n', '    {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(asset);\n', '        address underlyingAsset;\n', '        if (pair.token0() == oracleMainAsset.WETH()) {\n', '            underlyingAsset = pair.token1();\n', '        } else if (pair.token1() == oracleMainAsset.WETH()) {\n', '            underlyingAsset = pair.token0();\n', '        } else {\n', '            revert("Unit Protocol: NOT_REGISTERED_PAIR");\n', '        }\n', '\n', '        // average price of 1 token in ETH\n', '        uint eAvg = oracleMainAsset.assetToEth(underlyingAsset, 1);\n', '\n', '        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\n', '        uint aPool; // current asset pool\n', '        uint ePool; // current WETH pool\n', '        if (pair.token0() == underlyingAsset) {\n', '            aPool = uint(_reserve0);\n', '            ePool = uint(_reserve1);\n', '        } else {\n', '            aPool = uint(_reserve1);\n', '            ePool = uint(_reserve0);\n', '        }\n', '\n', '        uint eCurr = ePool.mul(Q112).div(aPool); // current price of 1 token in WETH\n', '        uint ePoolCalc; // calculated WETH pool\n', '\n', '        if (eCurr < eAvg) {\n', '            // flashloan buying WETH\n', '            uint sqrtd = ePool.mul((ePool).mul(9).add(\n', '                aPool.mul(3988000).mul(eAvg).div(Q112)\n', '            ));\n', '            uint eChange = sqrt(sqrtd).sub(ePool.mul(1997)).div(2000);\n', '            ePoolCalc = ePool.add(eChange);\n', '        } else {\n', '            // flashloan selling WETH\n', '            uint a = aPool.mul(eAvg);\n', '            uint b = a.mul(9).div(Q112);\n', '            uint c = ePool.mul(3988000);\n', '            uint sqRoot = sqrt(a.div(Q112).mul(b.add(c)));\n', '            uint d = a.mul(3).div(Q112);\n', '            uint eChange = ePool.sub(d.add(sqRoot).div(2000));\n', '            ePoolCalc = ePool.sub(eChange);\n', '        }\n', '\n', '        uint num = ePoolCalc.mul(2).mul(amount);\n', '        uint priceInEth;\n', '        if (num > Q112) {\n', '            priceInEth = num.div(pair.totalSupply()).mul(Q112);\n', '        } else {\n', '            priceInEth = num.mul(Q112).div(pair.totalSupply());\n', '        }\n', '\n', '        return oracleMainAsset.ethToUsd(priceInEth);\n', '    }\n', '\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        if (x > 3) {\n', '            uint z = x / 2 + 1;\n', '            y = x;\n', '            while (z < y) {\n', '                y = z;\n', '                z = (x / z + z) / 2;\n', '            }\n', '        } else if (x != 0) {\n', '            y = 1;\n', '        }\n', '    }\n', '}']