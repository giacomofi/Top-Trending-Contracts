['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', 'pragma solidity >=0.4.23 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract SmartEdMatrix {\n', '\n', '    struct User {\n', '        uint id;\n', '        address referrer;\n', '        uint referralCount;\n', '        uint256 lastpayout;\n', '        uint256 dividends;\n', '        uint256 totalwithdrawn;\n', '\n', '        mapping(uint8 => bool) activeX3Levels;\n', '        mapping(uint8 => bool) activeX6Levels;\n', '        \n', '        mapping(uint8 => X3) x3Matrix;\n', '        mapping(uint8 => X6) x6Matrix;\n', '    }\n', '    \n', '    struct X3 {\n', '        address currentReferrer;\n', '        address[] referrals;\n', '        bool blocked;\n', '        uint refreshingCount;\n', '        uint256 time;\n', '        uint256 leveldividends;\n', '    }\n', '    \n', '    struct X6 {\n', '        address currentReferrer;\n', '        address[] firstLevelReferrals;\n', '        address[] secondLevelReferrals;\n', '        bool blocked;\n', '        uint refreshingCount;\n', '        address closedPart;\n', '        uint256 time;\n', '        uint256 leveldividends;\n', '\n', '    }\n', '\n', '    uint8 public constant FINAL_LEVEL = 12;\n', '    \n', '    mapping(address => User) public users;\n', '    mapping(uint => address) public idToAddress;\n', '    mapping(uint => address) public userIds;\n', '    mapping(address => uint) public balances; \n', '\n', '    uint public lastUserId = 2;\n', '    address public owner;\n', '    \n', '    IERC20 private _token;\n', '    \n', '    mapping(uint8 => uint) public levelPrice;\n', '    \n', '    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\n', '    event refresh(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\n', '    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\n', '    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\n', '    event MissedTokenReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\n', '    event sendExtraTokens(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\n', '    \n', '    \n', '    constructor(address ownerAddress, IERC20 token) public {\n', '        levelPrice[1] = 5 * 10 ** 8;\n', '        for (uint8 i = 2; i <= FINAL_LEVEL; i++) {\n', '            levelPrice[i] = levelPrice[i-1] * 2;\n', '        }\n', '        \n', '        owner = ownerAddress;\n', '        _token = token;\n', '        User memory user = User({\n', '            id: 1,\n', '            referrer: address(0),\n', '            referralCount: uint(0),\n', '            lastpayout : 0,\n', '            dividends : 0,\n', '            totalwithdrawn:0\n', '\n', '        });\n', '        \n', '        users[ownerAddress] = user;\n', '        idToAddress[1] = ownerAddress;\n', '        \n', '        for (uint8 i = 1; i <= FINAL_LEVEL; i++) {\n', '            users[ownerAddress].activeX3Levels[i] = true;\n', '            users[ownerAddress].activeX6Levels[i] = true;\n', '        }\n', '        \n', '        userIds[1] = ownerAddress;\n', '    }\n', '    \n', '    function() external payable {\n', '        if(msg.data.length == 0) {\n', '            return registration(msg.sender, owner);\n', '        }\n', '        \n', '        registration(msg.sender, bytesToAddress(msg.data));\n', '    }\n', '\n', '    function registrationExt(address referrerAddress) external payable {\n', '        registration(msg.sender, referrerAddress);\n', '    }\n', '    \n', '    function buyNewLevel(uint8 matrix, uint8 level) external payable {\n', '        require(isUserExists(msg.sender), "user is not exists. Register first.");\n', '        require(matrix == 1 || matrix == 2, "invalid matrix");\n', '        require(level > 1 && level <= FINAL_LEVEL, "invalid level");\n', '        address giver = msg.sender; \n', '        if (matrix == 1) {\n', '            require(!users[msg.sender].activeX3Levels[level], "level already activated");\n', '\n', '            if (users[msg.sender].x3Matrix[level-1].blocked) {\n', '                users[msg.sender].x3Matrix[level-1].blocked = false;\n', '            }\n', '    \n', '            address userX3Referrer = findUserX3Referrer(msg.sender, level);\n', '            users[msg.sender].x3Matrix[level].currentReferrer = userX3Referrer;\n', '            users[msg.sender].activeX3Levels[level] = true;\n', '            users[msg.sender].x3Matrix[level].time = block.timestamp;\n', '            upliftX3Referrer(msg.sender, userX3Referrer, giver, level);\n', '            \n', '            emit Upgrade(msg.sender, userX3Referrer, 1, level);\n', '\n', '        } else {\n', '            require(!users[msg.sender].activeX6Levels[level], "level already activated"); \n', '\n', '            if (users[msg.sender].x6Matrix[level-1].blocked) {\n', '                users[msg.sender].x6Matrix[level-1].blocked = false;\n', '            }\n', '\n', '            address userX6Referrer = findUserX6Referrer(msg.sender, level);\n', '            \n', '            users[msg.sender].activeX6Levels[level] = true;\n', '            users[msg.sender].x6Matrix[level].time = block.timestamp;\n', '\n', '            upliftX6Referrer(msg.sender, userX6Referrer,giver ,level);\n', '            \n', '            emit Upgrade(msg.sender, userX6Referrer, 2, level);\n', '        }\n', '    }    \n', '    \n', '    function registration(address userAddress, address referrerAddress) private {\n', '        require(!isUserExists(userAddress), "user exists");\n', '        require(isUserExists(referrerAddress), "referrer not exists");\n', '        \n', '        address giver = userAddress;\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(userAddress)\n', '        }\n', '        require(size == 0, "cannot be a contract");\n', '        \n', '        User memory user = User({\n', '            id: lastUserId,\n', '            referrer: referrerAddress,\n', '            referralCount: 0,\n', '            lastpayout : 0,\n', '            dividends : 0,\n', '            totalwithdrawn:0\n', '        });\n', '        \n', '        users[userAddress] = user;\n', '        idToAddress[lastUserId] = userAddress;\n', '        \n', '        users[userAddress].referrer = referrerAddress;\n', '        \n', '        users[userAddress].activeX3Levels[1] = true; \n', '        users[userAddress].activeX6Levels[1] = true;\n', '        users[userAddress].x3Matrix[1].time = block.timestamp;\n', '        users[userAddress].x6Matrix[1].time = block.timestamp;\n', '\n', '        \n', '        userIds[lastUserId] = userAddress;\n', '        lastUserId++;\n', '        \n', '        users[referrerAddress].referralCount++;\n', '\n', '        address userX3Referrer = findUserX3Referrer(userAddress, 1);\n', '        users[userAddress].x3Matrix[1].currentReferrer = userX3Referrer;\n', '        upliftX3Referrer(userAddress, userX3Referrer,giver, 1);\n', '\n', '        upliftX6Referrer(userAddress, findUserX6Referrer(userAddress, 1),giver, 1);\n', '        \n', '        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\n', '    }\n', '    \n', '    function upliftX3Referrer(address userAddress, address referrerAddress,address giver, uint8 level) private {\n', '        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\n', '            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\n', '            return sendTokens(referrerAddress, giver, 1, level);\n', '        }\n', '        \n', '        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\n', '        //close matrix\n', '        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\n', '        if (!users[referrerAddress].activeX3Levels[level+1] && level != FINAL_LEVEL) {\n', '            users[referrerAddress].x3Matrix[level].blocked = true;\n', '        }\n', '\n', '        //create new one by recursion\n', '        if (referrerAddress != owner) {\n', '            //check referrer active level\n', '            address userReferrerAddress = findUserX3Referrer(referrerAddress, level);\n', '            if (users[referrerAddress].x3Matrix[level].currentReferrer != userReferrerAddress) {\n', '                users[referrerAddress].x3Matrix[level].currentReferrer = userReferrerAddress;\n', '            }\n', '            \n', '            users[referrerAddress].x3Matrix[level].refreshingCount++;\n', '            emit refresh(referrerAddress, userReferrerAddress, userAddress, 1, level);\n', '            upliftX3Referrer(referrerAddress, userReferrerAddress, giver, level);\n', '        } else {\n', '            sendTokens(owner, giver, 1, level);\n', '            users[owner].x3Matrix[level].refreshingCount++;\n', '            emit refresh(owner, address(0), userAddress, 1, level);\n', '        }\n', '    }\n', '\n', '    function upliftX6Referrer(address userAddress, address referrerAddress,address giver, uint8 level) private {\n', '        require(users[referrerAddress].activeX6Levels[level], "500. Referrer level is inactive");\n', '        \n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\n', '            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\n', '            \n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\n', '\n', '            if (referrerAddress == owner) {\n', '                return sendTokens(referrerAddress, giver, 2, level);\n', '            }\n', '            \n', '            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \n', '            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \n', '            \n', '            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\n', '            \n', '            if ((len == 2) && \n', '                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\n', '                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }  else if ((len == 1 || len == 2) &&\n', '                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 3);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 4);\n', '                }\n', '            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\n', '                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 5);\n', '                } else {\n', '                    emit NewUserPlace(userAddress, ref, 2, level, 6);\n', '                }\n', '            }\n', '\n', '            return upliftX6ReferrerSecondLevel(userAddress, ref,giver, level);\n', '        }\n', '        \n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\n', '\n', '        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\n', '            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \n', '                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\n', '                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\n', '                users[referrerAddress].x6Matrix[level].closedPart)) {\n', '\n', '                upliftX6(userAddress, referrerAddress, level, true);\n', '                return upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver, level);\n', '            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \n', '                users[referrerAddress].x6Matrix[level].closedPart) {\n', '                upliftX6(userAddress, referrerAddress, level, true);\n', '                return upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver, level);\n', '            } else {\n', '                upliftX6(userAddress, referrerAddress, level, false);\n', '                return upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver, level);\n', '            }\n', '        }\n', '\n', '        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\n', '            upliftX6(userAddress, referrerAddress, level, false);\n', '            return upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver ,level);\n', '        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\n', '            upliftX6(userAddress, referrerAddress, level, true);\n', '            return upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver ,level);\n', '        }\n', '        \n', '        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\n', '            upliftX6(userAddress, referrerAddress, level, false);\n', '        } else {\n', '            upliftX6(userAddress, referrerAddress, level, true);\n', '        }\n', '        \n', '        upliftX6ReferrerSecondLevel(userAddress, referrerAddress,giver, level);\n', '    }\n', '\n', '    function upliftX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\n', '        if (!x2) {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\n', '        } else {\n', '            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\n', '            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\n', '            //set current level\n', '            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\n', '        }\n', '    }\n', '    \n', '    function upliftX6ReferrerSecondLevel(address userAddress, address referrerAddress,address giver ,uint8 level) private {\n', '        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\n', '            return sendTokens(referrerAddress, giver, 2, level);\n', '        }\n', '        \n', '        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\n', '        \n', '        if (x6.length == 2) {\n', '            if (x6[0] == referrerAddress ||\n', '                x6[1] == referrerAddress) {\n', '                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '            } else if (x6.length == 1) {\n', '                if (x6[0] == referrerAddress) {\n', '                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\n', '                }\n', '            }\n', '        }\n', '        \n', '        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\n', '        users[referrerAddress].x6Matrix[level].closedPart = address(0);\n', '\n', '        if (!users[referrerAddress].activeX6Levels[level+1] && level != FINAL_LEVEL) {\n', '            users[referrerAddress].x6Matrix[level].blocked = true;\n', '        }\n', '\n', '        users[referrerAddress].x6Matrix[level].refreshingCount++;\n', '        \n', '        if (referrerAddress != owner) {\n', '            address userReferrerAddress = findUserX6Referrer(referrerAddress, level);\n', '\n', '            emit refresh(referrerAddress, userReferrerAddress, userAddress, 2, level);\n', '            upliftX6Referrer(referrerAddress, userReferrerAddress,giver, level);\n', '        } else {\n', '            emit refresh(owner, address(0), userAddress, 2, level);\n', '            sendTokens(owner, giver, 2, level);\n', '        }\n', '    }\n', '    \n', '    function findUserX3Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX3Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            }\n', '            \n', '            userAddress = users[userAddress].referrer;\n', '        }\n', '    }\n', '    \n', '    function findUserX6Referrer(address userAddress, uint8 level) public view returns(address) {\n', '        while (true) {\n', '            if (users[users[userAddress].referrer].activeX6Levels[level]) {\n', '                return users[userAddress].referrer;\n', '            }\n', '            \n', '            userAddress = users[userAddress].referrer;\n', '        }\n', '    }\n', '        \n', '    function usersActiveX3Levels(address userAddress, uint8 level) public view returns(bool) {\n', '        return users[userAddress].activeX3Levels[level];\n', '    }\n', '\n', '    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\n', '        return users[userAddress].activeX6Levels[level];\n', '    }\n', '    function userDetails(address user) public view returns(uint256, uint256){\n', '        return(users[user].dividends,users[user].totalwithdrawn);\n', '    }\n', '\n', '    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool,uint256) {\n', '        return (users[userAddress].x3Matrix[level].currentReferrer,\n', '                users[userAddress].x3Matrix[level].referrals,\n', '                users[userAddress].x3Matrix[level].blocked,\n', '                //users[userAddress].x3Matrix[level].time,\n', '                users[userAddress].x3Matrix[level].leveldividends);\n', '\n', '    }\n', '\n', '    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address, uint256) {\n', '        return (users[userAddress].x6Matrix[level].currentReferrer,\n', '                users[userAddress].x6Matrix[level].firstLevelReferrals,\n', '                users[userAddress].x6Matrix[level].secondLevelReferrals,\n', '                users[userAddress].x6Matrix[level].blocked,\n', '                users[userAddress].x6Matrix[level].closedPart,\n', '               // users[userAddress].x6Matrix[level].time,\n', '                users[userAddress].x6Matrix[level].leveldividends);\n', '    }\n', '    \n', '    function isUserExists(address user) public view returns (bool) {\n', '        return (users[user].id != 0);\n', '    }\n', '\n', '    function findTokenReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\n', '        address receiver = userAddress;\n', '        bool isExtraDividends;\n', '        if (matrix == 1) {\n', '            while (true) {\n', '                if (users[receiver].x3Matrix[level].blocked) {\n', '                    emit MissedTokenReceive(receiver, _from, 1, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x3Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        } else {\n', '            while (true) {\n', '                if (users[receiver].x6Matrix[level].blocked) {\n', '                    emit MissedTokenReceive(receiver, _from, 2, level);\n', '                    isExtraDividends = true;\n', '                    receiver = users[receiver].x6Matrix[level].currentReferrer;\n', '                } else {\n', '                    return (receiver, isExtraDividends);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function sendTokens(address userAddress, address _from, uint8 matrix, uint8 level) private {\n', '        (address receiver, bool isExtraDividends) = findTokenReceiver(userAddress, _from, matrix, level);\n', '\n', '        _token.transferFrom(_from, address(uint160(receiver)), levelPrice[level]);\n', '        \n', '        if (isExtraDividends) {\n', '            emit sendExtraTokens(_from, receiver, matrix, level);\n', '        }\n', '    }\n', '    \n', '    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    function getdividends(address user) public returns(bool){\n', '        uint256 amount;\n', '                for(uint8 i =1; i<=12; i++){\n', '                amount = levelPrice[i];\n', '                if(usersActiveX3Levels(user, i)){\n', '                    uint256 deposittime = users[user].x3Matrix[i].time;\n', '                    uint256 lastpayout = users[user].lastpayout;\n', '                    uint256 dividends = calculateDividends(amount, deposittime, lastpayout);\n', '                    users[user].x3Matrix[i].leveldividends = dividends;\n', '                    users[user].dividends += dividends;\n', '                }                 \n', '                if(usersActiveX6Levels(user, i)) {\n', '                    uint256 deposittime = users[user].x6Matrix[i].time;\n', '                    uint256 lastpayout = users[user].lastpayout;\n', '                    uint256 dividends = calculateDividends(amount, deposittime, lastpayout);\n', '                    users[user].x6Matrix[i].leveldividends = dividends;\n', '                    users[user].dividends += dividends;\n', '                    }   \n', '            } \n', '        return true;    \n', '    }\n', '\n', '    function calculateDividends(uint256 amount, uint256 depositTime, uint256 lastPayout) internal view returns (uint256) {\n', '       uint256 dividends;\n', '       uint256 end = depositTime + 8640000;\n', '       uint256 from = lastPayout > depositTime ? lastPayout : depositTime;\n', '       uint256 to = uint256(block.timestamp) > end ? end : uint256(block.timestamp);\n', '       uint256 noOfSec = to - from;\n', '       dividends = amount*noOfSec/1000;\n', '       return dividends/86400;\n', '   }\n', '\n', '   function withdraw(address user) public payable returns(bool){\n', '        \n', '        address recepient = user;\n', '        address _from = owner;\n', '        uint256 amount = users[recepient].dividends;\n', '        _token.transferFrom(_from, address(uint160(recepient)), amount);\n', '        users[recepient].lastpayout = block.timestamp;\n', '        users[recepient].totalwithdrawn += amount;\n', '        users[recepient].dividends = 0;           \n', '        return true;\n', '    }           \n', '}']