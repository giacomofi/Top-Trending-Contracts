['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\n', '\n', '// \n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev External interface of AccessControl declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControl {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n', '    function grantRole(bytes32 role, address account) external;\n', '    function revokeRole(bytes32 role, address account) external;\n', '    function renounceRole(bytes32 role, address account) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', " * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n", ' * members except through off-chain means by accessing the contract event logs. Some\n', ' * applications may benefit from on-chain enumerability, for those cases see\n', ' * {AccessControlEnumerable}.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context, IAccessControl, ERC165 {\n', '    struct RoleData {\n', '        mapping (address => bool) members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Modifier that checks that an account has a specific role. Reverts\n', '     * with a standardized message including the required role.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    modifier onlyRole(bytes32 role) {\n', '        _checkRole(role, _msgSender());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControl).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view override returns (bool) {\n', '        return _roles[role].members[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Revert with a standard message if `account` is missing `role`.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     */\n', '    function _checkRole(bytes32 role, address account) internal view {\n', '        if(!hasRole(role, account)) {\n', '            revert(string(abi.encodePacked(\n', '                "AccessControl: account ",\n', '                Strings.toHexString(uint160(account), 20),\n', '                " is missing role ",\n', '                Strings.toHexString(uint256(role), 32)\n', '            )));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (!hasRole(role, account)) {\n', '            _roles[role].members[account] = true;\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (hasRole(role, account)) {\n', '            _roles[role].members[account] = false;\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/TokenInterface.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface TokenInterface{\n', '    function burnFrom(address _from, uint _amount) external;\n', '    function mintTo(address _to, uint _amount) external;\n', '}\n', '// File: contracts/LiquidityMining.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '// Author: Matt Hooft \n', '// https://github.com/Civitas-Fundamenta\n', '// [email\xa0protected])\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquidityMining is Ownable, AccessControl {\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    TokenInterface private fundamenta;\n', '    \n', '    //-------RBAC---------------------------\n', '\n', '    bytes32 public constant _ADMIN = keccak256("_ADMIN");\n', '    bytes32 public constant _REMOVAL = keccak256("_REMOVAL");\n', '    bytes32 public constant _MOVE = keccak256("_MOVE");\n', '    bytes32 public constant _RESCUE = keccak256("_RESCUE");\n', '    \n', '    //------------Token Vars-------------------\n', '    \n', '    bool public paused;\n', '    bool public addDisabled;\n', '    bool public removePositionOnly;\n', '    \n', '    uint private lockPeriod0;\n', '    uint private lockPeriod1;\n', '    uint private lockPeriod2;\n', '    \n', '    uint private lockPeriodBPScale;\n', '    \n', '    uint private preYieldDivisor;\n', '    \n', '    address private defaultAdmin = 0x82Ab0c69b6548e6Fd61365FeCc3256BcF70dc448;\n', '    \n', '    /**\n', '     * `periodCalc` uses blocks instead of timestamps\n', '     * as a way to determine days. approx. 6500 blocks a day\n', '     *  are mined on the ethereum network. \n', '     * `periodCalc` can also be configured if this were ever \n', '     * needed to be changed.  It also helps to lower it during \n', '     * testing if you are looking at using any of this code.\n', '     */\n', '     \n', '    uint public periodCalc;\n', '    \n', '    //-------Structs/Mappings/Arrays-------------\n', '    \n', '    /**\n', '     * struct to keep track of Liquidity Providers who have \n', '     * chosen to stake UniswapV2 Liquidity Pool tokens towards \n', '     * earning FMTA. \n', '     */ \n', '    \n', '    struct LiquidityProviders {\n', '        address Provider;\n', '        uint UnlockHeight;\n', '        uint LockedAmount;\n', '        uint Days;\n', '        uint UserBP;\n', '        uint TotalRewardsPaid;\n', '    }\n', '    \n', '    /**\n', '     * struct to keep track of liquidity pools, total\n', '     * rewards paid and total value locked in said pools.\n', '     */\n', '    \n', '    struct PoolInfo {\n', '        IERC20 ContractAddress;\n', '        uint TotalRewardsPaidByPool;\n', '        uint TotalLPTokensLocked;\n', '        uint PoolBonus;\n', '        uint lockPeriod0BasisPoint;\n', '        uint lockPeriod1BasisPoint;\n', '        uint lockPeriod2BasisPoint;\n', '        uint compYield0;\n', '        uint compYield1;\n', '        uint compYield2;\n', '        uint maxPoolBP;\n', '    }\n', '    \n', '    /**\n', '     * PoolInfo is tracked as an array. The length/index \n', '     * of the array will be used as the variable `_pid` (Pool ID) \n', '     * throughout the contract.\n', '     */\n', '    \n', '    PoolInfo[] public poolInfo;\n', '    \n', '    /**\n', '     * mapping to keep track of the struct LiquidityProviders \n', '     * mapeed to user addresses but also maps it to `uint _pid`\n', '     * this makes tracking the same address across multiple pools \n', '     * with different positions possible as _pid will also be the \n', '     * index of PoolInfo[]\n', '     */\n', '    \n', '    mapping (uint => mapping (address => LiquidityProviders)) public provider;\n', '\n', '    //-------Events--------------\n', '\n', '    event PositionAdded (address _account, uint _amount, uint _blockHeight);\n', '    event PositionRemoved (address _account, uint _amount, uint _blockHeight);\n', '    event PositionForceRemoved (address _account, uint _amount, uint _blockHeight);\n', '    event PositionCompounded (address _account, uint _amountAdded, uint _blockHeight);\n', '    event ETHRescued (address _movedBy, address _movedTo, uint _amount, uint _blockHeight);\n', '    event ERC20Movement (address _movedBy, address _movedTo, uint _amount, uint _blockHeight);\n', '    \n', '    \n', '    /**\n', '     * constructor sets initial values for contract intiialization\n', '     */ \n', '    \n', '    constructor() {\n', '        periodCalc = 6500;\n', '        lockPeriodBPScale = 10000;\n', '        preYieldDivisor = 2;\n', '        lockPeriod0 = 5;\n', '        lockPeriod1 = 10;\n', '        lockPeriod2 = 15;\n', '        removePositionOnly = false;\n', '        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdmin); //God Mode. DEFAULT_ADMIN_ROLE Must Require _ADMIN ROLE Still to execute _ADMIN functions.\n', '    }\n', '     \n', '     //------------State modifiers---------------------\n', '     \n', '      modifier unpaused() {\n', '        require(!paused, "LiquidityMining: Contract is Paused");\n', '        _;\n', '    }\n', '    \n', '     modifier addPositionNotDisabled() {\n', '        require(!addDisabled, "LiquidityMining: Adding a Position is currently disabled");\n', '        _;\n', '    }\n', '    \n', '    modifier remPosOnly() {\n', '        require(!removePositionOnly, "LiquidityMining: Only Removing a position is allowed at the moment");\n', '        _;\n', '    }\n', '    \n', '    //----------Modifier Functions----------------------\n', '\n', '    function setPaused(bool _paused) external {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        paused = _paused;\n', '    }\n', '    \n', '    function setRemovePosOnly(bool _removeOnly) external {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        removePositionOnly = _removeOnly;\n', '    }\n', '    \n', '      function disableAdd(bool _addDisabled) external {\n', '          require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        addDisabled = _addDisabled;\n', '    }\n', '    \n', '    //------------Token Functions----------------------\n', '    \n', '    /**\n', '     * functions to add and remove liquidity Pool pairs to allow users to\n', '     * stake the pools LP Tokens towards earnign rewards. Can only\n', '     * be called by accounts with the `_ADMIN` role and should only \n', '     * be added once. The index at which the pool pair is stored \n', '     * will determine the pools `_pid`. Note if you remove a pool the \n', '     * index remians but is just left empty making the _pid return\n', '     * zero value if called.\n', '     */\n', '    \n', '    function addLiquidityPoolToken(\n', '        IERC20 _lpTokenAddress, \n', '        uint _bonus, \n', '        uint _lpbp0, \n', '        uint _lpbp1, \n', '        uint _lpbp2, \n', '        uint _cy0, \n', '        uint _cy1, \n', '        uint _cy2,\n', '        uint _mbp) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        poolInfo.push(PoolInfo({\n', '            ContractAddress: _lpTokenAddress,\n', '            TotalRewardsPaidByPool: 0,\n', '            TotalLPTokensLocked: 0,\n', '            PoolBonus: _bonus,\n', '            lockPeriod0BasisPoint: _lpbp0,\n', '            lockPeriod1BasisPoint: _lpbp1,\n', '            lockPeriod2BasisPoint: _lpbp2,\n', '            compYield0: _cy0,\n', '            compYield1: _cy1,\n', '            compYield2: _cy2,\n', '            maxPoolBP: _mbp\n', '        }));\n', '  \n', '    }\n', '\n', '    \n', '    function removeLiquidityPoolToken(uint _pid) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        delete poolInfo[_pid];\n', '        \n', '    }\n', '    \n', '    //------------Information Functions------------------\n', '    \n', '    /**\n', '     * return the length of the pool array\n', '     */\n', '    \n', '     function poolLength() external view returns (uint) {\n', '        return poolInfo.length;\n', '    }\n', '    \n', '    /**\n', '     * function to return the contracts balances of LP Tokens\n', '     * staked from different Uniswap pools.\n', '     */\n', '\n', '    function contractBalanceByPoolID(uint _pid) public view returns (uint _balance) {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        address ca = address(this);\n', '        return pool.ContractAddress.balanceOf(ca);\n', '    }\n', '    \n', '    /**\n', '     * funtion that returns a callers staked position in a pool \n', '     * using `_pid` as an argument.\n', '     */\n', '    \n', '    function accountPosition(address _account, uint _pid) public view returns (\n', '        address _accountAddress, \n', '        uint _unlockHeight, \n', '        uint _lockedAmount, \n', '        uint _lockPeriodInDays, \n', '        uint _userDPY, \n', '        IERC20 _lpTokenAddress,\n', '        uint _totalRewardsPaidFromPool\n', '    ) {\n', '        LiquidityProviders memory p = provider[_pid][_account];\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        return (\n', '            p.Provider, \n', '            p.UnlockHeight, \n', '            p.LockedAmount, \n', '            p.Days, \n', '            p.UserBP, \n', '            pool.ContractAddress,\n', '            pool.TotalRewardsPaidByPool\n', '        );\n', '    }\n', '    \n', '    /**\n', '     * funtion that returns a true or false regarding whether\n', '     * an account as a position in a pool.  Takes the account address\n', '     * and `_pid` as arguments\n', '     */\n', '    \n', '    function hasPosition(address _userAddress, uint _pid) public view returns (bool _hasPosition) {\n', '        LiquidityProviders memory p = provider[_pid][_userAddress];\n', '        if(p.LockedAmount == 0)\n', '        return false;\n', '        else \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * function to show current lock periods.\n', '     */\n', '    \n', '    function showCurrentLockPeriods() external view returns (\n', '        uint _lockPeriod0, \n', '        uint _lockPeriod1, \n', '        uint _lockPeriod2\n', '    ) {\n', '        return (\n', '            lockPeriod0, \n', '            lockPeriod1, \n', '            lockPeriod2\n', '        );\n', '    }\n', '    \n', '    //-----------Set Functions----------------------\n', '    \n', '    /**\n', '     * function to set the token that will be minting rewards \n', '     * for Liquidity Providers.\n', '     */\n', '    \n', '    function setTokenContract(TokenInterface _fmta) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        fundamenta = _fmta;\n', '    }\n', '    \n', '    /**\n', '     * allows accounts with the _ADMIN role to set new lock periods.\n', '     */\n', '    \n', '    function setLockPeriods(uint _newPeriod0, uint _newPeriod1, uint _newPeriod2) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        require(_newPeriod2 > _newPeriod1 && _newPeriod1 > _newPeriod0);\n', '        lockPeriod0 = _newPeriod0;\n', '        lockPeriod1 = _newPeriod1;\n', '        lockPeriod2 = _newPeriod2;\n', '    }\n', '    \n', '    /**\n', '     * allows contract owner to set a new `periodCalc`\n', '     */\n', '    \n', '    function setPeriodCalc(uint _newPeriodCalc) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        periodCalc = _newPeriodCalc;\n', '    }\n', '\n', '    /**\n', '     * set of functions to set parameters regarding \n', '     * lock periods and basis points which are used to  \n', '     * calculate a users daily yield. Can only be called \n', '     * by contract _ADMIN.\n', '     */\n', '    \n', '    function setLockPeriodBasisPoints (\n', '        uint _newLockPeriod0BasisPoint, \n', '        uint _newLockPeriod1BasisPoint, \n', '        uint _newLockPeriod2BasisPoint,\n', '        uint _pid) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        poolInfo[_pid].lockPeriod0BasisPoint = _newLockPeriod0BasisPoint;\n', '        poolInfo[_pid].lockPeriod1BasisPoint = _newLockPeriod1BasisPoint;\n', '        poolInfo[_pid].lockPeriod2BasisPoint = _newLockPeriod2BasisPoint;\n', '    }\n', '    \n', '    function setLockPeriodBPScale(uint _newLockPeriodScale) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        lockPeriodBPScale = _newLockPeriodScale;\n', '    \n', '    }\n', '\n', '    function setMaxUserBP(uint _newMaxPoolBP, uint _pid) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.maxPoolBP = _newMaxPoolBP;\n', '    }\n', '    \n', '    function setCompoundYield (\n', '        uint _newCompoundYield0, \n', '        uint _newCompoundYield1, \n', '        uint _newCompoundYield2,\n', '        uint _pid) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        poolInfo[_pid].compYield0 = _newCompoundYield0;\n', '        poolInfo[_pid].compYield1 = _newCompoundYield1;\n', '        poolInfo[_pid].compYield2 = _newCompoundYield2;\n', '        \n', '    }\n', '    \n', '    function setPoolBonus(uint _pid, uint _bonus) public {\n', '        require(hasRole(_ADMIN, msg.sender));\n', '        poolInfo[_pid].PoolBonus = _bonus;\n', '    }\n', '\n', '    function setPreYieldDivisor(uint _newDivisor) public {\n', '        require(hasRole(_ADMIN, msg.sender),"LiquidityMining: Message Sender must be _ADMIN");\n', '        preYieldDivisor = _newDivisor;\n', '    }\n', '    \n', '    //-----------Position/Rewards Functions------------------\n', '    \n', '    /**\n', '     * this function allows a user to add a liquidity Staking\n', '     * position.  The user will need to choose one of the three\n', '     * configured lock Periods. Users may add to the position \n', '     * only once per lock period.\n', '     */\n', '    \n', '    function addPosition(uint _lpTokenAmount, uint _lockPeriod, uint _pid) public addPositionNotDisabled unpaused{\n', '        LiquidityProviders storage p = provider[_pid][msg.sender];\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        address ca = address(this);\n', '        require(p.LockedAmount == 0, "LiquidityMining: This account already has a position");\n', '        if(_lockPeriod == lockPeriod0) {\n', '            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\n', '            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod0BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\n', '            provider[_pid][msg.sender] = LiquidityProviders (\n', '                msg.sender, \n', '                block.number.add(periodCalc.mul(lockPeriod0)), \n', '                _lpTokenAmount, \n', '                lockPeriod0, \n', '                pool.lockPeriod0BasisPoint,\n', '                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\n', '            );\n', '            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\n', '            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\n', '        } else if (_lockPeriod == lockPeriod1) {\n', '            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\n', '            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod1BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\n', '            provider[_pid][msg.sender] = LiquidityProviders (\n', '                msg.sender, \n', '                block.number.add(periodCalc.mul(lockPeriod1)), \n', '                _lpTokenAmount, \n', '                lockPeriod1, \n', '                pool.lockPeriod1BasisPoint,\n', '                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\n', '            );\n', '            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\n', '            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\n', '        } else if (_lockPeriod == lockPeriod2) {\n', '            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\n', '            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod2BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\n', '            provider[_pid][msg.sender] = LiquidityProviders (\n', '                msg.sender, \n', '                block.number.add(periodCalc.mul(lockPeriod2)), \n', '                _lpTokenAmount, \n', '                lockPeriod2, \n', '                pool.lockPeriod2BasisPoint,\n', '                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\n', '            );\n', '            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\n', '            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\n', '        }else revert("LiquidityMining: Incompatible Lock Period");\n', '      emit PositionAdded (\n', '          msg.sender,\n', '          _lpTokenAmount,\n', '          block.number\n', '      );\n', '    }\n', '    \n', '    /**\n', '     * allows a user to remove a liquidity staking position\n', '     * and will withdraw any pending rewards. User must withdraw \n', '     * the entire position.\n', '     */\n', '    \n', '    function removePosition(uint _pid) external unpaused {\n', '        LiquidityProviders storage p = provider[_pid][msg.sender];\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        //require(_lpTokenAmount == p.LockedAmount, "LiquidyMining: Either you do not have a position or you must remove the entire amount.");\n', '        require(p.UnlockHeight < block.number, "LiquidityMining: Not Long Enough");\n', '            pool.ContractAddress.safeTransfer(msg.sender, p.LockedAmount);\n', '            uint yield = calculateUserDailyYield(_pid);\n', '            fundamenta.mintTo(msg.sender, yield);\n', '            provider[_pid][msg.sender] = LiquidityProviders (\n', '                msg.sender, \n', '                0, \n', '                p.LockedAmount.sub(p.LockedAmount),\n', '                0, \n', '                0,\n', '                p.TotalRewardsPaid.add(yield)\n', '            );\n', '        pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '        pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.sub(p.LockedAmount);\n', '        emit PositionRemoved(\n', '        msg.sender,\n', '        p.LockedAmount,\n', '        block.number\n', '      );\n', '    }\n', '\n', '    /**\n', '     * function to forcibly remove a users position.  This \n', '     * is required due to the fact that the basis points used to \n', '     * calculate user DPY will be constantly changing.\n', '     * We will need to forceibly remove positions of lazy (or malicious)\n', '     * users who will try to take advantage of DPY being lowered instead \n', '     * of raised and maintining thier current return levels.\n', '     */\n', '    \n', '    function forcePositionRemoval(uint _pid, address _account) public {\n', '        require(hasRole(_REMOVAL, msg.sender));\n', '        LiquidityProviders storage p = provider[_pid][_account];\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint yield = p.LockedAmount.mul(p.UserBP.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(p.Days);\n', '        fundamenta.mintTo(_account, yield);\n', '        uint _lpTokenAmount = p.LockedAmount;\n', '        pool.ContractAddress.safeTransfer(_account, _lpTokenAmount);\n', '        uint _newLpTokenAmount = p.LockedAmount.sub(_lpTokenAmount);\n', '        provider[_pid][_account] = LiquidityProviders (\n', '            _account, \n', '            0, \n', '            _newLpTokenAmount, \n', '            0, \n', '            0,\n', '            p.TotalRewardsPaid.add(yield)\n', '        );\n', '        pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '        pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.sub(_lpTokenAmount);\n', '        emit PositionForceRemoved(\n', '        msg.sender,\n', '        _lpTokenAmount,\n', '        block.number\n', '      );\n', '    \n', '    }\n', '\n', '    /**\n', '     * calculates a users daily yield. DY is calculated\n', '     * using basis points and the lock period as a multiplier.\n', '     * Basis Points and the scale used are configurble by accounts\n', '     * or contracts that have the _ADMIN Role\n', '     */\n', '    \n', '    function calculateUserDailyYield(uint _pid) public view returns (uint _dailyYield) {\n', '        LiquidityProviders memory p = provider[_pid][msg.sender];\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        uint dailyYield = p.LockedAmount.mul(p.UserBP.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(p.Days);\n', '        return dailyYield;\n', '    }\n', '    \n', '    /**\n', '     * allow user to withdraw thier accrued yield. Reset \n', '     * the lock period to continue liquidity mining and apply\n', '     * CDPY to DPY. Allow user to add more stake if desired\n', '     * in the process. Once a user has reached the `maxUserBP`\n', '     * DPY will no longer increase.\n', '     */\n', '    \n', '    function withdrawAccruedYieldAndAdd(uint _pid, uint _lpTokenAmount) public remPosOnly unpaused{\n', '        LiquidityProviders storage p = provider[_pid][msg.sender];\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint yield = calculateUserDailyYield(_pid);\n', '        require(removePositionOnly == false);\n', '        require(p.UnlockHeight < block.number);\n', '        if (_lpTokenAmount != 0) {\n', '            if(p.Days == lockPeriod0) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod0)), \n', '                    _lpTokenAmount.add(p.LockedAmount), \n', '                    lockPeriod0, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield0),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            } else if (p.Days == lockPeriod1) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                    msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod1)),\n', '                    _lpTokenAmount.add(p.LockedAmount), \n', '                    lockPeriod1, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield1),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            } else if (p.Days == lockPeriod2) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                    msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod2)), \n', '                    _lpTokenAmount.add(p.LockedAmount), \n', '                    lockPeriod2, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield2),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\n', '            } else revert("LiquidityMining: Incompatible Lock Period");\n', '        } else if (_lpTokenAmount == 0) {\n', '            if(p.Days == lockPeriod0) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                    msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod0)), \n', '                    p.LockedAmount, \n', '                    lockPeriod0, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield0),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '            } else if (p.Days == lockPeriod1) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                    msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod1)), \n', '                    p.LockedAmount, \n', '                    lockPeriod1, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield1),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '            } else if (p.Days == lockPeriod2) {\n', '                fundamenta.mintTo(msg.sender, yield);\n', '                provider[_pid][msg.sender] = LiquidityProviders (\n', '                    msg.sender, \n', '                    block.number.add(periodCalc.mul(lockPeriod2)), \n', '                    p.LockedAmount, \n', '                    lockPeriod2, \n', '                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield2),\n', '                    p.TotalRewardsPaid.add(yield)\n', '                );\n', '                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\n', '            }else revert("LiquidityMining: Incompatible Lock Period");\n', '        }else revert("LiquidityMining: ?" );\n', '         emit PositionRemoved (\n', '             msg.sender,\n', '             _lpTokenAmount,\n', '             block.number\n', '         );\n', '    }\n', '    \n', '    //-------Movement Functions---------------------\n', '\n', '    \n', '    function moveERC20(address _ERC20, address _dest, uint _ERC20Amount) public {\n', '        require(hasRole(_MOVE, msg.sender));\n', '        IERC20(_ERC20).safeTransfer(_dest, _ERC20Amount);\n', '        emit ERC20Movement (\n', '            msg.sender,\n', '            _dest,\n', '            _ERC20Amount,\n', '            block.number\n', '        );\n', '\n', '    }\n', '\n', '    function ethRescue(address payable _dest, uint _etherAmount) public {\n', '        require(hasRole(_RESCUE, msg.sender));\n', '        _dest.transfer(_etherAmount);\n', '        emit ETHRescued (\n', '            msg.sender,\n', '            _dest,\n', '            _etherAmount,\n', '            block.number\n', '        );\n', '    }\n', '    \n', '}']