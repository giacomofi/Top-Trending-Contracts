['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-14\n', '*/\n', '\n', '//SPDX-License-Identifier: TBD\n', 'pragma solidity =0.7.4;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface ICoinSwapERC20 is IERC20 {\n', '    event Swap(address indexed,uint192,uint192,address indexed); \n', '    event Sync(uint);\n', '    event Mint(address indexed sender, uint192);\n', '    event Burn(address indexed sender, uint192, address indexed to);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', 'interface ICoinSwapCallee {\n', '    function coinswapCall(address sender, uint amount0,uint amount1, bytes calldata data) external;\n', '}\n', '\n', 'contract CoinSwapERC20 is ICoinSwapERC20 {\n', '    using SafeMath for uint;\n', '\n', "    string public constant override name = 'CoinSwap V1';\n", "    string public constant override symbol = 'CSWPLT';//CoinSwap Liquidity Token\n", '    uint8 public constant override decimals = 18;\n', '    uint  public override totalSupply;\n', '    mapping(address => uint) public override balanceOf;\n', '    mapping(address => mapping(address => uint)) public override allowance;\n', '\n', '    bytes32 public override DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public override nonces;\n', '\n', '    constructor() {\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external override returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n', "        require(deadline >= block.timestamp, 'CSWP:01');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'CSWP:02');\n", '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', '\n', 'contract CoinSwapPair is CoinSwapERC20  {\n', '    using SafeMath for uint;\n', '    \n', '    address public  patron;\n', '    address public  factory;\n', '    address public  token0; // token0 < token1\n', '    address public  token1;\n', '    uint224 private reserve; //reserve0(96) | reserve1(96) | blockTimestampLast(32)\n', '    uint private unlocked = 1;\n', '    uint public  priceCumulative; //=Delta_y/Delta_x: 96-fractional bits; allows overflow\n', '    uint224 private circleData;\n', '  \n', '    modifier lock() {\n', "        require(unlocked == 1, 'CSWP:1');\n", '    \tunlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '    \n', '    constructor() {factory = msg.sender; patron=tx.origin;}\n', '    function initialize(address _token0, address _token1, uint224 circle) external  {\n', '        //circle needs to in order of token0<token1\n', "        require(circleData == 0, 'CSWP:2');\n", '        token0 = _token0;\n', '        token1 = _token1;\n', '        circleData = circle;  // validity of circle should be checked by CoinSwapFactory\n', '    }\n', '\n', '    function ICO(uint224 _circleData)  external  {\n', "        require( (tx.origin==patron) && (circleData >> 216) >0, 'CSWP:3');//to close ICO, set (circleData >> 216) = 0x00\n", '        circleData = _circleData;\n', '    }\n', '\n', '    function setPatron(address _patron)  external  {\n', "        require( (tx.origin==patron), 'CSWP:11');\n", '        patron = _patron;\n', '    }\n', '    \n', '    function getReserves() public  view returns (uint224 _reserve, uint224 _circleData) {\n', '        _reserve = reserve;\n', '        _circleData = circleData;\n', '    }\n', '    \n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CSWP:6');\n", '    }\n', '\n', '    function revisemu(uint192 balance) private returns (uint56 _mu) {\n', "        require(balance>0, 'CSWP:4');\n", '    \tuint224 _circleData = circleData;\n', '        uint X = uint(balance>>96) *      uint16(_circleData >> 72)* uint56(_circleData >> 160);\n', '        uint Y = uint(uint96(balance)) *  uint16(_circleData >> 56)* uint56(_circleData >> 104);\n', '        uint XpY =  X + Y;\n', '        uint X2pY2 = (X*X) + (Y*Y);\n', '       \tX = XpY*100;\n', '       \tY = (X*X)  + X2pY2 * (10000+ uint16(_circleData>>88));\n', '        uint Z= X2pY2 * 20000;\n', "    \trequire(Y>Z, 'CSWP:5');\n", '        Y = SQRT.sqrt(Y-Z); \n', '        Z = Y > X ? X + Y : X-Y;\n', '        _mu =  uint56(1)+uint56(((10**32)*Z) / X2pY2);\n', '        circleData = (_circleData & 0xFF_FFFFFFFFFFFFFF_FFFFFFFFFFFFFF_FFFF_FFFF_FFFF_00000000000000) | uint224(_mu);\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(uint balance) private {\n', '\t    uint32 lastTime = uint32(balance);\t\n', '        uint32 deltaTime = uint32(block.timestamp) -lastTime ;\n', '        if (deltaTime>0 && lastTime>0) {\n', '    \t    uint circle = circleData;\n', '            uint lambda0 = uint16(circle >> 72);\n', '            uint lambda1 = uint16(circle >> 56);\n', '\t        uint CmulambdaX = 10**34 - (balance>>128)     *lambda0*uint56(circle)*uint56(circle >> 160);\n', '            uint CmulambdaY = 10**34 - uint96(balance>>32)*lambda1*uint56(circle)*uint56(circle >> 104); \n', '\t        priceCumulative += (((lambda0*CmulambdaX)<< 96)/(lambda1*CmulambdaY)) * deltaTime;  \n', '        }\n', '        reserve = uint224(balance +deltaTime);\n', '        emit Sync(balance>>32);\n', '    }\n', '\n', '    function _mintFee(uint56 mu0) private returns (uint56 mu) {\n', '        address feeTo = CoinSwapFactory(factory).feeTo();\n', '        mu=revisemu(uint192(reserve>>32));\n', '        if (mu0>mu) _mint(feeTo, totalSupply.mul(uint(mu0-mu)) / (5*mu0+mu));\n', '    }\n', '\n', '    function mint(address to) external  lock returns (uint liquidity) {\n', '        uint224 circle = circleData;\n', '        uint _totalSupply = totalSupply; \n', '        uint224 _reserve = reserve;\n', '        uint96 reserve0 = uint96(_reserve >>128);\n', '        uint96 reserve1 = uint96(_reserve >>32);\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint scaledBalance0 = balance0* uint56(circle >> 160);\n', '        uint scaledBalance1 = balance1* uint56(circle >> 104);\n', '        require((scaledBalance0< 2**96) && (scaledBalance1< 2**96) \n', "            && ( scaledBalance0 >=10**16 || scaledBalance1 >=10**16), 'CSWP:7');\n", '        if (_totalSupply == 0) { \n', '            uint lambda0 = uint16(circle >> 72);\n', '            uint lambda1 = uint16(circle >> 56);\n', '            liquidity = (scaledBalance0 * lambda0 + scaledBalance1 * lambda1) >> 1;\n', '    \t    revisemu(uint192((balance0<<96)|balance1));\n', '        } else { \n', '            uint56 mu0=_mintFee(uint56(circle));\n', '            _totalSupply = totalSupply;\n', '    \t    (uint mu, uint _totalS)=(0,0);\n', '\t        if (reserve0==0) {\n', '\t            mu=(uint(mu0) * reserve1) / balance1;\n', '\t            _totalS =  _totalSupply.mul(balance1)/reserve1;\n', '\t        } else if (reserve1==0) {\n', '\t            mu=(uint(mu0) * reserve0) / balance0;\n', '\t            _totalS = _totalSupply.mul(balance0)/reserve0;\n', '\t        } else {\n', '\t            (mu, _totalS) = (balance0 * reserve1) < (balance1 * reserve0)?\n', '\t\t        ((uint(mu0) * reserve0) / balance0, _totalSupply.mul(balance0)/reserve0) :\n', '\t\t        ((uint(mu0) * reserve1) / balance1, _totalSupply.mul(balance1)/reserve1) ;\n', '\t        }\n', '            liquidity = _totalS - _totalSupply;\n', '            circleData = (circle & 0xFF_FFFFFFFFFFFFFF_FFFFFFFFFFFFFF_FFFF_FFFF_FFFF_00000000000000) | uint224(mu);\n', '        }\n', '        _mint(to, liquidity);\n', '        _update(balance0<<128 | balance1<<32 | uint32(_reserve));\n', '        emit Mint(msg.sender, uint192((balance0-reserve0)<<96 | (balance1-reserve1)));\n', '    }\n', '\n', '    function burn(address to) external  lock returns (uint192 amount) {\n', '        uint224 _reserve = reserve;\n', '        address _token0 = token0;                                \n', '        address _token1 = token1;    \n', '        _mintFee(uint56(circleData));\n', '        uint _totalSupply = totalSupply; \n', '        uint liquidity = balanceOf[address(this)];\n', '        uint amount0 = liquidity.mul(uint96(_reserve>>128)) / _totalSupply; \n', '        uint amount1 = liquidity.mul(uint96(_reserve>>32)) / _totalSupply; \n', '        amount = uint192((amount0<<96)|amount1);\n', "        require(amount > 0, 'CSWP:8');\n", '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        uint192 combinedBalance = uint192(IERC20(_token0).balanceOf(address(this))<<96 | IERC20(_token1).balanceOf(address(this)));\n', '        _update(uint(combinedBalance)<<32 | uint32(_reserve));\n', '        if (combinedBalance>0) revisemu(combinedBalance);\n', '        emit Burn(msg.sender, amount, to); \n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(uint amountOut, address to, bytes calldata data) external  lock {       \n', '        uint amount0Out = (amountOut >> 96); \n', '        uint amount1Out = uint(uint96(amountOut));\n', '        uint balance0;\n', '        uint balance1;\n', '        uint _circleData = circleData;\n', '\n', '        { // avoids stack too deep errors\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require((to != _token0) && (to != _token1), 'CSWP:9');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n', '            if (data.length > 0) ICoinSwapCallee(to).coinswapCall(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = IERC20(_token0).balanceOf(address(this));\n', '            balance1 = IERC20(_token1).balanceOf(address(this));\n', '            require(balance0*uint56(_circleData >> 160) < 2**96 \n', "                 && balance1*uint56(_circleData >> 104) < 2**96, 'CSWP:10');\n", '        }\n', '        uint amountIn0;\n', '        uint amountIn1;\n', '        uint224 _reserve = reserve;\n', '        {// if _reserve0 < amountOut, then should have been reverted above already, so no need to check here \n', '            uint96 reserve0 = uint96(_reserve >>128);\n', '            uint96 reserve1 = uint96(_reserve >>32);\n', '            amountIn0 = balance0 + amount0Out - reserve0;\n', '            amountIn1 = balance1 + amount1Out - reserve1;\n', '            uint mulambda0 = uint(uint16(_circleData >> 72))*uint56(_circleData)*uint56(_circleData >> 160);\n', '            uint mulambda1 = uint(uint16(_circleData >> 56))*uint56(_circleData)*uint56(_circleData >> 104);        \n', '            uint X=mulambda0*(balance0*1000 - amountIn0*3); \n', '            uint Y=mulambda1*(balance1*1000 - amountIn1*3);\n', "    \t    require(10**37 > X && 10**37 >Y, 'CSWP:11');\n", '            X = 10**37-X;\n', '            Y = 10**37-Y;\n', '            uint newrSquare = X*X+Y*Y;\n', '            X=10**37-(mulambda0 * reserve0*1000);\n', '            Y=10**37-(mulambda1 * reserve1*1000);\n', "            require(newrSquare<= (X*X+Y*Y), 'CSWP:12');\n", '        }\n', '        _update(balance0<<128 | balance1<<32 | uint32(_reserve));\n', '        emit Swap(msg.sender, uint192(amountIn0<<96 | amountIn1), uint192(amountOut), to);\n', '    }\n', '}\n', '\n', 'contract CoinSwapFactory {\n', '    address payable public feeTo;\n', '    address payable public feeToSetter;\n', '    mapping(address => mapping(address => address)) public getPair;\n', '    address[] public allPairs;\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    constructor(address payable _feeToSetter) {\n', '        feeToSetter = _feeToSetter;\n', '        feeTo = _feeToSetter;\n', '    }\n', '    \n', '    function allPairsLength() external view returns (uint) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB, uint224 circle) external returns (address pair) {  \n', "        require(tx.origin==feeToSetter, 'CSWP:22');\n", '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(getPair[token0][token1] == address(0), 'CSWP:20'); \n", '        require(uint16(circle>>56)>0 && uint16(circle>>72)>0 && \n', '                uint16(circle>>88)>0 && uint16(circle>>88)<=9999\n', '                && uint56(circle>>104)>=1 && uint56(circle>>104)<=10**16\n', "                && uint56(circle>>160)>=1 && uint56(circle>>160)<=10**16, 'CSWP:23');\n", '        bytes memory bytecode = type(CoinSwapPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        CoinSwapPair(pair).initialize(token0, token1, circle);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; \n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '    \n', '    function setFeeTo(address payable _feeTo) external {\n', "\t    require(msg.sender == feeToSetter, 'CSWP:21');\n", '        feeTo = _feeTo;\n', '    }\n', '\n', '    function setFeeToSetter(address payable _feeToSetter) external {\n', "        require(msg.sender == feeToSetter, 'CSWP:22');\n", '        feeToSetter = _feeToSetter;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '\n', 'library SQRT {\n', '    function sqrt(uint256 a) internal pure returns (uint256 x) { \n', '        if (a > 3) {\n', '            uint msbpos =0;\n', '            uint b=a;\n', '            if (b > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n', '                msbpos += 128;\n', '                b = b >> 128;\n', '            } \n', '            if (b > 0xFFFFFFFFFFFFFFFF) {\n', '                msbpos += 64;\n', '                b = b>>64;\n', '            }\n', '            if (b > 0xFFFFFFFF ) {\n', '                msbpos += 32;\n', '                b = b>>32;\n', '            }\n', '            if (b > 0xFFFF ) {\n', '                msbpos += 16;\n', '                b = b>>16;\n', '            }\n', '            if (b > 0xFF ) {\n', '                msbpos += 8;\n', '                b = b>>8;\n', '            }\n', '            if (b > 0xF ) {\n', '                msbpos += 4;\n', '            }\n', '            msbpos += 4;\n', '            \n', '            uint256 x0=a;\n', '            uint X=((a >> 1) + 1);\n', '            uint Y=2**(msbpos/2);\n', '            x = X< Y ? X : Y;\n', '            while (x < x0 ) {\n', '                x0 = x;\n', '                x = (a / x0 + x0) >> 1;\n', '            }\n', '        } else if (a != 0) {\n', '            x = 1;\n', '        }\n', '    }\n', '}']