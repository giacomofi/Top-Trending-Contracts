['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-18\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT \n', 'pragma solidity 0.6.11; \n', 'pragma experimental ABIEncoderV2;\n', '\n', '// ====================================================================\n', '//     ________                   _______                           \n', '//    / ____/ /__  ____  ____ _  / ____(_)___  ____ _____  ________ \n', '//   / __/ / / _ \\/ __ \\/ __ `/ / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\\n', '//  / /___/ /  __/ / / / /_/ / / __/ / / / / / /_/ / / / / /__/  __/\n', '// /_____/_/\\___/_/ /_/\\__,_(_)_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/                                                                                                                     \n', '//                                                                        \n', '// ====================================================================\n', '// ====================== Elena Protocol (USE) ========================\n', '// ====================================================================\n', '\n', '// Dapp    :  https://elena.finance\n', '// Twitter :  https://twitter.com/ElenaProtocol\n', '// Telegram:  https://t.me/ElenaFinance\n', '// ====================================================================\n', '\n', '// File: contracts\\Uniswap\\Interfaces\\IUniswapV2Factory.sol\n', '// License: MIT\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts\\Uniswap\\Interfaces\\IUniswapV2Pair.sol\n', '// License: MIT\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts\\Common\\Babylonian.sol\n', '// License: MIT\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// File: contracts\\Common\\FixedPoint.sol\n', '// License: MIT\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint private constant Q112 = uint(1) << RESOLUTION;\n', '    uint private constant Q224 = Q112 << RESOLUTION;\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// File: contracts\\Uniswap\\UniswapV2OracleLibrary.sol\n', '// License: MIT\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Oracle\\UniswapPairOracle.sol\n', '// License: MIT\n', '\n', '// Fixed window oracle that recomputes the average price for the entire period once every period\n', '// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\n', 'contract UniswapPairOracle {\n', '    using FixedPoint for *;\n', '    address owner_address;\n', '    address timelock_address;\n', '    uint public PERIOD = 3600; // 1 hour TWAP (time-weighted average price)\n', '    uint public CONSULT_LENIENCY = 120; // Used for being able to consult past the period end\n', '    bool public ALLOW_STALE_CONSULTS = true; // If false, consult() will fail if the TWAP is stale\n', '    IUniswapV2Pair public  pair;\n', '    address public  token0;\n', '    address public  token1;\n', '    uint    public price0CumulativeLast;\n', '    uint    public price1CumulativeLast;\n', '    uint32  public blockTimestampLast;\n', '    FixedPoint.uq112x112 public price0Average;\n', '    FixedPoint.uq112x112 public price1Average;\n', '    modifier onlyByOwnerOrGovernance() {\n', '        require(msg.sender == owner_address || msg.sender == timelock_address, "You are not an owner or the governance timelock");\n', '        _;\n', '    }\n', '    constructor(address _pair) public { \n', '        pair = IUniswapV2Pair(_pair);\n', '        token0 = pair.token0();\n', '        token1 = pair.token1();\n', '        price0CumulativeLast = pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\n', '        price1CumulativeLast = pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'UniswapPairOracle: NO_RESERVES'); // Ensure that there's liquidity in the pair\n", '        owner_address = msg.sender;\n', '        timelock_address = msg.sender;\n', '    }\n', '    function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n', '        owner_address = _owner_address;\n', '    }\n', '    function setTimelock(address _timelock_address) external onlyByOwnerOrGovernance {\n', '        timelock_address = _timelock_address;\n', '    }\n', '    function setPeriod(uint _period) external onlyByOwnerOrGovernance {\n', '        PERIOD = _period;\n', '    }\n', '    function setConsultLeniency(uint _consult_leniency) external onlyByOwnerOrGovernance {\n', '        CONSULT_LENIENCY = _consult_leniency;\n', '    }\n', '    function setAllowStaleConsults(bool _allow_stale_consults) external onlyByOwnerOrGovernance {\n', '        ALLOW_STALE_CONSULTS = _allow_stale_consults;\n', '    }\n', '    // Check if update() can be called instead of wasting gas calling it\n', '    function canUpdate() public view returns (bool) {\n', '        uint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n', '        return (timeElapsed >= PERIOD);\n', '    }\n', '    //get other token\n', '    function getPairToken(address token) external view returns(address){\n', '        return token == token0 ? token1 : token0;\n', '    }\n', '    function containsToken(address token) external view returns(bool){\n', '        return token == token0 || token == token1;\n', '    }\n', '    function getSwapTokenReserve(address token) external view returns(uint256){\n', '         (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '         if(token == token0) return reserve0;\n', '         if(token == token1) return reserve1;\n', '         return 0;\n', '    }\n', '    function getTimeElapsed() public view returns(uint256){\n', '        (, , uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n', '        return blockTimestamp - blockTimestampLast; // Overflow is desired\n', '    }\n', '    function update() external returns(bool){\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '              UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n', '        // Ensure that at least one full period has passed since the last update\n', "        //require(timeElapsed >= PERIOD, 'UniswapPairOracle: PERIOD_NOT_ELAPSED');\n", '        if(timeElapsed >= PERIOD){\n', '            // Overflow is desired, casting never truncates\n', '            // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '            price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n', '            price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n', '            price0CumulativeLast = price0Cumulative;\n', '            price1CumulativeLast = price1Cumulative;\n', '            blockTimestampLast = blockTimestamp;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    // Note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(address tokenIn, uint amountIn) external view returns (uint amountOut) {\n', '        uint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n', '        // Ensure that the price is not stale\n', "        require((timeElapsed < (PERIOD + CONSULT_LENIENCY)) || ALLOW_STALE_CONSULTS, 'UniswapPairOracle: PRICE_IS_STALE_NEED_TO_CALL_UPDATE');\n", '        if (tokenIn == token0) {\n', '            amountOut = price1Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(tokenIn == token1, 'UniswapPairOracle: INVALID_TOKEN');\n", '            amountOut = price0Average.mul(amountIn).decode144();\n', '        }\n', '    }\n', '}']