['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.8.2;\n', '\n', '\n', 'interface IPlatformIntegration {\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool isTokenFeeCharged\n', '    ) external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from the cache\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'struct BassetPersonal {\n', '    // Address of the bAsset\n', '    address addr;\n', '    // Address of the bAsset\n', '    address integrator;\n', '    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n', '    bool hasTxFee; // takes a byte in storage\n', '    // Status of the bAsset\n', '    BassetStatus status;\n', '}\n', '\n', 'struct BassetData {\n', '    // 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '    // If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '    uint128 ratio;\n', '    // Amount of the Basset that is held in Collateral\n', '    uint128 vaultBalance;\n', '}\n', '\n', 'abstract contract IMasset {\n', '    // Mint\n', '    function mint(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function mintMulti(\n', '        address[] calldata _inputs,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function getMintOutput(address _input, uint256 _inputQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    // Swaps\n', '    function swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 swapOutput);\n', '\n', '    function getSwapOutput(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity\n', '    ) external view virtual returns (uint256 swapOutput);\n', '\n', '    // Redemption\n', '    function redeem(\n', '        address _output,\n', '        uint256 _mAssetQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 outputQuantity);\n', '\n', '    function redeemMasset(\n', '        uint256 _mAssetQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) external virtual returns (uint256[] memory outputQuantities);\n', '\n', '    function redeemExactBassets(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mAssetRedeemed);\n', '\n', '    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 bAssetOutput);\n', '\n', '    function getRedeemExactBassetsOutput(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities\n', '    ) external view virtual returns (uint256 mAssetAmount);\n', '\n', '    // Views\n', '    function getBasket() external view virtual returns (bool, bool);\n', '\n', '    function getBasset(address _token)\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal memory personal, BassetData memory data);\n', '\n', '    function getBassets()\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal[] memory personal, BassetData[] memory data);\n', '\n', '    function bAssetIndexes(address) external view virtual returns (uint8);\n', '\n', '    // SavingsManager\n', '    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\n', '\n', '    function collectPlatformInterest()\n', '        external\n', '        virtual\n', '        returns (uint256 mintAmount, uint256 newSupply);\n', '\n', '    // Admin\n', '    function setCacheSize(uint256 _cacheSize) external virtual;\n', '\n', '    function upgradeForgeValidator(address _newForgeValidator) external virtual;\n', '\n', '    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\n', '\n', '    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\n', '\n', '    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\n', '}\n', '\n', '// Status of the Basset - has it broken its peg?\n', 'enum BassetStatus {\n', '    Default,\n', '    Normal,\n', '    BrokenBelowPeg,\n', '    BrokenAbovePeg,\n', '    Blacklisted,\n', '    Liquidating,\n', '    Liquidated,\n', '    Failed\n', '}\n', '\n', 'struct BasketState {\n', '    bool undergoingRecol;\n', '    bool failed;\n', '}\n', '\n', 'struct InvariantConfig {\n', '    uint256 a;\n', '    WeightLimits limits;\n', '}\n', '\n', 'struct WeightLimits {\n', '    uint128 min;\n', '    uint128 max;\n', '}\n', '\n', 'struct FeederConfig {\n', '    uint256 supply;\n', '    uint256 a;\n', '    WeightLimits limits;\n', '}\n', '\n', 'struct AmpData {\n', '    uint64 initialA;\n', '    uint64 targetA;\n', '    uint64 rampStartTime;\n', '    uint64 rampEndTime;\n', '}\n', '\n', 'struct FeederData {\n', '    uint256 swapFee;\n', '    uint256 redemptionFee;\n', '    uint256 govFee;\n', '    uint256 pendingFees;\n', '    uint256 cacheSize;\n', '    BassetPersonal[] bAssetPersonal;\n', '    BassetData[] bAssetData;\n', '    AmpData ampData;\n', '    WeightLimits weightLimits;\n', '}\n', '\n', 'struct AssetData {\n', '    uint8 idx;\n', '    uint256 amt;\n', '    BassetPersonal personal;\n', '}\n', '\n', 'struct Asset {\n', '    uint8 idx;\n', '    address addr;\n', '    bool exists;\n', '}\n', '\n', 'library Root {\n', '    /**\n', '     * @dev Returns the square root of a given number\n', '     * @param x Input\n', '     * @return y Square root of Input\n', '     */\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        if (x == 0) return 0;\n', '        else {\n', '            uint256 xx = x;\n', '            uint256 r = 1;\n', '            if (xx >= 0x100000000000000000000000000000000) {\n', '                xx >>= 128;\n', '                r <<= 64;\n', '            }\n', '            if (xx >= 0x10000000000000000) {\n', '                xx >>= 64;\n', '                r <<= 32;\n', '            }\n', '            if (xx >= 0x100000000) {\n', '                xx >>= 32;\n', '                r <<= 16;\n', '            }\n', '            if (xx >= 0x10000) {\n', '                xx >>= 16;\n', '                r <<= 8;\n', '            }\n', '            if (xx >= 0x100) {\n', '                xx >>= 8;\n', '                r <<= 4;\n', '            }\n', '            if (xx >= 0x10) {\n', '                xx >>= 4;\n', '                r <<= 2;\n', '            }\n', '            if (xx >= 0x8) {\n', '                r <<= 1;\n', '            }\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1;\n', '            r = (r + x / r) >> 1; // Seven iterations should be enough\n', '            uint256 r1 = x / r;\n', '            return uint256(r < r1 ? r : r1);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeCast {\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferReturnBalance(\n', '        address _sender,\n', '        address _recipient,\n', '        address _bAsset,\n', '        uint256 _qty\n', '    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\n', '        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\n', '        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\n', '        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\n', '        receivedQty = recipientBalance - balBefore;\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender) internal {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @dev Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x) internal pure returns (uint256) {\n', '        return x * FULL_SCALE;\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 scale\n', '    ) internal pure returns (uint256) {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        // return 9e38 / 1e18 = 9e18\n', '        return (x * y) / scale;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x * y;\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled + FULL_SCALE - 1;\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil / FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return (x * FULL_SCALE) / y;\n', '    }\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x * ratio;\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled + RATIO_SCALE - 1;\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil / RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        // return 1e22 / 1e12 = 1e10\n', '        return (x * RATIO_SCALE) / ratio;\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', '// External\n', '// Internal\n', '// Libs\n', '/**\n', ' * @title   FeederLogic\n', ' * @author  mStable\n', ' * @notice  Logic contract for feeder pools that calculates trade output and updates core state.\n', ' *          Includes modular invariant application code applying the StableSwap invariant first designed\n', ' *          by Curve Finance and derived for mStable application in MIP-8 (https://mips.mstable.org/MIPS/mip-8)\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2021-03-01\n', ' */\n', 'library FeederLogic {\n', '    using StableMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 internal constant A_PRECISION = 100;\n', '\n', '    /***************************************\n', '                    MINT\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Transfers token in, updates internal balances and computes the fpToken output\n', '     * @param _data                 Feeder pool storage state\n', '     * @param _config               Core config for use in the invariant validator\n', '     * @param _input                Data on the bAsset to deposit for the minted fpToken.\n', '     * @param _inputQuantity        Quantity in input token units.\n', '     * @param _minOutputQuantity    Minimum fpToken quantity to be minted. This protects against slippage.\n', '     * @return mintOutput           Quantity of fpToken minted from the deposited bAsset.\n', '     */\n', '    function mint(\n', '        FeederData storage _data,\n', '        FeederConfig calldata _config,\n', '        Asset calldata _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity\n', '    ) external returns (uint256 mintOutput) {\n', '        BassetData[] memory cachedBassetData = _data.bAssetData;\n', '        AssetData memory inputData =\n', '            _transferIn(_data, _config, cachedBassetData, _input, _inputQuantity);\n', '        // Validation should be after token transfer, as real input amt is unknown before\n', '        mintOutput = computeMint(cachedBassetData, inputData.idx, inputData.amt, _config);\n', '        require(mintOutput >= _minOutputQuantity, "Mint quantity < min qty");\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens in, updates internal balances and computes the fpToken output.\n', '     * Only fAsset & mAsset are supported in this path.\n', '     * @param _data                 Feeder pool storage state\n', '     * @param _config               Core config for use in the invariant validator\n', '     * @param _indices              Non-duplicate addresses of the bAssets to deposit for the minted fpToken.\n', '     * @param _inputQuantities      Quantity of each input in input token units.\n', '     * @param _minOutputQuantity    Minimum fpToken quantity to be minted. This protects against slippage.\n', '     * @return mintOutput           Quantity of fpToken minted from the deposited bAsset.\n', '     */\n', '    function mintMulti(\n', '        FeederData storage _data,\n', '        FeederConfig calldata _config,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity\n', '    ) external returns (uint256 mintOutput) {\n', '        uint256 len = _indices.length;\n', '        uint256[] memory quantitiesDeposited = new uint256[](len);\n', '        // Load bAssets from storage into memory\n', '        BassetData[] memory allBassets = _data.bAssetData;\n', '        uint256 maxCache = _getCacheDetails(_data, _config.supply);\n', '        // Transfer the Bassets to the integrator & update storage\n', '        for (uint256 i = 0; i < len; i++) {\n', '            if (_inputQuantities[i] > 0) {\n', '                uint8 idx = _indices[i];\n', '                BassetData memory bData = allBassets[idx];\n', '                quantitiesDeposited[i] = _depositTokens(\n', '                    _data.bAssetPersonal[idx],\n', '                    bData.ratio,\n', '                    _inputQuantities[i],\n', '                    maxCache\n', '                );\n', '\n', '                _data.bAssetData[idx].vaultBalance =\n', '                    bData.vaultBalance +\n', '                    SafeCast.toUint128(quantitiesDeposited[i]);\n', '            }\n', '        }\n', '        // Validate the proposed mint, after token transfer\n', '        mintOutput = computeMintMulti(allBassets, _indices, quantitiesDeposited, _config);\n', '        require(mintOutput >= _minOutputQuantity, "Mint quantity < min qty");\n', '        require(mintOutput > 0, "Zero mAsset quantity");\n', '    }\n', '\n', '    /***************************************\n', '                    SWAP\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Swaps two assets - either internally between fAsset<>mAsset, or between fAsset<>mpAsset by\n', '     * first routing through the mAsset pool.\n', '     * @param _data              Feeder pool storage state\n', '     * @param _config            Core config for use in the invariant validator\n', '     * @param _input             Data on bAsset to deposit\n', '     * @param _output            Data on bAsset to withdraw\n', '     * @param _inputQuantity     Units of input bAsset to swap in\n', '     * @param _minOutputQuantity Minimum quantity of the swap output asset. This protects against slippage\n', '     * @param _recipient         Address to transfer output asset to\n', '     * @return swapOutput        Quantity of output asset returned from swap\n', '     * @return localFee          Fee paid, in fpToken terms\n', '     */\n', '    function swap(\n', '        FeederData storage _data,\n', '        FeederConfig calldata _config,\n', '        Asset calldata _input,\n', '        Asset calldata _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external returns (uint256 swapOutput, uint256 localFee) {\n', '        BassetData[] memory cachedBassetData = _data.bAssetData;\n', '\n', '        AssetData memory inputData =\n', '            _transferIn(_data, _config, cachedBassetData, _input, _inputQuantity);\n', '        // 1. [f/mAsset ->][ f/mAsset]               : Y - normal in, SWAP, normal out\n', '        // 3. [mpAsset -> mAsset][ -> fAsset]        : Y - mint in  , SWAP, normal out\n', '        if (_output.exists) {\n', '            (swapOutput, localFee) = _swapLocal(\n', '                _data,\n', '                _config,\n', '                cachedBassetData,\n', '                inputData,\n', '                _output,\n', '                _minOutputQuantity,\n', '                _recipient\n', '            );\n', '        }\n', '        // 2. [fAsset ->][ mAsset][ -> mpAsset]      : Y - normal in, SWAP, mpOut\n', '        else {\n', '            address mAsset = _data.bAssetPersonal[0].addr;\n', '            (swapOutput, localFee) = _swapLocal(\n', '                _data,\n', '                _config,\n', '                cachedBassetData,\n', '                inputData,\n', '                Asset(0, mAsset, true),\n', '                0,\n', '                address(this)\n', '            );\n', '            swapOutput = IMasset(mAsset).redeem(\n', '                _output.addr,\n', '                swapOutput,\n', '                _minOutputQuantity,\n', '                _recipient\n', '            );\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                    REDEEM\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Burns a specified quantity of the senders fpToken in return for a bAsset. The output amount is derived\n', '     * from the invariant. Supports redemption into either the fAsset, mAsset or assets in the mAsset basket.\n', '     * @param _data              Feeder pool storage state\n', '     * @param _config            Core config for use in the invariant validator\n', '     * @param _output            Data on bAsset to withdraw\n', '     * @param _fpTokenQuantity   Quantity of fpToken to burn\n', '     * @param _minOutputQuantity Minimum bAsset quantity to receive for the burnt fpToken. This protects against slippage.\n', '     * @param _recipient         Address to transfer the withdrawn bAssets to.\n', '     * @return outputQuantity    Quanity of bAsset units received for the burnt fpToken\n', '     * @return localFee          Fee paid, in fpToken terms\n', '     */\n', '    function redeem(\n', '        FeederData storage _data,\n', '        FeederConfig calldata _config,\n', '        Asset calldata _output,\n', '        uint256 _fpTokenQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external returns (uint256 outputQuantity, uint256 localFee) {\n', '        if (_output.exists) {\n', '            (outputQuantity, localFee) = _redeemLocal(\n', '                _data,\n', '                _config,\n', '                _output,\n', '                _fpTokenQuantity,\n', '                _minOutputQuantity,\n', '                _recipient\n', '            );\n', '        } else {\n', '            address mAsset = _data.bAssetPersonal[0].addr;\n', '            (outputQuantity, localFee) = _redeemLocal(\n', '                _data,\n', '                _config,\n', '                Asset(0, mAsset, true),\n', '                _fpTokenQuantity,\n', '                0,\n', '                address(this)\n', '            );\n', '            outputQuantity = IMasset(mAsset).redeem(\n', '                _output.addr,\n', '                outputQuantity,\n', '                _minOutputQuantity,\n', '                _recipient\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Credits a recipient with a proportionate amount of bAssets, relative to current vault\n', '     * balance levels and desired fpToken quantity. Burns the fpToken as payment. Only fAsset & mAsset are supported in this path.\n', '     * @param _data                 Feeder pool storage state\n', '     * @param _config               Core config for use in the invariant validator\n', '     * @param _inputQuantity        Quantity of fpToken to redeem\n', '     * @param _minOutputQuantities  Min units of output to receive\n', '     * @param _recipient            Address to credit the withdrawn bAssets\n', '     * @return scaledFee            Fee collected in fpToken terms\n', '     * @return outputs              Array of output asset addresses\n', '     * @return outputQuantities     Array of output asset quantities\n', '     */\n', '    function redeemProportionately(\n', '        FeederData storage _data,\n', '        FeederConfig calldata _config,\n', '        uint256 _inputQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    )\n', '        external\n', '        returns (\n', '            uint256 scaledFee,\n', '            address[] memory outputs,\n', '            uint256[] memory outputQuantities\n', '        )\n', '    {\n', '        // Calculate mAsset redemption quantities\n', '        scaledFee = _inputQuantity.mulTruncate(_data.redemptionFee);\n', '        // cache = (config.supply - inputQuantity) * 0.2\n', '        uint256 maxCache = _getCacheDetails(_data, _config.supply - _inputQuantity);\n', '\n', '        // Load the bAsset data from storage into memory\n', '        BassetData[] memory allBassets = _data.bAssetData;\n', '        uint256 len = allBassets.length;\n', '        outputs = new address[](len);\n', '        outputQuantities = new uint256[](len);\n', '        for (uint256 i = 0; i < len; i++) {\n', '            // Get amount out, proportionate to redemption quantity\n', '            uint256 amountOut =\n', '                (allBassets[i].vaultBalance * (_inputQuantity - scaledFee)) / _config.supply;\n', '            require(amountOut > 1, "Output == 0");\n', '            amountOut -= 1;\n', '            require(amountOut >= _minOutputQuantities[i], "bAsset qty < min qty");\n', '            // Set output in array\n', '            (outputQuantities[i], outputs[i]) = (amountOut, _data.bAssetPersonal[i].addr);\n', '            // Transfer the bAsset to the recipient\n', '            _withdrawTokens(\n', '                amountOut,\n', '                _data.bAssetPersonal[i],\n', '                allBassets[i],\n', '                _recipient,\n', '                maxCache\n', '            );\n', '            // Reduce vaultBalance\n', '            _data.bAssetData[i].vaultBalance =\n', '                allBassets[i].vaultBalance -\n', '                SafeCast.toUint128(amountOut);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Credits a recipient with a certain quantity of selected bAssets, in exchange for burning the\n', '     *      relative fpToken quantity from the sender. Only fAsset & mAsset (0,1) are supported in this path.\n', '     * @param _data                 Feeder pool storage state\n', '     * @param _config               Core config for use in the invariant validator\n', '     * @param _indices              Indices of the bAssets to receive\n', '     * @param _outputQuantities     Units of the bAssets to receive\n', '     * @param _maxInputQuantity     Maximum fpToken quantity to burn for the received bAssets. This protects against slippage.\n', '     * @param _recipient            Address to receive the withdrawn bAssets\n', '     * @return fpTokenQuantity      Quantity of fpToken units to burn as payment\n', '     * @return localFee             Fee collected, in fpToken terms\n', '     */\n', '    function redeemExactBassets(\n', '        FeederData storage _data,\n', '        FeederConfig memory _config,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxInputQuantity,\n', '        address _recipient\n', '    ) external returns (uint256 fpTokenQuantity, uint256 localFee) {\n', '        // Load bAsset data from storage to memory\n', '        BassetData[] memory allBassets = _data.bAssetData;\n', '\n', '        // Validate redemption\n', '        uint256 fpTokenRequired =\n', '            computeRedeemExact(allBassets, _indices, _outputQuantities, _config);\n', '        fpTokenQuantity = fpTokenRequired.divPrecisely(1e18 - _data.redemptionFee);\n', '        localFee = fpTokenQuantity - fpTokenRequired;\n', '        require(fpTokenQuantity > 0, "Must redeem some mAssets");\n', '        fpTokenQuantity += 1;\n', '        require(fpTokenQuantity <= _maxInputQuantity, "Redeem mAsset qty > max quantity");\n', '\n', '        // Burn the full amount of Masset\n', '        uint256 maxCache = _getCacheDetails(_data, _config.supply - fpTokenQuantity);\n', '        // Transfer the Bassets to the recipient\n', '        for (uint256 i = 0; i < _outputQuantities.length; i++) {\n', '            _withdrawTokens(\n', '                _outputQuantities[i],\n', '                _data.bAssetPersonal[_indices[i]],\n', '                allBassets[_indices[i]],\n', '                _recipient,\n', '                maxCache\n', '            );\n', '            _data.bAssetData[_indices[i]].vaultBalance =\n', '                allBassets[_indices[i]].vaultBalance -\n', '                SafeCast.toUint128(_outputQuantities[i]);\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                FORGING - INTERNAL\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Transfers an asset in and updates vault balance. Supports fAsset, mAsset and mpAsset.\n', '     * Transferring an mpAsset requires first a mint in the main pool, and consequent depositing of\n', '     * the mAsset.\n', '     */\n', '    function _transferIn(\n', '        FeederData storage _data,\n', '        FeederConfig memory _config,\n', '        BassetData[] memory _cachedBassetData,\n', '        Asset memory _input,\n', '        uint256 _inputQuantity\n', '    ) internal returns (AssetData memory inputData) {\n', '        // fAsset / mAsset transfers\n', '        if (_input.exists) {\n', '            BassetPersonal memory personal = _data.bAssetPersonal[_input.idx];\n', '            uint256 amt =\n', '                _depositTokens(\n', '                    personal,\n', '                    _cachedBassetData[_input.idx].ratio,\n', '                    _inputQuantity,\n', '                    _getCacheDetails(_data, _config.supply)\n', '                );\n', '            inputData = AssetData(_input.idx, amt, personal);\n', '        }\n', '        // mpAsset transfers\n', '        else {\n', '            inputData = _mpMint(\n', '                _data,\n', '                _input,\n', '                _inputQuantity,\n', '                _getCacheDetails(_data, _config.supply)\n', '            );\n', '            require(inputData.amt > 0, "Must mint something from mp");\n', '        }\n', '        _data.bAssetData[inputData.idx].vaultBalance =\n', '            _cachedBassetData[inputData.idx].vaultBalance +\n', '            SafeCast.toUint128(inputData.amt);\n', '    }\n', '\n', '    /**\n', '     * @dev Mints an asset in the main mAsset pool. Input asset must be supported by the mAsset\n', '     * or else the call will revert. After minting, check if the balance exceeds the cache upper limit\n', '     * and consequently deposit if necessary.\n', '     */\n', '    function _mpMint(\n', '        FeederData storage _data,\n', '        Asset memory _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _maxCache\n', '    ) internal returns (AssetData memory mAssetData) {\n', '        mAssetData = AssetData(0, 0, _data.bAssetPersonal[0]);\n', '        IERC20(_input.addr).safeTransferFrom(msg.sender, address(this), _inputQuantity);\n', '\n', '        address integrator =\n', '            mAssetData.personal.integrator == address(0)\n', '                ? address(this)\n', '                : mAssetData.personal.integrator;\n', '\n', '        uint256 balBefore = IERC20(mAssetData.personal.addr).balanceOf(integrator);\n', '        // Mint will revert if the _input.addr is not whitelisted on that mAsset\n', '        IMasset(mAssetData.personal.addr).mint(_input.addr, _inputQuantity, 0, integrator);\n', '        uint256 balAfter = IERC20(mAssetData.personal.addr).balanceOf(integrator);\n', '        mAssetData.amt = balAfter - balBefore;\n', '\n', '        // Route the mAsset to platform integration\n', '        if (integrator != address(this)) {\n', '            if (balAfter > _maxCache) {\n', '                uint256 delta = balAfter - (_maxCache / 2);\n', '                IPlatformIntegration(integrator).deposit(mAssetData.personal.addr, delta, false);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a swap between fAsset and mAsset. If the output is an mAsset, do not\n', '     * charge the swap fee.\n', '     */\n', '    function _swapLocal(\n', '        FeederData storage _data,\n', '        FeederConfig memory _config,\n', '        BassetData[] memory _cachedBassetData,\n', '        AssetData memory _inputData,\n', '        Asset memory _output,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 swapOutput, uint256 scaledFee) {\n', '        // Validate the swap\n', '        (swapOutput, scaledFee) = computeSwap(\n', '            _cachedBassetData,\n', '            _inputData.idx,\n', '            _output.idx,\n', '            _inputData.amt,\n', '            _output.idx == 0 ? 0 : _data.swapFee,\n', '            _config\n', '        );\n', '        require(swapOutput >= _minOutputQuantity, "Output qty < minimum qty");\n', '        require(swapOutput > 0, "Zero output quantity");\n', '        // Settle the swap\n', '        _withdrawTokens(\n', '            swapOutput,\n', '            _data.bAssetPersonal[_output.idx],\n', '            _cachedBassetData[_output.idx],\n', '            _recipient,\n', '            _getCacheDetails(_data, _config.supply)\n', '        );\n', '        // Decrease output bal\n', '        _data.bAssetData[_output.idx].vaultBalance =\n', '            _cachedBassetData[_output.idx].vaultBalance -\n', '            SafeCast.toUint128(swapOutput);\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a local redemption into either fAsset or mAsset.\n', '     */\n', '    function _redeemLocal(\n', '        FeederData storage _data,\n', '        FeederConfig memory _config,\n', '        Asset memory _output,\n', '        uint256 _fpTokenQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 outputQuantity, uint256 scaledFee) {\n', '        BassetData[] memory allBassets = _data.bAssetData;\n', '        // Subtract the redemption fee\n', '        scaledFee = _fpTokenQuantity.mulTruncate(_data.redemptionFee);\n', '        // Calculate redemption quantities\n', '        outputQuantity = computeRedeem(\n', '            allBassets,\n', '            _output.idx,\n', '            _fpTokenQuantity - scaledFee,\n', '            _config\n', '        );\n', '        require(outputQuantity >= _minOutputQuantity, "bAsset qty < min qty");\n', '        require(outputQuantity > 0, "Output == 0");\n', '\n', '        // Transfer the bAssets to the recipient\n', '        _withdrawTokens(\n', '            outputQuantity,\n', '            _data.bAssetPersonal[_output.idx],\n', '            allBassets[_output.idx],\n', '            _recipient,\n', '            _getCacheDetails(_data, _config.supply - _fpTokenQuantity)\n', '        );\n', '        // Set vault balance\n', '        _data.bAssetData[_output.idx].vaultBalance =\n', '            allBassets[_output.idx].vaultBalance -\n', '            SafeCast.toUint128(outputQuantity);\n', '    }\n', '\n', '    /**\n', '     * @dev Deposits a given asset to the system. If there is sufficient room for the asset\n', '     * in the cache, then just transfer, otherwise reset the cache to the desired mid level by\n', '     * depositing the delta in the platform\n', '     */\n', '    function _depositTokens(\n', '        BassetPersonal memory _bAsset,\n', '        uint256 _bAssetRatio,\n', '        uint256 _quantity,\n', '        uint256 _maxCache\n', '    ) internal returns (uint256 quantityDeposited) {\n', '        // 0. If integration is 0, short circuit\n', '        if (_bAsset.integrator == address(0)) {\n', '            (uint256 received, ) =\n', '                MassetHelpers.transferReturnBalance(\n', '                    msg.sender,\n', '                    address(this),\n', '                    _bAsset.addr,\n', '                    _quantity\n', '                );\n', '            return received;\n', '        }\n', '\n', '        // 1 - Send all to PI, using the opportunity to get the cache balance and net amount transferred\n', '        uint256 cacheBal;\n', '        (quantityDeposited, cacheBal) = MassetHelpers.transferReturnBalance(\n', '            msg.sender,\n', '            _bAsset.integrator,\n', '            _bAsset.addr,\n', '            _quantity\n', '        );\n', '\n', '        // 2 - Deposit X if necessary\n', '        // 2.1 - Deposit if xfer fees\n', '        if (_bAsset.hasTxFee) {\n', '            uint256 deposited =\n', '                IPlatformIntegration(_bAsset.integrator).deposit(\n', '                    _bAsset.addr,\n', '                    quantityDeposited,\n', '                    true\n', '                );\n', '\n', '            return StableMath.min(deposited, quantityDeposited);\n', '        }\n', '        // 2.2 - Else Deposit X if Cache > %\n', '        // This check is in place to ensure that any token with a txFee is rejected\n', '        require(quantityDeposited == _quantity, "Asset not fully transferred");\n', '\n', '        uint256 relativeMaxCache = _maxCache.divRatioPrecisely(_bAssetRatio);\n', '\n', '        if (cacheBal > relativeMaxCache) {\n', '            uint256 delta = cacheBal - (relativeMaxCache / 2);\n', '            IPlatformIntegration(_bAsset.integrator).deposit(_bAsset.addr, delta, false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given asset from its platformIntegration. If there is sufficient liquidity\n', '     * in the cache, then withdraw from there, otherwise withdraw from the lending market and reset the\n', '     * cache to the mid level.\n', '     */\n', '    function _withdrawTokens(\n', '        uint256 _quantity,\n', '        BassetPersonal memory _personal,\n', '        BassetData memory _data,\n', '        address _recipient,\n', '        uint256 _maxCache\n', '    ) internal {\n', '        if (_quantity == 0) return;\n', '\n', '        // 1.0 If there is no integrator, send from here\n', '        if (_personal.integrator == address(0)) {\n', '            // If this is part of a cross-swap or cross-redeem, and there is no\n', "            // integrator.. then we don't need to transfer anywhere\n", '            if (_recipient == address(this)) return;\n', '            IERC20(_personal.addr).safeTransfer(_recipient, _quantity);\n', '        }\n', '        // 1.1 If txFee then short circuit - there is no cache\n', '        else if (_personal.hasTxFee) {\n', '            IPlatformIntegration(_personal.integrator).withdraw(\n', '                _recipient,\n', '                _personal.addr,\n', '                _quantity,\n', '                _quantity,\n', '                true\n', '            );\n', '        }\n', '        // 1.2. Else, withdraw from either cache or main vault\n', '        else {\n', '            uint256 cacheBal = IERC20(_personal.addr).balanceOf(_personal.integrator);\n', '            // 2.1 - If balance b in cache, simply withdraw\n', '            if (cacheBal >= _quantity) {\n', '                IPlatformIntegration(_personal.integrator).withdrawRaw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity\n', '                );\n', '            }\n', '            // 2.2 - Else reset the cache to X, or as far as possible\n', '            //       - Withdraw X+b from platform\n', '            //       - Send b to user\n', '            else {\n', '                uint256 relativeMidCache = _maxCache.divRatioPrecisely(_data.ratio) / 2;\n', '                uint256 totalWithdrawal =\n', '                    StableMath.min(\n', '                        relativeMidCache + _quantity - cacheBal,\n', '                        _data.vaultBalance - SafeCast.toUint128(cacheBal)\n', '                    );\n', '\n', '                IPlatformIntegration(_personal.integrator).withdraw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity,\n', '                    totalWithdrawal,\n', '                    false\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the max cache size, given the supply of fpToken\n', '     * @return maxCache    Max units of any given bAsset that should be held in the cache\n', '     */\n', '    function _getCacheDetails(FeederData storage _data, uint256 _supply)\n', '        internal\n', '        view\n', '        returns (uint256 maxCache)\n', '    {\n', '        maxCache = (_supply * _data.cacheSize) / 1e18;\n', '    }\n', '\n', '    /***************************************\n', '                    INVARIANT\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Compute the amount of fpToken received for minting\n', '     * with `quantity` amount of bAsset index `i`.\n', '     * @param _bAssets      Array of all bAsset Data\n', '     * @param _i            Index of bAsset with which to mint\n', '     * @param _rawInput     Raw amount of bAsset to use in mint\n', '     * @param _config       Generalised FeederConfig stored externally\n', '     * @return mintAmount   Quantity of fpTokens minted\n', '     */\n', '    function computeMint(\n', '        BassetData[] memory _bAssets,\n', '        uint8 _i,\n', '        uint256 _rawInput,\n', '        FeederConfig memory _config\n', '    ) public pure returns (uint256 mintAmount) {\n', '        // 1. Get raw reserves\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        // 2. Get value of reserves according to invariant\n', '        uint256 k0 = _invariant(x, sum, _config.a);\n', '        uint256 scaledInput = (_rawInput * _bAssets[_i].ratio) / 1e8;\n', '        require(scaledInput > 1e6, "Must add > 1e6 units");\n', '        // 3. Add deposit to x and sum\n', '        x[_i] += scaledInput;\n', '        sum += scaledInput;\n', '        // 4. Finalise mint\n', '        require(_inBounds(x, sum, _config.limits), "Exceeds weight limits");\n', '        mintAmount = _computeMintOutput(x, sum, k0, _config);\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the amount of fpToken received for minting\n', '     * with the given array of inputs.\n', '     * @param _bAssets      Array of all bAsset Data\n', '     * @param _indices      Indexes of bAssets with which to mint\n', '     * @param _rawInputs    Raw amounts of bAssets to use in mint\n', '     * @param _config       Generalised FeederConfig stored externally\n', '     * @return mintAmount   Quantity of fpTokens minted\n', '     */\n', '    function computeMintMulti(\n', '        BassetData[] memory _bAssets,\n', '        uint8[] memory _indices,\n', '        uint256[] memory _rawInputs,\n', '        FeederConfig memory _config\n', '    ) public pure returns (uint256 mintAmount) {\n', '        // 1. Get raw reserves\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        // 2. Get value of reserves according to invariant\n', '        uint256 k0 = _invariant(x, sum, _config.a);\n', '        // 3. Add deposits to x and sum\n', '        uint256 len = _indices.length;\n', '        uint8 idx;\n', '        uint256 scaledInput;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            idx = _indices[i];\n', '            scaledInput = (_rawInputs[i] * _bAssets[idx].ratio) / 1e8;\n', '            x[idx] += scaledInput;\n', '            sum += scaledInput;\n', '        }\n', '        // 4. Finalise mint\n', '        require(_inBounds(x, sum, _config.limits), "Exceeds weight limits");\n', '        mintAmount = _computeMintOutput(x, sum, k0, _config);\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the amount of bAsset received for swapping\n', '     * `quantity` amount of index `input_idx` to index `output_idx`.\n', '     * @param _bAssets      Array of all bAsset Data\n', '     * @param _i            Index of bAsset to swap IN\n', '     * @param _o            Index of bAsset to swap OUT\n', '     * @param _rawInput     Raw amounts of input bAsset to input\n', '     * @param _feeRate      Swap fee rate to apply to output\n', '     * @param _config       Generalised FeederConfig stored externally\n', '     * @return bAssetOutputQuantity   Raw bAsset output quantity\n', '     * @return scaledSwapFee          Swap fee collected, in fpToken terms\n', '     */\n', '    function computeSwap(\n', '        BassetData[] memory _bAssets,\n', '        uint8 _i,\n', '        uint8 _o,\n', '        uint256 _rawInput,\n', '        uint256 _feeRate,\n', '        FeederConfig memory _config\n', '    ) public pure returns (uint256 bAssetOutputQuantity, uint256 scaledSwapFee) {\n', '        // 1. Get raw reserves\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        // 2. Get value of reserves according to invariant\n', '        uint256 k0 = _invariant(x, sum, _config.a);\n', '        // 3. Add deposits to x and sum\n', '        uint256 scaledInput = (_rawInput * _bAssets[_i].ratio) / 1e8;\n', '        require(scaledInput > 1e6, "Must add > 1e6 units");\n', '        x[_i] += scaledInput;\n', '        sum += scaledInput;\n', '        // 4. Calc total fpToken q\n', '        uint256 k1 = _invariant(x, sum, _config.a);\n', '        scaledSwapFee = ((k1 - k0) * _feeRate) / 1e18;\n', '        // 5. Calc output bAsset\n', '        uint256 newOutputReserve = _solveInvariant(x, _config.a, _o, k0 + scaledSwapFee);\n', '        // Convert swap fee to fpToken terms\n', '        // fpFee = fee * s / k\n', '        scaledSwapFee = (scaledSwapFee * _config.supply) / k0;\n', '        uint256 output = x[_o] - newOutputReserve - 1;\n', '        bAssetOutputQuantity = (output * 1e8) / _bAssets[_o].ratio;\n', '        // 6. Check for bounds\n', '        x[_o] -= output;\n', '        sum -= output;\n', '        require(_inBounds(x, sum, _config.limits), "Exceeds weight limits");\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the amount of bAsset index `i` received for\n', '     * redeeming `quantity` amount of fpToken.\n', '     * @param _bAssets              Array of all bAsset Data\n', '     * @param _o                    Index of output bAsset\n', '     * @param _netRedeemInput       Net amount of fpToken to redeem\n', '     * @param _config               Generalised FeederConfig stored externally\n', '     * @return rawOutputUnits       Raw bAsset output returned\n', '     */\n', '    function computeRedeem(\n', '        BassetData[] memory _bAssets,\n', '        uint8 _o,\n', '        uint256 _netRedeemInput,\n', '        FeederConfig memory _config\n', '    ) public pure returns (uint256 rawOutputUnits) {\n', '        require(_netRedeemInput > 1e6, "Must redeem > 1e6 units");\n', '        // 1. Get raw reserves\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        // 2. Get value of reserves according to invariant\n', '        uint256 k0 = _invariant(x, sum, _config.a);\n', '        uint256 kFinal = (k0 * (_config.supply - _netRedeemInput)) / _config.supply + 1;\n', '        // 3. Compute bAsset output\n', '        uint256 newOutputReserve = _solveInvariant(x, _config.a, _o, kFinal);\n', '        uint256 output = x[_o] - newOutputReserve - 1;\n', '        rawOutputUnits = (output * 1e8) / _bAssets[_o].ratio;\n', '        // 4. Check for max weight\n', '        x[_o] -= output;\n', '        sum -= output;\n', '        require(_inBounds(x, sum, _config.limits), "Exceeds weight limits");\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the amount of fpToken required to redeem\n', '     * a given selection of bAssets.\n', '     * @param _bAssets          Array of all bAsset Data\n', '     * @param _indices          Indexes of output bAssets\n', '     * @param _rawOutputs       Desired raw bAsset outputs\n', '     * @param _config           Generalised FeederConfig stored externally\n', '     * @return redeemInput      Amount of fpToken required to redeem bAssets\n', '     */\n', '    function computeRedeemExact(\n', '        BassetData[] memory _bAssets,\n', '        uint8[] memory _indices,\n', '        uint256[] memory _rawOutputs,\n', '        FeederConfig memory _config\n', '    ) public pure returns (uint256 redeemInput) {\n', '        // 1. Get raw reserves\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        // 2. Get value of reserves according to invariant\n', '        uint256 k0 = _invariant(x, sum, _config.a);\n', '        // 3. Sub deposits from x and sum\n', '        uint256 len = _indices.length;\n', '        uint256 ratioed;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            ratioed = (_rawOutputs[i] * _bAssets[_indices[i]].ratio) / 1e8;\n', '            x[_indices[i]] -= ratioed;\n', '            sum -= ratioed;\n', '        }\n', '        require(_inBounds(x, sum, _config.limits), "Exceeds weight limits");\n', '        // 4. Get new value of reserves according to invariant\n', '        uint256 k1 = _invariant(x, sum, _config.a);\n', '        // 5. Total fpToken is the difference between values\n', '        redeemInput = (_config.supply * (k0 - k1)) / k0;\n', '        require(redeemInput > 1e6, "Must redeem > 1e6 units");\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the price of the fpToken, and invariant value k\n', '     * @param _bAssets  Array of all bAsset Data\n', '     * @param _config   Generalised FeederConfig stored externally\n', '     * @return price    Price of an fpToken\n', '     * @return k        Total value of basket, k\n', '     */\n', '    function computePrice(BassetData[] memory _bAssets, FeederConfig memory _config)\n', '        public\n', '        pure\n', '        returns (uint256 price, uint256 k)\n', '    {\n', '        (uint256[] memory x, uint256 sum) = _getReserves(_bAssets);\n', '        k = _invariant(x, sum, _config.a);\n', '        price = (1e18 * k) / _config.supply;\n', '    }\n', '\n', '    /***************************************\n', '                    INTERNAL\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Computes the actual mint output after adding mint inputs\n', '     * to the vault balances\n', '     * @param _x            Scaled vaultBalances\n', '     * @param _sum          Sum of vaultBalances, to avoid another loop\n', '     * @param _k            Previous value of invariant, k, before addition\n', '     * @param _config       Generalised FeederConfig stored externally\n', '     * @return mintAmount   Amount of value added to invariant, in fpToken terms\n', '     */\n', '    function _computeMintOutput(\n', '        uint256[] memory _x,\n', '        uint256 _sum,\n', '        uint256 _k,\n', '        FeederConfig memory _config\n', '    ) internal pure returns (uint256 mintAmount) {\n', '        // 1. Get value of reserves according to invariant\n', '        uint256 kFinal = _invariant(_x, _sum, _config.a);\n', '        // 2. Total minted is the difference between values, with respect to total supply\n', '        if (_config.supply == 0) {\n', '            mintAmount = kFinal - _k;\n', '        } else {\n', '            mintAmount = (_config.supply * (kFinal - _k)) / _k;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Simply scaled raw reserve values and returns the sum\n', '     * @param _bAssets  All bAssets\n', '     * @return x        Scaled vault balances\n', '     * @return sum      Sum of scaled vault balances\n', '     */\n', '    function _getReserves(BassetData[] memory _bAssets)\n', '        internal\n', '        pure\n', '        returns (uint256[] memory x, uint256 sum)\n', '    {\n', '        uint256 len = _bAssets.length;\n', '        x = new uint256[](len);\n', '        uint256 r;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            BassetData memory bAsset = _bAssets[i];\n', '            r = (bAsset.vaultBalance * bAsset.ratio) / 1e8;\n', '            x[i] = r;\n', '            sum += r;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Checks that no bAsset reserves exceed max weight\n', '     * @param _x            Scaled bAsset reserves\n', '     * @param _sum          Sum of x, precomputed\n', '     * @param _limits       Config object containing max and min weights\n', '     * @return inBounds     Bool, true if all assets are within bounds\n', '     */\n', '    function _inBounds(\n', '        uint256[] memory _x,\n', '        uint256 _sum,\n', '        WeightLimits memory _limits\n', '    ) internal pure returns (bool inBounds) {\n', '        uint256 len = _x.length;\n', '        inBounds = true;\n', '        uint256 w;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            w = (_x[i] * 1e18) / _sum;\n', '            if (w > _limits.max || w < _limits.min) return false;\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                    INVARIANT\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Compute the invariant f(x) for a given array of supplies `x`.\n', '     * @param _x        Scaled vault balances\n', '     * @param _sum      Sum of scaled vault balances\n', '     * @param _a        Precise amplification coefficient\n', '     * @return k        Cumulative value of all assets according to the invariant\n', '     */\n', '    function _invariant(\n', '        uint256[] memory _x,\n', '        uint256 _sum,\n', '        uint256 _a\n', '    ) internal pure returns (uint256 k) {\n', '        if (_sum == 0) return 0;\n', '\n', '        uint256 var1 = _x[0] * _x[1];\n', '        uint256 var2 = (_a * var1) / (_x[0] + _x[1]) / A_PRECISION;\n', '        // result = 2 * (isqrt(var2**2 + (A + A_PRECISION) * var1 // A_PRECISION) - var2) + 1\n', '        k = 2 * (Root.sqrt((var2**2) + (((_a + A_PRECISION) * var1) / A_PRECISION)) - var2) + 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Solves the invariant for _i with respect to target K, given an array of reserves.\n', '     * @param _x        Scaled reserve balances\n', '     * @param _a        Precise amplification coefficient\n', '     * @param _idx      Index of asset for which to solve\n', '     * @param _targetK  Target invariant value K\n', '     * @return y        New reserve of _i\n', '     */\n', '    function _solveInvariant(\n', '        uint256[] memory _x,\n', '        uint256 _a,\n', '        uint8 _idx,\n', '        uint256 _targetK\n', '    ) internal pure returns (uint256 y) {\n', '        require(_idx == 0 || _idx == 1, "Invalid index");\n', '\n', '        uint256 x = _idx == 0 ? _x[1] : _x[0];\n', '        uint256 var1 = _a + A_PRECISION;\n', '        uint256 var2 = ((_targetK**2) * A_PRECISION) / var1;\n', '        // var3 = var2 // (4 * x) + k * _a // var1 - x\n', '        uint256 tmp = var2 / (4 * x) + ((_targetK * _a) / var1);\n', '        uint256 var3 = tmp >= x ? tmp - x : x - tmp;\n', '        //  result = (sqrt(var3**2 + var2) + var3) // 2\n', '        y = ((Root.sqrt((var3**2) + var2) + tmp - x) / 2) + 1;\n', '    }\n', '}']