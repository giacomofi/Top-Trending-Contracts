['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\n', '        return (a + m - 1) / m * m;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Only allowed by owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0),"Invalid address passed");\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', 'contract IFY_Stake is Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    IERC20 public IFY;\n', '    \n', '    uint256 public  totalClaimedRewards;\n', '    uint256 public  totalStaked;\n', '    \n', '    struct Account{\n', '        uint256 stakedAmount;\n', '        uint256 rewardsClaimed;\n', '        uint256 pending;\n', '        uint256 stakingOpt;\n', '        uint256 stakingEndDate;\n', '        uint256 rewardPercentage;\n', '    }\n', '    \n', '    mapping(address => Account) public stakers;\n', '    \n', '    struct StakingOpts{\n', '        uint256 stakingPeriod;\n', '        uint256 stakingPercentage;\n', '    }\n', '    \n', '    StakingOpts[4] public stakingOptions;\n', '    \n', '    event RewardClaimed(address claimer, uint256 reward);\n', '    event UnStaked(address claimer, uint256 stakedTokens);\n', '    event Staked(address staker, uint256 tokens, uint256 stakingOption);\n', '    \n', '    constructor() public {\n', '        /*\n', '        1 week: 5% ROI\n', '        1 month: 25% ROI\n', '        3 months: 100% ROI\n', '        6 months: 245% ROI\n', '        */\n', '        stakingOptions[0].stakingPeriod = 1 weeks;\n', '        stakingOptions[0].stakingPercentage = 5;\n', '        \n', '        stakingOptions[1].stakingPeriod = 30 days; // 1 month\n', '        stakingOptions[1].stakingPercentage = 25;\n', '        \n', '        stakingOptions[2].stakingPeriod = 90 days;\n', '        stakingOptions[2].stakingPercentage = 100;\n', '        \n', '        stakingOptions[3].stakingPeriod = 180 days;\n', '        stakingOptions[3].stakingPercentage = 245;\n', '        \n', '        owner = 0xa97F07bc8155f729bfF5B5312cf42b6bA7c4fCB9;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Set Token Address\n', '    // only Owner can use it\n', '    // @param _tokenAddress the address of token\n', '    // -----------------------------------------------------------------------\n', '    function setTokenAddress(address _tokenAddress) external onlyOwner{\n', '        IFY = IERC20(_tokenAddress);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Start the staking or add to existing stake\n', '    // user must approve the staking contract to transfer tokens before staking\n', '    // @param _amount number of tokens to stake\n', '    // ------------------------------------------------------------------------\n', '    function STAKE(uint256 _amount, uint256 optionNumber) external {\n', '        require(optionNumber >= 1 && optionNumber <= 4, "Invalid option choice");\n', '        require(stakers[msg.sender].stakedAmount == 0, "Your stake is already running");\n', '        \n', '        // no tax will be applied upon staking IFY\n', '        totalStaked = totalStaked.add(_amount);\n', '        \n', "        // record it in contract's storage\n", '        stakers[msg.sender].stakedAmount = stakers[msg.sender].stakedAmount.add(_amount); // add to the stake or fresh stake\n', '        stakers[msg.sender].stakingOpt = optionNumber;\n', '        stakers[msg.sender].stakingEndDate = block.timestamp.add(stakingOptions[optionNumber.sub(1)].stakingPeriod);\n', '        stakers[msg.sender].rewardPercentage = stakingOptions[optionNumber.sub(1)].stakingPercentage;\n', '        \n', '        emit Staked(msg.sender, _amount, optionNumber);\n', '        \n', '        // transfer the tokens from caller to staking contract\n', '        require(IFY.transferFrom(msg.sender, address(this), _amount));\n', '    }\n', '    \n', '    function Exit() external{\n', '        if(pendingReward(msg.sender) > 0)\n', '            ClaimReward();\n', '        if(stakers[msg.sender].stakedAmount > 0)\n', '            UnStake();\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Claim reward\n', '    // @required user must be a staker\n', '    // @required must be claimable\n', '    // ------------------------------------------------------------------------\n', '    function ClaimReward() public {\n', '        require(pendingReward(msg.sender) > 0, "nothing pending to claim");\n', '        require(block.timestamp > stakers[msg.sender].stakingEndDate, "claim date has not reached");\n', '        \n', '        uint256 reward = pendingReward(msg.sender);\n', '        \n', '        // add claimed reward to global stats\n', '        totalClaimedRewards = totalClaimedRewards.add(reward);\n', '        \n', '        // add the reward to total claimed rewards\n', '        stakers[msg.sender].rewardsClaimed = stakers[msg.sender].rewardsClaimed.add(reward);\n', '        \n', '        emit RewardClaimed(msg.sender, reward);\n', '        \n', '        // transfer the reward tokens\n', '        require(IFY.transfer(msg.sender, reward), "reward transfer failed");\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Unstake the tokens\n', '    // @required user must be a staker\n', '    // @required must be claimable\n', '    // ------------------------------------------------------------------------\n', '    function UnStake() public {\n', '        uint256 stakedAmount = stakers[msg.sender].stakedAmount;\n', '        require(stakedAmount > 0, "insufficient stake");\n', '        require(block.timestamp > stakers[msg.sender].stakingEndDate, "staking period has not ended");\n', '        \n', '        totalStaked = totalStaked.sub(stakedAmount);\n', '        \n', '        if(pendingReward(msg.sender) > 0)\n', '            stakers[msg.sender].pending = pendingReward(msg.sender);\n', '        \n', '        stakers[msg.sender].stakedAmount = 0;\n', '        \n', '        emit UnStaked(msg.sender, stakedAmount);\n', '        \n', '        // transfer staked tokens\n', '        require(IFY.transfer(msg.sender, stakedAmount));\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Query to get the pending reward\n', '    // ------------------------------------------------------------------------\n', '    function pendingReward(address user) public view returns(uint256 _pendingReward){\n', '        uint256 reward = (onePercent(stakers[user].stakedAmount)).mul(stakers[user].rewardPercentage);\n', '        reward =  reward.sub(stakers[user].rewardsClaimed);\n', '        return reward.add(stakers[msg.sender].pending);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Private function to calculate 1% percentage\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) private pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '}']