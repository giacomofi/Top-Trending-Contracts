['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-04\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.12; */\n', '/* pragma experimental ABIEncoderV2; */\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'library DssExecLib {\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '    function vat()        public view returns (address) {}\n', '    function cat()        public view returns (address) {}\n', '    function pot()        public view returns (address) {}\n', '    function vow()        public view returns (address) {}\n', '    function end()        public view returns (address) {}\n', '    function reg()        public view returns (address) {}\n', '    function spotter()    public view returns (address) {}\n', '    function flipperMom() public view returns (address) {}\n', '    function flip(bytes32) public view returns (address) {}\n', '    function getChangelogAddress(bytes32) public view returns (address) {}\n', '    function setChangelogAddress(bytes32, address) public {}\n', '    function setChangelogVersion(string memory) public {}\n', '    function authorize(address, address) public {}\n', '    function deauthorize(address, address) public {}\n', '    function canCast(uint40, bool) public pure returns (bool) {}\n', '    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\n', '    function setContract(address, bytes32, address) public {}\n', '    function setContract(address, bytes32, bytes32, address) public {}\n', '    function setIlkStabilityFee(bytes32, uint256, bool) public {}\n', '    function setIlkLiquidationRatio(bytes32, uint256) public {}\n', '    function increaseGlobalDebtCeiling(uint256) public {}\n', '    function increaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\n', '    function addWritersToMedianWhitelist(address, address[] memory) public {}\n', '    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function addReaderToMedianWhitelist(address, address) public {}\n', '    function addReaderToOSMWhitelist(address, address) public {}\n', '    function removeReaderFromOSMWhitelist(address, address) public {}\n', '    function sendPaymentFromSurplusBuffer(address, uint256) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '/* import { CollateralOpts } from "./CollateralOpts.sol"; */\n', '\n', 'interface OracleLike_1 {\n', '    function src() external view returns (address);\n', '}\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Modifier used to limit execution time when office hours is enabled\n', '    modifier limited {\n', '        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Returns the next available cast time\n', '    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n', '        require(eta <= uint40(-1));\n', '        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '    function nextCastTime(uint256) external view returns (uint256);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        return SpellAction(action).nextCastTime(eta);\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipAbstract.sol\n', '\n', '/// ClipAbstract.sol -- Clip Interface\n', '\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', 'interface ClipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilk() external view returns (bytes32);\n', '    function vat() external view returns (address);\n', '    function dog() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function spotter() external view returns (address);\n', '    function calc() external view returns (address);\n', '    function buf() external view returns (uint256);\n', '    function tail() external view returns (uint256);\n', '    function cusp() external view returns (uint256);\n', '    function chip() external view returns (uint64);\n', '    function tip() external view returns (uint192);\n', '    function chost() external view returns (uint256);\n', '    function kicks() external view returns (uint256);\n', '    function active(uint256) external view returns (uint256);\n', '    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\n', '    function stopped() external view returns (uint256);\n', '    function file(bytes32,uint256) external;\n', '    function file(bytes32,address) external;\n', '    function kick(uint256,uint256,address,address) external returns (uint256);\n', '    function redo(uint256,address) external;\n', '    function take(uint256,uint256,uint256,address,bytes calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (uint256[] memory);\n', '    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\n', '    function upchost() external;\n', '    function yank(uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\n', 'interface ClipperMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function locked(address) external view returns (uint256);\n', '    function tolerance(address) external view returns (uint256);\n', '    function spotter() external view returns (address);\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setPriceTolerance(address, uint256) external;\n', '    function setBreaker(address, uint256, uint256) external;\n', '    function tripBreaker(address) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import {Fileable, ChainlogLike} from "dss-exec-lib/DssExecLib.sol"; */\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '/* import "dss-interfaces/dss/ClipAbstract.sol"; */\n', '/* import "dss-interfaces/dss/ClipperMomAbstract.sol"; */\n', '\n', 'struct Collateral {\n', '    bytes32 ilk;\n', '    address vat;\n', '    address vow;\n', '    address spotter;\n', '    address cat;\n', '    address dog;\n', '    address end;\n', '    address esm;\n', '    address flipperMom;\n', '    address clipperMom;\n', '    address ilkRegistry;\n', '    address pip;\n', '    address clipper;\n', '    address flipper;\n', '    address calc;\n', '    uint256 hole;\n', '    uint256 chop;\n', '    uint256 buf;\n', '    uint256 tail;\n', '    uint256 cusp;\n', '    uint256 chip;\n', '    uint256 tip;\n', '    uint256 cut;\n', '    uint256 step;\n', '    uint256 tolerance;\n', '    bytes32 clipKey;\n', '    bytes32 calcKey;\n', '    bytes32 flipKey;\n', '}\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/582fa1231a30fa88093fa3385b973c66033ee1cd/governance/votes/Executive%20vote%20-%20June%204%2C%202021.md -q -O - 2> /dev/null)"\n', '    string public constant description =\n', '        "2021-06-04 MakerDAO Executive Spell | Hash: 0x6e8b30cd8c6e2ccb2b567345cc0fda23b143a1243b585d4af40a5b67eff1f3e6";\n', '\n', '    // Turn off office hours\n', '    function officeHours() public override returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '    uint256 constant RAD = 10**45;\n', '\n', '    address constant MCD_CLIP_USDC_A              = 0x046b1A5718da6A226D912cFd306BA19980772908;\n', '    address constant MCD_CLIP_CALC_USDC_A         = 0x0FCa4ba0B80123b5d22dD3C8BF595F3E561d594D;\n', '    address constant MCD_CLIP_USDC_B              = 0x5590F23358Fe17361d7E4E4f91219145D8cCfCb3;\n', '    address constant MCD_CLIP_CALC_USDC_B         = 0xD6FE411284b92d309F79e502Dd905D7A3b02F561;\n', '    address constant MCD_CLIP_TUSD_A              = 0x0F6f88f8A4b918584E3539182793a0C276097f44;\n', '    address constant MCD_CLIP_CALC_TUSD_A         = 0x059acdf311E38aAF77139638228d393Ff27639bF;\n', '    address constant MCD_CLIP_USDT_A              = 0xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d;\n', '    address constant MCD_CLIP_CALC_USDT_A         = 0x1Cf3DE6D570291CDB88229E70037d1705d5be748;\n', '    address constant MCD_CLIP_PAXUSD_A            = 0xBCb396Cd139D1116BD89562B49b9D1d6c25378B0;\n', '    address constant MCD_CLIP_CALC_PAXUSD_A       = 0xAB98De83840b8367046383D2Adef9959E130923e;\n', '    address constant MCD_CLIP_GUSD_A              = 0xa47D68b9dB0A0361284fA04BA40623fcBd1a263E;\n', '    address constant MCD_CLIP_CALC_GUSD_A         = 0xF7e80359Cb9C4E6D178E6689eD8A6A6f91060747;\n', '    address constant MCD_CLIP_PSM_USDC_A          = 0x66609b4799fd7cE12BA799AD01094aBD13d5014D;\n', '    address constant MCD_CLIP_CALC_PSM_USDC_A     = 0xbeE028b5Fa9eb0aDAC5eeF7E5B13383172b91A4E;\n', '    address constant MCD_CLIP_UNIV2DAIUSDC_A      = 0x9B3310708af333f6F379FA42a5d09CBAA10ab309;\n', '    address constant MCD_CLIP_CALC_UNIV2DAIUSDC_A = 0xbEF2ab2aA5CC780A03bccf22AD3320c8CF35af6A;\n', '\n', '    address constant RWF_001_MULSTISIG  = 0x9e1585d9CA64243CE43D42f7dD7333190F66Ca09;\n', '    uint256 constant RWF_001_EXPENSE    = 40_000;\n', '    address constant RISK_001_MULSTISIG = 0xd98ef20520048a35EdA9A202137847A62120d2d9;\n', '    uint256 constant RISK_001_EXPENSE   = 100_500;\n', '    address constant GOV_001_MULSTISIG  = 0x01D26f8c5cC009868A4BF66E268c17B057fF7A73;\n', '    uint256 constant GOV_001_EXPENSE    = 80_000;\n', '    address constant PE_001_MULSTISIG   = 0xe2c16c308b843eD02B09156388Cb240cEd58C01c;\n', '    uint256 constant PE_001_EXPENSE     = 510_000;\n', '    address constant GRO_001_MULSTISIG  = 0x7800C137A645c07132886539217ce192b9F0528e;\n', '    uint256 constant GRO_001_EXPENSE    = 126_117;\n', '    address constant MKT_001_MULSTISIG  = 0xDCAF2C84e1154c8DdD3203880e5db965bfF09B60;\n', '    uint256 constant MKT_001_EXPENSE    = 44_375;\n', '    address constant SES_001_MULSTISIG  = 0x87AcDD9208f73bFc9207e1f6F0fDE906bcA95cc6;\n', '    uint256 constant SES_001_EXPENSE    = 642_135;\n', '\n', '    function flipperToClipper(Collateral memory col) internal {\n', '        // Check constructor values of Clipper\n', '        require(ClipAbstract(col.clipper).vat() == col.vat, "DssSpell/clip-wrong-vat");\n', '        require(ClipAbstract(col.clipper).spotter() == col.spotter, "DssSpell/clip-wrong-spotter");\n', '        require(ClipAbstract(col.clipper).dog() == col.dog, "DssSpell/clip-wrong-dog");\n', '        require(ClipAbstract(col.clipper).ilk() == col.ilk, "DssSpell/clip-wrong-ilk");\n', '        // Set CLIP for the ilk in the DOG\n', '        DssExecLib.setContract(col.dog, col.ilk, "clip", col.clipper);\n', '        // Set VOW in the CLIP\n', '        DssExecLib.setContract(col.clipper, "vow", col.vow);\n', '        // Set CALC in the CLIP\n', '        DssExecLib.setContract(col.clipper, "calc", col.calc);\n', '        // Authorize CLIP can access to VAT\n', '        DssExecLib.authorize(col.vat, col.clipper);\n', '        // Authorize CLIP can access to DOG\n', '        DssExecLib.authorize(col.dog, col.clipper);\n', '        // Authorize DOG can kick auctions on CLIP\n', '        DssExecLib.authorize(col.clipper, col.dog);\n', '        // Authorize the END to access the CLIP\n', '        DssExecLib.authorize(col.clipper, col.end);\n', '        // Authorize CLIPPERMOM can set the stopped flag in CLIP\n', '        // DssExecLib.authorize(col.clipper, col.clipperMom);\n', '        ClipAbstract(col.clipper).file("stopped", 3);\n', '        // Authorize ESM to execute in Clipper\n', '        DssExecLib.authorize(col.clipper, col.esm);\n', '        if (col.pip != address(0)) {\n', '            // We are passing address(0) to those ilks that use a DSValue\n', '            // instead of an Osm or LPOracle. Meaning there is nothing to\n', '            // whilelist on them, the call would revert otherwise.\n', '\n', '            // Whitelist CLIP in the osm\n', '            DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipper);\n', '            // Whitelist clipperMom in the osm\n', '            DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipperMom);\n', '        }\n', '        // No more auctions kicked via the CAT:\n', '        DssExecLib.deauthorize(col.flipper, col.cat);\n', '        // No more circuit breaker for the FLIP:\n', '        DssExecLib.deauthorize(col.flipper, col.flipperMom);\n', '        // Set values\n', '        Fileable(col.dog).file(col.ilk, "hole", col.hole);\n', '        Fileable(col.dog).file(col.ilk, "chop", col.chop);\n', '        Fileable(col.clipper).file("buf", col.buf);\n', '        Fileable(col.clipper).file("tail", col.tail);\n', '        Fileable(col.clipper).file("cusp", col.cusp);\n', '        Fileable(col.clipper).file("chip", col.chip);\n', '        Fileable(col.clipper).file("tip", col.tip);\n', '        Fileable(col.calc).file("cut", col.cut);\n', '        Fileable(col.calc).file("step", col.step);\n', '        ClipperMomAbstract(col.clipperMom).setPriceTolerance(col.clipper, col.tolerance);\n', '        // Update chost\n', '        ClipAbstract(col.clipper).upchost();\n', '        // Replace flip to clip in the ilk registry\n', '        DssExecLib.setContract(col.ilkRegistry, col.ilk, "xlip", col.clipper);\n', '        Fileable(col.ilkRegistry).file(col.ilk, "class", 1);\n', '        // Update Chainlog\n', '        DssExecLib.setChangelogAddress(col.clipKey, col.clipper);\n', '        DssExecLib.setChangelogAddress(col.calcKey, col.calc);\n', '        ChainlogLike(DssExecLib.LOG).removeAddress(col.flipKey);\n', '    }\n', '\n', '    function actions() public override {\n', '        address MCD_VAT         = DssExecLib.vat();\n', '        address MCD_CAT         = DssExecLib.cat();\n', '        address MCD_DOG         = DssExecLib.getChangelogAddress("MCD_DOG");\n', '        address MCD_VOW         = DssExecLib.vow();\n', '        address MCD_SPOT        = DssExecLib.spotter();\n', '        address MCD_END         = DssExecLib.end();\n', '        address MCD_ESM         = DssExecLib.getChangelogAddress("MCD_ESM");\n', '        address FLIPPER_MOM     = DssExecLib.getChangelogAddress("FLIPPER_MOM");\n', '        address CLIPPER_MOM     = DssExecLib.getChangelogAddress("CLIPPER_MOM");\n', '        address ILK_REGISTRY    = DssExecLib.getChangelogAddress("ILK_REGISTRY");\n', '\n', '        // ----------------------------- Global Debt Ceiling ----------------------------\n', '        DssExecLib.increaseGlobalDebtCeiling(500_000_000);\n', '\n', '        // --------------------------------- PSM Fee Out --------------------------------\n', '        Fileable(DssExecLib.getChangelogAddress("MCD_PSM_USDC_A")).file("tout", 0);\n', '\n', '        // ----------------------------- Core Units Payments ----------------------------\n', '        DssExecLib.sendPaymentFromSurplusBuffer(RWF_001_MULSTISIG,  RWF_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(RISK_001_MULSTISIG, RISK_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(GOV_001_MULSTISIG,  GOV_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(PE_001_MULSTISIG,   PE_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(GRO_001_MULSTISIG,  GRO_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(MKT_001_MULSTISIG,  MKT_001_EXPENSE);\n', '        DssExecLib.sendPaymentFromSurplusBuffer(SES_001_MULSTISIG,  SES_001_EXPENSE);\n', '\n', '        // ----------------------------------- USDC-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "USDC-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_USDC_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_USDC_A"),\n', '            calc: MCD_CLIP_CALC_USDC_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_USDC_A",\n', '            calcKey: "MCD_CLIP_CALC_USDC_A",\n', '            flipKey: "MCD_FLIP_USDC_A"\n', '        }));\n', '\n', '        // ----------------------------------- USDC-B -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "USDC-B",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_USDC_B,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_USDC_B"),\n', '            calc: MCD_CLIP_CALC_USDC_B,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_USDC_B",\n', '            calcKey: "MCD_CLIP_CALC_USDC_B",\n', '            flipKey: "MCD_FLIP_USDC_B"\n', '        }));\n', '\n', '        // ----------------------------------- TUSD-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "TUSD-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_TUSD_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_TUSD_A"),\n', '            calc: MCD_CLIP_CALC_TUSD_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_TUSD_A",\n', '            calcKey: "MCD_CLIP_CALC_TUSD_A",\n', '            flipKey: "MCD_FLIP_TUSD_A"\n', '        }));\n', '\n', '        // ----------------------------------- USDT-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "USDT-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: DssExecLib.getChangelogAddress("PIP_USDT"),\n', '            clipper: MCD_CLIP_USDT_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_USDT_A"),\n', '            calc: MCD_CLIP_CALC_USDT_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_USDT_A",\n', '            calcKey: "MCD_CLIP_CALC_USDT_A",\n', '            flipKey: "MCD_FLIP_USDT_A"\n', '        }));\n', '\n', '        // ---------------------------------- PAXUSD-A ---------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "PAXUSD-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_PAXUSD_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_PAXUSD_A"),\n', '            calc: MCD_CLIP_CALC_PAXUSD_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_PAXUSD_A",\n', '            calcKey: "MCD_CLIP_CALC_PAXUSD_A",\n', '            flipKey: "MCD_FLIP_PAXUSD_A"\n', '        }));\n', '\n', '        // ----------------------------------- GUSD-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "GUSD-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_GUSD_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_GUSD_A"),\n', '            calc: MCD_CLIP_CALC_GUSD_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_GUSD_A",\n', '            calcKey: "MCD_CLIP_CALC_GUSD_A",\n', '            flipKey: "MCD_FLIP_GUSD_A"\n', '        }));\n', '\n', '        // ----------------------------------- PSM-USDC-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "PSM-USDC-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: address(0), // DsValue (nothing to whitelist)\n', '            clipper: MCD_CLIP_PSM_USDC_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_PSM_USDC_A"),\n', '            calc: MCD_CLIP_CALC_PSM_USDC_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_PSM_USDC_A",\n', '            calcKey: "MCD_CLIP_CALC_PSM_USDC_A",\n', '            flipKey: "MCD_FLIP_PSM_USDC_A"\n', '        }));\n', '\n', '        // ----------------------------------- UNIV2DAIUSDC-A -----------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "UNIV2DAIUSDC-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: DssExecLib.getChangelogAddress("PIP_UNIV2DAIUSDC"),\n', '            clipper: MCD_CLIP_UNIV2DAIUSDC_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_UNIV2DAIUSDC_A"),\n', '            calc: MCD_CLIP_CALC_UNIV2DAIUSDC_A,\n', '            hole: 0,\n', '            chop: 113 * WAD / 100,\n', '            buf: 105 * RAY / 100,\n', '            tail: 220 minutes,\n', '            cusp: 90 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 300 * RAD,\n', '            cut: 999 * RAY / 1000,\n', '            step: 120 seconds,\n', '            tolerance: 95 * RAY / 100,\n', '            clipKey: "MCD_CLIP_UNIV2DAIUSDC_A",\n', '            calcKey: "MCD_CLIP_CALC_UNIV2DAIUSDC_A",\n', '            flipKey: "MCD_FLIP_UNIV2DAIUSDC_A"\n', '        }));\n', '\n', '        // ------------------------- Update Chainlog -------------------------\n', '\n', '        DssExecLib.setChangelogVersion("1.9.0");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']