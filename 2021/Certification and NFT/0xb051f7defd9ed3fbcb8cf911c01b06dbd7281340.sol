['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/proxy/Initializable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !Address.isContract(address(this));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        address pair,\n', '        uint256\n', '    );\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(\n', '        address indexed sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        address indexed to\n', '    );\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to)\n', '        external\n', '        returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/libraries/Priviledgeable.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'abstract contract Priviledgeable {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    event PriviledgeGranted(address indexed admin);\n', '    event PriviledgeRevoked(address indexed admin);\n', '\n', '    modifier onlyAdmin() {\n', '        require(\n', '            _priviledgeTable[msg.sender],\n', '            "Priviledgeable: caller is not the owner"\n', '        );\n', '        _;\n', '    }\n', '\n', '    mapping(address => bool) private _priviledgeTable;\n', '\n', '    constructor() internal {\n', '        _priviledgeTable[msg.sender] = true;\n', '    }\n', '\n', '    function addAdmin(address _admin) external onlyAdmin returns (bool) {\n', '        require(_admin != address(0), "Admin address cannot be 0");\n', '        return _addAdmin(_admin);\n', '    }\n', '\n', '    function removeAdmin(address _admin) external onlyAdmin returns (bool) {\n', '        require(_admin != address(0), "Admin address cannot be 0");\n', '        _priviledgeTable[_admin] = false;\n', '        emit PriviledgeRevoked(_admin);\n', '\n', '        return true;\n', '    }\n', '\n', '    function isAdmin(address _who) external view returns (bool) {\n', '        return _priviledgeTable[_who];\n', '    }\n', '\n', '    //-----------\n', '    // internals\n', '    //-----------\n', '    function _addAdmin(address _admin) internal returns (bool) {\n', '        _priviledgeTable[_admin] = true;\n', '        emit PriviledgeGranted(_admin);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IEmiERC20.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IEmiERC20 {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IEmiRouter.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IEmiRouter {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function getReserves(IERC20 token0, IERC20 token1)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 _reserve0,\n', '            uint256 _reserve1,\n', '            address poolAddresss\n', '        );\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address ref\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        address ref\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external view returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external view returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address[] calldata pathDAI\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IEmiswap.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IEmiswapRegistry {\n', '    function pools(IERC20 token1, IERC20 token2)\n', '        external\n', '        view\n', '        returns (IEmiswap);\n', '\n', '    function isPool(address addr) external view returns (bool);\n', '\n', '    function deploy(IERC20 tokenA, IERC20 tokenB) external returns (IEmiswap);\n', '    function getAllPools() external view returns (IEmiswap[] memory);\n', '}\n', '\n', 'interface IEmiswap {\n', '    function fee() external view returns (uint256);\n', '\n', '    function tokens(uint256 i) external view returns (IERC20);\n', '\n', '    function deposit(\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata minAmounts,\n', '        address referral\n', '    ) external payable returns (uint256 fairSupply);\n', '\n', '    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\n', '\n', '    function getBalanceForAddition(IERC20 token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\n', '\n', '    function getReturn(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount\n', '    ) external view returns (uint256, uint256);\n', '\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        address to,\n', '        address referral\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '    function initialize(IERC20[] calldata assets) external;\n', '}\n', '\n', '// File: contracts/interfaces/IOneSplit.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IOneSplit {\n', '    function getExpectedReturn(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount,\n', '        uint256 parts,\n', '        uint256 flags\n', '    )\n', '        external\n', '        view\n', '        returns (uint256 returnAmount, uint256[] memory distribution);\n', '}\n', '\n', '// File: contracts/EmiPrice2.sol\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EmiPrice2 is Initializable, Priviledgeable {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint256;\n', '    address[3] public market;\n', '    address public emiRouter;\n', '    address public uniRouter;\n', '    uint256 constant MARKET_OUR = 0;\n', '    uint256 constant MARKET_UNISWAP = 1;\n', '    uint256 constant MARKET_1INCH = 2;\n', '    uint256 constant MAX_PATH_LENGTH = 5;\n', '\n', ' string public codeVersion = "EmiPrice2 v1.0-200-g8d0b0fa";\n', '\n', '    /**\n', '     * @dev Upgradeable proxy constructor replacement\n', '     */\n', '    function initialize(\n', '        address _market1,\n', '        address _market2,\n', '        address _market3,\n', '        address _emirouter,\n', '        address _unirouter\n', '    ) public initializer {\n', '        require(_market1 != address(0), "Market1 address cannot be 0");\n', '        require(_market2 != address(0), "Market2 address cannot be 0");\n', '        require(_market3 != address(0), "Market3 address cannot be 0");\n', '        require(_emirouter != address(0), "EmiRouter address cannot be 0");\n', '        require(_unirouter != address(0), "UniRouter address cannot be 0");\n', '\n', '        market[0] = _market1;\n', '        market[1] = _market2;\n', '        market[2] = _market3;\n', '        emiRouter = _emirouter;\n', '        uniRouter = _unirouter;\n', '        _addAdmin(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Return coin prices with 18-digit precision\n', '     * @param _coins Array of token addresses for price determination\n', '     * @param _basictokens Array of basic tokens to determine price against\n', '     * @param _market Market index [0..2] to get prices from\n', '     */\n', '    function getCoinPrices(\n', '        address[] calldata _coins,\n', '        address[] calldata _basictokens,\n', '        uint8 _market\n', '    ) external view returns (uint256[] memory prices) {\n', '        require(_market < market.length, "Wrong market index");\n', '        uint256[] memory _prices;\n', '\n', '        _prices = new uint256[](_coins.length);\n', '\n', '        if (_market == MARKET_UNISWAP) {\n', '            _getUniswapPrice(_coins, _basictokens[0], _prices);\n', '        } else if (_market == MARKET_OUR) {\n', '            _getOurPrice(_coins, _basictokens, _prices);\n', '        } else {\n', '            _get1inchPrice(_coins, _basictokens[0], _prices);\n', '        }\n', '\n', '        return _prices;\n', '    }\n', '\n', '    function calcRoute(address _target, address _base)\n', '        external\n', '        view\n', '        returns (address[] memory path)\n', '    {\n', '        return _calculateRoute(_target, _base);\n', '    }\n', '\n', '    /**\n', '     * @dev Changes market factory address\n', '     */\n', '    function changeMarket(uint8 idx, address _market) external onlyAdmin {\n', '        require(_market != address(0), "Token address cannot be 0");\n', '        require(idx < 3, "Wrong market index");\n', '\n', '        market[idx] = _market;\n', '    }\n', '\n', '    /**\n', '     * @dev Changes unirouter factory address\n', '     */\n', '    function changeUniRouter(address _router) external onlyAdmin {\n', '        require(_router != address(0), "Router address cannot be 0");\n', '\n', '        uniRouter = _router;\n', '    }\n', '\n', '    /**\n', '     * @dev Changes market factory address\n', '     */\n', '    function changeEmiRouter(address _router) external onlyAdmin {\n', '        require(_router != address(0), "Router address cannot be 0");\n', '\n', '        emiRouter = _router;\n', '    }\n', '\n', '    // internal methods\n', '    function _getUniswapPrice(\n', '        address[] memory _coins,\n', '        address _base,\n', '        uint256[] memory _prices\n', '    ) internal view {\n', '        uint256 base_decimal = IEmiERC20(_base).decimals();\n', '\n', '        for (uint256 i = 0; i < _coins.length; i++) {\n', '            uint256 target_decimal = IEmiERC20(_coins[i]).decimals();\n', '\n', '            if (_coins[i] == _base) {\n', '                _prices[i] = 10**18; // special case: 1 for base token\n', '                continue;\n', '            }\n', '\n', '            uint256 _in = 10**target_decimal;\n', '\n', '            address[] memory _path = new address[](2);\n', '            _path[0] = _coins[i];\n', '            _path[1] = _base;\n', '            uint256[] memory _amts =\n', '                IUniswapV2Router02(uniRouter).getAmountsOut(_in, _path);\n', '            if (_amts.length > 0) {\n', '                _prices[i] = _amts[_amts.length - 1].mul(\n', '                    10**(18 - base_decimal)\n', '                );\n', '            } else {\n', '                _prices[i] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get price from our router\n', '     */\n', '    function _getOurPrice(\n', '        address[] memory _coins,\n', '        address[] memory _base,\n', '        uint256[] memory _prices\n', '    ) internal view {\n', '        IEmiswapRegistry _factory = IEmiswapRegistry(market[MARKET_OUR]);\n', '        IEmiswap _p;\n', '\n', '        if (address(_factory) == address(0)) {\n', '            return;\n', '        }\n', '\n', '        for (uint256 i = 0; i < _coins.length; i++) {\n', '            // test each base token -- whether we can use it for price calc\n', '            uint256 target_decimal = IEmiERC20(_coins[i]).decimals();\n', '\n', '            for (uint256 m = 0; m < _base.length; m++) {\n', '                if (_coins[i] == _base[m]) {\n', '                    _prices[i] = 10**18; // special case: 1 for base token\n', '                    break;\n', '                }\n', '                uint256 base_decimal = IEmiERC20(_base[m]).decimals();\n', '\n', '                (address t0, address t1) =\n', '                    (_coins[i] < _base[m])\n', '                        ? (_coins[i], _base[m])\n', '                        : (_base[m], _coins[i]);\n', '                _p = IEmiswap(_factory.pools(IERC20(t0), IERC20(t1))); // do we have direct pair?\n', '                address[] memory _route;\n', '\n', '                if (address(_p) == address(0)) {\n', '                    // we have to calc route\n', '                    _route = _calculateRoute(_coins[i], _base[m]);\n', '                } else { // just take direct pair\n', '                    _route = new address[](2);\n', '                    _route[0] = _coins[i];\n', '                    _route[1] = _base[m];\n', '                }\n', '                if (_route.length == 0) {\n', '                    continue; // try next base token\n', '                } else {\n', '                    uint256 _in = 10**target_decimal;\n', '                    uint256[] memory _amts =\n', '                        IEmiRouter(emiRouter).getAmountsOut(_in, _route);\n', '                    if (_amts.length > 0) {\n', '                        _prices[i] = _amts[_amts.length - 1].mul(\n', '                            10**(18 - base_decimal)\n', '                        );\n', '                    } else {\n', '                        _prices[i] = 0;\n', '                    }\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get price from 1inch integrator\n', '     */\n', '    function _get1inchPrice(\n', '        address[] memory _coins,\n', '        address _base,\n', '        uint256[] memory _prices\n', '    ) internal view {\n', '        IOneSplit _factory = IOneSplit(market[MARKET_1INCH]);\n', '\n', '        if (address(_factory) == address(0)) {\n', '            return;\n', '        }\n', '        for (uint256 i = 0; i < _coins.length; i++) {\n', '            uint256 d = uint256(IEmiERC20(_coins[i]).decimals());\n', '            (_prices[i], ) = _factory.getExpectedReturn(\n', '                IERC20(_coins[i]),\n', '                IERC20(_base),\n', '                10**d,\n', '                1,\n', '                0\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates route from _target token to _base, using adapted Li algorithm\n', '     * https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9B%D0%B8\n', '     */\n', '    function _calculateRoute(address _target, address _base)\n', '        internal\n', '        view\n', '        returns (address[] memory path)\n', '    {\n', '        IEmiswap[] memory pools =\n', '            IEmiswapRegistry(market[MARKET_OUR]).getAllPools(); // gets all pairs\n', '        uint8[] memory pairIdx = new uint8[](pools.length); // vector for storing path step indexes\n', '\n', '        // Phase 1. Mark pairs starting from target token\n', '        _markPathStep(pools, pairIdx, 1, _target); // start from 1 step\n', '        address[] memory _curStep = new address[](pools.length);\n', '        _curStep[0] = _target; // store target address as first current step\n', '        address[] memory _prevStep = new address[](pools.length);\n', '\n', '        for (uint8 i = 2; i < MAX_PATH_LENGTH; i++) {\n', '            // pass the wave\n', '            _moveSteps(_prevStep, _curStep);\n', '\n', '            for (uint256 j = 0; j < pools.length; j++) {\n', '                if (pairIdx[j] == i - 1) {\n', '                    // found previous step, store second token\n', '                    address _a = _getAddressFromPrevStep(pools[j], _prevStep);\n', '                    _markPathStep(pools, pairIdx, i, _a);\n', '                    _addToCurrentStep(_curStep, _a);\n', '                }\n', '            }\n', '        }\n', '\n', '        // matrix marked -- start creating route from base token back to target\n', '        uint8 baseIdx = 0;\n', '\n', '        for (uint8 i = 0; i < pools.length; i++) {\n', '            if (\n', '                address(pools[i].tokens(1)) == _base ||\n', '                address(pools[i].tokens(0)) == _base\n', '            ) {\n', '                if (baseIdx == 0 || baseIdx > pairIdx[i]) {\n', '                    // look for shortest available path\n', '                    baseIdx = pairIdx[i];\n', '                }\n', '            }\n', '        }\n', '\n', '        if (baseIdx == 0) {\n', '            // no route found\n', '            return new address[](0);\n', '        } else {\n', '            // get back to target from base\n', '            address _a = _base;\n', '\n', '            path = new address[](baseIdx + 1);\n', '            path[baseIdx] = _base;\n', '\n', '            for (uint8 i = baseIdx; i > 0; i--) {\n', '                // take pair from last level\n', '                for (uint256 j = 0; j < pools.length; j++) {\n', '                    if (\n', '                        pairIdx[j] == i &&\n', '                        (address(pools[j].tokens(1)) == _a ||\n', '                            address(pools[j].tokens(0)) == _a)\n', '                    ) {\n', '                        // push path chain\n', '                        _a = (address(pools[j].tokens(0)) == _a) // get next token from pair\n', '                            ? address(pools[j].tokens(1))\n', '                            : address(pools[j].tokens(0));\n', '                        path[i - 1] = _a;\n', '                        break;\n', '                    }\n', '                }\n', '            }\n', '            return path;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Marks next path level from _token\n', '     */\n', '    function _markPathStep(\n', '        IEmiswap[] memory _pools,\n', '        uint8[] memory _idx,\n', '        uint8 lvl,\n', '        address _token\n', '    ) internal view {\n', '        for (uint256 j = 0; j < _pools.length; j++) {\n', '            if (\n', '                _idx[j] == 0 &&\n', '                (address(_pools[j].tokens(1)) == _token ||\n', '                    address(_pools[j].tokens(0)) == _token)\n', '            ) {\n', '                // found match\n', '                _idx[j] = lvl;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get address of the second token from previous level pair\n', '     */\n', '    function _getAddressFromPrevStep(IEmiswap pair, address[] memory prevStep)\n', '        internal\n', '        view\n', '        returns (address r)\n', '    {\n', '        for (uint256 i = 0; i < prevStep.length; i++) {\n', '            if (\n', '                prevStep[i] != address(0) &&\n', '                (address(pair.tokens(0)) == prevStep[i] ||\n', '                    address(pair.tokens(1)) == prevStep[i])\n', '            ) {\n', '                return\n', '                    (address(pair.tokens(0)) == prevStep[i])\n', '                        ? address(pair.tokens(1))\n', '                        : address(pair.tokens(0));\n', '            }\n', '        }\n', '        return address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Moves one array to another striping empty entries\n', '     */\n', '    function _moveSteps(address[] memory _to, address[] memory _from)\n', '        internal\n', '        pure\n', '    {\n', '        for (uint256 i = 0; i < _from.length; i++) {\n', '            _to[i] = _from[i];\n', '            _from[i] = address(0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Adds pairs second token address to current step array\n', '     * @param _step Array for storing current step addresses\n', '     * @param _token First token pair address\n', '     */\n', '    function _addToCurrentStep(address[] memory _step, address _token)\n', '        internal\n', '        pure\n', '    {\n', '        uint256 l = 0;\n', '\n', '        for (uint256 i = 0; i < _step.length; i++) {\n', '            if (_step[i] == _token) {\n', '                // token already exists in a list\n', '                return;\n', '            } else {\n', '                if (_step[i] == address(0)) {\n', '                    // first free cell found\n', '                    break;\n', '                } else {\n', '                    l++;\n', '                }\n', '            }\n', '        }\n', '        _step[l] = _token;\n', '    }\n', '}']