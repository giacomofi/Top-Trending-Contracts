['pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'import "./roles/Ownable.sol";\n', 'import "./interfaces/IStaking.sol";\n', 'import "./TokenPool.sol";\n', '\n', '\n', '/**\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by Compound and Uniswap.\n', ' *\n', ' *  Distribution tokens are added to a locked pool in the contract and become unlocked over time according to a once-configurable unlock schedule. Once unlocked, they are available to be claimed by users.\n', ' *\n', ' *  A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share is a function of the number of tokens deposited as well as the length of time deposited.\n', ' *\n', ' *  Specifically, a user\'s share of the currently-unlocked pool equals their "deposit-seconds" divided by the global "deposit-seconds". This aligns the new token distribution with long term supporters of the project, addressing one of the major drawbacks of simple airdrops.\n', ' *\n', ' *  More background and motivation available at:\n', ' *  https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n', ' */\n', 'contract TokenGeyser is IStaking, Ownable\n', '{\n', '  using SafeMath for uint;\n', '\n', '\n', '  // single stake for user; user may have multiple.\n', '  struct Stake\n', '  {\n', '    uint stakingShares;\n', '    uint timestampSec;\n', '  }\n', '\n', '  // caches aggregated values from the User->Stake[] map to save computation.\n', "  // if lastAccountingTimestampSec is 0, there's no entry for that user.\n", '  struct UserTotals\n', '  {\n', '    uint stakingShares;\n', '    uint stakingShareSeconds;\n', '    uint lastAccountingTimestampSec;\n', '  }\n', '\n', '  // locked/unlocked state\n', '  struct UnlockSchedule\n', '  {\n', '    uint initialLockedShares;\n', '    uint unlockedShares;\n', '    uint lastUnlockTimestampSec;\n', '    uint endAtSec;\n', '    uint durationSec;\n', '  }\n', '\n', '\n', '  TokenPool private _lockedPool;\n', '  TokenPool private _unlockedPool;\n', '  TokenPool private _stakingPool;\n', '\n', '  UnlockSchedule[] public unlockSchedules;\n', '\n', '\n', '  // time-bonus params\n', '  uint public startBonus = 0;\n', '  uint public bonusPeriodSec = 0;\n', '  uint public constant BONUS_DECIMALS = 2;\n', '\n', '\n', '  // global accounting state\n', '  uint public totalLockedShares = 0;\n', '  uint public totalStakingShares = 0;\n', '  uint private _maxUnlockSchedules = 0;\n', '  uint private _initialSharesPerToken = 0;\n', '  uint private _totalStakingShareSeconds = 0;\n', '  uint private _lastAccountingTimestampSec = now;\n', '\n', '\n', '  // timestamp ordered stakes for each user, earliest to latest.\n', '  mapping(address => Stake[]) private _userStakes;\n', '\n', '  // staking values per user\n', '  mapping(address => UserTotals) private _userTotals;\n', '\n', '  mapping(address => uint) public initStakeTimestamps;\n', '\n', '\n', '  event Staked(address indexed user, uint amount, uint total, bytes data);\n', '  event Unstaked(address indexed user, uint amount, uint total, bytes data);\n', '\n', '  event TokensClaimed(address indexed user, uint amount);\n', '  event TokensLocked(uint amount, uint durationSec, uint total);\n', '  event TokensUnlocked(uint amount, uint remainingLocked);\n', '\n', '\n', '  /**\n', '   * @param stakingToken The token users deposit as stake.\n', '   * @param distributionToken The token users receive as they unstake.\n', '   * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n', '   * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point. e.g. 25% means user gets 25% of max distribution tokens.\n', '   * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '   * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '   */\n', '  constructor(IERC20 stakingToken, IERC20 distributionToken, uint maxUnlockSchedules, uint startBonus_, uint bonusPeriodSec_, uint initialSharesPerToken) public\n', '  {\n', '    // start bonus must be <= 100%\n', '    require(startBonus_ <= 10 ** BONUS_DECIMALS, "Garden: bonus too high");\n', '    // if no period is desired, set startBonus = 100% & bonusPeriod to small val like 1sec.\n', '    require(bonusPeriodSec_ != 0, "Garden: bonus period 0");\n', '    require(initialSharesPerToken > 0, "Garden: 0");\n', '\n', '    _stakingPool = new TokenPool(stakingToken);\n', '    _lockedPool = new TokenPool(distributionToken);\n', '    _unlockedPool = new TokenPool(distributionToken);\n', '\n', '    startBonus = startBonus_;\n', '    bonusPeriodSec = bonusPeriodSec_;\n', '    _maxUnlockSchedules = maxUnlockSchedules;\n', '    _initialSharesPerToken = initialSharesPerToken;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Returns the number of unlockable shares from a given schedule. The returned value depends on the time since the last unlock. This function updates schedule accounting, but does not actually transfer any tokens.\n', '   *\n', '   * @param s Index of the unlock schedule.\n', '   *\n', '   * @return The number of unlocked shares.\n', '   */\n', '  function unlockScheduleShares(uint s) private returns (uint)\n', '  {\n', '    UnlockSchedule storage schedule = unlockSchedules[s];\n', '\n', '    if (schedule.unlockedShares >= schedule.initialLockedShares)\n', '    {\n', '      return 0;\n', '    }\n', '\n', '    uint sharesToUnlock = 0;\n', '\n', '    // Special case to handle any leftover dust from integer division\n', '    if (now >= schedule.endAtSec)\n', '    {\n', '      sharesToUnlock = (schedule.initialLockedShares.sub(schedule.unlockedShares));\n', '      schedule.lastUnlockTimestampSec = schedule.endAtSec;\n', '    }\n', '    else\n', '    {\n', '      sharesToUnlock = now.sub(schedule.lastUnlockTimestampSec).mul(schedule.initialLockedShares).div(schedule.durationSec);\n', '\n', '      schedule.lastUnlockTimestampSec = now;\n', '    }\n', '\n', '    schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n', '\n', '    return sharesToUnlock;\n', '  }\n', '\n', '  /**\n', '   * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the previously defined unlock schedules. Publicly callable.\n', '   *\n', '   * @return Number of newly unlocked distribution tokens.\n', '   */\n', '  function unlockTokens() public returns (uint)\n', '  {\n', '    uint unlockedTokens = 0;\n', '    uint lockedTokens = totalLocked();\n', '\n', '    if (totalLockedShares == 0)\n', '    {\n', '      unlockedTokens = lockedTokens;\n', '    }\n', '    else\n', '    {\n', '      uint unlockedShares = 0;\n', '\n', '      for (uint s = 0; s < unlockSchedules.length; s++)\n', '      {\n', '        unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n', '      }\n', '\n', '      unlockedTokens = unlockedShares.mul(lockedTokens).div(totalLockedShares);\n', '      totalLockedShares = totalLockedShares.sub(unlockedShares);\n', '    }\n', '\n', '    if (unlockedTokens > 0)\n', '    {\n', '      require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens), "Garden: tx out of locked pool err");\n', '\n', '      emit TokensUnlocked(unlockedTokens, totalLocked());\n', '    }\n', '\n', '    return unlockedTokens;\n', '  }\n', '\n', '  /**\n', '   * @dev A globally callable function to update the accounting state of the system.\n', '   *      Global state and state for the caller are updated.\n', '   *\n', '   * @return [0] balance of the locked pool\n', '   * @return [1] balance of the unlocked pool\n', "   * @return [2] caller's staking share seconds\n", '   * @return [3] global staking share seconds\n', '   * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\n', '   *\n', '   * @return [5] block timestamp\n', '   */\n', '  function updateAccounting() public returns (uint, uint, uint, uint, uint, uint)\n', '  {\n', '    unlockTokens();\n', '\n', '\n', '    uint newStakingShareSeconds = now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\n', '\n', '    _totalStakingShareSeconds = _totalStakingShareSeconds.add(newStakingShareSeconds);\n', '    _lastAccountingTimestampSec = now;\n', '\n', '\n', '    UserTotals storage totals = _userTotals[msg.sender];\n', '\n', '    uint newUserStakingShareSeconds = now.sub(totals.lastAccountingTimestampSec).mul(totals.stakingShares);\n', '\n', '    totals.stakingShareSeconds = totals.stakingShareSeconds.add(newUserStakingShareSeconds);\n', '    totals.lastAccountingTimestampSec = now;\n', '\n', '    uint totalUserRewards = (_totalStakingShareSeconds > 0) ? totalUnlocked().mul(totals.stakingShareSeconds).div(_totalStakingShareSeconds) : 0;\n', '\n', '    return (totalLocked(), totalUnlocked(), totals.stakingShareSeconds, _totalStakingShareSeconds, totalUserRewards, now);\n', '  }\n', '\n', '  /**\n', '   * @dev allows the contract owner to add more locked distribution tokens, along with the associated "unlock schedule". These locked tokens immediately begin unlocking linearly over the duration of durationSec timeframe.\n', '   *\n', '   * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n', '   *\n', '   * @param durationSec Length of time to linear unlock the tokens.\n', '   */\n', '  function lockTokens(uint amount, uint durationSec) external onlyOwner\n', '  {\n', '    require(unlockSchedules.length < _maxUnlockSchedules, "Garden: reached max unlock schedules");\n', '\n', '    // update lockedTokens amount before using it in computations after.\n', '    updateAccounting();\n', '\n', '    UnlockSchedule memory schedule;\n', '\n', '    uint lockedTokens = totalLocked();\n', '    uint mintedLockedShares = (lockedTokens > 0) ? totalLockedShares.mul(amount).div(lockedTokens) : amount.mul(_initialSharesPerToken);\n', '\n', '\n', '    schedule.initialLockedShares = mintedLockedShares;\n', '    schedule.lastUnlockTimestampSec = now;\n', '    schedule.endAtSec = now.add(durationSec);\n', '    schedule.durationSec = durationSec;\n', '    unlockSchedules.push(schedule);\n', '\n', '    totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '    require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount), "Garden: tx into locked pool err");\n', '\n', '    emit TokensLocked(amount, durationSec, totalLocked());\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfers amount of deposit tokens from the user.\n', '   * @param amount Number of deposit tokens to stake.\n', '   * @param data Not used.\n', '   */\n', '  function stake(uint amount, bytes calldata data) external\n', '  {\n', '    _stakeFor(msg.sender, msg.sender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n', '   * @param user User address who gains credit for this stake operation.\n', '   * @param amount Number of deposit tokens to stake.\n', '   * @param data Not used.\n', '   */\n', '  function stakeFor(address user, uint amount, bytes calldata data) external onlyOwner\n', '  {\n', '    _stakeFor(msg.sender, user, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Private implementation of staking methods.\n', '   * @param staker User address who deposits tokens to stake.\n', '   * @param beneficiary User address who gains credit for this stake operation.\n', '   * @param amount Number of deposit tokens to stake.\n', '   */\n', '  function _stakeFor(address staker, address beneficiary, uint amount) private\n', '  {\n', '    require(amount > 0, "Garden: stake amt is 0");\n', '    require(beneficiary != address(0), "Garden: ben is 0 addr");\n', '    require(totalStakingShares == 0 || totalStaked() > 0, "Garden: !valid state, staking shares but no tokens");\n', '\n', '\n', '    if (initStakeTimestamps[beneficiary] == 0)\n', '    {\n', '      initStakeTimestamps[beneficiary] = now;\n', '    }\n', '\n', '\n', '    uint mintedStakingShares = (totalStakingShares > 0) ? totalStakingShares.mul(amount).div(totalStaked()) : amount.mul(_initialSharesPerToken);\n', '\n', '\n', '    require(mintedStakingShares > 0, "Garden: Stake too small");\n', '\n', '    updateAccounting();\n', '\n', '\n', '    UserTotals storage totals = _userTotals[beneficiary];\n', '\n', '    totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '    totals.lastAccountingTimestampSec = now;\n', '\n', '\n', '    Stake memory newStake = Stake(mintedStakingShares, now);\n', '\n', '    _userStakes[beneficiary].push(newStake);\n', '    totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '\n', '    require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount), "Garden: tx into staking pool failed");\n', '\n', '    emit Staked(beneficiary, amount, totalStakedFor(beneficiary), "");\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Applies an additional time-bonus to a distribution amount. This is necessary to encourage long-term deposits instead of constant unstake/restakes.\n', '   * The bonus-multiplier is the result of a linear function that starts at startBonus and ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n', '\n', '   * @param currentRewardTokens The current number of distribution tokens already allotted for this unstake op. Any bonuses are already applied.\n', '\n', '   * @param stakingShareSeconds The stakingShare-seconds that are being burned for new distribution tokens.\n', '\n', '   * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate the time-bonus.\n', '\n', '   * @return Updated amount of distribution tokens to award, with any bonus included on the newly added tokens.\n', '   */\n', '  function computeNewReward(uint currentRewardTokens, uint stakingShareSeconds, uint stakeTimeSec) private view returns (uint)\n', '  {\n', '    uint newRewardTokens = totalUnlocked().mul(stakingShareSeconds).div(_totalStakingShareSeconds);\n', '\n', '    if (stakeTimeSec >= bonusPeriodSec)\n', '    {\n', '      return currentRewardTokens.add(newRewardTokens);\n', '    }\n', '\n', '    uint oneHundredPct = 10 ** BONUS_DECIMALS;\n', '    uint bonusedReward = startBonus.add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec)).mul(newRewardTokens).div(oneHundredPct);\n', '\n', '    return currentRewardTokens.add(bonusedReward);\n', '  }\n', '\n', '  /**\n', '   * @dev Unstakes a certain amount of previously deposited tokens. User also receives their allotted number of distribution tokens.\n', '   * @param amount Number of deposit tokens to unstake / withdraw.\n', '   * @param data Not used.\n', '   */\n', '  function unstake(uint amount, bytes calldata data) external\n', '  {\n', '    _unstake(amount);\n', '  }\n', '\n', '  /**\n', '   * @param amount Number of deposit tokens to unstake / withdraw.\n', '   * @return The total number of distribution tokens that would be rewarded.\n', '   */\n', '  function unstakeQuery(uint amount) public returns (uint)\n', '  {\n', '    return _unstake(amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Unstakes a certain amount of previously deposited tokens. User also receives their allotted number of distribution tokens.\n', '   * @param amount Number of deposit tokens to unstake / withdraw.\n', '\n', '   * @return The total number of distribution tokens rewarded.\n', '   */\n', '  function _unstake(uint amount) private returns (uint)\n', '  {\n', '    uint initStakeTimestamp = initStakeTimestamps[msg.sender];\n', '\n', '    require(now > initStakeTimestamp.add(10 days), "Garden: in cooldown");\n', '\n', '    updateAccounting();\n', '\n', '    require(amount > 0, "Garden: unstake amt 0");\n', '    require(totalStakedFor(msg.sender) >= amount, "Garden: unstake amt > total user stake");\n', '\n', '    uint stakingSharesToBurn = totalStakingShares.mul(amount).div(totalStaked());\n', '\n', '    require(stakingSharesToBurn > 0, "Garden: unstake too small");\n', '\n', '\n', '    UserTotals storage totals = _userTotals[msg.sender];\n', '    Stake[] storage accountStakes = _userStakes[msg.sender];\n', '\n', '    // redeem from most recent stake and go backwards in time.\n', '    uint rewardAmount = 0;\n', '    uint stakingShareSecondsToBurn = 0;\n', '    uint sharesLeftToBurn = stakingSharesToBurn;\n', '\n', '    while (sharesLeftToBurn > 0)\n', '    {\n', '      Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '      uint stakeTimeSec = now.sub(lastStake.timestampSec);\n', '      uint newStakingShareSecondsToBurn = 0;\n', '\n', '      if (lastStake.stakingShares <= sharesLeftToBurn)\n', '      {\n', '        // fully redeem a past stake\n', '        newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSec);\n', '        rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '        stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '        sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\n', '        accountStakes.length--;\n', '      }\n', '      else\n', '      {\n', '        // partially redeem a past stake\n', '        newStakingShareSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\n', '        rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '        stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '        lastStake.stakingShares = lastStake.stakingShares.sub(sharesLeftToBurn);\n', '        sharesLeftToBurn = 0;\n', '      }\n', '    }\n', '\n', '    totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '    totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '\n', '\n', '    _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '    totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '\n', '\n', '    uint unstakeFee = amount.mul(100).div(10000);\n', '\n', '    require(_stakingPool.transfer(owner(), unstakeFee), "Garden: err tx fee");\n', '\n', '    require(_stakingPool.transfer(msg.sender, amount.sub(unstakeFee)), "Garden: tx out of staking pool err");\n', '    require(_unlockedPool.transfer(msg.sender, rewardAmount), "Garden: tx out of unlocked pool err");\n', '\n', '    emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), "");\n', '    emit TokensClaimed(msg.sender, rewardAmount);\n', '\n', '    require(totalStakingShares == 0 || totalStaked() > 0, "Garden: Err unstake. Staking shares but no tokens");\n', '\n', '    return rewardAmount;\n', '  }\n', '\n', '\n', '  /**\n', '   * @param addr  user to look up staking information for.\n', '   * @return The number of staking tokens deposited for addr.\n', '   */\n', '  function totalStakedFor(address addr) public view returns (uint)\n', '  {\n', '    return totalStakingShares > 0 ? totalStaked().mul(_userTotals[addr].stakingShares).div(totalStakingShares) : 0;\n', '  }\n', '\n', '  /**\n', '   * @return The total number of deposit tokens staked globally, by all users.\n', '   */\n', '  function totalStaked() public view returns (uint)\n', '  {\n', '    return _stakingPool.balance();\n', '  }\n', '\n', '  /**\n', '   * @return Total number of locked distribution tokens.\n', '   */\n', '  function totalLocked() public view returns (uint)\n', '  {\n', '    return _lockedPool.balance();\n', '  }\n', '\n', '  /**\n', '   * @return Total number of unlocked distribution tokens.\n', '   */\n', '  function totalUnlocked() public view returns (uint)\n', '  {\n', '    return _unlockedPool.balance();\n', '  }\n', '\n', '  /**\n', '   * @return Number of unlock schedules.\n', '   */\n', '  function unlockScheduleCount() public view returns (uint)\n', '  {\n', '    return unlockSchedules.length;\n', '  }\n', '\n', '\n', '  // getUserTotals, getTotalStakingShareSeconds, getLastAccountingTimestamp functions added for Yield\n', '\n', '  /**\n', '   * @param addr  user to look up staking information for\n', '\n', '   * @return The UserStakes for this address\n', '   */\n', '  function getUserStakes(address addr) public view returns (Stake[] memory)\n', '  {\n', '    Stake[] memory userStakes = _userStakes[addr];\n', '\n', '    return userStakes;\n', '  }\n', '\n', '  /**\n', '   * @param addr user to look up staking information for\n', '\n', '   * @return The UserTotals for this address.\n', '   */\n', '  function getUserTotals(address addr) public view returns (UserTotals memory)\n', '  {\n', '    UserTotals memory userTotals = _userTotals[addr];\n', '\n', '    return userTotals;\n', '  }\n', '\n', '  /**\n', '   * @return The total staking share seconds\n', '   */\n', '  function getTotalStakingShareSeconds() public view returns (uint256)\n', '  {\n', '    return _totalStakingShareSeconds;\n', '  }\n', '\n', '  /**\n', '   * @return The last global accounting timestamp.\n', '   */\n', '  function getLastAccountingTimestamp() public view returns (uint256)\n', '  {\n', '    return _lastAccountingTimestampSec;\n', '  }\n', '\n', '  /**\n', '   * @return The token users receive as they unstake.\n', '   */\n', '  function getDistributionToken() public view returns (IERC20)\n', '  {\n', '    assert(_unlockedPool.token() == _lockedPool.token());\n', '\n', '    return _unlockedPool.token();\n', '  }\n', '\n', '  /**\n', '   * @return The token users deposit as stake.\n', '   */\n', '  function getStakingToken() public view returns (IERC20)\n', '  {\n', '    return _stakingPool.token();\n', '  }\n', '\n', '  /**\n', '   * @dev Note that this application has a staking token as well as a distribution token, which may be different. This function is required by EIP-900.\n', '\n', '   * @return The deposit token used for staking.\n', '   */\n', '  function token() external view returns (address)\n', '  {\n', '    return address(getStakingToken());\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract Ownable\n', '{\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  modifier onlyOwner()\n', '  {\n', '    require(isOwner(), "!owner");\n', '    _;\n', '  }\n', '\n', '  constructor () internal\n', '  {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), msg.sender);\n', '  }\n', '\n', '  function owner() public view returns (address)\n', '  {\n', '    return _owner;\n', '  }\n', '\n', '  function isOwner() public view returns (bool)\n', '  {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner\n', '  {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '\n', '    _owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner\n', '  {\n', '    require(_newOwner != address(0), "0 addy");\n', '\n', '    emit OwnershipTransferred(_owner, _newOwner);\n', '\n', '    _owner = _newOwner;\n', '  }\n', '}\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'contract IStaking\n', '{\n', '  event Staked(address indexed user, uint amount, uint total, bytes data);\n', '  event Unstaked(address indexed user, uint amount, uint total, bytes data);\n', '\n', '  function stake(uint amount, bytes calldata data) external;\n', '\n', '  function stakeFor(address user, uint amount, bytes calldata data) external;\n', '\n', '  function unstake(uint amount, bytes calldata data) external;\n', '\n', '  function totalStakedFor(address addr) public view returns (uint);\n', '\n', '  function totalStaked() public view returns (uint);\n', '\n', '  function token() external view returns (address);\n', '\n', '  /**\n', '   * @return false. This application does not support staking history.\n', '   */\n', '  function supportsHistory() external pure returns (bool)\n', '  {\n', '    return false;\n', '  }\n', '}\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'import "./roles/Ownable.sol";\n', '\n', '\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract needs to hold multiple distinct pools of the same token.\n", ' */\n', 'contract TokenPool is Ownable\n', '{\n', '  IERC20 public token;\n', '\n', '\n', '  constructor(IERC20 _token) public\n', '  {\n', '    token = _token;\n', '  }\n', '\n', '  function balance() public view returns (uint)\n', '  {\n', '    return token.balanceOf(address(this));\n', '  }\n', '\n', '  function transfer(address _to, uint _value) external onlyOwner returns (bool)\n', '  {\n', '    return token.transfer(_to, _value);\n', '  }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']