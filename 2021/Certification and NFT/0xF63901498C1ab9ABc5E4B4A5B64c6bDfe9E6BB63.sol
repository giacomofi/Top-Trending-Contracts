['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/OpenZeppelin/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/OpenZeppelin/utils/EnumerableSet.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// File contracts/OpenZeppelin/utils/Address.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/OpenZeppelin/utils/Context.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/OpenZeppelin/access/AccessControl.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Access/MISOAdminAccess.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract MISOAdminAccess is AccessControl {\n', '\n', '    /// @dev Whether access is initialised.\n', '    bool private initAccess;\n', '\n', '    /// @notice Events for adding and removing various roles.\n', '    event AdminRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event AdminRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '\n', '    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\n', '    constructor() public {\n', '    }\n', '\n', '    /**\n', '     * @notice Initializes access controls.\n', '     * @param _admin Admins address.\n', '     */\n', '    function initAccessControls(address _admin) public {\n', '        require(!initAccess, "Already initialised");\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n', '        initAccess = true;\n', '    }\n', '\n', '    /////////////\n', '    // Lookups //\n', '    /////////////\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the admin role.\n', '     * @param _address EOA or contract being checked.\n', '     * @return bool True if the account has the role or false if it does not.\n', '     */\n', '    function hasAdminRole(address _address) public  view returns (bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, _address);\n', '    }\n', '\n', '    ///////////////\n', '    // Modifiers //\n', '    ///////////////\n', '\n', '    /**\n', '     * @notice Grants the admin role to an address.\n', '     * @dev The sender must have the admin role.\n', '     * @param _address EOA or contract receiving the new role.\n', '     */\n', '    function addAdminRole(address _address) external {\n', '        grantRole(DEFAULT_ADMIN_ROLE, _address);\n', '        emit AdminRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the admin role from an address.\n', '     * @dev The sender must have the admin role.\n', '     * @param _address EOA or contract affected.\n', '     */\n', '    function removeAdminRole(address _address) external {\n', '        revokeRole(DEFAULT_ADMIN_ROLE, _address);\n', '        emit AdminRoleRemoved(_address, _msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Access/MISOAccessControls.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @notice Access Controls\n', ' * @author Attr: BlockRocket.tech\n', ' */\n', 'contract MISOAccessControls is MISOAdminAccess {\n', '    /// @notice Role definitions\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant SMART_CONTRACT_ROLE = keccak256("SMART_CONTRACT_ROLE");\n', '    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR_ROLE");\n', '\n', '    /// @notice Events for adding and removing various roles\n', '\n', '    event MinterRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event MinterRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event OperatorRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event OperatorRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event SmartContractRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event SmartContractRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    /**\n', '     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\n', '     */\n', '    constructor() public {\n', '    }\n', '\n', '\n', '    /////////////\n', '    // Lookups //\n', '    /////////////\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the minter role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasMinterRole(address _address) public view returns (bool) {\n', '        return hasRole(MINTER_ROLE, _address);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the smart contract role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasSmartContractRole(address _address) public view returns (bool) {\n', '        return hasRole(SMART_CONTRACT_ROLE, _address);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the operator role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasOperatorRole(address _address) public view returns (bool) {\n', '        return hasRole(OPERATOR_ROLE, _address);\n', '    }\n', '\n', '    ///////////////\n', '    // Modifiers //\n', '    ///////////////\n', '\n', '    /**\n', '     * @notice Grants the minter role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addMinterRole(address _address) external {\n', '        grantRole(MINTER_ROLE, _address);\n', '        emit MinterRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the minter role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeMinterRole(address _address) external {\n', '        revokeRole(MINTER_ROLE, _address);\n', '        emit MinterRoleRemoved(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Grants the smart contract role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addSmartContractRole(address _address) external {\n', '        grantRole(SMART_CONTRACT_ROLE, _address);\n', '        emit SmartContractRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the smart contract role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeSmartContractRole(address _address) external {\n', '        revokeRole(SMART_CONTRACT_ROLE, _address);\n', '        emit SmartContractRoleRemoved(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Grants the operator role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addOperatorRole(address _address) external {\n', '        grantRole(OPERATOR_ROLE, _address);\n', '        emit OperatorRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the operator role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeOperatorRole(address _address) external {\n', '        revokeRole(OPERATOR_ROLE, _address);\n', '        emit OperatorRoleRemoved(_address, _msgSender());\n', '    }\n', '\n', '}\n', '\n', '\n', '// File contracts/Utils/SafeTransfer.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract SafeTransfer {\n', '\n', '    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    /// @dev Helper function to handle both ETH and ERC20 payments\n', '    function _safeTokenPayment(\n', '        address _token,\n', '        address payable _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (address(_token) == ETH_ADDRESS) {\n', '            _safeTransferETH(_to,_amount );\n', '        } else {\n', '            _safeTransfer(_token, _to, _amount);\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Helper function to handle both ETH and ERC20 payments\n', '    function _tokenPayment(\n', '        address _token,\n', '        address payable _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (address(_token) == ETH_ADDRESS) {\n', '            _to.transfer(_amount);\n', '        } else {\n', '            _safeTransfer(_token, _to, _amount);\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Transfer helper from UniswapV2 Router\n', '    function _safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '\n', '    /**\n', '     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\n', '     * Im trying to make it a habit to put external calls last (reentrancy)\n', '     * You can put this in an internal function if you like.\n', '     */\n', '    function _safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        (bool success, bytes memory data) =\n', '            token.call(\n', '                // 0xa9059cbb = bytes4(keccak256("transfer(address,uint256)"))\n', '                abi.encodeWithSelector(0xa9059cbb, to, amount)\n', '            );\n', '        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\n', '    }\n', '\n', '    function _safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        (bool success, bytes memory data) =\n', '            token.call(\n', '                // 0x23b872dd = bytes4(keccak256("transferFrom(address,address,uint256)"))\n', '                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\n', '            );\n', '        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 TransferFrom failed\n', '    }\n', '\n', '    function _safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function _safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '\n', '\n', '}\n', '\n', '\n', '// File contracts/Utils/BoringMath.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0, "BoringMath: Div zero");\n', '        c = a / b;\n', '    }\n', '\n', '    function to128(uint256 a) internal pure returns (uint128 c) {\n', '        require(a <= uint128(-1), "BoringMath: uint128 Overflow");\n', '        c = uint128(a);\n', '    }\n', '\n', '    function to64(uint256 a) internal pure returns (uint64 c) {\n', '        require(a <= uint64(-1), "BoringMath: uint64 Overflow");\n', '        c = uint64(a);\n', '    }\n', '\n', '    function to32(uint256 a) internal pure returns (uint32 c) {\n', '        require(a <= uint32(-1), "BoringMath: uint32 Overflow");\n', '        c = uint32(a);\n', '    }\n', '\n', '    function to16(uint256 a) internal pure returns (uint16 c) {\n', '        require(a <= uint16(-1), "BoringMath: uint16 Overflow");\n', '        c = uint16(a);\n', '    }\n', '\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\n', 'library BoringMath128 {\n', '    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\n', 'library BoringMath64 {\n', '    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\n', 'library BoringMath32 {\n', '    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\n', 'library BoringMath16 {\n', '    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '}\n', '\n', '\n', '// File contracts/UniswapV2/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// File contracts/UniswapV2/libraries/SafeMath.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '\n', '// File contracts/UniswapV2/UniswapV2Library.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes32 pairCodeHash) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '                pairCodeHash // init code hash\n', '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB, bytes32 pairCodeHash) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, pairCodeHash)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path, bytes32 pairCodeHash) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], pairCodeHash);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path, bytes32 pairCodeHash) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], pairCodeHash);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/UniswapV2/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function pairCodeHash() external pure returns (bytes32);\n', '\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setMigrator(address) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC20.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IWETH9.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function transfer(address, uint) external returns (bool);\n', '\n', '}\n', '\n', '\n', '// File contracts/interfaces/IMisoAuction.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IMisoAuction {\n', '\n', '\n', '    function initAuction(\n', '        address _funder,\n', '        address _token,\n', '        uint256 _tokenSupply,\n', '        uint256 _startDate,\n', '        uint256 _endDate,\n', '        address _paymentCurrency,\n', '        uint256 _startPrice,\n', '        uint256 _minimumPrice,\n', '        address _operator,\n', '        address _pointList,\n', '        address payable _wallet\n', '    ) external;\n', '    function auctionSuccessful() external view returns (bool);\n', '    function finalized() external view returns (bool);\n', '    function wallet() external view returns (address);\n', '    function paymentCurrency() external view returns (address);\n', '    function auctionToken() external view returns (address);\n', '\n', '    function finalize() external;\n', '    function tokenPrice() external view returns (uint256);\n', '    function getTotalTokens() external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/Liquidity/PostAuctionLauncher.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '//----------------------------------------------------------------------------------\n', '//    I n s t a n t\n', '//\n', '//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.\n', "//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\n", "//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\n", "//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\n", "//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'\n", '//\n', '//----------------------------------------------------------------------------------\n', '//\n', "// Chef Gonpachi's Post Auction Launcher\n", '//\n', '// A post auction contract that takes the proceeds and creates a liquidity pool\n', '//\n', '// \n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '//\n', '// The above copyright notice and this permission notice shall be included \n', '// in all copies or substantial portions of the Software.\n', '//\n', '// Made for Sushi.com \n', '// \n', '// Enjoy. (c) Chef Gonpachi\n', '// <https://github.com/chefgonpachi/MISO/>\n', '//\n', '// ---------------------------------------------------------------------\n', '// SPDX-License-Identifier: GPL-3.0                        \n', '// ---------------------------------------------------------------------\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PostAuctionLauncher is MISOAccessControls, SafeTransfer, ReentrancyGuard {\n', '    using BoringMath for uint256;\n', '    using BoringMath128 for uint128;\n', '    using BoringMath64 for uint64;\n', '    using BoringMath32 for uint32;\n', '    using BoringMath16 for uint16;\n', '\n', '\n', '    /// @notice Number of seconds per day.\n', '    uint256 private constant SECONDS_PER_DAY = 24 * 60 * 60;\n', '    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    uint256 private constant LIQUIDITY_PRECISION = 10000;\n', '    \n', '    /// @notice MISOLiquidity template id.\n', '    uint256 public constant liquidityTemplate = 3;\n', '\n', '    /// @notice First Token address.\n', '    IERC20 public token1;\n', '    /// @notice Second Token address.\n', '    IERC20 public token2;\n', '    /// @notice Uniswap V2 factory address.\n', '    IUniswapV2Factory public factory;\n', '    /// @notice WETH contract address.\n', '    address private immutable weth;\n', '\n', '\n', '    /// @notice LP pair address.\n', '    address public tokenPair;\n', '    /// @notice Withdraw wallet address.\n', '    address public wallet;\n', '    /// @notice Token market contract address.\n', '    IMisoAuction public market;\n', '\n', '    struct LauncherInfo {\n', '        uint32 locktime;\n', '        uint64 unlock;\n', '        uint16 liquidityPercent;\n', '        bool launched;\n', '        uint128 liquidityAdded;\n', '    }\n', '    LauncherInfo public launcherInfo;\n', '\n', '    /// @notice Emitted when LP contract is initialised.\n', '    event InitLiquidityLauncher(address indexed token1, address indexed token2, address factory, address sender);\n', '    /// @notice Emitted when LP is launched.\n', '    event LiquidityAdded(uint256 liquidity);\n', '    /// @notice Emitted when wallet is updated.\n', '    event WalletUpdated(address indexed wallet);\n', '\n', '\n', '    constructor (address _weth) public {\n', '        weth = _weth;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Initializes main contract variables (requires launchwindow to be more than 2 days.)\n', '     * @param _market Auction address for launcher.\n', '     * @param _factory Uniswap V2 factory address.\n', '     * @param _admin Contract owner address.\n', '     * @param _wallet Withdraw wallet address.\n', '     * @param _liquidityPercent Percentage of payment currency sent to liquidity pool.\n', '     * @param _locktime How long the liquidity will be locked. Number of seconds.\n', '     */\n', '    function initAuctionLauncher(\n', '            address _market,\n', '            address _factory,\n', '            address _admin,\n', '            address _wallet,\n', '            uint256 _liquidityPercent,\n', '            uint256 _locktime\n', '    )\n', '        public\n', '    {\n', "        require(_locktime < 10000000000, 'PostAuction: Enter an unix timestamp in seconds, not miliseconds');\n", "        require(_liquidityPercent <= LIQUIDITY_PRECISION, 'PostAuction: Liquidity percentage greater than 100.00% (>10000)');\n", "        require(_liquidityPercent > 0, 'PostAuction: Liquidity percentage equals zero');\n", '        require(_admin != address(0), "PostAuction: admin is the zero address");\n', '        require(_wallet != address(0), "PostAuction: wallet is the zero address");\n', '\n', '        initAccessControls(_admin);\n', '\n', '        market = IMisoAuction(_market);\n', '        token1 = IERC20(market.paymentCurrency());\n', '        token2 = IERC20(market.auctionToken());\n', '\n', '        if (address(token1) == ETH_ADDRESS) {\n', '            token1 = IERC20(weth);\n', '        }\n', '\n', '        factory = IUniswapV2Factory(_factory);\n', '        bytes32 pairCodeHash = IUniswapV2Factory(_factory).pairCodeHash();\n', '        tokenPair = UniswapV2Library.pairFor(_factory, address(token1), address(token2), pairCodeHash);\n', '   \n', '        wallet = _wallet;\n', '        launcherInfo.liquidityPercent = BoringMath.to16(_liquidityPercent);\n', '        launcherInfo.locktime = BoringMath.to32(_locktime);\n', '\n', '        uint256 initalTokenAmount = market.getTotalTokens().mul(_liquidityPercent).div(LIQUIDITY_PRECISION);\n', '        _safeTransferFrom(address(token2), msg.sender, initalTokenAmount);\n', '\n', '        emit InitLiquidityLauncher(address(token1), address(token2), address(_factory), _admin);\n', '    }\n', '\n', '    receive() external payable {\n', '        if(msg.sender != weth ){\n', '             depositETH();\n', '        }\n', '    }\n', '\n', '    /// @notice Deposits ETH to the contract.\n', '    function depositETH() public payable {\n', '        require(address(token1) == weth || address(token2) == weth, "PostAuction: Launcher not accepting ETH");\n', '        if (msg.value > 0 ) {\n', '            IWETH(weth).deposit{value : msg.value}();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Deposits first Token to the contract.\n', '     * @param _amount Number of tokens to deposit.\n', '     */\n', '    function depositToken1(uint256 _amount) external returns (bool success) {\n', '        return _deposit( address(token1), msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposits second Token to the contract.\n', '     * @param _amount Number of tokens to deposit.\n', '     */\n', '    function depositToken2(uint256 _amount) external returns (bool success) {\n', '        return _deposit( address(token2), msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposits Tokens to the contract.\n', '     * @param _amount Number of tokens to deposit.\n', '     * @param _from Where the tokens to deposit will come from.\n', '     * @param _token Token address.\n', '     */\n', '    function _deposit(address _token, address _from, uint _amount) internal returns (bool success) {\n', '        require(!launcherInfo.launched, "PostAuction: Must first launch liquidity");\n', '        require(launcherInfo.liquidityAdded == 0, "PostAuction: Liquidity already added");\n', '\n', '        require(_amount > 0, "PostAuction: Token amount must be greater than 0");\n', '        _safeTransferFrom(_token, _from, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Checks if market wallet is set to this launcher\n', '     */\n', '    function marketConnected() public view returns (bool)  {\n', '        return market.wallet() == address(this);\n', '    }\n', '\n', '    /**\n', '     * @notice Finalizes Token sale and launches LP.\n', '     * @return liquidity Number of LPs.\n', '     */\n', '    function finalize() external nonReentrant returns (uint256 liquidity) {\n', '        // GP: Can we remove admin, let anyone can finalise and launch?\n', '        // require(hasAdminRole(msg.sender) || hasOperatorRole(msg.sender), "PostAuction: Sender must be operator");\n', '        require(marketConnected(), "PostAuction: Auction must have this launcher address set as the destination wallet");\n', '        require(!launcherInfo.launched);\n', '\n', '        if (!market.finalized()) {\n', '            market.finalize();\n', '        }\n', '        require(market.finalized());\n', '\n', '        launcherInfo.launched = true;\n', '        if (!market.auctionSuccessful() ) {\n', '            return 0;\n', '        }\n', '\n', '        /// @dev if the auction is settled in weth, wrap any contract balance \n', '        uint256 launcherBalance = address(this).balance;\n', '        if (launcherBalance > 0 ) {\n', '            IWETH(weth).deposit{value : launcherBalance}();\n', '        }\n', '        \n', '        (uint256 token1Amount, uint256 token2Amount) =  getTokenAmounts();\n', '\n', '        /// @dev cannot start a liquidity pool with no tokens on either side\n', '        if (token1Amount == 0 || token2Amount == 0 ) {\n', '            return 0;\n', '        }\n', '\n', '        address pair = factory.getPair(address(token1), address(token2));\n', '        if(pair == address(0)) {\n', '            createPool();\n', '        }\n', '\n', '        /// @dev add liquidity to pool via the pair directly\n', '        _safeTransfer(address(token1), tokenPair, token1Amount);\n', '        _safeTransfer(address(token2), tokenPair, token2Amount);\n', '        liquidity = IUniswapV2Pair(tokenPair).mint(address(this));\n', '        launcherInfo.liquidityAdded = BoringMath.to128(uint256(launcherInfo.liquidityAdded).add(liquidity));\n', '\n', '        /// @dev if unlock time not yet set, add it.\n', '        if (launcherInfo.unlock == 0 ) {\n', '            launcherInfo.unlock = BoringMath.to64(block.timestamp + uint256(launcherInfo.locktime));\n', '        }\n', '        emit LiquidityAdded(liquidity);\n', '    }\n', '\n', '    function getTokenAmounts() public view returns (uint256 token1Amount, uint256 token2Amount) {\n', '        token1Amount = getToken1Balance().mul(uint256(launcherInfo.liquidityPercent)).div(LIQUIDITY_PRECISION);\n', '        token2Amount = getToken2Balance();\n', '\n', '        uint256 tokenPrice = market.tokenPrice();\n', '        uint256 maxToken1Amount = token2Amount.mul(tokenPrice).div(1e18);\n', '        uint256 maxToken2Amount = token1Amount.mul(1e18).div(tokenPrice);\n', '        \n', '        /// @dev if more than the max.\n', '        if (token2Amount > maxToken2Amount) {\n', '            token2Amount =  maxToken2Amount;\n', '        } \n', '        /// @dev if more than the max.\n', '        if (token1Amount > maxToken1Amount) {\n', '            token1Amount =  maxToken1Amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraws LPs from the contract.\n', '     * @return liquidity Number of LPs.\n', '     */\n', '    function withdrawLPTokens() external returns (uint256 liquidity) {\n', '        require(hasAdminRole(msg.sender) || hasOperatorRole(msg.sender), "PostAuction: Sender must be operator");\n', '        require(launcherInfo.launched, "PostAuction: Must first launch liquidity");\n', '        require(block.timestamp >= uint256(launcherInfo.unlock), "PostAuction: Liquidity is locked");\n', '        liquidity = IERC20(tokenPair).balanceOf(address(this));\n', '        require(liquidity > 0, "PostAuction: Liquidity must be greater than 0");\n', '        _safeTransfer(tokenPair, wallet, liquidity);\n', '    }\n', '\n', '    /// @notice Withraws deposited tokens and ETH from the contract to wallet.\n', '    function withdrawDeposits() external {\n', '        require(hasAdminRole(msg.sender) || hasOperatorRole(msg.sender), "PostAuction: Sender must be operator");\n', '        require(launcherInfo.launched, "PostAuction: Must first launch liquidity");\n', '\n', '        uint256 token1Amount = getToken1Balance();\n', '        if (token1Amount > 0 ) {\n', '            _safeTransfer(address(token1), wallet, token1Amount);\n', '        }\n', '        uint256 token2Amount = getToken2Balance();\n', '        if (token2Amount > 0 ) {\n', '            _safeTransfer(address(token2), wallet, token2Amount);\n', '        }\n', '    }\n', '\n', '    // TODO     \n', '    // GP: Sweep non relevant ERC20s / ETH\n', '\n', '\n', '\n', '    //--------------------------------------------------------\n', '    // Setter functions\n', '    //--------------------------------------------------------\n', '\n', '\n', '    /**\n', '     * @notice Admin can set the wallet through this function.\n', '     * @param _wallet Wallet is where funds will be sent.\n', '     */\n', '    function setWallet(address payable _wallet) external {\n', '        require(hasAdminRole(msg.sender));\n', '        require(_wallet != address(0), "Wallet is the zero address");\n', '\n', '        wallet = _wallet;\n', '\n', '        emit WalletUpdated(_wallet);\n', '    }\n', '\n', '    //--------------------------------------------------------\n', '    // Helper functions\n', '    //--------------------------------------------------------\n', '\n', '    /**\n', '     * @notice Creates new SLP pair through SushiSwap.\n', '     */\n', '    function createPool() public {\n', '        factory.createPair(address(token1), address(token2));\n', '    }\n', '\n', '    //--------------------------------------------------------\n', '    // Getter functions\n', '    //--------------------------------------------------------\n', '\n', '    /**\n', '     * @notice Gets the number of first token deposited into this contract.\n', '     * @return uint256 Number of WETH.\n', '     */\n', '    function getToken1Balance() public view returns (uint256) {\n', '         return token1.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the number of second token deposited into this contract.\n', '     * @return uint256 Number of WETH.\n', '     */\n', '    function getToken2Balance() public view returns (uint256) {\n', '         return token2.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @notice Returns LP token address..\n', '     * @return address LP address.\n', '     */\n', '    function getLPTokenAddress() public view returns (address) {\n', '        return tokenPair;\n', '    }\n', '    /**\n', '     * @notice Returns LP Token balance.\n', '     * @return uint256 LP Token balance.\n', '     */\n', '    function getLPBalance() public view returns (uint256) {\n', '         return IERC20(tokenPair).balanceOf(address(this));\n', '    }\n', '\n', '\n', '    //--------------------------------------------------------\n', '    // Init functions\n', '    //--------------------------------------------------------\n', '\n', '\n', '    /**\n', '     * @notice Decodes and hands auction data to the initAuction function.\n', '     * @param _data Encoded data for initialization.\n', '     */\n', '\n', '    function init(bytes calldata _data) external payable {\n', '\n', '    }\n', '\n', '    function initLauncher(\n', '        bytes calldata _data\n', '    ) public {\n', '        (\n', '            address _market,\n', '            address _factory,\n', '            address _admin,\n', '            address _wallet,\n', '            uint256 _liquidityPercent,\n', '            uint256 _locktime\n', '        ) = abi.decode(_data, (\n', '            address,\n', '            address,\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256\n', '        ));\n', '        initAuctionLauncher( _market, _factory,_admin,_wallet,_liquidityPercent,_locktime);\n', '    }\n', '\n', '    /**\n', '     * @notice Collects data to initialize the auction and encodes them.\n', '     * @param _market Auction address for launcher.\n', '     * @param _factory Uniswap V2 factory address.\n', '     * @param _admin Contract owner address.\n', '     * @param _wallet Withdraw wallet address.\n', '     * @param _liquidityPercent Percentage of payment currency sent to liquidity pool.\n', '     * @param _locktime How long the liquidity will be locked. Number of seconds.\n', '     * @return _data All the data in bytes format.\n', '     */\n', '    function getLauncherInitData(\n', '            address _market,\n', '            address _factory,\n', '            address _admin,\n', '            address _wallet,\n', '            uint256 _liquidityPercent,\n', '            uint256 _locktime\n', '    )\n', '        external \n', '        pure\n', '        returns (bytes memory _data)\n', '    {\n', '            return abi.encode(_market,\n', '                                _factory,\n', '                                _admin,\n', '                                _wallet,\n', '                                _liquidityPercent,\n', '                                _locktime\n', '            );\n', '    }\n', '\n', '}']