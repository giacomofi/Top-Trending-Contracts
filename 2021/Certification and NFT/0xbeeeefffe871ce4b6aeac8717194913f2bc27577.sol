['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Beeeef Registry\n', '//\n', '// https://github.com/bokkypoobah/BeeeefRegistry\n', '//\n', '// Deployed to 0xbEEeEfffE871CE4b6aEAc8717194913f2bc27577\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd 2021. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', 'contract Curated {\n', '    address public curator;\n', '\n', '    event CuratorTransferred(address indexed from, address indexed to);\n', '\n', '    modifier onlyCurator {\n', '        require(msg.sender == curator);\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', '        curator = msg.sender;\n', '    }\n', '    function transferCurator(address _curator) public onlyCurator {\n', '        emit CuratorTransferred(curator, _curator);\n', '        curator = _curator;\n', '    }\n', '}\n', '\n', '\n', 'enum Permission { None, View, ComposeWith, Permission3, Permission4, Permission5, Permission6, Permission7 }\n', 'enum Curation { None, LoadByDefault, DisableView, DisableComposeWith, Curation4, Curation5, Curation6, Curation7 }\n', '\n', '\n', 'library Entries {\n', '    struct Entry {\n', '        uint index;\n', '        uint64 timestamp;\n', '        address account;\n', '        address token;\n', '        Permission permission;\n', '        Curation curation;\n', '    }\n', '    struct Data {\n', '        bool initialised;\n', '        mapping(bytes32 => Entry) entries;\n', '        bytes32[] index;\n', '    }\n', '\n', '    event EntryAdded(bytes32 key, address account, address token, Permission permission);\n', '    event EntryRemoved(bytes32 key, address account, address token);\n', '    event EntryUpdated(bytes32 key, address account, address token, Permission permission);\n', '    event EntryCurated(bytes32 key, address account, address token, Curation curation);\n', '\n', '    function init(Data storage self) internal {\n', '        require(!self.initialised);\n', '        self.initialised = true;\n', '    }\n', '    function generateKey(address account, address token) internal view returns (bytes32 hash) {\n', '        return keccak256(abi.encodePacked(address(this), account, token));\n', '    }\n', '    function hasKey(Data storage self, bytes32 key) internal view returns (bool) {\n', '        return self.entries[key].timestamp > 0;\n', '    }\n', '    function add(Data storage self, address account, address token, Permission permission) internal {\n', '        bytes32 key = generateKey(account, token);\n', '        require(self.entries[key].timestamp == 0);\n', '        self.index.push(key);\n', '        self.entries[key] = Entry(self.index.length - 1, uint64(block.timestamp), account, token, permission, Curation(0));\n', '        emit EntryAdded(key, account, token, permission);\n', '    }\n', '    function remove(Data storage self, address account, address token) internal {\n', '        bytes32 key = generateKey(account, token);\n', '        require(self.entries[key].timestamp > 0);\n', '        uint removeIndex = self.entries[key].index;\n', '        emit EntryRemoved(key, account, token);\n', '        uint lastIndex = self.index.length - 1;\n', '        bytes32 lastIndexKey = self.index[lastIndex];\n', '        self.index[removeIndex] = lastIndexKey;\n', '        self.entries[lastIndexKey].index = removeIndex;\n', '        delete self.entries[key];\n', '        if (self.index.length > 0) {\n', '            self.index.pop();\n', '        }\n', '    }\n', '    function update(Data storage self, address account, address token, Permission permission) internal {\n', '        bytes32 key = generateKey(account, token);\n', '        Entry storage entry = self.entries[key];\n', '        require(entry.timestamp > 0);\n', '        entry.timestamp = uint64(block.timestamp);\n', '        entry.permission = permission;\n', '        emit EntryUpdated(key, account, token, permission);\n', '    }\n', '    function curate(Data storage self, address account, address token, Curation curation) internal {\n', '        bytes32 key = generateKey(account, token);\n', '        Entry storage entry = self.entries[key];\n', '        require(entry.timestamp > 0);\n', '        entry.curation = curation;\n', '        emit EntryCurated(key, account, token, curation);\n', '    }\n', '    function length(Data storage self) internal view returns (uint) {\n', '        return self.index.length;\n', '    }\n', '}\n', '\n', '\n', 'contract BeeeefRegistry is Curated {\n', '    using Entries for Entries.Data;\n', '    using Entries for Entries.Entry;\n', '\n', '    Entries.Data private entries;\n', '\n', '    event EntryAdded(bytes32 key, address account, address token, uint permission);\n', '    event EntryRemoved(bytes32 key, address account, address token);\n', '    event EntryUpdated(bytes32 key, address account, address token, uint permission);\n', '    event EntryCurated(bytes32 key, address account, address token, Curation curation);\n', '\n', '    constructor() {\n', '        entries.init();\n', '    }\n', '\n', '    function addEntry(address token, Permission permission) public {\n', '        entries.add(msg.sender, token, permission);\n', '    }\n', '    function removeEntry(address token) public {\n', '        entries.remove(msg.sender, token);\n', '    }\n', '    function updateEntry(address token, Permission permission) public {\n', '        entries.update(msg.sender, token, permission);\n', '    }\n', '    function curateEntry(address account, address token, Curation curation) public onlyCurator {\n', '        entries.curate(account, token, curation);\n', '    }\n', '\n', '    function entriesLength() public view returns (uint) {\n', '        return entries.length();\n', '    }\n', '    function getEntryByIndex(uint i) public view returns (address _account, address _token, Permission _permission) {\n', '        require(i < entries.length(), "getEntryByIndex: Invalid index");\n', '        Entries.Entry memory entry = entries.entries[entries.index[i]];\n', '        return (entry.account, entry.token, entry.permission);\n', '    }\n', '    function getEntries() public view returns (address[] memory accounts, address[] memory tokens, Permission[] memory permissions, Curation[] memory curations) {\n', '        uint length = entries.length();\n', '        accounts = new address[](length);\n', '        tokens = new address[](length);\n', '        permissions = new Permission[](length);\n', '        curations = new Curation[](length);\n', '        for (uint i = 0; i < length; i++) {\n', '            Entries.Entry memory entry = entries.entries[entries.index[i]];\n', '            accounts[i] = entry.account;\n', '            tokens[i] = entry.token;\n', '            permissions[i] = entry.permission;\n', '            curations[i] = entry.curation;\n', '        }\n', '    }\n', '}']