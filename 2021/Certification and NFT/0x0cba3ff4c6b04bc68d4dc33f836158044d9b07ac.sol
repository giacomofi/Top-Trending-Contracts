['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @powerpool/poweroracle/contracts/interfaces/IPowerPoke.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IPowerPoke {\n', "  /*** CLIENT'S CONTRACT INTERFACE ***/\n", '  function authorizeReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporterWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinDeposit_\n', '  ) external view;\n', '\n', '  function authorizePoker(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizePokerWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinStake_\n', '  ) external view;\n', '\n', '  function slashReporter(uint256 slasherId_, uint256 times_) external;\n', '\n', '  function reward(\n', '    uint256 userId_,\n', '    uint256 gasUsed_,\n', '    uint256 compensationPlan_,\n', '    bytes calldata pokeOptions_\n', '  ) external;\n', '\n', '  /*** CLIENT OWNER INTERFACE ***/\n', '  function transferClientOwnership(address client_, address to_) external;\n', '\n', '  function addCredit(address client_, uint256 amount_) external;\n', '\n', '  function withdrawCredit(\n', '    address client_,\n', '    address to_,\n', '    uint256 amount_\n', '  ) external;\n', '\n', '  function setReportIntervals(\n', '    address client_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setSlasherHeartbeat(address client_, uint256 slasherHeartbeat_) external;\n', '\n', '  function setGasPriceLimit(address client_, uint256 gasPriceLimit_) external;\n', '\n', '  function setFixedCompensations(\n', '    address client_,\n', '    uint256 eth_,\n', '    uint256 cvp_\n', '  ) external;\n', '\n', '  function setBonusPlan(\n', '    address client_,\n', '    uint256 planId_,\n', '    bool active_,\n', '    uint64 bonusNominator_,\n', '    uint64 bonusDenominator_,\n', '    uint64 perGas_\n', '  ) external;\n', '\n', '  function setMinimalDeposit(address client_, uint256 defaultMinDeposit_) external;\n', '\n', '  /*** POKER INTERFACE ***/\n', '  function withdrawRewards(uint256 userId_, address to_) external;\n', '\n', '  function setPokerKeyRewardWithdrawAllowance(uint256 userId_, bool allow_) external;\n', '\n', '  /*** OWNER INTERFACE ***/\n', '  function addClient(\n', '    address client_,\n', '    address owner_,\n', '    bool canSlash_,\n', '    uint256 gasPriceLimit_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setClientActiveFlag(address client_, bool active_) external;\n', '\n', '  function setCanSlashFlag(address client_, bool canSlash) external;\n', '\n', '  function setOracle(address oracle_) external;\n', '\n', '  function pause() external;\n', '\n', '  function unpause() external;\n', '\n', '  /*** GETTERS ***/\n', '  function creditOf(address client_) external view returns (uint256);\n', '\n', '  function ownerOf(address client_) external view returns (address);\n', '\n', '  function getMinMaxReportIntervals(address client_) external view returns (uint256 min, uint256 max);\n', '\n', '  function getSlasherHeartbeat(address client_) external view returns (uint256);\n', '\n', '  function getGasPriceLimit(address client_) external view returns (uint256);\n', '\n', '  function getPokerBonus(\n', '    address client_,\n', '    uint256 bonusPlanId_,\n', '    uint256 gasUsed_,\n', '    uint256 userDeposit_\n', '  ) external view returns (uint256);\n', '\n', '  function getGasPriceFor(address client_) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/BMathInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BMathInterface {\n', '  function calcInGivenOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '\n', '  function calcSingleInGivenPoolOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '}\n', '\n', '// File: contracts/interfaces/BPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BPoolInterface is IERC20, BMathInterface {\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function getDenormalizedWeight(address) external view returns (uint256);\n', '\n', '  function getBalance(address) external view returns (uint256);\n', '\n', '  function getSwapFee() external view returns (uint256);\n', '\n', '  function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '  function getCommunityFee()\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      address\n', '    );\n', '\n', '  function calcAmountWithCommunityFee(\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external view returns (uint256, uint256);\n', '\n', '  function getRestrictions() external view returns (address);\n', '\n', '  function isPublicSwap() external view returns (bool);\n', '\n', '  function isFinalized() external view returns (bool);\n', '\n', '  function isBound(address t) external view returns (bool);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function setSwapFee(uint256) external;\n', '\n', '  function setCommunityFeeAndReceiver(\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external;\n', '\n', '  function setController(address) external;\n', '\n', '  function setPublicSwap(bool) external;\n', '\n', '  function finalize() external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function rebind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function unbind(address) external;\n', '\n', '  function gulp(address) external;\n', '\n', '  function callVoting(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  function getMinWeight() external view returns (uint256);\n', '\n', '  function getMaxBoundTokens() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface PowerIndexPoolInterface is BPoolInterface {\n', '  function initialize(\n', '    string calldata name,\n', '    string calldata symbol,\n', '    uint256 minWeightPerSecond,\n', '    uint256 maxWeightPerSecond\n', '  ) external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function setDynamicWeight(\n', '    address token,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) external;\n', '\n', '  function getDynamicWeightSettings(address token)\n', '    external\n', '    view\n', '    returns (\n', '      uint256 fromTimestamp,\n', '      uint256 targetTimestamp,\n', '      uint256 fromDenorm,\n', '      uint256 targetDenorm\n', '    );\n', '\n', '  function getMinWeight() external view override returns (uint256);\n', '\n', '  function getWeightPerSecondBounds() external view returns (uint256, uint256);\n', '\n', '  function setWeightPerSecondBounds(uint256, uint256) external;\n', '\n', '  function setWrapper(address, bool) external;\n', '\n', '  function getWrapperMode() external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/TokenInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface TokenInterface is IERC20 {\n', '  function deposit() external payable;\n', '\n', '  function withdraw(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor {\n', '  function calc_withdraw_one_coin(uint256 _tokenAmount, int128 _index) external view returns (uint256);\n', '\n', '  function remove_liquidity_one_coin(\n', '    uint256 _token_amount,\n', '    int128 _i,\n', '    uint256 _min_amount\n', '  ) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor2 {\n', '  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[2] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor3.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor3 {\n', '  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[3] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor4.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor4 {\n', '  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[4] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor {\n', '  function calc_withdraw_one_coin(\n', '    address _pool,\n', '    uint256 _tokenAmount,\n', '    int128 _index\n', '  ) external view returns (uint256);\n', '\n', '  function remove_liquidity_one_coin(\n', '    address _pool,\n', '    uint256 _token_amount,\n', '    int128 _i,\n', '    uint256 _min_amount\n', '  ) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor2 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[2] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[2] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor3.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor3 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[3] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[3] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor4.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor4 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[4] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[4] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IVault.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IVault {\n', '  function token() external view returns (address);\n', '\n', '  function totalAssets() external view returns (uint256);\n', '\n', '  function balanceOf(address _acc) external view returns (uint256);\n', '\n', '  function pricePerShare() external view returns (uint256);\n', '\n', '  function deposit(uint256 _amount) external;\n', '\n', '  function withdraw(uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurvePoolRegistry.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurvePoolRegistry {\n', '  function get_virtual_price_from_lp_token(address _token) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IErc20PiptSwap.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IErc20PiptSwap {\n', '  function swapEthToPipt(\n', '    uint256 _slippage,\n', '    uint256 _minPoolAmount,\n', '    uint256 _maxDiffPercent\n', '  ) external payable returns (uint256 poolAmountOutAfterFee, uint256 oddEth);\n', '\n', '  function swapErc20ToPipt(\n', '    address _swapToken,\n', '    uint256 _swapAmount,\n', '    uint256 _slippage,\n', '    uint256 _minPoolAmount,\n', '    uint256 _diffPercent\n', '  ) external payable returns (uint256 poolAmountOut);\n', '\n', '  function defaultSlippage() external view returns (uint256);\n', '\n', '  function defaultDiffPercent() external view returns (uint256);\n', '\n', '  function swapPiptToEth(uint256 _poolAmountIn) external payable returns (uint256 ethOutAmount);\n', '\n', '  function swapPiptToErc20(address _swapToken, uint256 _poolAmountIn) external payable returns (uint256 erc20Out);\n', '}\n', '\n', '// File: contracts/interfaces/IErc20VaultPoolSwap.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IErc20VaultPoolSwap {\n', '  function swapErc20ToVaultPool(\n', '    address _pool,\n', '    address _swapToken,\n', '    uint256 _swapAmount\n', '  ) external returns (uint256 poolAmountOut);\n', '\n', '  function swapVaultPoolToErc20(\n', '    address _pool,\n', '    uint256 _poolAmountIn,\n', '    address _swapToken\n', '  ) external returns (uint256 erc20Out);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/traits/ProgressiveFee.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract ProgressiveFee is OwnableUpgradeSafe {\n', '  using SafeMath for uint256;\n', '\n', '  uint256[] public feeLevels;\n', '  uint256[] public feeAmounts;\n', '  address public feePayout;\n', '  address public feeManager;\n', '\n', '  event SetFees(\n', '    address indexed sender,\n', '    uint256[] newFeeLevels,\n', '    uint256[] newFeeAmounts,\n', '    address indexed feePayout,\n', '    address indexed feeManager\n', '  );\n', '\n', '  modifier onlyFeeManagerOrOwner() {\n', '    require(msg.sender == feeManager || msg.sender == owner(), "NOT_FEE_MANAGER");\n', '    _;\n', '  }\n', '\n', '  function setFees(\n', '    uint256[] calldata _feeLevels,\n', '    uint256[] calldata _feeAmounts,\n', '    address _feePayout,\n', '    address _feeManager\n', '  ) external onlyFeeManagerOrOwner {\n', '    feeLevels = _feeLevels;\n', '    feeAmounts = _feeAmounts;\n', '    feePayout = _feePayout;\n', '    feeManager = _feeManager;\n', '\n', '    emit SetFees(msg.sender, _feeLevels, _feeAmounts, _feePayout, _feeManager);\n', '  }\n', '\n', '  function calcFee(uint256 amount, uint256 wrapperFee) public view returns (uint256 feeAmount, uint256 amountAfterFee) {\n', '    uint256 len = feeLevels.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      if (amount >= feeLevels[i]) {\n', '        feeAmount = amount.mul(feeAmounts[i]).div(1 ether);\n', '        break;\n', '      }\n', '    }\n', '    feeAmount = feeAmount.add(wrapperFee);\n', '    amountAfterFee = amount.sub(feeAmount);\n', '  }\n', '\n', '  function getFeeLevels() external view returns (uint256[] memory) {\n', '    return feeLevels;\n', '  }\n', '\n', '  function getFeeAmounts() external view returns (uint256[] memory) {\n', '    return feeAmounts;\n', '  }\n', '}\n', '\n', '// File: contracts/Erc20VaultPoolSwap.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Erc20VaultPoolSwap is ProgressiveFee, IErc20VaultPoolSwap {\n', '  using SafeERC20 for IERC20;\n', '\n', '  event TakeFee(address indexed pool, address indexed token, uint256 amount);\n', '\n', '  event SetVaultConfig(\n', '    address indexed token,\n', '    address depositor,\n', '    uint8 depositorAmountLength,\n', '    uint8 depositorIndex,\n', '    address lpToken,\n', '    address indexed vaultRegistry\n', '  );\n', '\n', '  event Erc20ToVaultPoolSwap(address indexed user, address indexed pool, uint256 usdcInAmount, uint256 poolOutAmount);\n', '  event VaultPoolToErc20Swap(address indexed user, address indexed pool, uint256 poolInAmount, uint256 usdcOutAmount);\n', '  event ClaimFee(address indexed token, address indexed payout, uint256 amount);\n', '\n', '  IERC20 public immutable usdc;\n', '\n', '  mapping(address => address[]) public poolTokens;\n', '\n', '  struct VaultConfig {\n', '    uint8 depositorLength;\n', '    uint8 depositorIndex;\n', '    uint8 depositorType;\n', '    address depositor;\n', '    address lpToken;\n', '    address vaultRegistry;\n', '  }\n', '  mapping(address => VaultConfig) public vaultConfig;\n', '\n', '  struct VaultCalc {\n', '    address token;\n', '    uint256 tokenBalance;\n', '    uint256 input;\n', '    uint256 correctInput;\n', '    uint256 poolAmountOut;\n', '  }\n', '\n', '  constructor(address _usdc) public {\n', '    __Ownable_init();\n', '    usdc = IERC20(_usdc);\n', '  }\n', '\n', '  function setVaultConfigs(\n', '    address[] memory _tokens,\n', '    address[] memory _depositors,\n', '    uint8[] memory _depositorTypes,\n', '    uint8[] memory _depositorAmountLength,\n', '    uint8[] memory _depositorIndexes,\n', '    address[] memory _lpTokens,\n', '    address[] memory _vaultRegistries\n', '  ) external onlyOwner {\n', '    uint256 len = _tokens.length;\n', '    require(\n', '      len == _depositors.length &&\n', '        len == _depositorAmountLength.length &&\n', '        len == _depositorIndexes.length &&\n', '        len == _depositorTypes.length &&\n', '        len == _lpTokens.length &&\n', '        len == _vaultRegistries.length,\n', '      "L"\n', '    );\n', '    for (uint256 i = 0; i < len; i++) {\n', '      vaultConfig[_tokens[i]] = VaultConfig(\n', '        _depositorAmountLength[i],\n', '        _depositorIndexes[i],\n', '        _depositorTypes[i],\n', '        _depositors[i],\n', '        _lpTokens[i],\n', '        _vaultRegistries[i]\n', '      );\n', '\n', '      usdc.approve(_depositors[i], uint256(-1));\n', '      IERC20(_lpTokens[i]).approve(_tokens[i], uint256(-1));\n', '      IERC20(_lpTokens[i]).approve(_depositors[i], uint256(-1));\n', '      emit SetVaultConfig(\n', '        _tokens[i],\n', '        _depositors[i],\n', '        _depositorAmountLength[i],\n', '        _depositorIndexes[i],\n', '        _lpTokens[i],\n', '        _vaultRegistries[i]\n', '      );\n', '    }\n', '  }\n', '\n', '  function updatePools(address[] memory _pools) external onlyOwner {\n', '    uint256 len = _pools.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _updatePool(_pools[i]);\n', '    }\n', '  }\n', '\n', '  function claimFee(address[] memory _tokens) external onlyOwner {\n', '    require(feePayout != address(0), "FP_NOT_SET");\n', '\n', '    uint256 len = _tokens.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 amount = IERC20(_tokens[i]).balanceOf(address(this));\n', '      IERC20(_tokens[i]).safeTransfer(feePayout, amount);\n', '      emit ClaimFee(_tokens[i], feePayout, amount);\n', '    }\n', '  }\n', '\n', '  function swapErc20ToVaultPool(\n', '    address _pool,\n', '    address _swapToken,\n', '    uint256 _swapAmount\n', '  ) external override returns (uint256 poolAmountOut) {\n', '    require(_swapToken == address(usdc), "ONLY_USDC");\n', '    usdc.safeTransferFrom(msg.sender, address(this), _swapAmount);\n', '\n', '    (, uint256 _swapAmountWithFee) = calcFee(_swapAmount, 0);\n', '\n', '    uint256[] memory tokensInPipt;\n', '    (poolAmountOut, tokensInPipt) = _depositVaultAndGetTokensInPipt(_pool, _swapAmountWithFee);\n', '\n', '    PowerIndexPoolInterface(_pool).joinPool(poolAmountOut, tokensInPipt);\n', '    (, uint256 communityFee, , ) = PowerIndexPoolInterface(_pool).getCommunityFee();\n', '    poolAmountOut = poolAmountOut.sub(poolAmountOut.mul(communityFee).div(1 ether)) - 1;\n', '\n', '    IERC20(_pool).safeTransfer(msg.sender, poolAmountOut);\n', '\n', '    emit Erc20ToVaultPoolSwap(msg.sender, _pool, _swapAmount, poolAmountOut);\n', '  }\n', '\n', '  function swapVaultPoolToErc20(\n', '    address _pool,\n', '    uint256 _poolAmountIn,\n', '    address _swapToken\n', '  ) external override returns (uint256 erc20Out) {\n', '    require(_swapToken == address(usdc), "ONLY_USDC");\n', '    IERC20(_pool).safeTransferFrom(msg.sender, address(this), _poolAmountIn);\n', '\n', '    (, uint256 _poolAmountInWithFee) = calcFee(_poolAmountIn, 0);\n', '\n', '    erc20Out = _redeemVault(_pool, _poolAmountInWithFee);\n', '\n', '    usdc.safeTransfer(msg.sender, erc20Out);\n', '\n', '    emit VaultPoolToErc20Swap(msg.sender, _pool, _poolAmountIn, erc20Out);\n', '  }\n', '\n', '  /* ==========  View Functions  ========== */\n', '\n', '  function calcVaultOutByUsdc(address _token, uint256 _usdcIn) public view returns (uint256 amountOut) {\n', '    VaultConfig storage vc = vaultConfig[_token];\n', '    uint256 vaultByLpPrice = IVault(_token).pricePerShare();\n', '    return calcDepositorTokenAmount(vc, _usdcIn, true).mul(1 ether).div(vaultByLpPrice);\n', '  }\n', '\n', '  function calcDepositorTokenAmount(\n', '    VaultConfig storage vc,\n', '    uint256 _amount,\n', '    bool _isDeposit\n', '  ) internal view returns (uint256) {\n', '    if (vc.depositorLength == 2) {\n', '      uint256[2] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        return ICurveZapDepositor2(vc.depositor).calc_token_amount(vc.lpToken, amounts, _isDeposit);\n', '      } else {\n', '        return ICurveDepositor2(vc.depositor).calc_token_amount(amounts, _isDeposit);\n', '      }\n', '    }\n', '\n', '    if (vc.depositorLength == 3) {\n', '      uint256[3] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        return ICurveZapDepositor3(vc.depositor).calc_token_amount(vc.lpToken, amounts, _isDeposit);\n', '      } else {\n', '        return ICurveDepositor3(vc.depositor).calc_token_amount(amounts, _isDeposit);\n', '      }\n', '    }\n', '\n', '    if (vc.depositorLength == 4) {\n', '      uint256[4] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        return ICurveZapDepositor4(vc.depositor).calc_token_amount(vc.lpToken, amounts, _isDeposit);\n', '      } else {\n', '        return ICurveDepositor4(vc.depositor).calc_token_amount(amounts, _isDeposit);\n', '      }\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function calcVaultPoolOutByUsdc(\n', '    address _pool,\n', '    uint256 _usdcIn,\n', '    bool _withFee\n', '  ) external view returns (uint256 amountOut) {\n', '    uint256 len = poolTokens[_pool].length;\n', '    PowerIndexPoolInterface p = PowerIndexPoolInterface(_pool);\n', '    uint256 piptTotalSupply = p.totalSupply();\n', '\n', '    (VaultCalc[] memory vc, uint256 restInput, uint256 totalCorrectInput) =\n', '      getVaultCalcsForSupply(_pool, piptTotalSupply, _usdcIn);\n', '\n', '    uint256[] memory tokensInPipt = new uint256[](len);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 share = vc[i].correctInput.mul(1 ether).div(totalCorrectInput);\n', '      vc[i].correctInput = vc[i].correctInput.add(restInput.mul(share).div(1 ether)).sub(100);\n', '\n', '      tokensInPipt[i] = calcVaultOutByUsdc(vc[i].token, vc[i].correctInput);\n', '\n', '      uint256 poolOutByToken = tokensInPipt[i].sub(1e12).mul(piptTotalSupply).div(vc[i].tokenBalance);\n', '      if (poolOutByToken < amountOut || amountOut == 0) {\n', '        amountOut = poolOutByToken;\n', '      }\n', '    }\n', '    if (_withFee) {\n', '      (, uint256 communityJoinFee, , ) = p.getCommunityFee();\n', '      (amountOut, ) = p.calcAmountWithCommunityFee(amountOut, communityJoinFee, address(this));\n', '    }\n', '  }\n', '\n', '  function calcUsdcOutByVault(address _token, uint256 _vaultIn) public view returns (uint256 amountOut) {\n', '    VaultConfig storage vc = vaultConfig[_token];\n', '    uint256 lpByUsdcPrice = ICurvePoolRegistry(vc.vaultRegistry).get_virtual_price_from_lp_token(vc.lpToken);\n', '    uint256 vaultByLpPrice = IVault(_token).pricePerShare();\n', '    return _vaultIn.mul(vaultByLpPrice.mul(lpByUsdcPrice).div(1 ether)).div(1e30);\n', '  }\n', '\n', '  function calcUsdcOutByPool(\n', '    address _pool,\n', '    uint256 _ppolIn,\n', '    bool _withFee\n', '  ) external view returns (uint256 amountOut) {\n', '    uint256 len = poolTokens[_pool].length;\n', '    PowerIndexPoolInterface p = PowerIndexPoolInterface(_pool);\n', '\n', '    if (_withFee) {\n', '      (, , uint256 communityExitFee, ) = p.getCommunityFee();\n', '      (_ppolIn, ) = p.calcAmountWithCommunityFee(_ppolIn, communityExitFee, address(this));\n', '    }\n', '\n', '    uint256 ratio = _ppolIn.mul(1 ether).div(p.totalSupply());\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      address t = poolTokens[_pool][i];\n', '      uint256 bal = p.getBalance(t);\n', '      amountOut = amountOut.add(calcUsdcOutByVault(t, ratio.mul(bal).div(1 ether)));\n', '    }\n', '  }\n', '\n', '  function getVaultCalcsForSupply(\n', '    address _pool,\n', '    uint256 piptTotalSupply,\n', '    uint256 totalInputAmount\n', '  )\n', '    public\n', '    view\n', '    returns (\n', '      VaultCalc[] memory vc,\n', '      uint256 restInput,\n', '      uint256 totalCorrectInput\n', '    )\n', '  {\n', '    uint256 len = poolTokens[_pool].length;\n', '    vc = new VaultCalc[](len);\n', '\n', '    uint256 minPoolAmount;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      vc[i].token = poolTokens[_pool][i];\n', '      vc[i].tokenBalance = PowerIndexPoolInterface(_pool).getBalance(vc[i].token);\n', '      vc[i].input = totalInputAmount / len;\n', '      vc[i].poolAmountOut = calcVaultOutByUsdc(vc[i].token, vc[i].input).mul(piptTotalSupply).div(vc[i].tokenBalance);\n', '      if (minPoolAmount == 0 || vc[i].poolAmountOut < minPoolAmount) {\n', '        minPoolAmount = vc[i].poolAmountOut;\n', '      }\n', '    }\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      if (vc[i].poolAmountOut > minPoolAmount) {\n', '        uint256 ratio = minPoolAmount.mul(1 ether).div(vc[i].poolAmountOut);\n', '        vc[i].correctInput = ratio.mul(vc[i].input).div(1 ether);\n', '        restInput = restInput.add(vc[i].input.sub(vc[i].correctInput));\n', '      } else {\n', '        vc[i].correctInput = vc[i].input;\n', '      }\n', '    }\n', '\n', '    totalCorrectInput = totalInputAmount.sub(restInput).sub(100);\n', '  }\n', '\n', '  /* ==========  Internal Functions  ========== */\n', '\n', '  function _depositVaultAndGetTokensInPipt(address _pool, uint256 _totalInputAmount)\n', '    internal\n', '    returns (uint256 poolAmountOut, uint256[] memory tokensInPipt)\n', '  {\n', '    require(_totalInputAmount != 0, "NULL_INPUT");\n', '    uint256 len = poolTokens[_pool].length;\n', '    uint256 piptTotalSupply = PowerIndexPoolInterface(_pool).totalSupply();\n', '\n', '    (VaultCalc[] memory vc, uint256 restInput, uint256 totalCorrectInput) =\n', '      getVaultCalcsForSupply(_pool, piptTotalSupply, _totalInputAmount);\n', '\n', '    tokensInPipt = new uint256[](len);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 share = vc[i].correctInput.mul(1 ether).div(totalCorrectInput);\n', '      vc[i].correctInput = vc[i].correctInput.add(restInput.mul(share).div(1 ether)).sub(100);\n', '\n', '      uint256 balanceBefore = IVault(vc[i].token).balanceOf(address(this));\n', '      IVault(vc[i].token).deposit(_addYearnLpTokenLiquidity(vaultConfig[vc[i].token], vc[i].correctInput));\n', '      tokensInPipt[i] = IVault(vc[i].token).balanceOf(address(this)).sub(balanceBefore);\n', '\n', '      uint256 poolOutByToken = tokensInPipt[i].sub(1e12).mul(piptTotalSupply).div(vc[i].tokenBalance);\n', '      if (poolOutByToken < poolAmountOut || poolAmountOut == 0) {\n', '        poolAmountOut = poolOutByToken;\n', '      }\n', '    }\n', '    require(poolAmountOut != 0, "NULL_OUTPUT");\n', '  }\n', '\n', '  function _addYearnLpTokenLiquidity(VaultConfig storage vc, uint256 _amount) internal returns (uint256) {\n', '    uint256 balanceBefore = IERC20(vc.lpToken).balanceOf(address(this));\n', '    if (vc.depositorLength == 2) {\n', '      uint256[2] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        ICurveZapDepositor2(vc.depositor).add_liquidity(vc.lpToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor2(vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '\n', '    if (vc.depositorLength == 3) {\n', '      uint256[3] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        ICurveZapDepositor3(vc.depositor).add_liquidity(vc.lpToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor3(vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '\n', '    if (vc.depositorLength == 4) {\n', '      uint256[4] memory amounts;\n', '      amounts[vc.depositorIndex] = _amount;\n', '      if (vc.depositorType == 2) {\n', '        ICurveZapDepositor4(vc.depositor).add_liquidity(vc.lpToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor4(vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '    uint256 balanceAfter = IERC20(vc.lpToken).balanceOf(address(this));\n', '    return balanceAfter.sub(balanceBefore);\n', '  }\n', '\n', '  function _redeemVault(address _pool, uint256 _totalInputAmount) internal returns (uint256 totalOutputAmount) {\n', '    require(_totalInputAmount != 0, "NULL_INPUT");\n', '    address[] memory tokens = poolTokens[_pool];\n', '    uint256 len = tokens.length;\n', '\n', '    uint256[] memory amounts = new uint256[](len);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      amounts[i] = IERC20(tokens[i]).balanceOf(address(this));\n', '    }\n', '    PowerIndexPoolInterface(_pool).exitPool(_totalInputAmount, amounts);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      amounts[i] = IERC20(tokens[i]).balanceOf(address(this)).sub(amounts[i]);\n', '    }\n', '\n', '    uint256 outputTokenBalanceBefore = usdc.balanceOf(address(this));\n', '    for (uint256 i = 0; i < len; i++) {\n', '      VaultConfig storage vc = vaultConfig[tokens[i]];\n', '      uint256 lpTokenBalanceBefore = IERC20(vc.lpToken).balanceOf(address(this));\n', '      IVault(tokens[i]).withdraw(amounts[i]);\n', '      uint256 lpTokenAmount = IERC20(vc.lpToken).balanceOf(address(this)).sub(lpTokenBalanceBefore);\n', '      if (vc.depositorType == 2) {\n', '        ICurveZapDepositor(vc.depositor).remove_liquidity_one_coin(vc.lpToken, lpTokenAmount, int8(vc.depositorIndex), 1);\n', '      } else {\n', '        ICurveDepositor(vc.depositor).remove_liquidity_one_coin(lpTokenAmount, int8(vc.depositorIndex), 1);\n', '      }\n', '    }\n', '    totalOutputAmount = usdc.balanceOf(address(this)).sub(outputTokenBalanceBefore);\n', '    require(totalOutputAmount != 0, "NULL_OUTPUT");\n', '  }\n', '\n', '  function _updatePool(address _pool) internal {\n', '    poolTokens[_pool] = PowerIndexPoolInterface(_pool).getCurrentTokens();\n', '    uint256 len = poolTokens[_pool].length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      IERC20(poolTokens[_pool][i]).approve(_pool, uint256(-1));\n', '    }\n', '  }\n', '}']