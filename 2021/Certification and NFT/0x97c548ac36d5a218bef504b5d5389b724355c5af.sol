['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev ERC-1155 interface for accepting safe transfers.\n', ' */\n', 'interface IERC1155TokenReceiver {\n', '  /**\n', '   * @notice Handle the receipt of a single ERC1155 token type\n', '   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\n', '   * This function MAY throw to revert and reject the transfer\n', '   * Return of other amount than the magic value MUST result in the transaction being reverted\n', '   * Note: The token contract address is always the message sender\n', '   * @param _operator  The address which called the `safeTransferFrom` function\n', '   * @param _from      The address which previously owned the token\n', '   * @param _id        The id of the token being transferred\n', '   * @param _amount    The amount of tokens being transferred\n', '   * @param _data      Additional data with no specified format\n', '   * @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '   */\n', '  function onERC1155Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _id,\n', '    uint256 _amount,\n', '    bytes calldata _data\n', '  ) external returns (bytes4);\n', '\n', '  /**\n', '   * @notice Handle the receipt of multiple ERC1155 token types\n', '   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\n', '   * This function MAY throw to revert and reject the transfer\n', '   * Return of other amount than the magic value WILL result in the transaction being reverted\n', '   * Note: The token contract address is always the message sender\n', '   * @param _operator  The address which called the `safeBatchTransferFrom` function\n', '   * @param _from      The address which previously owned the token\n', '   * @param _ids       An array containing ids of each token being transferred\n', '   * @param _amounts   An array containing amounts of each token being transferred\n', '   * @param _data      Additional data with no specified format\n', '   * @return           `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '   */\n', '  function onERC1155BatchReceived(\n', '    address _operator,\n', '    address _from,\n', '    uint256[] calldata _ids,\n', '    uint256[] calldata _amounts,\n', '    bytes calldata _data\n', '  ) external returns (bytes4);\n', '\n', '  /**\n', '   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\n', '   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\n', '   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\n', '   *      This function MUST NOT consume more than 5,000 gas.\n', '   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\n', '   */\n', '  function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of Multi-Token Standard contract\n', ' */\n', 'contract ERC1155 is IERC165 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  /***********************************|\n', '  |        Variables and Events       |\n', '  |__________________________________*/\n', '\n', '  // onReceive function signatures\n', '  bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\n', '  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\n', '\n', '  // Objects balances\n', '  mapping(address => mapping(uint256 => uint256)) internal balances;\n', '\n', '  // Operator Functions\n', '  mapping(address => mapping(address => bool)) internal operators;\n', '\n', '  // Events\n', '  event TransferSingle(\n', '    address indexed _operator,\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 _id,\n', '    uint256 _amount\n', '  );\n', '  event TransferBatch(\n', '    address indexed _operator,\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256[] _ids,\n', '    uint256[] _amounts\n', '  );\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '  event URI(string _uri, uint256 indexed _id);\n', '\n', '  /***********************************|\n', '  |     Public Transfer Functions     |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\n', '   * @param _from    Source address\n', '   * @param _to      Target address\n', '   * @param _id      ID of the token type\n', '   * @param _amount  Transfered amount\n', '   * @param _data    Additional data with no specified format, sent in call to `_to`\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _amount,\n', '    bytes memory _data\n', '  ) public {\n', '    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeTransferFrom: INVALID_OPERATOR");\n', '    require(_to != address(0), "ERC1155#safeTransferFrom: INVALID_RECIPIENT");\n', '    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n', '\n', '    _safeTransferFrom(_from, _to, _id, _amount);\n', '    _callonERC1155Received(_from, _to, _id, _amount, _data);\n', '  }\n', '\n', '  /**\n', '   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n', '   * @param _from     Source addresses\n', '   * @param _to       Target addresses\n', '   * @param _ids      IDs of each token type\n', '   * @param _amounts  Transfer amounts per token type\n', '   * @param _data     Additional data with no specified format, sent in call to `_to`\n', '   */\n', '  function safeBatchTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256[] memory _ids,\n', '    uint256[] memory _amounts,\n', '    bytes memory _data\n', '  ) public {\n', '    // Requirements\n', '    require(\n', '      (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\n', '      "ERC1155#safeBatchTransferFrom: INVALID_OPERATOR"\n', '    );\n', '    require(_to != address(0), "ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT");\n', '\n', '    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n', '    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n', '  }\n', '\n', '  /***********************************|\n', '  |    Internal Transfer Functions    |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\n', '   * @param _from    Source address\n', '   * @param _to      Target address\n', '   * @param _id      ID of the token type\n', '   * @param _amount  Transfered amount\n', '   */\n', '  function _safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _amount\n', '  ) internal {\n', '    // Update balances\n', '    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\n', '    balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\n', '\n', '    // Emit event\n', '    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\n', '  }\n', '\n', '  /**\n', '   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\n', '   */\n', '  function _callonERC1155Received(\n', '    address _from,\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _amount,\n', '    bytes memory _data\n', '  ) internal {\n', '    // Check if recipient is contract\n', '    if (_to.isContract()) {\n', '      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\n', '      require(retval == ERC1155_RECEIVED_VALUE, "ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE");\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n', '   * @param _from     Source addresses\n', '   * @param _to       Target addresses\n', '   * @param _ids      IDs of each token type\n', '   * @param _amounts  Transfer amounts per token type\n', '   */\n', '  function _safeBatchTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256[] memory _ids,\n', '    uint256[] memory _amounts\n', '  ) internal {\n', '    require(_ids.length == _amounts.length, "ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH");\n', '\n', '    // Number of transfer to execute\n', '    uint256 nTransfer = _ids.length;\n', '\n', '    // Executing all transfers\n', '    for (uint256 i = 0; i < nTransfer; i++) {\n', '      // Update storage balance of previous bin\n', '      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\n', '      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\n', '    }\n', '\n', '    // Emit event\n', '    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\n', '  }\n', '\n', '  /**\n', '   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\n', '   */\n', '  function _callonERC1155BatchReceived(\n', '    address _from,\n', '    address _to,\n', '    uint256[] memory _ids,\n', '    uint256[] memory _amounts,\n', '    bytes memory _data\n', '  ) internal {\n', '    // Pass data if recipient is contract\n', '    if (_to.isContract()) {\n', '      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\n', '      require(\n', '        retval == ERC1155_BATCH_RECEIVED_VALUE,\n', '        "ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE"\n', '      );\n', '    }\n', '  }\n', '\n', '  /***********************************|\n', '  |         Operator Functions        |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice Enable or disable approval for a third party ("operator") to manage all of caller\'s tokens\n', '   * @param _operator  Address to add to the set of authorized operators\n', '   * @param _approved  True if the operator is approved, false to revoke approval\n', '   */\n', '  function setApprovalForAll(address _operator, bool _approved) external {\n', '    // Update operator status\n', '    operators[msg.sender][_operator] = _approved;\n', '    emit ApprovalForAll(msg.sender, _operator, _approved);\n', '  }\n', '\n', '  /**\n', '   * @notice Queries the approval status of an operator for a given owner\n', '   * @param _owner     The owner of the Tokens\n', '   * @param _operator  Address of authorized operator\n', '   * @return isOperator True if the operator is approved, false if not\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view virtual returns (bool isOperator) {\n', '    return operators[_owner][_operator];\n', '  }\n', '\n', '  /***********************************|\n', '  |         Balance Functions         |\n', '  |__________________________________*/\n', '\n', '  /**\n', "   * @notice Get the balance of an account's Tokens\n", '   * @param _owner  The address of the token holder\n', '   * @param _id     ID of the Token\n', "   * @return The _owner's balance of the Token type requested\n", '   */\n', '  function balanceOf(address _owner, uint256 _id) public view returns (uint256) {\n', '    return balances[_owner][_id];\n', '  }\n', '\n', '  /**\n', '   * @notice Get the balance of multiple account/token pairs\n', '   * @param _owners The addresses of the token holders\n', '   * @param _ids    ID of the Tokens\n', "   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n", '   */\n', '  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory) {\n', '    require(_owners.length == _ids.length, "ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH");\n', '\n', '    // Variables\n', '    uint256[] memory batchBalances = new uint256[](_owners.length);\n', '\n', '    // Iterate over each owner and token ID\n', '    for (uint256 i = 0; i < _owners.length; i++) {\n', '      batchBalances[i] = balances[_owners[i]][_ids[i]];\n', '    }\n', '\n', '    return batchBalances;\n', '  }\n', '\n', '  /***********************************|\n', '  |          ERC165 Functions         |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256("supportsInterface(bytes4)"));\n', '   */\n', '  bytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\n', '\n', '  /**\n', '   * INTERFACE_SIGNATURE_ERC1155 =\n', '   * bytes4(keccak256("safeTransferFrom(address,address,uint256,uint256,bytes)")) ^\n', '   * bytes4(keccak256("safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)")) ^\n', '   * bytes4(keccak256("balanceOf(address,uint256)")) ^\n', '   * bytes4(keccak256("balanceOfBatch(address[],uint256[])")) ^\n', '   * bytes4(keccak256("setApprovalForAll(address,bool)")) ^\n', '   * bytes4(keccak256("isApprovedForAll(address,address)"));\n', '   */\n', '  bytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceID  The interface identifier, as specified in ERC-165\n', '   * @return `true` if the contract implements `_interfaceID` and\n', '   */\n', '  function supportsInterface(bytes4 _interfaceID) external view override(IERC165) returns (bool) {\n', '    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 || _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @notice Contract that handles metadata related methods.\n', ' * @dev Methods assume a deterministic generation of URI based on token IDs.\n', ' *      Methods also assume that URI uses hex representation of token IDs.\n', ' */\n', 'contract ERC1155Metadata {\n', "  // URI's default URI prefix\n", '  string internal baseMetadataURI;\n', '  event URI(string _uri, uint256 indexed _id);\n', '\n', '  /***********************************|\n', '  |     Metadata Public Function s    |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n', '   * @dev URIs are defined in RFC 3986.\n', '   *      URIs are assumed to be deterministically generated based on token ID\n', '   *      Token IDs are assumed to be represented in their hex format in URIs\n', '   * @return URI string\n', '   */\n', '  function uri(uint256 _id) public view virtual returns (string memory) {\n', '    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), ".json"));\n', '  }\n', '\n', '  /***********************************|\n', '  |    Metadata Internal Functions    |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice Will emit default URI log event for corresponding token _id\n', '   * @param _tokenIDs Array of IDs of tokens to log default URI\n', '   */\n', '  function _logURIs(uint256[] memory _tokenIDs) internal {\n', '    string memory baseURL = baseMetadataURI;\n', '    string memory tokenURI;\n', '\n', '    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n', '      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), ".json"));\n', '      emit URI(tokenURI, _tokenIDs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Will emit a specific URI log event for corresponding token\n', '   * @param _tokenIDs IDs of the token corresponding to the _uris logged\n', '   * @param _URIs    The URIs of the specified _tokenIDs\n', '   */\n', '  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\n', '    require(_tokenIDs.length == _URIs.length, "ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH");\n', '    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n', '      emit URI(_URIs[i], _tokenIDs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', "   * @notice Will update the base URL of token's URI\n", "   * @param _newBaseMetadataURI New base URL of token's URI\n", '   */\n', '  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\n', '    baseMetadataURI = _newBaseMetadataURI;\n', '  }\n', '\n', '  /***********************************|\n', '  |    Utility Internal Functions     |\n', '  |__________________________________*/\n', '\n', '  /**\n', '   * @notice Convert uint256 to string\n', '   * @param _i Unsigned integer to convert to string\n', '   */\n', '  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n', '    if (_i == 0) {\n', '      return "0";\n', '    }\n', '\n', '    uint256 j = _i;\n', '    uint256 ii = _i;\n', '    uint256 len;\n', '\n', '    // Get number of bytes\n', '    while (j != 0) {\n', '      len++;\n', '      j /= 10;\n', '    }\n', '\n', '    bytes memory bstr = new bytes(len);\n', '    uint256 k = len - 1;\n', '\n', '    // Get each individual ASCII\n', '    while (ii != 0) {\n', '      bstr[k--] = bytes1(uint8(48 + (ii % 10)));\n', '      ii /= 10;\n', '    }\n', '\n', '    // Convert to string\n', '    return string(bstr);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\n', ' *      a parent contract to be executed as they are `internal` functions\n', ' */\n', 'contract ERC1155MintBurn is ERC1155 {\n', '  /****************************************|\n', '  |            Minting Functions           |\n', '  |_______________________________________*/\n', '\n', '  /**\n', '   * @notice Mint _amount of tokens of a given id\n', '   * @param _to      The address to mint tokens to\n', '   * @param _id      Token id to mint\n', '   * @param _amount  The amount to be minted\n', '   * @param _data    Data to pass if receiver is contract\n', '   */\n', '  function _mint(\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _amount,\n', '    bytes memory _data\n', '  ) internal {\n', '    // Add _amount\n', '    balances[_to][_id] = balances[_to][_id].add(_amount);\n', '\n', '    // Emit event\n', '    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\n', '\n', '    // Calling onReceive method if recipient is contract\n', '    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\n', '  }\n', '\n', '  /**\n', '   * @notice Mint tokens for each ids in _ids\n', '   * @param _to       The address to mint tokens to\n', '   * @param _ids      Array of ids to mint\n', '   * @param _amounts  Array of amount of tokens to mint per id\n', '   * @param _data    Data to pass if receiver is contract\n', '   */\n', '  function _batchMint(\n', '    address _to,\n', '    uint256[] memory _ids,\n', '    uint256[] memory _amounts,\n', '    bytes memory _data\n', '  ) internal {\n', '    require(_ids.length == _amounts.length, "ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH");\n', '\n', '    // Number of mints to execute\n', '    uint256 nMint = _ids.length;\n', '\n', '    // Executing all minting\n', '    for (uint256 i = 0; i < nMint; i++) {\n', '      // Update storage balance\n', '      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\n', '    }\n', '\n', '    // Emit batch mint event\n', '    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\n', '\n', '    // Calling onReceive method if recipient is contract\n', '    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\n', '  }\n', '\n', '  /****************************************|\n', '  |            Burning Functions           |\n', '  |_______________________________________*/\n', '\n', '  /**\n', '   * @notice Burn _amount of tokens of a given token id\n', '   * @param _from    The address to burn tokens from\n', '   * @param _id      Token id to burn\n', '   * @param _amount  The amount to be burned\n', '   */\n', '  function _burn(\n', '    address _from,\n', '    uint256 _id,\n', '    uint256 _amount\n', '  ) internal {\n', '    //Substract _amount\n', '    balances[_from][_id] = balances[_from][_id].sub(_amount);\n', '\n', '    // Emit event\n', '    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\n', '  }\n', '\n', '  /**\n', '   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\n', '   * @param _from     The address to burn tokens from\n', '   * @param _ids      Array of token ids to burn\n', '   * @param _amounts  Array of the amount to be burned\n', '   */\n', '  function _batchBurn(\n', '    address _from,\n', '    uint256[] memory _ids,\n', '    uint256[] memory _amounts\n', '  ) internal {\n', '    require(_ids.length == _amounts.length, "ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH");\n', '\n', '    // Number of mints to execute\n', '    uint256 nBurn = _ids.length;\n', '\n', '    // Executing all minting\n', '    for (uint256 i = 0; i < nBurn; i++) {\n', '      // Update storage balance\n', '      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\n', '    }\n', '\n', '    // Emit batch mint event\n', '    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping(address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev Give an account access to this role.\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(!has(role, account), "Roles: account already has role");\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev Remove an account's access to this role.\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(has(role, account), "Roles: account does not have role");\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Check if an account has this role.\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account) internal view returns (bool) {\n', '    require(account != address(0), "Roles: account is the zero address");\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract MinterRole is Context {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private _minters;\n', '\n', '  constructor() internal {\n', '    _addMinter(_msgSender());\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return _minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    _addMinter(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    _removeMinter(_msgSender());\n', '  }\n', '\n', '  function _addMinter(address account) internal {\n', '    _minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    _minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'abstract contract Proxy {\n', '  event ReceivedEther(address indexed sender, uint256 amount);\n', '\n', '  /**\n', '   * @dev Tells the address of the implementation where every call will be delegated.\n', '   * @return address of the implementation to which it will be delegated\n', '   */\n', '  function implementation() public view virtual returns (address);\n', '\n', '  /**\n', '   * @dev Tells the type of proxy (EIP 897)\n', '   * @return Type of proxy, 2 for upgradeable proxy\n', '   */\n', '  function proxyType() public pure virtual returns (uint256);\n', '\n', '  /**\n', '   * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '   * This function will return whatever the implementation call returns\n', '   */\n', '  fallback() external payable {\n', '    address _impl = implementation();\n', '    require(_impl != address(0));\n', '\n', '    assembly {\n', '      let ptr := mload(0x40)\n', '      calldatacopy(ptr, 0, calldatasize())\n', '      let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n', '      let size := returndatasize()\n', '      returndatacopy(ptr, 0, size)\n', '\n', '      switch result\n', '        case 0 {\n', '          revert(ptr, size)\n', '        }\n', '        default {\n', '          return(ptr, size)\n', '        }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Receive Ether and generate a log event\n', '   */\n', '  receive() external payable {\n', '    emit ReceivedEther(msg.sender, msg.value);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract OwnedUpgradeabilityStorage is Proxy {\n', '  // Current implementation\n', '  address internal _implementation;\n', '\n', '  // Owner of the contract\n', '  address private _upgradeabilityOwner;\n', '\n', '  /**\n', '   * @dev Tells the address of the owner\n', '   * @return the address of the owner\n', '   */\n', '  function upgradeabilityOwner() public view returns (address) {\n', '    return _upgradeabilityOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the owner\n', '   */\n', '  function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n', '    _upgradeabilityOwner = newUpgradeabilityOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Tells the address of the current implementation\n', '   * @return address of the current implementation\n', '   */\n', '  function implementation() public view override returns (address) {\n', '    return _implementation;\n', '  }\n', '\n', '  /**\n', '   * @dev Tells the proxy type (EIP 897)\n', '   * @return Proxy type, 2 for forwarding proxy\n', '   */\n', '  function proxyType() public pure override returns (uint256) {\n', '    return 2;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract OwnedUpgradeabilityProxy is OwnedUpgradeabilityStorage {\n', '  /**\n', '   * @dev Event to show ownership has been transferred\n', '   * @param previousOwner representing the address of the previous owner\n', '   * @param newOwner representing the address of the new owner\n', '   */\n', '  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '  /**\n', '   * @dev This event will be emitted every time the implementation gets upgraded\n', '   * @param implementation representing the address of the upgraded implementation\n', '   */\n', '  event Upgraded(address indexed implementation);\n', '\n', '  /**\n', '   * @dev Upgrades the implementation address\n', '   * @param implementation representing the address of the new implementation to be set\n', '   */\n', '  function _upgradeTo(address implementation) internal {\n', '    require(_implementation != implementation);\n', '    _implementation = implementation;\n', '    emit Upgraded(implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyProxyOwner() {\n', '    require(msg.sender == proxyOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Tells the address of the proxy owner\n', '   * @return the address of the proxy owner\n', '   */\n', '  function proxyOwner() public view returns (address) {\n', '    return upgradeabilityOwner();\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\n', '    require(newOwner != address(0));\n', '    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\n', '    setUpgradeabilityOwner(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\n', '   * @param implementation representing the address of the new implementation to be set.\n', '   */\n', '  function upgradeTo(address implementation) public onlyProxyOwner {\n', '    _upgradeTo(implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\n', '   * and delegatecall the new implementation for initialization.\n', '   * @param implementation representing the address of the new implementation to be set.\n', '   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\n', '   * signature of the implementation to be called with the needed payload\n', '   */\n', '  function upgradeToAndCall(address implementation, bytes memory data) public payable onlyProxyOwner {\n', '    upgradeTo(implementation);\n', '    (bool result, ) = address(this).delegatecall(data);\n', '    require(result);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\n', '  constructor(\n', '    address owner,\n', '    address initialImplementation,\n', '    bytes memory callData\n', '  ) public {\n', '    setUpgradeabilityOwner(owner);\n', '    _upgradeTo(initialImplementation);\n', '    (bool result, ) = initialImplementation.delegatecall(callData);\n', '    require(result);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract ProxyRegistry is Ownable {\n', '  /* DelegateProxy implementation contract. Must be initialized. */\n', '  address public delegateProxyImplementation;\n', '\n', '  /* Authenticated proxies by user. */\n', '  mapping(address => OwnableDelegateProxy) public proxies;\n', '\n', '  /* Contracts pending access. */\n', '  mapping(address => uint256) public pending;\n', '\n', '  /* Contracts allowed to call those proxies. */\n', '  mapping(address => bool) public contracts;\n', '\n', '  /* Delay period for adding an authenticated contract.\n', '       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\n', '       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\n', '       plenty of time to notice and transfer their assets.\n', '    */\n', '  uint256 public DELAY_PERIOD = 2 weeks;\n', '\n', '  /**\n', '   * Start the process to enable access for specified contract. Subject to delay period.\n', '   *\n', '   * @dev ProxyRegistry owner only\n', '   * @param addr Address to which to grant permissions\n', '   */\n', '  function startGrantAuthentication(address addr) public onlyOwner {\n', '    require(!contracts[addr] && pending[addr] == 0);\n', '    pending[addr] = now;\n', '  }\n', '\n', '  /**\n', '   * End the process to nable access for specified contract after delay period has passed.\n', '   *\n', '   * @dev ProxyRegistry owner only\n', '   * @param addr Address to which to grant permissions\n', '   */\n', '  function endGrantAuthentication(address addr) public onlyOwner {\n', '    require(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < now));\n', '    pending[addr] = 0;\n', '    contracts[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * Revoke access for specified contract. Can be done instantly.\n', '   *\n', '   * @dev ProxyRegistry owner only\n', '   * @param addr Address of which to revoke permissions\n', '   */\n', '  function revokeAuthentication(address addr) public onlyOwner {\n', '    contracts[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * Register a proxy contract with this registry\n', '   *\n', '   * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\n', '   * @return proxy New AuthenticatedProxy contract\n', '   */\n', '  function registerProxy() public returns (OwnableDelegateProxy proxy) {\n', '    require(address(proxies[msg.sender]) == address(0));\n', '    proxy = new OwnableDelegateProxy(\n', '      msg.sender,\n', '      delegateProxyImplementation,\n', '      abi.encodeWithSignature("initialize(address,address)", msg.sender, address(this))\n', '    );\n', '    proxies[msg.sender] = proxy;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'library Strings {\n', '  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', '  function strConcat(\n', '    string memory _a,\n', '    string memory _b,\n', '    string memory _c,\n', '    string memory _d,\n', '    string memory _e\n', '  ) internal pure returns (string memory) {\n', '    bytes memory _ba = bytes(_a);\n', '    bytes memory _bb = bytes(_b);\n', '    bytes memory _bc = bytes(_c);\n', '    bytes memory _bd = bytes(_d);\n', '    bytes memory _be = bytes(_e);\n', '    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '    bytes memory babcde = bytes(abcde);\n', '    uint256 k = 0;\n', '    for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '    for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '    for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '    for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '    for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '    return string(babcde);\n', '  }\n', '\n', '  function strConcat(\n', '    string memory _a,\n', '    string memory _b,\n', '    string memory _c,\n', '    string memory _d\n', '  ) internal pure returns (string memory) {\n', '    return strConcat(_a, _b, _c, _d, "");\n', '  }\n', '\n', '  function strConcat(\n', '    string memory _a,\n', '    string memory _b,\n', '    string memory _c\n', '  ) internal pure returns (string memory) {\n', '    return strConcat(_a, _b, _c, "", "");\n', '  }\n', '\n', '  function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n', '    return strConcat(_a, _b, "", "", "");\n', '  }\n', '\n', '  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n', '    if (_i == 0) {\n', '      return "0";\n', '    }\n', '    uint256 j = _i;\n', '    uint256 len;\n', '    while (j != 0) {\n', '      len++;\n', '      j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(len);\n', '    uint256 k = len - 1;\n', '    while (_i != 0) {\n', '      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n', '      _i /= 10;\n', '    }\n', '    return string(bstr);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '  using Roles for Roles.Role;\n', '\n', '  event WhitelistAdminAdded(address indexed account);\n', '  event WhitelistAdminRemoved(address indexed account);\n', '\n', '  Roles.Role private _whitelistAdmins;\n', '\n', '  constructor() internal {\n', '    _addWhitelistAdmin(_msgSender());\n', '  }\n', '\n', '  modifier onlyWhitelistAdmin() {\n', '    require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '    _;\n', '  }\n', '\n', '  function isWhitelistAdmin(address account) public view returns (bool) {\n', '    return _whitelistAdmins.has(account);\n', '  }\n', '\n', '  function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '    _addWhitelistAdmin(account);\n', '  }\n', '\n', '  function renounceWhitelistAdmin() public {\n', '    _removeWhitelistAdmin(_msgSender());\n', '  }\n', '\n', '  function _addWhitelistAdmin(address account) internal {\n', '    _whitelistAdmins.add(account);\n', '    emit WhitelistAdminAdded(account);\n', '  }\n', '\n', '  function _removeWhitelistAdmin(address account) internal {\n', '    _whitelistAdmins.remove(account);\n', '    emit WhitelistAdminRemoved(account);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC1155Tradable\n', ' * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \n', ' * has create and mint functionality, and supports useful standards from OpenZeppelin,\n', '  like _exists(), name(), symbol(), and totalSupply()\n', ' */\n', 'contract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole {\n', '  using Strings for string;\n', '\n', '  address proxyRegistryAddress;\n', '  uint256 private _currentTokenID = 0;\n', '  mapping(uint256 => address) public creators;\n', '  mapping(uint256 => uint256) public tokenSupply;\n', '  mapping(uint256 => uint256) public tokenMaxSupply;\n', '  // Contract name\n', '  string public name;\n', '  // Contract symbol\n', '  string public symbol;\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    address _proxyRegistryAddress\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    proxyRegistryAddress = _proxyRegistryAddress;\n', '  }\n', '\n', '  function removeWhitelistAdmin(address account) public onlyOwner {\n', '    _removeWhitelistAdmin(account);\n', '  }\n', '\n', '  function removeMinter(address account) public onlyOwner {\n', '    _removeMinter(account);\n', '  }\n', '\n', '  function uri(uint256 _id) public view override returns (string memory) {\n', '    require(_exists(_id), "ERC721Tradable#uri: NONEXISTENT_TOKEN");\n', '    return Strings.strConcat(baseMetadataURI, Strings.uint2str(_id));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the total quantity for a token ID\n', '   * @param _id uint256 ID of the token to query\n', '   * @return amount of token in existence\n', '   */\n', '  function totalSupply(uint256 _id) public view returns (uint256) {\n', '    return tokenSupply[_id];\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the max quantity for a token ID\n', '   * @param _id uint256 ID of the token to query\n', '   * @return amount of token in existence\n', '   */\n', '  function maxSupply(uint256 _id) public view returns (uint256) {\n', '    return tokenMaxSupply[_id];\n', '  }\n', '\n', '  /**\n', "   * @dev Will update the base URL of token's URI\n", "   * @param _newBaseMetadataURI New base URL of token's URI\n", '   */\n', '  function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyWhitelistAdmin {\n', '    _setBaseMetadataURI(_newBaseMetadataURI);\n', '  }\n', '\n', '  /**\n', '   * @dev Creates a new token type and assigns _initialSupply to an address\n', '   * @param _maxSupply max supply allowed\n', '   * @param _initialSupply Optional amount to supply the first owner\n', '   * @param _uri Optional URI for this token type\n', '   * @param _data Optional data to pass if receiver is contract\n', '   * @return tokenId The newly created token ID\n', '   */\n', '  function create(\n', '    uint256 _maxSupply,\n', '    uint256 _initialSupply,\n', '    string calldata _uri,\n', '    bytes calldata _data\n', '  ) external onlyWhitelistAdmin returns (uint256 tokenId) {\n', '    require(_initialSupply <= _maxSupply, "Initial supply cannot be more than max supply");\n', '    uint256 _id = _getNextTokenID();\n', '    _incrementTokenTypeId();\n', '    creators[_id] = msg.sender;\n', '\n', '    if (bytes(_uri).length > 0) {\n', '      emit URI(_uri, _id);\n', '    }\n', '\n', '    if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\n', '    tokenSupply[_id] = _initialSupply;\n', '    tokenMaxSupply[_id] = _maxSupply;\n', '    return _id;\n', '  }\n', '\n', '  /**\n', '   * @dev Mints some amount of tokens to an address\n', '   * @param _to          Address of the future owner of the token\n', '   * @param _id          Token ID to mint\n', '   * @param _quantity    Amount of tokens to mint\n', '   * @param _data        Data to pass if receiver is contract\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _quantity,\n', '    bytes memory _data\n', '  ) public onlyMinter {\n', '    uint256 tokenId = _id;\n', '    require(tokenSupply[tokenId].add(_quantity) <= tokenMaxSupply[tokenId], "Max supply reached");\n', '    _mint(_to, _id, _quantity, _data);\n', '    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n', '  }\n', '\n', '  /**\n', "   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\n", '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {\n', '    // Whitelist OpenSea proxy contract for easy trading.\n', '    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n', '    if (address(proxyRegistry.proxies(_owner)) == _operator) {\n', '      return true;\n', '    }\n', '\n', '    return ERC1155.isApprovedForAll(_owner, _operator);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists by checking to see if it has a creator\n', '   * @param _id uint256 ID of the token to query the existence of\n', '   * @return bool whether the token exists\n', '   */\n', '  function _exists(uint256 _id) internal view returns (bool) {\n', '    return creators[_id] != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev calculates the next token ID based on value of _currentTokenID\n', '   * @return uint256 for the next token ID\n', '   */\n', '  function _getNextTokenID() private view returns (uint256) {\n', '    return _currentTokenID.add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev increments the value of _currentTokenID\n', '   */\n', '  function _incrementTokenTypeId() private {\n', '    _currentTokenID++;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates token max supply\n', '   * @param id_ uint256 ID of the token to update\n', '   * @param maxSupply_ uint256 max supply allowed\n', '   */\n', '  function updateTokenMaxSupply(uint256 id_, uint256 maxSupply_) external onlyWhitelistAdmin {\n', '    require(_exists(id_), "ERC1155Tradable#updateTokenMaxSupply: NONEXISTENT_TOKEN");\n', '    require(tokenSupply[id_] <= maxSupply_, "already minted > new maxSupply");\n', '    tokenMaxSupply[id_] = maxSupply_;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title EddaNft\n', ' * EddaNft - Collect limited edition NFTs from Edda\n', ' */\n', 'contract EddaNft is ERC1155Tradable {\n', '  string public contractURI;\n', '\n', '  constructor(\n', '    string memory _name, //// "Meme Ltd."\n', '    string memory _symbol, //// "MEMES"\n', '    address _proxyRegistryAddress,\n', '    string memory _baseMetadataURI, //// "https://api.dontbuymeme.com/memes/"\n', '    string memory _contractURI //// "https://api.dontbuymeme.com/contract/memes-erc1155"\n', '  ) public ERC1155Tradable(_name, _symbol, _proxyRegistryAddress) {\n', '    contractURI = _contractURI;\n', '    _setBaseMetadataURI(_baseMetadataURI);\n', '  }\n', '\n', '  //// function contractURI() public pure returns (string memory) {\n', '  ////   return "https://api.dontbuymeme.com/contract/memes-erc1155";\n', '  //// }\n', '}']