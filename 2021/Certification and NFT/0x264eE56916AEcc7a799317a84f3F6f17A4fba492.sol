['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '//SPDX-License-Identifier: MIT\n', '\n', '\n', 'abstract contract ERC20 {\n', '    function balanceOf(address _owner) virtual public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _amount) virtual public returns (bool success); \n', '}\n', '\n', '\n', 'abstract contract StoreHubInterface {\n', '    mapping(address => bool) public isValidStore;\n', '    mapping(address => uint256) public storeBalance;\n', '    function withdraw(uint256 _collateral) virtual external;\n', '    function callEvent(address _value1, uint256 _value2, uint256 _value3, bool _value4, uint _option) virtual external;\n', '}\n', '\n', '\n', 'interface StoreInterface {\n', '    function receiveCollateral(uint256 _amount, uint256 _rate, uint _option, bool _isTrade) external;\n', '}\n', '\n', '\n', 'contract Store {\n', '    uint256[3] public collateral;\n', '    uint256[3] public totalRelief;\n', '    uint256[3] public stake;\n', '    address[3] public storeHub;\n', '    address[3] public aToken;\n', '    address public extension;\n', '    address public owner;\n', '    \n', '    mapping(uint => mapping(uint256 => uint256)) public collateralRelief;\n', '    \n', '    function init(address _owner, address _usdtHub, address _daiHub) external {\n', '        require(storeHub[0] == address(0));\n', '        owner = _owner;\n', '        storeHub = [msg.sender, _usdtHub, _daiHub];\n', '        aToken = [\n', '            0xBcca60bB61934080951369a648Fb03DF4F96263C, \n', '            0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811,\n', '            0x028171bCA77440897B824Ca71D1c56caC55b68A3\n', '        ];\n', '    }\n', '}\n', '\n', '\n', 'contract Assets is Store {\n', '    \n', '    function _getAvailableFunds(ERC20 _erc20Contract, uint256 _option) internal view returns (uint256) {\n', '        require(address(_erc20Contract) == aToken[_option]);\n', '        return _erc20Contract.balanceOf(address(this)) - (collateral[_option] + stake[_option] + totalRelief[_option]);\n', '    }\n', '    \n', '    function sendERC20(address _tokenContract, address _to, uint256 _amount) external {\n', '        require(msg.sender == owner);\n', '        uint option = 4;\n', '        ERC20 erc20Contract = ERC20(_tokenContract);\n', '        \n', '        if(aToken[0] == _tokenContract) {\n', '            require(_getAvailableFunds(erc20Contract, 0) >= _amount);\n', '            option = 0;\n', '        }\n', '        else if(aToken[1] == _tokenContract) {\n', '            require(_getAvailableFunds(erc20Contract, 1) >= _amount);\n', '            option = 1;\n', '        }\n', '        else if(aToken[2] == _tokenContract) {\n', '            require(_getAvailableFunds(erc20Contract, 2) >= _amount);\n', '            option = 2;\n', '        }\n', '        \n', '        erc20Contract.transfer(_to, _amount);\n', '        if(option < 4) {\n', '            StoreHubInterface(storeHub[option]).callEvent(_to, _amount, 0, false, 3);\n', '        }\n', '    }\n', '    \n', '    function claimStoreHubBalance(uint _option) public {\n', '        require(msg.sender == owner);\n', '        uint256 storeBalance = StoreHubInterface(storeHub[_option]).storeBalance(address(this)) - 1;\n', '        collateral[_option] += ((storeBalance * 700)/10000);\n', '        stake[_option] = 0;\n', '        StoreHubInterface(storeHub[_option]).withdraw(((storeBalance * 700)/10000));\n', '    }\n', '}\n', '\n', '\n', 'contract Stake is Assets {\n', '    \n', '    function getExtensionStake(uint _option) external view returns(uint256, address) {\n', '        return (stake[_option], extension);\n', '    }\n', '    \n', '    function addStake(uint256 _amount, uint _option) external {\n', '        require(msg.sender == owner);\n', '        require(_getAvailableFunds(ERC20(aToken[_option]), _option) >= _amount);\n', '        stake[_option] += _amount;\n', '        StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, 0, false, 0);\n', '    }\n', '}\n', '\n', '\n', 'contract Collateral is Stake {\n', '    \n', '    function getExtensionCollateral(uint _option) external view returns(uint256, address) {\n', '        return (collateral[_option], extension);\n', '    }\n', '    \n', '    function provideCollateralRelief(uint256 _amount, uint256 _rate, uint _option, bool _addRelief) external {\n', '        require(msg.sender == owner);\n', '        require(_rate > 0 && _rate <= 10000);\n', '        \n', '        if(_addRelief == true) {\n', '            require(_getAvailableFunds(ERC20(aToken[_option]), _option) >= _amount);\n', '            collateralRelief[_option][_rate] += _amount;\n', '            totalRelief[_option] += _amount;\n', '            StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, _rate, true, 1);\n', '        }\n', '        else {\n', '            require(collateralRelief[_option][_rate] >= _amount);\n', '            collateralRelief[_option][_rate] -= _amount;\n', '            totalRelief[_option] -= _amount;\n', '            StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, _rate, false, 1);\n', '        }\n', '    }\n', '    \n', '    function transferCollateral(StoreInterface _store, uint256 _amount, uint _option) external {\n', '        require(msg.sender == owner);\n', '        require(StoreHubInterface(storeHub[0]).isValidStore(address(_store)) == true);\n', '        require(collateral[_option] >= _amount);\n', '        collateral[_option] -= _amount;\n', '        _store.receiveCollateral(_amount, 0, _option, false);\n', '        ERC20(aToken[_option]).transfer(address(_store), _amount);\n', '        StoreHubInterface(storeHub[_option]).callEvent(address(_store), _amount, 0, false, 2);\n', '    }\n', '    \n', '    function sellCollateral(StoreInterface _store, uint256 _amount, uint256 _rate, uint _option) external {\n', '        uint256 lost = (_amount * _rate) / 10000;\n', '        require(msg.sender == owner);\n', '        require(StoreHubInterface(storeHub[0]).isValidStore(address(_store)) == true);\n', '        require(lost >= 1);\n', '        require(collateral[_option] >= _amount);\n', '        collateral[_option] -= _amount;\n', '        _store.receiveCollateral(_amount, _rate, _option, true);\n', '        ERC20(aToken[_option]).transfer(address(_store), lost);\n', '        StoreHubInterface(storeHub[_option]).callEvent(address(_store), _amount, _rate, true, 2);\n', '    }\n', '    \n', '    function receiveCollateral(uint256 _amount, uint256 _rate, uint _option, bool _isTrade) external {\n', '        require(StoreHubInterface(storeHub[0]).isValidStore(address(msg.sender))  == true);\n', '        \n', '        if(_isTrade == true){\n', '            require(collateralRelief[_option][_rate] == _amount);\n', '            collateralRelief[_option][_rate] = 0;\n', '            totalRelief[_option] -= _amount;\n', '        }\n', '        \n', '        collateral[_option] += _amount;\n', '    }\n', '    \n', '    function updateCollateral(uint256 _amount, uint _option) external {\n', '        require(msg.sender == storeHub[_option]);\n', '        collateral[_option] -= _amount;\n', '    }\n', '}\n', '\n', '\n', 'contract General is Collateral {\n', '    \n', '    function updateExtension(address _newExtension) external {\n', '        require(msg.sender == owner);\n', '        extension = _newExtension;\n', '        StoreHubInterface(storeHub[0]).callEvent(extension, 0, 0, false, 4);\n', '    }\n', '    \n', '    function updateOwner(address _newOwner) external {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '        StoreHubInterface(storeHub[0]).callEvent(owner, 0, 0, false, 5);\n', '    }\n', '}']