['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyGovernance`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _governance;\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    event GovernanceshipTransferred(\n', '        address indexed previousGovernance,\n', '        address indexed newGovernance\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _governance = msgSender;\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '        emit GovernanceshipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _governance;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            _governance == _msgSender(),\n', '            "Ownable: caller is not the owner"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyGovernance` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyGovernance {\n', '        emit OwnershipTransferred(_governance, address(0));\n', '        _governance = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newGovernance)\n', '        public\n', '        virtual\n', '        onlyGovernance\n', '    {\n', '        require(\n', '            newGovernance != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_governance, newGovernance);\n', '        _governance = newGovernance;\n', '    }\n', '}\n', '\n', 'contract Dice is Context, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _totalAmount;\n', '\n', '    mapping(address => uint256) private _userBalanceList;\n', '\n', '    constructor() {\n', '        _totalAmount = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get Balance of User\n', '     */\n', '    function balanceOfPlayer(address userAddress)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _userBalanceList[userAddress];\n', '    }\n', '\n', '    /**\n', '     * @dev Get Total Balance\n', '     */\n', '    function getTotalBalance() external view returns (uint256) {\n', '        return _totalAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev receive event\n', '     */\n', '    receive() external payable {\n', '        deposit();\n', '    }\n', '\n', '    /**\n', '     * @dev Receive ETH from player and update his balance on DiceContract\n', '     */\n', '    function deposit() public payable {\n', '        address userAddress = _msgSender();\n', '        uint256 depositAmouont = msg.value;\n', '\n', "        // Update Player's Balance\n", '        _userBalanceList[userAddress] = _userBalanceList[userAddress].add(\n', '            depositAmouont\n', '        );\n', '        \n', '        // Update Total amount\n', '        _totalAmount = _totalAmount.add(depositAmouont);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw User Balance to user account, only Governance call it\n', '     */\n', '    function userWithdraw(\n', '        address userAddress,\n', '        uint256 amount,\n', '        uint256 updatedAmount\n', '    ) public payable onlyGovernance {\n', '        require(\n', '            _userBalanceList[userAddress] >= amount,\n', '            "User Balance should be more than withdraw amount."\n', '        );\n', '\n', '        // Send ETH From Contract to User Address\n', '        (bool sent, ) = userAddress.call{value: amount}("");\n', '        require(sent, "Failed to Withdraw User.");\n', '\n', '        // Update User Balance\n', '        _userBalanceList[userAddress] = updatedAmount;\n', '        // Update Total Balance\n', '        _totalAmount = _totalAmount.sub(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw admin Balance to admin account, only Governance call it\n', '     */\n', '    function adminWithdraw(address adminAddress, uint256 amount)\n', '        public\n', '        payable\n', '        onlyGovernance\n', '    {\n', '        require(\n', '            _totalAmount >= amount,\n', '            "User Balance should be more than withdraw amount."\n', '        );\n', '\n', '        // Send ETH From Contract to Admin Address\n', '        (bool sent, ) = adminAddress.call{value: amount}("");\n', '        require(sent, "Failed to Withdraw User.");\n', '\n', '        // Update Total Balance\n', '        _totalAmount = _totalAmount.sub(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev EmergencyWithdraw when need to update contract and then will restore it\n', '     */\n', '    function emergencyWithdraw() public payable onlyGovernance {\n', '        require(_totalAmount > 0, "Can\'t send over total ETH amount.");\n', '\n', '        uint256 amount = _totalAmount;\n', '        address governanceAddress = governance();\n', '\n', '        // Send ETH From Contract to Governance Address\n', '        (bool sent, ) = governanceAddress.call{value: amount}("");\n', '        require(sent, "Failed to Withdraw Governance");\n', '\n', '        // Update Total Balance\n', '        _totalAmount = 0;\n', '    }\n', '}']