['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: unlicensed\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'contract Context {\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address payable public _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address payable msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address payable newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'interface ICurveSwap {\n', '    function coins(int128 arg0) external view returns (address);\n', '\n', '    function underlying_coins(int128 arg0) external view returns (address);\n', '\n', '    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '\n', '    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '\n', '    function add_liquidity(\n', '        uint256[3] calldata amounts,\n', '        uint256 min_mint_amount,\n', '        bool isUnderLying\n', '    ) external;\n', '\n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '}\n', '\n', 'interface ICurveEthSwap {\n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n', '        external\n', '        payable\n', '        returns (uint256);\n', '}\n', '\n', 'interface yERC20 {\n', '    function deposit(uint256 _amount) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'interface ICurveRegistry {\n', '    function metaPools(address tokenAddress)\n', '        external\n', '        view\n', '        returns (address swapAddress);\n', '\n', '    function getTokenAddress(address swapAddress)\n', '        external\n', '        view\n', '        returns (address tokenAddress);\n', '\n', '    function getPoolTokens(address swapAddress)\n', '        external\n', '        view\n', '        returns (address[4] memory poolTokens);\n', '\n', '    function isMetaPool(address swapAddress) external view returns (bool);\n', '\n', '    function getNumTokens(address swapAddress)\n', '        external\n', '        view\n', '        returns (uint8 numTokens);\n', '\n', '    function isBtcPool(address swapAddress) external view returns (bool);\n', '\n', '    function isUnderlyingToken(\n', '        address swapAddress,\n', '        address tokenContractAddress\n', '    ) external view returns (bool, uint8);\n', '}\n', '\n', 'contract CurveAddLiquidity is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    bool public stopped = false; \n', '    uint16 public goodwill;\n', '\n', '    mapping(address => bool) public feeWhitelist;// if true, goodwill is not deducted\n', '    uint16 affiliateSplit; // % share of goodwill (0-100 %)\n', '    mapping(address => bool) public affiliates; // restrict affiliates\n', '    mapping(address => mapping(address => uint256)) public affiliateBalance; // affiliate => token => amount\n', '    mapping(address => uint256) public totalAffiliateBalance; // token => amount\n', '    address private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    ICurveRegistry public curveReg;\n', '\n', '    address private Aave = 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE;\n', '\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    constructor(\n', '        ICurveRegistry _curveRegistry,\n', '        uint16 _goodwill,\n', '        uint16 _affiliateSplit\n', '    ) public {\n', '        curveReg = _curveRegistry;\n', '        goodwill = _goodwill;\n', '        affiliateSplit = _affiliateSplit;\n', '    }\n', '\n', '    event addLiquidity(address sender, address pool, uint256 crvTokens);\n', '\n', '    function AddLiquidity(\n', '        address _fromTokenAddress,\n', '        address _toTokenAddress,\n', '        address _swapAddress,\n', '        uint256 _incomingTokenQty,\n', '        uint256 _minPoolTokens,\n', '        address _swapTarget,\n', '        bytes calldata _swapCallData,\n', '        address affiliate\n', '    )\n', '        external\n', '        payable\n', '        stopInEmergency\n', '        nonReentrant\n', '        returns (uint256 crvTokensBought)\n', '    {\n', '        uint256 toInvest = _pullTokens(\n', '            _fromTokenAddress,\n', '            _incomingTokenQty,\n', '            affiliate\n', '        );\n', '        if (_fromTokenAddress == address(0)) {\n', '            _fromTokenAddress = ETHAddress;\n', '        }\n', '\n', '        // perform addLiquidity\n', '        crvTokensBought = _performAddLiquidity(\n', '            _fromTokenAddress,\n', '            _toTokenAddress,\n', '            _swapAddress,\n', '            toInvest,\n', '            _swapTarget,\n', '            _swapCallData\n', '        );\n', '\n', '        require(crvTokensBought > _minPoolTokens,"Received less than minPoolTokens");\n', '\n', '        address poolTokenAddress = curveReg.getTokenAddress(_swapAddress);\n', '\n', '        emit addLiquidity(msg.sender, poolTokenAddress, crvTokensBought);\n', '\n', '        // transfer crvTokens to msg.sender\n', '        IERC20(poolTokenAddress).transfer(msg.sender, crvTokensBought);\n', '    }\n', '\n', '    function _performAddLiquidity(\n', '        address _fromTokenAddress,\n', '        address _toTokenAddress,\n', '        address _swapAddress,\n', '        uint256 toInvest,\n', '        address _swapTarget,\n', '        bytes memory _swapCallData\n', '    ) internal returns (uint256 crvTokensBought) {\n', '        (bool isUnderlying, uint8 underlyingIndex) = curveReg.isUnderlyingToken(\n', '            _swapAddress,\n', '            _fromTokenAddress\n', '        );\n', '\n', '        if (isUnderlying) {\n', '            crvTokensBought = _enterCurve(\n', '                _swapAddress,\n', '                toInvest,\n', '                underlyingIndex\n', '            );\n', '        } else {\n', '            //swap tokens using 0x swap\n', '            uint256 tokensBought = _fillQuote(\n', '                _fromTokenAddress,\n', '                _toTokenAddress,\n', '                toInvest,\n', '                _swapTarget,\n', '                _swapCallData\n', '            );\n', '            if (_toTokenAddress == address(0)) _toTokenAddress = ETHAddress;\n', '\n', '            //get underlying token index\n', '            (isUnderlying, underlyingIndex) = curveReg.isUnderlyingToken(\n', '                _swapAddress,\n', '                _toTokenAddress\n', '            );\n', '\n', '            if (isUnderlying) {\n', '                crvTokensBought = _enterCurve(\n', '                    _swapAddress,\n', '                    tokensBought,\n', '                    underlyingIndex\n', '                );\n', '            } else {\n', '                (uint256 tokens, uint8 metaIndex) = _enterMetaPool(\n', '                    _swapAddress,\n', '                    _toTokenAddress,\n', '                    tokensBought\n', '                );\n', '\n', '                crvTokensBought = _enterCurve(_swapAddress, tokens, metaIndex);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _pullTokens(\n', '        address token,\n', '        uint256 amount,\n', '        address affiliate\n', '    ) internal returns (uint256) {\n', '        uint256 totalGoodwillPortion;\n', '\n', '        if (token == address(0)) {\n', '            require(msg.value > 0, "No eth sent");\n', '\n', '            // subtract goodwill\n', '            totalGoodwillPortion = _subtractGoodwill(\n', '                ETHAddress,\n', '                msg.value,\n', '                affiliate\n', '            );\n', '\n', '            return msg.value.sub(totalGoodwillPortion);\n', '        }\n', '        require(amount > 0, "Invalid token amount");\n', '        require(msg.value == 0, "Eth sent with token");\n', '\n', '        //transfer token\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        // subtract goodwill\n', '        totalGoodwillPortion = _subtractGoodwill(token, amount, affiliate);\n', '\n', '        return amount.sub(totalGoodwillPortion);\n', '    }\n', '\n', '    function _subtractGoodwill(\n', '        address token,\n', '        uint256 amount,\n', '        address affiliate\n', '    ) internal returns (uint256 totalGoodwillPortion) {\n', '        bool whitelisted = feeWhitelist[msg.sender];\n', '        if (!whitelisted && goodwill > 0) {\n', '            totalGoodwillPortion = SafeMath.div(SafeMath.mul(amount, goodwill), 10000);\n', '\n', '            if (affiliates[affiliate]) {\n', '                uint256 affiliatePortion = totalGoodwillPortion.mul(affiliateSplit).div(100);\n', '                affiliateBalance[affiliate][token] = affiliateBalance[affiliate][token].add(affiliatePortion);\n', '                totalAffiliateBalance[token] = totalAffiliateBalance[token].add(affiliatePortion);  \n', '            }\n', '        }\n', '    }\n', '\n', '    function _enterMetaPool(\n', '        address _swapAddress,\n', '        address _toTokenAddress,\n', '        uint256 swapTokens\n', '    ) internal returns (uint256 tokensBought, uint8 index) {\n', '        address[4] memory poolTokens = curveReg.getPoolTokens(_swapAddress);\n', '        for (uint8 i = 0; i < 4; i++) {\n', '            address intermediateSwapAddress = curveReg.metaPools(poolTokens[i]);\n', '            if (intermediateSwapAddress != address(0)) {\n', '                (, index) = curveReg.isUnderlyingToken(\n', '                    intermediateSwapAddress,\n', '                    _toTokenAddress\n', '                );\n', '\n', '                tokensBought = _enterCurve(\n', '                    intermediateSwapAddress,\n', '                    swapTokens,\n', '                    index\n', '                );\n', '\n', '                return (tokensBought, i);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _fillQuote(\n', '        address _fromTokenAddress,\n', '        address _toTokenAddress,\n', '        uint256 _amount,\n', '        address _swapTarget,\n', '        bytes memory _swapCallData\n', '    ) internal returns (uint256 amountBought) {\n', '        uint256 valueToSend;\n', '\n', '        if (_fromTokenAddress == _toTokenAddress) {\n', '            return _amount;\n', '        }\n', '\n', '        if (_fromTokenAddress == ETHAddress) {\n', '            valueToSend = _amount;\n', '        } else {\n', '            IERC20 fromToken = IERC20(_fromTokenAddress);\n', '\n', '            require(fromToken.balanceOf(address(this)) >= _amount, "Insufficient Balance" );\n', '\n', '            fromToken.safeApprove(address(_swapTarget), 0);\n', '            fromToken.safeApprove(address(_swapTarget), _amount);\n', '        }\n', '\n', '        uint256 initialBalance = _toTokenAddress == address(0)\n', '            ? address(this).balance\n', '            : IERC20(_toTokenAddress).balanceOf(address(this));\n', '\n', '        (bool success, ) = _swapTarget.call.value(valueToSend)(_swapCallData);\n', '        require(success, "Error Swapping Tokens");\n', '\n', '        amountBought = _toTokenAddress == address(0)\n', '            ? (address(this).balance).sub(initialBalance)\n', '            : IERC20(_toTokenAddress).balanceOf(address(this)).sub(initialBalance);\n', '                \n', '\n', '        require(amountBought > 0, "Swapped To Invalid Intermediate");\n', '    }\n', '\n', '    function _enterCurve(address _swapAddress, uint256 amount, uint8 index) internal returns (uint256 crvTokensBought) {\n', '        address tokenAddress = curveReg.getTokenAddress(_swapAddress);\n', '        uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(this));\n', '        address entryToken = curveReg.getPoolTokens(_swapAddress)[index];\n', '\n', '        if (entryToken != ETHAddress) {\n', '            IERC20(entryToken).safeIncreaseAllowance(address(_swapAddress), amount);\n', '        }\n', '\n', '        uint256 numTokens = curveReg.getNumTokens(_swapAddress);\n', '\n', '        if (numTokens == 4) {\n', '            uint256[4] memory amounts;\n', '            amounts[index] = amount;\n', '            ICurveSwap(_swapAddress).add_liquidity(amounts, 0);\n', '        } else if (numTokens == 3) {\n', '            uint256[3] memory amounts;\n', '            amounts[index] = amount;\n', '            if (_swapAddress == Aave) {\n', '                ICurveSwap(_swapAddress).add_liquidity(amounts, 0, true);\n', '            } else {\n', '                ICurveSwap(_swapAddress).add_liquidity(amounts, 0);\n', '            }\n', '        } else {\n', '            uint256[2] memory amounts;\n', '            amounts[index] = amount;\n', '            if (isETHUnderlying(_swapAddress)) {\n', '                ICurveEthSwap(_swapAddress).add_liquidity.value(amount)(amounts,0 );\n', '            } else {\n', '                ICurveSwap(_swapAddress).add_liquidity(amounts, 0);\n', '            }\n', '        }\n', '        crvTokensBought = (IERC20(tokenAddress).balanceOf(address(this))).sub(initialBalance);\n', '    }\n', '\n', '    function isETHUnderlying(address _swapAddress) internal view returns (bool){\n', '        address[4] memory poolTokens = curveReg.getPoolTokens(_swapAddress);\n', '        for (uint8 i = 0; i < 4; i++) {\n', '            if (poolTokens[i] == ETHAddress) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function updateAaveAddress(address _newAddress) external onlyOwner {\n', '        require(_newAddress != address(0), "Zero Address");\n', '        Aave = _newAddress;\n', '    }\n', '\n', '    function set_new_goodwill(uint16 _new_goodwill) external onlyOwner {\n', '        require(\n', '            _new_goodwill >= 0 && _new_goodwill < 100,\n', '            "GoodWill Value not allowed"\n', '        );\n', '        goodwill = _new_goodwill;\n', '    }\n', '\n', '    function set_feeWhitelist(address _address, bool status) external onlyOwner{\n', '        feeWhitelist[_address] = status;\n', '    }\n', '\n', '    function updateCurveRegistry(ICurveRegistry newCurveRegistry) external onlyOwner {\n', '        require(newCurveRegistry != curveReg, "Already using this Registry");\n', '        curveReg = newCurveRegistry;\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() external onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    function set_new_affiliateSplit(uint16 _new_affiliateSplit) external onlyOwner {\n', '        require(_new_affiliateSplit <= 100, "Affiliate Split Value not allowed");\n', '        affiliateSplit = _new_affiliateSplit;\n', '    }\n', '\n', '    function set_affiliate(address _affiliate, bool _status) external onlyOwner{\n', '        affiliates[_affiliate] = _status;\n', '    }\n', '\n', '    ///@notice Withdraw goodwill share, retaining affilliate share\n', '    function ownerWithdraw(address[] calldata tokens) external onlyOwner {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 qty;\n', '\n', '            if (tokens[i] == ETHAddress) {\n', '                qty = address(this).balance.sub(totalAffiliateBalance[tokens[i]]);\n', '                Address.sendValue(Address.toPayable(owner()), qty);\n', '            } else {\n', '                qty = IERC20(tokens[i]).balanceOf(address(this)).sub(totalAffiliateBalance[tokens[i]]);\n', '                IERC20(tokens[i]).safeTransfer(owner(), qty);\n', '            }\n', '        }\n', '    }\n', '\n', '    ///@notice Withdraw affilliate share, retaining goodwill share\n', '    function affilliateWithdraw(address[] calldata tokens) external {\n', '        uint256 tokenBal;\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            tokenBal = affiliateBalance[msg.sender][tokens[i]];\n', '            affiliateBalance[msg.sender][tokens[i]] = 0;\n', '            totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]].sub(tokenBal);\n', '                \n', '            if (tokens[i] == ETHAddress) {\n', '                Address.sendValue(msg.sender, tokenBal);\n', '            } else {\n', '                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\n', '            }\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != tx.origin, "Do not send ETH directly");\n', '    }\n', '}']