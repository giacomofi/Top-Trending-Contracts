['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: original_contracts/IWETH.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', 'abstract contract IWETH is IERC20 {\n', '    function deposit() external virtual payable;\n', '    function withdraw(uint256 amount) external virtual;\n', '}\n', '\n', '// File: original_contracts/lib/zeroxv2/LibOrderV2.sol\n', '\n', '/* solium-disable */\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '//Taken from 0x exchange\n', 'library LibOrderV2{\n', '\n', '\n', '    struct Order {\n', '        address makerAddress;           // Address that created the order.\n', '        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n', '        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n', '        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n', '        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n', '        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n', '        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n', '        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n', '        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n', "        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n", '        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n', '        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n', '    }\n', '\n', '    struct FillResults {\n', '        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n', '        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n', '        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n', '        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/zeroxv2/IZeroxV2.sol\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'interface IZeroxV2 {\n', '\n', '    function marketSellOrdersNoThrow(\n', '        LibOrderV2.Order[] calldata orders,\n', '        uint256 takerAssetFillAmount,\n', '        bytes[] calldata signatures\n', '    )\n', '        external\n', '        returns(LibOrderV2.FillResults memory);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: original_contracts/ITokenTransferProxy.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', 'interface ITokenTransferProxy {\n', '\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external;\n', '\n', '    function freeGSTTokens(uint256 tokensToFree) external;\n', '}\n', '\n', '// File: original_contracts/lib/Utils.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library Utils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address constant ETH_ADDRESS = address(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '\n', '    uint256 constant MAX_UINT = 2 ** 256 - 1;\n', '\n', '    struct Route {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint percent;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    struct Path {\n', '        address to;\n', '        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\n', '        Route[] routes;\n', '    }\n', '\n', '    struct BuyRoute {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\n', '\n', '    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\n', '\n', '    function approve(\n', '        address addressToApprove,\n', '        address token,\n', '        uint256 amount\n', '    ) internal {\n', '        if (token != ETH_ADDRESS) {\n', '            IERC20 _token = IERC20(token);\n', '\n', '            uint allowance = _token.allowance(address(this), addressToApprove);\n', '\n', '            if (allowance < amount) {\n', '                _token.safeApprove(addressToApprove, 0);\n', '                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferTokens(\n', '        address token,\n', '        address payable destination,\n', '        uint256 amount\n', '    )\n', '    internal\n', '    {\n', '        if (amount > 0) {\n', '            if (token == ETH_ADDRESS) {\n', '                destination.transfer(amount);\n', '            }\n', '            else {\n', '                IERC20(token).safeTransfer(destination, amount);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    function tokenBalance(\n', '        address token,\n', '        address account\n', '    )\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '        if (token == ETH_ADDRESS) {\n', '            return account.balance;\n', '        } else {\n', '            return IERC20(token).balanceOf(account);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to refund gas using gas tokens\n', '    */\n', '    function refundGas(\n', '        address tokenProxy,\n', '        uint256 initialGas,\n', '        uint256 mintPrice\n', '    )\n', '        internal\n', '    {\n', '\n', '        uint256 mintBase = 32254;\n', '        uint256 mintToken = 36543;\n', '        uint256 freeBase = 14154;\n', '        uint256 freeToken = 6870;\n', '        uint256 reimburse = 24000;\n', '\n', '        uint256 tokens = initialGas.sub(\n', '            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\n', '        );\n', '\n', '        uint256 mintCost = mintBase.add(tokens.mul(mintToken));\n', '        uint256 freeCost = freeBase.add(tokens.mul(freeToken));\n', '        uint256 maxreimburse = tokens.mul(reimburse);\n', '\n', '        uint256 efficiency = maxreimburse.mul(tx.gasprice).mul(100).div(\n', '            mintCost.mul(mintPrice).add(freeCost.mul(tx.gasprice))\n', '        );\n', '\n', '        if (efficiency > 100) {\n', '            freeGasTokens(tokenProxy, tokens);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to free gas tokens\n', '    */\n', '    function freeGasTokens(address tokenProxy, uint256 tokens) internal {\n', '\n', '        uint256 tokensToFree = tokens;\n', '        uint256 safeNumTokens = 0;\n', '        uint256 gas = gasleft();\n', '\n', '        if (gas >= 27710) {\n', '            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\n', '        }\n', '\n', '        if (tokensToFree > safeNumTokens) {\n', '            tokensToFree = safeNumTokens;\n', '        }\n', '\n', '        ITokenTransferProxy(tokenProxy).freeGSTTokens(tokensToFree);\n', '\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/IExchange.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '/**\n', '* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\n', '*/\n', 'interface IExchange {\n', '\n', '    /**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable returns (uint256);\n', '\n', '/**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Max Amount of source tokens to be swapped\n', '   * @param toAmount Destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '    function buy(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/TokenFetcher.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', 'contract TokenFetcher is Ownable {\n', '\n', '    /**\n', '    * @dev Allows owner of the contract to transfer any tokens which are assigned to the contract\n', '    * This method is for safety if by any chance tokens or ETHs are assigned to the contract by mistake\n', '    * @dev token Address of the token to be transferred\n', '    * @dev destination Recepient of the token\n', '    * @dev amount Amount of tokens to be transferred\n', '    */\n', '    function transferTokens(\n', '        address token,\n', '        address payable destination,\n', '        uint256 amount\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        Utils.transferTokens(token, destination, amount);\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/libraries/LibBytesRichErrors.sol\n', '\n', '/*\n', '  Copyright 2019 ZeroEx Intl.\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', 'library LibBytesRichErrors {\n', '\n', '    enum InvalidByteOperationErrorCodes {\n', '        FromLessThanOrEqualsToRequired,\n', '        ToLessThanOrEqualsLengthRequired,\n', '        LengthGreaterThanZeroRequired,\n', '        LengthGreaterThanOrEqualsFourRequired,\n', '        LengthGreaterThanOrEqualsTwentyRequired,\n', '        LengthGreaterThanOrEqualsThirtyTwoRequired,\n', '        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n', '        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n', '    }\n', '\n', '    // bytes4(keccak256("InvalidByteOperationError(uint8,uint256,uint256)"))\n', '    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n', '        0x28006595;\n', '\n', '    // solhint-disable func-name-mixedcase\n', '    function InvalidByteOperationError(\n', '        InvalidByteOperationErrorCodes errorCode,\n', '        uint256 offset,\n', '        uint256 required\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory)\n', '    {\n', '        return abi.encodeWithSelector(\n', '            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n', '            errorCode,\n', '            offset,\n', '            required\n', '        );\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/libraries/LibRichErrors.sol\n', '\n', '/*\n', '  Copyright 2019 ZeroEx Intl.\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', 'library LibRichErrors {\n', '\n', '    // bytes4(keccak256("Error(string)"))\n', '    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n', '\n', '    // solhint-disable func-name-mixedcase\n', '    /// @dev ABI encode a standard, string revert error payload.\n', '    ///      This is the same payload that would be included by a `revert(string)`\n', '    ///      solidity statement. It has the function signature `Error(string)`.\n', '    /// @param message The error string.\n', '    /// @return The ABI encoded error.\n', '    function StandardError(\n', '        string memory message\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory)\n', '    {\n', '        return abi.encodeWithSelector(\n', '            STANDARD_ERROR_SELECTOR,\n', '            bytes(message)\n', '        );\n', '    }\n', '    // solhint-enable func-name-mixedcase\n', '\n', '    /// @dev Reverts an encoded rich revert reason `errorData`.\n', '    /// @param errorData ABI encoded error data.\n', '    function rrevert(bytes memory errorData)\n', '        internal\n', '        pure\n', '    {\n', '        assembly {\n', '            revert(add(errorData, 0x20), mload(errorData))\n', '        }\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/libraries/LibBytes.sol\n', '\n', '/*\n', '  Copyright 2019 ZeroEx Intl.\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', 'library LibBytes {\n', '\n', '    using LibBytes for bytes;\n', '\n', '    /// @dev Reads an address from a position in a byte array.\n', '    /// @param b Byte array containing an address.\n', '    /// @param index Index in byte array of address.\n', '    /// @return result address from byte array.\n', '    function readAddress(\n', '        bytes memory b,\n', '        uint256 index\n', '    )\n', '        internal\n', '        pure\n', '        returns (address result)\n', '    {\n', '        if (b.length < index + 20) {\n', '            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n', '                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n', '                b.length,\n', '                index + 20 // 20 is length of address\n', '            ));\n', '        }\n', '\n', '        // Add offset to index:\n', '        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n', '        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n', '        index += 20;\n', '\n', '        // Read address from array memory\n', '        assembly {\n', '            // 1. Add index to address of bytes array\n', '            // 2. Load 32-byte word from memory\n', '            // 3. Apply 20-byte mask to obtain address\n', '            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n', '        }\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '// File: original_contracts/lib/zeroxv2/ZeroxV2.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ZeroxV2 is IExchange, TokenFetcher {\n', '    using Address for address;\n', '    using LibBytes for bytes;\n', '\n', '    address public weth;\n', '    address public erc20Proxy;\n', '    mapping(address=>bool) public makerWhitelist;\n', '\n', '    struct ZeroxData {\n', '        LibOrderV2.Order[] orders;\n', '        bytes[] signatures;\n', '    }\n', '\n', '    constructor(\n', '        address _weth,\n', '        address _erc20Proxy,\n', '        address[] memory makers\n', '    )\n', '        public\n', '    {\n', '        weth = _weth;\n', '        erc20Proxy = _erc20Proxy;\n', '\n', '        for (uint256 i = 0; i < makers.length; i++) {\n', '            makerWhitelist[makers[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback method to allow exchanges to transfer back ethers for a particular swap\n', '    */\n', '    receive() external payable {\n', '    }\n', '\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        returns (uint256)\n', '    {\n', '\n', '        return _swap(\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            toAmount,\n', '            exchange,\n', '            payload\n', '        );\n', '    }\n', '\n', '    function buy(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        returns (uint256)\n', '    {\n', '\n', '        return _swap(\n', '            fromToken,\n', '            toToken,\n', '            fromAmount,\n', '            toAmount,\n', '            exchange,\n', '            payload\n', '        );\n', '    }\n', '\n', '    function _swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes memory payload) private returns (uint256) {\n', '\n', '        ZeroxData memory data = abi.decode(payload, (ZeroxData));\n', '\n', '        address _fromToken = address(fromToken);\n', '        address _toToken = address(toToken);\n', '\n', '        if (address(fromToken) == Utils.ethAddress()) {\n', '            IWETH(weth).deposit{value: fromAmount}();\n', '            _fromToken = weth;\n', '        }\n', '\n', '        else if (address(toToken) == Utils.ethAddress()) {\n', '            _toToken = weth;\n', '        }\n', '\n', '        for (uint256 i = 0; i < data.orders.length; i++) {\n', '            address srcToken = data.orders[i].takerAssetData.readAddress(16);\n', '            require(srcToken == address(_fromToken), "Invalid from token!!");\n', '\n', '            address destToken = data.orders[i].makerAssetData.readAddress(16);\n', '            require(destToken == address(_toToken), "Invalid to token!!");\n', '\n', '            require(\n', '                makerWhitelist[data.orders[i].makerAddress],\n', '                "Invalid maker"\n', '            );\n', '        }\n', '\n', '        Utils.approve(erc20Proxy, address(_fromToken), fromAmount);\n', '\n', '        IZeroxV2(exchange).marketSellOrdersNoThrow(\n', '            data.orders,\n', '            fromAmount,\n', '            data.signatures\n', '        );\n', '\n', '        if (address(toToken) == Utils.ethAddress()) {\n', '            uint256 wethReceived = Utils.tokenBalance(address(weth), address(this));\n', '            IWETH(weth).withdraw(wethReceived);\n', '        }\n', '\n', '        uint256 receivedAmount = Utils.tokenBalance(address(toToken), address(this));\n', '\n', '        Utils.transferTokens(address(toToken), msg.sender, receivedAmount);\n', '\n', '        return receivedAmount;\n', '    }\n', '}']