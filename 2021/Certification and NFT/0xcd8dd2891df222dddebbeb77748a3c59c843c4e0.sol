['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', 'pragma solidity ^0.6.11;\n', '/*\n', 'A gauge to allow users to commit to Stacker.vc fund 1. This will reward STACK tokens for hard and soft commits, as well as link with a ibETH gateway, to allow users\n', 'to deposit ETH directly into the fund.\n', '\n', 'ibETH is sent to the STACK DAO governance contract, for future VC fund initialization.\n', '*/\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'contract GaugeD1 is ReentrancyGuard {\n', '\tusing SafeERC20 for IERC20;\n', '\tusing Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address payable public governance = 0xB156d2D9CAdB12a252A9015078fc5cb7E92e656e; // STACK DAO Agent address\n', '    address public constant acceptToken = 0xeEa3311250FE4c3268F8E684f7C87A82fF183Ec1; // AlphaHomora ibETHv2\n', '    address public vaultGaugeBridge; // the bridge address to allow people one transaction to do: (token <-> alphaHomora <-> commit)\n', '\n', '    address public constant STACK = 0xe0955F26515d22E347B17669993FCeFcc73c3a0a; // STACK DAO Token\n', '\n', '    uint256 public emissionRate = 127797160347097087; // 50k STACK total, div by delta block\n', '\n', '    uint256 public depositedCommitSoft;\n', '    uint256 public depositedCommitHard;\n', '\n', '    uint256 public constant commitSoftWeight = 1;\n', '    uint256 public constant commitHardWeight = 4;\n', '\n', '    struct CommitState {\n', '    \tuint256 balanceCommitSoft;\n', '    \tuint256 balanceCommitHard;\n', '    \tuint256 tokensAccrued;\n', '    }\n', '\n', '    mapping(address => CommitState) public balances; // balance of acceptToken by user by commit\n', '\n', '    event Deposit(address indexed from, uint256 amountCommitSoft, uint256 amountCommitHard);\n', '    event Withdraw(address indexed to, uint256 amount);\n', '    event Upgrade(address indexed user, uint256 amount);\n', '    event STACKClaimed(address indexed to, uint256 amount);\n', '\n', '    bool public fundOpen = true;\n', '\n', '    uint256 public constant startBlock = 11955015;\n', '    uint256 public endBlock = startBlock + 391245;\n', '\n', '    uint256 public lastBlock; // last block the distribution has ran\n', '    uint256 public tokensAccrued; // tokens to distribute per weight scaled by 1e18\n', '\n', '    constructor(address _vaultGaugeBridge) public {\n', '    \tvaultGaugeBridge = _vaultGaugeBridge;\n', '    }\n', '\n', '    function setGovernance(address payable _new) external {\n', '    \trequire(msg.sender == governance, "GAUGE: !governance");\n', '    \tgovernance = _new;\n', '    }\n', '\n', '    function setEmissionRate(uint256 _new) external {\n', '    \trequire(msg.sender == governance, "GAUGE: !governance");\n', '    \t_kick(); // catch up the contract to the current block for old rate\n', '    \temissionRate = _new;\n', '    }\n', '\n', '    function setEndBlock(uint256 _block) external {\n', '    \trequire(msg.sender == governance, "GAUGE: !governance");\n', '    \trequire(block.number <= endBlock, "GAUGE: distribution already done, must start another");\n', '        require(block.number <= _block, "GAUGE: can\'t set endBlock to past block");\n', '\n', '    \tendBlock = _block;\n', '    }\n', '\n', '    function setFundOpen(bool _open) external {\n', '        require(msg.sender == governance, "GAUGE: !governance");\n', '        fundOpen = _open;\n', '    }\n', '\n', '    function deposit(uint256 _amountCommitSoft, uint256 _amountCommitHard, address _creditTo) nonReentrant external {\n', '    \trequire(block.number <= endBlock, "GAUGE: distribution 1 over");\n', '    \trequire(fundOpen || _amountCommitHard == 0, "GAUGE: !fundOpen, only soft commit allowed"); // when the fund closes, soft commits are still accepted\n', '    \trequire(msg.sender == _creditTo || msg.sender == vaultGaugeBridge, "GAUGE: !bridge for creditTo"); // only the bridge contract can use the "creditTo" to credit !msg.sender\n', '\n', "    \t_claimSTACK(_creditTo); // new deposit doesn't get tokens right away\n", '\n', '    \t// transfer tokens from sender to account\n', '    \tuint256 _acceptTokenAmount = _amountCommitSoft.add(_amountCommitHard);\n', '    \trequire(_acceptTokenAmount > 0, "GAUGE: !tokens");\n', '    \tIERC20(acceptToken).safeTransferFrom(msg.sender, address(this), _acceptTokenAmount);\n', '\n', '    \tCommitState memory _state = balances[_creditTo];\n', "    \t// no need to update _state.tokensAccrued because that's already done in _claimSTACK\n", '    \tif (_amountCommitSoft > 0){\n', '    \t\t_state.balanceCommitSoft = _state.balanceCommitSoft.add(_amountCommitSoft);\n', '\t\t\tdepositedCommitSoft = depositedCommitSoft.add(_amountCommitSoft);\n', '    \t}\n', '    \tif (_amountCommitHard > 0){\n', '    \t\t_state.balanceCommitHard = _state.balanceCommitHard.add(_amountCommitHard);\n', '\t\t\tdepositedCommitHard = depositedCommitHard.add(_amountCommitHard);\n', '\n', '            IERC20(acceptToken).safeTransfer(governance, _amountCommitHard); // transfer out any hard commits right away\n', '    \t}\n', '\n', '\t\temit Deposit(_creditTo, _amountCommitSoft, _amountCommitHard);\n', '\t\tbalances[_creditTo] = _state;\n', '    }\n', '\n', '    function upgradeCommit(uint256 _amount) nonReentrant external {\n', '    \t// upgrading from soft -> hard commit\n', '    \trequire(block.number <= endBlock, "GAUGE: distribution 1 over");\n', '    \trequire(fundOpen, "GAUGE: !fundOpen"); // soft commits cannot be upgraded after the fund closes. they can be deposited though\n', '\n', '    \t_claimSTACK(msg.sender);\n', '\n', '    \tCommitState memory _state = balances[msg.sender];\n', '\n', '        require(_amount <= _state.balanceCommitSoft, "GAUGE: insufficient balance softCommit");\n', '        _state.balanceCommitSoft = _state.balanceCommitSoft.sub(_amount);\n', '        _state.balanceCommitHard = _state.balanceCommitHard.add(_amount);\n', '        depositedCommitSoft = depositedCommitSoft.sub(_amount);\n', '        depositedCommitHard = depositedCommitHard.add(_amount);\n', '\n', '        IERC20(acceptToken).safeTransfer(governance, _amount);\n', '\n', '    \temit Upgrade(msg.sender, _amount);\n', '    \tbalances[msg.sender] = _state;\n', '    }\n', '\n', "    // withdraw funds that haven't been committed to VC fund (fund in commitSoft before deadline)\n", '    function withdraw(uint256 _amount, address _withdrawFor) nonReentrant external {\n', '        require(block.number <= endBlock, ">endblock");\n', '        require(msg.sender == _withdrawFor || msg.sender == vaultGaugeBridge, "GAUGE: !bridge for withdrawFor"); // only the bridge contract can use the "withdrawFor" to withdraw for !msg.sender \n', '\n', '    \t_claimSTACK(_withdrawFor); // claim tokens from all blocks including this block on withdraw\n', '\n', '    \tCommitState memory _state = balances[_withdrawFor];\n', '\n', '    \trequire(_amount <= _state.balanceCommitSoft, "GAUGE: insufficient balance softCommit");\n', '\n', '    \t// update globals & add amtToWithdraw to final tally.\n', '    \t_state.balanceCommitSoft = _state.balanceCommitSoft.sub(_amount);\n', '    \tdepositedCommitSoft = depositedCommitSoft.sub(_amount);\n', '    \t\n', '    \temit Withdraw(_withdrawFor, _amount);\n', '    \tbalances[_withdrawFor] = _state;\n', '\n', '    \t// IMPORTANT: send tokens to msg.sender, not _withdrawFor. This will send to msg.sender OR vaultGaugeBridge (see second require() ).\n', '        // the bridge contract will then forward these tokens to the sender (after withdrawing from yield farm)\n', '    \tIERC20(acceptToken).safeTransfer(msg.sender, _amount);\n', '    }\n', '\n', '    function claimSTACK() nonReentrant external returns (uint256) {\n', '    \treturn _claimSTACK(msg.sender);\n', '    }\n', '\n', '    function _claimSTACK(address _user) internal returns (uint256){\n', '    \t_kick();\n', '\n', '    \tCommitState memory _state = balances[_user];\n', "    \tif (_state.tokensAccrued == tokensAccrued){ // user doesn't have any accrued tokens\n", '    \t\treturn 0;\n', '    \t}\n', '    \t// user has accrued tokens from their commit\n', '    \telse {\n', '    \t\tuint256 _tokensAccruedDiff = tokensAccrued.sub(_state.tokensAccrued);\n', '    \t\tuint256 _tokensGive = _tokensAccruedDiff.mul(getUserWeight(_user)).div(1e18);\n', '\n', '    \t\t_state.tokensAccrued = tokensAccrued;\n', '    \t\tbalances[_user] = _state;\n', '\n', '    \t\t// if the guage has enough tokens to grant the user, then send their tokens\n', "            // otherwise, don't fail, just log STACK claimed, and a reimbursement can be done via chain events\n", '            if (IERC20(STACK).balanceOf(address(this)) >= _tokensGive){\n', '                IERC20(STACK).safeTransfer(_user, _tokensGive);\n', '            }\n', '\n', '            emit STACKClaimed(_user, _tokensGive);\n', '\n', '            return _tokensGive;\n', '    \t}\n', '    }\n', '\n', '    function _kick() internal {   \t\n', '    \tuint256 _totalWeight = getTotalWeight();\n', "    \t// if there are no tokens committed, then don't kick.\n", '    \tif (_totalWeight == 0){ \n', '    \t\treturn;\n', '    \t}\n', '    \t// already done for this block || already did all blocks || not started yet\n', '    \tif (lastBlock == block.number || lastBlock >= endBlock || block.number < startBlock){ \n', '    \t\treturn; \n', '    \t}\n', '\n', '\t\tuint256 _deltaBlock;\n', '\t\t// edge case where kick was not called for the entire period of blocks.\n', '\t\tif (lastBlock <= startBlock && block.number >= endBlock){\n', '\t\t\t_deltaBlock = endBlock.sub(startBlock);\n', '\t\t}\n', '\t\t// where block.number is past the endBlock\n', '\t\telse if (block.number >= endBlock){\n', '\t\t\t_deltaBlock = endBlock.sub(lastBlock);\n', '\t\t}\n', '\t\t// where last block is before start\n', '\t\telse if (lastBlock <= startBlock){\n', '\t\t\t_deltaBlock = block.number.sub(startBlock);\n', '\t\t}\n', '\t\t// normal case, where we are in the middle of the distribution\n', '\t\telse {\n', '\t\t\t_deltaBlock = block.number.sub(lastBlock);\n', '\t\t}\n', '\n', '\t\t// mint tokens & update tokensAccrued global\n', '\t\tuint256 _tokensToAccrue = _deltaBlock.mul(emissionRate);\n', '\t\ttokensAccrued = tokensAccrued.add(_tokensToAccrue.mul(1e18).div(_totalWeight));\n', '\n', "    \t// if not allowed to mint it's just like the emission rate = 0. So just update the lastBlock.\n", '    \t// always update last block \n', '    \tlastBlock = block.number;\n', '    }\n', '\n', '    // a one-time use function to sweep any commitSoft to the vc fund rewards pool, after the 3 month window\n', '    function sweepCommitSoft() nonReentrant public {\n', '    \trequire(block.number > endBlock, "GAUGE: <=endBlock");\n', '\n', '        // transfer all remaining ERC20 tokens to the VC address. Fund entry has closed, VC fund will start.\n', '    \tIERC20(acceptToken).safeTransfer(governance, IERC20(acceptToken).balanceOf(address(this)));\n', '    }\n', '\n', '    function getTotalWeight() public view returns (uint256){\n', '    \tuint256 soft = depositedCommitSoft.mul(commitSoftWeight);\n', '    \tuint256 hard = depositedCommitHard.mul(commitHardWeight);\n', '\n', '    \treturn soft.add(hard);\n', '    }\n', '\n', '    function getTotalBalance() public view returns(uint256){\n', '    \treturn depositedCommitSoft.add(depositedCommitHard);\n', '    }\n', '\n', '    function getUserWeight(address _user) public view returns (uint256){\n', '    \tuint256 soft = balances[_user].balanceCommitSoft.mul(commitSoftWeight);\n', '    \tuint256 hard = balances[_user].balanceCommitHard.mul(commitHardWeight);\n', '\n', '    \treturn soft.add(hard);\n', '    }\n', '\n', '    function getUserBalance(address _user) public view returns (uint256){\n', '    \tuint256 soft = balances[_user].balanceCommitSoft;\n', '    \tuint256 hard = balances[_user].balanceCommitHard;\n', '\n', '    \treturn soft.add(hard);\n', '    }\n', '\n', '    function getCommitted() public view returns (uint256, uint256, uint256){\n', '        return (depositedCommitSoft, depositedCommitHard, getTotalBalance());\n', '    }\n', '\n', '    // decentralized rescue function for any stuck tokens, will return to governance\n', '    function rescue(address _token, uint256 _amount) nonReentrant external {\n', '        require(msg.sender == governance, "GAUGE: !governance");\n', '\n', '        if (_token != address(0)){\n', '            IERC20(_token).safeTransfer(governance, _amount);\n', '        }\n', '        else { // if _tokenContract is 0x0, then escape ETH\n', '            governance.transfer(_amount);\n', '        }\n', '    }\n', '}']