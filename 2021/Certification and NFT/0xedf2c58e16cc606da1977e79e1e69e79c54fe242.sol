['# @version 0.2.11\n', '"""\n', '@title ProxyAdmin\n', '@notice Thin proxy allowing shared ownership of contracts\n', '@author Ben Hauser\n', '@license MIT\n', '"""\n', '\n', '\n', 'event TransactionExecuted:\n', '    admin: indexed(address)\n', '    target: indexed(address)\n', '    calldata: Bytes[100000]\n', '    value: uint256\n', '\n', 'event RequestAdminChange:\n', '    current_admin: address\n', '    future_admin: address\n', '\n', 'event RevokeAdminChange:\n', '    current_admin: address\n', '    future_admin: address\n', '    calling_admin: address\n', '\n', 'event ApproveAdminChange:\n', '    current_admin: address\n', '    future_admin: address\n', '    calling_admin: address\n', '\n', 'event AcceptAdminChange:\n', '    previous_admin: address\n', '    current_admin: address\n', '\n', '\n', 'admins: public(address[2])\n', '\n', 'pending_current_admin: uint256\n', 'pending_new_admin: address\n', 'change_approved: bool\n', '\n', '\n', '@external\n', 'def __init__(_authorized: address[2]):\n', '    """\n', '    @notice Contract constructor\n', '    @param _authorized Admin accounts for this contract\n', '    """\n', '    self.admins = _authorized\n', '\n', '\n', '@payable\n', '@external\n', 'def execute(_target: address, _calldata: Bytes[100000]):\n', '    """\n', '    @notice Execute a contract call\n', '    @dev Ether sent when calling this function is forwarded onward\n', '    @param _target Address of the contract to call\n', '    @param _calldata Calldata to use in the call\n', '    """\n', '    assert msg.sender in self.admins  # dev: only admin\n', '\n', '    raw_call(_target, _calldata, value=msg.value)\n', '    log TransactionExecuted(msg.sender, _target, _calldata, msg.value)\n', '\n', '\n', '@view\n', '@external\n', 'def get_admin_change_status() -> (address, address, bool):\n', '    """\n', '    @notice Get information about a pending admin change\n', '    @return Admin address to be replaced,\n', '            admin address to be added,\n', '            has change been approved?\n', '    """\n', '    idx: uint256 = self.pending_current_admin\n', '    if idx == 0:\n', '        return ZERO_ADDRESS, ZERO_ADDRESS, False\n', '    else:\n', '        return self.admins[idx - 1], self.pending_new_admin, self.change_approved\n', '\n', '\n', '@external\n', 'def request_admin_change(_new_admin: address):\n', '    """\n', '    @notice Initiate changing an admin address\n', '    @param _new_admin New admin address (replaces msg.sender)\n', '    """\n', '    assert self.pending_current_admin == 0  # dev: already an active request\n', '\n', '    admin_list: address[2] = self.admins\n', '    assert _new_admin not in admin_list  # dev: new admin is already admin\n', '\n', '    for i in range(2):\n', '        if admin_list[i] == msg.sender:\n', '            self.pending_current_admin = i + 1\n', '            self.pending_new_admin = _new_admin\n', '            log RequestAdminChange(msg.sender, _new_admin)\n', '            return\n', '\n', '    raise  # dev: only admin\n', '\n', '\n', '@external\n', 'def approve_admin_change():\n', '    """\n', '    @notice Approve changing an admin address\n', '    @dev Only callable by the 2nd admin address (the one that will not change)\n', '    """\n', '    idx: uint256 = self.pending_current_admin\n', '\n', '    assert idx > 0  # dev: no active request\n', '    assert msg.sender == self.admins[idx % 2]  # dev: caller is not 2nd admin\n', '\n', '    self.change_approved = True\n', '    log ApproveAdminChange(self.admins[idx - 1], self.pending_new_admin, msg.sender)\n', '\n', '\n', '@external\n', 'def revoke_admin_change():\n', '    """\n', '    @notice Revoke changing an admin address\n', '    @dev May be called by either admin at any time to reset the process,\n', '         even if approval has previous been given\n', '    """\n', '    assert msg.sender in self.admins  # dev: only admin\n', '\n', '    idx: uint256 = self.pending_current_admin\n', '    pending_admin: address = ZERO_ADDRESS\n', '    if idx > 0:\n', '        pending_admin = self.admins[idx - 1]\n', '\n', '    log RevokeAdminChange(pending_admin, self.pending_new_admin, msg.sender)\n', '\n', '    self.pending_current_admin = 0\n', '    self.pending_new_admin = ZERO_ADDRESS\n', '    self.change_approved = False\n', '\n', '\n', '\n', '@external\n', 'def accept_admin_change():\n', '    """\n', '    @notice Accept a changed admin address\n', '    @dev Only callable by the new admin address, after approval has been given\n', '    """\n', '    assert self.change_approved == True  # dev: change not approved\n', '    assert msg.sender == self.pending_new_admin  # dev: only new admin\n', '\n', '    idx: uint256 = self.pending_current_admin - 1\n', '    log AcceptAdminChange(self.admins[idx], msg.sender)\n', '    self.admins[idx] = msg.sender\n', '\n', '    self.pending_current_admin = 0\n', '    self.pending_new_admin = ZERO_ADDRESS\n', '    self.change_approved = False']