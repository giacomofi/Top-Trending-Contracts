['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-05\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: original_contracts/lib/IExchange.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/**\n', '* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\n', '*/\n', 'interface IExchange {\n', '\n', '    /**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '   //TODO: REMOVE RETURN STATEMENT\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable;\n', '\n', '  /**\n', '   * @dev The function which performs the swap on an exchange.\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Max Amount of source tokens to be swapped\n', '   * @param toAmount Destination token amount expected out of this swap\n', '   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n', '   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n', "   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n", '   */\n', '    function buy(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount,\n', '        address exchange,\n', '        bytes calldata payload) external payable;\n', '\n', '    /**\n', '   * @dev This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information\n', '   * encoded in payload param of swap will calculated in this case\n', '   * Exchange needs to implement this method in order to support swapping of tokens through it\n', '   * @param fromToken Address of the source token\n', '   * @param toToken Address of the destination token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   */\n', '    function onChainSwap(\n', '        IERC20 fromToken,\n', '        IERC20 toToken,\n', '        uint256 fromAmount,\n', '        uint256 toAmount\n', '    ) external payable returns (uint256);\n', '\n', '    /**\n', '    * @dev Certain adapters/exchanges needs to be initialized.\n', '    * This method will be called from Augustus\n', '    */\n', '    function initialize(bytes calldata data) external;\n', '\n', '    /**\n', '    * @dev Returns unique identifier for the adapter\n', '    */\n', '    function getKey() external pure returns(bytes32);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/SafeERC20.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: original_contracts/ITokenTransferProxy.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface ITokenTransferProxy {\n', '\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external;\n', '\n', '    function freeReduxTokens(address user, uint256 tokensToFree) external;\n', '}\n', '\n', '// File: original_contracts/lib/Utils.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library Utils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address constant ETH_ADDRESS = address(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '\n', '    address constant WETH_ADDRESS = address(\n', '        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    );\n', '\n', '    uint256 constant MAX_UINT = 2 ** 256 - 1;\n', '\n', '    /**\n', '   * @param fromToken Address of the source token\n', '   * @param fromAmount Amount of source tokens to be swapped\n', '   * @param toAmount Minimum destination token amount expected out of this swap\n', '   * @param expectedAmount Expected amount of destination tokens without slippage\n', '   * @param beneficiary Beneficiary address\n', '   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\n', '   * @param referrer referral id\n', '   * @param useReduxToken whether to use redux token or not\n', '   * @param path Route to be taken for this swap to take place\n', '\n', '   */\n', '    struct SellData {\n', '        address fromToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        uint256 expectedAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.Path[] path;\n', '\n', '    }\n', '\n', '    struct MegaSwapSellData {\n', '        address fromToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        uint256 expectedAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.MegaSwapPath[] path;\n', '    }\n', '\n', '    struct BuyData {\n', '        address fromToken;\n', '        address toToken;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        address payable beneficiary;\n', '        string referrer;\n', '        bool useReduxToken;\n', '        Utils.BuyRoute[] route;\n', '    }\n', '\n', '    struct Route {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint percent;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    struct MegaSwapPath {\n', '        uint256 fromAmountPercent;\n', '        Path[] path;\n', '    }\n', '\n', '    struct Path {\n', '        address to;\n', '        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\n', '        Route[] routes;\n', '    }\n', '\n', '    struct BuyRoute {\n', '        address payable exchange;\n', '        address targetExchange;\n', '        uint256 fromAmount;\n', '        uint256 toAmount;\n', '        bytes payload;\n', '        uint256 networkFee;//Network fee is associated with 0xv3 trades\n', '    }\n', '\n', '    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\n', '\n', '    function wethAddress() internal pure returns (address) {return WETH_ADDRESS;}\n', '\n', '    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\n', '\n', '    function approve(\n', '        address addressToApprove,\n', '        address token,\n', '        uint256 amount\n', '    ) internal {\n', '        if (token != ETH_ADDRESS) {\n', '            IERC20 _token = IERC20(token);\n', '\n', '            uint allowance = _token.allowance(address(this), addressToApprove);\n', '\n', '            if (allowance < amount) {\n', '                _token.safeApprove(addressToApprove, 0);\n', '                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferTokens(\n', '        address token,\n', '        address payable destination,\n', '        uint256 amount\n', '    )\n', '    internal\n', '    {\n', '        if (amount > 0) {\n', '            if (token == ETH_ADDRESS) {\n', '                (bool result, ) = destination.call{value: amount, gas: 4000}("");\n', '                require(result, "Failed to transfer Ether");\n', '            }\n', '            else {\n', '                IERC20(token).safeTransfer(destination, amount);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    function tokenBalance(\n', '        address token,\n', '        address account\n', '    )\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '        if (token == ETH_ADDRESS) {\n', '            return account.balance;\n', '        } else {\n', '            return IERC20(token).balanceOf(account);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to refund gas using gas tokens\n', '    */\n', '    function refundGas(\n', '        address account,\n', '        address tokenTransferProxy,\n', '        uint256 initialGas\n', '    )\n', '        internal\n', '    {\n', '        uint256 freeBase = 14154;\n', '        uint256 freeToken = 6870;\n', '        uint256 reimburse = 24000;\n', '\n', '        uint256 tokens = initialGas.sub(\n', '            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\n', '        );\n', '\n', '        freeGasTokens(account, tokenTransferProxy, tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Helper method to free gas tokens\n', '    */\n', '    function freeGasTokens(address account, address tokenTransferProxy, uint256 tokens) internal {\n', '\n', '        uint256 tokensToFree = tokens;\n', '        uint256 safeNumTokens = 0;\n', '        uint256 gas = gasleft();\n', '\n', '        if (gas >= 27710) {\n', '            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\n', '        }\n', '\n', '        if (tokensToFree > safeNumTokens) {\n', '            tokensToFree = safeNumTokens;\n', '        }\n', '        ITokenTransferProxy(tokenTransferProxy).freeReduxTokens(account, tokensToFree);\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/saddle/ISwap.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', 'interface ISwap {\n', '\n', '  function swap(\n', '    uint8 tokenIndexFrom,\n', '    uint8 tokenIndexTo,\n', '    uint256 dx,\n', '    uint256 minDy,\n', '    uint256 deadline\n', '  )\n', '  external ;\n', '\n', '}\n', '\n', '// File: original_contracts/lib/saddle/SaddleAdapter.sol\n', '\n', 'pragma solidity 0.7.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'contract SaddleAdapter is IExchange {\n', '\n', '\n', '  //// IExchange functions\n', '\n', '  function getKey() public override pure returns(bytes32) {\n', '    return keccak256(abi.encodePacked("SADDLE", "1.0.0"));\n', '  }\n', '\n', '  function initialize(bytes calldata data) external override {\n', '    revert("METHOD NOT IMPLEMENTED");\n', '  }\n', '\n', '  struct SaddleData {\n', '    uint8 i;\n', '    uint8 j;\n', '    uint256 deadline;\n', '  }\n', '\n', '  function swap(\n', '    IERC20 fromToken,\n', '    IERC20 toToken,\n', '    uint256 fromAmount,\n', '    uint256 toAmount,\n', '    address exchange,\n', '    bytes calldata payload\n', '  )\n', '  external\n', '  payable\n', '  override\n', '\n', '  {\n', '\n', '    SaddleData memory data = abi.decode(payload, (SaddleData));\n', '\n', '    Utils.approve(address(exchange), address(fromToken), fromAmount);\n', '\n', '    ISwap(exchange).swap(data.i, data.j, fromAmount, toAmount, data.deadline);\n', '\n', '  }\n', '\n', '  function onChainSwap(\n', '    IERC20 fromToken,\n', '    IERC20 toToken,\n', '    uint256 fromAmount,\n', '    uint256 toAmount\n', '  )\n', '  external\n', '  override\n', '  payable\n', '  returns (uint256)\n', '  {\n', '    revert("METHOD NOT SUPPORTED");\n', '  }\n', '\n', '  function buy(\n', '    IERC20 fromToken,\n', '    IERC20 toToken,\n', '    uint256 fromAmount,\n', '    uint256 toAmount,\n', '    address exchange,\n', '    bytes calldata payload\n', '  )\n', '  external\n', '  payable\n', '  override\n', '  {\n', '    revert("METHOD NOT SUPPORTED");\n', '  }\n', '\n', '}']