['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-01\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-28\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IWET {\n', '    function accumulated(uint256 id) external view returns (uint256);\n', '}\n', '\n', 'interface IWaifus {\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function tokenNameByIndex(uint256 id) external view returns (string memory);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n', '}\n', '\n', 'contract Accoomulator {\n', '  IWET WET = IWET(0x76280AF9D18a868a0aF3dcA95b57DDE816c1aaf2);\n', '  IWaifus WAIFUS = IWaifus(0x2216d47494E516d8206B70FCa8585820eD3C4946);\n', '    \n', '    struct WaifuInfo {\n', '        uint256 tokenId;\n', '        uint256 wetAccumulated;\n', '        string name;\n', '    }\n', '\n', '  function accoomulatedTokenIdsOwned(address owner) external view returns (WaifuInfo[] memory) {\n', '    uint256 waifusOwned = WAIFUS.balanceOf(owner);\n', '    \n', '    WaifuInfo[] memory tokenInfos = new WaifuInfo[](waifusOwned);\n', '    for (uint256 i = 0; i < waifusOwned; i++) {\n', '      uint256 id = WAIFUS.tokenOfOwnerByIndex(owner, i);\n', '      uint256 wetAccumulated = WET.accumulated(id);\n', '      string memory name = WAIFUS.tokenNameByIndex(id);\n', '      tokenInfos[i] = WaifuInfo(id, wetAccumulated, name);\n', '    }\n', '    return tokenInfos;\n', '  }\n', '  \n', '  function checkWaifusAboveWET(address owner, uint256 threshold) external view returns (uint256[] memory) { \n', '    uint256 waifusOwned = WAIFUS.balanceOf(owner);\n', '    \n', '    uint256 count;\n', '    uint256[] memory tokensWorthFull = new uint256[](waifusOwned);\n', '    for (uint256 i = 0; i < waifusOwned; i++) {\n', '      uint256 id = WAIFUS.tokenOfOwnerByIndex(owner, i);\n', '      uint256 wetAccumulated = WET.accumulated(id);\n', '      if (wetAccumulated >= threshold) {\n', '          tokensWorthFull[count] = id;\n', '          count++;\n', '      }\n', '    }\n', '    \n', '    uint256[] memory tokensWorth = new uint256[](count);\n', '    for (uint256 i = 0; i < count; i++) {\n', '        tokensWorth[i] = tokensWorthFull[i];\n', '    }\n', '    \n', '    return tokensWorth;\n', '  }\n', '}']