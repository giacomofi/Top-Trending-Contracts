['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.11 https://hardhat.org\n', '\n', '// File contracts/solidity/testing/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/util/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/interface/IAdminUpgradeabilityProxy.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IAdminUpgradeabilityProxy {\n', '    // Read functions.\n', '    function admin() external view returns (address);\n', '    function implementation() external view returns (address);\n', '\n', '    // Write functions.\n', '    function changeAdmin(address newAdmin) external;\n', '    function upgradeTo(address newImplementation) external;\n', '}\n', '\n', '\n', '// File contracts/solidity/proxy/ProxyController.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'contract ProxyController is Ownable {\n', '    address public vaultFactoryAddress;\n', '    address public eligManagerAddress;\n', '    address public stakingAddress;\n', '    address public feeDistribAddress;\n', '\n', '    IAdminUpgradeabilityProxy private vaultFactoryProxy;\n', '    IAdminUpgradeabilityProxy private eligManagerProxy;\n', '    IAdminUpgradeabilityProxy private stakingProxy;\n', '    IAdminUpgradeabilityProxy private feeDistribProxy;\n', '\n', '    constructor(\n', '        address vaultFactory,\n', '        address eligManager,\n', '        address staking,\n', '        address feeDistrib\n', '    ) {\n', '        vaultFactoryProxy = IAdminUpgradeabilityProxy(vaultFactory);\n', '        eligManagerProxy = IAdminUpgradeabilityProxy(eligManager);\n', '        stakingProxy = IAdminUpgradeabilityProxy(staking);\n', '        feeDistribProxy = IAdminUpgradeabilityProxy(feeDistrib);\n', '    }\n', '\n', '    function getAdmin(uint256 index) public view returns (address) {\n', '        if (index == 0) {\n', '            return vaultFactoryProxy.admin();\n', '        } else if (index == 1) {\n', '            return eligManagerProxy.admin();\n', '        } else if (index == 2) {\n', '            return stakingProxy.admin();\n', '        } else {\n', '            return feeDistribProxy.admin();\n', '        }\n', '    }\n', '\n', '    function fetchImplAddress(uint256 index) public {\n', '        if (index == 0) {\n', '            vaultFactoryAddress = vaultFactoryProxy.implementation();\n', '        } else if (index == 1) {\n', '            eligManagerAddress = eligManagerProxy.implementation();\n', '        } else if (index == 2) {\n', '            stakingAddress = stakingProxy.implementation();\n', '        } else {\n', '            feeDistribAddress = feeDistribProxy.implementation();\n', '        }\n', '    }\n', '\n', '    function changeProxyAdmin(uint256 index, address newAdmin)\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (index == 0) {\n', '            vaultFactoryProxy.changeAdmin(newAdmin);\n', '        } else if (index == 1) {\n', '            eligManagerProxy.changeAdmin(newAdmin);\n', '        } else if (index == 2) {\n', '            stakingProxy.changeAdmin(newAdmin);\n', '        } else {\n', '            feeDistribProxy.changeAdmin(newAdmin);\n', '        }\n', '    }\n', '\n', '    function upgradeProxyTo(uint256 index, address newImpl) public onlyOwner {\n', '        if (index == 0) {\n', '            vaultFactoryProxy.upgradeTo(newImpl);\n', '        } else if (index == 1) {\n', '            eligManagerProxy.upgradeTo(newImpl);\n', '        } else if (index == 2) {\n', '            stakingProxy.upgradeTo(newImpl);\n', '        } else {\n', '            feeDistribProxy.upgradeTo(newImpl);\n', '        }\n', '        fetchImplAddress(index);\n', '    }\n', '}']