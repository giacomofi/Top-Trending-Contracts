['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-12\n', '*/\n', '\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&%&&&&%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&%(,                 .*#&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&#.        ,/#%%%%%%%#(/,      *%&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&(      /&&&&&&&&&&&&&&&&&&&&&%&%*   ,%&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&%,    *%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%,  (&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&,    #&&#                      ./#&&&&&&&&%, %&&&&&&&&&&&\n', '// &&&&&&&&&&&#    (&&&&#                            ,%&&&&&&*/&&&&&&&&&&\n', '// &&&&&&&&&&(    %&&&&&#    /&&&&&&&&&&&&&&&&&&%#,     .%&&&&&(%&&&&&&&&\n', '// &&&&&&&&&%    #&&&&&&#    /&&&&&&&&&&&&&&&&&&&&&&&(    .%&&&&&&&&&&&&&\n', '// &&&&&&&&&/   ,&&&&&&&#    /&&&&&&&&&&&&&&&&%%%%&&&&%%    /&&&&&&&&&&&&\n', '// &&&&&&&&&*   /&&&&&&&#             %&&&&&&,   (&&&&&&&*   /&&&&&&&&&&&\n', '// &&&&&&&&&/   *&&&&&&&%////////*    %&&&&&&,   (&&&&&&&&,   #&&&&&&&&&&\n', '// &&&&&&&&&#    &&&&&&&&&&&&&&&&%.   %&&&&&&.   #&&&&&&&&#   *&&&&&&&&&&\n', '// &&&&&&&&&&*   ,&&%&&&&&&&&&&&&%.   %&&&&&(   .%&&&&&&&&#   *&&&&&&&&&&\n', '// &&&&&&&&&&&,   .&&&&&&&&&&&&&&%.  /&&&&&#    #&&&&&&&&&*   (&&&&&&&&&&\n', '// &&&&&&&&&&&&#    ,&&&&&&&&&&&&%.,%&&&&%,    %&&&&&&&&&#   .%&&&&&&&&&&\n', '// &&&&&&&&&&&&&&(     ,#&&&&&&&&&&&&&&(     (&&&&&&&&&&/   .%&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&*          ..         ,%&&&&&&&&&&#    *&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&%(.           ./%&&&&&&&&&&&%*    *&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%(.    .#&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&%/(%&&&&&&&&&&&&%#/.       *%&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&%(,             ,(%&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'interface RegistryClone {\n', '    function syncAttributeValue(\n', '        address _who,\n', '        bytes32 _attribute,\n', '        uint256 _value\n', '    ) external;\n', '}\n', '\n', 'contract Registry {\n', '    struct AttributeData {\n', '        uint256 value;\n', '        bytes32 notes;\n', '        address adminAddr;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    // never remove any storage variables\n', '    address public owner;\n', '    address public pendingOwner;\n', '    bool initialized;\n', '\n', '    // Stores arbitrary attributes for users. An example use case is an IERC20\n', '    // token that requires its users to go through a KYC/AML check - in this case\n', '    // a validator can set an account\'s "hasPassedKYC/AML" attribute to 1 to indicate\n', '    // that account can use the token. This mapping stores that value (1, in the\n', '    // example) as well as which validator last set the value and at what time,\n', '    // so that e.g. the check can be renewed at appropriate intervals.\n', '    mapping(address => mapping(bytes32 => AttributeData)) attributes;\n', '    // The logic governing who is allowed to set what attributes is abstracted as\n', '    // this accessManager, so that it may be replaced by the owner as needed\n', '    bytes32 constant WRITE_PERMISSION = keccak256("canWriteTo-");\n', '    mapping(bytes32 => RegistryClone[]) subscribers;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\n', '    event SetManager(address indexed oldManager, address indexed newManager);\n', '    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n', '    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n', '\n', "    // Allows a write if either a) the writer is that Registry's owner, or\n", '    // b) the writer is writing to attribute foo and that writer already has\n', '    // the canWriteTo-foo attribute set (in that same Registry)\n', '    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\n', '        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\n', '    }\n', '\n', '    // Writes are allowed only if the accessManager approves\n', '    function setAttribute(\n', '        address _who,\n', '        bytes32 _attribute,\n', '        uint256 _value,\n', '        bytes32 _notes\n', '    ) public {\n', '        require(confirmWrite(_attribute, msg.sender));\n', '        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\n', '        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\n', '\n', '        RegistryClone[] storage targets = subscribers[_attribute];\n', '        uint256 index = targets.length;\n', '        while (index-- > 0) {\n', '            targets[index].syncAttributeValue(_who, _attribute, _value);\n', '        }\n', '    }\n', '\n', '    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\n', '        subscribers[_attribute].push(_syncer);\n', '        emit StartSubscription(_attribute, _syncer);\n', '    }\n', '\n', '    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\n', '        uint256 length = subscribers[_attribute].length;\n', '        require(_index < length);\n', '        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\n', '        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\n', '        subscribers[_attribute].pop();\n', '    }\n', '\n', '    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\n', '        return subscribers[_attribute].length;\n', '    }\n', '\n', '    function setAttributeValue(\n', '        address _who,\n', '        bytes32 _attribute,\n', '        uint256 _value\n', '    ) public {\n', '        require(confirmWrite(_attribute, msg.sender));\n', '        attributes[_who][_attribute] = AttributeData(_value, "", msg.sender, block.timestamp);\n', '        emit SetAttribute(_who, _attribute, _value, "", msg.sender);\n', '        RegistryClone[] storage targets = subscribers[_attribute];\n', '        uint256 index = targets.length;\n', '        while (index-- > 0) {\n', '            targets[index].syncAttributeValue(_who, _attribute, _value);\n', '        }\n', '    }\n', '\n', '    // Returns true if the uint256 value stored for this attribute is non-zero\n', '    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\n', '        return attributes[_who][_attribute].value != 0;\n', '    }\n', '\n', '    // Returns the exact value of the attribute, as well as its metadata\n', '    function getAttribute(address _who, bytes32 _attribute)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            bytes32,\n', '            address,\n', '            uint256\n', '        )\n', '    {\n', '        AttributeData memory data = attributes[_who][_attribute];\n', '        return (data.value, data.notes, data.adminAddr, data.timestamp);\n', '    }\n', '\n', '    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\n', '        return attributes[_who][_attribute].value;\n', '    }\n', '\n', '    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\n', '        return attributes[_who][_attribute].adminAddr;\n', '    }\n', '\n', '    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\n', '        return attributes[_who][_attribute].timestamp;\n', '    }\n', '\n', '    function syncAttribute(\n', '        bytes32 _attribute,\n', '        uint256 _startIndex,\n', '        address[] calldata _addresses\n', '    ) external {\n', '        RegistryClone[] storage targets = subscribers[_attribute];\n', '        uint256 index = targets.length;\n', '        while (index-- > _startIndex) {\n', '            RegistryClone target = targets[index];\n', '            for (uint256 i = _addresses.length; i-- > 0; ) {\n', '                address who = _addresses[i];\n', '                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\n', '            }\n', '        }\n', '    }\n', '\n', '    function reclaimEther(address payable _to) external onlyOwner {\n', '        _to.transfer(address(this).balance);\n', '    }\n', '\n', '    function reclaimToken(IERC20 token, address _to) external onlyOwner {\n', '        uint256 balance = token.balanceOf(address(this));\n', '        token.transfer(_to, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "only Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * All storage must be declared here\n', ' * New storage must be appended to the end\n', ' * Never remove items from this list\n', ' */\n', 'contract ProxyStorage {\n', '    bool initalized;\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    mapping(uint144 => uint256) attributes; // see RegistrySubscriber\n', '\n', '    address owner_;\n', '    address pendingOwner_;\n', '\n', '    /* Additionally, we have several keccak-based storage locations.\n', '     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\n', '     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\n', '     * A preimage collision can be used to attack the contract by treating one storage location as another,\n', '     * which would always be a critical issue.\n', '     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\n', '     *******************************************************************************************************\n', '     ** length     input                                                         usage\n', '     *******************************************************************************************************\n', '     ** 19         "trueXXX.proxy.owner"                                         Proxy Owner\n', '     ** 27         "trueXXX.pending.proxy.owner"                                 Pending Proxy Owner\n', '     ** 28         "trueXXX.proxy.implementation"                                Proxy Implementation\n', '     ** 64         uint256(address),uint256(1)                                   balanceOf\n', '     ** 64         uint256(address),keccak256(uint256(address),uint256(2))       allowance\n', '     ** 64         uint256(address),keccak256(bytes32,uint256(3))                attributes\n', '     **/\n', '}\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title ClaimableContract\n', ' * @dev The ClaimableContract contract is a copy of Claimable Contract by Zeppelin.\n', ' and provides basic authorization control functions. Inherits storage layout of\n', ' ProxyStorage.\n', ' */\n', 'contract ClaimableContract is ProxyStorage {\n', '    function owner() public view returns (address) {\n', '        return owner_;\n', '    }\n', '\n', '    function pendingOwner() public view returns (address) {\n', '        return pendingOwner_;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev sets the original `owner` of the contract to the sender\n', '     * at construction. Must then be reinitialized\n', '     */\n', '    constructor() public {\n', '        owner_ = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner_, "only owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner_);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner_ = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        address _pendingOwner = pendingOwner_;\n', '        emit OwnershipTransferred(owner_, _pendingOwner);\n', '        owner_ = _pendingOwner;\n', '        pendingOwner_ = address(0);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/trusttoken/common/ERC20.sol\n', '\n', '/**\n', ' * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.\n', ' * Removing state variables has been necessary due to proxy pattern usage.\n', ' * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:\n', ' * - Remove state variables _name, _symbol, _decimals\n', ' * - Use state variables balances, allowances, totalSupply from ProxyStorage\n', ' * - Remove constructor\n', ' * - Solidity version changed from ^0.6.0 to 0.6.10\n', ' * - Contract made abstract\n', ' * - Remove inheritance from IERC20 because of ProxyStorage name conflicts\n', ' *\n', ' * See also: ClaimableOwnable.sol and ProxyStorage.sol\n', ' */\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'abstract contract ERC20 is ProxyStorage, Context {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public virtual pure returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public virtual pure returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public virtual pure returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), allowance[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, allowance[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, allowance[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        balanceOf[sender] = balanceOf[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        balanceOf[recipient] = balanceOf[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '        balanceOf[account] = balanceOf[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        balanceOf[account] = balanceOf[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        allowance[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    // solhint-disable-next-line no-empty-blocks\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title TimeLockedToken\n', ' * @notice Time Locked ERC20 Token\n', ' * @author Harold Hyatt\n', ' * @dev Contract which gives the ability to time-lock tokens\n', ' *\n', ' * The registerLockup() function allows an account to transfer\n', ' * its tokens to another account, locking them according to the\n', ' * distribution epoch periods\n', ' *\n', ' * By overriding the balanceOf(), transfer(), and transferFrom()\n', ' * functions in ERC20, an account can show its full, post-distribution\n', ' * balance but only transfer or spend up to an allowed amount\n', ' *\n', ' * Every time an epoch passes, a portion of previously non-spendable tokens\n', ' * are allowed to be transferred, and after all epochs have passed, the full\n', ' * account balance is unlocked\n', ' */\n', 'abstract contract TimeLockedToken is ERC20, ClaimableContract {\n', '    using SafeMath for uint256;\n', '\n', '    // represents total distribution for locked balances\n', '    mapping(address => uint256) distribution;\n', '\n', '    // start of the lockup period\n', '    // Friday, July 24, 2020 4:58:31 PM GMT\n', '    uint256 constant LOCK_START = 1595609911;\n', '    // length of time to delay first epoch\n', '    uint256 constant FIRST_EPOCH_DELAY = 30 days;\n', '    // how long does an epoch last\n', '    uint256 constant EPOCH_DURATION = 90 days;\n', '    // number of epochs\n', '    uint256 constant TOTAL_EPOCHS = 8;\n', '    // registry of locked addresses\n', '    address public timeLockRegistry;\n', '    // allow unlocked transfers to special account\n', '    bool public returnsLocked;\n', '\n', '    modifier onlyTimeLockRegistry() {\n', '        require(msg.sender == timeLockRegistry, "only TimeLockRegistry");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Set TimeLockRegistry address\n', '     * @param newTimeLockRegistry Address of TimeLockRegistry contract\n', '     */\n', '    function setTimeLockRegistry(address newTimeLockRegistry) external onlyOwner {\n', '        require(newTimeLockRegistry != address(0), "cannot be zero address");\n', '        require(newTimeLockRegistry != timeLockRegistry, "must be new TimeLockRegistry");\n', '        timeLockRegistry = newTimeLockRegistry;\n', '    }\n', '\n', '    /**\n', '     * @dev Permanently lock transfers to return address\n', "     * Lock returns so there isn't always a way to send locked tokens\n", '     */\n', '    function lockReturns() external onlyOwner {\n', '        returnsLocked = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer function which includes unlocked tokens\n', '     * Locked tokens can always be transfered back to the returns address\n', '     * Transferring to owner allows re-issuance of funds through registry\n', '     *\n', '     * @param _from The address to send tokens from\n', '     * @param _to The address that will receive the tokens\n', '     * @param _value The amount of tokens to be transferred\n', '     */\n', '    function _transfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal override {\n', '        require(balanceOf[_from] >= _value, "insufficient balance");\n', '\n', '        // transfers to owner proceed as normal when returns allowed\n', '        if (!returnsLocked && _to == owner_) {\n', '            transferToOwner(_from, _value);\n', '            return;\n', '        }\n', '        // check if enough unlocked balance to transfer\n', '        require(unlockedBalance(_from) >= _value, "attempting to transfer locked funds");\n', '        super._transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to owner. Used only when returns allowed.\n', '     * @param _from The address to send tokens from\n', '     * @param _value The amount of tokens to be transferred\n', '     */\n', '    function transferToOwner(address _from, uint256 _value) internal {\n', '        uint256 unlocked = unlockedBalance(_from);\n', '\n', '        if (unlocked < _value) {\n', '            // We want to have unlocked = value, i.e.\n', '            // value = balance - distribution * epochsLeft / totalEpochs\n', '            // distribution = (balance - value) * totalEpochs / epochsLeft\n', '            distribution[_from] = balanceOf[_from].sub(_value).mul(TOTAL_EPOCHS).div(epochsLeft());\n', '        }\n', '        super._transfer(_from, owner_, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Check if amount we want to burn is unlocked before burning\n', '     * @param _from The address whose tokens will burn\n', '     * @param _value The amount of tokens to be burnt\n', '     */\n', '    function _burn(address _from, uint256 _value) internal override {\n', '        require(balanceOf[_from] >= _value, "insufficient balance");\n', '        require(unlockedBalance(_from) >= _value, "attempting to burn locked funds");\n', '\n', '        super._burn(_from, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to another account under the lockup schedule\n', '     * Emits a transfer event showing a transfer to the recipient\n', '     * Only the registry can call this function\n', '     * @param receiver Address to receive the tokens\n', '     * @param amount Tokens to be transferred\n', '     */\n', '    function registerLockup(address receiver, uint256 amount) external onlyTimeLockRegistry {\n', '        require(balanceOf[msg.sender] >= amount, "insufficient balance");\n', '\n', '        // add amount to locked distribution\n', '        distribution[receiver] = distribution[receiver].add(amount);\n', '\n', '        // transfer to recipient\n', '        _transfer(msg.sender, receiver, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get locked balance for an account\n', '     * @param account Account to check\n', '     * @return Amount locked\n', '     */\n', '    function lockedBalance(address account) public view returns (uint256) {\n', '        // distribution * (epochsLeft / totalEpochs)\n', '        return distribution[account].mul(epochsLeft()).div(TOTAL_EPOCHS);\n', '    }\n', '\n', '    /**\n', '     * @dev Get unlocked balance for an account\n', '     * @param account Account to check\n', '     * @return Amount that is unlocked and available eg. to transfer\n', '     */\n', '    function unlockedBalance(address account) public view returns (uint256) {\n', '        // totalBalance - lockedBalance\n', '        return balanceOf[account].sub(lockedBalance(account));\n', '    }\n', '\n', '    /*\n', '     * @dev Get number of epochs passed\n', '     * @return Value between 0 and 8 of lockup epochs already passed\n', '     */\n', '    function epochsPassed() public view returns (uint256) {\n', '        // return 0 if timestamp is lower than start time\n', '        if (block.timestamp < LOCK_START) {\n', '            return 0;\n', '        }\n', '\n', '        // how long it has been since the beginning of lockup period\n', '        uint256 timePassed = block.timestamp.sub(LOCK_START);\n', '\n', '        // 1st epoch is FIRST_EPOCH_DELAY longer; we check to prevent subtraction underflow\n', '        if (timePassed < FIRST_EPOCH_DELAY) {\n', '            return 0;\n', '        }\n', '\n', '        // subtract the FIRST_EPOCH_DELAY, so that we can count all epochs as lasting EPOCH_DURATION\n', '        uint256 totalEpochsPassed = timePassed.sub(FIRST_EPOCH_DELAY).div(EPOCH_DURATION);\n', '\n', "        // epochs don't count over TOTAL_EPOCHS\n", '        if (totalEpochsPassed > TOTAL_EPOCHS) {\n', '            return TOTAL_EPOCHS;\n', '        }\n', '\n', '        return totalEpochsPassed;\n', '    }\n', '\n', '    function epochsLeft() public view returns (uint256) {\n', '        return TOTAL_EPOCHS.sub(epochsPassed());\n', '    }\n', '\n', '    /**\n', '     * @dev Get timestamp of next epoch\n', '     * Will revert if all epochs have passed\n', '     * @return Timestamp of when the next epoch starts\n', '     */\n', '    function nextEpoch() public view returns (uint256) {\n', '        // get number of epochs passed\n', '        uint256 passed = epochsPassed();\n', '\n', '        // if all epochs passed, return\n', '        if (passed == TOTAL_EPOCHS) {\n', '            // return INT_MAX\n', '            return uint256(-1);\n', '        }\n', '\n', '        // if no epochs passed, return latest epoch + delay + standard duration\n', '        if (passed == 0) {\n', '            return latestEpoch().add(FIRST_EPOCH_DELAY).add(EPOCH_DURATION);\n', '        }\n', '\n', '        // otherwise return latest epoch + epoch duration\n', '        return latestEpoch().add(EPOCH_DURATION);\n', '    }\n', '\n', '    /**\n', '     * @dev Get timestamp of latest epoch\n', '     * @return Timestamp of when the current epoch has started\n', '     */\n', '    function latestEpoch() public view returns (uint256) {\n', '        // get number of epochs passed\n', '        uint256 passed = epochsPassed();\n', '\n', '        // if no epochs passed, return lock start time\n', '        if (passed == 0) {\n', '            return LOCK_START;\n', '        }\n', '\n', '        // accounts for first epoch being longer\n', '        // lockStart + firstEpochDelay + (epochsPassed * epochDuration)\n', '        return LOCK_START.add(FIRST_EPOCH_DELAY).add(passed.mul(EPOCH_DURATION));\n', '    }\n', '\n', '    /**\n', '     * @dev Get timestamp of final epoch\n', '     * @return Timestamp of when the last epoch ends and all funds are released\n', '     */\n', '    function finalEpoch() public pure returns (uint256) {\n', '        // lockStart + firstEpochDelay + (epochDuration * totalEpochs)\n', '        return LOCK_START.add(FIRST_EPOCH_DELAY).add(EPOCH_DURATION.mul(TOTAL_EPOCHS));\n', '    }\n', '\n', '    /**\n', '     * @dev Get timestamp of locking period start\n', '     * @return Timestamp of locking period start\n', '     */\n', '    function lockStart() public pure returns (uint256) {\n', '        return LOCK_START;\n', '    }\n', '}\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title TrustToken\n', ' * @dev The TrustToken contract is a claimable contract where the\n', ' * owner can only mint or transfer ownership. TrustTokens use 8 decimals\n', ' * in order to prevent rewards from getting stuck in the remainder on division.\n', ' * Tolerates dilution to slash stake and accept rewards.\n', ' */\n', 'contract TrueFi is TimeLockedToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant MAX_SUPPLY = 145000000000000000;\n', '\n', '    /**\n', '     * @dev initialize trusttoken and give ownership to sender\n', '     * This is necessary to set ownership for proxy\n', '     */\n', '    function initialize() public {\n', '        require(!initalized, "already initialized");\n', '        owner_ = msg.sender;\n', '        initalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev mint TRU\n', '     * Can never mint more than MAX_SUPPLY = 1.45 billion\n', '     */\n', '    function mint(address _to, uint256 _amount) external onlyOwner {\n', '        if (totalSupply.add(_amount) <= MAX_SUPPLY) {\n', '            _mint(_to, _amount);\n', '        } else {\n', '            revert("Max supply exceeded");\n', '        }\n', '    }\n', '\n', '    function burn(uint256 amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function decimals() public override pure returns (uint8) {\n', '        return 8;\n', '    }\n', '\n', '    function rounding() public pure returns (uint8) {\n', '        return 8;\n', '    }\n', '\n', '    function name() public override pure returns (string memory) {\n', '        return "TrueFi";\n', '    }\n', '\n', '    function symbol() public override pure returns (string memory) {\n', '        return "TRU";\n', '    }\n', '}']