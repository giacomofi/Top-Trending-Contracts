['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '// SPDX-License-Identifier: BSD-3-Clause\n', '\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface CErc20 {\n', '    function mint(uint256) external returns (uint256);\n', '\n', '    function exchangeRateCurrent() external returns (uint256);\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    function supplyRatePerBlock() external returns (uint256);\n', '\n', '    function redeem(uint) external returns (uint);\n', '\n', '    function redeemUnderlying(uint) external returns (uint);\n', '    \n', '}\n', '\n', 'interface IUniswapV2Router {\n', '    function WETH() external pure returns (address);\n', '    \n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    \n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '/**\n', ' * Accounting:\n', ' *      - the smart contract maintains a ledger of token balances which changes upon actions affecting \n', " *          this smart contract's token balance.\n", ' * \n', ' *      - it allows owner to withdraw any extra amount of any tokens that have not been recorded, \n', ' *          i.e, - any tokens that are accidentally transferred to this smart contract.\n', ' * \n', ' *      - care must be taken in auditing that `claimExtraTokens` function does not allow withdrawals of \n', ' *          any tokens in this smart contract in more amounts than necessary. In simple terms, admin can \n', ' *          only transfer out tokens that are accidentally sent to this smart contract. Nothing more nothing less.\n', ' */\n', 'contract Vault is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    //==================== Contract Variables =======================\n', '    // Contract variables must be changed before live deployment\n', '    \n', '    uint public constant LOCKUP_DURATION = 30 days;\n', '    uint public constant FEE_PERCENT_X_100 = 30;\n', '    uint public constant FEE_PERCENT_TO_BUYBACK_X_100 = 2500;\n', '    \n', '    uint public constant REWARD_INTERVAL = 365 days;\n', '    uint public constant ADMIN_CAN_CLAIM_AFTER = 395 days;\n', '    uint public constant REWARD_RETURN_PERCENT_X_100 = 1250;\n', '    \n', '    // ETH fee equivalent predefined gas price\n', '    uint public constant MIN_ETH_FEE_IN_WEI = 40000 * 1 * 10**9;\n', '    \n', '    address public constant TRUSTED_DEPOSIT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address public constant TRUSTED_CTOKEN_ADDRESS = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\n', '    address public constant TRUSTED_PLATFORM_TOKEN_ADDRESS = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17;\n', '    \n', '    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n', '    \n', '    //================= End Contract Variables ======================\n', '    \n', '    uint public constant ONE_HUNDRED_X_100 = 10000;\n', '    uint public immutable contractStartTime;\n', '    \n', '    constructor() public {\n', '        contractStartTime = block.timestamp;\n', '    }\n', '    \n', '    IUniswapV2Router public constant uniswapRouterV2 = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    \n', '    modifier noContractsAllowed() {\n', '        require(tx.origin == msg.sender, "No Contracts Allowed!");\n', '        _;\n', '    }\n', '    \n', '    // ------------------- event definitions -------------------\n', '    \n', '    event Deposit(address indexed account, uint amount);\n', '    event Withdraw(address indexed account, uint amount);\n', '    \n', '    event EtherRewardDisbursed(uint amount);\n', '    event TokenRewardDisbursed(uint amount);\n', '    \n', '    event PlatformTokenRewardClaimed(address indexed account, uint amount);\n', '    event CompoundRewardClaimed(address indexed account, uint amount);\n', '    event EtherRewardClaimed(address indexed account, uint amount);\n', '    event TokenRewardClaimed(address indexed account, uint amount);\n', '    \n', '    event PlatformTokenAdded(uint amount);\n', '    \n', '    // ----------------- end event definitions -----------------\n', '    \n', '    EnumerableSet.AddressSet private holders;\n', '    \n', '    // view functon to get number of stakers\n', '    function getNumberOfHolders() public view returns (uint) {\n', '        return holders.length();\n', '    }\n', '    \n', '    // token contract address => token balance of this contract\n', '    mapping (address => uint) public tokenBalances;\n', '    \n', '    // user wallet => balance\n', '    mapping (address => uint) public cTokenBalance;\n', '    mapping (address => uint) public depositTokenBalance;\n', '    \n', '    mapping (address => uint) public totalTokensDepositedByUser;\n', '    mapping (address => uint) public totalTokensWithdrawnByUser;\n', '    \n', '    mapping (address => uint) public totalEarnedCompoundDivs;\n', '    mapping (address => uint) public totalEarnedEthDivs;\n', '    mapping (address => uint) public totalEarnedTokenDivs;\n', '    mapping (address => uint) public totalEarnedPlatformTokenDivs;\n', '    \n', '    mapping (address => uint) public depositTime;\n', '    mapping (address => uint) public lastClaimedTime;\n', '    \n', '    uint public totalCTokens;\n', '    uint public totalDepositedTokens;\n', '    \n', '    // -----------------\n', '    \n', '    uint public constant POINT_MULTIPLIER = 1e18;\n', '    \n', '    mapping (address => uint) public lastTokenDivPoints;\n', '    mapping (address => uint) public tokenDivsBalance;\n', '    uint public totalTokenDivPoints;\n', '    \n', '    mapping (address => uint) public lastEthDivPoints;\n', '    mapping (address => uint) public ethDivsBalance;\n', '    uint public totalEthDivPoints;\n', '    \n', '    mapping (address => uint) public platformTokenDivsBalance;\n', '    \n', '    uint public totalEthDisbursed;\n', '    uint public totalTokensDisbursed;\n', '   \n', '    \n', '    function tokenDivsOwing(address account) public view returns (uint) {\n', '        uint newDivPoints = totalTokenDivPoints.sub(lastTokenDivPoints[account]);\n', '        return depositTokenBalance[account].mul(newDivPoints).div(POINT_MULTIPLIER);\n', '    }\n', '    function ethDivsOwing(address account) public view returns (uint) {\n', '        uint newDivPoints = totalEthDivPoints.sub(lastEthDivPoints[account]);\n', '        return depositTokenBalance[account].mul(newDivPoints).div(POINT_MULTIPLIER);\n', '    }\n', '    \n', '    function distributeEthDivs(uint amount) private {\n', '        if (totalDepositedTokens == 0) return;\n', '        totalEthDivPoints = totalEthDivPoints.add(amount.mul(POINT_MULTIPLIER).div(totalDepositedTokens));\n', '        totalEthDisbursed = totalEthDisbursed.add(amount);\n', '        increaseTokenBalance(address(0), amount);\n', '        emit EtherRewardDisbursed(amount);\n', '    }\n', '    function distributeTokenDivs(uint amount) private {\n', '        if (totalDepositedTokens == 0) return;\n', '        totalTokenDivPoints = totalTokenDivPoints.add(amount.mul(POINT_MULTIPLIER).div(totalDepositedTokens));\n', '        totalTokensDisbursed = totalTokensDisbursed.add(amount);\n', '        increaseTokenBalance(TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount);\n', '        emit TokenRewardDisbursed(amount);\n', '    }\n', '    \n', '    \n', '    // -----------------\n', '    \n', '    // view function to get depositors list\n', '    function getDepositorsList(uint startIndex, uint endIndex)\n', '        public\n', '        view\n', '        returns (address[] memory stakers,\n', '            uint[] memory stakingTimestamps,\n', '            uint[] memory lastClaimedTimeStamps,\n', '            uint[] memory stakedTokens) {\n', '        require (startIndex < endIndex);\n', '\n', '        uint length = endIndex.sub(startIndex);\n', '        address[] memory _stakers = new address[](length);\n', '        uint[] memory _stakingTimestamps = new uint[](length);\n', '        uint[] memory _lastClaimedTimeStamps = new uint[](length);\n', '        uint[] memory _stakedTokens = new uint[](length);\n', '\n', '        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\n', '            address staker = holders.at(i);\n', '            uint listIndex = i.sub(startIndex);\n', '            _stakers[listIndex] = staker;\n', '            _stakingTimestamps[listIndex] = depositTime[staker];\n', '            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\n', '            _stakedTokens[listIndex] = depositTokenBalance[staker];\n', '        }\n', '\n', '        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\n', '    }\n', '\n', '    function updateAccount(address account) private {\n', '        // update user account here\n', '        uint tokensOwing = tokenDivsOwing(account);\n', '        lastTokenDivPoints[account] = totalTokenDivPoints;\n', '        if (tokensOwing > 0) {\n', '            tokenDivsBalance[account] = tokenDivsBalance[account].add(tokensOwing);\n', '        }\n', '        \n', '        uint weiOwing = ethDivsOwing(account);\n', '        lastEthDivPoints[account] = totalEthDivPoints;\n', '        if (weiOwing > 0) {\n', '            ethDivsBalance[account] = ethDivsBalance[account].add(weiOwing);\n', '        }\n', '        \n', '        uint platformTokensOwing = platformTokenDivsOwing(account);\n', '        if (platformTokensOwing > 0) {\n', '            platformTokenDivsBalance[account] = platformTokenDivsBalance[account].add(platformTokensOwing);\n', '        }\n', '        \n', '        lastClaimedTime[account] = block.timestamp;\n', '    }\n', '    \n', '    function platformTokenDivsOwing(address account) public view returns (uint) {\n', '        if (!holders.contains(account)) return 0;\n', '        if (depositTokenBalance[account] == 0) return 0;\n', '        \n', '        uint timeDiff;\n', '        uint stakingEndTime = contractStartTime.add(REWARD_INTERVAL);\n', '        uint _now = block.timestamp;\n', '        if (_now > stakingEndTime) {\n', '            _now = stakingEndTime;\n', '        }\n', '        \n', '        if (lastClaimedTime[account] >= _now) {\n', '            timeDiff = 0;\n', '        } else {\n', '            timeDiff = _now.sub(lastClaimedTime[account]);\n', '        }\n', '        \n', '        uint pendingDivs = depositTokenBalance[account]\n', '                                .mul(REWARD_RETURN_PERCENT_X_100)\n', '                                .mul(timeDiff)\n', '                                .div(REWARD_INTERVAL)\n', '                                .div(ONE_HUNDRED_X_100);\n', '        return pendingDivs;\n', '    }\n', '    \n', '    function getEstimatedCompoundDivsOwing(address account) public view returns (uint) {\n', '        uint convertedBalance = getConvertedBalance(cTokenBalance[account]);\n', '        uint depositedBalance = depositTokenBalance[account];\n', '        return (convertedBalance > depositedBalance ? convertedBalance.sub(depositedBalance) : 0);\n', '    }\n', '    \n', '    function getConvertedBalance(uint _cTokenBalance) public view returns (uint) {\n', '        uint exchangeRateStored = getExchangeRateStored();\n', '        uint convertedBalance = _cTokenBalance.mul(exchangeRateStored).div(10**18);\n', '        return convertedBalance;\n', '    }\n', '    \n', '    function _claimEthDivs() private {\n', '        updateAccount(msg.sender);\n', '        uint amount = ethDivsBalance[msg.sender];\n', '        ethDivsBalance[msg.sender] = 0;\n', '        if (amount == 0) return;\n', '        decreaseTokenBalance(address(0), amount);\n', '        msg.sender.transfer(amount);\n', '        totalEarnedEthDivs[msg.sender] = totalEarnedEthDivs[msg.sender].add(amount);\n', '        \n', '        emit EtherRewardClaimed(msg.sender, amount);\n', '    }\n', '    function _claimTokenDivs() private {\n', '        updateAccount(msg.sender);\n', '        uint amount = tokenDivsBalance[msg.sender];\n', '        tokenDivsBalance[msg.sender] = 0;\n', '        if (amount == 0) return;\n', '        decreaseTokenBalance(TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount);\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, amount);\n', '        totalEarnedTokenDivs[msg.sender] = totalEarnedTokenDivs[msg.sender].add(amount);\n', '        \n', '        emit TokenRewardClaimed(msg.sender, amount);\n', '    }\n', '    function _claimCompoundDivs() private {\n', '        updateAccount(msg.sender);\n', '        uint exchangeRateCurrent = getExchangeRateCurrent();\n', '        \n', '        uint convertedBalance = cTokenBalance[msg.sender].mul(exchangeRateCurrent).div(10**18);\n', '        uint depositedBalance = depositTokenBalance[msg.sender];\n', '        \n', '        uint amount = convertedBalance > depositedBalance ? convertedBalance.sub(depositedBalance) : 0;\n', '        \n', '        if (amount == 0) return;\n', '        \n', '        uint oldCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint oldDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        require(CErc20(TRUSTED_CTOKEN_ADDRESS).redeemUnderlying(amount) == 0, "redeemUnderlying failed!");\n', '        uint newCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint newDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        \n', '        uint depositTokenReceived = newDepositTokenBalance.sub(oldDepositTokenBalance);\n', '        uint cTokenRedeemed = oldCTokenBalance.sub(newCTokenBalance);\n', '        \n', '        require(cTokenRedeemed <= cTokenBalance[msg.sender], "redeem exceeds balance!");\n', '        cTokenBalance[msg.sender] = cTokenBalance[msg.sender].sub(cTokenRedeemed);\n', '        totalCTokens = totalCTokens.sub(cTokenRedeemed);\n', '        decreaseTokenBalance(TRUSTED_CTOKEN_ADDRESS, cTokenRedeemed);\n', '        \n', '        totalTokensWithdrawnByUser[msg.sender] = totalTokensWithdrawnByUser[msg.sender].add(depositTokenReceived);\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, depositTokenReceived);\n', '        \n', '        totalEarnedCompoundDivs[msg.sender] = totalEarnedCompoundDivs[msg.sender].add(depositTokenReceived);\n', '        \n', '        emit CompoundRewardClaimed(msg.sender, depositTokenReceived);\n', '    }\n', '    function _claimPlatformTokenDivs(uint _amountOutMin_platformTokens) private {\n', '        updateAccount(msg.sender);\n', '        uint amount = platformTokenDivsBalance[msg.sender];\n', '        \n', '        if (amount == 0) return;\n', '        \n', '        address[] memory path = new address[](3);\n', '        path[0] = TRUSTED_DEPOSIT_TOKEN_ADDRESS;\n', '        path[1] = uniswapRouterV2.WETH();\n', '        path[2] = TRUSTED_PLATFORM_TOKEN_ADDRESS;\n', '        \n', '        uint estimatedAmountOut = uniswapRouterV2.getAmountsOut(amount, path)[2];\n', '        require(estimatedAmountOut >= _amountOutMin_platformTokens, "_claimPlatformTokenDivs: slippage error!");\n', '        \n', '        if (IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).balanceOf(address(this)) < estimatedAmountOut) {\n', '            return;\n', '        }\n', '        \n', '        platformTokenDivsBalance[msg.sender] = 0;\n', '        \n', '        \n', '        decreaseTokenBalance(TRUSTED_PLATFORM_TOKEN_ADDRESS, estimatedAmountOut);\n', '        IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).safeTransfer(msg.sender, estimatedAmountOut);\n', '        totalEarnedPlatformTokenDivs[msg.sender] = totalEarnedPlatformTokenDivs[msg.sender].add(estimatedAmountOut);\n', '        \n', '        emit PlatformTokenRewardClaimed(msg.sender, estimatedAmountOut);\n', '    }\n', '    \n', '    function claimEthDivs() external noContractsAllowed nonReentrant {\n', '        _claimEthDivs();\n', '    }\n', '    function claimTokenDivs() external noContractsAllowed nonReentrant {\n', '        _claimTokenDivs();\n', '    }\n', '    function claimCompoundDivs() external noContractsAllowed nonReentrant {\n', '        _claimCompoundDivs();\n', '    }\n', '    function claimPlatformTokenDivs(uint _amountOutMin_platformTokens) external noContractsAllowed nonReentrant {\n', '        _claimPlatformTokenDivs(_amountOutMin_platformTokens);\n', '    }\n', '    \n', '    function claim(uint _amountOutMin_platformTokens) external noContractsAllowed nonReentrant {\n', '        _claimEthDivs();\n', '        _claimTokenDivs();\n', '        _claimCompoundDivs();\n', '        _claimPlatformTokenDivs(_amountOutMin_platformTokens);\n', '    }\n', '    \n', '    function getExchangeRateCurrent() public returns (uint) {\n', '        uint exchangeRateCurrent = CErc20(TRUSTED_CTOKEN_ADDRESS).exchangeRateCurrent();\n', '        return exchangeRateCurrent;\n', '    }\n', '    \n', '    function getExchangeRateStored() public view returns (uint) {\n', '        uint exchangeRateStored = CErc20(TRUSTED_CTOKEN_ADDRESS).exchangeRateStored();\n', '        return exchangeRateStored;\n', '    }\n', '    \n', '    function deposit(uint amount, uint _amountOutMin_ethFeeBuyBack, uint deadline) external noContractsAllowed nonReentrant payable {\n', '        require(amount > 0, "invalid amount!");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        // increment token balance!\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amount);\n', '        \n', '\n', '        totalTokensDepositedByUser[msg.sender] = totalTokensDepositedByUser[msg.sender].add(amount);\n', '        \n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(TRUSTED_CTOKEN_ADDRESS, 0);\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(TRUSTED_CTOKEN_ADDRESS, amount);\n', '        \n', '        uint oldCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        require(CErc20(TRUSTED_CTOKEN_ADDRESS).mint(amount) == 0, "mint failed!");\n', '        uint newCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint cTokenReceived = newCTokenBalance.sub(oldCTokenBalance);\n', '        \n', '        cTokenBalance[msg.sender] = cTokenBalance[msg.sender].add(cTokenReceived);\n', '        totalCTokens = totalCTokens.add(cTokenReceived);    \n', '        increaseTokenBalance(TRUSTED_CTOKEN_ADDRESS, cTokenReceived);\n', '        \n', '        depositTokenBalance[msg.sender] = depositTokenBalance[msg.sender].add(amount);\n', '        totalDepositedTokens = totalDepositedTokens.add(amount);\n', '        \n', '        handleEthFee(msg.value, _amountOutMin_ethFeeBuyBack, deadline);\n', '        \n', '        holders.add(msg.sender);\n', '        depositTime[msg.sender] = block.timestamp;\n', '        \n', '        emit Deposit(msg.sender, amount);\n', '    }\n', '    function withdraw(uint amount, uint _amountOutMin_ethFeeBuyBack, uint _amountOutMin_tokenFeeBuyBack, uint deadline) external noContractsAllowed nonReentrant payable {\n', '        require(amount > 0, "invalid amount!");\n', '        require(amount <= depositTokenBalance[msg.sender], "Cannot withdraw more than deposited!");\n', '        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_DURATION, "You recently deposited, please wait before withdrawing.");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        depositTokenBalance[msg.sender] = depositTokenBalance[msg.sender].sub(amount);\n', '        totalDepositedTokens = totalDepositedTokens.sub(amount);\n', '        \n', '        uint oldCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint oldDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        require(CErc20(TRUSTED_CTOKEN_ADDRESS).redeemUnderlying(amount) == 0, "redeemUnderlying failed!");\n', '        uint newCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint newDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        \n', '        uint depositTokenReceived = newDepositTokenBalance.sub(oldDepositTokenBalance);\n', '        uint cTokenRedeemed = oldCTokenBalance.sub(newCTokenBalance);\n', '        \n', '        require(cTokenRedeemed <= cTokenBalance[msg.sender], "redeem exceeds balance!");\n', '        cTokenBalance[msg.sender] = cTokenBalance[msg.sender].sub(cTokenRedeemed);\n', '        totalCTokens = totalCTokens.sub(cTokenRedeemed);\n', '        decreaseTokenBalance(TRUSTED_CTOKEN_ADDRESS, cTokenRedeemed);\n', '        \n', '        totalTokensWithdrawnByUser[msg.sender] = totalTokensWithdrawnByUser[msg.sender].add(depositTokenReceived);\n', '        \n', '        uint feeAmount = depositTokenReceived.mul(FEE_PERCENT_X_100).div(ONE_HUNDRED_X_100);\n', '        uint depositTokenReceivedAfterFee = depositTokenReceived.sub(feeAmount);\n', '        \n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, depositTokenReceivedAfterFee);\n', '        \n', '        handleFee(feeAmount, _amountOutMin_tokenFeeBuyBack, deadline);\n', '        handleEthFee(msg.value, _amountOutMin_ethFeeBuyBack, deadline);\n', '        \n', '        if (depositTokenBalance[msg.sender] == 0) {\n', '            holders.remove(msg.sender);\n', '        }\n', '        \n', '        emit Withdraw(msg.sender, depositTokenReceived);\n', '    }\n', '    \n', '    // emergency withdraw without interacting with uniswap\n', '    function emergencyWithdraw(uint amount) external noContractsAllowed nonReentrant payable {\n', '        require(amount > 0, "invalid amount!");\n', '        require(amount <= depositTokenBalance[msg.sender], "Cannot withdraw more than deposited!");\n', '        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_DURATION, "You recently deposited, please wait before withdrawing.");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        depositTokenBalance[msg.sender] = depositTokenBalance[msg.sender].sub(amount);\n', '        totalDepositedTokens = totalDepositedTokens.sub(amount);\n', '        \n', '        uint oldCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint oldDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        require(CErc20(TRUSTED_CTOKEN_ADDRESS).redeemUnderlying(amount) == 0, "redeemUnderlying failed!");\n', '        uint newCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));\n', '        uint newDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));\n', '        \n', '        uint depositTokenReceived = newDepositTokenBalance.sub(oldDepositTokenBalance);\n', '        uint cTokenRedeemed = oldCTokenBalance.sub(newCTokenBalance);\n', '        \n', '        require(cTokenRedeemed <= cTokenBalance[msg.sender], "redeem exceeds balance!");\n', '        cTokenBalance[msg.sender] = cTokenBalance[msg.sender].sub(cTokenRedeemed);\n', '        totalCTokens = totalCTokens.sub(cTokenRedeemed);\n', '        decreaseTokenBalance(TRUSTED_CTOKEN_ADDRESS, cTokenRedeemed);\n', '        \n', '        totalTokensWithdrawnByUser[msg.sender] = totalTokensWithdrawnByUser[msg.sender].add(depositTokenReceived);\n', '        \n', '        uint feeAmount = depositTokenReceived.mul(FEE_PERCENT_X_100).div(ONE_HUNDRED_X_100);\n', '        uint depositTokenReceivedAfterFee = depositTokenReceived.sub(feeAmount);\n', '        \n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, depositTokenReceivedAfterFee);\n', '        \n', '        // no uniswap interaction\n', '        // handleFee(feeAmount, _amountOutMin_tokenFeeBuyBack, deadline);\n', '        // handleEthFee(msg.value, _amountOutMin_ethFeeBuyBack, deadline);\n', '        \n', '        if (depositTokenBalance[msg.sender] == 0) {\n', '            holders.remove(msg.sender);\n', '        }\n', '        \n', '        emit Withdraw(msg.sender, depositTokenReceived);\n', '    }\n', '    \n', '    function handleFee(uint feeAmount, uint _amountOutMin_tokenFeeBuyBack, uint deadline) private {\n', '        uint buyBackFeeAmount = feeAmount.mul(FEE_PERCENT_TO_BUYBACK_X_100).div(ONE_HUNDRED_X_100);\n', '        uint remainingFeeAmount = feeAmount.sub(buyBackFeeAmount);\n', '        \n', '        // handle distribution\n', '        distributeTokenDivs(remainingFeeAmount);\n', '        \n', '        \n', '        // handle buyback\n', '        // --- swap token to platform token here! ----\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(address(uniswapRouterV2), 0);\n', '        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(address(uniswapRouterV2), buyBackFeeAmount);\n', '        \n', '        uint oldPlatformTokenBalance = IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).balanceOf(address(this));\n', '        address[] memory path = new address[](3);\n', '        path[0] = TRUSTED_DEPOSIT_TOKEN_ADDRESS;\n', '        path[1] = uniswapRouterV2.WETH();\n', '        path[2] = TRUSTED_PLATFORM_TOKEN_ADDRESS;\n', '        \n', '        uniswapRouterV2.swapExactTokensForTokens(buyBackFeeAmount, _amountOutMin_tokenFeeBuyBack, path, address(this), deadline);\n', '        uint newPlatformTokenBalance = IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).balanceOf(address(this));\n', '        uint platformTokensReceived = newPlatformTokenBalance.sub(oldPlatformTokenBalance);\n', '        IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).safeTransfer(BURN_ADDRESS, platformTokensReceived);\n', '        // ---- end swap token to plaform tokens -----\n', '    }\n', '    \n', '    function handleEthFee(uint feeAmount, uint _amountOutMin_ethFeeBuyBack, uint deadline) private {\n', '        require(feeAmount >= MIN_ETH_FEE_IN_WEI, "Insufficient ETH Fee!");\n', '        uint buyBackFeeAmount = feeAmount.mul(FEE_PERCENT_TO_BUYBACK_X_100).div(ONE_HUNDRED_X_100);\n', '        uint remainingFeeAmount = feeAmount.sub(buyBackFeeAmount);\n', '        \n', '        // handle distribution\n', '        distributeEthDivs(remainingFeeAmount);\n', '        \n', '        \n', '        // handle buyback\n', '        \n', '        // --- swap eth to platform token here! ----\n', '        uint oldPlatformTokenBalance = IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).balanceOf(address(this));\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswapRouterV2.WETH();\n', '        path[1] = TRUSTED_PLATFORM_TOKEN_ADDRESS;\n', '        \n', '        uniswapRouterV2.swapExactETHForTokens{value: buyBackFeeAmount}(_amountOutMin_ethFeeBuyBack, path, address(this), deadline);\n', '        uint newPlatformTokenBalance = IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).balanceOf(address(this));\n', '        uint platformTokensReceived = newPlatformTokenBalance.sub(oldPlatformTokenBalance);\n', '        IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).safeTransfer(BURN_ADDRESS, platformTokensReceived);\n', '        // ---- end swap eth to plaform tokens -----\n', '    }\n', '    \n', '    receive () external payable {\n', '        // receive eth do nothing\n', '    }\n', '    \n', '    function increaseTokenBalance(address token, uint amount) private {\n', '        tokenBalances[token] = tokenBalances[token].add(amount);\n', '    }\n', '    function decreaseTokenBalance(address token, uint amount) private {\n', '        tokenBalances[token] = tokenBalances[token].sub(amount);\n', '    }\n', '    \n', '    function addPlatformTokenBalance(uint amount) external nonReentrant onlyOwner {\n', '        increaseTokenBalance(TRUSTED_PLATFORM_TOKEN_ADDRESS, amount);\n', '        IERC20(TRUSTED_PLATFORM_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amount);\n', '        \n', '        emit PlatformTokenAdded(amount);\n', '    }\n', '    \n', '    function claimExtraTokens(address token) external nonReentrant onlyOwner {\n', '        if (token == address(0)) {\n', '            uint ethDiff = address(this).balance.sub(tokenBalances[token]);\n', '            msg.sender.transfer(ethDiff);\n', '            return;\n', '        }\n', '        uint diff = IERC20(token).balanceOf(address(this)).sub(tokenBalances[token]);\n', '        IERC20(token).safeTransfer(msg.sender, diff);\n', '    }\n', '    \n', '    function claimAnyToken(address token, uint amount) external onlyOwner {\n', '        require(now > contractStartTime.add(ADMIN_CAN_CLAIM_AFTER), "Contract not expired yet!");\n', '        if (token == address(0)) {\n', '            msg.sender.transfer(amount);\n', '            return;\n', '        }\n', '        IERC20(token).safeTransfer(msg.sender, amount);\n', '    }\n', '}']