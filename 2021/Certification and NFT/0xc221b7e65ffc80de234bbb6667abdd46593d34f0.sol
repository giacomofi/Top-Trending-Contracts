['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', '// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico, lucasvo\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity >=0.5.15;\n', '\n', 'contract ERC20 {\n', '    // --- Auth ---\n', '    mapping (address => uint) public wards;\n', '    function rely(address usr) public auth { wards[usr] = 1; }\n', '    function deny(address usr) public auth { wards[usr] = 0; }\n', '    modifier auth { require(wards[msg.sender] == 1); _; }\n', '\n', '    // --- ERC20 Data ---\n', '    uint8   public constant decimals = 18;\n', '    string  public name;\n', '    string  public symbol;\n', '    string  public constant version = "1";\n', '    uint256 public totalSupply;\n', '\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public nonces;\n', '\n', '    mapping (address => uint)                      public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    event Approval(address indexed src, address indexed usr, uint wad);\n', '    event Transfer(address indexed src, address indexed dst, uint wad);\n', '\n', '    // --- Math ---\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-add-overflow");\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "math-sub-underflow");\n', '    }\n', '\n', '    constructor(string memory symbol_, string memory name_) public {\n', '        wards[msg.sender] = 1;\n', '        symbol = symbol_;\n', '        name = name_;\n', '\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', '                keccak256(bytes(version)),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    // --- ERC20 ---\n', '    function transfer(address dst, uint wad) external returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad, "cent/insufficient-balance");\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad, "cent/insufficient-allowance");\n', '            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n', '        }\n', '        balanceOf[src] = sub(balanceOf[src], wad);\n', '        balanceOf[dst] = add(balanceOf[dst], wad);\n', '        emit Transfer(src, dst, wad);\n', '        return true;\n', '    }\n', '    function mint(address usr, uint wad) external auth {\n', '        balanceOf[usr] = add(balanceOf[usr], wad);\n', '        totalSupply    = add(totalSupply, wad);\n', '        emit Transfer(address(0), usr, wad);\n', '    }\n', '    function burn(address usr, uint wad) public {\n', '        require(balanceOf[usr] >= wad, "cent/insufficient-balance");\n', '        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\n', '            require(allowance[usr][msg.sender] >= wad, "cent/insufficient-allowance");\n', '            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\n', '        }\n', '        balanceOf[usr] = sub(balanceOf[usr], wad);\n', '        totalSupply    = sub(totalSupply, wad);\n', '        emit Transfer(usr, address(0), wad);\n', '    }\n', '    function approve(address usr, uint wad) external returns (bool) {\n', '        allowance[msg.sender][usr] = wad;\n', '        emit Approval(msg.sender, usr, wad);\n', '        return true;\n', '    }\n', '\n', '    // --- Alias ---\n', '    function push(address usr, uint wad) external {\n', '        transferFrom(msg.sender, usr, wad);\n', '    }\n', '    function pull(address usr, uint wad) external {\n', '        transferFrom(usr, msg.sender, wad);\n', '    }\n', '    function move(address src, address dst, uint wad) external {\n', '        transferFrom(src, dst, wad);\n', '    }\n', '    function burnFrom(address usr, uint wad) external {\n', '        burn(usr, wad);\n', '    }\n', '\n', '    // --- Approve by signature ---\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', "        require(deadline >= block.timestamp, 'cent/past-deadline');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'cent-erc20/invalid-sig');\n", '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '}']