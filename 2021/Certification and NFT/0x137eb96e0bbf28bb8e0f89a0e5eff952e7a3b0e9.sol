['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Governed {\n', '    event NewGov(address oldGov, address newGov);\n', '    event NewPendingGov(address oldPendingGov, address newPendingGov);\n', '\n', '    address public gov;\n', '    address public pendingGov;\n', '\n', '    modifier onlyGov {\n', '        require(msg.sender == gov, "!gov");\n', '        _;\n', '    }\n', '\n', '    function _setPendingGov(address who)\n', '        public\n', '        onlyGov\n', '    {\n', '        address old = pendingGov;\n', '        pendingGov = who;\n', '        emit NewPendingGov(old, who);\n', '    }\n', '\n', '    function _acceptGov()\n', '        public\n', '    {\n', '        require(msg.sender == pendingGov, "!pendingGov");\n', '        address oldgov = gov;\n', '        gov = pendingGov;\n', '        pendingGov = address(0);\n', '        emit NewGov(oldgov, gov);\n', '    }\n', '}\n', '\n', 'contract SubGoverned is Governed {\n', '    /**\n', '     * @notice Event emitted when a sub gov is enabled/disabled\n', '     */\n', '    event SubGovModified(\n', '        address account,\n', '        bool isSubGov\n', '    );\n', '    /// @notice sub governors\n', '    mapping(address => bool) public isSubGov;\n', '\n', '    modifier onlyGovOrSubGov() {\n', '        require(msg.sender == gov || isSubGov[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function setIsSubGov(address subGov, bool _isSubGov)\n', '        public\n', '        onlyGov\n', '    {\n', '        isSubGov[subGov] = _isSubGov;\n', '        emit SubGovModified(subGov, _isSubGov);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       Position ENUM. Default is 0; External is 1\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's cash position details and external positions\n", "     * This data structure allows O(1) access to a component's cash position units and \n", '     * virtual units.\n', '     *\n', "     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n", '     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n', '     *                                  by dividing a "real" value by the "positionMultiplier"\n', '     * @param componentIndex            \n', '     * @param externalPositionModules   List of external modules attached to each external position. Each module\n', '     *                                  maps to an external position\n', '     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n', '     */\n', '    struct ComponentPosition {\n', '      int256 virtualUnit;\n', '      address[] externalPositionModules;\n', '      mapping(address => ExternalPosition) externalPositions;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's external position details including virtual unit and any\n", '     * auxiliary data.\n', '     *\n', "     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n", '     * @param data              Arbitrary data\n', '     */\n', '    struct ExternalPosition {\n', '      int256 virtualUnit;\n', '      bytes data;\n', '    }\n', '\n', '\n', '    /* ============ Functions ============ */\n', '    \n', '    function addComponent(address _component) external;\n', '    function removeComponent(address _component) external;\n', '    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n', '    function addExternalPositionModule(address _component, address _positionModule) external;\n', '    function removeExternalPositionModule(address _component, address _positionModule) external;\n', '    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n', '    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n', '    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n', '    function getComponents() external view returns(address[] memory);\n', '    function getExternalPositionModules(address _component) external view returns(address[] memory);\n', '    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n', '    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n', '    function isComponent(address _component) external view returns(bool);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getTotalComponentRealUnits(address _component) external view returns(int256);\n', '\n', '    function isInitializedModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', 'contract TreasuryManager is SubGoverned {\n', '    using Address for address;\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    /** @notice Throws if the sender is not allowed for this module */\n', '    modifier onlyAllowedForModule(address _user, address _module) {\n', '        require(\n', '            moduleAllowlist[_user][_module] || _user == gov,\n', '            "TreasuryManager::onlyAllowedForModule: User is not allowed for module"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    /** @notice  Set token this contract manages                     */\n', '    ISetToken public immutable setToken;\n', '\n', '    /** @notice  mapping of modules a caller is allowed to use       */\n', '    mapping(address => mapping(address => bool)) public moduleAllowlist;\n', '\n', '    /** @notice  mapping of allowed tokens                           */\n', '    mapping(address => bool) public allowedTokens;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event TokensAdded(address[] tokens);\n', '    event TokensRemoved(address[] tokens);\n', '    event ModulePermissionsUpdated(\n', '        address indexed user,\n', '        address indexed module,\n', '        bool allowed\n', '    );\n', '\n', '    constructor(\n', '        ISetToken _setToken,\n', '        address _gov,\n', '        address[] memory _allowedTokens\n', '    ) public {\n', '        setToken = _setToken;\n', '        gov = _gov;\n', '        addTokens(_allowedTokens);\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * @dev Gov ONLY\n', '     *\n', '     * @param _newManager       Manager to set on the set token\n', '     */\n', '    function setManager(address _newManager) external onlyGov {\n', '        setToken.setManager(_newManager);\n', '    }\n', '\n', '    /**\n', '     * @dev Gov ONLY\n', '     *\n', '     * @param _module           Module to add to the set token\n', '     */\n', '    function addModule(address _module) external onlyGov {\n', '        setToken.addModule(_module);\n', '    }\n', '\n', '    /**\n', '     * @dev Gov\n', '     *\n', '     * @param _module           Module to remove\n', '     */\n', '    function removeModule(address _module) external onlyGov {\n', '        setToken.removeModule(_module);\n', '    }\n', '\n', '    /**\n', '     * @dev Only allowed for module\n', '     *\n', '     * @param _module           Module to interact with\n', '     * @param _data             Byte data of function to call in module\n', '     */\n', '    function interactModule(address _module, bytes calldata _data)\n', '        external\n', '        onlyAllowedForModule(msg.sender, _module)\n', '    {\n', '        // Invoke call to module, assume value will always be 0\n', '        _module.functionCallWithValue(_data, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Gov ONLY. Updates whether a module + adapter combo are allowed\n', '     *\n', '     * @param _module                    The module to allow this adapter with\n', '     * @param _caller                    The caller to allow to use this module\n', '     */\n', '    function setModuleAllowed(\n', '        address _caller,\n', '        address _module,\n', '        bool allowed\n', '    ) external onlyGov {\n', '        moduleAllowlist[_caller][_module] = allowed;\n', '        emit ModulePermissionsUpdated(_caller, _module, allowed);\n', '    }\n', '\n', '    /**\n', '     * @dev Gov ONLY. Enables a list of tokens for trading/wrapping to\n', '     *\n', '     * @param _tokens                    The list of tokens to add\n', '     */\n', '    function addTokens(address[] memory _tokens) public onlyGov {\n', '        for (uint256 index = 0; index < _tokens.length; index++) {\n', '            allowedTokens[_tokens[index]] = true;\n', '        }\n', '        emit TokensAdded(_tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Gov ONLY. Disables a list of tokens from trading/wrapping to\n', '     *\n', '     * @param _tokens                    The list of tokens to remove\n', '     */\n', '    function removeTokens(address[] memory _tokens) external onlyGov {\n', '        for (uint256 index = 0; index < _tokens.length; index++) {\n', '            allowedTokens[_tokens[index]] = false;\n', '        }\n', '        emit TokensRemoved(_tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether a token is allowed\n', '     *\n', '     * @param _token                    The token to check if it is allowed\n', '     */\n', '    function isTokenAllowed(address _token)\n', '        external\n', '        view\n', '        returns (bool allowed)\n', '    {\n', '        return allowedTokens[_token];\n', '    }\n', '}\n', '\n', 'contract BaseAdapter {\n', '    TreasuryManager public manager;\n', '    ISetToken public setToken;\n', '\n', '    constructor(ISetToken _setToken, TreasuryManager _manager) public {\n', '        setToken = _setToken;\n', '        manager = _manager;\n', '    }\n', '\n', '    modifier onlyGovOrSubGov() {\n', '        require(\n', '            manager.gov() == msg.sender || manager.isSubGov(msg.sender),\n', '            "BaseAdapter::onlyGovOrSubGov: Invalid permissions"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyGov() {\n', '        require(\n', '            manager.gov() == msg.sender,\n', '            "BaseAdapter::onlyGov: Invalid permissions"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', 'interface IWrapModule {\n', '    function wrap(\n', '        ISetToken _setToken,\n', '        address _underlyingToken,\n', '        address _wrappedToken,\n', '        uint256 _underlyingUnits,\n', '        string calldata _integrationName\n', '    ) external;\n', '\n', '    function wrapWithEther(\n', '        ISetToken _setToken,\n', '        address _wrappedToken,\n', '        uint256 _underlyingUnits,\n', '        string calldata _integrationName\n', '    ) external;\n', '\n', '    function unwrap(\n', '        ISetToken _setToken,\n', '        address _underlyingToken,\n', '        address _wrappedToken,\n', '        uint256 _wrappedUnits,\n', '        string calldata _integrationName\n', '    ) external;\n', '\n', '    function unwrapWithEther(\n', '        ISetToken _setToken,\n', '        address _wrappedToken,\n', '        uint256 _wrappedUnits,\n', '        string calldata _integrationName\n', '    ) external;\n', '\n', '    function initialize(ISetToken _setToken) external;\n', '}\n', '\n', 'contract WrapAdapter is BaseAdapter {\n', '    IWrapModule public module;\n', '\n', '    constructor(\n', '        ISetToken _setToken,\n', '        TreasuryManager _manager,\n', '        IWrapModule _module\n', '    ) public BaseAdapter(_setToken, _manager) {\n', '        module = _module;\n', '    }\n', '\n', '    /**\n', "     * @dev Only can invoke modules. This function will revert if the wrappedToken isn't on the allowed list\n", '     *\n', '     * @param _integrationName          The name of the integration to interact with\n', '     * @param _underlyingToken          The token to wrap\n', '     * @param _wrappedToken             The token to get after wrapping\n', '     * @param _underlyingUnits          The amount of underlyingToken to wrap\n', '     */\n', '    function wrap(\n', '        string memory _integrationName,\n', '        address _underlyingToken,\n', '        address _wrappedToken,\n', '        uint256 _underlyingUnits\n', '    ) external onlyGovOrSubGov {\n', '        require(\n', '            manager.isTokenAllowed(_wrappedToken),\n', '            "WrapAdapter::wrap: _wrappedToken is not on the allowed list"\n', '        );\n', '        bytes memory encoded = abi.encodeWithSelector(\n', '            module.wrap.selector,\n', '            setToken,\n', '            _underlyingToken,\n', '            _wrappedToken,\n', '            _underlyingUnits,\n', '            _integrationName\n', '        );\n', '\n', '        manager.interactModule(address(module), encoded);\n', '    }\n', '\n', '    /**\n', "     * @dev Only can invoke modules. This function will revert if the underlyingToken isn't on the allowed list\n", '     *\n', '     * @param _integrationName          The name of the integration to interact with\n', '     * @param _underlyingToken          The underlying token to receive\n', '     * @param _wrappedToken             The token to unwrap\n', '     * @param _wrappedUnits             The amount of wrapped tokens to unwrap\n', '     */\n', '    function unwrap(\n', '        string memory _integrationName,\n', '        address _underlyingToken,\n', '        address _wrappedToken,\n', '        uint256 _wrappedUnits\n', '    ) external onlyGovOrSubGov {\n', '        require(\n', '            manager.isTokenAllowed(_underlyingToken),\n', '            "WrapAdapter::unwrap: _underlyingToken is not on the allowed list"\n', '        );\n', '        bytes memory encoded = abi.encodeWithSelector(\n', '            module.unwrap.selector,\n', '            address(setToken),\n', '            _underlyingToken,\n', '            _wrappedToken,\n', '            _wrappedUnits,\n', '            _integrationName\n', '        );\n', '\n', '        manager.interactModule(address(module), encoded);\n', '    }\n', '}']