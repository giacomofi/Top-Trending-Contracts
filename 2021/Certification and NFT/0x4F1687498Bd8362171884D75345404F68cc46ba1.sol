['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', "import '../math/MixedSafeMathWithUnit.sol';\n", '\n', 'contract ChainlinkOracle {\n', '\n', '    using MixedSafeMathWithUnit for uint256;\n', '    using MixedSafeMathWithUnit for int256;\n', '\n', '    string  public symbol;\n', '    address public immutable oracle;\n', '    uint256 public immutable decimals;\n', '\n', '    constructor (string memory symbol_, address oracle_) {\n', '        symbol = symbol_;\n', '        oracle = oracle_;\n', '        decimals = IChainlink(oracle_).decimals();\n', '    }\n', '\n', '    function getPrice() external view returns (uint256) {\n', '        uint256 price = IChainlink(oracle).latestAnswer().itou().mul(uint256(10**18)).div(uint256(10**decimals));\n', '        return price;\n', '    }\n', '\n', '}\n', '\n', 'interface IChainlink {\n', '    function decimals() external view returns (uint8);\n', '    function latestAnswer() external view returns (int256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title Mixed safe math with base unit of 10**18\n', ' */\n', 'library MixedSafeMathWithUnit {\n', '\n', '    uint256 constant UONE = 10**18;\n', '    uint256 constant UMAX = 2**255 - 1;\n', '\n', '    int256 constant IONE = 10**18;\n', '    int256 constant IMIN = -2**255;\n', '\n', '    //================================================================================\n', '    // Conversions\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Convert uint256 to int256\n', '     */\n', '    function utoi(uint256 a) internal pure returns (int256) {\n', '        require(a <= UMAX, "MixedSafeMathWithUnit: convert uint256 to int256 overflow");\n', '        int256 b = int256(a);\n', '        return b;\n', '    }\n', '\n', '    /**\n', '     * @dev Convert int256 to uint256\n', '     */\n', '    function itou(int256 a) internal pure returns (uint256) {\n', '        require(a >= 0, "MixedSafeMathWithUnit: convert int256 to uint256 overflow");\n', '        uint256 b = uint256(a);\n', '        return b;\n', '    }\n', '\n', '    /**\n', '     * @dev Take abs of int256\n', '     */\n', '    function abs(int256 a) internal pure returns (int256) {\n', '        require(a != IMIN, "MixedSafeMathWithUnit: int256 abs overflow");\n', '        if (a >= 0) {\n', '            return a;\n', '        } else {\n', '            return -a;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Take negation of int256\n', '     */\n', '    function neg(int256 a) internal pure returns (int256) {\n', '        require(a != IMIN, "MixedSafeMathWithUnit: int256 negate overflow");\n', '        return -a;\n', '    }\n', '\n', '    //================================================================================\n', '    // Rescale and reformat\n', '    //================================================================================\n', '\n', '    function _rescale(uint256 a, uint256 decimals1, uint256 decimals2)\n', '        internal pure returns (uint256)\n', '    {\n', '        uint256 scale1 = 10 ** decimals1;\n', '        uint256 scale2 = 10 ** decimals2;\n', '        uint256 b = a * scale2;\n', '        require(b / scale2 == a, "MixedSafeMathWithUnit: rescale uint256 overflow");\n', '        uint256 c = b / scale1;\n', '        return c;\n', '    }\n', '\n', '    function _rescale(int256 a, uint256 decimals1, uint256 decimals2)\n', '        internal pure returns (int256)\n', '    {\n', '        int256 scale1 = utoi(10 ** decimals1);\n', '        int256 scale2 = utoi(10 ** decimals2);\n', '        int256 b = a * scale2;\n', '        require(b / scale2 == a, "MixedSafeMathWithUnit: rescale int256 overflow");\n', '        int256 c = b / scale1;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescales a value from 10**18 base to 10**decimals base\n', '     */\n', '    function rescale(uint256 a, uint256 decimals) internal pure returns (uint256) {\n', '        return _rescale(a, 18, decimals);\n', '    }\n', '\n', '    function rescale(int256 a, uint256 decimals) internal pure returns (int256) {\n', '        return _rescale(a, 18, decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Reformat a value to be a valid 10**decimals base value\n', '     * The formatted value is still in 10**18 base\n', '     */\n', '    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\n', '        return _rescale(_rescale(a, 18, decimals), decimals, 18);\n', '    }\n', '\n', '    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\n', '        return _rescale(_rescale(a, 18, decimals), decimals, 18);\n', '    }\n', '\n', '\n', '    //================================================================================\n', '    // Addition\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Addition: uint256 + uint256\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "MixedSafeMathWithUnit: uint256 addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: int256 + int256\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require(\n', '            (b >= 0 && c >= a) || (b < 0 && c < a),\n', '            "MixedSafeMathWithUnit: int256 addition overflow"\n', '        );\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: uint256 + int256\n', '     * uint256(-b) will not overflow when b is IMIN\n', '     */\n', '    function add(uint256 a, int256 b) internal pure returns (uint256) {\n', '        if (b >= 0) {\n', '            return add(a, uint256(b));\n', '        } else {\n', '            return sub(a, uint256(-b));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: int256 + uint256\n', '     */\n', '    function add(int256 a, uint256 b) internal pure returns (int256) {\n', '        return add(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Subtraction\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Subtraction: uint256 - uint256\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(a >= b, "MixedSafeMathWithUnit: uint256 subtraction overflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: int256 - int256\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require(\n', '            (b >= 0 && c <= a) || (b < 0 && c > a),\n', '            "MixedSafeMathWithUnit: int256 subtraction overflow"\n', '        );\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: uint256 - int256\n', '     * uint256(-b) will not overflow when b is IMIN\n', '     */\n', '    function sub(uint256 a, int256 b) internal pure returns (uint256) {\n', '        if (b >= 0) {\n', '            return sub(a, uint256(b));\n', '        } else {\n', '            return add(a, uint256(-b));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: int256 - uint256\n', '     */\n', '    function sub(int256 a, uint256 b) internal pure returns (int256) {\n', '        return sub(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Multiplication\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Multiplication: uint256 * uint256\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero,\n", "        // but the benefit is lost if 'b' is also tested\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MixedSafeMathWithUnit: uint256 multiplication overflow");\n', '        return c / UONE;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: int256 * int256\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero,\n", "        // but the benefit is lost if 'b' is also tested\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        require(!(a == -1 && b == IMIN), "MixedSafeMathWithUnit: int256 multiplication overflow");\n', '        int256 c = a * b;\n', '        require(c / a == b, "MixedSafeMathWithUnit: int256 multiplication overflow");\n', '        return c / IONE;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: uint256 * int256\n', '     */\n', '    function mul(uint256 a, int256 b) internal pure returns (uint256) {\n', '        return mul(a, itou(b));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: int256 * uint256\n', '     */\n', '    function mul(int256 a, uint256 b) internal pure returns (int256) {\n', '        return mul(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Division\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Division: uint256 / uint256\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "MixedSafeMathWithUnit: uint256 division by zero");\n', '        uint256 c = a * UONE;\n', '        require(\n', '            c / UONE == a,\n', '            "MixedSafeMathWithUnit: uint256 division internal multiplication overflow"\n', '        );\n', '        uint256 d = c / b;\n', '        return d;\n', '    }\n', '\n', '    /**\n', '     * @dev Division: int256 / int256\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "MixedSafeMathWithUnit: int256 division by zero");\n', '        int256 c = a * IONE;\n', '        require(\n', '            c / IONE == a,\n', '            "MixedSafeMathWithUnit: int256 division internal multiplication overflow"\n', '        );\n', '        require(!(c == IMIN && b == -1), "MixedSafeMathWithUnit: int256 division overflow");\n', '        int256 d = c / b;\n', '        return d;\n', '    }\n', '\n', '    /**\n', '     * @dev Division: uint256 / int256\n', '     */\n', '    function div(uint256 a, int256 b) internal pure returns (uint256) {\n', '        return div(a, itou(b));\n', '    }\n', '\n', '    /**\n', '     * @dev Division: int256 / uint256\n', '     */\n', '    function div(int256 a, uint256 b) internal pure returns (int256) {\n', '        return div(a, utoi(b));\n', '    }\n', '\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']