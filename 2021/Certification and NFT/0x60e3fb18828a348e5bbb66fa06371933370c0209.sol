['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.8.5;\n', '\n', 'contract ConditionalVault {\n', '    address payable public immutable recipient;\n', '    address payable public immutable overflow;\n', '    uint256 public immutable threshold;\n', '\n', '    constructor(\n', '        address payable recipient_,\n', '        address payable overflow_,\n', '        uint256 threshold_\n', '    ) {\n', '        recipient = recipient_;\n', '        overflow = overflow_;\n', '        threshold = threshold_;\n', '    }\n', '\n', '    function transfer() public {\n', '        uint256 balance = address(this).balance;\n', '\n', '        if (balance > threshold) {\n', '            _sendFunds(overflow, balance - threshold);\n', '            _sendFunds(recipient, threshold);\n', '        } else {\n', '            _sendFunds(recipient, balance);\n', '        }\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    // ============ Private Utils ============\n', '\n', '    function _sendFunds(address payable to, uint256 amount) private {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Insufficient balance for send"\n', '        );\n', '\n', '        (bool success, ) = to.call{value: amount}("");\n', '        require(success, "Unable to send value: recipient may have reverted");\n', '    }\n', '}']