['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.11 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addCK(address _ckToken) external;\n', '    function feeRecipient() external view returns(address);\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isCK(address _ckToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function resourceId(uint256 _id) external view returns(address);\n', '}\n', '\n', '\n', '// File contracts/interfaces/external/IUniswapV2Pair.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/external/IUniswapV2Factory.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Cook Finance\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number.\n', '     * (positive values are rounded towards zero and negative values are rounded away from 0).\n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number.\n', '     * (positive values are rounded towards zero and negative values are rounded away from 0).\n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if a =~ b within range, false otherwise.\n', '     */\n', '    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\n', '        return a <= b.add(range) && a >= b.sub(range);\n', '    }\n', '}\n', '\n', '\n', '// File external/contracts/uniswap/lib/UniswapV2Library.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', '                hex"ff",\n', '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '                hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// File hardhat/[email\xa0protected]\n', '\n', 'pragma solidity >= 0.4.22 <0.9.0;\n', '\n', 'library console {\n', '\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '\tfunction _sendLogPayload(bytes memory payload) private view {\n', '\t\tuint256 payloadLength = payload.length;\n', '\t\taddress consoleAddress = CONSOLE_ADDRESS;\n', '\t\tassembly {\n', '\t\t\tlet payloadStart := add(payload, 32)\n', '\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n', '\t\t}\n', '\t}\n', '\n', '\tfunction log() internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log()"));\n', '\t}\n', '\n', '\tfunction logInt(int p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '\t}\n', '\n', '\tfunction logUint(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction logString(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction logBool(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction logAddress(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction logBytes(bytes memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '\t}\n', '\n', '\tfunction logBytes1(bytes1 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '\t}\n', '\n', '\tfunction logBytes2(bytes2 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '\t}\n', '\n', '\tfunction logBytes3(bytes3 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '\t}\n', '\n', '\tfunction logBytes4(bytes4 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '\t}\n', '\n', '\tfunction logBytes5(bytes5 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '\t}\n', '\n', '\tfunction logBytes6(bytes6 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '\t}\n', '\n', '\tfunction logBytes7(bytes7 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '\t}\n', '\n', '\tfunction logBytes8(bytes8 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '\t}\n', '\n', '\tfunction logBytes9(bytes9 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '\t}\n', '\n', '\tfunction logBytes10(bytes10 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '\t}\n', '\n', '\tfunction logBytes11(bytes11 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '\t}\n', '\n', '\tfunction logBytes12(bytes12 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '\t}\n', '\n', '\tfunction logBytes13(bytes13 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '\t}\n', '\n', '\tfunction logBytes14(bytes14 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '\t}\n', '\n', '\tfunction logBytes15(bytes15 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '\t}\n', '\n', '\tfunction logBytes16(bytes16 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '\t}\n', '\n', '\tfunction logBytes17(bytes17 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '\t}\n', '\n', '\tfunction logBytes18(bytes18 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '\t}\n', '\n', '\tfunction logBytes19(bytes19 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '\t}\n', '\n', '\tfunction logBytes20(bytes20 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '\t}\n', '\n', '\tfunction logBytes21(bytes21 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '\t}\n', '\n', '\tfunction logBytes22(bytes22 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '\t}\n', '\n', '\tfunction logBytes23(bytes23 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '\t}\n', '\n', '\tfunction logBytes24(bytes24 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '\t}\n', '\n', '\tfunction logBytes25(bytes25 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '\t}\n', '\n', '\tfunction logBytes26(bytes26 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '\t}\n', '\n', '\tfunction logBytes27(bytes27 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '\t}\n', '\n', '\tfunction logBytes28(bytes28 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '\t}\n', '\n', '\tfunction logBytes29(bytes29 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '\t}\n', '\n', '\tfunction logBytes30(bytes30 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '\t}\n', '\n', '\tfunction logBytes31(bytes31 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '\t}\n', '\n', '\tfunction logBytes32(bytes32 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction log(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction log(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction log(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File contracts/protocol/integration/oracles/UniswapV2AssetPriceAdapter.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract UniswapV2AssetPriceAdapter is Ownable {\n', '    using PreciseUnitMath for uint256;\n', '    using PreciseUnitMath for uint;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Instance of the Controller contract\n', '    IController public controller;\n', '\n', '    // Address of Uniswap V2 factory\n', '    IUniswapV2Factory public uniswapV2Factory;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _controller         Instance of controller contract\n', '     * @param _uniswapFactory     Address of Uniswap factory\n', '     */\n', '    constructor(\n', '        IController _controller,\n', '        IUniswapV2Factory _uniswapFactory\n', '    )\n', '        public\n', '    {\n', '        controller = _controller;\n', '        uniswapV2Factory = _uniswapFactory;\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * Calculate price from Uniswap. Note: must be system contract to be able to retrieve price. If pair not exist, return false.\n', '     *\n', '     * @param _assetOne         Address of first asset in pair\n', '     * @param _assetTwo         Address of second asset in pair\n', '     */\n', '    function getPrice(address _assetOne, address _assetTwo) external view returns (bool, uint256) {\n', '        require(controller.isSystemContract(msg.sender), "Must be system contract");\n', '        address pairAddress = uniswapV2Factory.getPair(_assetOne, _assetTwo);\n', "        // return 0 if the pair doesn't exist\n", '        if (pairAddress == address(0)) {\n', '            return (false, 0);\n', '        }\n', '        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n', '        (uint256 token0Reserves, uint256 token1Reserves) = UniswapV2Library.getReserves(address(uniswapV2Factory), _assetOne, _assetTwo);\n', '        uint256 normalizedToken0Reserves = token0Reserves.preciseDiv(uint256(10).safePower(uint256(ERC20(pair.token0()).decimals())));\n', '        uint256 normalizedToken1Reserves = token1Reserves.preciseDiv(uint256(10).safePower(uint256(ERC20(pair.token1()).decimals())));\n', '        if (_assetOne == pair.token0()) {\n', '            return (true, normalizedToken1Reserves.preciseDiv(normalizedToken0Reserves));\n', '        } else {\n', '            return (true, normalizedToken0Reserves.preciseDiv(normalizedToken1Reserves));\n', '        }\n', '    }\n', '}']