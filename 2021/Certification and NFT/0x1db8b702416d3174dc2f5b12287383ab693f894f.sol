['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity =0.6.12 >=0.6.12 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/CollateralOpts.sol\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'struct CollateralOpts {\n', '    bytes32 ilk;\n', '    address gem;\n', '    address join;\n', '    address flip;\n', '    address pip;\n', '    bool    isLiquidatable;\n', '    bool    isOSM;\n', '    bool    whitelistOSM;\n', '    uint256 ilkDebtCeiling;\n', '    uint256 minVaultAmount;\n', '    uint256 maxLiquidationAmount;\n', '    uint256 liquidationPenalty;\n', '    uint256 ilkStabilityFee;\n', '    uint256 bidIncrease;\n', '    uint256 bidDuration;\n', '    uint256 auctionDuration;\n', '    uint256 liquidationRatio;\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.12; */\n', '/* pragma experimental ABIEncoderV2; */\n', '\n', '/* import { CollateralOpts } from "./CollateralOpts.sol"; */\n', '\n', 'interface Initializable {\n', '    function init(bytes32) external;\n', '}\n', '\n', 'interface Authorizable {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', 'interface Drippable {\n', '    function drip() external returns (uint256);\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface Pricing {\n', '    function poke(bytes32) external;\n', '}\n', '\n', 'interface ERC20 {\n', '    function decimals() external returns (uint8);\n', '}\n', '\n', 'interface DssVat {\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n', '    function Line() external view returns (uint256);\n', '    function suck(address, address, uint) external;\n', '}\n', '\n', 'interface AuctionLike {\n', '    function vat() external returns (address);\n', '    function cat() external returns (address); // Only flip\n', '    function beg() external returns (uint256);\n', '    function pad() external returns (uint256); // Only flop\n', '    function ttl() external returns (uint256);\n', '    function tau() external returns (uint256);\n', '    function ilk() external returns (bytes32); // Only flip\n', '    function gem() external returns (bytes32); // Only flap/flop\n', '}\n', '\n', 'interface JoinLike {\n', '    function vat() external returns (address);\n', '    function ilk() external returns (bytes32);\n', '    function gem() external returns (address);\n', '    function dec() external returns (uint256);\n', '    function join(address, uint) external;\n', '    function exit(address, uint) external;\n', '}\n', '\n', '// Includes Median and OSM functions\n', 'interface OracleLike_2 {\n', '    function src() external view returns (address);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', 'interface MomLike {\n', '    function setOsm(bytes32, address) external;\n', '}\n', '\n', 'interface RegistryLike {\n', '    function add(address) external;\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, address, address, address, address\n', '    );\n', '    function ilkData(bytes32) external view returns (\n', '        uint256       pos,\n', '        address       gem,\n', '        address       pip,\n', '        address       join,\n', '        address       flip,\n', '        uint256       dec,\n', '        string memory name,\n', '        string memory symbol\n', '    );\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface IAMLike {\n', '    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n', '    function setIlk(bytes32,uint256,uint256,uint256) external;\n', '    function remIlk(bytes32) external;\n', '    function exec(bytes32) external returns (uint256);\n', '}\n', '\n', 'library DssExecLib {\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '    function vat()        public view returns (address) {}\n', '    function cat()        public view returns (address) {}\n', '    function pot()        public view returns (address) {}\n', '    function vow()        public view returns (address) {}\n', '    function end()        public view returns (address) {}\n', '    function reg()        public view returns (address) {}\n', '    function spotter()    public view returns (address) {}\n', '    function flipperMom() public view returns (address) {}\n', '    function flip(bytes32) public view returns (address) {}\n', '    function getChangelogAddress(bytes32) public view returns (address) {}\n', '    function setChangelogAddress(bytes32, address) public {}\n', '    function setChangelogVersion(string memory) public {}\n', '    function authorize(address, address) public {}\n', '    function deauthorize(address, address) public {}\n', '    function canCast(uint40, bool) public pure returns (bool) {}\n', '    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\n', '    function setContract(address, bytes32, address) public {}\n', '    function setContract(address, bytes32, bytes32, address) public {}\n', '    function setIlkStabilityFee(bytes32, uint256, bool) public {}\n', '    function setIlkLiquidationRatio(bytes32, uint256) public {}\n', '    function increaseGlobalDebtCeiling(uint256) public {}\n', '    function increaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\n', '    function addWritersToMedianWhitelist(address, address[] memory) public {}\n', '    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function addReaderToMedianWhitelist(address, address) public {}\n', '    function addReaderToOSMWhitelist(address, address) public {}\n', '    function removeReaderFromOSMWhitelist(address, address) public {}\n', '    function sendPaymentFromSurplusBuffer(address, uint256) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '/* import { CollateralOpts } from "./CollateralOpts.sol"; */\n', '\n', 'interface OracleLike_1 {\n', '    function src() external view returns (address);\n', '}\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Modifier used to limit execution time when office hours is enabled\n', '    modifier limited {\n', '        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Returns the next available cast time\n', '    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n', '        require(eta <= uint40(-1));\n', '        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '    function nextCastTime(uint256) external view returns (uint256);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        return SpellAction(action).nextCastTime(eta);\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import {Fileable} from "dss-exec-lib/DssExecLib.sol"; */\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/d2eaa6d2b4ac8e286b998e8e1c2177fcd7733e8d/governance/votes/Executive%20vote%20-%20June%2011%2C%202021.md -q -O - 2> /dev/null)"\n', '    string public constant description =\n', '        "2021-06-11 MakerDAO Executive Spell | Hash: 0x46e7883cb0adb7713ff078bea1ec97d1fbd0ee6cfab17e0f48083c171ad27a4f";\n', '\n', '    uint256 constant RAY = 10**27;\n', '    uint256 constant RAD = 10**45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '    uint256 constant POINT_FIVE_PCT       = 1000000000158153903837946257;\n', '    uint256 constant ONE_PCT              = 1000000000315522921573372069;\n', '    uint256 constant TWO_PCT              = 1000000000627937192491029810;\n', '    uint256 constant TWO_POINT_FIVE_PCT   = 1000000000782997609082909351;\n', '    uint256 constant THREE_PCT            = 1000000000937303470807876289;\n', '    uint256 constant THREE_POINT_FIVE_PCT = 1000000001090862085746321732;\n', '    uint256 constant FOUR_PCT             = 1000000001243680656318820312;\n', '    uint256 constant NINE_PCT             = 1000000002732676825177582095;\n', '\n', '    function actions() public override {\n', '        address MCD_DOG               = DssExecLib.getChangelogAddress("MCD_DOG");\n', '        address YEARN_UNI_OSM_READER  = 0x6987e6471D4e7312914Edce4a6f92737C5fd0A8A;\n', '        address YEARN_LINK_OSM_READER = 0xCd73F1Ed2b1078EA35DAB29a8B35d335e0137c83;\n', '        address YEARN_AAVE_OSM_READER = 0x17b20900320D7C23866203cA6808F857B2b3fdA3;\n', '        address YEARN_COMP_OSM_READER = 0x4e9452CD5ba694de87ea1d791aBfdc4a250800f4;\n', '\n', '        // ----------------------------- Ilk AutoLine Updates ---------------------------\n', '        //                                  ilk               DC              gap          ttl\n', '        DssExecLib.setIlkAutoLineParameters("ETH-A",          15_000_000_000, 100_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("ETH-B",             300_000_000,  10_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("ETH-C",           2_000_000_000, 100_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("BAT-A",               7_000_000,   1_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("WBTC-A",            750_000_000,  30_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("ZRX-A",               3_000_000,     500_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("MANA-A",              5_000_000,   1_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("COMP-A",             20_000_000,   2_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("LRC-A",               3_000_000,     500_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("LINK-A",            140_000_000,   7_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("BAL-A",              30_000_000,   3_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("YFI-A",             130_000_000,   7_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNI-A",              50_000_000,   5_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("RENBTC-A",           10_000_000,   1_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("AAVE-A",             50_000_000,   5_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2DAIETH-A",      50_000_000,   5_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2WBTCETH-A",     20_000_000,   3_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2USDCETH-A",     50_000_000,   5_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2DAIUSDC-A",     50_000_000,  10_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2ETHUSDT-A",     10_000_000,   2_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2LINKETH-A",     20_000_000,   2_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2UNIETH-A",      20_000_000,   3_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2WBTCDAI-A",     20_000_000,   3_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2AAVEETH-A",     20_000_000,   2_000_000, 8 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2DAIUSDT-A",     10_000_000,   2_000_000, 8 hours);\n', '\n', '        // ----------------------------- Stability Fee updates --------------------------\n', '        DssExecLib.setIlkStabilityFee("ETH-A", THREE_POINT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("ETH-B", NINE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("ETH-C", ONE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("WBTC-A", THREE_POINT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("LINK-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("YFI-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNI-A", TWO_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("AAVE-A", TWO_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("BAT-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("RENBTC-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIETH-A", TWO_POINT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2USDCETH-A", THREE_POINT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2WBTCETH-A", THREE_POINT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2UNIETH-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2ETHUSDT-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2LINKETH-A", THREE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2AAVEETH-A", THREE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIUSDT-A", TWO_PCT, true);\n', '\n', '        // ----------------------------- UNIV2DAIUSDC-A SF and CR -----------------------\n', '        DssExecLib.setIlkLiquidationRatio("UNIV2DAIUSDC-A", 10200);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIUSDC-A", POINT_FIVE_PCT, true);\n', '\n', '        // ----------------------------- ETH Auction Params -----------------------------\n', '        Fileable(MCD_DOG).file("ETH-A", "hole", 30_000_000 * RAD);\n', '        Fileable(MCD_DOG).file("ETH-B", "hole", 15_000_000 * RAD);\n', '        Fileable(MCD_DOG).file("ETH-C", "hole", 20_000_000 * RAD);\n', '        Fileable(DssExecLib.getChangelogAddress("MCD_CLIP_CALC_ETH_B")).file(\n', '            "step", 60 seconds\n', '        );\n', '        Fileable(DssExecLib.getChangelogAddress("MCD_CLIP_ETH_B")).file(\n', '            "buf", 120 * RAY / 100\n', '        );\n', '\n', '        // ----------------------------- Yearn OSM Whitelist ----------------------------\n', '        DssExecLib.addReaderToOSMWhitelist(\n', '            DssExecLib.getChangelogAddress("PIP_UNI"), YEARN_UNI_OSM_READER\n', '        );\n', '        DssExecLib.addReaderToOSMWhitelist(\n', '            DssExecLib.getChangelogAddress("PIP_LINK"), YEARN_LINK_OSM_READER\n', '        );\n', '        DssExecLib.addReaderToOSMWhitelist(\n', '            DssExecLib.getChangelogAddress("PIP_AAVE"), YEARN_AAVE_OSM_READER\n', '        );\n', '        DssExecLib.addReaderToOSMWhitelist(\n', '            DssExecLib.getChangelogAddress("PIP_COMP"), YEARN_COMP_OSM_READER\n', '        );\n', '\n', '        // -------------------------------- PSM-USDC-A line --------------------------------\n', '        // https://ipfs.io/ipfs/QmYhDkCvxBz3TRLGztY2gDPu4SkjQ6FEFtXp4fmKgFSxrb\n', '        DssExecLib.increaseIlkDebtCeiling("PSM-USDC-A", 1_000_000_000, true); // From to 3B to 4B\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']