['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', '    helper methods for interacting with ERC20 tokens that do not consistently return true/false\n', '    with the addition of a transfer function to send eth or an erc20 token\n', '*/\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '    \n', '    // sends ETH or an erc20 token\n', '    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\n', '        if (!isERC20) {\n', '            to.transfer(value);\n', '        } else {\n', '            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '        }\n', '    }\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\n', '// Subject to the MIT license.\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', '// Subject to the MIT license.\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n', '// Subject to the MIT license.\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// SpacePort v.1\n', 'interface IPlasmaswapFactory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface ISpaceportLockForwarder {\n', '    function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external;\n', '    function plasmaswapPairIsInitialised (address _token0, address _token1) external view returns (bool);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface ISpaceportSettings {\n', '    function getMaxSpaceportLength () external view returns (uint256);\n', '    function getRound1Length () external view returns (uint256);\n', '    function userHoldsSufficientRound1Token (address _user) external view returns (bool);\n', '    function getBaseFee () external view returns (uint256);\n', '    function getTokenFee () external view returns (uint256);\n', '    function getEthAddress () external view returns (address payable);\n', '    function getTokenAddress () external view returns (address payable);\n', '    function getEthCreationFee () external view returns (uint256);\n', '}\n', '\n', 'contract Spaceportv1 is ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '  \n', '  event spaceportUserDeposit(uint256 value);\n', '  event spaceportUserWithdrawTokens(uint256 value);\n', '  event spaceportUserWithdrawBaseTokens(uint256 value);\n', '  event spaceportOwnerWithdrawTokens();\n', '  event spaceportAddLiquidity();\n', '\n', '  /// @notice Spaceport Contract Version, used to choose the correct ABI to decode the contract\n', '  uint256 public CONTRACT_VERSION = 1;\n', '  \n', '  struct SpaceportInfo {\n', '    address payable SPACEPORT_OWNER;\n', '    IERC20 S_TOKEN; // sale token\n', '    IERC20 B_TOKEN; // base token // usually WETH (ETH)\n', '    uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\n', '    uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\n', '    uint256 AMOUNT; // the amount of spaceport tokens up for presale\n', '    uint256 HARDCAP;\n', '    uint256 SOFTCAP;\n', '    uint256 LIQUIDITY_PERCENT; // divided by 1000 - to be locked !\n', '    uint256 LISTING_RATE; // fixed rate at which the token will list on plasmaswap - start rate\n', '    uint256 START_BLOCK;\n', '    uint256 END_BLOCK;\n', '    uint256 LOCK_PERIOD; // unix timestamp -> e.g. 2 weeks\n', '    bool SPACEPORT_IN_ETH; // if this flag is true the Spaceport is raising ETH, otherwise an ERC20 token such as DAI\n', '  }\n', '\n', '  struct SpaceportVesting {\n', '    uint256 vestingCliff;\n', '    uint256 vestingEnd;\n', '  }\n', '\n', '  struct SpaceportFeeInfo {\n', '    uint256 PLFI_BASE_FEE; // divided by 1000\n', '    uint256 PLFI_TOKEN_FEE; // divided by 1000\n', '    address payable BASE_FEE_ADDRESS;\n', '    address payable TOKEN_FEE_ADDRESS;\n', '  }\n', '  \n', '  struct SpaceportStatus {\n', '    bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\n', '    bool LP_GENERATION_COMPLETE; // final flag required to end a Spaceport and enable withdrawls\n', '    bool FORCE_FAILED; // set this flag to force fail the Spaceport\n', '    uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\n', '    uint256 TOTAL_TOKENS_SOLD; // total Spaceport tokens sold\n', '    uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful Spaceport\n', '    uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on Spaceport failure\n', '    uint256 ROUND1_LENGTH; // in blocks\n', '    uint256 NUM_BUYERS; // number of unique participants\n', '    uint256 LP_GENERATION_COMPLETE_TIME;  //  the date when LP is done\n', '  }\n', '\n', '  struct BuyerInfo {\n', '    uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\n', '    uint256 tokensOwed; // num Spaceport tokens a user is owed, can be withdrawn on presale success\n', '    uint256 lastUpdate;\n', '    uint256 vestingTokens;\n', '    uint256 vestingTokensOwed;\n', '    bool vestingRunning;\n', '  }\n', '  \n', '  SpaceportVesting public SPACEPORT_VESTING;\n', '  SpaceportInfo public SPACEPORT_INFO;\n', '  SpaceportFeeInfo public SPACEPORT_FEE_INFO;\n', '  SpaceportStatus public STATUS;\n', '  address public SPACEPORT_GENERATOR;\n', '  ISpaceportLockForwarder public SPACEPORT_LOCK_FORWARDER;\n', '  ISpaceportSettings public SPACEPORT_SETTINGS;\n', '  address PLFI_DEV_ADDRESS;\n', '  IPlasmaswapFactory public PLASMASWAP_FACTORY;\n', '  IWETH public WETH;\n', '  mapping(address => BuyerInfo) public BUYERS;\n', '  EnumerableSet.AddressSet private WHITELIST;\n', '\n', '  constructor(address _spaceportGenerator) public {\n', '    SPACEPORT_GENERATOR = _spaceportGenerator;\n', '    PLASMASWAP_FACTORY = IPlasmaswapFactory(0xd87Ad19db2c4cCbf897106dE034D52e3DD90ea60);\n', '    WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    SPACEPORT_SETTINGS = ISpaceportSettings(0x90De443BDC372f9aA944cF18fb6c82980807Cb0a);\n', '    SPACEPORT_LOCK_FORWARDER = ISpaceportLockForwarder(0x5AD2A6181B1bc6aCAbd7bad268102d68DE54A4eE);\n', '    PLFI_DEV_ADDRESS = 0x37CB8941348f04E783f67E19AD937f48DD7355D9;\n', '  }\n', '  \n', '  function init1 (\n', '    address payable _spaceportOwner, \n', '    uint256 _amount,\n', '    uint256 _tokenPrice, \n', '    uint256 _maxEthPerBuyer, \n', '    uint256 _hardcap, \n', '    uint256 _softcap,\n', '    uint256 _liquidityPercent,\n', '    uint256 _listingRate,\n', '    uint256 _startblock,\n', '    uint256 _endblock,\n', '    uint256 _lockPeriod\n', '    ) external {\n', '          \n', "      require(msg.sender == SPACEPORT_GENERATOR, 'FORBIDDEN');\n", '      SPACEPORT_INFO.SPACEPORT_OWNER = _spaceportOwner;\n', '      SPACEPORT_INFO.AMOUNT = _amount;\n', '      SPACEPORT_INFO.TOKEN_PRICE = _tokenPrice;\n', '      SPACEPORT_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\n', '      SPACEPORT_INFO.HARDCAP = _hardcap;\n', '      SPACEPORT_INFO.SOFTCAP = _softcap;\n', '      SPACEPORT_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\n', '      SPACEPORT_INFO.LISTING_RATE = _listingRate;\n', '      SPACEPORT_INFO.START_BLOCK = _startblock;\n', '      SPACEPORT_INFO.END_BLOCK = _endblock;\n', '      SPACEPORT_INFO.LOCK_PERIOD = _lockPeriod;\n', '  }\n', '  \n', '  function init2 (\n', '    IERC20 _baseToken,\n', '    IERC20 _spaceportToken,\n', '    uint256 _plfiBaseFee,\n', '    uint256 _plfiTokenFee,\n', '    address payable _baseFeeAddress,\n', '    address payable _tokenFeeAddress,\n', '    uint256 _vestingCliff,\n', '    uint256 _vestingEnd\n', '    ) external {\n', '          \n', "      require(msg.sender == SPACEPORT_GENERATOR, 'FORBIDDEN');\n", "      // require(!SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(_spaceportToken), address(_baseToken)), 'PAIR INITIALISED');\n", '      \n', '      SPACEPORT_INFO.SPACEPORT_IN_ETH = address(_baseToken) == address(WETH);\n', '      SPACEPORT_INFO.S_TOKEN = _spaceportToken;\n', '      SPACEPORT_INFO.B_TOKEN = _baseToken;\n', '      SPACEPORT_FEE_INFO.PLFI_BASE_FEE = _plfiBaseFee;\n', '      SPACEPORT_FEE_INFO.PLFI_TOKEN_FEE = _plfiTokenFee;\n', '      \n', '      SPACEPORT_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\n', '      SPACEPORT_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\n', '      STATUS.ROUND1_LENGTH = SPACEPORT_SETTINGS.getRound1Length();\n', '\n', '      SPACEPORT_VESTING.vestingCliff = _vestingCliff;\n', '      SPACEPORT_VESTING.vestingEnd = _vestingEnd;\n', '  }\n', '  \n', '  modifier onlySpaceportOwner() {\n', '    require(SPACEPORT_INFO.SPACEPORT_OWNER == msg.sender, "NOT SPACEPORT OWNER");\n', '    _;\n', '  }\n', '  \n', '  function spaceportStatus () public view returns (uint256) {\n', '    if (STATUS.FORCE_FAILED) {\n', '      return 3; // FAILED - force fail\n', '    }\n', '    if ((block.number > SPACEPORT_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED < SPACEPORT_INFO.SOFTCAP)) {\n', '      return 3; // FAILED - softcap not met by end block\n', '    }\n', '    if (STATUS.TOTAL_BASE_COLLECTED >= SPACEPORT_INFO.HARDCAP) {\n', '      return 2; // SUCCESS - hardcap met\n', '    }\n', '    if ((block.number > SPACEPORT_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED >= SPACEPORT_INFO.SOFTCAP)) {\n', '      return 2; // SUCCESS - endblock and soft cap reached\n', '    }\n', '    if ((block.number >= SPACEPORT_INFO.START_BLOCK) && (block.number <= SPACEPORT_INFO.END_BLOCK)) {\n', '      return 1; // ACTIVE - deposits enabled\n', '    }\n', '    return 0; // QUED - awaiting start block\n', '  }\n', '  \n', '  // accepts msg.value for eth or _amount for ERC20 tokens\n', '  function userDeposit (uint256 _amount) external payable nonReentrant {\n', "    require(spaceportStatus() == 1, 'NOT ACTIVE'); // ACTIVE\n", '    if (STATUS.WHITELIST_ONLY) {\n', "      require(WHITELIST.contains(msg.sender), 'NOT WHITELISTED');\n", '    }\n', '    // Spaceport Round 1 - require participant to hold a certain token and balance\n', '    if (block.number < SPACEPORT_INFO.START_BLOCK + STATUS.ROUND1_LENGTH) { // 276 blocks = 1 hour\n', "        require(SPACEPORT_SETTINGS.userHoldsSufficientRound1Token(msg.sender), 'INSUFFICENT ROUND 1 TOKEN BALANCE');\n", '    }\n', '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    uint256 amount_in = SPACEPORT_INFO.SPACEPORT_IN_ETH ? msg.value : _amount;\n', '    uint256 allowance = SPACEPORT_INFO.MAX_SPEND_PER_BUYER.sub(buyer.baseDeposited);\n', '    uint256 remaining = SPACEPORT_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\n', '    allowance = allowance > remaining ? remaining : allowance;\n', '    if (amount_in > allowance) {\n', '      amount_in = allowance;\n', '    }\n', '    uint256 tokensSold = amount_in.mul(SPACEPORT_INFO.TOKEN_PRICE).div(10 ** uint256(SPACEPORT_INFO.B_TOKEN.decimals()));\n', "    require(tokensSold > 0, 'ZERO TOKENS');\n", '    if (buyer.baseDeposited == 0) {\n', '        STATUS.NUM_BUYERS++;\n', '    }\n', '\n', '    buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\n', '    buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\n', '    buyer.vestingRunning = false;\n', '\n', '    STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(amount_in);\n', '    STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\n', '    \n', '    // return unused ETH\n', '    if (SPACEPORT_INFO.SPACEPORT_IN_ETH && amount_in < msg.value) {\n', '      msg.sender.transfer(msg.value.sub(amount_in));\n', '    }\n', '    // deduct non ETH token from user\n', '    if (!SPACEPORT_INFO.SPACEPORT_IN_ETH) {\n', '      TransferHelper.safeTransferFrom(address(SPACEPORT_INFO.B_TOKEN), msg.sender, address(this), amount_in);\n', '    }\n', '    emit spaceportUserDeposit(amount_in);\n', '  }\n', '  \n', '  // withdraw spaceport tokens\n', '  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '  function userWithdrawTokens () external nonReentrant {\n', "    require(STATUS.LP_GENERATION_COMPLETE, 'AWAITING LP GENERATION');\n", '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    require(STATUS.LP_GENERATION_COMPLETE_TIME + SPACEPORT_VESTING.vestingCliff < block.timestamp, "vesting cliff : not time yet");\n', '\n', '    uint256 tokensRemainingDenominator = STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN);\n', "    require(tokensRemainingDenominator > 0, 'NOTHING TO WITHDRAW');\n", '\n', '    uint256 tokensOwed = SPACEPORT_INFO.S_TOKEN.balanceOf(address(this)).mul(buyer.tokensOwed).div(tokensRemainingDenominator);\n', "    require(tokensOwed > 0, 'OWED TOKENS NOT FOUND');\n", '    \n', '    if(!buyer.vestingRunning)\n', '    {\n', '      buyer.vestingTokens = tokensOwed;\n', '      buyer.vestingTokensOwed = buyer.tokensOwed;\n', '      buyer.lastUpdate = STATUS.LP_GENERATION_COMPLETE_TIME;\n', '      buyer.vestingRunning = true;\n', '    }\n', '\n', '    if(STATUS.LP_GENERATION_COMPLETE_TIME + SPACEPORT_VESTING.vestingEnd < block.timestamp) {\n', '      STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.tokensOwed);\n', '      buyer.tokensOwed = 0;\n', '    } \n', '    else {\n', '      tokensOwed = buyer.vestingTokens.mul(block.timestamp - buyer.lastUpdate).div(SPACEPORT_VESTING.vestingEnd);\n', '      buyer.lastUpdate = block.timestamp;\n', '\n', '      uint256 diff = tokensOwed.div(buyer.vestingTokens);\n', '      STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.vestingTokensOwed.mul(diff));\n', '\n', '      buyer.tokensOwed = buyer.tokensOwed.sub(buyer.vestingTokensOwed.mul(diff));\n', "      require(buyer.tokensOwed > 0, 'NOTHING TO CLAIM');\n", '    }\n', '\n', '    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), msg.sender, tokensOwed);\n', '    emit spaceportUserWithdrawTokens(tokensOwed);\n', '  }\n', '  \n', '  // on spaceport failure\n', '  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '  function userWithdrawBaseTokens () external nonReentrant {\n', "    require(spaceportStatus() == 3, 'NOT FAILED'); // FAILED\n", '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    uint256 baseRemainingDenominator = STATUS.TOTAL_BASE_COLLECTED.sub(STATUS.TOTAL_BASE_WITHDRAWN);\n', '    uint256 remainingBaseBalance = SPACEPORT_INFO.SPACEPORT_IN_ETH ? address(this).balance : SPACEPORT_INFO.B_TOKEN.balanceOf(address(this));\n', '    uint256 tokensOwed = remainingBaseBalance.mul(buyer.baseDeposited).div(baseRemainingDenominator);\n', "    require(tokensOwed > 0, 'NOTHING TO WITHDRAW');\n", '    STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(buyer.baseDeposited);\n', '    buyer.baseDeposited = 0;\n', '    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), msg.sender, tokensOwed, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\n', '    emit spaceportUserWithdrawBaseTokens(tokensOwed);\n', '  }\n', '  \n', '  // failure\n', '  // allows the owner to withdraw the tokens they sent for presale & initial liquidity\n', '  function ownerWithdrawTokens () external onlySpaceportOwner {\n', '    require(spaceportStatus() == 3); // FAILED\n', '    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), SPACEPORT_INFO.SPACEPORT_OWNER, SPACEPORT_INFO.S_TOKEN.balanceOf(address(this)));\n', '    emit spaceportOwnerWithdrawTokens();\n', '  }\n', '  \n', '\n', '  // Can be called at any stage before or during the presale to cancel it before it ends.\n', '  // If the pair already exists on plasmaswap and it contains the presale token as liquidity \n', "  // the final stage of the presale 'addLiquidity()' will fail. This function \n", '  // allows anyone to end the presale prematurely to release funds in such a case.\n', '  function forceFailIfPairExists () external {\n', '    require(!STATUS.LP_GENERATION_COMPLETE && !STATUS.FORCE_FAILED);\n', '    if (SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_INFO.B_TOKEN))) {\n', '        STATUS.FORCE_FAILED = true;\n', '    }\n', '  }\n', '  \n', '  // if something goes wrong in LP generation\n', '  function forceFailByPlfi () external {\n', '      require(msg.sender == PLFI_DEV_ADDRESS);\n', '      STATUS.FORCE_FAILED = true;\n', '  }\n', '  \n', '  // on spaceport success, this is the final step to end the spaceport, lock liquidity and enable withdrawls of the sale token.\n', '  // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\n', '  // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to \n', '  // the spaceport parameters and fixed prices.\n', '  function addLiquidity() external nonReentrant {\n', "    require(!STATUS.LP_GENERATION_COMPLETE, 'GENERATION COMPLETE');\n", "    require(spaceportStatus() == 2, 'NOT SUCCESS'); // SUCCESS\n", '    // Fail the spaceport if the pair exists and contains spaceport token liquidity\n', '    if (SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_INFO.B_TOKEN))) {\n', '        STATUS.FORCE_FAILED = true;\n', '        return;\n', '    }\n', '    \n', '    uint256 plfiBaseFee = STATUS.TOTAL_BASE_COLLECTED.mul(SPACEPORT_FEE_INFO.PLFI_BASE_FEE).div(1000);\n', '    \n', '    // base token liquidity\n', '    uint256 baseLiquidity = STATUS.TOTAL_BASE_COLLECTED.sub(plfiBaseFee).mul(SPACEPORT_INFO.LIQUIDITY_PERCENT).div(1000);\n', '    if (SPACEPORT_INFO.SPACEPORT_IN_ETH) {\n', '        WETH.deposit{value : baseLiquidity}();\n', '    }\n', '    TransferHelper.safeApprove(address(SPACEPORT_INFO.B_TOKEN), address(SPACEPORT_LOCK_FORWARDER), baseLiquidity);\n', '    \n', '    // sale token liquidity\n', '    uint256 tokenLiquidity = baseLiquidity.mul(SPACEPORT_INFO.LISTING_RATE).div(10 ** uint256(SPACEPORT_INFO.B_TOKEN.decimals()));\n', '    TransferHelper.safeApprove(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_LOCK_FORWARDER), tokenLiquidity);\n', '    \n', '    SPACEPORT_LOCK_FORWARDER.lockLiquidity(SPACEPORT_INFO.B_TOKEN, SPACEPORT_INFO.S_TOKEN, baseLiquidity, tokenLiquidity, block.timestamp + SPACEPORT_INFO.LOCK_PERIOD, SPACEPORT_INFO.SPACEPORT_OWNER);\n', '    \n', '    // transfer fees\n', '    uint256 plfiTokenFee = STATUS.TOTAL_TOKENS_SOLD.mul(SPACEPORT_FEE_INFO.PLFI_TOKEN_FEE).div(1000);\n', '    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), SPACEPORT_FEE_INFO.BASE_FEE_ADDRESS, plfiBaseFee, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\n', '    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), SPACEPORT_FEE_INFO.TOKEN_FEE_ADDRESS, plfiTokenFee);\n', '    \n', '    // burn unsold tokens\n', '    uint256 remainingSBalance = SPACEPORT_INFO.S_TOKEN.balanceOf(address(this));\n', '    if (remainingSBalance > STATUS.TOTAL_TOKENS_SOLD) {\n', '        uint256 burnAmount = remainingSBalance.sub(STATUS.TOTAL_TOKENS_SOLD);\n', '        TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), 0x6Ad6fd6282cCe6eBB65Ab8aBCBD1ae5057D4B1DB, burnAmount);\n', '    }\n', '    \n', '    // send remaining base tokens to spaceport owner\n', '    uint256 remainingBaseBalance = SPACEPORT_INFO.SPACEPORT_IN_ETH ? address(this).balance : SPACEPORT_INFO.B_TOKEN.balanceOf(address(this));\n', '    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), SPACEPORT_INFO.SPACEPORT_OWNER, remainingBaseBalance, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\n', '    \n', '    STATUS.LP_GENERATION_COMPLETE = true;\n', '    STATUS.LP_GENERATION_COMPLETE_TIME = block.timestamp;\n', '    \n', '    emit spaceportAddLiquidity();\n', '  }\n', '  \n', '  function updateMaxSpendLimit(uint256 _maxSpend) external onlySpaceportOwner {\n', '    SPACEPORT_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\n', '  }\n', '  \n', '  // postpone or bring a spaceport forward, this will only work when a presale is inactive.\n', '  function updateBlocks(uint256 _startBlock, uint256 _endBlock) external onlySpaceportOwner {\n', '    require(SPACEPORT_INFO.START_BLOCK > block.number);\n', '    require(_endBlock.sub(_startBlock) <= SPACEPORT_SETTINGS.getMaxSpaceportLength());\n', '    SPACEPORT_INFO.START_BLOCK = _startBlock;\n', '    SPACEPORT_INFO.END_BLOCK = _endBlock;\n', '  }\n', '\n', '  // editable at any stage of the presale\n', '  function setWhitelistFlag(bool _flag) external onlySpaceportOwner {\n', '    STATUS.WHITELIST_ONLY = _flag;\n', '  }\n', '\n', '  // editable at any stage of the presale\n', '  function editWhitelist(address[] memory _users, bool _add) external onlySpaceportOwner {\n', '    if (_add) {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '          WHITELIST.add(_users[i]);\n', '        }\n', '    } else {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '          WHITELIST.remove(_users[i]);\n', '        }\n', '    }\n', '  }\n', '\n', '  // whitelist getters\n', '  function getWhitelistedUsersLength () external view returns (uint256) {\n', '    return WHITELIST.length();\n', '  }\n', '  \n', '  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\n', '    return WHITELIST.at(_index);\n', '  }\n', '  \n', '  function getUserWhitelistStatus (address _user) external view returns (bool) {\n', '    return WHITELIST.contains(_user);\n', '  }\n', '}']