['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-08\n', '*/\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '\n', '\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'library EnumerableSetUpgradeable {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name_, symbol_);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', 'abstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n', '    function __ERC20Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20Pausable_init_unchained();\n', '    }\n', '\n', '    function __ERC20Pausable_init_unchained() internal initializer {\n', '    }\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the contract must not be paused.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n', '    function __ERC20Burnable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20Burnable_init_unchained();\n', '    }\n', '\n', '    function __ERC20Burnable_init_unchained() internal initializer {\n', '    }\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', 'abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\n', '    function __AccessControl_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '    }\n', '\n', '    function __AccessControl_init_unchained() internal initializer {\n', '    }\n', '    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n', '    using AddressUpgradeable for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSetUpgradeable.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'abstract contract Proxy {\n', '/**\n', ' * @dev Fallback function.\n', ' * Implemented entirely in `_fallback`.\n', ' */\n', 'fallback () payable external {\n', '_fallback();\n', '}\n', '\n', '/**\n', ' * @return The Address of the implementation.\n', ' */\n', 'function _implementation() internal virtual view returns (address);\n', '\n', '/**\n', ' * @dev Delegates execution to an implementation contract.\n', " * This is a low level function that doesn't return to its internal call site.\n", ' * It will return to the external caller whatever the implementation returns.\n', ' * @param implementation Address to delegate.\n', ' */\n', 'function _delegate(address implementation) internal {\n', 'assembly {\n', '// Copy msg.data. We take full control of memory in this inline assembly\n', '// block because it will not return to Solidity code. We overwrite the\n', '// Solidity scratch pad at memory position 0.\n', 'calldatacopy(0, 0, calldatasize())\n', '\n', '// Call the implementation.\n', "// out and outsize are 0 because we don't know the size yet.\n", 'let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '// Copy the returned data.\n', 'returndatacopy(0, 0, returndatasize())\n', '\n', 'switch result\n', '// delegatecall returns 0 on error.\n', 'case 0 { revert(0, returndatasize()) }\n', 'default { return(0, returndatasize()) }\n', '}\n', '}\n', '\n', '/**\n', ' * @dev Function that is run as the first thing in the fallback function.\n', ' * Can be redefined in derived contracts to add functionality.\n', ' * Redefinitions must call super._willFallback().\n', ' */\n', 'function _willFallback() internal virtual {\n', '}\n', '\n', '/**\n', ' * @dev fallback implementation.\n', ' * Extracted to enable manual triggering.\n', ' */\n', 'function _fallback() internal {\n', '_willFallback();\n', '_delegate(_implementation());\n', '}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title BaseUpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'contract BaseUpgradeabilityProxy is Proxy {\n', '/**\n', ' * @dev Emitted when the implementation is upgraded.\n', ' * @param implementation Address of the new implementation.\n', ' */\n', 'event Upgraded(address indexed implementation);\n', '\n', '/**\n', ' * @dev Storage slot with the address of the current implementation.\n', ' * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', ' * validated in the constructor.\n', ' */\n', 'bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '/**\n', ' * @dev Returns the current implementation.\n', ' * @return impl Address of the current implementation\n', ' */\n', 'function _implementation() internal override view returns (address impl) {\n', 'bytes32 slot = IMPLEMENTATION_SLOT;\n', 'assembly {\n', 'impl := sload(slot)\n', '}\n', '}\n', '\n', '/**\n', ' * @dev Upgrades the proxy to a new implementation.\n', ' * @param newImplementation Address of the new implementation.\n', ' */\n', 'function _upgradeTo(address newImplementation) internal {\n', '_setImplementation(newImplementation);\n', 'emit Upgraded(newImplementation);\n', '}\n', '\n', '/**\n', ' * @dev Sets the implementation address of the proxy.\n', ' * @param newImplementation Address of the new implementation.\n', ' */\n', 'function _setImplementation(address newImplementation) internal {\n', 'require(Address.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', 'bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', 'assembly {\n', 'sstore(slot, newImplementation)\n', '}\n', '}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\n', ' * implementation and init data.\n', ' */\n', 'contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '/**\n', ' * @dev Contract constructor.\n', ' * @param _logic Address of the initial implementation.\n', ' * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', ' * It should include the signature and the parameters of the function to be called, as described in\n', ' * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', ' * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', ' */\n', 'constructor(address _logic, bytes memory _data) public payable {\n', "assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '_setImplementation(_logic);\n', 'if(_data.length > 0) {\n', '(bool success,) = _logic.delegatecall(_data);\n', 'require(success);\n', '}\n', '}\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title BaseAdminUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with an authorization\n', ' * mechanism for administrative tasks.\n', ' * All external functions in this contract must be guarded by the\n', ' * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n', ' * feature proposal that would enable this to be done automatically.\n', ' */\n', 'contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '/**\n', ' * @dev Emitted when the administration has been transferred.\n', ' * @param previousAdmin Address of the previous admin.\n', ' * @param newAdmin Address of the new admin.\n', ' */\n', 'event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '/**\n', ' * @dev Storage slot with the admin of the contract.\n', ' * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', ' * validated in the constructor.\n', ' */\n', '\n', 'bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '/**\n', ' * @dev Modifier to check whether the `msg.sender` is the admin.\n', ' * If it is, it will run the function. Otherwise, it will delegate the call\n', ' * to the implementation.\n', ' */\n', 'modifier ifAdmin() {\n', 'if (msg.sender == _admin()) {\n', '_;\n', '} else {\n', '_fallback();\n', '}\n', '}\n', '\n', '/**\n', ' * @return The address of the proxy admin.\n', ' */\n', 'function admin() external ifAdmin returns (address) {\n', 'return _admin();\n', '}\n', '\n', '/**\n', ' * @return The address of the implementation.\n', ' */\n', 'function implementation() external ifAdmin returns (address) {\n', 'return _implementation();\n', '}\n', '\n', '/**\n', ' * @dev Changes the admin of the proxy.\n', ' * Only the current admin can call this function.\n', ' * @param newAdmin Address to transfer proxy administration to.\n', ' */\n', 'function changeAdmin(address newAdmin) external ifAdmin {\n', 'require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\n', 'emit AdminChanged(_admin(), newAdmin);\n', '_setAdmin(newAdmin);\n', '}\n', '\n', '/**\n', ' * @dev Upgrade the backing implementation of the proxy.\n', ' * Only the admin can call this function.\n', ' * @param newImplementation Address of the new implementation.\n', ' */\n', 'function upgradeTo(address newImplementation) external ifAdmin {\n', '_upgradeTo(newImplementation);\n', '}\n', '\n', '/**\n', ' * @dev Upgrade the backing implementation of the proxy and call a function\n', ' * on the new implementation.\n', ' * This is useful to initialize the proxied contract.\n', ' * @param newImplementation Address of the new implementation.\n', ' * @param data Data to send as msg.data in the low level call.\n', ' * It should include the signature and the parameters of the function to be called, as described in\n', ' * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', ' */\n', 'function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n', '_upgradeTo(newImplementation);\n', '(bool success,) = newImplementation.delegatecall(data);\n', 'require(success);\n', '}\n', '\n', '/**\n', ' * @return adm The admin slot.\n', ' */\n', 'function _admin() internal view returns (address adm) {\n', 'bytes32 slot = ADMIN_SLOT;\n', 'assembly {\n', 'adm := sload(slot)\n', '}\n', '}\n', '\n', '/**\n', ' * @dev Sets the address of the proxy admin.\n', ' * @param newAdmin Address of the new proxy admin.\n', ' */\n', 'function _setAdmin(address newAdmin) internal {\n', 'bytes32 slot = ADMIN_SLOT;\n', '\n', 'assembly {\n', 'sstore(slot, newAdmin)\n', '}\n', '}\n', '\n', '/**\n', ' * @dev Only fall back when the sender is not the admin.\n', ' */\n', 'function _willFallback() internal override virtual {\n', 'require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\n', 'super._willFallback();\n', '}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title InitializableUpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n', ' * implementation and init data.\n', ' */\n', 'contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '/**\n', '* @dev Contract initializer.\n', '* @param _logic Address of the initial implementation.\n', '* @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '* It should include the signature and the parameters of the function to be called, as described in\n', '* https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '* This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '*/\n', 'function initialize(address _logic, bytes memory _data) public payable {\n', 'require(_implementation() == address(0));\n', 'assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '_setImplementation(_logic);\n', 'if (_data.length > 0) {\n', '(bool success, ) = _logic.delegatecall(_data);\n', 'require(success);\n', '}\n', '}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PUNDIXTokenProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\n', '/**\n', '* Contract initializer.\n', '* @param _logic address of the initial implementation.\n', '* @param _admin Address of the proxy administrator.\n', '* @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '* It should include the signature and the parameters of the function to be called, as described in\n', '* https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '* This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '*/\n', 'function initialize(address _logic, address _admin, bytes memory _data) public payable {\n', 'require(_implementation() == address(0));\n', 'InitializableUpgradeabilityProxy.initialize(_logic, _data);\n', 'assert(ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));\n', '_setAdmin(_admin);\n', '}\n', '\n', '/**\n', '* @dev Only fall back when the sender is not the admin.\n', '*/\n', 'function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\n', 'BaseAdminUpgradeabilityProxy._willFallback();\n', '}\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library ECDSAUpgradeable {\n', '/**\n', ' * @dev Returns the address that signed a hashed message (`hash`) with\n', ' * `signature`. This address can then be used for verification purposes.\n', ' *\n', ' * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', ' * this function rejects them by requiring the `s` value to be in the lower\n', ' * half order, and the `v` value to be either 27 or 28.\n', ' *\n', ' * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', ' * verification to be secure: it is possible to craft signatures that\n', ' * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', ' * this is by receiving a hash of the original message (which may otherwise\n', ' * be too long), and then calling {toEthSignedMessageHash} on it.\n', ' */\n', 'function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '// Check the signature length\n', 'if (signature.length != 65) {\n', 'revert("ECDSA: invalid signature length");\n', '}\n', '\n', '// Divide the signature in r, s and v variables\n', 'bytes32 r;\n', 'bytes32 s;\n', 'uint8 v;\n', '\n', '// ecrecover takes the signature parameters, and the only way to get them\n', '// currently is to use assembly.\n', '// solhint-disable-next-line no-inline-assembly\n', 'assembly {\n', 'r := mload(add(signature, 0x20))\n', 's := mload(add(signature, 0x40))\n', 'v := byte(0, mload(add(signature, 0x60)))\n', '}\n', '\n', 'return recover(hash, v, r, s);\n', '}\n', '\n', '/**\n', ' * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n', ' * `r` and `s` signature fields separately.\n', ' */\n', 'function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '// the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '// signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '//\n', '// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '// these malleable signatures as well.\n', 'require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', 'require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '// If the signature is valid (and not malleable), return the signer address\n', 'address signer = ecrecover(hash, v, r, s);\n', 'require(signer != address(0), "ECDSA: invalid signature");\n', '\n', 'return signer;\n', '}\n', '\n', '/**\n', ' * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', ' * replicates the behavior of the\n', ' * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', ' * JSON-RPC method.\n', ' *\n', ' * See {recover}.\n', ' */\n', 'function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '// 32 is the length in bytes of hash,\n', '// enforced by the type signature above\n', 'return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '}\n', '}\n', '\n', '\n', '\n', 'library CountersUpgradeable {\n', 'using SafeMathUpgradeable for uint256;\n', '\n', 'struct Counter {\n', '// This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "// the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '// this feature: see https://github.com/ethereum/solidity/issues/4637\n', 'uint256 _value; // default: 0\n', '}\n', '\n', 'function current(Counter storage counter) internal view returns (uint256) {\n', 'return counter._value;\n', '}\n', '\n', 'function increment(Counter storage counter) internal {\n', '// The {SafeMath} overflow check can be skipped here, see the comment at the top\n', 'counter._value += 1;\n', '}\n', '\n', 'function decrement(Counter storage counter) internal {\n', 'counter._value = counter._value.sub(1);\n', '}\n', '}\n', '\n', '\n', '\n', 'abstract contract EIP712Upgradeable is Initializable {\n', '/* solhint-disable var-name-mixedcase */\n', 'bytes32 private _HASHED_NAME;\n', 'bytes32 private _HASHED_VERSION;\n', 'bytes32 private constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '/* solhint-enable var-name-mixedcase */\n', '\n', '/**\n', ' * @dev Initializes the domain separator and parameter caches.\n', ' *\n', ' * The meaning of `name` and `version` is specified in\n', ' * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n', ' *\n', ' * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n', ' * - `version`: the current major version of the signing domain.\n', ' *\n', ' * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n', ' * contract upgrade].\n', ' */\n', 'function __EIP712_init(string memory name, string memory version) internal initializer {\n', '__EIP712_init_unchained(name, version);\n', '}\n', '\n', 'function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n', 'bytes32 hashedName = keccak256(bytes(name));\n', 'bytes32 hashedVersion = keccak256(bytes(version));\n', '_HASHED_NAME = hashedName;\n', '_HASHED_VERSION = hashedVersion;\n', '}\n', '\n', '/**\n', ' * @dev Returns the domain separator for the current chain.\n', ' */\n', 'function _domainSeparatorV4() internal view returns (bytes32) {\n', 'return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n', '}\n', '\n', 'function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n', 'return keccak256(\n', 'abi.encode(\n', 'typeHash,\n', 'name,\n', 'version,\n', '_getChainId(),\n', 'address(this)\n', ')\n', ');\n', '}\n', '\n', '/**\n', ' * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n', ' * function returns the hash of the fully encoded EIP712 message for this domain.\n', ' *\n', ' * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n', ' *\n', ' * ```solidity\n', ' * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n', ' *     keccak256("Mail(address to,string contents)"),\n', ' *     mailTo,\n', ' *     keccak256(bytes(mailContents))\n', ' * )));\n', ' * address signer = ECDSA.recover(digest, signature);\n', ' * ```\n', ' */\n', 'function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n', 'return keccak256(abi.encodePacked("\\x19\\x01", _domainSeparatorV4(), structHash));\n', '}\n', '\n', 'function _getChainId() private view returns (uint256 chainId) {\n', 'this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '// solhint-disable-next-line no-inline-assembly\n', 'assembly {\n', 'chainId := chainid()\n', '}\n', '}\n', '\n', '/**\n', ' * @dev The hash of the name parameter for the EIP712 domain.\n', ' *\n', ' * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n', ' * are a concern.\n', ' */\n', 'function _EIP712NameHash() internal virtual view returns (bytes32) {\n', 'return _HASHED_NAME;\n', '}\n', '\n', '/**\n', ' * @dev The hash of the version parameter for the EIP712 domain.\n', ' *\n', ' * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n', ' * are a concern.\n', ' */\n', 'function _EIP712VersionHash() internal virtual view returns (bytes32) {\n', 'return _HASHED_VERSION;\n', '}\n', 'uint256[50] private __gap;\n', '}\n', '\n', '\n', '\n', 'interface IERC20PermitUpgradeable {\n', '/**\n', " * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n", " * given `owner`'s signed approval.\n", ' *\n', ' * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', ' * ordering also apply here.\n', ' *\n', ' * Emits an {Approval} event.\n', ' *\n', ' * Requirements:\n', ' *\n', ' * - `spender` cannot be the zero address.\n', ' * - `deadline` must be a timestamp in the future.\n', ' * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', ' * over the EIP712-formatted function arguments.\n', " * - the signature must use ``owner``'s current nonce (see {nonces}).\n", ' *\n', ' * For more information on the signature format, see the\n', ' * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', ' * section].\n', ' */\n', 'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '/**\n', ' * @dev Returns the current nonce for `owner`. This value must be\n', ' * included whenever a signature is generated for {permit}.\n', ' *\n', " * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", ' * prevents a signature from being used multiple times.\n', ' */\n', 'function nonces(address owner) external view returns (uint256);\n', '\n', '/**\n', ' * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n', ' */\n', '// solhint-disable-next-line func-name-mixedcase\n', 'function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '\n', '\n', 'abstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n', 'using CountersUpgradeable for CountersUpgradeable.Counter;\n', '\n', 'mapping (address => CountersUpgradeable.Counter) private _nonces;\n', '\n', '// solhint-disable-next-line var-name-mixedcase\n', 'bytes32 private _PERMIT_TYPEHASH;\n', '\n', '/**\n', ' * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.\n', ' *\n', " * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n", ' */\n', 'function __ERC20Permit_init(string memory name) internal initializer {\n', '__Context_init_unchained();\n', '__EIP712_init_unchained(name, "1");\n', '__ERC20Permit_init_unchained(name);\n', '}\n', '\n', 'function __ERC20Permit_init_unchained(string memory name) internal initializer {\n', '_PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '}\n', '\n', '/**\n', ' * @dev See {IERC20Permit-permit}.\n', ' */\n', 'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '// solhint-disable-next-line not-rely-on-time\n', 'require(block.timestamp <= deadline, "ERC20Permit: expired deadline");\n', '\n', 'bytes32 structHash = keccak256(\n', 'abi.encode(\n', '_PERMIT_TYPEHASH,\n', 'owner,\n', 'spender,\n', 'value,\n', '_nonces[owner].current(),\n', 'deadline\n', ')\n', ');\n', '\n', 'bytes32 hash = _hashTypedDataV4(structHash);\n', '\n', 'address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n', 'require(signer == owner, "ERC20Permit: invalid signature");\n', '\n', '_nonces[owner].increment();\n', '_approve(owner, spender, value);\n', '}\n', '\n', '/**\n', ' * @dev See {IERC20Permit-nonces}.\n', ' */\n', 'function nonces(address owner) public view override returns (uint256) {\n', 'return _nonces[owner].current();\n', '}\n', '\n', '/**\n', ' * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n', ' */\n', '// solhint-disable-next-line func-name-mixedcase\n', 'function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n', 'return _domainSeparatorV4();\n', '}\n', 'uint256[49] private __gap;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenRecipient {\n', '\n', '    function tokenFallback(address _sender, uint256 _value, bytes memory _extraData) public virtual returns (bool) {}\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract PUNDIXToken is Initializable, ContextUpgradeable, AccessControlUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable, ERC20PermitUpgradeable {\n', '\n', '\n', '    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");\n', '\n', '\n', '\n', '    function initialize(address to) public virtual initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '        __ERC20_init_unchained("Pundi X Token", "PUNDIX");\n', '        __ERC20Burnable_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20Pausable_init_unchained();\n', '        __ERC20Permit_init("PUNDIX");\n', '\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        _setupRole(ADMIN_ROLE, _msgSender());\n', '\n', '        _mint(to, 258498693019069996455928086);\n', '    }\n', '\n', '\n', '\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '\n', '\n', '\n', '    function pause() public virtual {\n', '        require(hasRole(ADMIN_ROLE, _msgSender()), "must have admin role to pause");\n', '        _pause();\n', '    }\n', '\n', '    function unpause() public virtual {\n', '        require(hasRole(ADMIN_ROLE, _msgSender()), "must have admin role to unpause");\n', '        _unpause();\n', '    }\n', '\n', '\n', '\n', '\n', '    function transferERCToken(address tokenContractAddress, address to, uint256 amount) public {\n', '        require(hasRole(ADMIN_ROLE, _msgSender()), "must have admin role to transfer other ERC20");\n', '        require(IERC20Upgradeable(tokenContractAddress).transfer(to, amount));\n', '    }\n', '\n', '\n', '    function transferAndCall(address recipient, uint256 amount, bytes memory data) public {\n', '        require(recipient != address(0), "transfer to the zero address");\n', '        require(amount <= balanceOf(recipient), "insufficient balance");\n', '        transfer(recipient, amount);\n', '        require(TokenRecipient(recipient).tokenFallback(msg.sender, amount, data));\n', '    }\n', '}']