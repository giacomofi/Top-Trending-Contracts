['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/lender/adapters/deployer.sol\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity >=0.6.12;\n', '\n', '////// src/lender/fabs/interfaces.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', 'interface ReserveFabLike_1 {\n', '    function newReserve(address) external returns (address);\n', '}\n', '\n', 'interface AssessorFabLike_2 {\n', '    function newAssessor() external returns (address);\n', '}\n', '\n', 'interface TrancheFabLike_1 {\n', '    function newTranche(address, address) external returns (address);\n', '}\n', '\n', 'interface CoordinatorFabLike_2 {\n', '    function newCoordinator(uint) external returns (address);\n', '}\n', '\n', 'interface OperatorFabLike_1 {\n', '    function newOperator(address) external returns (address);\n', '}\n', '\n', 'interface MemberlistFabLike_1 {\n', '    function newMemberlist() external returns (address);\n', '}\n', '\n', 'interface RestrictedTokenFabLike_1 {\n', '    function newRestrictedToken(string calldata, string calldata) external returns (address);\n', '}\n', '\n', 'interface PoolAdminFabLike {\n', '    function newPoolAdmin() external returns (address);\n', '}\n', '\n', 'interface ClerkFabLike {\n', '    function newClerk(address, address) external returns (address);\n', '}\n', '\n', 'interface TinlakeManagerFabLike {\n', '    function newTinlakeManager(address, address, address,  address, address, address, address, address) external returns (address);\n', '}\n', '\n', '////// src/lender/adapters/deployer.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', '/* import { ClerkFabLike, TinlakeManagerFabLike } from "../fabs/interfaces.sol"; */\n', '\n', 'interface LenderDeployerLike_1 {\n', '    function coordinator() external returns (address);\n', '    function assessor() external returns (address);\n', '    function reserve() external returns (address);\n', '    function seniorOperator() external returns (address);\n', '    function seniorTranche() external returns (address);\n', '    function seniorToken() external returns (address);\n', '    function currency() external returns (address);\n', '    function poolAdmin() external returns (address);\n', '    function seniorMemberlist() external returns (address);\n', '}\n', '\n', 'interface PoolAdminLike_1 {\n', '    function rely(address) external;\n', '    function relyAdmin(address) external;\n', '}\n', '\n', 'interface FileLike_2 {\n', '    function file(bytes32 name, uint value) external;\n', '}\n', '\n', 'interface MemberlistLike_1 {\n', '    function updateMember(address, uint) external;\n', '}\n', '\n', 'interface MgrLike {\n', '    function rely(address) external;\n', '    function file(bytes32 name, address value) external;\n', '    function lock(uint) external;\n', '}\n', '\n', 'interface AuthLike_2 {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface DependLike_2 {\n', '    function depend(bytes32, address) external;\n', '}\n', '\n', 'contract AdapterDeployer {\n', '    ClerkFabLike public clerkFab;\n', '    TinlakeManagerFabLike public mgrFab;\n', '    address public clerk;\n', '    address public mgr;\n', '\n', '    address public root;\n', '    LenderDeployerLike_1 public lenderDeployer;\n', '    \n', '    address deployUsr;\n', '\n', '    constructor(address root_, address clerkFabLike_, address mgrFabLike_) {\n', '        root = root_;\n', '        clerkFab = ClerkFabLike(clerkFabLike_);\n', '        mgrFab = TinlakeManagerFabLike(mgrFabLike_);\n', '        deployUsr = msg.sender;\n', '    }\n', '\n', '    function deployClerk(address lenderDeployer_) public {\n', '        require(deployUsr == msg.sender && address(clerk) == address(0) && LenderDeployerLike_1(lenderDeployer_).seniorToken() != address(0));\n', '\n', '        lenderDeployer = LenderDeployerLike_1(lenderDeployer_);\n', '        clerk = clerkFab.newClerk(lenderDeployer.currency(), lenderDeployer.seniorToken());\n', '\n', '        address assessor = lenderDeployer.assessor();\n', '        address reserve = lenderDeployer.reserve();\n', '        address seniorTranche = lenderDeployer.seniorTranche();\n', '        address seniorMemberlist = lenderDeployer.seniorMemberlist();\n', '        address poolAdmin = lenderDeployer.poolAdmin();\n', '\n', '        // clerk dependencies\n', '        DependLike_2(clerk).depend("coordinator", lenderDeployer.coordinator());\n', '        DependLike_2(clerk).depend("assessor", assessor);\n', '        DependLike_2(clerk).depend("reserve", reserve);\n', '        DependLike_2(clerk).depend("tranche", seniorTranche);\n', '        DependLike_2(clerk).depend("collateral", lenderDeployer.seniorToken());\n', '\n', '        // clerk as ward\n', '        AuthLike_2(seniorTranche).rely(clerk);\n', '        AuthLike_2(reserve).rely(clerk);\n', '        AuthLike_2(assessor).rely(clerk);\n', '\n', '        // reserve can draw and wipe on clerk\n', '        DependLike_2(reserve).depend("lending", clerk);\n', '        AuthLike_2(clerk).rely(reserve);\n', '\n', '        // allow clerk to hold seniorToken\n', '        MemberlistLike_1(seniorMemberlist).updateMember(clerk, type(uint256).max);\n', '\n', '        DependLike_2(assessor).depend("lending", clerk);\n', '\n', '        AuthLike_2(clerk).rely(poolAdmin);\n', '\n', '        AuthLike_2(clerk).rely(root);\n', '    }\n', '\n', '    function deployMgr(address dai, address daiJoin, address end, address vat, address vow, address liq, address spotter, address jug, uint matBuffer) public {\n', '        require(deployUsr == msg.sender && address(clerk) != address(0) && address(mgr) == address(0) && lenderDeployer.seniorToken() != address(0));\n', '\n', '        // deploy mgr\n', '        mgr = mgrFab.newTinlakeManager(dai, daiJoin, lenderDeployer.seniorToken(), lenderDeployer.seniorOperator(), lenderDeployer.seniorTranche(), end, vat, vow);\n', '        wireClerk(mgr, vat, spotter, jug, matBuffer);\n', '\n', '        // setup mgr\n', '        MgrLike mkrMgr = MgrLike(mgr);\n', '        mkrMgr.rely(clerk);\n', '        mkrMgr.file("liq", liq);\n', '        mkrMgr.file("end", end);\n', '        mkrMgr.file("owner", clerk);\n', '\n', '        // rely root, deny adapter deployer\n', '        AuthLike_2(mgr).rely(root);\n', '        AuthLike_2(mgr).deny(address(this));\n', '    }\n', '\n', "    // This is separated as the system tests don't use deployMgr, but do need the clerk wiring\n", '    function wireClerk(address mgr_, address vat, address spotter, address jug, uint matBuffer) public {\n', '        require(deployUsr == msg.sender && address(clerk) != address(0));\n', '\n', '        // wire clerk\n', '        DependLike_2(clerk).depend("mgr", mgr_);\n', '        DependLike_2(clerk).depend("spotter", spotter);\n', '        DependLike_2(clerk).depend("vat", vat);\n', '        DependLike_2(clerk).depend("jug", jug);\n', '        \n', '        // set the mat buffer\n', '        FileLike_2(clerk).file("buffer", matBuffer);\n', '\n', '        // rely root, deny adapter deployer\n', '        AuthLike_2(clerk).deny(address(this));\n', '\n', '        MemberlistLike_1(lenderDeployer.seniorMemberlist()).updateMember(mgr_, type(uint256).max);\n', '    }\n', '}']