['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-11\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.5 https://hardhat.org\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuardUpgradeable is Initializable {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File interfaces/digg/IDigg.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IDigg {\n', '    // Used for authentication\n', '    function monetaryPolicy() external view returns (address);\n', '\n', '    function rebaseStartTime() external view returns (uint256);\n', '\n', '    /**\n', '     * @param monetaryPolicy_ The address of the monetary policy contract to use for authentication.\n', '     */\n', '    function setMonetaryPolicy(address monetaryPolicy_) external;\n', '\n', '    /**\n', '     * @dev Notifies Fragments contract about a new rebase cycle.\n', '     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\n', '     * @return The total number of fragments after the supply adjustment.\n', '     */\n', '    function rebase(uint256 epoch, int256 supplyDelta) external returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of fragments.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of underlying shares.\n', '     */\n', '    function totalShares() external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address.\n', '     */\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The underlying shares of the specified address.\n', '     */\n', '    function sharesOf(address who) external view returns (uint256);\n', '\n', '    function _sharesPerFragment() external view returns (uint256);\n', '\n', '    function _initialSharesPerFragment() external view returns (uint256);\n', '\n', '    /**\n', '     * @param fragments Fragment value to convert.\n', '     * @return The underlying share value of the specified fragment amount.\n', '     */\n', '    function fragmentsToShares(uint256 fragments) external view returns (uint256);\n', '\n', '    /**\n', '     * @param shares Share value to convert.\n', '     * @return The current fragment value of the specified underlying share amount.\n', '     */\n', '    function sharesToFragments(uint256 shares) external view returns (uint256);\n', '\n', '    function scaledSharesToShares(uint256 fragments) external view returns (uint256);\n', '\n', '    function sharesToScaledShares(uint256 shares) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '     * @param owner_ The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner_, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address you want to send tokens from.\n', '     * @param to The address you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/badger-timelock/vesting/SingleTokenVestingNonRevocableDigg.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SingleTokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner. Only tracks vesting for a single token, rather than all ERC20s.\n', ' */\n', 'contract SingleTokenVestingNonRevocableDigg is OwnableUpgradeable {\n', '    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n', '    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n', '    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n', '    // cliff period of a year and a duration of four years, are safe to use.\n', '    // solhint-disable not-rely-on-time\n', '\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    event TokensReleased(address token, uint256 amount);\n', '\n', '    IDigg internal _digg;\n', '    // beneficiary of tokens after they are released\n', '    address internal _beneficiary;\n', '\n', '    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n', '    uint256 internal _cliff;\n', '    uint256 internal _start;\n', '    uint256 internal _duration;\n', '\n', '    uint256 internal _released;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param token address of the token to vest\n', '     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n', '     * @param start the time (as Unix time) at which point vesting starts\n', '     * @param duration duration in seconds of the period in which the tokens will vest\n', '     */\n', '    function __SingleTokenVestingNonRevocable_init(\n', '        IDigg token,\n', '        address beneficiary,\n', '        uint256 start,\n', '        uint256 cliffDuration,\n', '        uint256 duration\n', '    ) public initializer {\n', '        require(address(token) != address(0), "TokenVesting: token is the zero address");\n', '        require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");\n', '        // solhint-disable-next-line max-line-length\n', '        require(cliffDuration <= duration, "TokenVesting: cliff is longer than duration");\n', '        require(duration > 0, "TokenVesting: duration is 0");\n', '        // solhint-disable-next-line max-line-length\n', '        require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");\n', '\n', '        _digg = token;\n', '        _beneficiary = beneficiary;\n', '        _duration = duration;\n', '        _cliff = start.add(cliffDuration);\n', '        _start = start;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IDigg) {\n', '        return _digg;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the cliff time of the token vesting.\n', '     */\n', '    function cliff() public view returns (uint256) {\n', '        return _cliff;\n', '    }\n', '\n', '    /**\n', '     * @return the start time of the token vesting.\n', '     */\n', '    function start() public view returns (uint256) {\n', '        return _start;\n', '    }\n', '\n', '    /**\n', '     * @return the duration of the token vesting.\n', '     */\n', '    function duration() public view returns (uint256) {\n', '        return _duration;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of the token released.\n', '     */\n', '    function released() public view returns (uint256) {\n', '        return _released;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public virtual {\n', '        uint256 unreleased = _releasableAmount();\n', '\n', '        require(unreleased > 0, "TokenVesting: no tokens are due");\n', '\n', '        _released = _released.add(unreleased);\n', '\n', '        require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");\n', '\n', '        emit TokensReleased(address(_digg), unreleased);\n', '    }\n', '\n', '    function initializeReleasedAsShares() external {\n', '        require(_released == 26796612042, "already initialized to shares");\n', '        _released = 903638732631997846815093457587811581689457319978569725740871638998310548320;\n', '    }\n', '\n', '    function releasableAmount() public view returns (uint256) {\n', '        return _releasableAmount();\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     */\n', '    function _releasableAmount() internal view returns (uint256) {\n', '        return _vestedAmount().sub(_released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function _vestedAmount() internal view returns (uint256) {\n', '        uint256 currentBalance = _digg.sharesOf(address(this));\n', '        uint256 totalBalance = currentBalance.add(_released);\n', '\n', '        if (block.timestamp < _cliff) {\n', '            return 0;\n', '        } else if (block.timestamp >= _start.add(_duration)) {\n', '            return totalBalance;\n', '        } else {\n', '            uint256 secondsSinceStart = block.timestamp.sub(_start);\n', '            return totalBalance.div(_duration).mul(secondsSinceStart);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/badger-timelock/ExecutorOnlyCall.sol\n', '\n', 'pragma solidity >=0.5.0 <0.7.0;\n', '\n', '/*\n', '    Gnosis Safe Executor - library wrapping low level calls\n', '    https://github.com/gnosis/safe-contracts/blob/development/contracts/base/Executor.sol\n', '\n', '    Ability to execute delegateCall has been removed for security\n', '*/\n', '\n', '/// @title Executor - A contract that can execute transactions\n', '/// @author Richard Meissner - <[email\xa0protected]>\n', '\n', 'contract ExecutorOnlyCall {\n', '    function execute(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data,\n', '        uint256 txGas\n', '    ) internal returns (bool success) {\n', '        success = executeCall(to, value, data, txGas);\n', '    }\n', '\n', '    function executeCall(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data,\n', '        uint256 txGas\n', '    ) internal returns (bool success) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/badger-timelock/SmartVestingDigg.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', '/* \n', '  A token vesting contract that is capable of interacting with other smart contracts.\n', '  This allows the beneficiary to participate in on-chain goverance processes, despite having locked tokens.\n', '  The beneficiary can withdraw the appropriate vested amount at any time.\n', '\n', '  Features safety functions to allow beneficiary to claim ETH & ERC20-compliant tokens sent to the timelock contract, accidentially or otherwise.\n', '\n', "  An optional 'governor' address has the ability to allow the vesting to send it's tokens to approved destinations. \n", '  This is intended to allow the token holder to stake their tokens in approved mechanisms.\n', '*/\n', '\n', 'contract SmartVestingDigg is SingleTokenVestingNonRevocableDigg, ExecutorOnlyCall, ReentrancyGuardUpgradeable {\n', '    address internal _governor;\n', '    mapping(address => bool) internal _transferAllowed;\n', '\n', '    // address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable\n', '\n', '    function initialize(\n', '        IDigg token,\n', '        address beneficiary,\n', '        address governor,\n', '        uint256 start,\n', '        uint256 cliffDuration,\n', '        uint256 duration\n', '    ) public initializer {\n', '        __SingleTokenVestingNonRevocable_init(token, beneficiary, start, cliffDuration, duration);\n', '        __ReentrancyGuard_init_unchained();\n', '        _governor = governor;\n', '    }\n', '\n', '    event Call(address to, uint256 value, bytes data, bool transfersAllowed);\n', '    event ApproveTransfer(address to);\n', '    event RevokeTransfer(address to);\n', '    event ClaimToken(IDigg token, uint256 amount);\n', '    event ClaimEther(uint256 amount);\n', '\n', '    modifier onlyBeneficiary() {\n', '        require(msg.sender == beneficiary(), "smart-timelock/only-beneficiary");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor, "smart-timelock/only-governor");\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * @notice Allows the timelock to call arbitrary contracts, as long as it does not reduce it's locked token balance\n", '     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\n', '     *      created via `newVote(),` which requires initialization\n', '     * @param to Contract address to call\n', '     * @param value ETH value to send, if any\n', '     * @param data Encoded data to send\n', '     */\n', '    function call(\n', '        address to,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external payable onlyBeneficiary() nonReentrant() returns (bool success) {\n', '        uint256 preAmount = token().balanceOf(address(this));\n', '\n', '        success = execute(to, value, data, gasleft());\n', '\n', '        if (!_transferAllowed[to]) {\n', '            uint256 postAmount = token().balanceOf(address(this));\n', '            require(postAmount >= preAmount, "smart-vesting/locked-balance-check");\n', '        }\n', '\n', '        emit Call(to, value, data, _transferAllowed[to]);\n', '    }\n', '\n', '    function approveTransfer(address to) external onlyGovernor() {\n', '        _transferAllowed[to] = true;\n', '        emit ApproveTransfer(to);\n', '    }\n', '\n', '    function revokeTransfer(address to) external onlyGovernor() {\n', '        _transferAllowed[to] = false;\n', '        emit RevokeTransfer(to);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim ERC20-compliant tokens other than locked token.\n', '     * @param tokenToClaim Token to claim balance of.\n', '     */\n', '    function claimToken(IDigg tokenToClaim) external onlyBeneficiary() nonReentrant() {\n', '        require(address(tokenToClaim) != address(token()), "smart-timelock/no-locked-token-claim");\n', '        uint256 preAmount = token().balanceOf(address(this));\n', '\n', '        uint256 claimableTokenAmount = tokenToClaim.balanceOf(address(this));\n', '        require(claimableTokenAmount > 0, "smart-timelock/no-token-balance-to-claim");\n', '\n', '        tokenToClaim.transfer(beneficiary(), claimableTokenAmount);\n', '\n', '        uint256 postAmount = token().balanceOf(address(this));\n', '        require(postAmount >= preAmount, "smart-timelock/locked-balance-check");\n', '\n', '        emit ClaimToken(tokenToClaim, claimableTokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim Ether in contract.\n', '     */\n', '    function claimEther() external onlyBeneficiary() nonReentrant() {\n', '        uint256 preAmount = token().balanceOf(address(this));\n', '\n', '        uint256 etherToTransfer = address(this).balance;\n', '        require(etherToTransfer > 0, "smart-timelock/no-ether-balance-to-claim");\n', '\n', '        payable(beneficiary()).transfer(etherToTransfer);\n', '\n', '        uint256 postAmount = token().balanceOf(address(this));\n', '        require(postAmount >= preAmount, "smart-timelock/locked-balance-check");\n', '\n', '        emit ClaimEther(etherToTransfer);\n', '    }\n', '\n', '    /**\n', '     * @notice Governor address\n', '     */\n', '    function governor() external view returns (address) {\n', '        return _governor;\n', '    }\n', '\n', '    /**\n', '     * @notice Allow timelock to receive Ether\n', '     */\n', '    receive() external payable {}\n', '}']