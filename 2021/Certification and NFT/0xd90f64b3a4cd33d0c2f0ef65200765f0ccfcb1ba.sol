['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' */\n', 'contract Pausable is Context {\n', '    event Paused(address account);\n', '    event Shutdown(address account);\n', '    event Unpaused(address account);\n', '    event Open(address account);\n', '\n', '    bool public paused;\n', '    bool public stopEverything;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Pausable: paused");\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotShutdown() {\n', '        require(!stopEverything, "Pausable: shutdown");\n', '        _;\n', '    }\n', '\n', '    modifier whenShutdown() {\n', '        require(stopEverything, "Pausable: not shutdown");\n', '        _;\n', '    }\n', '\n', '    /// @dev Pause contract operations, if contract is not paused.\n', '    function _pause() internal virtual whenNotPaused {\n', '        paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n', '    function _unpause() internal virtual whenPaused whenNotShutdown {\n', '        paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    /// @dev Shutdown contract operations, if not already shutdown.\n', '    function _shutdown() internal virtual whenNotShutdown {\n', '        stopEverything = true;\n', '        paused = true;\n', '        emit Shutdown(_msgSender());\n', '    }\n', '\n', '    /// @dev Open contract operations, if contract is in shutdown state\n', '    function _open() internal virtual whenShutdown {\n', '        stopEverything = false;\n', '        emit Open(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/aave/IAaveV2.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface AaveLendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '\n', '    function getAddress(bytes32 id) external view returns (address);\n', '}\n', '\n', 'interface AaveLendingPool {\n', '    function deposit(\n', '        address asset,\n', '        uint256 amount,\n', '        address onBehalfOf,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    function withdraw(\n', '        address asset,\n', '        uint256 amount,\n', '        address to\n', '    ) external returns (uint256);\n', '}\n', '\n', 'interface AaveProtocolDataProvider {\n', '    function getReserveTokensAddresses(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            address aTokenAddress,\n', '            address stableDebtTokenAddress,\n', '            address variableDebtTokenAddress\n', '        );\n', '}\n', '\n', '// File: contracts/interfaces/maker/IMakerDAO.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ManagerLike {\n', '    function cdpCan(\n', '        address,\n', '        uint256,\n', '        address\n', '    ) external view returns (uint256);\n', '\n', '    function ilks(uint256) external view returns (bytes32);\n', '\n', '    function owns(uint256) external view returns (address);\n', '\n', '    function urns(uint256) external view returns (address);\n', '\n', '    function vat() external view returns (address);\n', '\n', '    function open(bytes32, address) external returns (uint256);\n', '\n', '    function give(uint256, address) external;\n', '\n', '    function cdpAllow(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function urnAllow(address, uint256) external;\n', '\n', '    function frob(\n', '        uint256,\n', '        int256,\n', '        int256\n', '    ) external;\n', '\n', '    function flux(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function move(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function exit(\n', '        address,\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function quit(uint256, address) external;\n', '\n', '    function enter(address, uint256) external;\n', '\n', '    function shift(uint256, uint256) external;\n', '}\n', '\n', 'interface VatLike {\n', '    function can(address, address) external view returns (uint256);\n', '\n', '    function ilks(bytes32)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function dai(address) external view returns (uint256);\n', '\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '\n', '    function frob(\n', '        bytes32,\n', '        address,\n', '        address,\n', '        address,\n', '        int256,\n', '        int256\n', '    ) external;\n', '\n', '    function hope(address) external;\n', '\n', '    function nope(address) external;\n', '\n', '    function move(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) external;\n', '}\n', '\n', 'interface GemJoinLike {\n', '    function dec() external view returns (uint256);\n', '\n', '    function gem() external view returns (address);\n', '\n', '    function ilk() external view returns (bytes32);\n', '\n', '    function join(address, uint256) external payable;\n', '\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface DaiJoinLike {\n', '    function vat() external returns (VatLike);\n', '\n', '    function dai() external view returns (address);\n', '\n', '    function join(address, uint256) external payable;\n', '\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface JugLike {\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface SpotterLike {\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '}\n', '\n', '// File: contracts/interfaces/vesper/ICollateralManager.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICollateralManager {\n', '    function addGemJoin(address[] calldata gemJoins) external;\n', '\n', '    function mcdManager() external view returns (address);\n', '\n', '    function borrow(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function depositCollateral(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function getVaultBalance(uint256 vaultNum) external view returns (uint256 collateralLocked);\n', '\n', '    function getVaultDebt(uint256 vaultNum) external view returns (uint256 daiDebt);\n', '\n', '    function getVaultInfo(uint256 vaultNum)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        );\n', '\n', '    function payback(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function registerVault(uint256 vaultNum, bytes32 collateralType) external;\n', '\n', '    function vaultOwner(uint256 vaultNum) external returns (address owner);\n', '\n', '    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        );\n', '\n', '    function withdrawCollateral(uint256 vaultNum, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IController.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IController {\n', '    function aaveReferralCode() external view returns (uint16);\n', '\n', '    function feeCollector(address) external view returns (address);\n', '\n', '    function founderFee() external view returns (uint256);\n', '\n', '    function founderVault() external view returns (address);\n', '\n', '    function interestFee(address) external view returns (uint256);\n', '\n', '    function isPool(address) external view returns (bool);\n', '\n', '    function pools() external view returns (address);\n', '\n', '    function strategy(address) external view returns (address);\n', '\n', '    function rebalanceFriction(address) external view returns (uint256);\n', '\n', '    function poolRewards(address) external view returns (address);\n', '\n', '    function treasuryPool() external view returns (address);\n', '\n', '    function uniswapRouter() external view returns (address);\n', '\n', '    function withdrawFee(address) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IStrategy {\n', '    function rebalance() external;\n', '\n', '    function deposit(uint256 amount) external;\n', '\n', '    function beforeWithdraw() external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function withdrawAll() external;\n', '\n', '    function isUpgradable() external view returns (bool);\n', '\n', '    function isReservedToken(address _token) external view returns (bool);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function pool() external view returns (address);\n', '\n', '    function totalLocked() external view returns (uint256);\n', '\n', '    //Lifecycle functions\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IVesperPool.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IVesperPool is IERC20 {\n', '    function approveToken() external;\n', '\n', '    function deposit() external payable;\n', '\n', '    function deposit(uint256) external;\n', '\n', '    function multiTransfer(uint256[] memory) external returns (bool);\n', '\n', '    function permit(\n', '        address,\n', '        address,\n', '        uint256,\n', '        uint256,\n', '        uint8,\n', '        bytes32,\n', '        bytes32\n', '    ) external;\n', '\n', '    function rebalance() external;\n', '\n', '    function resetApproval() external;\n', '\n', '    function sweepErc20(address) external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function withdrawETH(uint256) external;\n', '\n', '    function withdrawByStrategy(uint256) external;\n', '\n', '    function feeCollector() external view returns (address);\n', '\n', '    function getPricePerShare() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function tokensHere() external view returns (uint256);\n', '\n', '    function totalValue() external view returns (uint256);\n', '\n', '    function withdrawFee() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/IUniswapV2Router01.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/IUniswapV2Router02.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/strategies/AaveV2MakerStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @dev This strategy will deposit collateral token in Maker and borrow DAI\n', '/// and deposit borrowed DAI in Aave to earn interest on it.\n', 'abstract contract AaveV2MakerStrategy is IStrategy, Pausable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    //solhint-disable-next-line const-name-snakecase\n', '    AaveLendingPoolAddressesProvider public constant aaveAddressesProvider =\n', '        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n', '    ICollateralManager public immutable cm;\n', '    IController public immutable controller;\n', '    IERC20 public immutable collateralToken;\n', '    bytes32 public immutable collateralType;\n', '    uint256 public immutable vaultNum;\n', '    address public immutable override pool;\n', '    uint256 public lastRebalanceBlock;\n', '    uint256 public highWater;\n', '    uint256 public lowWater;\n', '\n', '    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\n', '    uint256 private constant WAT = 10**16;\n', '    IERC20 private immutable aToken;\n', '    mapping(address => bool) private reservedToken;\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _pool,\n', '        address _collateralToken,\n', '        address _cm,\n', '        bytes32 _collateralType\n', '    ) public {\n', '        require(_controller != address(0), "Controller address is zero");\n', '        require(IController(_controller).isPool(_pool), "Not a valid pool");\n', '        controller = IController(_controller);\n', '        collateralType = _collateralType;\n', '        vaultNum = _createVault(_collateralType, _cm);\n', '        pool = _pool;\n', '        collateralToken = IERC20(_collateralToken);\n', '        cm = ICollateralManager(_cm);\n', '        address aTokenAddress = _getToken();\n', '        aToken = IERC20(aTokenAddress);\n', '\n', '        reservedToken[_collateralToken] = true;\n', '        reservedToken[aTokenAddress] = true;\n', '        reservedToken[DAI] = true;\n', '    }\n', '\n', '    modifier live() {\n', '        require(!paused || _msgSender() == address(controller), "Contract has paused");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            _msgSender() == address(controller) || _msgSender() == pool,\n', '            "Caller is not authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(_msgSender() == address(controller), "Caller is not the controller");\n', '        _;\n', '    }\n', '\n', '    modifier onlyPool() {\n', '        require(_msgSender() == pool, "Caller is not pool");\n', '        _;\n', '    }\n', '\n', '    function pause() external override onlyController {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external override onlyController {\n', '        _unpause();\n', '    }\n', '\n', '    /// @dev Approve Dai and collateralToken to collateral manager\n', '    function approveToken() external onlyController {\n', '        IERC20(DAI).safeApprove(address(cm), MAX_UINT_VALUE);\n', '        collateralToken.safeApprove(address(cm), MAX_UINT_VALUE);\n', '    }\n', '\n', '    /// @dev Reset Dai and collateralToken approval of collateral manager\n', '    function resetApproval() external onlyController {\n', '        IERC20(DAI).safeApprove(address(cm), 0);\n', '        collateralToken.safeApprove(address(cm), 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Deposit collateral token into Maker vault.\n', '     * @param _amount Amount of collateral token\n', '     */\n', '    function deposit(uint256 _amount) external override onlyPool {\n', '        _deposit(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Called during withdrawal process.\n', '     * Withdraw is not allowed if pool in underwater.\n', '     * If pool is underwater, calling resurface() will bring pool above water.\n', "     * It will impact share price in pool and that's why it has to be called before withdraw.\n", '     */\n', '    function beforeWithdraw() external override onlyPool {\n', '        if (isUnderwater()) {\n', '            _resurface();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw collateral token from Maker and in order to do that strategy\n', '     * has to withdraw Dai from Aave and payback Dai in Maker.\n', '     * @param _amount Amount of collateral token to be withdrawn\n', '     */\n', '    function withdraw(uint256 _amount) external override onlyAuthorized {\n', '        _withdraw(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Rebalance earning and withdraw all collateral.\n', '     * Controller only function, called when migrating strategy.\n', '     */\n', '    function withdrawAllWithRebalance() external onlyController {\n', '        _rebalanceEarned();\n', '        _withdrawAll();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw all collateral. No rebalance earning.\n', '     * Controller only function, called when migrating strategy.\n', '     */\n', '    function withdrawAll() external override onlyController {\n', '        _withdrawAll();\n', '    }\n', '\n', '    /**\n', '     * @dev Wrapper function for rebalanceEarned and rebalanceCollateral\n', '     * Anyone can call it except when paused.\n', '     */\n', '    function rebalance() external override live {\n', '        _rebalanceEarned();\n', '        _rebalanceCollateral();\n', '    }\n', '\n', '    /**\n', '     * @dev Rebalance collateral and debt in Maker.\n', '     * Based on defined risk parameter either borrow more DAI from Maker or\n', '     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\n', '     * Anyone can call it except when paused.\n', '     */\n', '    function rebalanceCollateral() external live {\n', '        _rebalanceCollateral();\n', '    }\n', '\n', '    /**\n', '     * @dev Convert earned DAI from Aave to collateral token\n', '     * Also calculate interest fee on earning from Aave and transfer fee to fee collector.\n', '     * Anyone can call it except when paused.\n', '     */\n', '    function rebalanceEarned() external live {\n', '        _rebalanceEarned();\n', '    }\n', '\n', '    /**\n', '     * @dev If pool is underwater this function will resolve underwater condition.\n', '     * If Debt in Maker is greater than aDAI balance in Aave then pool in underwater.\n', '     * Lowering DAI debt in Maker will resolve underwater condtion.\n', '     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\n', '     * collateral token from pool and/or Maker and convert those to DAI via Uniswap.\n', '     * Finally payback debt in Maker using DAI.\n', '     */\n', '    function resurface() external live {\n', '        _resurface();\n', '    }\n', '\n', '    /// @dev sweep given ERC20 token to vesper pool\n', '    function sweepErc20(address _fromToken) external {\n', '        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\n', '        IERC20(_fromToken).safeTransfer(pool, amount);\n', '    }\n', '\n', '    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyController {\n', '        require(_lowWater != 0, "Value is zero");\n', '        require(_highWater > _lowWater, "highWater <= lowWater");\n', '        highWater = _highWater.mul(WAT);\n', '        lowWater = _lowWater.mul(WAT);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns interest earned since last rebalance.\n', '     * @dev Make sure to return value in collateral token and in order to do that\n', '     * we are using Uniswap to get collateral amount for earned DAI.\n', '     */\n', '    function interestEarned() external view returns (uint256) {\n', '        uint256 aDaiBalance = aToken.balanceOf(pool);\n', '        uint256 debt = cm.getVaultDebt(vaultNum);\n', '        if (aDaiBalance > debt) {\n', '            uint256 daiEarned = aDaiBalance.sub(debt);\n', '            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\n', '            address[] memory path = _getPath(DAI, address(collateralToken));\n', '            return uniswapRouter.getAmountsOut(daiEarned, path)[path.length - 1];\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /// @dev Returns true if strategy can be upgraded.\n', '    function isUpgradable() external view override returns (bool) {\n', '        return totalLocked() == 0;\n', '    }\n', '\n', '    function isReservedToken(address _token) external view override returns (bool) {\n', '        return reservedToken[_token];\n', '    }\n', '\n', '    /// @dev Address of Aave DAI token\n', '    function token() external view override returns (address) {\n', '        return address(aToken);\n', '    }\n', '\n', '    /// @dev Check if pool is underwater i.e. debt is greater than aDai in Aave\n', '    function isUnderwater() public view returns (bool) {\n', '        return cm.getVaultDebt(vaultNum) > aToken.balanceOf(pool);\n', '    }\n', '\n', '    /// @dev Returns total collateral locked in Maker vault\n', '    function totalLocked() public view override returns (uint256) {\n', '        return convertFrom18(cm.getVaultBalance(vaultNum));\n', '    }\n', '\n', '    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\n', '    function convertFrom18(uint256 _amount) public pure virtual returns (uint256) {\n', '        return _amount;\n', '    }\n', '\n', '    /// @dev Create new Maker vault\n', '    function _createVault(bytes32 _collateralType, address _cm) internal returns (uint256 vaultId) {\n', '        address mcdManager = ICollateralManager(_cm).mcdManager();\n', '        ManagerLike manager = ManagerLike(mcdManager);\n', '        vaultId = manager.open(_collateralType, address(this));\n', '        manager.cdpAllow(vaultId, address(this), 1);\n', '\n', "        //hope and cpdAllow on vat for collateralManager's address\n", '        VatLike(manager.vat()).hope(_cm);\n', '        manager.cdpAllow(vaultId, _cm, 1);\n', '\n', '        //Register vault with collateral Manager\n', '        ICollateralManager(_cm).registerVault(vaultId, _collateralType);\n', '    }\n', '\n', '    function _deposit(uint256 _amount) internal {\n', '        collateralToken.safeTransferFrom(pool, address(this), _amount);\n', '        cm.depositCollateral(vaultNum, _amount);\n', '    }\n', '\n', '    function _depositDaiToAave(uint256 _amount) internal {\n', '        address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\n', '        IERC20(DAI).safeApprove(_aaveLendingPool, 0);\n', '        IERC20(DAI).safeApprove(_aaveLendingPool, _amount);\n', '        AaveLendingPool(_aaveLendingPool).deposit(\n', '            DAI,\n', '            _amount,\n', '            pool,\n', '            controller.aaveReferralCode()\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deposit fee into Vesper pool to get Vesper pool shares.\n', '     * Transfer fee, Vesper pool shares, to fee collector.\n', '     */\n', '    function _handleFee(uint256 fee) internal {\n', '        if (fee != 0) {\n', '            collateralToken.safeApprove(pool, 0);\n', '            collateralToken.safeApprove(pool, fee);\n', '            IVesperPool(pool).deposit(fee);\n', '            uint256 feeInShare = IERC20(pool).balanceOf(address(this));\n', '            IERC20(pool).safeTransfer(controller.feeCollector(pool), feeInShare);\n', '        }\n', '    }\n', '\n', '    function _moveDaiToMaker(uint256 _amount) internal {\n', '        if (_amount != 0) {\n', '            _withdrawDaiFromAave(_amount);\n', '            cm.payback(vaultNum, _amount);\n', '        }\n', '    }\n', '\n', '    function _moveDaiFromMaker(uint256 _amount) internal {\n', '        cm.borrow(vaultNum, _amount);\n', '        _depositDaiToAave(_amount);\n', '    }\n', '\n', '    function _rebalanceCollateral() internal {\n', '        _deposit(collateralToken.balanceOf(pool));\n', '        (\n', '            uint256 collateralLocked,\n', '            uint256 debt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        ) = cm.getVaultInfo(vaultNum);\n', '        uint256 maxDebt = collateralLocked.mul(collateralUsdRate).div(highWater);\n', '        if (maxDebt < minimumDebt) {\n', '            // Dusting scenario. Payback all DAI\n', '            _moveDaiToMaker(debt);\n', '        } else {\n', '            if (collateralRatio > highWater) {\n', '                require(!isUnderwater(), "Pool is underwater");\n', '                _moveDaiFromMaker(maxDebt.sub(debt));\n', '            } else if (collateralRatio < lowWater) {\n', '                // Redeem DAI from Aave and deposit in maker\n', '                _moveDaiToMaker(debt.sub(maxDebt));\n', '            }\n', '        }\n', '    }\n', '\n', '    function _rebalanceEarned() internal {\n', '        require(\n', '            (block.number - lastRebalanceBlock) >= controller.rebalanceFriction(pool),\n', '            "Can not rebalance"\n', '        );\n', '        lastRebalanceBlock = block.number;\n', '        uint256 debt = cm.getVaultDebt(vaultNum);\n', '        _withdrawExcessDaiFromAave(debt);\n', '        uint256 balance = IERC20(DAI).balanceOf(address(this));\n', '        if (balance != 0) {\n', '            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\n', '            IERC20(DAI).safeApprove(address(uniswapRouter), 0);\n', '            IERC20(DAI).safeApprove(address(uniswapRouter), balance);\n', '            address[] memory path = _getPath(DAI, address(collateralToken));\n', '            // Swap and get collateralToken here.\n', '            // It is possible that amount out resolves to 0\n', '            // Which will cause the swap to fail\n', '            uint256 tokenAmountOut = uniswapRouter.getAmountsOut(balance, path)[0];\n', '            if (tokenAmountOut != 0) {\n', '                uniswapRouter.swapExactTokensForTokens(balance, 1, path, address(this), now + 30);\n', '                uint256 collateralBalance = collateralToken.balanceOf(address(this));\n', '                uint256 fee = collateralBalance.mul(controller.interestFee(pool)).div(1e18);\n', '                collateralToken.safeTransfer(pool, collateralBalance.sub(fee));\n', '                _handleFee(fee);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _resurface() internal {\n', '        uint256 earnBalance = aToken.balanceOf(pool);\n', '        uint256 debt = cm.getVaultDebt(vaultNum);\n', '        require(debt > earnBalance, "Pool is above water");\n', '        uint256 shortAmount = debt.sub(earnBalance);\n', '        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\n', '        address[] memory path = _getPath(address(collateralToken), DAI);\n', '        uint256 tokenNeeded = uniswapRouter.getAmountsIn(shortAmount, path)[0];\n', '\n', '        uint256 balance = collateralToken.balanceOf(pool);\n', '\n', '        // If pool has more balance than tokenNeeded, get what needed from pool\n', '        // else get pool balance from pool and remaining from Maker vault\n', '        if (balance >= tokenNeeded) {\n', '            collateralToken.safeTransferFrom(pool, address(this), tokenNeeded);\n', '        } else {\n', '            cm.withdrawCollateral(vaultNum, tokenNeeded.sub(balance));\n', '            collateralToken.safeTransferFrom(pool, address(this), balance);\n', '        }\n', '        collateralToken.safeApprove(address(uniswapRouter), 0);\n', '        collateralToken.safeApprove(address(uniswapRouter), tokenNeeded);\n', '        uniswapRouter.swapExactTokensForTokens(tokenNeeded, 1, path, address(this), now + 30);\n', '        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\n', '        cm.payback(vaultNum, daiBalance);\n', '\n', '        // If Uniswap operation leave any collateral dust then send it to pool\n', '        uint256 _collateralbalance = collateralToken.balanceOf(address(this));\n', '        if (_collateralbalance != 0) {\n', '            collateralToken.safeTransfer(pool, _collateralbalance);\n', '        }\n', '    }\n', '\n', '    function _withdrawDaiFromAave(uint256 _amount) internal {\n', '        IERC20(address(aToken)).safeTransferFrom(pool, address(this), _amount);\n', '        address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\n', '        AaveLendingPool(_aaveLendingPool).withdraw(DAI, _amount, address(this));\n', '    }\n', '\n', '    function _withdrawExcessDaiFromAave(uint256 _base) internal {\n', '        uint256 _balance = aToken.balanceOf(pool);\n', '        if (_balance > _base) {\n', '            uint256 _amount = _balance.sub(_base);\n', '            IERC20(address(aToken)).safeTransferFrom(pool, address(this), _amount);\n', '            address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\n', '            AaveLendingPool(_aaveLendingPool).withdraw(DAI, _amount, address(this));\n', '        }\n', '    }\n', '\n', '    function _withdraw(uint256 _amount) internal {\n', '        (\n', '            uint256 collateralLocked,\n', '            uint256 debt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        ) = cm.whatWouldWithdrawDo(vaultNum, _amount);\n', '        if (debt != 0 && collateralRatio < lowWater) {\n', '            // If this withdraw results in Low Water scenario.\n', '            uint256 maxDebt = collateralLocked.mul(collateralUsdRate).div(highWater);\n', '            if (maxDebt < minimumDebt) {\n', '                // This is Dusting scenario\n', '                _moveDaiToMaker(debt);\n', '            } else if (maxDebt < debt) {\n', '                _moveDaiToMaker(debt.sub(maxDebt));\n', '            }\n', '        }\n', '        cm.withdrawCollateral(vaultNum, _amount);\n', '        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        _moveDaiToMaker(cm.getVaultDebt(vaultNum));\n', '        require(cm.getVaultDebt(vaultNum) == 0, "Debt should be 0");\n', '        cm.withdrawCollateral(vaultNum, totalLocked());\n', '        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n', '    }\n', '\n', '    /// @dev Get aToken address\n', '    function _getToken() internal view returns (address) {\n', '        bytes32 providerId = 0x0100000000000000000000000000000000000000000000000000000000000000;\n', '        address aaveProtocolDataProvider = aaveAddressesProvider.getAddress(providerId);\n', '        (address aTokenAddress, , ) =\n', '            AaveProtocolDataProvider(aaveProtocolDataProvider).getReserveTokensAddresses(DAI);\n', '        return aTokenAddress;\n', '    }\n', '\n', '    function _getPath(address _from, address _to) internal pure returns (address[] memory) {\n', '        address[] memory path;\n', '        if (_from == WETH || _to == WETH) {\n', '            path = new address[](2);\n', '            path[0] = _from;\n', '            path[1] = _to;\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = _from;\n', '            path[1] = WETH;\n', '            path[2] = _to;\n', '        }\n', '        return path;\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/AaveV2MakerStrategyETH.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '//solhint-disable no-empty-blocks\n', 'contract AaveV2MakerStrategyETH is AaveV2MakerStrategy {\n', '    string public constant NAME = "Strategy-AaveV2Maker-ETH";\n', '    string public constant VERSION = "2.0.2";\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _pool,\n', '        address _cm\n', '    )\n', '        public\n', '        AaveV2MakerStrategy(\n', '            _controller,\n', '            _pool,\n', '            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\n', '            _cm,\n', '            "ETH-A"\n', '        )\n', '    {}\n', '}']