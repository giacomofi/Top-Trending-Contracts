['# @version 0.2.8\n', '"""\n', '@title yToken Burner\n', '@notice Converts yTokens to USDC and transfers to `UnderlyingBurner`\n', '"""\n', '\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface AddressProvider:\n', '    def get_registry() -> address: view\n', '    def get_address(_id: uint256) -> address: view\n', '\n', 'interface Registry:\n', '    def find_pool_for_coins(_from: address, _to: address) -> address: view\n', '\n', 'interface RegistrySwap:\n', '    def exchange_with_best_rate(\n', '        _from: address,\n', '        _to: address,\n', '        _amount: uint256,\n', '        _expected: uint256,\n', '    ) -> uint256: payable\n', '\n', 'interface yERC20:\n', '    def withdraw(withdrawTokens: uint256): nonpayable\n', '    def token() -> address: view\n', '\n', '\n', 'ADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\n', '\n', 'TRIPOOL_COINS: constant(address[3]) = [\n', '    0x6B175474E89094C44Da98b954EedeAC495271d0F,\n', '    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\n', '    0xdAC17F958D2ee523a2206206994597C13D831ec7,\n', ']\n', 'USDC: constant(address) = TRIPOOL_COINS[1]\n', '\n', '\n', 'is_approved: HashMap[address, HashMap[address, bool]]\n', 'swap_for: HashMap[address, address]\n', '\n', 'receiver: public(address)\n', 'recovery: public(address)\n', 'is_killed: public(bool)\n', '\n', 'owner: public(address)\n', 'emergency_owner: public(address)\n', 'future_owner: public(address)\n', 'future_emergency_owner: public(address)\n', '\n', '\n', '@external\n', 'def __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\n', '    """\n', '    @notice Contract constructor\n', '    @param _receiver Address that converted tokens are transferred to.\n', '                     Should be set to an `UnderlyingBurner` deployment.\n', '    @param _recovery Address that tokens are transferred to during an\n', '                     emergency token recovery.\n', '    @param _owner Owner address. Can kill the contract, recover tokens\n', '                  and modify the recovery address.\n', '    @param _emergency_owner Emergency owner address. Can kill the contract\n', '                            and recover tokens.\n', '    """\n', '    self.receiver = _receiver\n', '    self.recovery = _recovery\n', '    self.owner = _owner\n', '    self.emergency_owner = _emergency_owner\n', '\n', '    # yTUSD -> yUSDC\n', '    self.swap_for[0x73a052500105205d34Daf004eAb301916DA8190f] = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e\n', '    # yBUSD -> yUSDC\n', '    self.swap_for[0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE] = 0x26EA744E5B887E5205727f55dFBE8685e3b21951\n', '\n', '\n', '@external\n', 'def burn(_coin: address) -> bool:\n', '    """\n', '    @notice Unwrap `_coin` and transfer to the underlying burner\n', '    @param _coin Address of the coin being unwrapped\n', '    @return bool success\n', '    """\n', '    assert not self.is_killed  # dev: is killed\n', '\n', '    # transfer coins from caller\n', '    coin: address = _coin\n', '    amount: uint256 = ERC20(coin).balanceOf(msg.sender)\n', '    if amount != 0:\n', '        ERC20(coin).transferFrom(msg.sender, self, amount)\n', '\n', '    # get actual balance in case of transfer fee or pre-existing balance\n', '    amount = ERC20(coin).balanceOf(self)\n', '\n', '    if amount != 0:\n', '        # if underlying asset is not DAI/USDC/USDT, swap yUSDC prior to unwrap\n', '        swap_for: address = self.swap_for[coin]\n', '        if swap_for != ZERO_ADDRESS:\n', '            registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\n', '\n', '            if not self.is_approved[registry_swap][coin]:\n', '                ERC20(coin).approve(registry_swap, MAX_UINT256)\n', '                self.is_approved[registry_swap][coin] = True\n', '\n', '            amount = RegistrySwap(registry_swap).exchange_with_best_rate(coin, swap_for, amount, 0)\n', '            coin = swap_for\n', '\n', '        # unwrap yTokens for underlying asset\n', '        yERC20(coin).withdraw(amount)\n', '        underlying: address = yERC20(coin).token()\n', '\n', '        # transfer underlying to underlying burner\n', '        amount = ERC20(underlying).balanceOf(self)\n', '        response: Bytes[32] = raw_call(\n', '            underlying,\n', '            concat(\n', '                method_id("transfer(address,uint256)"),\n', '                convert(self.receiver, bytes32),\n', '                convert(amount, bytes32),\n', '            ),\n', '            max_outsize=32,\n', '        )\n', '        if len(response) != 0:\n', '            assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_swap_for(_coin: address, _swap_for: address) -> bool:\n', '    """\n', '    @notice Set an intermediate coin for coins that do not unwrap\n', '                to DAI/USDC/USDT\n', '    @param _coin Coin being burned\n', '    @param _swap_for Intermediate coin that can be swapped for\n', '                     `_coin` and unwraps to USDC\n', '    @return bool success\n', '    """\n', '    registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\n', '\n', '    if _swap_for == ZERO_ADDRESS:\n', '        # removing an intermediary swap, ensure the token unwraps to USDC\n', '        assert yERC20(_coin).token() == USDC\n', '    else:\n', '        # adding an intermediary swap, ensure the token does not unwrap to USDC,\n', '        # the target tokens does unwrap to USDC, and a pool exists for the swap\n', '        assert not yERC20(_coin).token() in TRIPOOL_COINS\n', '        assert yERC20(_swap_for).token() == USDC\n', '        assert Registry(registry).find_pool_for_coins(_coin, _swap_for) != ZERO_ADDRESS\n', '\n', '    self.swap_for[_coin] = _swap_for\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def recover_balance(_coin: address) -> bool:\n', '    """\n', '    @notice Recover ERC20 tokens from this contract\n', '    @dev Tokens are sent to the recovery address\n', '    @param _coin Token address\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '\n', '    amount: uint256 = ERC20(_coin).balanceOf(self)\n', '    response: Bytes[32] = raw_call(\n', '        _coin,\n', '        concat(\n', '            method_id("transfer(address,uint256)"),\n', '            convert(self.recovery, bytes32),\n', '            convert(amount, bytes32),\n', '        ),\n', '        max_outsize=32,\n', '    )\n', '    if len(response) != 0:\n', '        assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_recovery(_recovery: address) -> bool:\n', '    """\n', '    @notice Set the token recovery address\n', '    @param _recovery Token recovery address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.recovery = _recovery\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_killed(_is_killed: bool) -> bool:\n', '    """\n', '    @notice Set killed status for this contract\n', '    @dev When killed, the `burn` function cannot be called\n', '    @param _is_killed Killed status\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '    self.is_killed = _is_killed\n', '\n', '    return True\n', '\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.future_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_owner  # dev: only owner\n', '    self.owner = msg.sender\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def commit_transfer_emergency_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.emergency_owner  # dev: only owner\n', '    self.future_emergency_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_emergency_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_emergency_owner  # dev: only owner\n', '    self.emergency_owner = msg.sender\n', '\n', '    return True']