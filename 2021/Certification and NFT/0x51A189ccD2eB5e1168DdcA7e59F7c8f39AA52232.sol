['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/library/LoanLib.sol\n', 'pragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\n', '\n', '////// contracts/interfaces/ICollateralLocker.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ICollateralLocker {\n', '\n', '    function collateralAsset() external view returns (address);\n', '\n', '    function loan() external view returns (address);\n', '\n', '    function pull(address, uint256) external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/ICollateralLockerFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ICollateralLockerFactory {\n', '\n', '    function owner(address) external view returns (address);\n', '    \n', '    function isLocker(address) external view returns (bool);\n', '\n', '    function factoryType() external view returns (uint8);\n', '\n', '    function newLocker(address) external returns (address);\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '////// contracts/interfaces/IERC20Details.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"; */\n', '\n', 'interface IERC20Details is IERC20 {\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/IFundingLocker.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IFundingLocker {\n', '\n', '    function liquidityAsset() external view returns (address);\n', '\n', '    function loan() external view returns (address);\n', '\n', '    function pull(address, uint256) external;\n', '\n', '    function drain() external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/IFundingLockerFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IFundingLockerFactory {\n', '\n', '    function owner(address) external view returns (address);\n', '    \n', '    function isLocker(address) external view returns (bool);\n', '\n', '    function factoryType() external view returns (uint8);\n', '    \n', '    function newLocker(address) external returns (address);\n', '\n', '}\n', '\n', '////// contracts/interfaces/ILateFeeCalc.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ILateFeeCalc {\n', '\n', '    function calcType() external view returns (uint8);\n', '\n', '    function name() external view returns (bytes32);\n', '\n', '    function lateFee() external view returns (uint256);\n', '\n', '    function getLateFee(uint256) external view returns (uint256);\n', '\n', '} \n', '\n', '////// contracts/interfaces/ILoanFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ILoanFactory {\n', '\n', '    function CL_FACTORY() external view returns (uint8);\n', '\n', '    function FL_FACTORY() external view returns (uint8);\n', '\n', '    function INTEREST_CALC_TYPE() external view returns (uint8);\n', '\n', '    function LATEFEE_CALC_TYPE() external view returns (uint8);\n', '\n', '    function PREMIUM_CALC_TYPE() external view returns (uint8);\n', '\n', '    function globals() external view returns (address);\n', '\n', '    function loansCreated() external view returns (uint256);\n', '\n', '    function loans(uint256) external view returns (address);\n', '\n', '    function isLoan(address) external view returns (bool);\n', '\n', '    function loanFactoryAdmins(address) external view returns (bool);\n', '\n', '    function setGlobals(address) external;\n', '    \n', '    function createLoan(address, address, address, address, uint256[5] memory, address[3] memory) external returns (address);\n', '\n', '    function setLoanFactoryAdmin(address, bool) external;\n', '\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/IMapleGlobals.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IMapleGlobals {\n', '\n', '    function pendingGovernor() external view returns (address);\n', '\n', '    function governor() external view returns (address);\n', '\n', '    function globalAdmin() external view returns (address);\n', '\n', '    function mpl() external view returns (address);\n', '\n', '    function mapleTreasury() external view returns (address);\n', '\n', '    function isValidBalancerPool(address) external view returns (bool);\n', '\n', '    function treasuryFee() external view returns (uint256);\n', '\n', '    function investorFee() external view returns (uint256);\n', '\n', '    function defaultGracePeriod() external view returns (uint256);\n', '\n', '    function fundingPeriod() external view returns (uint256);\n', '\n', '    function swapOutRequired() external view returns (uint256);\n', '\n', '    function isValidLiquidityAsset(address) external view returns (bool);\n', '\n', '    function isValidCollateralAsset(address) external view returns (bool);\n', '\n', '    function isValidPoolDelegate(address) external view returns (bool);\n', '\n', '    function validCalcs(address) external view returns (bool);\n', '\n', '    function isValidCalc(address, uint8) external view returns (bool);\n', '\n', '    function getLpCooldownParams() external view returns (uint256, uint256);\n', '\n', '    function isValidLoanFactory(address) external view returns (bool);\n', '\n', '    function isValidSubFactory(address, address, uint8) external view returns (bool);\n', '\n', '    function isValidPoolFactory(address) external view returns (bool);\n', '    \n', '    function getLatestPrice(address) external view returns (uint256);\n', '    \n', '    function defaultUniswapPath(address, address) external view returns (address);\n', '\n', '    function minLoanEquity() external view returns (uint256);\n', '    \n', '    function maxSwapSlippage() external view returns (uint256);\n', '\n', '    function protocolPaused() external view returns (bool);\n', '\n', '    function stakerCooldownPeriod() external view returns (uint256);\n', '\n', '    function lpCooldownPeriod() external view returns (uint256);\n', '\n', '    function stakerUnstakeWindow() external view returns (uint256);\n', '\n', '    function lpWithdrawWindow() external view returns (uint256);\n', '\n', '    function oracleFor(address) external view returns (address);\n', '\n', '    function validSubFactories(address, address) external view returns (bool);\n', '\n', '    function setStakerCooldownPeriod(uint256) external;\n', '\n', '    function setLpCooldownPeriod(uint256) external;\n', '\n', '    function setStakerUnstakeWindow(uint256) external;\n', '\n', '    function setLpWithdrawWindow(uint256) external;\n', '\n', '    function setMaxSwapSlippage(uint256) external;\n', '\n', '    function setGlobalAdmin(address) external;\n', '\n', '    function setValidBalancerPool(address, bool) external;\n', '\n', '    function setProtocolPause(bool) external;\n', '\n', '    function setValidPoolFactory(address, bool) external;\n', '\n', '    function setValidLoanFactory(address, bool) external;\n', '\n', '    function setValidSubFactory(address, address, bool) external;\n', '\n', '    function setDefaultUniswapPath(address, address, address) external;\n', '\n', '    function setPoolDelegateAllowlist(address, bool) external;\n', '\n', '    function setCollateralAsset(address, bool) external;\n', '\n', '    function setLiquidityAsset(address, bool) external;\n', '\n', '    function setCalc(address, bool) external;\n', '\n', '    function setInvestorFee(uint256) external;\n', '\n', '    function setTreasuryFee(uint256) external;\n', '\n', '    function setMapleTreasury(address) external;\n', '\n', '    function setDefaultGracePeriod(uint256) external;\n', '\n', '    function setMinLoanEquity(uint256) external;\n', '\n', '    function setFundingPeriod(uint256) external;\n', '\n', '    function setSwapOutRequired(uint256) external;\n', '\n', '    function setPriceOracle(address, address) external;\n', '\n', '    function setPendingGovernor(address) external;\n', '\n', '    function acceptGovernor() external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/IPremiumCalc.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IPremiumCalc {\n', '\n', '    function calcType() external view returns (uint8);\n', '\n', '    function name() external view returns (bytes32);\n', '\n', '    function premiumFee() external view returns (uint256);\n', '\n', '    function getPremiumPayment(address) external view returns (uint256, uint256, uint256);\n', '\n', '} \n', '\n', '////// contracts/interfaces/IRepaymentCalc.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IRepaymentCalc {\n', '\n', '    function calcType() external view returns (uint8);\n', '\n', '    function name() external view returns (bytes32);\n', '\n', '    function getNextPayment(address) external view returns (uint256, uint256, uint256);\n', '\n', '} \n', '\n', '////// contracts/interfaces/IUniswapRouter.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IUniswapRouter {\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '////// contracts/library/Util.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "../interfaces/IERC20Details.sol"; */\n', '/* import "../interfaces/IMapleGlobals.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/math/SafeMath.sol"; */\n', '\n', '/// @title Util is a library that contains utility functions.\n', 'library Util {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '        @dev    Calculates the minimum amount from a swap (adjustable for price slippage).\n', '        @param  globals   Instance of a MapleGlobals.\n', '        @param  fromAsset Address of ERC-20 that will be swapped.\n', '        @param  toAsset   Address of ERC-20 that will returned from swap.\n', '        @param  swapAmt   Amount of `fromAsset` to be swapped.\n', '        @return Expected amount of `toAsset` to receive from swap based on current oracle prices.\n', '    */\n', '    function calcMinAmount(IMapleGlobals globals, address fromAsset, address toAsset, uint256 swapAmt) external view returns (uint256) {\n', '        return \n', '            swapAmt\n', '                .mul(globals.getLatestPrice(fromAsset))           // Convert from `fromAsset` value.\n', '                .mul(10 ** IERC20Details(toAsset).decimals())     // Convert to `toAsset` decimal precision.\n', '                .div(globals.getLatestPrice(toAsset))             // Convert to `toAsset` value.\n', '                .div(10 ** IERC20Details(fromAsset).decimals());  // Convert from `fromAsset` decimal precision.\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/utils/Address.sol\n', '/* pragma solidity >=0.6.2 <0.8.0; */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "./IERC20.sol"; */\n', '/* import "../../math/SafeMath.sol"; */\n', '/* import "../../utils/Address.sol"; */\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '////// contracts/library/LoanLib.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "../interfaces/ICollateralLocker.sol"; */\n', '/* import "../interfaces/ICollateralLockerFactory.sol"; */\n', '/* import "../interfaces/IERC20Details.sol"; */\n', '/* import "../interfaces/IFundingLocker.sol"; */\n', '/* import "../interfaces/IFundingLockerFactory.sol"; */\n', '/* import "../interfaces/IMapleGlobals.sol"; */\n', '/* import "../interfaces/ILateFeeCalc.sol"; */\n', '/* import "../interfaces/ILoanFactory.sol"; */\n', '/* import "../interfaces/IPremiumCalc.sol"; */\n', '/* import "../interfaces/IRepaymentCalc.sol"; */\n', '/* import "../interfaces/IUniswapRouter.sol"; */\n', '\n', '/* import "../library/Util.sol"; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/math/SafeMath.sol"; */\n', '\n', '/// @title LoanLib is a library of utility functions used by Loan.\n', 'library LoanLib {\n', '\n', '    using SafeMath  for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    /********************************/\n', '    /*** Lender Utility Functions ***/\n', '    /********************************/\n', '\n', '    /**\n', '        @dev    Performs sanity checks on the data passed in Loan constructor.\n', '        @param  globals         Instance of a MapleGlobals.\n', '        @param  liquidityAsset  Contract address of the Liquidity Asset.\n', '        @param  collateralAsset Contract address of the Collateral Asset.\n', '        @param  specs           Contains specifications for this Loan.\n', '    */\n', '    function loanSanityChecks(IMapleGlobals globals, address liquidityAsset, address collateralAsset, uint256[5] calldata specs) external view {\n', '        require(globals.isValidLiquidityAsset(liquidityAsset),   "L:INVALID_LIQ_ASSET");\n', '        require(globals.isValidCollateralAsset(collateralAsset), "L:INVALID_COL_ASSET");\n', '\n', '        require(specs[2] != uint256(0),               "L:ZERO_PID");\n', '        require(specs[1].mod(specs[2]) == uint256(0), "L:INVALID_TERM_DAYS");\n', '        require(specs[3] > uint256(0),                "L:ZERO_REQUEST_AMT");\n', '    }\n', '\n', '    /**\n', '        @dev    Returns capital to Lenders, if the Borrower has not drawn down the Loan past the grace period.\n', '        @param  liquidityAsset IERC20 of the Liquidity Asset.\n', '        @param  fundingLocker  Address of FundingLocker.\n', '        @param  createdAt      Timestamp of Loan instantiation.\n', '        @param  fundingPeriod  Duration of the funding period, after which funds can be reclaimed.\n', '        @return excessReturned Amount of Liquidity Asset that was returned to the Loan from the FundingLocker.\n', '    */\n', '    function unwind(IERC20 liquidityAsset, address fundingLocker, uint256 createdAt, uint256 fundingPeriod) external returns (uint256 excessReturned) {\n', '        // Only callable if Loan funding period has elapsed.\n', '        require(block.timestamp > createdAt.add(fundingPeriod), "L:STILL_FUNDING_PERIOD");\n', '\n', '        // Account for existing balance in Loan.\n', '        uint256 preBal = liquidityAsset.balanceOf(address(this));\n', '\n', '        // Drain funding from FundingLocker, transfers all the Liquidity Asset to this Loan.\n', '        IFundingLocker(fundingLocker).drain();\n', '\n', '        return liquidityAsset.balanceOf(address(this)).sub(preBal);\n', '    }\n', '\n', '    /**\n', "        @dev    Liquidates a Borrower's collateral, via Uniswap, when a default is triggered. Only the Loan can call this function.\n", '        @param  collateralAsset  IERC20 of the Collateral Asset.\n', '        @param  liquidityAsset   Address of Liquidity Asset.\n', '        @param  superFactory     Factory that instantiated Loan.\n', '        @param  collateralLocker Address of CollateralLocker.\n', '        @return amountLiquidated Amount of Collateral Asset that was liquidated.\n', '        @return amountRecovered  Amount of Liquidity Asset that was returned to the Loan from the liquidation.\n', '    */\n', '    function liquidateCollateral(\n', '        IERC20  collateralAsset,\n', '        address liquidityAsset,\n', '        address superFactory,\n', '        address collateralLocker\n', '    ) \n', '        external\n', '        returns (\n', '            uint256 amountLiquidated,\n', '            uint256 amountRecovered\n', '        ) \n', '    {\n', '        // Get the liquidation amount from CollateralLocker.\n', '        uint256 liquidationAmt = collateralAsset.balanceOf(address(collateralLocker));\n', '        \n', '        // Pull the Collateral Asset from CollateralLocker.\n', '        ICollateralLocker(collateralLocker).pull(address(this), liquidationAmt);\n', '\n', '        if (address(collateralAsset) == liquidityAsset || liquidationAmt == uint256(0)) return (liquidationAmt, liquidationAmt);\n', '\n', '        collateralAsset.safeApprove(UNISWAP_ROUTER, uint256(0));\n', '        collateralAsset.safeApprove(UNISWAP_ROUTER, liquidationAmt);\n', '\n', '        IMapleGlobals globals = _globals(superFactory);\n', '\n', '        // Get minimum amount of loan asset get after swapping collateral asset.\n', '        uint256 minAmount = Util.calcMinAmount(globals, address(collateralAsset), liquidityAsset, liquidationAmt);\n', '\n', '        // Generate Uniswap path.\n', '        address uniswapAssetForPath = globals.defaultUniswapPath(address(collateralAsset), liquidityAsset);\n', '        bool middleAsset = uniswapAssetForPath != liquidityAsset && uniswapAssetForPath != address(0);\n', '\n', '        address[] memory path = new address[](middleAsset ? 3 : 2);\n', '\n', '        path[0] = address(collateralAsset);\n', '        path[1] = middleAsset ? uniswapAssetForPath : liquidityAsset;\n', '\n', '        if (middleAsset) path[2] = liquidityAsset;\n', '\n', '        // Swap collateralAsset for Liquidity Asset.\n', '        uint256[] memory returnAmounts = IUniswapRouter(UNISWAP_ROUTER).swapExactTokensForTokens(\n', '            liquidationAmt,\n', '            minAmount.sub(minAmount.mul(globals.maxSwapSlippage()).div(10_000)),\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '\n', '        return(returnAmounts[0], returnAmounts[path.length - 1]);\n', '    }\n', '\n', '    /**********************************/\n', '    /*** Governor Utility Functions ***/\n', '    /**********************************/\n', '\n', '    /**\n', '        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\n', '        @param token          Address of the token to be reclaimed.\n', '        @param liquidityAsset Address of token that is used by the loan for drawdown and payments.\n', '        @param globals        Instance of a MapleGlobals.\n', '    */\n', '    function reclaimERC20(address token, address liquidityAsset, IMapleGlobals globals) external {\n', '        require(msg.sender == globals.governor(),               "L:NOT_GOV");\n', '        require(token != liquidityAsset && token != address(0), "L:INVALID_TOKEN");\n', '        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n', '    }\n', '\n', '    /************************/\n', '    /*** Getter Functions ***/\n', '    /************************/\n', '\n', '    /**\n', '        @dev    Returns if a default can be triggered.\n', '        @param  nextPaymentDue     Timestamp of when payment is due.\n', '        @param  defaultGracePeriod Amount of time after the next payment is due that a Borrower has before a liquidation can occur.\n', '        @param  superFactory       Factory that instantiated Loan.\n', '        @param  balance            LoanFDT balance of account trying to trigger a default.\n', '        @param  totalSupply        Total supply of LoanFDT.\n', '        @return Boolean indicating if default can be triggered.\n', '    */\n', '    function canTriggerDefault(uint256 nextPaymentDue, uint256 defaultGracePeriod, address superFactory, uint256 balance, uint256 totalSupply) external view returns (bool) {\n', '        bool pastDefaultGracePeriod = block.timestamp > nextPaymentDue.add(defaultGracePeriod);\n', '\n', '        // Check if the Loan is past the default grace period and that the account triggering the default has a percentage of total LoanFDTs\n', '        // that is greater than the minimum equity needed (specified in globals)\n', '        return pastDefaultGracePeriod && balance >= ((totalSupply * _globals(superFactory).minLoanEquity()) / 10_000);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns information on next payment amount.\n', '        @param  repaymentCalc   Address of RepaymentCalc.\n', '        @param  nextPaymentDue  Timestamp of when payment is due.\n', '        @param  lateFeeCalc     Address of LateFeeCalc.\n', '        @return total           Entitled total amount needed to be paid in the next payment (Principal + Interest only when the next payment is last payment of the Loan).\n', '        @return principal       Entitled principal amount needed to be paid in the next payment.\n', '        @return interest        Entitled interest amount needed to be paid in the next payment.\n', '        @return _nextPaymentDue Payment Due Date.\n', '        @return paymentLate     Whether payment is late.\n', '    */\n', '    function getNextPayment(\n', '        address repaymentCalc,\n', '        uint256 nextPaymentDue,\n', '        address lateFeeCalc\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 total,\n', '            uint256 principal,\n', '            uint256 interest,\n', '            uint256 _nextPaymentDue,\n', '            bool    paymentLate\n', '        ) \n', '    {\n', '        _nextPaymentDue  = nextPaymentDue;\n', '\n', '        // Get next payment amounts from RepaymentCalc.\n', '        (total, principal, interest) = IRepaymentCalc(repaymentCalc).getNextPayment(address(this));\n', '\n', '        paymentLate = block.timestamp > _nextPaymentDue;\n', '\n', '        // If payment is late, add late fees.\n', '        if (paymentLate) {\n', '            uint256 lateFee = ILateFeeCalc(lateFeeCalc).getLateFee(interest);\n', '            \n', '            total    = total.add(lateFee);\n', '            interest = interest.add(lateFee);\n', '        }\n', '    }\n', '\n', '    /**\n', '        @dev    Returns information on full payment amount.\n', '        @param  repaymentCalc   Address of RepaymentCalc.\n', '        @param  nextPaymentDue  Timestamp of when payment is due.\n', '        @param  lateFeeCalc     Address of LateFeeCalc.\n', '        @param  premiumCalc     Address of PremiumCalc.\n', '        @return total           Principal + Interest for the full payment.\n', '        @return principal       Entitled principal amount needed to be paid in the full payment.\n', '        @return interest        Entitled interest amount needed to be paid in the full payment.\n', '    */\n', '    function getFullPayment(\n', '        address repaymentCalc,\n', '        uint256 nextPaymentDue,\n', '        address lateFeeCalc,\n', '        address premiumCalc\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 total,\n', '            uint256 principal,\n', '            uint256 interest\n', '        ) \n', '    {\n', '        (total, principal, interest) = IPremiumCalc(premiumCalc).getPremiumPayment(address(this));\n', '\n', '        if (block.timestamp <= nextPaymentDue) return (total, principal, interest);\n', '\n', '        // If payment is late, calculate and add late fees using interest amount from regular payment.\n', '        (,, uint256 regInterest) = IRepaymentCalc(repaymentCalc).getNextPayment(address(this));\n', '\n', '        uint256 lateFee = ILateFeeCalc(lateFeeCalc).getLateFee(regInterest);\n', '        \n', '        total    = total.add(lateFee);\n', '        interest = interest.add(lateFee);\n', '    }\n', '\n', '    /**\n', '        @dev    Calculates collateral required to drawdown amount.\n', '        @param  collateralAsset IERC20 of the Collateral Asset.\n', '        @param  liquidityAsset  IERC20 of the Liquidity Asset.\n', '        @param  collateralRatio Percentage of drawdown value that must be posted as collateral.\n', '        @param  superFactory    Factory that instantiated Loan.\n', '        @param  amt             Drawdown amount.\n', '        @return Amount of Collateral Asset required to post in CollateralLocker for given drawdown amount.\n', '    */\n', '    function collateralRequiredForDrawdown(\n', '        IERC20Details collateralAsset,\n', '        IERC20Details liquidityAsset,\n', '        uint256 collateralRatio,\n', '        address superFactory,\n', '        uint256 amt\n', '    ) \n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        IMapleGlobals globals = _globals(superFactory);\n', '\n', '        uint256 wad = _toWad(amt, liquidityAsset);  // Convert to WAD precision.\n', '\n', '        // Fetch current value of Liquidity Asset and Collateral Asset (Chainlink oracles provide 8 decimal precision).\n', '        uint256 liquidityAssetPrice  = globals.getLatestPrice(address(liquidityAsset));\n', '        uint256 collateralPrice = globals.getLatestPrice(address(collateralAsset));\n', '\n', '        // Calculate collateral required.\n', '        uint256 collateralRequiredUSD = wad.mul(liquidityAssetPrice).mul(collateralRatio).div(10_000);  // 18 + 8 = 26 decimals\n', '        uint256 collateralRequiredWAD = collateralRequiredUSD.div(collateralPrice);                     // 26 - 8 = 18 decimals\n', '\n', '        return collateralRequiredWAD.mul(10 ** collateralAsset.decimals()).div(10 ** 18);  // 18 + collateralAssetDecimals - 18 = collateralAssetDecimals\n', '    }\n', '\n', '    /************************/\n', '    /*** Helper Functions ***/\n', '    /************************/\n', '\n', '    function _globals(address loanFactory) internal view returns (IMapleGlobals) {\n', '        return IMapleGlobals(ILoanFactory(loanFactory).globals());\n', '    }\n', '\n', '    function _toWad(uint256 amt, IERC20Details liquidityAsset) internal view returns (uint256) {\n', '        return amt.mul(10 ** 18).div(10 ** liquidityAsset.decimals());\n', '    }\n', '}']