['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./ERC20.sol";\n', '\n', 'interface MasterChef {\n', '    function userInfo(uint256, address)\n', '        external\n', '        view\n', '        returns (uint256, uint256);\n', '}\n', '\n', 'contract StakedBaskEth {\n', '    // BASK/ETH\n', '    IERC20 public constant votes = IERC20(\n', '        0x34D25a4749867eF8b62A0CD1e2d7B4F7aF167E01\n', '    );\n', '\n', '    // Masterchef contract\n', '    MasterChef public constant chef = MasterChef(\n', '        0xDB9daa0a50B33e4fe9d0ac16a1Df1d335F96595e\n', '    );\n', '\n', '    // Pool 2 is the staked BASK/ETH\n', '    uint256 public constant pool = uint256(2);\n', '\n', "    // Using 9 decimals as we're square rooting the votes\n", '    function decimals() external pure returns (uint8) {\n', '        return uint8(9);\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return "Staked BASK/ETH";\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return "sBASKETH";\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return votes.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _voter) external view returns (uint256) {\n', '        (uint256 _votes, ) = chef.userInfo(pool, _voter);\n', '        return _votes;\n', '    }\n', '\n', '    constructor() {}\n', '}']