['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', '/*\n', "    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\n", "    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\n", '    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\n', '    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\n', "    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\n", "    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\n", "    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\n", '              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\n', '             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\n', "          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\n", "        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\n", "       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\n", "      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\n", '     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\n', "    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\n", '   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\n', "    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\n", "       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\n", "          ...'..     .';;;;;;;;;;;;;;,,,'.\n", '                       ...............\n', '*/\n', '\n', '// https://github.com/trusttoken/smart-contracts\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: contracts/governance/interface/IVoteToken.sol\n', '\n', '// pragma solidity ^0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IVoteToken {\n', '    function delegate(address delegatee) external;\n', '\n', '    function delegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    function getCurrentVotes(address account) external view returns (uint96);\n', '\n', '    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n', '}\n', '\n', 'interface IVoteTokenWithERC20 is IVoteToken, IERC20 {}\n', '\n', '\n', '// Dependency file: contracts/governance/interface/IStkTruToken.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {IVoteToken} from "contracts/governance/interface/IVoteToken.sol";\n', '\n', 'interface IStkTruToken is IERC20, IVoteToken {\n', '    function stake(uint256 amount) external;\n', '\n', '    function unstake(uint256 amount) external;\n', '\n', '    function cooldown() external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function claim() external;\n', '\n', '    function claimRewards(IERC20 token) external;\n', '\n', '    function claimRestake(uint256 extraStakeAmount) external;\n', '\n', '    function stakeSupply() external view returns (uint256);\n', '\n', '    function tfusd() external view returns (IERC20);\n', '\n', '    function feeToken() external view returns (IERC20);\n', '}\n', '\n', '\n', '// Dependency file: contracts/common/Initializable.sol\n', '\n', '// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\n', '// Added public isInitialized() view of private initialized bool.\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Return true if and only if the contract has been initialized\n', '     * @return whether the contract has been initialized\n', '     */\n', '    function isInitialized() public view returns (bool) {\n', '        return initialized;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/governance/TrueFiVault.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {IVoteTokenWithERC20} from "contracts/governance/interface/IVoteToken.sol";\n', '// import {IStkTruToken} from "contracts/governance/interface/IStkTruToken.sol";\n', '// import {Initializable} from "contracts/common/Initializable.sol";\n', '// import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', '/**\n', ' * @title TrueFiVault\n', ' * @dev Vault for granting TRU tokens from owner to beneficiary after a lockout period.\n', ' *\n', ' * After the lockout period, beneficiary may withdraw any TRU in the vault.\n', ' * During the lockout period, the vault still allows beneficiary to stake TRU\n', ' * and cast votes in governance.\n', ' *\n', ' * In case of emergency or error, owner reserves the ability to withdraw all\n', ' * funds in vault.\n', ' */\n', 'contract TrueFiVault is Initializable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for IVoteTokenWithERC20;\n', '\n', '    uint256 public constant DURATION = 365 days;\n', '\n', '    address public owner;\n', '    address public beneficiary;\n', '    uint256 public expiry;\n', '    uint256 public withdrawn;\n', '\n', '    IVoteTokenWithERC20 public tru;\n', '    IStkTruToken public stkTru;\n', '\n', '    event Withdraw(IERC20 token, uint256 amount, address beneficiary);\n', '\n', '    function initialize(\n', '        address _beneficiary,\n', '        uint256 _amount,\n', '        uint256 _start,\n', '        IVoteTokenWithERC20 _tru,\n', '        IStkTruToken _stkTru\n', '    ) external initializer {\n', '        // Protect from accidental passing incorrect start timestamp\n', '        require(_start >= block.timestamp, "TrueFiVault: lock start in the past");\n', '        require(_start < block.timestamp + 90 days, "TrueFiVault: lock start too far in the future");\n', '        owner = msg.sender;\n', '        beneficiary = _beneficiary;\n', '        expiry = _start.add(DURATION);\n', '        tru = _tru;\n', '        stkTru = _stkTru;\n', '\n', '        // TODO Uncomment after TRU is updated to support voting\n', '        //        tru.delegate(beneficiary);\n', '        stkTru.delegate(beneficiary);\n', '\n', '        tru.safeTransferFrom(owner, address(this), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the beneficiary.\n', '     */\n', '    modifier onlyBeneficiary() {\n', '        require(msg.sender == beneficiary, "TrueFiVault: only beneficiary");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "TrueFiVault: only owner");\n', '        _;\n', '    }\n', '\n', '    function withdrawable(IERC20 token) public view returns (uint256) {\n', '        uint256 tokenBalance = token.balanceOf(address(this));\n', '        if (beneficiary == owner) {\n', '            return tokenBalance;\n', '        }\n', '        uint256 timePassed = block.timestamp.sub(expiry.sub(DURATION));\n', '        if (timePassed > DURATION) {\n', '            timePassed = DURATION;\n', '        }\n', '        uint256 amount = totalBalance().add(withdrawn).mul(timePassed).div(DURATION).sub(withdrawn);\n', '        if (token == stkTru) {\n', '            amount = amount.mul(stkTru.totalSupply()).div(stkTru.stakeSupply());\n', '        }\n', '        return amount > tokenBalance ? tokenBalance : amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow owner to withdraw funds in case of emergency or mistake\n', '     */\n', '    function withdrawToOwner() external onlyOwner {\n', '        beneficiary = owner;\n', '        claimRewards();\n', '        _withdraw(tru, tru.balanceOf(address(this)));\n', '        _withdraw(stkTru, stkTru.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw vested TRU to beneficiary\n', '     */\n', '    function withdrawTru(uint256 amount) external onlyBeneficiary {\n', '        claimRewards();\n', '        require(amount <= withdrawable(tru), "TrueFiVault: attempting to withdraw more than allowed");\n', '        withdrawn = withdrawn.add(amount);\n', '        _withdraw(tru, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw vested stkTRU to beneficiary\n', '     */\n', '    function withdrawStkTru(uint256 amount) external onlyBeneficiary {\n', '        require(amount <= withdrawable(stkTru), "TrueFiVault: attempting to withdraw more than allowed");\n', '        withdrawn = withdrawn.add(amount.mul(stkTru.stakeSupply()).div(stkTru.totalSupply()));\n', '        _withdraw(stkTru, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw all funds to beneficiary after expiry time\n', '     */\n', '    function withdrawToBeneficiary() external onlyBeneficiary {\n', '        uint256 timePassed = block.timestamp.sub(expiry.sub(DURATION));\n', '        require(timePassed >= DURATION, "TrueFiVault: vault is not expired yet");\n', '        claimRewards();\n', '        _withdraw(tru, tru.balanceOf(address(this)));\n', '        _withdraw(stkTru, stkTru.balanceOf(address(this)));\n', '    }\n', '\n', '    function _withdraw(IERC20 token, uint256 amount) private {\n', '        token.safeTransfer(beneficiary, amount);\n', '        emit Withdraw(token, amount, beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @dev Stake `amount` TRU in staking contract\n', '     * @param amount Amount of TRU to stake\n', '     */\n', '    function stake(uint256 amount) external onlyBeneficiary {\n', '        tru.approve(address(stkTru), amount);\n', '        stkTru.stake(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev unstake `amount` TRU in staking contract\n', '     * @param amount Amount of TRU to unstake\n', '     */\n', '    function unstake(uint256 amount) external onlyBeneficiary {\n', '        stkTru.unstake(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Initiate cooldown for staked TRU\n', '     */\n', '    function cooldown() external onlyBeneficiary {\n', '        stkTru.cooldown();\n', '    }\n', '\n', '    /**\n', '     * @dev Claim TRU rewards from staking contract\n', '     */\n', '    function claimRewards() public onlyBeneficiary {\n', '        stkTru.claimRewards(tru);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim TRU rewards, then restake without transferring\n', '     * Allows account to save more gas by avoiding out-and-back transfers\n', '     */\n', '    function claimRestake() external onlyBeneficiary {\n', '        stkTru.claimRestake(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Delegate tru+stkTRU voting power to another address\n', '     * @param delegatee Address to delegate to\n', '     */\n', '    function delegate(address delegatee) external onlyBeneficiary {\n', '        tru.delegate(delegatee);\n', '        stkTru.delegate(delegatee);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim rewards in tfTUSD and feeToken from stake and transfer to the beneficiary\n', '     */\n', '    function claimFeeRewards() external onlyBeneficiary {\n', '        stkTru.claim();\n', '        IERC20 tfTUSD = stkTru.tfusd();\n', '        tfTUSD.safeTransfer(beneficiary, tfTUSD.balanceOf(address(this)));\n', '        IERC20 feeToken = stkTru.feeToken();\n', '        feeToken.safeTransfer(beneficiary, feeToken.balanceOf(address(this)));\n', '    }\n', '\n', '    function totalBalance() public view returns (uint256) {\n', '        uint256 normalizedStkTruBalance = stkTru.balanceOf(address(this)).mul(stkTru.stakeSupply()).div(stkTru.totalSupply());\n', '        return tru.balanceOf(address(this)).add(normalizedStkTruBalance);\n', '    }\n', '}']