['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract ITACData {\n', '     function balanceOf(address account) public virtual view returns (uint256);\n', '     function transfer(address recipient, uint256 amount) public virtual returns (bool);\n', '}\n', '\n', 'abstract contract ICoopData {\n', '    function getUser(address _address) public virtual view returns(address userAddress, string memory displayName, uint16 locationCode,\n', '    uint16 dojangCode, bool isMale, uint16 weight, string memory notes, uint8 numTickets, uint64[] memory matches, string memory imageURL, uint16 role);\n', '    function getMatch(uint64 _id) public virtual view returns(uint64 id, address winner, uint8 winnerPoints,\n', '    address loser, uint8 loserPoints, uint64 time, string memory notes, address referee);\n', '    function getUserMatchNumber(address _address) public virtual view returns (uint256);\n', '}\n', '\n', 'abstract contract ITACLockup {\n', '     function getTACLocked(address user) public virtual view returns (uint256 lockedAmount);\n', '}\n', '\n', ' //Control who can access various functions.\n', 'contract AccessControl {\n', '   address payable public creatorAddress;\n', '   \n', '   modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress, "You are not the creator of the contract.");\n', '        _;\n', '    }\n', '\n', '   // Constructor\n', '    constructor() public {\n', '        creatorAddress = 0x813dd04A76A716634968822f4D30Dfe359641194;\n', '    }\n', '}\n', '\n', '\n', 'contract TACVoting is AccessControl {\n', '    using SafeMath for uint256;\n', '\n', '    /////////////////////////////////////////////////DATA STRUCTURES AND GLOBAL VARIABLES ///////////////////////////////////////////////////////////////////////\n', '    uint256 public numElections = 0;\n', '\n', '    //How long to open an election for\n', '    uint64 public electionDuration = 604800;\n', '\n', '    //The oldest any match can be to still compete. maxMatchAge of 0 means all matches are valid.\n', '    uint64 public maxMatchAge = 0;\n', '    \n', '    uint256 public defaultVotes = 100000000000000000000;\n', '\n', '    //Main data structure to hold info about a vote\n', '    struct Vote {\n', '        address voter; //since the address is unique this also serves as their id\n', '        uint64 choice;\n', '    }\n', '\n', '    //Data structure that holds inforamtion about one of the options for the election.\n', '    struct Option {\n', '        uint64 matchId;\n', '        string videoURL;\n', '        string description;\n', '        address bluePlayer;\n', '    }\n', '\n', '    //Data structure storing the information about each election.\n', '    struct Election {\n', '        uint64 id;\n', '        bool isLive;\n', '        uint64 startTime;\n', '        mapping (address => uint16) voteId; //which choice each address selected.\n', '        uint64 winningMatch;\n', '    }\n', '\n', '    mapping(uint64 => Option[]) optionsPerElection;\n', '    mapping(uint64 => Vote[]) votesPerElection;\n', '\n', '    //Payout percentages of the contract balance for each winning video. The number is divided 100, so each athlete received 20% of the pot.\n', '    uint8 payoutDivisor = 5;\n', '   \n', '    address public TACContract = 0xABa8ace37f301E7a3A3FaD44682C8Ec8DC2BD18A;\n', '    address public TACLockupContract = 0xbE6492206f460136921308c80D390c3D1D3f1716;\n', '    address public coopDataContract = 0x4E81fc0Eeef51c516773Eb6b6Ec05c452B0c8F5f;\n', '    \n', '    //Main mapping storing an Election record for each election id.\n', '    Election[] Elections;\n', '\n', "    //Once you've won, the same match cannot be entered again.\n", '    mapping(uint64 => bool) public allWinners;\n', '\n', '    //Total number of votes each match has received. Reset after counting votes\n', '    mapping (uint64 => uint256) public voteTotals;\n', '\n', '    //Shows which match is currently in which election.\n', '    mapping(uint64 => uint64) public MatchElections;\n', '\n', '  /////////////////////////////////////////////////CONTRACT ADMIN FUNCTIONS ///////////////////////////////////////////////////////////////////////\n', '    function setParameters(uint8 _payoutDivisor, uint64 _electionDuration, uint64 _maxMatchAge, uint256 _defaultVotes) public onlyCREATOR {\n', '        payoutDivisor = _payoutDivisor;\n', '        electionDuration = _electionDuration;\n', '        maxMatchAge = _maxMatchAge;\n', '        defaultVotes = _defaultVotes;\n', '    }\n', '\n', '    function setAddresss(address _TACContract, address _TACLockupContract, address _coopDataContract) public onlyCREATOR {\n', '        TACContract = _TACContract;\n', '        TACLockupContract = _TACLockupContract;\n', '        coopDataContract = _coopDataContract;\n', '    }\n', '\n', '    //returns how many elections there have been so far.\n', '    function getNumElections() public view returns (uint256) {\n', '        return numElections;\n', '    }\n', '\n', "    //Returns the contract's TAC balance.\n", '    function getTACBalance() public view returns (uint256 balance) {\n', '        ITACData TAC = ITACData(TACContract);\n', '        balance = TAC.balanceOf(address(this));\n', '    }\n', '\n', ' \n', '     /////////////////////////////////////////////////ELECTION FUNCTIONS ///////////////////////////////////////////////////////////////////////\n', '     \n', '    function init() public {\n', "        //Make sure there currently isn't an open election.\n", '        require(numElections == 0, "The contract has already been initialized");\n', '        Election memory election;\n', '        election.id = uint64(numElections);\n', '        election.startTime = uint64(now);\n', '        election.winningMatch = 0;\n', '        election.isLive = true;\n', '        Elections.push(election);\n', '        numElections ++;\n', '    }     \n', '     \n', '    function openElection() public {\n', "        //Make sure there currently isn't an open election.\n", '        require(Elections[numElections-1].isLive == false, "The current election must finish before you can open another one");\n', '        //Open the new election\n', '        Election memory election;\n', '        election.id = uint64(numElections);\n', '        election.startTime = uint64(now);\n', '        election.winningMatch = 0;\n', '        election.isLive = true;\n', '        Elections.push(election);\n', '        numElections ++;\n', '    }\n', '\n', '    //Function called to add a match to an election. \n', '    function joinElection(uint64 electionId, uint64 matchId, string memory videoURL, string memory description, address bluePlayer) public {\n', '        //Anyone can join - UI limits to match players.\n', '        //Make sure this match is valid\n', '        require(isMatchValid(matchId) == true, "Sorry, but you can\'t submit this match to an election.");\n', '        //Make sure the election is the proper one to join\n', '        checkElection(electionId);\n', '        //Add the option to the election\n', '        require(MatchElections[matchId] != electionId || electionId == 0, "Sorry, but this match is already in this election");\n', '        Option memory option;\n', '        option.matchId = matchId;\n', '        option.videoURL = videoURL;\n', '        option.description = description;\n', '        option.bluePlayer = bluePlayer;\n', '        optionsPerElection[electionId].push(option);\n', '        MatchElections[matchId] = electionId;\n', '    }\n', '\n', '\n', '    //Function to return election information. \n', '    function getElection(uint64 electionId) public view returns (uint64 id, bool isLive, uint64 startTime, Option[] memory options, Vote[] memory votes, uint64 winningMatch) {\n', '        id=Elections[electionId].id;\n', '        isLive = Elections[electionId].isLive;\n', '        startTime = Elections[electionId].startTime;\n', '        options = optionsPerElection[electionId];\n', '        votes = votesPerElection[electionId];\n', '        winningMatch = Elections[electionId].winningMatch;\n', '    }\n', '    \n', '    //Returns information about each choice a voter could make. \n', '    function getElectionOptions(uint64 electionId, uint16 optionNumber) public view returns (uint64 option, string memory videoURL, string memory description) {\n', '        option = optionsPerElection[electionId][optionNumber].matchId; \n', '        videoURL = optionsPerElection[electionId][optionNumber].videoURL; \n', '        description = optionsPerElection[electionId][optionNumber].description;\n', '    }\n', '\n', '    //Function that makes sure that the specified match can be entered.\n', '    function isMatchValid(uint64 matchId) public view returns (bool) {\n', '        if (allWinners[matchId] == true) {return false;}  //Cannot enter another election if your match has already won.\n', '        if (maxMatchAge == 0) {return true;} //All match ages are allowed.\n', '        \n', '         //Find out when the match was sparred\n', '        ICoopData CoopData = ICoopData(coopDataContract);\n', '        uint64 time;\n', '        (,,,,,time,,) = CoopData.getMatch(matchId);\n', '\n', '        if (time > SafeMath.sub(now, maxMatchAge)) { \n', '            return true;\n', '        }  //The match is recent enough.\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //Function to make sure election parameters are correct.\n', '    function checkElection(uint64 electionId) public view returns (bool) {\n', '         require(Elections[electionId].isLive == true, "This election is not open");\n', '         require(electionId >= 0, "Please submit a valid electionId");\n', '         require(electionId < numElections, "We haven\'t had that many elections yet");\n', '         return true;\n', '    }\n', '    \n', '    //Function to close an election, add up votes, and pay winners. \n', '    function closeElection(uint64 electionId) public {\n', '         //first make sure the election is open and valid.\n', '        checkElection(electionId);\n', '\n', '        //Next, make sure that the election has been open long enough\n', '        require((Elections[electionId].startTime + electionDuration <= uint64(now)), "Hold on - the election still needs more time to resolve");\n', '\n', '        ICoopData CoopData = ICoopData(coopDataContract);\n', '        ITACLockup TACLockup = ITACLockup(TACLockupContract);\n', '        Elections[electionId].isLive = false;\n', '        \n', '        //map the total score for each match Id\n', '        for (uint i = 0;i < votesPerElection[electionId].length; i++) {\n', '            voteTotals[votesPerElection[electionId][i].choice] = voteTotals[votesPerElection[electionId][i].choice] +   SafeMath.mul(CoopData.getUserMatchNumber(votesPerElection[electionId][i].voter) + defaultVotes, TACLockup.getTACLocked(votesPerElection[electionId][i].voter ));\n', '        }\n', '        \n', '        //Assume the first option is the winner, and then change if another match has more votes\n', '        uint64 winner = optionsPerElection[electionId][0].matchId;\n', '        uint256 mostVotes = 0;\n', '        for (uint j = 0; j < optionsPerElection[electionId].length; j++) {\n', '            if (voteTotals[optionsPerElection[electionId][j].matchId] > mostVotes) {\n', '                winner = optionsPerElection[electionId][j].matchId;\n', '                mostVotes = voteTotals[winner];\n', '            }\n', '            //Reset voteTotals back to 0 for next election\n', '            voteTotals[optionsPerElection[electionId][j].matchId] = 0;\n', '        }\n', '        \n', "        allWinners[winner] = true; //mark that the match has won and can't be entered into another election. \n", '        Elections[electionId].winningMatch = winner;\n', '        //Winner is the id of the winning match\n', '        payWinners(winner);   \n', '    }\n', '    \n', '    \n', '    function payWinners(uint64 winner) internal {\n', '           ICoopData CoopData = ICoopData(coopDataContract);\n', '           ITACData TAC = ITACData(TACContract);\n', '           address athlete1;\n', '           address athlete2;\n', '           (,athlete1,,athlete2,,,,) = CoopData.getMatch(winner);\n', '           uint256 winningAmount = TAC.balanceOf(address(this)) / payoutDivisor;\n', '           \n', '           TAC.transfer(athlete1, winningAmount);\n', '           TAC.transfer(athlete2, winningAmount);\n', '    }\n', ' \n', "    //DEV only function to close an election, in the case that there are so many options that chooseing a winner doesn't fit in a block. \n", '    function devCloseElection(uint64 electionId, uint64 winner, address athlete1, address athlete2, uint256 winningAmount) public onlyCREATOR {\n', '        Elections[electionId].isLive = false;  \n', '        Elections[electionId].winningMatch = winner;\n', '        allWinners[winner] = true;    \n', '        ITACData TAC = ITACData(TACContract);\n', '        TAC.transfer(athlete1, winningAmount);\n', '        TAC.transfer(athlete2, winningAmount);   \n', '    }\n', '\n', '\n', '  /////////////////////////////////////////////////VOTING FUNCTIONS ///////////////////////////////////////////////////////////////////////\n', '\n', '    function vote(uint64 electionId, uint64 matchId) public {\n', '       checkElection(electionId);\n', '       uint16 voteId;\n', '       Vote memory proposedVote;\n', '       proposedVote.voter = msg.sender;\n', '       proposedVote.choice = matchId;\n', '\n', '       //next check if the voter has already voted. If not, add the vote. If so, change it.\n', '\n', '       if (Elections[electionId].voteId[msg.sender] != 0) {\n', '           voteId = Elections[electionId].voteId[msg.sender];\n', '           votesPerElection[electionId][voteId] = proposedVote;\n', '       }\n', '        else {\n', '            votesPerElection[electionId].push(proposedVote);\n', '            Elections[electionId].voteId[msg.sender] = uint16(votesPerElection[electionId].length-1);\n', '        }\n', '    }\n', '    \n', '    //Function to return the matchId that the voter has chosen, or 0 if they have not yet voted.\n', '    function getVote(uint64 electionId, address voter) public view returns (uint64 choice) {\n', '         checkElection(electionId);\n', '         return votesPerElection[electionId][Elections[electionId].voteId[voter]].choice;\n', '    }\n', '  \n', '}']