['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/proxy/Initializable.sol\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !Address.isContract(address(this));\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IEmiVesting.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/*************************************************************************\n', ' *    EmiVesting inerface\n', ' *\n', ' ************************************************************************/\n', 'interface IEmiVesting {\n', '    function balanceOf(address beneficiary) external view returns (uint256);\n', '\n', '    function getCrowdsaleLimit() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IEmiList.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/*************************************************************************\n', ' *    EmiList inerface\n', ' *\n', ' ************************************************************************/\n', 'interface IEmiList {\n', '    function approveTransfer(address from, address to, uint256 amount) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/Priviledgeable.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'abstract contract Priviledgeable {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    event PriviledgeGranted(address indexed admin);\n', '    event PriviledgeRevoked(address indexed admin);\n', '\n', '    modifier onlyAdmin() {\n', '        require(\n', '            _priviledgeTable[msg.sender],\n', '            "Priviledgeable: caller is not the owner"\n', '        );\n', '        _;\n', '    }\n', '\n', '    mapping(address => bool) private _priviledgeTable;\n', '\n', '    constructor() internal {\n', '        _priviledgeTable[msg.sender] = true;\n', '    }\n', '\n', '    function addAdmin(address _admin) external onlyAdmin returns (bool) {\n', '        require(_admin != address(0), "Admin address cannot be 0");\n', '        return _addAdmin(_admin);\n', '    }\n', '\n', '    function removeAdmin(address _admin) external onlyAdmin returns (bool) {\n', '        require(_admin != address(0), "Admin address cannot be 0");\n', '        _priviledgeTable[_admin] = false;\n', '        emit PriviledgeRevoked(_admin);\n', '\n', '        return true;\n', '    }\n', '\n', '    function isAdmin(address _who) external view returns (bool) {\n', '        return _priviledgeTable[_who];\n', '    }\n', '\n', '    //-----------\n', '    // internals\n', '    //-----------\n', '    function _addAdmin(address _admin) internal returns (bool) {\n', '        _priviledgeTable[_admin] = true;\n', '        emit PriviledgeGranted(_admin);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/libraries/ProxiedERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ProxiedERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    uint8 private _intialized;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function _initialize(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals\n', '    ) internal {\n', '        require(_intialized == 0, "Already intialize");\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _intialized = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function _updateTokenName(string memory newName, string memory newSymbol)\n', '    internal\n', '    {\n', '        _name = newName;\n', '        _symbol = newSymbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256)\n', '    {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '    public\n', '    virtual\n', '    override\n', '    returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount)\n', '    public\n', '    virtual\n', '    override\n', '    returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '    public\n', '    virtual\n', '    returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '    public\n', '    virtual\n', '    returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '}\n', '\n', '// File: contracts/libraries/OracleSign.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'abstract contract OracleSign {\n', '    function _splitSignature(bytes memory sig)\n', '    internal\n', '    pure\n', '    returns (\n', '        uint8,\n', '        bytes32,\n', '        bytes32\n', '    )\n', '    {\n', '        require(sig.length == 65, "Incorrect signature length");\n', '\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        assembly {\n', '        //first 32 bytes, after the length prefix\n', '            r := mload(add(sig, 0x20))\n', '        //next 32 bytes\n', '            s := mload(add(sig, 0x40))\n', '        //final byte, first of next 32 bytes\n', '            v := byte(0, mload(add(sig, 0x60)))\n', '        }\n', '\n', '        return (v, r, s);\n', '    }\n', '\n', '    function _recoverSigner(bytes32 message, bytes memory sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '    {\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '\n', '        (v, r, s) = _splitSignature(sig);\n', '\n', '        return ecrecover(message, v, r, s);\n', '    }\n', '\n', '    function _prefixed(bytes32 hash) internal pure returns (bytes32) {\n', '        return\n', '        keccak256(\n', '            abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n', '        );\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// Exempt from the original UniswapV2Library.\n', 'library UniswapV2Library {\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(bytes32 initCodeHash, address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '                initCodeHash // init code hash\n', '            ))));\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/// @notice based on https://github.com/Uniswap/uniswap-v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\n', '/// @notice changed compiler version and lib name.\n', '\n', '/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\n', 'library UniswapV3Library {\n', '    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n', '\n', '    /// @notice The identifying key of the pool\n', '    struct PoolKey {\n', '        address token0;\n', '        address token1;\n', '        uint24 fee;\n', '    }\n', '\n', '    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n', '    /// @param tokenA The first token of a pool, unsorted\n', '    /// @param tokenB The second token of a pool, unsorted\n', '    /// @param fee The fee level of the pool\n', '    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n', '    function getPoolKey(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint24 fee\n', '    ) internal pure returns (PoolKey memory) {\n', '        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n', '        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n', '    }\n', '\n', '    /// @notice Deterministically computes the pool address given the factory and PoolKey\n', '    /// @param factory The Uniswap V3 factory contract address\n', '    /// @param key The PoolKey\n', '    /// @return pool The contract address of the V3 pool\n', '    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n', '        require(key.token0 < key.token1);\n', '        pool = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', "                        hex'ff',\n", '                        factory,\n', '                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n', '                        POOL_INIT_CODE_HASH\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IPLPS {\n', '    function LiquidityProtection_beforeTokenTransfer(\n', '        address _pool, address _from, address _to, uint _amount) external;\n', '    function isBlocked(address _pool, address _who) external view returns(bool);\n', '    function unblock(address _pool, address _who) external;\n', '}\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'abstract contract UsingLiquidityProtectionService {\n', '    bool private protected = true;\n', '    uint64 internal constant HUNDRED_PERCENT = 1e18;\n', '    bytes32 internal constant UNISWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n', '    bytes32 internal constant PANCAKESWAP = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\n', '\n', '    enum UniswapVersion {\n', '        V2,\n', '        V3\n', '    }\n', '\n', '    enum UniswapV3Fees {\n', '        _005, // 0.05%\n', '        _03, // 0.3%\n', '        _1 // 1%\n', '    }\n', '\n', '    modifier onlyProtectionAdmin() {\n', '        protectionAdminCheck();\n', '        _;\n', '    }\n', '\n', '    function token_transfer(address from, address to, uint amount) internal virtual;\n', '    function token_balanceOf(address holder) internal view virtual returns(uint);\n', '    function protectionAdminCheck() internal view virtual;\n', '    function liquidityProtectionService() internal pure virtual returns(address);\n', '    function uniswapVariety() internal pure virtual returns(bytes32);\n', '    function uniswapVersion() internal pure virtual returns(UniswapVersion);\n', '    function uniswapFactory() internal pure virtual returns(address);\n', '    function counterToken() internal pure virtual returns(address) {\n', '        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n', '    }\n', '    function uniswapV3Fee() internal pure virtual returns(UniswapV3Fees) {\n', '        return UniswapV3Fees._03;\n', '    }\n', '    function protectionChecker() internal view virtual returns(bool) {\n', '        return ProtectionSwitch_manual();\n', '    }\n', '\n', '    function lps() private pure returns(IPLPS) {\n', '        return IPLPS(liquidityProtectionService());\n', '    }\n', '\n', '    function LiquidityProtection_beforeTokenTransfer(address _from, address _to, uint _amount) internal virtual {\n', '        if (protectionChecker()) {\n', '            if (!protected) {\n', '                return;\n', '            }\n', '            lps().LiquidityProtection_beforeTokenTransfer(getLiquidityPool(), _from, _to, _amount);\n', '        }\n', '    }\n', '\n', '    function revokeBlocked(address[] calldata _holders, address _revokeTo) external onlyProtectionAdmin() {\n', "        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\n", '        protected = false;\n', '        address pool = getLiquidityPool();\n', '        for (uint i = 0; i < _holders.length; i++) {\n', '            address holder = _holders[i];\n', '            if (lps().isBlocked(pool, holder)) {\n', '                token_transfer(holder, _revokeTo, token_balanceOf(holder));\n', '            }\n', '        }\n', '        protected = true;\n', '    }\n', '\n', '    function LiquidityProtection_unblock(address[] calldata _holders) external onlyProtectionAdmin() {\n', "        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\n", '        address pool = getLiquidityPool();\n', '        for (uint i = 0; i < _holders.length; i++) {\n', '            lps().unblock(pool, _holders[i]);\n', '        }\n', '    }\n', '\n', '    function disableProtection() external onlyProtectionAdmin() {\n', '        protected = false;\n', '    }\n', '\n', '    function isProtected() public view returns(bool) {\n', '        return protected;\n', '    }\n', '\n', '    function ProtectionSwitch_manual() internal view returns(bool) {\n', '        return protected;\n', '    }\n', '\n', '    function ProtectionSwitch_timestamp(uint _timestamp) internal view returns(bool) {\n', '        return not(passed(_timestamp));\n', '    }\n', '\n', '    function ProtectionSwitch_block(uint _block) internal view returns(bool) {\n', '        return not(blockPassed(_block));\n', '    }\n', '\n', '    function blockPassed(uint _block) internal view returns(bool) {\n', '        return _block < block.number;\n', '    }\n', '\n', '    function passed(uint _timestamp) internal view returns(bool) {\n', '        return _timestamp < block.timestamp;\n', '    }\n', '\n', '    function not(bool _condition) internal pure returns(bool) {\n', '        return !_condition;\n', '    }\n', '\n', '    function feeToUint24(UniswapV3Fees _fee) internal pure returns(uint24) {\n', '        if (_fee == UniswapV3Fees._03) return 3000;\n', '        if (_fee == UniswapV3Fees._005) return 500;\n', '        return 10000;\n', '    }\n', '\n', '    function getLiquidityPool() public view returns(address) {\n', '        if (uniswapVersion() == UniswapVersion.V2) {\n', '            return UniswapV2Library.pairFor(uniswapVariety(), uniswapFactory(), address(this), counterToken());\n', '        }\n', "        require(uniswapVariety() == UNISWAP, 'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.');\n", '        return UniswapV3Library.computeAddress(uniswapFactory(),\n', '            UniswapV3Library.getPoolKey(address(this), counterToken(), feeToUint24(uniswapV3Fee())));\n', '    }\n', '}\n', '\n', '\n', '\n', '// File: contracts/ESW.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', 'contract ESW is ProxiedERC20, Initializable, Priviledgeable, OracleSign, UsingLiquidityProtectionService {\n', '    address public dividendToken;\n', '    address public vesting;\n', '    uint256 internal _initialSupply;\n', '    mapping(address => uint256) internal _mintLimit;\n', '    mapping(address => bool) internal _mintGranted; // <-- been used in previouse implementation, now just reserved at proxy storage\n', '\n', '    // !!!In updates to contracts set new variables strictly below this line!!!\n', '    //-----------------------------------------------------------------------------------\n', '\n', '    string public codeVersion = "ESW v1.1-145-gf234c9e";\n', '\n', '    uint256 public constant MAXIMUM_SUPPLY = 200_000_000e18;\n', '    bool public isFirstMinter = true;\n', '    address public constant firstMinter =\n', '    0xdeb5A983AdC9b25b8A96ae43a65953Ded3939de6; // set to Oracle\n', '    address public constant secondMinter =\n', '    0x9Cf73e538acC5B2ea51396eA1a6DE505f6a68f2b; //set to EmiVesting\n', '    uint256 public minterChangeBlock;\n', '\n', '    event MinterSwitch(address newMinter, uint256 afterBlock);\n', '\n', '    mapping(address => uint256) public walletNonce;\n', '\n', '    address private _emiList;\n', '\n', '    function initialize() public virtual initializer {\n', '        _initialize("EmiDAO Token", "ESW", 18);\n', '        _addAdmin(msg.sender);\n', '    }\n', '\n', '    /*********************** admin functions *****************************/\n', '\n', '    function updateTokenName(string memory newName, string memory newSymbol)\n', '    public\n', '    onlyAdmin\n', '    {\n', '        _updateTokenName(newName, newSymbol);\n', '    }\n', '\n', '    /**\n', '     * switchMinter - function for switching between two registered minters\n', '     * @param isSetFirst - true - set first / false - set second minter\n', '     */\n', '\n', '    function switchMinter(bool isSetFirst) public onlyAdmin {\n', '        isFirstMinter = isSetFirst;\n', '        minterChangeBlock = block.number + 6646; // 6646 ~24 hours\n', '        emit MinterSwitch(\n', '            (isSetFirst ? firstMinter : secondMinter),\n', '            minterChangeBlock\n', '        );\n', '    }\n', '\n', '    /**\n', '     * set mint limit for exact contract wallets\n', '     * @param account - wallet to set mint limit\n', '     * @param amount - mint limit value\n', '     */\n', '\n', '    function setMintLimit(address account, uint256 amount) public onlyAdmin {\n', '        _mintLimit[account] = amount;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '    public\n', '    virtual\n', '    override\n', '    returns (bool)\n', '    {\n', '        super.transfer(recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function setListAddress(address emiList)\n', '    public\n', '    onlyAdmin\n', '    {\n', '        _emiList = emiList; // can be NULL also to remove emiList functionality totally\n', '    }\n', '\n', '    /*********************** public functions *****************************/\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        super.transferFrom(sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public {\n', '        super._burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFromVesting(uint256 amount) external {\n', '        require(msg.sender == vesting, "Only vesting!");\n', '        burn(amount);\n', '    }\n', '\n', '    /**\n', '     * mintSigned - oracle signed function allow user to mint ESW tokens\n', "     * @param recipient - user's wallet for receiving tokens\n", '     * @param amount - amount to mint\n', "     * @param nonce - user's mint request number, for security purpose\n", '     * @param sig - oracle signature, oracle allowance for user to mint tokens\n', '     */\n', '\n', '    function mintSigned(\n', '        address recipient,\n', '        uint256 amount,\n', '        uint256 nonce,\n', '        bytes memory sig\n', '    ) public {\n', '        require(recipient == msg.sender, "ESW:sender");\n', '        // check sign\n', '        bytes32 message =\n', '        _prefixed(\n', '            keccak256(abi.encodePacked(recipient, amount, nonce, this))\n', '        );\n', '\n', '        require(\n', '            _recoverSigner(message, sig) == getOracle() &&\n', '            walletNonce[msg.sender] < nonce,\n', '            "ESW:sign"\n', '        );\n', '\n', '        walletNonce[msg.sender] = nonce;\n', '\n', '        _mintAllowed(getOracle(), recipient, amount);\n', '    }\n', '\n', '    /*********************** view functions *****************************/\n', '\n', '    function initialSupply() public view returns (uint256) {\n', '        return _initialSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return super.balanceOf(account);\n', '    }\n', '\n', '    /**\n', '     * getMintLimit - read mint limit for wallets\n', '     * @param account - wallet address\n', '     * @return - mintlimit for requested wallet\n', '     */\n', '\n', '    function getMintLimit(address account) public view returns (uint256) {\n', '        return _mintLimit[account];\n', '    }\n', '\n', '    function getWalletNonce() public view returns (uint256) {\n', '        return walletNonce[msg.sender];\n', '    }\n', '\n', '    /**\n', '     *first minter address after minterChangeBlock, second before minterChangeBlock\n', '     *second minter address after minterChangeBlock, first before minterChangeBlock\n', '     */\n', '    function getOracle() public view returns (address) {\n', '        return (\n', '        (\n', '        isFirstMinter\n', '        ? (\n', '        block.number >= minterChangeBlock\n', '        ? firstMinter\n', '        : secondMinter\n', '        )\n', '        : (\n', '        block.number >= minterChangeBlock\n', '        ? secondMinter\n', '        : firstMinter\n', '        )\n', '        )\n', '        );\n', '    }\n', '\n', '\n', '    function token_transfer(address _from, address _to, uint _amount) internal override {\n', '        _transfer(_from, _to, _amount); // Expose low-level token transfer function.\n', '    }\n', '    function token_balanceOf(address _holder) internal view override returns(uint) {\n', '        return balanceOf(_holder); // Expose balance check function.\n', '    }\n', '    function protectionAdminCheck() internal view override onlyAdmin {} // Must revert to deny access.\n', '    function liquidityProtectionService() internal pure override returns(address) {\n', '        return 0xb11C71107736329F0214C36B5f80040BDE7fd6d4; // LPS address.\n', '    }\n', '    function uniswapVariety() internal pure override returns(bytes32) {\n', '        return UNISWAP; // UNISWAP or PANCAKESWAP.\n', '    }\n', '    function uniswapVersion() internal pure override returns(UniswapVersion) {\n', '        return UniswapVersion.V2; // V2 or V3.\n', '    }\n', '    function uniswapFactory() internal pure override returns(address) {\n', '        return 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // Replace with the correct address.\n', '    }\n', '    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal override {\n', '        super._beforeTokenTransfer(_from, _to, _amount);\n', '        if (_emiList != address(0)) {\n', '            require(IEmiList(_emiList).approveTransfer(_from, _to, _amount), "Transfer declined by blacklist");\n', '        }\n', '        LiquidityProtection_beforeTokenTransfer(_from, _to, _amount);\n', '    }\n', '    // All the following overrides are optional, if you want to modify default behavior.\n', '\n', '    // How the protection gets disabled.\n', '    function protectionChecker() internal view override returns(bool) {\n', '        return ProtectionSwitch_timestamp(1625443199); // Switch off protection on Sunday, July 4, 2021 11:59:59 PM GTM.\n', '        // return ProtectionSwitch_block(13000000); // Switch off protection on block 13000000.\n', '        //        return ProtectionSwitch_manual(); // Switch off protection by calling disableProtection(); from owner. Default.\n', '    }\n', '\n', '    // This token will be pooled in pair with:\n', '    function counterToken() internal pure override returns(address) {\n', '        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n', '    }\n', '\n', '    /*********************** internal functions *****************************/\n', '\n', '    function _mintAllowed(\n', '        address allowedMinter,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        require(\n', '            totalSupply().add(amount) <= MAXIMUM_SUPPLY,\n', '            "ESW:supply_exceeded"\n', '        );\n', '        _mintLimit[allowedMinter] = _mintLimit[allowedMinter].sub(amount);\n', '        super._mint(recipient, amount);\n', '    }\n', '}']