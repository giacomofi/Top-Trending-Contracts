['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT \n', 'pragma solidity 0.6.11; \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '// License: MIT\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\access\\Ownable.sol\n', '// License: MIT\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '// License: MIT\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '// License: MIT\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\utils\\Address.sol\n', '// License: MIT\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '// License: MIT\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@uniswap\\IUniswapV2Pair.sol\n', '// License: MIT\n', '\n', '// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\n', 'interface IUniswapV2Pair {\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  function name() external pure returns (string memory);\n', '  function symbol() external pure returns (string memory);\n', '  function decimals() external pure returns (uint8);\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address owner) external view returns (uint);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function approve(address spender, uint value) external returns (bool);\n', '  function transfer(address to, uint value) external returns (bool);\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint value\n', '  ) external returns (bool);\n', '  function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '  function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '  function nonces(address owner) external view returns (uint);\n', '  function permit(\n', '    address owner,\n', '    address spender,\n', '    uint value,\n', '    uint deadline,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external;\n', '  event Mint(address indexed sender, uint amount0, uint amount1);\n', '  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '  event Swap(\n', '    address indexed sender,\n', '    uint amount0In,\n', '    uint amount1In,\n', '    uint amount0Out,\n', '    uint amount1Out,\n', '    address indexed to\n', '  );\n', '  event Sync(uint112 reserve0, uint112 reserve1);\n', '  function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '  function factory() external view returns (address);\n', '  function token0() external view returns (address);\n', '  function token1() external view returns (address);\n', '  function getReserves()\n', '    external\n', '    view\n', '    returns (\n', '      uint112 reserve0,\n', '      uint112 reserve1,\n', '      uint32 blockTimestampLast\n', '    );\n', '  function price0CumulativeLast() external view returns (uint);\n', '  function price1CumulativeLast() external view returns (uint);\n', '  function kLast() external view returns (uint);\n', '  function mint(address to) external returns (uint liquidity);\n', '  function burn(address to) external returns (uint amount0, uint amount1);\n', '  function swap(\n', '    uint amount0Out,\n', '    uint amount1Out,\n', '    address to,\n', '    bytes calldata data\n', '  ) external;\n', '  function skim(address to) external;\n', '  function sync() external;\n', '  function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts\\@uniswap\\IUniswapV2Factory.sol\n', '// License: MIT\n', '\n', '// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\n', 'interface IUniswapV2Factory {\n', '  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '  function feeTo() external view returns (address);\n', '  function feeToSetter() external view returns (address);\n', '  function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '  function allPairs(uint) external view returns (address pair);\n', '  function allPairsLength() external view returns (uint);\n', '  function createPair(address tokenA, address tokenB) external returns (address pair);\n', '  function setFeeTo(address) external;\n', '  function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts\\@uniswap\\IUniswapV2Router01.sol\n', '// License: MIT\n', '\n', '// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\n', 'interface IUniswapV2Router01 {\n', '  function factory() external pure returns (address);\n', '  function WETH() external pure returns (address);\n', '  function addLiquidity(\n', '    address tokenA,\n', '    address tokenB,\n', '    uint amountADesired,\n', '    uint amountBDesired,\n', '    uint amountAMin,\n', '    uint amountBMin,\n', '    address to,\n', '    uint deadline\n', '  )\n', '    external\n', '    returns (\n', '      uint amountA,\n', '      uint amountB,\n', '      uint liquidity\n', '    );\n', '  function addLiquidityETH(\n', '    address token,\n', '    uint amountTokenDesired,\n', '    uint amountTokenMin,\n', '    uint amountETHMin,\n', '    address to,\n', '    uint deadline\n', '  )\n', '    external\n', '    payable\n', '    returns (\n', '      uint amountToken,\n', '      uint amountETH,\n', '      uint liquidity\n', '    );\n', '  function removeLiquidity(\n', '    address tokenA,\n', '    address tokenB,\n', '    uint liquidity,\n', '    uint amountAMin,\n', '    uint amountBMin,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint amountA, uint amountB);\n', '  function removeLiquidityETH(\n', '    address token,\n', '    uint liquidity,\n', '    uint amountTokenMin,\n', '    uint amountETHMin,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint amountToken, uint amountETH);\n', '  function removeLiquidityWithPermit(\n', '    address tokenA,\n', '    address tokenB,\n', '    uint liquidity,\n', '    uint amountAMin,\n', '    uint amountBMin,\n', '    address to,\n', '    uint deadline,\n', '    bool approveMax,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external returns (uint amountA, uint amountB);\n', '  function removeLiquidityETHWithPermit(\n', '    address token,\n', '    uint liquidity,\n', '    uint amountTokenMin,\n', '    uint amountETHMin,\n', '    address to,\n', '    uint deadline,\n', '    bool approveMax,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external returns (uint amountToken, uint amountETH);\n', '  function swapExactTokensForTokens(\n', '    uint amountIn,\n', '    uint amountOutMin,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint[] memory amounts);\n', '  function swapTokensForExactTokens(\n', '    uint amountOut,\n', '    uint amountInMax,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint[] memory amounts);\n', '  function swapExactETHForTokens(\n', '    uint amountOutMin,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external payable returns (uint[] memory amounts);\n', '  function swapTokensForExactETH(\n', '    uint amountOut,\n', '    uint amountInMax,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint[] memory amounts);\n', '  function swapExactTokensForETH(\n', '    uint amountIn,\n', '    uint amountOutMin,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external returns (uint[] memory amounts);\n', '  function swapETHForExactTokens(\n', '    uint amountOut,\n', '    address[] calldata path,\n', '    address to,\n', '    uint deadline\n', '  ) external payable returns (uint[] memory amounts);\n', '  function quote(\n', '    uint amountA,\n', '    uint reserveA,\n', '    uint reserveB\n', '  ) external pure returns (uint amountB);\n', '  function getAmountOut(\n', '    uint amountIn,\n', '    uint reserveIn,\n', '    uint reserveOut\n', '  ) external pure returns (uint amountOut);\n', '  function getAmountIn(\n', '    uint amountOut,\n', '    uint reserveIn,\n', '    uint reserveOut\n', '  ) external pure returns (uint amountIn);\n', '  function getAmountsOut(uint amountIn, address[] calldata path)\n', '    external\n', '    view\n', '    returns (uint[] memory amounts);\n', '  function getAmountsIn(uint amountOut, address[] calldata path)\n', '    external\n', '    view\n', '    returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts\\@libs\\UniswapUtils.sol\n', '//License: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract UniswapUtils  { \n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    uint256 public constant PERCENT = 10000;  \n', '    struct LiquidityItem{\n', '        //remove \n', '        uint256 tokenRemoved;\n', '        uint256 currencyRemoved;\n', '        uint256 liquidityRemoved;\n', '        //swap\n', '        uint256 currencyIn;\n', '        uint256 tokenOut;\n', '        //add\n', '        uint256 tokenAdded;\n', '        uint256 currencyAdded;\n', '        uint256 liquidityAdded;       \n', '    }\n', '    event LiquidityInfo(address token,address currency,uint256 lpp,uint256 cp,LiquidityItem q,uint256 burnAmount);\n', '    function _getPair(address router,address token0,address token1) internal view returns(address){\n', '        address _factory =  IUniswapV2Router01(router).factory();\n', '        return IUniswapV2Factory(_factory).getPair(token0,token1);\n', '    }\n', '    function _checkOrApproveRouter(address _router,address _token,uint256 _amount) internal{\n', '        if(IERC20(_token).allowance(address(this),_router) < _amount){\n', '            IERC20(_token).safeApprove(_router,0);\n', '            IERC20(_token).safeApprove(_router,uint256(-1));\n', '        }        \n', '    }\n', '    function _swapToken(address router,address tokenIn,address tokenOut,uint256 amountIn) internal returns (uint256){\n', '        address[] memory path = new address[](2);\n', '        path[0] = tokenIn;\n', '        path[1] = tokenOut; \n', '        uint256 exptime = block.timestamp+60;\n', '        _checkOrApproveRouter(router,tokenIn,amountIn); \n', '        return IUniswapV2Router01(router).swapExactTokensForTokens(amountIn,0,path,address(this),exptime)[1];\n', '    }\n', '    function _addLiquidity(\n', '        address router,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin\n', '    ) internal returns (uint amountA, uint amountB, uint liquidity){\n', '         uint256 exptime = block.timestamp+60;\n', '        _checkOrApproveRouter(router,tokenA,amountADesired);\n', '        _checkOrApproveRouter(router,tokenB,amountBDesired);\n', '        return IUniswapV2Router01(router).addLiquidity(tokenA,tokenB,amountADesired,amountBDesired,amountAMin,amountBMin,address(this), exptime);\n', '    }\n', '    function _removeLiquidity(\n', '        address router,\n', '        address pair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 lpp \n', '    ) internal returns (uint amountA, uint amountB,uint256 liquidity){\n', '        uint256 exptime = block.timestamp+60;\n', '        liquidity = IERC20(pair).balanceOf(address(this)).mul(lpp).div(PERCENT);\n', '        _checkOrApproveRouter(router,pair,liquidity);\n', '        (amountA, amountB) = IUniswapV2Router01(router).removeLiquidity(tokenA,tokenB,liquidity,0,0,address(this),exptime);\n', '    }\n', '    function getPairToken(address _pair,address _rewardToken) public view returns(address){\n', '        address token0 = IUniswapV2Pair(_pair).token0();\n', '        address token1 = IUniswapV2Pair(_pair).token1(); \n', '        require(token0 == _rewardToken || token1 == _rewardToken,"!_rewardToken");\n', '        return _rewardToken == token0 ? token1 : token0;\n', '    } \n', '}\n', '\n', '// File: contracts\\@libs\\IRewardToken.sol\n', '// License: MIT\n', '\n', '\n', 'interface IRewardToken is IERC20 {\n', '    function cap() external view returns (uint256);\n', '    function mint(address _to, uint256 _amount) external; \n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '// File: contracts\\@libs\\Authorizable.sol\n', '// License: MIT\n', '\n', '\n', 'contract Authorizable is Ownable {\n', '    mapping(address => bool) public authorized;\n', '    modifier onlyAuthorized() {\n', '        require(authorized[msg.sender] || owner() == msg.sender,"!auth");\n', '        _;\n', '    }\n', '    function addAuthorized(address _toAdd) onlyOwner public {\n', '        authorized[_toAdd] = true;\n', '    }\n', '    function removeAuthorized(address _toRemove) onlyOwner public {\n', '        require(_toRemove != msg.sender);\n', '        authorized[_toRemove] = false;\n', '    }\n', '}\n', '\n', '// File: contracts\\FEIIMasterChef.sol\n', '// License: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// MasterChef is the master of rewardToken. He can make rewardToken and he is a fair guy.\n', '//\n', "// Note that it's ownable and the owner wields tremendous power. The ownership\n", '// will be transferred to a governance smart contract once rewardToken is sufficiently\n', '// distributed and the community can show to govern itself.\n', '//\n', "// Have fun reading it. Hopefully it's bug-free. God bless.\n", 'contract FEIIMasterChef is Authorizable,UniswapUtils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of rewardTokens\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accrewardTokenPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accrewardTokenPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken; // Address of LP token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. rewardTokens to distribute per block.\n', '        uint256 lastRewardBlock; // Last block number that rewardTokens distribution occurs.\n', '        uint256 accrewardTokenPerShare; // Accumulated rewardTokens per share, times 1e12. See below.\n', '    } \n', '    // The rewardToken TOKEN!\n', '    IRewardToken public rewardToken;\n', '    address public uniswapRouter;\n', '    // Dev address.\n', '    address public devAddr;\n', '    uint256 public protocolFee = 1000; //1%\n', '    uint256 public devRewardAmount; \n', '    // rewardToken tokens created per block.\n', '    uint256 public rewardTokenPerBlock; \n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when rewardToken mining starts.\n', '    uint256 public startBlock;\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount,uint256 rewardToken);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount,uint256 rewardToken);\n', '    constructor(\n', '        address _uniswapRouter,\n', '        address _rewardToken,     \n', '        uint256 _rewardTokenPerBlock,\n', '        uint256 _startBlock \n', '    ) public {\n', '        rewardToken = IRewardToken(_rewardToken);\n', '        devAddr = msg.sender;\n', '        uniswapRouter = _uniswapRouter;\n', '        rewardTokenPerBlock = _rewardTokenPerBlock; \n', '        startBlock = _startBlock;    \n', '    }\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyAuthorized {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock =\n', '            block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                lpToken: _lpToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                accrewardTokenPerShare: 0\n', '            })\n', '        );\n', '    }\n', "    // Update the given pool's rewardToken allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid,uint256 _allocPoint, bool _withUpdate) public onlyAuthorized {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '    function updateDevAddr(address _dev,uint256 _fee) public onlyAuthorized{\n', '        devAddr = _dev;\n', '        protocolFee = _fee;\n', '    }\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256){\n', '        return _to.sub(_from);\n', '    }\n', '    // View function to see pending rewardTokens on frontend.\n', '    function pendingrewardToken(uint256 _pid, address _user)external view returns (uint256){\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accrewardTokenPerShare = pool.accrewardTokenPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier =\n', '                getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 rewardTokenReward =\n', '                multiplier.mul(rewardTokenPerBlock).mul(pool.allocPoint).div(\n', '                    totalAllocPoint\n', '                );\n', '            accrewardTokenPerShare = accrewardTokenPerShare.add(\n', '                rewardTokenReward.mul(1e12).div(lpSupply)\n', '            );\n', '        }\n', '        return user.amount.mul(accrewardTokenPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 rewardTokenReward = multiplier.mul(rewardTokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '        devRewardAmount = devRewardAmount.add(rewardTokenReward.div(10));\n', '        rewardToken.mint(address(this), rewardTokenReward);\n', '        pool.accrewardTokenPerShare = pool.accrewardTokenPerShare.add(\n', '            rewardTokenReward.mul(1e12).div(lpSupply)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '    // Deposit LP tokens to MasterChef for rewardToken allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        require(block.number >= startBlock,"!start");\n', '        uint256 pending = 0;\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender]; \n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            pending = user.amount.mul(pool.accrewardTokenPerShare).div(1e12).sub(user.rewardDebt);\n', '            safeRewardTokenTransfer(msg.sender, pending);\n', '        }\n', '        //save gas for claimReward\n', '        if(_amount > 0){\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount); \n', '            user.amount = user.amount.add(_amount); \n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accrewardTokenPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount,pending);\n', '    }\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        UserInfo storage dever = userInfo[_pid][devAddr];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accrewardTokenPerShare).div(1e12).sub(user.rewardDebt);\n', '        safeRewardTokenTransfer(msg.sender, pending); \n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accrewardTokenPerShare).div(1e12);\n', '        uint256 _fee = _amount.mul(protocolFee).div(PERCENT);\n', '        dever.amount = dever.amount.add(_fee); \n', '        pool.lpToken.safeTransfer(address(msg.sender), _amount.sub(_fee));\n', '        emit Withdraw(msg.sender, _pid, _amount,pending);\n', '    }\n', '    function claimReward(uint256 _pid) public {\n', '        deposit(_pid,0);\n', '    } \n', '    function rewardTokenLiquidity(address _pair,uint256 _lpp,uint256 _cp) public onlyAuthorized{ \n', '        address _token = address(rewardToken);\n', '        //only guard rewardToken \n', '        address _currency = getPairToken(_pair,_token); \n', '        LiquidityItem memory q =  LiquidityItem(0,0,0,0,0,0,0,0);\n', '        //removeLiquidity  \n', '        (q.tokenRemoved,q.currencyRemoved,q.liquidityRemoved) = _removeLiquidity(uniswapRouter, _pair, _token, _currency,_lpp);\n', '        //swap rewardToken\n', '        q.currencyIn = q.currencyRemoved.mul(_cp).div(PERCENT);\n', '        q.tokenOut = _swapToken(uniswapRouter,_currency,_token,q.currencyIn);\n', '        //addLiquidity\n', '        uint256 tokenRemain  = q.tokenRemoved.add(q.tokenOut);  \n', '        uint256 currencyRemain =  q.currencyRemoved.sub(q.currencyIn);       \n', '        (q.tokenAdded, q.currencyAdded, q.liquidityAdded) = _addLiquidity(uniswapRouter, _token,_currency,\n', '                                                                         tokenRemain,currencyRemain,\n', '                                                                         0,currencyRemain);\n', '        tokenRemain = tokenRemain.sub(q.tokenAdded);\n', '        //burn rewardToken\n', '        rewardToken.burn(tokenRemain);\n', '        emit LiquidityInfo(_token,_currency,_lpp,_cp,q,tokenRemain); \n', '    }\n', '    // Safe rewardToken transfer function, just in case if rounding error causes pool to not have enough rewardTokens.\n', '    function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\n', '        uint256 rewardTokenBal = rewardToken.balanceOf(address(this));\n', '        if (_amount > rewardTokenBal) {\n', '            rewardToken.transfer(_to, rewardTokenBal);\n', '        } else {\n', '            rewardToken.transfer(_to, _amount);\n', '        }\n', '    }\n', '    function claimDevReward(uint256 _p) public onlyAuthorized{\n', '        require(devRewardAmount > 0,"No community rate"); \n', '        uint256 _community_amount = devRewardAmount.mul(_p).div(PERCENT);\n', '        devRewardAmount = devRewardAmount.sub(_community_amount);\n', '        rewardToken.mint(msg.sender,_community_amount);   \n', '    } \n', '    function updateRewardRate(uint256 _rewardTokenPerBlock,uint256 _startBlock) public onlyAuthorized{ \n', '        rewardTokenPerBlock = _rewardTokenPerBlock;\n', '        startBlock = _startBlock;\n', '    }\n', '}']