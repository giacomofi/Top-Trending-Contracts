['/*\n', 'GAS SAVE PROTOCOL - $GSVE TOKEN!\n', '████████████████████████████████████████████████████████████\n', '███████████████████████▀▀▀▀▀▀▀▀▀▀▀▀▀▀███████████████████████\n', '████████████████▀▀░░░░░░░░░░░░░░░░░░░░░░░░▀▀▀███████████████\n', '██████████████░▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄░██████████████\n', '██████████████▄░▀▀░░░▄▄▄░░░░░░░░░░░░░▄▄░░░▀▀▄░██████████████\n', '███████████████░░░▀▀░░░░▄▄▄▄▄▄▄▄▄▄▄▄▄▄░░▀▀░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '██████████████░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '██████████████▄░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░▀▀░░▄▄▄▄░░░░░░░▀░░░░░▄▄▄░░▀▀░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '██████████████▀░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '██████████████░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░▄▄░░░░░░░░░░░░▄█░░░░░░░░░░▄▄░░██████████████\n', '███████████████░░░░░▀▀▀▀░░░░░░▄▄░░░░▀▀▀▀░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░▄█░░░░▄░░░░░░░░░██████████████\n', '███████████████░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\n', '██████████████░░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\n', '██████████████▄░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\n', '█████████████████▄▄▄░░░░░░░░░░░░░░░░░░░░░▄▄▄████████████████\n', '██████████████████████████████▄▄▄▄██████████████████████████\n', '████████████████████████████████████████████████████████████\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "@openzeppelin/contracts/utils/math/Math.sol";\n', 'import "@openzeppelin/contracts/utils/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/security/ReentrancyGuard.sol";\n', '\n', '/**\n', ' * @dev Interface of the wrapped Gas Token Type\n', ' */\n', 'interface IGasTokenMint {\n', '    function mint(uint256 value) external; \n', '    function discountedMint(uint256 value, uint256 discountedFee, address recipient) external; \n', '}\n', '\n', '\n', '/**\n', '* @dev Interface for interacting with protocol token\n', '*/\n', 'interface IGSVEProtocolToken {\n', '    function burn(uint256 amount) external ;\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '/**\n', '* @dev Interface for interacting with the gas vault\n', '*/\n', 'interface IGSVEVault {\n', '    function transferToken(address token, address recipient, uint256 amount) external;\n', '}\n', '\n', 'contract GSVECore is Ownable, ReentrancyGuard{\n', '    using SafeMath for uint256;\n', '    \n', '    //address of our protocol utility token\n', '    address private GSVEToken;\n', '    address private GSVEVault;\n', '\n', '    //system is in place to prevent reentrancy from untrusted tokens\n', '    mapping(address => uint256) private _mintingType;\n', '    mapping(address => bool) private _claimable;\n', '\n', '    uint256 private _totalStaked;\n', '\n', '    //staking  \n', '    mapping(address => uint256) private userStakes;\n', '    mapping(address => uint256) private userStakeTimes;\n', '    mapping(address => uint256) private userTotalRewards;\n', '    mapping(address => uint256) private userClaimTimes;\n', '\n', '    //protocol values\n', '    mapping(uint256=>uint256) private tierThreshholds;\n', '    uint256 rewardEnableTime;\n', '\n', '    bool rewardsEnabled = false;\n', '    uint256 burnToSaveFee = 25*10**16;\n', '    uint256 burnToClaimGasTokens = 1*10**17;\n', '    uint256 mintingReward = 5*10**17;\n', '\n', '\n', '    /**\n', '     * @dev A function that enables protocol rewards\n', '     */\n', '    function enableRewards() public onlyOwner {\n', '        require(rewardsEnabled == false, "GSVE: Rewards already enabled");\n', '        rewardsEnabled = true;\n', '        rewardEnableTime = block.timestamp;\n', '        emit protocolUpdated(0x656e61626c655570646174650000000000000000000000000000000000000000, 1);\n', '    }\n', '\n', '    /**\n', '    * @dev A function that disables rewards\n', '    */\n', '    function disableRewards() public onlyOwner {\n', '        require(rewardsEnabled, "GSVE: Rewards not already enabled");\n', '        rewardsEnabled = false;\n', '        rewardEnableTime = 0;\n', '        emit protocolUpdated(0x656e61626c655570646174650000000000000000000000000000000000000000, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to update the tier threshold\n', '     */\n', '    function updateTier(uint256 tier, uint256 value) public onlyOwner {\n', '        require(value > 10**18, "GSVE: Tier value seems to be low.");\n', '        tierThreshholds[tier] = value;\n', '        emit TierUpdate(tier, value);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to update the burn gsve:save fee ratio\n', '     */\n', '    function updateBurnSaveFee(uint256 value) public onlyOwner{\n', '        require(value > 10**17, "GSVE: Value seems to be low.");\n', '        burnToSaveFee = value;\n', '        emit protocolUpdated(0x6275726e00000000000000000000000000000000000000000000000000000000, value);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to update the burn gsve:claim gastoken ratio\n', '     */\n', '    function updateBurnClaimFee(uint256 value) public onlyOwner{\n', '        require(value > 10**17, "GSVE: Value seems to be low.");\n', '        burnToClaimGasTokens= value;\n', '        emit protocolUpdated(0x636c61696d000000000000000000000000000000000000000000000000000000, value);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to update the burn gsve:claim gastoken ratio\n', '     */\n', '    function updateMintingReward(uint256 value) public onlyOwner{\n', '        require(value > 10**17, "GSVE: Value seems to be low.");\n', '        mintingReward = value;\n', '        emit protocolUpdated(0x6d696e74696e6700000000000000000000000000000000000000000000000000, value);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to reassign ownership of the contracts that this contract owns. \n', '     /* Enabling future smartcontract upgrades without the complexity of proxy/proxy upgrades.\n', '     */\n', '    function transferOwnershipOfSubcontract(address ownedContract, address newOwner) public onlyOwner{\n', '        Ownable(ownedContract).transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev the constructor allows us to set the gsve token\n', '     * as the token we are using for staking and other protocol features\n', '     * also lets us set the vault address.\n', '     */\n', '    constructor(address _tokenAddress, address _vaultAddress, address wchi, address wgst2, address wgst1) {\n', '        GSVEToken = _tokenAddress;\n', '        GSVEVault = _vaultAddress;\n', '        tierThreshholds[1] = 250*(10**18);\n', '        tierThreshholds[2] = 1000*(10**18);\n', '        _claimable[_tokenAddress] = false;\n', '\n', '        _claimable[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = true;\n', '        _mintingType[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = 1;\n', '\n', '        _claimable[0x0000000000b3F879cb30FE243b4Dfee438691c04] = true;\n', '        _mintingType[0x0000000000b3F879cb30FE243b4Dfee438691c04] = 1;\n', '\n', '        _claimable[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = true;\n', '        _mintingType[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = 1;\n', '        \n', '\n', '        _claimable[wchi] = true;\n', '        _mintingType[wchi] = 2;\n', '\n', '        _claimable[wgst2] = true;\n', '        _mintingType[wgst2] = 2;\n', '\n', '        _claimable[wgst1] = true;\n', '        _mintingType[wgst1] = 2;\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows a user to stake tokens. \n', '     * If they have a rewards from a stake already, they must claim this first.\n', '     */\n', '    function stake(uint256 value) public nonReentrant() {\n', '\n', '        if (value == 0){\n', '            return;\n', '        }\n', '        require(IERC20(GSVEToken).transferFrom(msg.sender, address(this), value));\n', '        userStakes[msg.sender] = userStakes[msg.sender].add(value);\n', '        userStakeTimes[msg.sender] = block.timestamp;\n', '        userClaimTimes[msg.sender] = block.timestamp;\n', '        _totalStaked = _totalStaked.add(value);\n', '        emit Staked(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows a user to fully unstake.\n', '     */\n', '    function unstake() public nonReentrant() {\n', '        uint256 stakeSize = userStakes[msg.sender];\n', '        if (stakeSize == 0){\n', '            return;\n', '        }\n', '        userStakes[msg.sender] = 0;\n', '        userStakeTimes[msg.sender] = 0;\n', '        userClaimTimes[msg.sender] = 0;\n', '        _totalStaked = _totalStaked.sub(stakeSize);\n', '        require(IERC20(GSVEToken).transfer(msg.sender, stakeSize));\n', '        emit Unstaked(msg.sender, stakeSize);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to calculate the total rewards a user has not claimed yet.\n', '     */\n', '    function calculateStakeReward(address rewardedAddress) public view returns(uint256){\n', '        if(userStakeTimes[rewardedAddress] == 0){\n', '            return 0;\n', '        }\n', '\n', '        if(rewardsEnabled == false){\n', '            return 0;\n', '        }\n', '\n', '        uint256 initialTime = Math.max(userStakeTimes[rewardedAddress], rewardEnableTime);\n', '        uint256 timeDifference = block.timestamp.sub(initialTime);\n', '        uint256 rewardPeriod = timeDifference.div((60*60*6));\n', '        uint256 rewardPerPeriod = userStakes[rewardedAddress].div(4000);\n', '        uint256 reward = rewardPeriod.mul(rewardPerPeriod);\n', '\n', '        return reward;\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows a user to collect the stake reward entitled to them\n', '     * in the situation where the rewards pool does not have enough tokens\n', '     * then the user is given as much as they can be given.\n', '     */\n', '    function collectReward() public nonReentrant() {\n', '        uint256 remainingRewards = totalRewards();\n', '        require(remainingRewards > 0, "GSVE: contract has ran out of rewards to give");\n', '        require(rewardsEnabled, "GSVE: Rewards are not enabled");\n', '\n', '        uint256 reward = calculateStakeReward(msg.sender);\n', '        if(reward == 0){\n', '            return;\n', '        }\n', '\n', '        reward = Math.min(remainingRewards, reward);\n', '        userStakeTimes[msg.sender] = block.timestamp;\n', '        userTotalRewards[msg.sender] = userTotalRewards[msg.sender] + reward;\n', '        IGSVEVault(GSVEVault).transferToken(GSVEToken, msg.sender, reward);\n', '        emit Reward(msg.sender, reward);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows a user to burn some GSVE to avoid paying the protocol mint/wrap fee.\n', '     */\n', '    function burnDiscountedMinting(address gasTokenAddress, uint256 value) public nonReentrant() {\n', '        uint256 mintType = _mintingType[gasTokenAddress];\n', '        require(mintType != 0, "GSVE: Unsupported Token");\n', '        IGSVEProtocolToken(GSVEToken).burnFrom(msg.sender, burnToSaveFee);\n', '\n', '        if(mintType == 1){\n', '            convenientMinting(gasTokenAddress, value, 0);\n', '        }\n', '        else if (mintType == 2){\n', '            IGasTokenMint(gasTokenAddress).discountedMint(value, 0, msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows a user to benefit from a lower protocol fee, based on the stake that they have.\n', '     */\n', '    function discountedMinting(address gasTokenAddress, uint256 value) public nonReentrant(){\n', '        uint256 mintType = _mintingType[gasTokenAddress];\n', '        require(mintType != 0, "GSVE: Unsupported Token");\n', '        require(userStakes[msg.sender] >= tierThreshholds[1] , "GSVE: User has not staked enough to discount");\n', '\n', '        if(mintType == 1){\n', '            convenientMinting(gasTokenAddress, value, 1);\n', '        }\n', '        else if (mintType == 2){\n', '            IGasTokenMint(gasTokenAddress).discountedMint(value, 1, msg.sender);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev A function that allows a user to be rewarded tokens by minting or wrapping\n', '     * they pay full fees for this operation.\n', '     */\n', '    function rewardedMinting(address gasTokenAddress, uint256 value) public nonReentrant(){\n', '        uint256 mintType = _mintingType[gasTokenAddress];\n', '        require(mintType != 0, "GSVE: Unsupported Token");\n', '        require(totalRewards() > 0, "GSVE: contract has ran out of rewards to give");\n', '        require(rewardsEnabled, "GSVE: Rewards are not enabled");\n', '        if(mintType == 1){\n', '            convenientMinting(gasTokenAddress, value, 2);\n', '        }\n', '        else if (mintType == 2){\n', '            IGasTokenMint(gasTokenAddress).discountedMint(value, 2, msg.sender);\n', '        }\n', '\n', '        IGSVEVault(GSVEVault).transferToken(GSVEToken, msg.sender, mintingReward);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to mint non-wrapped tokens from the convenience of this smart contract.\n', '     * taking a portion of portion of the minted tokens as payment for this convenience.\n', '     */\n', '    function convenientMinting(address gasTokenAddress, uint256 value, uint256 fee) internal {\n', '        uint256 mintType = _mintingType[gasTokenAddress];\n', '        require(mintType == 1, "GSVE: Unsupported Token");\n', '\n', '        uint256 userTokens = value.sub(fee);\n', '        require(userTokens > 0, "GSVE: User attempted to mint too little");\n', '        IGasTokenMint(gasTokenAddress).mint(value);\n', '        IERC20(gasTokenAddress).transfer(msg.sender, userTokens);\n', '        if(fee > 0){\n', '            IERC20(gasTokenAddress).transfer(GSVEVault, fee);\n', '        }\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev public entry to the convenient minting function\n', '     */\n', '    function mintGasToken(address gasTokenAddress, uint256 value) public {\n', '        convenientMinting(gasTokenAddress, value, 2);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev A function that allows a user to claim tokens from the pool\n', '     * The user burns 1 GSVE for each token they take.\n', '     * They are limited to one claim action every 6 hours, and can claim up to 5 tokens per claim.\n', '     */\n', '    function claimToken(address gasTokenAddress, uint256 value) public nonReentrant() {\n', '\n', '        bool isClaimable = _claimable[gasTokenAddress];\n', '        require(isClaimable, "GSVE: Token not claimable");\n', '        require(userStakes[msg.sender] >= tierThreshholds[2] , "GSVE: User has not staked enough to claim from the pool");\n', '        require(block.timestamp.sub(userClaimTimes[msg.sender]) > 60 * 60 * 6, "GSVE: User cannot claim the gas tokens twice in 6 hours");\n', '\n', '        uint256 tokensGiven = value;\n', '\n', '        uint256 tokensAvailableToClaim = IERC20(gasTokenAddress).balanceOf(GSVEVault);\n', '        tokensGiven = Math.min(Math.min(5, tokensAvailableToClaim), tokensGiven);\n', '\n', '        if(tokensGiven == 0){\n', '            return;\n', '        }\n', '\n', '        IGSVEProtocolToken(GSVEToken).burnFrom(msg.sender, tokensGiven * burnToClaimGasTokens);\n', '        IGSVEVault(GSVEVault).transferToken(gasTokenAddress, msg.sender, tokensGiven);\n', '        userClaimTimes[msg.sender] = block.timestamp;\n', '        emit Claimed(msg.sender, gasTokenAddress, tokensGiven);\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to enable gas tokens for use with this contract.\n', '     */\n', '    function addGasToken(address gasToken, uint256 mintType, bool isClaimable) public onlyOwner{\n', '        _mintingType[gasToken] = mintType;\n', '        _claimable[gasToken] = isClaimable;\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to easily check claim type of the token.\n', '     */\n', '    function claimable(address gasToken) public view returns (bool){\n', '        return _claimable[gasToken];\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to check the mint type of the token.\n', '     */\n', '    function mintingType(address gasToken) public view returns (uint256){\n', '        return _mintingType[gasToken];\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to see the total stake of everyone in the protocol.\n', '     */\n', '    function totalStaked() public view returns (uint256){\n', '        return _totalStaked;\n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to see the stake size of a specific staker.\n', '     */\n', '    function userStakeSize(address user)  public view returns (uint256){\n', '        return userStakes[user]; \n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to see how much rewards the vault has available right now.\n', '     */    \n', '     function totalRewards()  public view returns (uint256){\n', '        return IERC20(GSVEToken).balanceOf(GSVEVault); \n', '    }\n', '\n', '    /**\n', '     * @dev A function that allows us to see how much rewards a user has claimed\n', '     */\n', '    function totalRewardUser(address user)  public view returns (uint256){\n', '        return userTotalRewards[user]; \n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get a tier threshold\n', '    */\n', '    function getTierThreshold(uint256 tier)  public view returns (uint256){\n', '        return tierThreshholds[tier];\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the time rewards where enabled\n', '    */\n', '    function getRewardEnableTime()  public view returns (uint256){\n', '        return rewardEnableTime;\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the time rewards where enabled\n', '    */\n', '    function getRewardEnabled()  public view returns (bool){\n', '        return rewardsEnabled;\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the burnToSaveFee \n', '    */\n', '    function getBurnToSaveFee()  public view returns (uint256){\n', '        return burnToSaveFee;\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the burnToClaimGasTokens \n', '    */\n', '    function getBurnToClaimGasTokens()  public view returns (uint256){\n', '        return burnToClaimGasTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the burnToClaimGasTokens \n', '    */\n', '    function getMintingReward()  public view returns (uint256){\n', '        return mintingReward;\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the stake times\n', '    */\n', '    function getStakeTimes(address staker)  public view returns (uint256){\n', '        return userStakeTimes[staker];\n', '    }\n', '\n', '    /**\n', '    * @dev A function that allows us to get the claim times\n', '    */\n', '    function getClaimTimes(address staker)  public view returns (uint256){\n', '        return userClaimTimes[staker];\n', '    }\n', '    \n', '    event Claimed(address indexed _from, address indexed _token, uint256 _value);\n', '\n', '    event Reward(address indexed _from, uint256 _value);\n', '\n', '    event Staked(address indexed _from, uint256 _value);\n', '\n', '    event Unstaked(address indexed _from, uint256 _value);\n', '\n', '    event TierUpdate(uint256 _tier, uint256 _value);\n', '\n', '    event protocolUpdated(bytes32 _type, uint256 _value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']