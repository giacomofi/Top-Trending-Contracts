['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import {Address} from "@openzeppelin/contracts/utils/Address.sol";\n', 'import {SafeDecimalMath} from "./SafeDecimalMath.sol";\n', 'import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '\n', 'import {IERC20} from "./interfaces/IERC20.sol";\n', 'import "./interfaces/IConjure.sol";\n', 'import "./interfaces/IConjureFactory.sol";\n', 'import "./interfaces/IConjureRouter.sol";\n', '\n', '/// @author Conjure Finance Team\n', '/// @title EtherCollateral\n', '/// @notice Contract to create a collateral system for conjure\n', '/// @dev Fork of https://github.com/Synthetixio/synthetix/blob/develop/contracts/EtherCollateralsUSD.sol and adopted\n', 'contract EtherCollateral is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeDecimalMath for uint256;\n', '\n', '    // ========== CONSTANTS ==========\n', '    uint256 internal constant ONE_THOUSAND = 1e18 * 1000;\n', '    uint256 internal constant ONE_HUNDRED = 1e18 * 100;\n', '    uint256 internal constant ONE_HUNDRED_TEN = 1e18 * 110;\n', '\n', '    // ========== SETTER STATE VARIABLES ==========\n', '\n', '    // The ratio of Collateral to synths issued\n', '    uint256 public collateralizationRatio;\n', '\n', '    // Minting fee for issuing the synths\n', '    uint256 public issueFeeRate;\n', '\n', '    // Minimum amount of ETH to create loan preventing griefing and gas consumption. Min 0.05 ETH\n', '    uint256 public constant MIN_LOAN_COLLATERAL_SIZE = 10 ** 18 / 20;\n', '\n', '    // Maximum number of loans an account can create\n', '    uint256 public constant ACCOUNT_LOAN_LIMITS = 50;\n', '\n', '    // Liquidation ratio when loans can be liquidated\n', '    uint256 public liquidationRatio;\n', '\n', '    // Liquidation penalty when loans are liquidated. default 10%\n', '    uint256 public constant LIQUIDATION_PENALTY = 10 ** 18 / 10;\n', '\n', '    // ========== STATE VARIABLES ==========\n', '\n', '    // The total number of synths issued by the collateral in this contract\n', '    uint256 public totalIssuedSynths;\n', '\n', '    // Total number of loans ever created\n', '    uint256 public totalLoansCreated;\n', '\n', '    // Total number of open loans\n', '    uint256 public totalOpenLoanCount;\n', '\n', '    // Synth loan storage struct\n', '    struct SynthLoanStruct {\n', '        // Account that created the loan\n', '        address payable account;\n', '        // Amount (in collateral token ) that they deposited\n', '        uint256 collateralAmount;\n', '        // Amount (in synths) that they issued to borrow\n', '        uint256 loanAmount;\n', '        // Minting Fee\n', '        uint256 mintingFee;\n', '        // When the loan was created\n', '        uint256 timeCreated;\n', '        // ID for the loan\n', '        uint256 loanID;\n', '        // When the loan was paid back (closed)\n', '        uint256 timeClosed;\n', '    }\n', '\n', '    // Users Loans by address\n', '    mapping(address => SynthLoanStruct[]) public accountsSynthLoans;\n', '\n', '    // Account Open Loan Counter\n', '    mapping(address => uint256) public accountOpenLoanCounter;\n', '\n', '    // address of the conjure contract (which represents the asset)\n', '    address payable public arbasset;\n', '\n', '    // the address of the collateral contract factory\n', '    address public _factoryContract;\n', '\n', '    // bool indicating if the asset is closed (no more opening loans and deposits)\n', '    // this is set to true if the asset price reaches 0\n', '    bool internal assetClosed;\n', '\n', '    // address of the owner\n', '    address public owner;\n', '\n', '    // ========== EVENTS ==========\n', '\n', '    event IssueFeeRateUpdated(uint256 issueFeeRate);\n', '    event LoanLiquidationOpenUpdated(bool loanLiquidationOpen);\n', '    event LoanCreated(address indexed account, uint256 loanID, uint256 amount);\n', '    event LoanClosed(address indexed account, uint256 loanID);\n', '    event LoanLiquidated(address indexed account, uint256 loanID, address liquidator);\n', '    event LoanPartiallyLiquidated(\n', '        address indexed account,\n', '        uint256 loanID,\n', '        address liquidator,\n', '        uint256 liquidatedAmount,\n', '        uint256 liquidatedCollateral\n', '    );\n', '    event CollateralDeposited(address indexed account, uint256 loanID, uint256 collateralAmount, uint256 collateralAfter);\n', '    event CollateralWithdrawn(address indexed account, uint256 loanID, uint256 amountWithdrawn, uint256 collateralAfter);\n', '    event LoanRepaid(address indexed account, uint256 loanID, uint256 repaidAmount, uint256 newLoanAmount);\n', '    event AssetClosed(bool status);\n', '    event NewOwner(address newOwner);\n', '\n', '    constructor() {\n', "        // Don't allow implementation to be initialized.\n", '        _factoryContract = address(1);\n', '    }\n', '\n', '    // modifier for only owner\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    // only owner view for modifier\n', '    function _onlyOwner() private view {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '    }\n', '\n', '    /**\n', '     * @dev initializes the clone implementation and the EtherCollateral contract\n', '     *\n', '     * @param _asset the asset with which the EtherCollateral contract is linked\n', '     * @param _owner the owner of the asset\n', '     * @param _factoryAddress the address of the conjure factory for later fee sending\n', '     * @param _mintingFeeRatio array which holds the minting fee and the c-ratio\n', '    */\n', '    function initialize(\n', '        address payable _asset,\n', '        address _owner,\n', '        address _factoryAddress,\n', '        uint256[2] memory _mintingFeeRatio\n', '    )\n', '    external\n', '    {\n', '        require(_factoryContract == address(0), "already initialized");\n', '        require(_factoryAddress != address(0), "factory can not be null");\n', '        require(_owner != address(0), "_owner can not be null");\n', '        require(_asset != address(0), "_asset can not be null");\n', '        // c-ratio greater 100 and less or equal 1000\n', '        require(_mintingFeeRatio[1] <= ONE_THOUSAND, "C-Ratio Too high");\n', '        require(_mintingFeeRatio[1] > ONE_HUNDRED_TEN, "C-Ratio Too low");\n', '\n', '        arbasset = _asset;\n', '        owner = _owner;\n', '        setIssueFeeRateInternal(_mintingFeeRatio[0]);\n', '        _factoryContract = _factoryAddress;\n', '        collateralizationRatio = _mintingFeeRatio[1];\n', '        liquidationRatio = _mintingFeeRatio[1] / 100;\n', '    }\n', '\n', '    // ========== SETTERS ==========\n', '\n', '    /**\n', '     * @dev lets the owner change the contract owner\n', '     *\n', '     * @param _newOwner the new owner address of the contract\n', '    */\n', '    function changeOwner(address payable _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "_newOwner can not be null");\n', '    \n', '        owner = _newOwner;\n', '        emit NewOwner(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets minting fee of the asset internal function\n', '     *\n', '     * @param _issueFeeRate the new minting fee\n', '    */\n', '    function setIssueFeeRateInternal(uint256 _issueFeeRate) internal {\n', '        // max 2.5% fee for minting\n', '        require(_issueFeeRate <= 250, "Minting fee too high");\n', '\n', '        issueFeeRate = _issueFeeRate;\n', '        emit IssueFeeRateUpdated(issueFeeRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets minting fee of the asset\n', '     *\n', '     * @param _issueFeeRate the new minting fee\n', '    */\n', '    function setIssueFeeRate(uint256 _issueFeeRate) external onlyOwner {\n', '        // fee can only be lowered\n', '        require(_issueFeeRate <= issueFeeRate, "Fee can only be lowered");\n', '\n', '        setIssueFeeRateInternal(_issueFeeRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the assetClosed indicator if loan opening is allowed or not\n', '     * Called by the Conjure contract if the asset price reaches 0.\n', '     *\n', '    */\n', '    function setAssetClosed(bool status) external {\n', '        require(msg.sender == arbasset, "Only Conjure contract can call");\n', '        assetClosed = status;\n', '        emit AssetClosed(status);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the assetClosed indicator\n', '    */\n', '    function getAssetClosed() external view returns (bool) {\n', '        return assetClosed;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all the contract information currently in use\n', '     * array indicating which tokens had their prices updated.\n', '     *\n', '     * @return _collateralizationRatio the current C-Ratio\n', '     * @return _issuanceRatio the percentage of 100/ C-ratio e.g. 100/150 = 0.6666666667\n', '     * @return _issueFeeRate the minting fee for a new loan\n', '     * @return _minLoanCollateralSize the minimum loan collateral value\n', '     * @return _totalIssuedSynths the total of all issued synths\n', '     * @return _totalLoansCreated the total of all loans created\n', '     * @return _totalOpenLoanCount the total of open loans\n', '     * @return _ethBalance the current balance of the contract\n', '    */\n', '    function getContractInfo()\n', '    external\n', '    view\n', '    returns (\n', '        uint256 _collateralizationRatio,\n', '        uint256 _issuanceRatio,\n', '        uint256 _issueFeeRate,\n', '        uint256 _minLoanCollateralSize,\n', '        uint256 _totalIssuedSynths,\n', '        uint256 _totalLoansCreated,\n', '        uint256 _totalOpenLoanCount,\n', '        uint256 _ethBalance\n', '    )\n', '    {\n', '        _collateralizationRatio = collateralizationRatio;\n', '        _issuanceRatio = issuanceRatio();\n', '        _issueFeeRate = issueFeeRate;\n', '        _minLoanCollateralSize = MIN_LOAN_COLLATERAL_SIZE;\n', '        _totalIssuedSynths = totalIssuedSynths;\n', '        _totalLoansCreated = totalLoansCreated;\n', '        _totalOpenLoanCount = totalOpenLoanCount;\n', '        _ethBalance = address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the value of of 100 / collateralizationRatio.\n', '     * e.g. 100/150 = 0.6666666667\n', '     *\n', '    */\n', '    function issuanceRatio() public view returns (uint256) {\n', '        // this rounds so you get slightly more rather than slightly less\n', '        return ONE_HUNDRED.divideDecimalRound(collateralizationRatio);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the amount of synths which can be issued given a certain loan amount\n', '     *\n', '     * @param collateralAmount the given ETH amount\n', '     * @return the amount of synths which can be minted with the given collateral amount\n', '    */\n', '    function loanAmountFromCollateral(uint256 collateralAmount) public view returns (uint256) {\n', '        return collateralAmount\n', '        .multiplyDecimal(issuanceRatio())\n', '        .multiplyDecimal(syntharb().getLatestETHUSDPrice())\n', '        .divideDecimal(syntharb().getLatestPrice());\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the collateral amount needed (in ETH) to mint a given amount of synths\n', '     *\n', '     * @param loanAmount the given loan amount\n', '     * @return the amount of collateral (in ETH) needed to open a loan for the synth amount\n', '    */\n', '    function collateralAmountForLoan(uint256 loanAmount) public view returns (uint256) {\n', '        return\n', '        loanAmount\n', '        .multiplyDecimal(collateralizationRatio\n', '        .divideDecimalRound(syntharb().getLatestETHUSDPrice())\n', '        .multiplyDecimal(syntharb().getLatestPrice()))\n', '        .divideDecimalRound(ONE_HUNDRED);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the minting fee given the account address and the loanID\n', '     *\n', '     * @param _account the opener of the loan\n', '     * @param _loanID the loan id\n', '     * @return the minting fee of the loan\n', '    */\n', '    function getMintingFee(address _account, uint256 _loanID) external view returns (uint256) {\n', '        // Get the loan from storage\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\n', '        return synthLoan.mintingFee;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the amount to liquidate which can potentially fix the c ratio given this formula:\n', '     * r = target issuance ratio\n', '     * D = debt balance\n', '     * V = Collateral\n', '     * P = liquidation penalty\n', '     * Calculates amount of synths = (D - V * r) / (1 - (1 + P) * r)\n', '     *\n', '     * If the C-Ratio is greater than Liquidation Ratio + Penalty in % then the C-Ratio can be fixed\n', '     * otherwise a greater number is returned and the debtToCover from the calling function is used\n', '     *\n', '     * @param debtBalance the amount of the loan or debt to calculate in USD\n', '     * @param collateral the amount of the collateral in USD\n', '     *\n', '     * @return the amount to liquidate to fix the C-Ratio if possible\n', '     */\n', '    function calculateAmountToLiquidate(uint debtBalance, uint collateral) public view returns (uint) {\n', '        uint unit = SafeDecimalMath.unit();\n', '\n', '        uint dividend = debtBalance.sub(collateral.divideDecimal(liquidationRatio));\n', '        uint divisor = unit.sub(unit.add(LIQUIDATION_PENALTY).divideDecimal(liquidationRatio));\n', '\n', '        return dividend.divideDecimal(divisor);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all open loans by a given account address\n', '     *\n', '     * @param _account the opener of the loans\n', '     * @return all open loans by ID in form of an array\n', '    */\n', '    function getOpenLoanIDsByAccount(address _account) external view returns (uint256[] memory) {\n', '        SynthLoanStruct[] memory synthLoans = accountsSynthLoans[_account];\n', '\n', '        uint256[] memory _openLoanIDs = new uint256[](synthLoans.length);\n', '        uint256 j;\n', '\n', '        for (uint i = 0; i < synthLoans.length; i++) {\n', '            if (synthLoans[i].timeClosed == 0) {\n', '                _openLoanIDs[j++] = synthLoans[i].loanID;\n', '            }\n', '        }\n', '\n', '        // Change the list size of the array in place\n', '        assembly {\n', '            mstore(_openLoanIDs, j)\n', '        }\n', '\n', '        // Return the resized array\n', '        return _openLoanIDs;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all details about a certain loan\n', '     *\n', '     * @param _account the opener of the loans\n', '     * @param _loanID the ID of a given loan\n', '     * @return account the opener of the loan\n', '     * @return collateralAmount the amount of collateral in ETH\n', '     * @return loanAmount the loan amount\n', '     * @return timeCreated the time the loan was initially created\n', '     * @return loanID the ID of the loan\n', '     * @return timeClosed the closure time of the loan (if closed)\n', '     * @return totalFees the minting fee of the loan\n', '    */\n', '    function getLoan(address _account, uint256 _loanID)\n', '    external\n', '    view\n', '    returns (\n', '        address account,\n', '        uint256 collateralAmount,\n', '        uint256 loanAmount,\n', '        uint256 timeCreated,\n', '        uint256 loanID,\n', '        uint256 timeClosed,\n', '        uint256 totalFees\n', '    )\n', '    {\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\n', '        account = synthLoan.account;\n', '        collateralAmount = synthLoan.collateralAmount;\n', '        loanAmount = synthLoan.loanAmount;\n', '        timeCreated = synthLoan.timeCreated;\n', '        loanID = synthLoan.loanID;\n', '        timeClosed = synthLoan.timeClosed;\n', '        totalFees = synthLoan.mintingFee;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the current C-Ratio of a loan\n', '     *\n', '     * @param _account the opener of the loan\n', '     * @param _loanID the loan ID\n', '     * @return loanCollateralRatio the current C-Ratio of the loan\n', '    */\n', '    function getLoanCollateralRatio(address _account, uint256 _loanID) external view returns (uint256 loanCollateralRatio) {\n', '        // Get the loan from storage\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\n', '\n', '        (loanCollateralRatio,  ) = _loanCollateralRatio(synthLoan);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the current C-Ratio of a loan by _loan struct\n', '     *\n', '     * @param _loan the loan struct\n', '     * @return loanCollateralRatio the current C-Ratio of the loan\n', '     * @return collateralValue the current value of the collateral in USD\n', '    */\n', '    function _loanCollateralRatio(SynthLoanStruct memory _loan)\n', '    internal\n', '    view\n', '    returns (\n', '        uint256 loanCollateralRatio,\n', '        uint256 collateralValue\n', '    )\n', '    {\n', '        uint256 loanAmountWithAccruedInterest = _loan.loanAmount.multiplyDecimal(syntharb().getLatestPrice());\n', '\n', '        collateralValue = _loan.collateralAmount.multiplyDecimal(syntharb().getLatestETHUSDPrice());\n', '        loanCollateralRatio = collateralValue.divideDecimal(loanAmountWithAccruedInterest);\n', '    }\n', '\n', '\n', '    // ========== PUBLIC FUNCTIONS ==========\n', '\n', '    /**\n', '     * @dev Public function to open a new loan in the system\n', '     *\n', '     * @param _loanAmount the amount of synths a user wants to take a loan for\n', '     * @return loanID the ID of the newly created loan\n', '    */\n', '    function openLoan(uint256 _loanAmount)\n', '    external\n', '    payable\n', '    nonReentrant\n', '    returns (uint256 loanID) {\n', '        // asset must be open\n', '        require(!assetClosed, "Asset closed");\n', '        // Require ETH sent to be greater than MIN_LOAN_COLLATERAL_SIZE\n', '        require(\n', '            msg.value >= MIN_LOAN_COLLATERAL_SIZE,\n', '            "Not enough ETH to create this loan. Please see the MIN_LOAN_COLLATERAL_SIZE"\n', '        );\n', '\n', '        // Each account is limited to creating 50 (ACCOUNT_LOAN_LIMITS) loans\n', '        require(accountsSynthLoans[msg.sender].length < ACCOUNT_LOAN_LIMITS, "Each account is limited to 50 loans");\n', '\n', '        // Calculate issuance amount based on issuance ratio\n', '        syntharb().updatePrice();\n', '        uint256 maxLoanAmount = loanAmountFromCollateral(msg.value);\n', '\n', '        // Require requested _loanAmount to be less than maxLoanAmount\n', '        // Issuance ratio caps collateral to loan value at 120%\n', '        require(_loanAmount <= maxLoanAmount, "Loan amount exceeds max borrowing power");\n', '\n', '        uint256 ethForLoan = collateralAmountForLoan(_loanAmount);\n', '        uint256 mintingFee = _calculateMintingFee(msg.value);\n', '        require(msg.value >= ethForLoan + mintingFee, "Not enough funds sent to cover fee and collateral");\n', '\n', '        // Get a Loan ID\n', '        loanID = _incrementTotalLoansCounter();\n', '\n', '        // Create Loan storage object\n', '        SynthLoanStruct memory synthLoan = SynthLoanStruct({\n', '        account: msg.sender,\n', '        collateralAmount: msg.value - mintingFee,\n', '        loanAmount: _loanAmount,\n', '        mintingFee: mintingFee,\n', '        timeCreated: block.timestamp,\n', '        loanID: loanID,\n', '        timeClosed: 0\n', '        });\n', '\n', '        // Record loan in mapping to account in an array of the accounts open loans\n', '        accountsSynthLoans[msg.sender].push(synthLoan);\n', '\n', '        // Increment totalIssuedSynths\n', '        totalIssuedSynths = totalIssuedSynths.add(_loanAmount);\n', '\n', '        // Issue the synth (less fee)\n', '        syntharb().mint(msg.sender, _loanAmount);\n', '        \n', '        // Tell the Dapps a loan was created\n', '        emit LoanCreated(msg.sender, loanID, _loanAmount);\n', '\n', '        // Fee distribution. Mint the fees into the FeePool and record fees paid\n', '        if (mintingFee > 0) {\n', '            // conjureRouter gets 25% of the fee\n', '            address payable conjureRouter = IConjureFactory(_factoryContract).getConjureRouter();\n', '            uint256 feeToSend = mintingFee / 4;\n', '\n', '            IConjureRouter(conjureRouter).deposit{value:feeToSend}();\n', '            arbasset.transfer(mintingFee.sub(feeToSend));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to close a loan\n', '     * calls the internal _closeLoan function with the false parameter for liquidation\n', '     * to mark it as a non liquidation close\n', '     *\n', '     * @param loanID the ID of the loan a user wants to close\n', '    */\n', '    function closeLoan(uint256 loanID) external nonReentrant  {\n', '        _closeLoan(msg.sender, loanID, false);\n', '    }\n', '\n', '    /**\n', '     * @dev Add ETH collateral to an open loan\n', '     *\n', '     * @param account the opener of the loan\n', '     * @param loanID the ID of the loan\n', '    */\n', '    function depositCollateral(address account, uint256 loanID) external payable {\n', '        require(msg.value > 0, "Deposit amount must be greater than 0");\n', '\n', '        // Get the loan from storage\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(account, loanID);\n', '\n', '        // Check loan exists and is open\n', '        _checkLoanIsOpen(synthLoan);\n', '\n', '        uint256 totalCollateral = synthLoan.collateralAmount.add(msg.value);\n', '\n', '        _updateLoanCollateral(synthLoan, totalCollateral);\n', '\n', '        // Tell the Dapps collateral was added to loan\n', '        emit CollateralDeposited(account, loanID, msg.value, totalCollateral);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw ETH collateral from an open loan\n', '     * the C-Ratio after should not be less than the Liquidation Ratio\n', '     *\n', '     * @param loanID the ID of the loan\n', '     * @param withdrawAmount the amount to withdraw from the current collateral\n', '    */\n', '    function withdrawCollateral(uint256 loanID, uint256 withdrawAmount) external nonReentrant  {\n', '        require(withdrawAmount > 0, "Amount to withdraw must be greater than 0");\n', '\n', '        // Get the loan from storage\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(msg.sender, loanID);\n', '\n', '        // Check loan exists and is open\n', '        _checkLoanIsOpen(synthLoan);\n', '\n', '        uint256 collateralAfter = synthLoan.collateralAmount.sub(withdrawAmount);\n', '\n', '        SynthLoanStruct memory loanAfter = _updateLoanCollateral(synthLoan, collateralAfter);\n', '\n', '        // require collateral ratio after to be above the liquidation ratio\n', '        (uint256 collateralRatioAfter, ) = _loanCollateralRatio(loanAfter);\n', '\n', '        require(collateralRatioAfter > liquidationRatio, "Collateral ratio below liquidation after withdraw");\n', '        \n', '        // Tell the Dapps collateral was added to loan\n', '        emit CollateralWithdrawn(msg.sender, loanID, withdrawAmount, loanAfter.collateralAmount);\n', '\n', '        // transfer ETH to msg.sender\n', '        msg.sender.transfer(withdrawAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Repay synths to fix C-Ratio\n', '     *\n', '     * @param _loanCreatorsAddress the address of the loan creator\n', '     * @param _loanID the ID of the loan\n', '     * @param _repayAmount the amount of synths to be repaid\n', '    */\n', '    function repayLoan(\n', '        address _loanCreatorsAddress,\n', '        uint256 _loanID,\n', '        uint256 _repayAmount\n', '    ) external  {\n', '        // check msg.sender has sufficient funds to pay\n', '        require(IERC20(address(syntharb())).balanceOf(msg.sender) >= _repayAmount, "Not enough balance");\n', '\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_loanCreatorsAddress, _loanID);\n', '\n', '        // Check loan exists and is open\n', '        _checkLoanIsOpen(synthLoan);\n', '\n', '        uint256 loanAmountAfter = synthLoan.loanAmount.sub(_repayAmount);\n', '\n', '        // burn funds from msg.sender for repaid amount\n', '        syntharb().burn(msg.sender, _repayAmount);\n', '\n', '        // decrease issued synths\n', '        totalIssuedSynths = totalIssuedSynths.sub(_repayAmount);\n', '\n', '        // update loan with new total loan amount, record accrued interests\n', '        _updateLoan(synthLoan, loanAmountAfter);\n', '\n', '        emit LoanRepaid(_loanCreatorsAddress, _loanID, _repayAmount, loanAmountAfter);\n', '    }\n', '\n', '    /**\n', '     * @dev Liquidate loans at or below issuance ratio\n', '     * if the liquidation amount is greater or equal to the owed amount it will also trigger a closure of the loan\n', '     *\n', '     * @param _loanCreatorsAddress the address of the loan creator\n', '     * @param _loanID the ID of the loan\n', '     * @param _debtToCover the amount of synths the liquidator wants to cover\n', '    */\n', '    function liquidateLoan(\n', '        address _loanCreatorsAddress,\n', '        uint256 _loanID,\n', '        uint256 _debtToCover\n', '    ) external nonReentrant  {\n', "        // check msg.sender (liquidator's wallet) has sufficient\n", '        require(IERC20(address(syntharb())).balanceOf(msg.sender) >= _debtToCover, "Not enough balance");\n', '\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_loanCreatorsAddress, _loanID);\n', '\n', '        // Check loan exists and is open\n', '        _checkLoanIsOpen(synthLoan);\n', '\n', '        (uint256 collateralRatio, uint256 collateralValue) = _loanCollateralRatio(synthLoan);\n', '\n', '        // get prices\n', '        syntharb().updatePrice();\n', '        uint currentPrice = syntharb().getLatestPrice();\n', '        uint currentEthUsdPrice = syntharb().getLatestETHUSDPrice();\n', '\n', '        require(collateralRatio < liquidationRatio, "Collateral ratio above liquidation ratio");\n', '\n', '        // calculate amount to liquidate to fix ratio including accrued interest\n', '        // multiply the loan amount times current price in usd\n', '        // collateralValue is already in usd nomination\n', '        uint256 liquidationAmountUSD = calculateAmountToLiquidate(\n', '            synthLoan.loanAmount.multiplyDecimal(currentPrice),\n', '            collateralValue\n', '        );\n', '\n', '        // calculate back the synth amount from the usd nomination\n', '        uint256 liquidationAmount = liquidationAmountUSD.divideDecimal(currentPrice);\n', '\n', '        // cap debt to liquidate\n', '        uint256 amountToLiquidate = liquidationAmount < _debtToCover ? liquidationAmount : _debtToCover;\n', '\n', '        // burn funds from msg.sender for amount to liquidate\n', '        syntharb().burn(msg.sender, amountToLiquidate);\n', '\n', '        // decrease issued totalIssuedSynths\n', '        totalIssuedSynths = totalIssuedSynths.sub(amountToLiquidate);\n', '\n', '        // Collateral value to redeem in ETH\n', '        uint256 collateralRedeemed = amountToLiquidate.multiplyDecimal(currentPrice).divideDecimal(currentEthUsdPrice);\n', '\n', '        // Add penalty in ETH\n', '        uint256 totalCollateralLiquidated = collateralRedeemed.multiplyDecimal(\n', '            SafeDecimalMath.unit().add(LIQUIDATION_PENALTY)\n', '        );\n', '\n', '        // update remaining loanAmount less amount paid and update accrued interests less interest paid\n', '        _updateLoan(synthLoan, synthLoan.loanAmount.sub(amountToLiquidate));\n', '\n', '        // indicates if we need a full closure\n', '        bool close;\n', '\n', '        if (synthLoan.collateralAmount <= totalCollateralLiquidated) {\n', '            close = true;\n', '            // update remaining collateral on loan\n', '            _updateLoanCollateral(synthLoan, 0);\n', '            totalCollateralLiquidated = synthLoan.collateralAmount;\n', '        }\n', '        else {\n', '            // update remaining collateral on loan\n', '            _updateLoanCollateral(synthLoan, synthLoan.collateralAmount.sub(totalCollateralLiquidated));\n', '        }\n', '\n', '        // check if we have a full closure here\n', '        if (close) {\n', '            // emit loan liquidation event\n', '            emit LoanLiquidated(\n', '                _loanCreatorsAddress,\n', '                _loanID,\n', '                msg.sender\n', '            );\n', '            _closeLoan(synthLoan.account, synthLoan.loanID, true);\n', '        } else {\n', '            // emit loan liquidation event\n', '            emit LoanPartiallyLiquidated(\n', '                _loanCreatorsAddress,\n', '                _loanID,\n', '                msg.sender,\n', '                amountToLiquidate,\n', '                totalCollateralLiquidated\n', '            );\n', '        }\n', '\n', '        // Send liquidated ETH collateral to msg.sender\n', '        msg.sender.transfer(totalCollateralLiquidated);\n', '    }\n', '\n', '    // ========== PRIVATE FUNCTIONS ==========\n', '\n', '    /**\n', '     * @dev Internal function to close open loans\n', '     *\n', '     * @param account the account which opened the loan\n', '     * @param loanID the ID of the loan to close\n', '     * @param liquidation bool representing if its a user close or a liquidation close\n', '    */\n', '    function _closeLoan(\n', '        address account,\n', '        uint256 loanID,\n', '        bool liquidation\n', '    ) private {\n', '        // Get the loan from storage\n', '        SynthLoanStruct memory synthLoan = _getLoanFromStorage(account, loanID);\n', '\n', '        // Check loan exists and is open\n', '        _checkLoanIsOpen(synthLoan);\n', '\n', '        // Record loan as closed\n', '        _recordLoanClosure(synthLoan);\n', '\n', '        if (!liquidation) {\n', '            uint256 repayAmount = synthLoan.loanAmount;\n', '\n', '            require(\n', '                IERC20(address(syntharb())).balanceOf(msg.sender) >= repayAmount,\n', '                "You do not have the required Synth balance to close this loan."\n', '            );\n', '\n', '            // Decrement totalIssuedSynths\n', '            totalIssuedSynths = totalIssuedSynths.sub(synthLoan.loanAmount);\n', '\n', '            // Burn all Synths issued for the loan + the fees\n', '            syntharb().burn(msg.sender, repayAmount);\n', '        }\n', '\n', '        uint256 remainingCollateral = synthLoan.collateralAmount;\n', '\n', '        // Tell the Dapps\n', '        emit LoanClosed(account, loanID);\n', '\n', '        // Send remaining collateral to loan creator\n', '        synthLoan.account.transfer(remainingCollateral);\n', '    }\n', '\n', '    /**\n', '     * @dev gets a loan struct from the storage\n', '     *\n', '     * @param account the account which opened the loan\n', '     * @param loanID the ID of the loan to close\n', '     * @return synthLoan the loan struct given the input parameters\n', '    */\n', '    function _getLoanFromStorage(address account, uint256 loanID) private view returns (SynthLoanStruct memory synthLoan) {\n', '        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[account];\n', '        for (uint256 i = 0; i < synthLoans.length; i++) {\n', '            if (synthLoans[i].loanID == loanID) {\n', '                synthLoan = synthLoans[i];\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev updates the loan amount of a loan\n', '     *\n', '     * @param _synthLoan the synth loan struct representing the loan\n', '     * @param _newLoanAmount the new loan amount to update the loan\n', '    */\n', '    function _updateLoan(\n', '        SynthLoanStruct memory _synthLoan,\n', '        uint256 _newLoanAmount\n', '    ) private {\n', '        // Get storage pointer to the accounts array of loans\n', '        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[_synthLoan.account];\n', '        for (uint256 i = 0; i < synthLoans.length; i++) {\n', '            if (synthLoans[i].loanID == _synthLoan.loanID) {\n', '                synthLoans[i].loanAmount = _newLoanAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev updates the collateral amount of a loan\n', '     *\n', '     * @param _synthLoan the synth loan struct representing the loan\n', '     * @param _newCollateralAmount the new collateral amount to update the loan\n', '     * @return synthLoan the loan struct given the input parameters\n', '    */\n', '    function _updateLoanCollateral(SynthLoanStruct memory _synthLoan, uint256 _newCollateralAmount)\n', '    private\n', '    returns (SynthLoanStruct memory synthLoan) {\n', '        // Get storage pointer to the accounts array of loans\n', '        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[_synthLoan.account];\n', '        for (uint256 i = 0; i < synthLoans.length; i++) {\n', '            if (synthLoans[i].loanID == _synthLoan.loanID) {\n', '                synthLoans[i].collateralAmount = _newCollateralAmount;\n', '                synthLoan = synthLoans[i];\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev records the closure of a loan\n', '     *\n', '     * @param synthLoan the synth loan struct representing the loan\n', '    */\n', '    function _recordLoanClosure(SynthLoanStruct memory synthLoan) private {\n', '        // Get storage pointer to the accounts array of loans\n', '        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[synthLoan.account];\n', '        for (uint256 i = 0; i < synthLoans.length; i++) {\n', '            if (synthLoans[i].loanID == synthLoan.loanID) {\n', '                // Record the time the loan was closed\n', '                synthLoans[i].timeClosed = block.timestamp;\n', '            }\n', '        }\n', '\n', '        // Reduce Total Open Loans Count\n', '        totalOpenLoanCount = totalOpenLoanCount.sub(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Increments all global counters after a loan creation\n', '     *\n', '     * @return the amount of total loans created\n', '    */\n', '    function _incrementTotalLoansCounter() private returns (uint256) {\n', '        // Increase the total Open loan count\n', '        totalOpenLoanCount = totalOpenLoanCount.add(1);\n', '        // Increase the total Loans Created count\n', '        totalLoansCreated = totalLoansCreated.add(1);\n', '        // Return total count to be used as a unique ID.\n', '        return totalLoansCreated;\n', '    }\n', '\n', '    /**\n', '     * @dev calculates the minting fee given the 100+ x% of eth collateral and returns x\n', '     * e.g. input 1.02 ETH fee is set to 2% returns 0.02 ETH as the minting fee\n', '     *\n', '     * @param _ethAmount the amount of eth of the collateral\n', '     * @param mintingFee the fee which is being distributed to the creator and the factory\n', '    */\n', '    function _calculateMintingFee(uint256 _ethAmount) private view returns (uint256 mintingFee) {\n', '        if (issueFeeRate == 0) {\n', '            mintingFee = 0;\n', '        } else {\n', '            mintingFee = _ethAmount.divideDecimalRound(10000 + issueFeeRate).multiplyDecimal(issueFeeRate);\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev checks if a loan is pen in the system\n', '     *\n', '     * @param _synthLoan the synth loan struct representing the loan\n', '    */\n', '    function _checkLoanIsOpen(SynthLoanStruct memory _synthLoan) internal pure {\n', '        require(_synthLoan.loanID > 0, "Loan does not exist");\n', '        require(_synthLoan.timeClosed == 0, "Loan already closed");\n', '    }\n', '\n', '    /* ========== INTERNAL VIEWS ========== */\n', '\n', '    /**\n', '     * @dev Gets the interface of the synthetic asset\n', '    */\n', '    function syntharb() internal view returns (IConjure) {\n', '        return IConjure(arbasset);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', ' pragma solidity 0.7.6;\n', '\n', '// Libraries\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    /* Number of decimal places in the representations. */\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    /* The number representing 1.0. */\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    /* The number representing 1.0 for higher fidelity numbers. */\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    /**\n', '     * @return Provides an interface to UNIT.\n', '     */\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return Provides an interface to PRECISE_UNIT.\n', '     */\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n', '     * decimals.\n', '     *\n', '     * @dev A unit factor is divided out after the product of x and y is evaluated,\n', '     * so that product must be less than 2**256. As this is an integer division,\n', '     * the internal division always rounds down. This helps save on gas. Rounding\n', '     * is more expensive on gas.\n', '     */\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of the specified precision unit.\n', '     *\n', '     * @dev The operands should be in the form of a the specified unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a precise unit.\n', '     *\n', '     * @dev The operands should be in the precise unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a standard unit.\n', '     *\n', '     * @dev The operands should be in the standard unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is a high\n', '     * precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n', '     * this is an integer division, the result is always rounded down.\n', '     * This helps save on gas. Rounding is more expensive on gas.\n', '     */\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Reintroduce the UNIT factor that will be divided out by y. */\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * decimal in the precision unit specified in the parameter.\n', '     *\n', '     * @dev y is divided after the product of x and the specified precision unit\n', '     * is evaluated, so the product of x and the specified precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * standard precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and the standard precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * high precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the high precision unit\n', '     * is evaluated, so the product of x and the high precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a standard decimal representation to a high precision one.\n', '     */\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a high precision decimal to a standard decimal representation.\n', '     */\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', '/// @author Conjure Finance Team\n', '/// @title IConjure\n', '/// @notice Interface for interacting with the Conjure Contracts\n', 'interface IConjure {\n', '    /**\n', '     * @dev lets the EtherCollateral contract instance burn synths\n', '     *\n', '     * @param account the account address where the synths should be burned\n', '     * @param amount the amount to be burned\n', '    */\n', '    function burn(address account, uint amount) external;\n', '\n', '    /**\n', '     * @dev lets the EtherCollateral contract instance mint new synths\n', '     *\n', '     * @param account the account address where the synths should be minted to\n', '     * @param amount the amount to be minted\n', '    */\n', '    function mint(address account, uint amount) external;\n', '\n', '    /**\n', '     * @dev gets the latest ETH USD Price from the given oracle\n', '     *\n', '     * @return the current eth usd price\n', '    */\n', '    function getLatestETHUSDPrice() external view returns (uint);\n', '\n', '    /**\n', '     * @dev sets the latest price of the synth in USD by calculation\n', '    */\n', '    function updatePrice() external;\n', '\n', '    /**\n', '     * @dev gets the latest recorded price of the synth in USD\n', '     *\n', '     * @return the last recorded synths price\n', '    */\n', '    function getLatestPrice() external view returns (uint);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', '/// @author Conjure Finance Team\n', '/// @title IConjureFactory\n', '/// @notice Interface for interacting with the ConjureFactory Contract\n', 'interface IConjureFactory {\n', '\n', '    /**\n', '     * @dev gets the current conjure router\n', '     *\n', '     * @return the current conjure router\n', '    */\n', '    function getConjureRouter() external returns (address payable);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', '/// @author Conjure Finance Team\n', '/// @title IConjureRouter\n', '/// @notice Interface for interacting with the ConjureRouter Contract\n', 'interface IConjureRouter {\n', '\n', '    /**\n', '     * @dev calls the deposit function\n', '    */\n', '    function deposit() external payable;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {\n', '    "contracts/SafeDecimalMath.sol": {\n', '      "SafeDecimalMath": "0x8afbec6329faaaa1e267052210104b3d3ab0c163"\n', '    }\n', '  }\n', '}']