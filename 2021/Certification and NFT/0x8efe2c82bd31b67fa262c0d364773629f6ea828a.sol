['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.12; */\n', '/* pragma experimental ABIEncoderV2; */\n', '\n', 'interface Initializable {\n', '    function init(bytes32) external;\n', '}\n', '\n', 'interface Authorizable {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', 'interface Drippable {\n', '    function drip() external returns (uint256);\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface Pricing {\n', '    function poke(bytes32) external;\n', '}\n', '\n', 'interface ERC20 {\n', '    function decimals() external returns (uint8);\n', '}\n', '\n', 'interface DssVat {\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n', '    function Line() external view returns (uint256);\n', '    function suck(address, address, uint) external;\n', '}\n', '\n', 'interface AuctionLike {\n', '    function vat() external returns (address);\n', '    function cat() external returns (address); // Only flip\n', '    function beg() external returns (uint256);\n', '    function pad() external returns (uint256); // Only flop\n', '    function ttl() external returns (uint256);\n', '    function tau() external returns (uint256);\n', '    function ilk() external returns (bytes32); // Only flip\n', '    function gem() external returns (bytes32); // Only flap/flop\n', '}\n', '\n', 'interface JoinLike {\n', '    function vat() external returns (address);\n', '    function ilk() external returns (bytes32);\n', '    function gem() external returns (address);\n', '    function dec() external returns (uint256);\n', '    function join(address, uint) external;\n', '    function exit(address, uint) external;\n', '}\n', '\n', 'interface MomLike {\n', '    function setOsm(bytes32, address) external;\n', '}\n', '\n', 'interface RegistryLike {\n', '    function add(address) external;\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, address, address, address, address\n', '    );\n', '    function ilkData(bytes32) external view returns (\n', '        uint256       pos,\n', '        address       gem,\n', '        address       pip,\n', '        address       join,\n', '        address       flip,\n', '        uint256       dec,\n', '        string memory name,\n', '        string memory symbol\n', '    );\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface IAMLike {\n', '    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n', '    function setIlk(bytes32,uint256,uint256,uint256) external;\n', '    function remIlk(bytes32) external;\n', '    function exec(bytes32) external returns (uint256);\n', '}\n', '\n', '\n', 'library DssExecLib {\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '    function vat()        public view returns (address) {}\n', '    function cat()        public view returns (address) {}\n', '    function pot()        public view returns (address) {}\n', '    function vow()        public view returns (address) {}\n', '    function end()        public view returns (address) {}\n', '    function reg()        public view returns (address) {}\n', '    function spotter()    public view returns (address) {}\n', '    function flipperMom() public view returns (address) {}\n', '    function flip(bytes32) public view returns (address) {}\n', '    function osmMom() public view returns (address) {}\n', '    function getChangelogAddress(bytes32) public view returns (address) {}\n', '    function setChangelogAddress(bytes32, address) public {}\n', '    function setChangelogVersion(string memory) public {}\n', '    function authorize(address, address) public {}\n', '    function deauthorize(address, address) public {}\n', '    function canCast(uint40, bool) public pure returns (bool) {}\n', '    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\n', '    function setContract(address, bytes32, address) public {}\n', '    function setContract(address, bytes32, bytes32, address) public {}\n', '    function setIlkStabilityFee(bytes32, uint256, bool) public {}\n', '    function setIlkLiquidationRatio(bytes32, uint256) public {}\n', '    function setIlkDebtCeiling(bytes32, uint256) public {}\n', '    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\n', '    function removeIlkFromAutoLine(bytes32) public {}\n', '    function addWritersToMedianWhitelist(address, address[] memory) public {}\n', '    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function addReaderToOSMWhitelist(address, address) public {}\n', '    function addReaderToMedianWhitelist(address, address) public {}\n', '    function removeReaderFromMedianWhitelist(address, address) public {}\n', '    function sendPaymentFromSurplusBuffer(address, uint256) public {}\n', '    function allowOSMFreeze(address, bytes32) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Modifier used to limit execution time when office hours is enabled\n', '    modifier limited {\n', '        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Returns the next available cast time\n', '    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n', '        require(eta <= uint40(-1));\n', '        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '    function nextCastTime(uint256) external view returns (uint256);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        return SpellAction(action).nextCastTime(eta);\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss-auto-line/blob/master/src/DssAutoLine.sol\n', 'interface DssAutoLineAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n', '    function setIlk(bytes32,uint256,uint256,uint256) external;\n', '    function remIlk(bytes32) external;\n', '    function exec(bytes32) external returns (uint256);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/LPOsmAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/univ2-lp-oracle\n', 'interface LPOsmAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function stopped() external view returns (uint256);\n', '    function bud(address) external view returns (uint256);\n', '    function dec0() external view returns (uint8);\n', '    function dec1() external view returns (uint8);\n', '    function orb0() external view returns (address);\n', '    function orb1() external view returns (address);\n', '    function wat() external view returns (bytes32);\n', '    function hop() external view returns (uint32);\n', '    function src() external view returns (address);\n', '    function zzz() external view returns (uint64);\n', '    function cur() external view returns (uint128, uint128);\n', '    function nxt() external view returns (uint128, uint128);\n', '    function change(address) external;\n', '    function step(uint256) external;\n', '    function stop() external;\n', '    function start() external;\n', '    function pass() external view returns (bool);\n', '    function poke() external;\n', '    function peek() external view returns (bytes32, bool);\n', '    function peep() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '    function link(uint256, address) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VatAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function can(address, address) external view returns (uint256);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function sin(address) external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function cage() external;\n', '    function slip(bytes32, address, int256) external;\n', '    function flux(bytes32, address, address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function fork(bytes32, address, address, int256, int256) external;\n', '    function grab(bytes32, address, address, address, int256, int256) external;\n', '    function heal(uint256) external;\n', '    function suck(address, address, uint256) external;\n', '    function fold(bytes32, address, int256) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '/* import "dss-interfaces/dss/VatAbstract.sol"; */\n', '/* import "dss-interfaces/dss/DssAutoLineAbstract.sol"; */\n', '/* import "dss-interfaces/dss/LPOsmAbstract.sol"; */\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/098eabb0973a264de343457ad42e29084577c338/governance/votes/Executive%20vote%20-%20May%2014%2C%202021.md -q -O - 2> /dev/null)"\n', '    string public constant description =\n', '        "2021-05-14 MakerDAO Executive Spell | Hash: 0xd33a03015df3af9e045e54f62f3a78a5843514b01a0f282698afda166fdde202";\n', '\n', '    address constant PIP_UNIV2DAIETH  = 0xFc8137E1a45BAF0030563EC4F0F851bd36a85b7D;\n', '    address constant PIP_UNIV2WBTCETH = 0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07;\n', '    address constant PIP_UNIV2USDCETH = 0xf751f24DD9cfAd885984D1bA68860F558D21E52A;\n', '    address constant PIP_UNIV2DAIUSDC = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;\n', '    address constant PIP_UNIV2ETHUSDT = 0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016;\n', '    address constant PIP_UNIV2LINKETH = 0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F;\n', '    address constant PIP_UNIV2UNIETH  = 0x8462A88f50122782Cc96108F476deDB12248f931;\n', '    address constant PIP_UNIV2WBTCDAI = 0x5bB72127a196392cf4aC00Cf57aB278394d24e55;\n', '    address constant PIP_UNIV2AAVEETH = 0x32d8416e8538Ac36272c44b0cd962cD7E0198489;\n', '    address constant PIP_UNIV2DAIUSDT = 0x9A1CD705dc7ac64B50777BcEcA3529E58B1292F1;\n', '\n', '    uint256 constant ONE_PCT   = 1000000000315522921573372069;\n', '    uint256 constant THREE_PCT = 1000000000937303470807876289;\n', '    uint256 constant FIVE_PCT  = 1000000001547125957863212448;\n', '\n', '    uint256 constant MILLION = 10 ** 6;\n', '    uint256 constant RAD     = 10 ** 45;\n', '\n', '    function replaceOracle(\n', '        bytes32 ilk,\n', '        bytes32 pipKey,\n', '        address newOracle,\n', '        address spotter,\n', '        address end,\n', '        address mom,\n', '        bool orb0Med,\n', '        bool orb1Med\n', '    ) internal {\n', '        address oldOracle = DssExecLib.getChangelogAddress(pipKey);\n', '        address orb0 = LPOsmAbstract(newOracle).orb0();\n', '        address orb1 = LPOsmAbstract(newOracle).orb1();\n', '        require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");\n', '        require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");\n', '        require(orb0 == LPOsmAbstract(oldOracle).orb0(), "DssSpell/not-matching-orb0");\n', '        require(orb1 == LPOsmAbstract(oldOracle).orb1(), "DssSpell/not-matching-orb1");\n', '        DssExecLib.setContract(spotter, ilk, "pip", newOracle);\n', '        DssExecLib.authorize(newOracle, mom);\n', '        DssExecLib.addReaderToOSMWhitelist(newOracle, spotter);\n', '        DssExecLib.addReaderToOSMWhitelist(newOracle, end);\n', '        if (orb0Med) {\n', '            DssExecLib.addReaderToMedianWhitelist(orb0, newOracle);\n', '            DssExecLib.removeReaderFromMedianWhitelist(orb0, oldOracle);\n', '        }\n', '        if (orb1Med) {\n', '            DssExecLib.addReaderToMedianWhitelist(orb1, newOracle);\n', '            DssExecLib.removeReaderFromMedianWhitelist(orb1, oldOracle);\n', '        }\n', '        DssExecLib.allowOSMFreeze(newOracle, ilk);\n', '        DssExecLib.setChangelogAddress(pipKey, newOracle);\n', '    }\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function actions() public override {\n', '        address MCD_VAT  = DssExecLib.vat();\n', '        address MCD_SPOT = DssExecLib.spotter();\n', '        address MCD_END  = DssExecLib.end();\n', '        address OSM_MOM  = DssExecLib.osmMom();\n', '\n', '        // ----------------------------- Stability Fee updates ----------------------------\n', '        DssExecLib.setIlkStabilityFee("KNC-A", FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("TUSD-A", ONE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("PAXUSD-A", ONE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("ETH-C", THREE_PCT, true);\n', '\n', '        // ------------------------------ Debt ceiling updates -----------------------------\n', '        (,,,uint256 kncLine,) = VatAbstract(MCD_VAT).ilks("KNC-A");\n', '        DssExecLib.removeIlkFromAutoLine("KNC-A");\n', '        DssExecLib.setIlkDebtCeiling("KNC-A", 0); // -kncLine\n', '        DssExecLib.setIlkDebtCeiling("PAXUSD-A", 0); // -100M\n', '        DssExecLib.setIlkDebtCeiling("USDC-B", 0); // -30M\n', '        uint256 Line = VatAbstract(MCD_VAT).Line();\n', '        VatAbstract(MCD_VAT).file("Line", sub(Line, add(130 * MILLION * RAD, kncLine)));\n', '\n', '        // --------------------------------- UNIV2DAIETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2DAIETH-A",\n', '            "PIP_UNIV2DAIETH",\n', '            PIP_UNIV2DAIETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            false,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2WBTCETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2WBTCETH-A",\n', '            "PIP_UNIV2WBTCETH",\n', '            PIP_UNIV2WBTCETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2USDCETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2USDCETH-A",\n', '            "PIP_UNIV2USDCETH",\n', '            PIP_UNIV2USDCETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            false,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2DAIUSDC-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2DAIUSDC-A",\n', '            "PIP_UNIV2DAIUSDC",\n', '            PIP_UNIV2DAIUSDC,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            false,\n', '            false\n', '        );\n', '\n', '        // --------------------------------- UNIV2ETHUSDT-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2ETHUSDT-A",\n', '            "PIP_UNIV2ETHUSDT",\n', '            PIP_UNIV2ETHUSDT,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2LINKETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2LINKETH-A",\n', '            "PIP_UNIV2LINKETH",\n', '            PIP_UNIV2LINKETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2UNIETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2UNIETH-A",\n', '            "PIP_UNIV2UNIETH",\n', '            PIP_UNIV2UNIETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2WBTCDAI-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2WBTCDAI-A",\n', '            "PIP_UNIV2WBTCDAI",\n', '            PIP_UNIV2WBTCDAI,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            false\n', '        );\n', '\n', '        // --------------------------------- UNIV2AAVEETH-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2AAVEETH-A",\n', '            "PIP_UNIV2AAVEETH",\n', '            PIP_UNIV2AAVEETH,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            true,\n', '            true\n', '        );\n', '\n', '        // --------------------------------- UNIV2DAIUSDT-A ---------------------------------\n', '        replaceOracle(\n', '            "UNIV2DAIUSDT-A",\n', '            "PIP_UNIV2DAIUSDT",\n', '            PIP_UNIV2DAIUSDT,\n', '            MCD_SPOT,\n', '            MCD_END,\n', '            OSM_MOM,\n', '            false,\n', '            true\n', '        );\n', '\n', '        // ---------------------------- Update Chainlog version ----------------------------\n', '        DssExecLib.setChangelogVersion("1.7.0");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']