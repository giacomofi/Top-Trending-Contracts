['// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./IFilter.sol";\n', '\n', 'abstract contract BaseFilter is IFilter {\n', '    function getMethod(bytes memory _data) internal pure returns (bytes4 method) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            method := mload(add(_data, 0x20))\n', '        }\n', '    }\n', '}\n', '\n', '// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./BaseFilter.sol";\n', '\n', 'contract CompoundCTokenFilter is BaseFilter {\n', '\n', '    bytes4 private constant CETH_MINT = bytes4(keccak256("mint()"));\n', '    bytes4 private constant CERC20_MINT = bytes4(keccak256("mint(uint256)"));\n', '    bytes4 private constant CTOKEN_REDEEM = bytes4(keccak256("redeem(uint256)"));\n', '    bytes4 private constant CTOKEN_REDEEM_UNDERLYING = bytes4(keccak256("redeemUnderlying(uint256)"));\n', '    bytes4 private constant CTOKEN_BORROW = bytes4(keccak256("borrow(uint256)"));\n', '    bytes4 private constant CETH_REPAY_BORROW = bytes4(keccak256("repayBorrow()"));\n', '    bytes4 private constant CERC20_REPAY_BORROW = bytes4(keccak256("repayBorrow(uint256)"));\n', '    bytes4 private constant ERC20_APPROVE = bytes4(keccak256("approve(address,uint256)"));\n', '\n', '    address public immutable underlying;\n', '\n', '    constructor (address _underlying) {\n', '        underlying = _underlying;\n', '    }\n', '\n', '    function isValid(address /*_wallet*/, address _spender, address _to, bytes calldata _data) external view override returns (bool valid) {\n', '        // disable ETH transfer for cErc20\n', '        if (_data.length < 4) {\n', '            return (_data.length == 0) && (underlying == address(0));\n', '        }\n', '        bytes4 method = getMethod(_data);\n', '        // cToken methods\n', '        if (_spender == _to) {\n', '            if (underlying == address(0)) {\n', '                return (\n', '                    method == CETH_MINT ||\n', '                    method == CTOKEN_REDEEM ||\n', '                    method == CTOKEN_REDEEM_UNDERLYING ||\n', '                    method == CTOKEN_BORROW ||\n', '                    method == CETH_REPAY_BORROW);\n', '            } else {\n', '                return (\n', '                    method == CERC20_MINT ||\n', '                    method == CTOKEN_REDEEM ||\n', '                    method == CTOKEN_REDEEM_UNDERLYING ||\n', '                    method == CTOKEN_BORROW ||\n', '                    method == CERC20_REPAY_BORROW);\n', '            }\n', '        // ERC20 methods\n', '        } else {\n', '            // only allow an approve on the underlying \n', '            return (method == ERC20_APPROVE && underlying == _to);\n', '        }\n', '    }\n', '}\n', '\n', '// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface IFilter {\n', '    function isValid(address _wallet, address _spender, address _to, bytes calldata _data) external view returns (bool valid);\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {\n', '    "": {}\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']