['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: contracts\\lib\\IERC20.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\interface\\INestLedger.sol\n', '\n', '/// @dev This interface defines the nest ledger methods\n', 'interface INestLedger {\n', '\n', '    /// @dev Application Flag Changed event\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    event ApplicationChanged(address addr, uint flag);\n', '    \n', '    /// @dev Configuration structure of nest ledger contract\n', '    struct Config {\n', '        \n', '        // nest reward scale(10000 based). 2000\n', '        uint16 nestRewardScale;\n', '\n', '        // // ntoken reward scale(10000 based). 8000\n', '        // uint16 ntokenRewardScale;\n', '    }\n', '    \n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) external;\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) external view returns (uint);\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) external view returns (uint);\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\n', '}\n', '\n', '// File: contracts\\interface\\INestPriceFacade.sol\n', '\n', '/// @dev This interface defines the methods for price call entry\n', 'interface INestPriceFacade {\n', '    \n', '    /// @dev Price call entry configuration structure\n', '    struct Config {\n', '\n', '        // Single query fee（0.0001 ether, DIMI_ETHER). 100\n', '        uint16 singleFee;\n', '\n', '        // Double query fee（0.0001 ether, DIMI_ETHER). 100\n', '        uint16 doubleFee;\n', '\n', '        // The normal state flag of the call address. 0\n', '        uint8 normalFlag;\n', '    }\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @param flag Address flag\n', '    function setAddressFlag(address addr, uint flag) external;\n', '\n', '    /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @return Address flag\n', '    function getAddressFlag(address addr) external view returns(uint);\n', '\n', '    /// @dev Set INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\n', '    function setNestQuery(address tokenAddress, address nestQueryAddress) external;\n', '\n', '    /// @dev Get INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @return INestQuery implementation contract address, 0 means use default\n', '    function getNestQuery(address tokenAddress) external view returns (address);\n', '\n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ);\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(address tokenAddress, uint height, address paybackAddress) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(address tokenAddress, uint count, address paybackAddress) external payable returns (uint[] memory);\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \n', '    external \n', '    payable \n', '    returns (\n', '        uint latestPriceBlockNumber, \n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice);\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ, uint ntokenBlockNumber, uint ntokenPrice, uint ntokenAvgPrice, uint ntokenSigmaSQ);\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice);\n', '}\n', '\n', '// File: contracts\\interface\\INestRedeeming.sol\n', '\n', '/// @dev This interface defines the methods for redeeming\n', 'interface INestRedeeming {\n', '\n', '    /// @dev Redeem configuration structure\n', '    struct Config {\n', '\n', '        // Redeem activate threshold, when the circulation of token exceeds this threshold, \n', '        // activate redeem (Unit: 10000 ether). 500 \n', '        uint32 activeThreshold;\n', '\n', '        // The number of nest redeem per block. 1000\n', '        uint16 nestPerBlock;\n', '\n', '        // The maximum number of nest in a single redeem. 300000\n', '        uint32 nestLimit;\n', '\n', '        // The number of ntoken redeem per block. 10\n', '        uint16 ntokenPerBlock;\n', '\n', '        // The maximum number of ntoken in a single redeem. 3000\n', '        uint32 ntokenLimit;\n', '\n', '        // Price deviation limit, beyond this upper limit stop redeem (10000 based). 500\n', '        uint16 priceDeviationLimit;\n', '    }\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Redeem ntokens for ethers\n', '    /// @notice Ethfee will be charged\n', '    /// @param ntokenAddress The address of ntoken\n', '    /// @param amount The amount of ntoken\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    function redeem(address ntokenAddress, uint amount, address paybackAddress) external payable;\n', '\n', '    /// @dev Get the current amount available for repurchase\n', '    /// @param ntokenAddress The address of ntoken\n', '    function quotaOf(address ntokenAddress) external view returns (uint);\n', '}\n', '\n', '// File: contracts\\lib\\TransferHelper.sol\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts\\interface\\INestMapping.sol\n', '\n', '/// @dev The interface defines methods for nest builtin contract address mapping\n', 'interface INestMapping {\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) external;\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    );\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() external view returns (address);\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() external view returns (address);\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() external view returns (address);\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() external view returns (address);\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() external view returns (address);\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) external;\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) external view returns (address);\n', '}\n', '\n', '// File: contracts\\interface\\INestGovernance.sol\n', '\n', '/// @dev This interface defines the governance methods\n', 'interface INestGovernance is INestMapping {\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) external;\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) external view returns (uint);\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) external view returns (bool);\n', '}\n', '\n', '// File: contracts\\NestBase.sol\n', '\n', '/// @dev Base contract of nest\n', 'contract NestBase {\n', '\n', '    // Address of nest token contract\n', '    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\n', '\n', '    // Genesis block number of nest\n', '    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\n', '    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\n', '    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\n', '    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\n', '    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\n', '    // on-line flow, the actual block is 5120000\n', '    uint constant NEST_GENESIS_BLOCK = 5120000;\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) virtual public {\n', "        require(_governance == address(0), 'NEST:!initialize');\n", '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev INestGovernance implementation contract address\n', '    address public _governance;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) virtual public {\n', '\n', '        address governance = _governance;\n', '        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev Migrate funds from current contract to NestLedger\n', '    /// @param tokenAddress Destination token address.(0 means eth)\n', '    /// @param value Migrate amount\n', '    function migrate(address tokenAddress, uint value) external onlyGovernance {\n', '\n', '        address to = INestGovernance(_governance).getNestLedgerAddress();\n', '        if (tokenAddress == address(0)) {\n', '            INestLedger(to).addETHReward { value: value } (address(0));\n', '        } else {\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    //---------modifier------------\n', '\n', '    modifier onlyGovernance() {\n', '        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _;\n', '    }\n', '\n', '    modifier noContract() {\n', '        require(msg.sender == tx.origin, "NEST:!contract");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\NestRedeeming.sol\n', '\n', '/// @dev The contract is for redeeming nest token and getting ETH in return\n', 'contract NestRedeeming is NestBase, INestRedeeming {\n', '\n', '    // /// @param nestTokenAddress Address of nest token contract\n', '    // constructor(address nestTokenAddress) {\n', '    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\n', '    // }\n', '\n', '    /// @dev Governance information\n', '    struct GovernanceInfo {\n', '        address addr;\n', '        uint96 flag;\n', '    }\n', '\n', '    /// @dev Redeeming information\n', '    struct RedeemInfo {\n', '        \n', '        // Redeem quota consumed\n', '        // block.number * quotaPerBlock - quota\n', '        uint128 quota;\n', '\n', '        // Redeem threshold by circulation of ntoken, when this value equal to config.activeThreshold, \n', '        // redeeming is enabled without checking the circulation of the ntoken\n', '        // When config.activeThreshold modified, it will check whether repo is enabled again according to the circulation\n', '        uint32 threshold;\n', '    }\n', '\n', '    // Configuration\n', '    Config _config;\n', '\n', '    // Redeeming ledger\n', '    mapping(address=>RedeemInfo) _redeemLedger;\n', '\n', '    address _nestLedgerAddress;\n', '    address _nestPriceFacadeAddress;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) override public {\n', '        super.update(nestGovernanceAddress);\n', '\n', '        (\n', '            //address nestTokenAddress\n', '            ,\n', '            //address nestNodeAddress\n', '            ,\n', '            //address nestLedgerAddress\n', '            _nestLedgerAddress, \n', '            //address nestMiningAddress\n', '            ,\n', '            //address ntokenMiningAddress\n', '            ,\n', '            //address nestPriceFacadeAddress\n', '            _nestPriceFacadeAddress, \n', '            //address nestVoteAddress\n', '            ,\n', '            //address nestQueryAddress\n', '            , \n', '            //address nnIncomeAddress\n', '            ,\n', '            //address nTokenControllerAddress\n', '              \n', '        ) = INestGovernance(nestGovernanceAddress).getBuiltinAddress();\n', '    }\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) override external onlyGovernance {\n', '        _config = config;\n', '    }\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() override external view returns (Config memory) {\n', '        return _config;\n', '    }\n', '\n', '    /// @dev Redeem ntokens for ethers\n', '    /// @notice Ethfee will be charged\n', '    /// @param ntokenAddress The address of ntoken\n', '    /// @param amount The amount of ntoken\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    function redeem(address ntokenAddress, uint amount, address paybackAddress) override external payable {\n', '        \n', '        // 1. Load configuration\n', '        Config memory config = _config;\n', '\n', '        // 2. Check redeeming stat\n', '        RedeemInfo storage redeemInfo = _redeemLedger[ntokenAddress];\n', '        RedeemInfo memory ri = redeemInfo;\n', '        if (ri.threshold != config.activeThreshold) {\n', '            // Since nest has started redeeming and has a large circulation, we will not check its circulation separately here\n', '            require(IERC20(ntokenAddress).totalSupply() >= uint(config.activeThreshold) * 10000 ether, "NestRedeeming:!totalSupply");\n', '            redeemInfo.threshold = config.activeThreshold;\n', '        }\n', '\n', '        // 3. Query price\n', '        (\n', '            /* uint latestPriceBlockNumber */, \n', '            uint latestPriceValue,\n', '            /* uint triggeredPriceBlockNumber */,\n', '            /* uint triggeredPriceValue */,\n', '            uint triggeredAvgPrice,\n', '            /* uint triggeredSigma */\n', '        ) = INestPriceFacade(_nestPriceFacadeAddress).latestPriceAndTriggeredPriceInfo { value: msg.value } (ntokenAddress, paybackAddress);\n', '\n', '        // 4. Calculate the number of eth that can be exchanged for redeem\n', '        uint value = amount * 1 ether / latestPriceValue;\n', '\n', '        // 5. Calculate redeem quota\n', '        (uint quota, uint scale) = _quotaOf(config, ri, ntokenAddress);\n', '        redeemInfo.quota = uint128(scale - (quota - amount));\n', '\n', '        // 6. Check the redeeming amount and price deviation\n', '        // This check is not required\n', '        // require(quota >= amount, "NestRedeeming:!amount");\n', '        require(\n', '            latestPriceValue * 10000 <= triggeredAvgPrice * (10000 + uint(config.priceDeviationLimit)) && \n', '            latestPriceValue * 10000 >= triggeredAvgPrice * (10000 - uint(config.priceDeviationLimit)), "NestRedeeming:!price");\n', '        \n', '        // 7. Ntoken transferred to redeem\n', '        address nestLedgerAddress = _nestLedgerAddress;\n', '        TransferHelper.safeTransferFrom(ntokenAddress, msg.sender, nestLedgerAddress, amount);\n', '        \n', '        // 8. Settlement\n', '        // If a token is not a real token, it should also have no funds in the account book and cannot complete the settlement. \n', '        // Therefore, it is no longer necessary to check whether the token is a legal token\n', '        INestLedger(nestLedgerAddress).pay(ntokenAddress, address(0), msg.sender, value);\n', '    }\n', '\n', '    /// @dev Get the current amount available for repurchase\n', '    /// @param ntokenAddress The address of ntoken\n', '    function quotaOf(address ntokenAddress) override public view returns (uint) {\n', '\n', '        // 1. Load configuration\n', '        Config memory config = _config;\n', '\n', '        // 2. Check redeem state\n', '        RedeemInfo storage redeemInfo = _redeemLedger[ntokenAddress];\n', '        RedeemInfo memory ri = redeemInfo;\n', '        if (ri.threshold != config.activeThreshold) {\n', '            // Since nest has started redeeming and has a large circulation, we will not check its circulation separately here\n', '            if (IERC20(ntokenAddress).totalSupply() < uint(config.activeThreshold) * 10000 ether) \n', '            {\n', '                return 0;\n', '            }\n', '        }\n', '\n', '        // 3. Calculate redeem quota\n', '        (uint quota, ) = _quotaOf(config, ri, ntokenAddress);\n', '        return quota;\n', '    }\n', '\n', '    // Calculate redeem quota\n', '    function _quotaOf(Config memory config, RedeemInfo memory ri, address ntokenAddress) private view returns (uint quota, uint scale) {\n', '\n', '        // Calculate redeem quota\n', '        uint quotaPerBlock;\n', '        uint quotaLimit;\n', '        // nest config\n', '        if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '            quotaPerBlock = uint(config.nestPerBlock);\n', '            quotaLimit = uint(config.nestLimit);\n', '        } \n', '        // ntoken config\n', '        else {\n', '            quotaPerBlock = uint(config.ntokenPerBlock);\n', '            quotaLimit = uint(config.ntokenLimit);\n', '        }\n', '        // Calculate\n', '        scale = block.number * quotaPerBlock * 1 ether;\n', '        quota = scale - ri.quota;\n', '        if (quota > quotaLimit * 1 ether) {\n', '            quota = quotaLimit * 1 ether;\n', '        }\n', '    }\n', '}']