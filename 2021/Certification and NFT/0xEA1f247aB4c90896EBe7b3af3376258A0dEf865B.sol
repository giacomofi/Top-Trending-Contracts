['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-10\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'interface NFT {\n', '    \n', '    function getUserData(address _who) external view returns (uint256 userPower, uint256 userEnergy, uint256 lastWithdrawDate, uint256 whitelist);\n', '    \n', '    function updateDate(uint256 _newDate, address _who) external;\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title MoonDayPlus Strategy\n', ' * \n', ' *\n', ' * \n', '          ,\n', '       _/ \\_     *\n', '      <     >\n', "*      /.'.\\                    *\n", '             *    ,-----.,_           ,\n', "               .'`         '.       _/ \\_\n", '    ,         /              `\\    <     >\n', "  _/ \\_      |  ,.---.         \\    /.'.\\\n", " <     >     \\.'    _,'.---.    ;   `   `\n", "  /.'.\\           .'  (-(0)-)   ;\n", "  `   `          /     '---'    |  *\n", '                /    )          |             *\n', '     *         |  .-;           ;        ,\n', "               \\_/ |___,'      ;       _/ \\_ \n", '          ,  |`---.MOON|_       /     <     >\n', " *      _/ \\_ \\         `     /        /.'.\\\n", "       <     > '.          _,'         `   `\n", " MD+    /.'.\\    `'------'`     *   \n", '        `   `\n', ' \n', ' \n', ' */\n', '\n', '\n', 'contract Strategy {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    NFT public nftContract;\n', '\n', '  \n', '\n', '    constructor(NFT _Nft) {\n', '        \n', '        nftContract = _Nft;\n', '\n', '       \n', '    }\n', '\n', '    \n', '    //public one for ui\n', '    function returnPercPub(address investor) public view returns (uint256 _perc){\n', '        uint256  balanceOf = nftContract.balanceOf(investor);\n', '\n', '        if(balanceOf < 1){\n', '            return 0;\n', '        }\n', '\n', '\n', '        (uint256 userPower, uint256 userEnergy, uint256 lastWithdrawDate,) = nftContract.getUserData(investor);\n', '\n', '\n', '        uint256  medianEnergy = userEnergy.div(balanceOf);\n', '\n', '\n', '\n', '        uint256  intervalDiff = (block.timestamp).sub(lastWithdrawDate);\n', '\n', '\n', '        if (intervalDiff.div(1 days) >= medianEnergy){\n', '\n', '            //full userPower\n', '\n', '            _perc = userPower;\n', '\n', '        }else{\n', '            \n', '          \n', '\n', '            _perc = userPower.sub(userPower.mul((medianEnergy.sub(intervalDiff.div(1 days))).div(medianEnergy)));\n', '\n', '\n', '        }\n', '\n', '\n', '        if(_perc.mul(5) > 4166){\n', '            \n', '           _perc = 4166; \n', '        }else{\n', '            \n', '            _perc = _perc.mul(5);\n', '        }\n', '\n', '\n', '        return _perc;\n', '    }\n', '\n', '\n', '    //this one update the user last withdraw\n', '    function returnPerc(address investor) external returns (uint256 _perc){\n', '        \n', '        _perc = returnPercPub(investor);\n', '        \n', '         if( _perc > 0 ){\n', '             \n', '             nftContract.updateDate(block.timestamp, investor);\n', '             \n', '         }\n', '\n', '       return _perc;\n', '\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '}']