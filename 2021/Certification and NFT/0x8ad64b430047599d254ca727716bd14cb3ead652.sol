['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL V3.0\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '// Part: AddressUpgradeable\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: IERC20Mintable\n', '\n', 'interface IERC20Mintable { \n', '    function mint(uint256 amount) external;\n', '    function mint(address beneficiary, uint256 amount) external;\n', '}\n', '\n', '// Part: IERC20Upgradeable\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: Initializable\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// Part: MerkleProofUpgradeable\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProofUpgradeable {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '// Part: SafeMathUpgradeable\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: ContextUpgradeable\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// Part: ReentrancyGuardUpgradeable\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuardUpgradeable is Initializable {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// Part: SafeERC20Upgradeable\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OwnableUpgradeable\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: AdelVAkroVestingSwap.sol\n', '\n', 'contract AdelVAkroVestingSwap is OwnableUpgradeable, ReentrancyGuardUpgradeable {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using SafeMathUpgradeable for uint256;\n', ' \n', '    event AdelSwapped(address indexed receiver, uint256 adelAmount, uint256 akroAmount);\n', '\n', '    //Addresses of affected contracts\n', '    address public akro;\n', '    address public adel;\n', '    address public vakro;\n', '\n', '    //Swap settings\n', '    uint256 public minAmountToSwap = 0;\n', '    uint256 public swapRateNumerator = 0;   //Amount of vAkro for 1 ADEL - 0 by default\n', '    uint256 public swapRateDenominator = 1; //Akro amount = Adel amount * swapRateNumerator / swapRateDenominator\n', '                                            //1 Adel = swapRateNumerator/swapRateDenominator Akro\n', '\n', '    bool public isVestedSwapEnabled;\n', '    bytes32[] public merkleRootsWalletRewards;\n', '    bytes32[] public merkleRootsTotalRewardsVested;\n', '    mapping (address => uint256[2]) public swappedAdelRewards;\n', '\n', '    enum AdelRewardsSource{ WALLET, VESTED }\n', '\n', '    modifier swapEnabled() {\n', '        require(swapRateNumerator != 0, "Swap is disabled");\n', '        _;\n', '    }\n', '\n', '    modifier vestedSwapEnabled() {\n', '        require(isVestedSwapEnabled, "Swap is disabled");\n', '        _;\n', '    }\n', '\n', '    modifier enoughAdel(uint256 _adelAmount) {\n', '        require(_adelAmount > 0 && _adelAmount >= minAmountToSwap, "Insufficient ADEL amount");\n', '        _;\n', '    }\n', '\n', '    function initialize(address _akro, address _adel, address _vakro) virtual public initializer {\n', '        require(_akro != address(0), "Zero address");\n', '        require(_adel != address(0), "Zero address");\n', '        require(_vakro != address(0), "Zero address");\n', '\n', '        __Ownable_init();\n', '\n', '        akro = _akro;\n', '        adel = _adel;\n', '        vakro = _vakro;\n', '\n', '        isVestedSwapEnabled = true;\n', '    }    \n', '\n', '    //Setters for the swap tuning\n', '\n', '    /**\n', '     * @notice Sets the minimum amount of ADEL which can be swapped. 0 by default\n', '     * @param _minAmount Minimum amount in wei (the least decimals)\n', '     */\n', '    function setMinSwapAmount(uint256 _minAmount) external onlyOwner {\n', '        minAmountToSwap = _minAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the rate of ADEL to vAKRO swap: 1 ADEL = _swapRateNumerator/_swapRateDenominator vAKRO\n', '     * @notice By default is set to 0, that means that swap is disabled\n', '     * @param _swapRateNumerator Numerator for Adel converting. Can be set to 0 - that stops the swap.\n', "     * @param _swapRateDenominator Denominator for Adel converting. Can't be set to 0\n", '     */\n', '    function setSwapRate(uint256 _swapRateNumerator, uint256 _swapRateDenominator) external onlyOwner {\n', '        require(_swapRateDenominator > 0, "Incorrect value");\n', '        swapRateNumerator = _swapRateNumerator;\n', '        swapRateDenominator = _swapRateDenominator;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the Merkle roots for the rewards (on wallet)\n', '     * @param _merkleRootsWalletRewards Array of hashes for on-wallet rewards\n', '     */\n', '    function setMerkleWalletRewardsRoots(bytes32[] memory _merkleRootsWalletRewards) external onlyOwner {\n', '        require(_merkleRootsWalletRewards.length > 0, "Incorrect data");\n', '        \n', '        if (merkleRootsWalletRewards.length > 0) {\n', '            delete merkleRootsWalletRewards;\n', '        }\n', '        merkleRootsWalletRewards = new bytes32[](_merkleRootsWalletRewards.length);\n', '        merkleRootsWalletRewards = _merkleRootsWalletRewards;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the Merkle roots for the rewards (vested)\n', '     * @param _merkleRootsTotalRewardsVested Array of hashes for vested rewards\n', '     */\n', '    function setMerkleVestedRewardsRoots(bytes32[] memory _merkleRootsTotalRewardsVested) external onlyOwner {\n', '        require(_merkleRootsTotalRewardsVested.length > 0, "Incorrect data");\n', '        \n', '        if (merkleRootsTotalRewardsVested.length > 0) {\n', '            delete merkleRootsTotalRewardsVested;\n', '        }\n', '\n', '        merkleRootsTotalRewardsVested = new bytes32[](_merkleRootsTotalRewardsVested.length);\n', '        merkleRootsTotalRewardsVested = _merkleRootsTotalRewardsVested;\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraws all ADEL collected on a Swap contract\n', '     * @param _recepient Recepient of ADEL.\n', '     */\n', '    function withdrawAdel(address _recepient) external onlyOwner {\n', '        require(_recepient != address(0), "Zero address");\n', '        uint256 _adelAmount = IERC20Upgradeable(adel).balanceOf(address(this));\n', '        require(_adelAmount > 0, "Nothing to withdraw");\n', '        IERC20Upgradeable(adel).safeTransfer(_recepient, _adelAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows to swap ADEL token from vesting rewards from the wallet for vAKRO\n', '     * @param _adelAmount Amout of ADEL vested rewards the user approves for the swap.\n', '     * @param merkleRootIndex Index of a merkle root to be used for calculations\n', '     * @param adelAllowedToSwap Maximum ADEL allowed for a user to swap\n', '     * @param merkleProofs Array of consiquent merkle hashes\n', '     */\n', '    function swapFromAdelWalletRewards(\n', '        uint256 _adelAmount,\n', '        uint256 merkleRootIndex, \n', '        uint256 adelAllowedToSwap,\n', '        bytes32[] memory merkleProofs\n', '    ) \n', '        external nonReentrant swapEnabled vestedSwapEnabled enoughAdel(_adelAmount)\n', '    {\n', '        require(verifyWalletRewardsMerkleProofs(_msgSender(), merkleRootIndex, adelAllowedToSwap, merkleProofs), "Merkle proofs not verified");\n', '\n', '        IERC20Upgradeable(adel).safeTransferFrom(_msgSender(), address(this), _adelAmount);\n', '\n', '        swapRewards(_adelAmount, adelAllowedToSwap, AdelRewardsSource.WALLET);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows to swap ADEL token from not sent vested rewards\n', '     * @param merkleWalletRootIndex Index of a merkle root to be used for calculations (for rewards on wallet)\n', '     * @param adelWalletAllowedToSwap Maximum ADEL allowed for a user to swap (for rewards on wallet)\n', '     * @param merkleWalletProofs Array of consiquent merkle hashes (for rewards on wallet)\n', '     * @param merkleTotalRootIndex Index of a merkle root to be used for calculations\n', '     * @param adelTotalAllowedToSwap Maximum ADEL avested rewards llowed for a user to swap\n', '     * @param merkleTotalProofs Array of consiquent merkle hashes\n', '     */\n', '    function swapFromAdelVestedRewards(\n', '        uint256 merkleWalletRootIndex, \n', '        uint256 adelWalletAllowedToSwap,\n', '        bytes32[] memory merkleWalletProofs,\n', '        uint256 merkleTotalRootIndex, \n', '        uint256 adelTotalAllowedToSwap,\n', '        bytes32[] memory merkleTotalProofs\n', '    ) \n', '        external nonReentrant swapEnabled vestedSwapEnabled\n', '    {\n', '        require(verifyWalletRewardsMerkleProofs(_msgSender(),\n', '                                                merkleWalletRootIndex,\n', '                                                adelWalletAllowedToSwap,\n', '                                                merkleWalletProofs), "Merkle proofs not verified");\n', '        require(verifyVestedRewardsMerkleProofs(_msgSender(),\n', '                                                merkleTotalRootIndex,\n', '                                                adelTotalAllowedToSwap,\n', '                                                merkleTotalProofs), "Merkle proofs not verified");\n', '\n', '        // No ADEL transfers here\n', '        uint256 adelAllowedToSwap = adelTotalAllowedToSwap.sub(adelWalletAllowedToSwap);\n', '        swapRewards(adelAllowedToSwap, adelAllowedToSwap, AdelRewardsSource.VESTED);\n', '    }\n', '\n', '    /**\n', '     * @notice Toggles vested swap flag from active to inactive or vice versa\n', '     */\n', '    function toggleVestedSwap() public onlyOwner {\n', '        isVestedSwapEnabled = !isVestedSwapEnabled;\n', '    }\n', '\n', '    /**\n', '     * @notice Verifies rewards merkle proofs of user to be elligible for swap\n', '     * @param _account Address of a user\n', '     * @param _merkleRootIndex Index of a merkle root to be used for calculations\n', '     * @param _adelAllowedToSwap Maximum ADEL allowed for a user to swap\n', '     * @param _merkleProofs Array of consiquent merkle hashes\n', '     */\n', '    function verifyWalletRewardsMerkleProofs(\n', '        address _account,\n', '        uint256 _merkleRootIndex,\n', '        uint256 _adelAllowedToSwap,\n', '        bytes32[] memory _merkleProofs) virtual public view returns(bool)\n', '    {\n', '        require(_merkleProofs.length > 0, "No Merkle proofs");\n', '        require(_merkleRootIndex < merkleRootsWalletRewards.length, "Merkle roots are not set");\n', '\n', '        bytes32 node = keccak256(abi.encodePacked(_account, _adelAllowedToSwap));\n', '        return MerkleProofUpgradeable.verify(_merkleProofs, merkleRootsWalletRewards[_merkleRootIndex], node);\n', '    }\n', '\n', '    /**\n', '     * @notice Verifies vested rewards merkle proofs of user to be elligible for swap\n', '     * @param _account Address of a user\n', '     * @param _merkleRootIndex Index of a merkle root to be used for calculations\n', '     * @param _adelAllowedToSwap Maximum ADEL allowed for a user to swap\n', '     * @param _merkleProofs Array of consiquent merkle hashes\n', '     */\n', '    function verifyVestedRewardsMerkleProofs(\n', '        address _account,\n', '        uint256 _merkleRootIndex,\n', '        uint256 _adelAllowedToSwap,\n', '        bytes32[] memory _merkleProofs) virtual public view returns(bool)\n', '    {\n', '        require(_merkleProofs.length > 0, "No Merkle proofs");\n', '        require(_merkleRootIndex < merkleRootsTotalRewardsVested.length, "Merkle roots are not set");\n', '\n', '        bytes32 node = keccak256(abi.encodePacked(_account, _adelAllowedToSwap));\n', '        return MerkleProofUpgradeable.verify(_merkleProofs, merkleRootsTotalRewardsVested[_merkleRootIndex], node);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the actual amount of ADEL vesting rewards swapped by a user\n', '     * @param _account Address of a user\n', '     */\n', '    function adelRewardsSwapped(address _account) public view returns (uint256)\n', '    {\n', '        return swappedAdelRewards[_account][0] + swappedAdelRewards[_account][1];\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to mint vAkro for ADEL from vesting rewards\n', '     * @notice Function lays on the fact, that ADEL is already on the contract\n', '     * @param _adelAmount Amout of ADEL the contract needs to swap.\n', '     * @param _adelAllowedToSwap Maximum ADEL vested rewards from any source allowed to swap for user.\n', '     *                           Any extra ADEL which exceeds this value is sent to the user\n', '     * @param _index Number of the source of vested rewards ADEL (wallet, vested unlock)\n', '     */\n', '    function swapRewards(uint256 _adelAmount, uint256 _adelAllowedToSwap, AdelRewardsSource _index) internal\n', '    {\n', '        uint256 newAmount = swappedAdelRewards[_msgSender()][uint128(_index)].add(_adelAmount);\n', '\n', '        require( newAmount <= _adelAllowedToSwap, "Limit exceeded");\n', '        require(_adelAmount != 0 && _adelAmount >= minAmountToSwap, "Not enough ADEL");\n', '\n', '        uint256 vAkroAmount = _adelAmount.mul(swapRateNumerator).div(swapRateDenominator);\n', '        \n', '        swappedAdelRewards[_msgSender()][uint128(_index)] = newAmount;\n', '        IERC20Mintable(vakro).mint(address(this), vAkroAmount);\n', '        IERC20Upgradeable(vakro).transfer(_msgSender(), vAkroAmount);\n', '\n', '        emit AdelSwapped(_msgSender(), _adelAmount, vAkroAmount);\n', '    }\n', '}']