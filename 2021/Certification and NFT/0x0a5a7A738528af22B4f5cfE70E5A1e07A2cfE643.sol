['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', '// SPDX-License-Identifier: Apache-2.0.\n', 'pragma solidity ^0.6.11;\n', '\n', 'import "MainDispatcher.sol";\n', 'import "PerpetualStorage.sol";\n', '\n', 'contract StarkPerpetual is MainDispatcher, PerpetualStorage {\n', '    string public constant VERSION = "1.0.0";\n', '\n', '    // Salt for a 8 bit unique spread of all relevant selectors. Pre-caclulated.\n', '    // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\n', '    uint256 constant MAGIC_SALT = 15691;\n', '    uint256 constant IDX_MAP_0 = 0x3000000002000200000000000220022100000102300010000030103200010000;\n', '    uint256 constant IDX_MAP_1 = 0x1410000000002200200000002003321010000210132000020000;\n', '    uint256 constant IDX_MAP_2 = 0x3031200400000004003320020000000012022120020030000003000020;\n', '    uint256 constant IDX_MAP_3 = 0x100200003000100000000000000320000410000003000030000101210000000;\n', '    // ---------- End of auto-generated code. ----------\n', '\n', '    function getNumSubcontracts() internal pure override returns (uint256) {\n', '        return 4;\n', '    }\n', '\n', '    function magicSalt() internal pure override returns(uint256) {\n', '        return MAGIC_SALT;\n', '    }\n', '\n', '    function handlerMapSection(uint256 section) internal view override returns(uint256) {\n', '        if(section == 0) {\n', '            return IDX_MAP_0;\n', '        }\n', '        else if(section == 1) {\n', '            return IDX_MAP_1;\n', '        }\n', '        else if(section == 2) {\n', '            return IDX_MAP_2;\n', '        }\n', '        else if(section == 3) {\n', '            return IDX_MAP_3;\n', '        }\n', '        revert("BAD_IDX_MAP_SECTION");\n', '    }\n', '\n', '    function expectedIdByIndex(uint256 index)\n', '        internal pure override returns (string memory id) {\n', '        if (index == 1){\n', '            id = "StarkWare_AllVerifiers_2020_1";\n', '        } else if (index == 2){\n', '            id = "StarkWare_PerpetualTokensAndRamping_2020_1";\n', '        } else if (index == 3){\n', '            id = "StarkWare_PerpetualState_2020_1";\n', '        } else if (index == 4){\n', '            id = "StarkWare_PerpetualForcedActions_2020_1";\n', '        } else {\n', '            revert("UNEXPECTED_INDEX");\n', '        }\n', '    }\n', '\n', '    function initializationSentinel() internal view override {\n', '        string memory REVERT_MSG = "INITIALIZATION_BLOCKED";\n', '        // This initializer sets state etc. It must not be applied twice.\n', '        // I.e. it can run only when the state is still empty.\n', '        require(int(sharedStateHash) == 0, REVERT_MSG);\n', '        require(int(globalConfigurationHash) == 0, REVERT_MSG);\n', '        require(systemAssetType == 0, REVERT_MSG);\n', '    }\n', '}']