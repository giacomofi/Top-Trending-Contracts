['// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract Splitter {\n', '    mapping (address => uint) splits;\n', '    mapping (address => uint256) public balances;\n', '    address payable[] addresses;\n', '\n', '    constructor(address payable[] memory _addresses, uint[] memory _splits) {\n', '        require(_addresses.length == _splits.length);\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            addresses.push(_addresses[i]);\n', '            splits[_addresses[i]] = _splits[i];\n', '        }\n', '    }\n', '\n', '    receive() external payable {\n', '        uint val = msg.value / 1000;    \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            address addr = addresses[i];\n', '            balances[addr] += val * splits[addr];\n', '        }\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(splits[msg.sender] != 0, "Invalid address");\n', '        uint balance = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        (bool success, ) = msg.sender.call{value: balance}("");\n', '        require(success, "Transfer failed");\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 300\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']