['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-05\n', '*/\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '// 2021 (c) Cryptollama\n', 'pragma solidity >=0.4.0 <0.7.0;\n', '\n', 'interface IWool {\n', '    \n', '    function mint(address who, uint amount) external;\n', '    function burnFrom(address who, uint amount) external;\n', '    function balanceOf(address tokenOwner) external returns (uint256);\n', '    \n', '}\n', '\n', 'contract Token {\n', '    \n', '    address private wool = 0x0000000000000000000000000000000000000000;\n', '    address private exchange = 0x0000000000000000000000000000000000000000;\n', '    address private deployer = 0x0000000000000000000000000000000000000000;\n', '\n', '    string public constant name = "Llama token";\n', '    string public constant symbol = "LLAMA";\n', '    uint8 public constant decimals = 0;\n', '    uint256 public totalSupply = 100000000;\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    mapping(address => uint256) public checkpointTimestamp;\n', '    mapping(address => uint256) public checkpointAmount;\n', '    mapping(address => uint256) public checkpointUnclaimedReward;\n', '    mapping(address => uint256) public checkpointWolfTimer;\n', '    \n', '    uint256 public wolfTimer = 0;\n', '    uint256 public lastWolfTimestamp = now + 604800;\n', '    uint256 public lastaccountedWolfTimestamp = now;\n', '    uint256 public llamasBought = 0;\n', '    bool public isWolf = false;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor() public{\n', '        balances[msg.sender] = totalSupply;\n', '        deployer = msg.sender;\n', '        checkout(msg.sender);\n', '    }\n', '    \n', '    function setExchange(address exchangeAddress) public {\n', '        require(msg.sender == deployer);\n', '        require(exchange == 0x0000000000000000000000000000000000000000);\n', '        exchange = exchangeAddress;\n', '    }\n', '    \n', '    function setWool(address woolAddress) public {\n', '        require(msg.sender == deployer);\n', '        require(wool == 0x0000000000000000000000000000000000000000);\n', '        wool = woolAddress;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        if (msg.sender == exchange) {\n', '            llamasBought += numTokens;\n', '        }\n', '        checkout(msg.sender);\n', '        checkout(receiver);\n', '        checkWolf();\n', '        return true;\n', '    }\n', '\n', '    function approve(address delegate, uint numTokens) public returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        if (owner == exchange) {\n', '            llamasBought += numTokens;\n', '        }\n', '        checkout(owner);\n', '        checkout(buyer);\n', '        checkWolf();\n', '        return true;\n', '    }\n', '    \n', '    function checkout(address who) private {\n', '        uint256 pendingReward = calculatePendingReward(who);\n', '        checkpointUnclaimedReward[who] += pendingReward;\n', '        checkpointTimestamp[who] = now;\n', '        checkpointWolfTimer[who] = wolfTimer;\n', '        checkpointAmount[who] = balances[who];\n', '        \n', '    }\n', '    \n', '    function calculatePendingReward(address who) public view returns (uint256) {\n', '        uint256 timer = now.add(checkpointWolfTimer[who]);\n', '        uint256 timerDecrement = checkpointTimestamp[who].add(wolfTimer);\n', '        if (timer < timerDecrement) {\n', '            return 0;\n', '        }\n', '        return checkpointAmount[who].mul(timer.sub(timerDecrement)).mul(16530000000);\n', '    }\n', '    \n', '    function claim() public {\n', '        require(!isWolf);\n', '        uint256 pendingReward = calculatePendingReward(msg.sender);\n', '        IWool(wool).mint(msg.sender, pendingReward.add(checkpointUnclaimedReward[msg.sender]));\n', '        checkout(msg.sender);\n', '        checkpointUnclaimedReward[msg.sender] = 0;\n', '    }\n', '    \n', '    function breed(uint256 amount) public {\n', '        require (IWool(wool).balanceOf(msg.sender).div(10000000000000000000) >= amount);\n', '        balances[msg.sender] += amount;\n', '        totalSupply += amount;\n', '        IWool(wool).burnFrom(msg.sender, amount.mul(10000000000000000000));\n', '        checkout(msg.sender);\n', '    }\n', '    \n', '    function checkWolf() private {\n', '        if (now > lastWolfTimestamp) {\n', '            lastWolfTimestamp = lastWolfTimestamp + 604800;\n', '            if (llamasBought < 100000) {\n', '                isWolf = true;\n', '                lastaccountedWolfTimestamp = lastWolfTimestamp - 604800;\n', '            } else {\n', '                llamasBought = 0;\n', '            }\n', '        }\n', '        if (isWolf) {\n', '            wolfTimer += now - lastaccountedWolfTimestamp;\n', '            lastaccountedWolfTimestamp = now;\n', '            if (llamasBought > 100000) {\n', '                isWolf = false;\n', '                llamasBought = 0;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '}']