['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-02\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/IDigiNFT.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', 'interface IDigiNFT {\n', '    function mint(\n', '        address wallet,\n', '        string calldata cardName,\n', '        bool cardPhysical\n', '    ) external returns (uint256);\n', '\n', '    function cardName(uint256 tokenId) external view returns (string memory);\n', '    function cardPhysical(uint256 tokenId) external view returns (bool);\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '}\n', '\n', '// File: contracts/DigiAuction.sol\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DigiAuction is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint8;\n', '\n', '    uint256 BIGNUMBER = 10 ** 18;\n', '\n', '    /******************\n', '    CONFIG\n', '    ******************/\n', '    uint256 public purchaseFee = 500;   // 5%\n', '    uint256 public digiAmountRequired = 1000 * (BIGNUMBER);\n', '\n', '    /******************\n', '    EVENTS\n', '    ******************/\n', '    event CreatedAuction(uint256 auctionId, address indexed wallet, uint256 tokenId, uint256 created);\n', '    event CanceledAuction(uint256 auctionId, address indexed wallet, uint256 tokenId, uint256 created);\n', '    event NewHighestOffer(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\n', '    event DirectBuyed(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\n', '    event Claimed(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\n', '    event Log(uint256 data);\n', '\n', '    /******************\n', '    INTERNAL ACCOUNTING\n', '    *******************/\n', '    address public stakeERC20;\n', '    address public digiERC271;\n', '    address public stableERC20;\n', '    address[] public feesDestinators;\n', '    uint256[] public feesPercentages;\n', '\n', '    uint256 public auctionCount = 0;\n', '\n', '    mapping (uint256 => Auction) public auctions;\n', '    mapping (uint256 => bool) public claimedAuctions;\n', '    mapping (uint256 => Offer) public highestOffers;\n', '    mapping (uint256 => uint256) public lastAuctionByToken;\n', '\n', '    struct Auction {\n', '        uint256 tokenId;\n', '        address owner;\n', '        uint256 minPrice;\n', '        uint256 fixedPrice;\n', '        bool buyed;\n', '        uint256 endDate;\n', '    }\n', '\n', '    struct Offer {\n', '        address buyer;\n', '        uint256 offer;\n', '        uint256 date;\n', '    }\n', '\n', '    /******************\n', '    PUBLIC FUNCTIONS\n', '    *******************/\n', '    constructor(\n', '        address _stakeERC20,\n', '        address _digiERC271,\n', '        address _stableERC20\n', '    )\n', '        public\n', '    {\n', '        require(address(_stakeERC20) != address(0)); \n', '        require(address(_digiERC271) != address(0));\n', '        require(address(_stableERC20) != address(0));\n', '\n', '        stakeERC20 = _stakeERC20;\n', '        digiERC271 = _digiERC271;\n', '        stableERC20 = _stableERC20;\n', '    }\n', '\n', '    /**\n', '    * @dev User deposits DIGI NFT for auction.\n', '    */\n', '    function createAuction(\n', '        uint256 _tokenId,\n', '        uint256 _minPrice,\n', '        uint256 _fixedPrice,\n', '        uint256 _duration\n', '    )\n', '        public\n', '        returns (uint256)\n', '    {\n', '        IDigiNFT(digiERC271).transferFrom(msg.sender, address(this), _tokenId);\n', '\n', '        uint256 timeNow = _getTime();\n', '        uint256 newAuction = auctionCount;\n', '        auctionCount += 1;\n', '\n', '        auctions[newAuction] = Auction({\n', '            tokenId: _tokenId,\n', '            owner: msg.sender,\n', '            minPrice: _minPrice,\n', '            fixedPrice: _fixedPrice,\n', '            buyed: false,\n', '            endDate: timeNow + _duration\n', '        });\n', '        lastAuctionByToken[_tokenId] = newAuction;\n', '\n', '        emit CreatedAuction(newAuction, msg.sender, _tokenId, timeNow);\n', '\n', '        return newAuction;\n', '    }\n', '\n', '    /**\n', '    * @dev User makes an offer for the DIGI NFT.\n', '    */\n', '    function participateAuction(uint256 _auctionId, uint256 _amount)\n', '        public\n', '        nonReentrant()\n', '        requiredAmount(msg.sender, digiAmountRequired)\n', '        inProgress(_auctionId)\n', '        minPrice(_auctionId, _amount)\n', '        newHighestOffer(_auctionId, _amount)\n', '    {\n', '        IERC20(stableERC20).transferFrom(msg.sender, address(this), _amount);\n', '\n', '        _returnPreviousOffer(_auctionId);\n', '\n', '        uint256 timeNow = _getTime();\n', '        highestOffers[_auctionId] = Offer({\n', '            buyer: msg.sender,\n', '            offer: _amount,\n', '            date: timeNow\n', '        });\n', '\n', '        emit NewHighestOffer(_auctionId, msg.sender, _amount, timeNow);\n', '    }\n', '\n', '    /**\n', '    * @dev User directly buyes the DIGI NFT at fixed price.\n', '    */\n', '    function directBuy(uint256 _auctionId)\n', '        public\n', '        notClaimed(_auctionId)\n', '        inProgress(_auctionId)\n', '    {\n', "        require(IERC20(stableERC20).balanceOf(msg.sender) > auctions[_auctionId].fixedPrice, 'DigiAuction: User does not have enough balance');\n", "        require(auctions[_auctionId].fixedPrice > 0, 'DigiAuction: Direct buy not available');\n", '        \n', '        uint amount = auctions[_auctionId].fixedPrice;\n', '        uint256 feeAmount = amount.mul(purchaseFee).div(10000);\n', '        uint256 amountAfterFee = amount.sub(feeAmount);\n', '\n', '        IERC20(stableERC20).transferFrom(msg.sender, address(this), feeAmount);\n', '        IERC20(stableERC20).transferFrom(msg.sender, auctions[_auctionId].owner, amountAfterFee);\n', '        IDigiNFT(digiERC271).transferFrom(address(this), msg.sender, auctions[_auctionId].tokenId);\n', '        \n', '        uint256 timeNow = _getTime();\n', '        auctions[_auctionId].buyed = true;\n', '\n', '        claimedAuctions[_auctionId] = true;\n', '\n', '        _returnPreviousOffer(_auctionId);\n', '\n', '        emit DirectBuyed(_auctionId, msg.sender, auctions[_auctionId].fixedPrice, timeNow);\n', '    }\n', '\n', '    /**\n', '    * @dev Winner user claims DIGI NFT for ended auction.\n', '    */\n', '    function claim(uint256 _auctionId)\n', '        public\n', '        ended(_auctionId)\n', '        notClaimed(_auctionId)\n', '    {\n', '        require(highestOffers[_auctionId].buyer != address(0x0), "DigiAuction: Ended without winner");\n', '\n', '        uint256 timeNow = _getTime();\n', '        uint256 amount = highestOffers[_auctionId].offer;\n', '        uint256 feeAmount = amount.mul(purchaseFee).div(10000);\n', '        uint256 amountAfterFee = amount.sub(feeAmount);\n', '\n', '        IERC20(stableERC20).transfer(auctions[_auctionId].owner, amountAfterFee);\n', '        IDigiNFT(digiERC271).transferFrom(address(this), highestOffers[_auctionId].buyer, auctions[_auctionId].tokenId);\n', '\n', '        claimedAuctions[_auctionId] = true;\n', '\n', '        emit Claimed(_auctionId, highestOffers[_auctionId].buyer, amount, timeNow);\n', '    }\n', '\n', '    /**\n', '    * @dev Send all the acumulated fees for one token to the fee destinators.\n', '    */\n', '    function withdrawAcumulatedFees() public {\n', '        uint256 total = IERC20(stableERC20).balanceOf(address(this));\n', '        \n', '        for (uint8 i = 0; i < feesDestinators.length; i++) {\n', '            IERC20(stableERC20).transfer(\n', '                feesDestinators[i],\n', '                total.mul(feesPercentages[i]).div(100)\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Cancel auction and returns token.\n', '    */\n', '    function cancel(uint256 _auctionId)\n', '        public\n', '        ended(_auctionId)\n', '    {\n', "        require(auctions[_auctionId].owner == msg.sender, 'DigiAuction: User is not the token owner');\n", '        require(highestOffers[_auctionId].buyer == address(0x0), "DigiAuction: Ended but has winner");\n', '\n', '        uint256 timeNow = _getTime();\n', '\n', '        auctions[_auctionId].endDate = timeNow;\n', '\n', '        IDigiNFT(digiERC271).transferFrom(\n', '            address(this),\n', '            auctions[_auctionId].owner,\n', '            auctions[_auctionId].tokenId\n', '        );\n', '\n', '        emit CanceledAuction(_auctionId, msg.sender, auctions[_auctionId].tokenId, timeNow);\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the purchaseFee for every withdraw.\n', '    */\n', '    function setFee(uint256 _purchaseFee) public onlyOwner() {\n', '        require(_purchaseFee <= 3000, "DigiAuction: Max fee 30%");\n', '        purchaseFee = _purchaseFee;\n', '    }\n', '\n', '    /**\n', "    * @dev Configure how to distribute the fees for user's withdraws.\n", '    */\n', '    function setFeesDestinatorsWithPercentages(\n', '        address[] memory _destinators,\n', '        uint256[] memory _percentages\n', '    )\n', '        public\n', '        onlyOwner()\n', '    {\n', '        require(_destinators.length == _percentages.length, "DigiAuction: Destinators and percentageslenght are not equals");\n', '\n', '        uint256 total = 0;\n', '        for (uint8 i = 0; i < _percentages.length; i++) {\n', '            total += _percentages[i];\n', '        }\n', '        require(total == 100, "DigiAuction: Percentages sum must be 100");\n', '\n', '        feesDestinators = _destinators;\n', '        feesPercentages = _percentages;\n', '    }\n', '\n', '    /******************\n', '    PRIVATE FUNCTIONS\n', '    *******************/\n', '    function _returnPreviousOffer(uint256 _auctionId) internal {\n', '        Offer memory currentOffer = highestOffers[_auctionId];\n', '        if (currentOffer.offer > 0) {\n', '            IERC20(stableERC20).transfer(currentOffer.buyer, currentOffer.offer);\n', '        }\n', '    }\n', '\n', '    function _getTime() internal view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /******************\n', '    MODIFIERS\n', '    *******************/\n', '    modifier requiredAmount(address _wallet, uint256 _amount) {\n', '        require(\n', '            IERC20(stakeERC20).balanceOf(_wallet) > _amount,\n', "            'DigiAuction: User needs more token balance in order to do this action'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier newHighestOffer(uint256 _auctionId, uint256 _amount) {\n', '        require(\n', '            _amount > highestOffers[_auctionId].offer,\n', "            'DigiAuction: Amount must be higher'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier minPrice(uint256 _auctionId, uint256 _amount) {\n', '        require(\n', '            _amount >= auctions[_auctionId].minPrice,\n', "            'DigiAuction: Insufficient offer amount for this auction'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier inProgress(uint256 _auctionId) {\n', '        require(\n', '            (auctions[_auctionId].endDate > _getTime()) && auctions[_auctionId].buyed == false,\n', "            'DigiAuction: Auction closed'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier ended(uint256 _auctionId) {\n', '        require(\n', '            (_getTime() > auctions[_auctionId].endDate) && auctions[_auctionId].buyed == false,\n', "            'DigiAuction: Auction not closed'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier notClaimed(uint256 _auctionId) {\n', '        require(\n', '            (claimedAuctions[_auctionId] == false),\n', "            'DigiAuction: Already claimed'\n", '        );\n', '        _;\n', '    }\n', '}']