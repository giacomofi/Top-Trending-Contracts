['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/IAlohaNFT.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'interface IAlohaNFT {\n', '    function awardItem(\n', '        address wallet,\n', '        uint256 tokenImage,\n', '        uint256 tokenRarity,\n', '        uint256 tokenBackground\n', '    ) external returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '    function tokenRarity(uint256 tokenId) external returns (uint256);\n', '    function tokenImage(uint256 tokenId) external returns (uint256);\n', '    function tokenBackground(uint256 tokenId) external returns (uint256);\n', '}\n', '\n', '// File: contracts/AlohaStaking.sol\n', '\n', 'pragma solidity 0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AlohaStakingV2 is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint8;\n', '\n', '    /* Events */\n', '    event SettedPool(\n', '        uint256 indexed alohaAmount,\n', '        uint256 indexed erc20Amount,\n', '        uint256 duration,\n', '        uint256 rarity,\n', '        uint256 date\n', '    );\n', '    event Staked(\n', '        address indexed wallet,\n', '        address indexed erc20Address,\n', '        uint256 rarity,\n', '        uint256 endDate,\n', '        uint256 tokenImage,\n', '        uint256 tokenBackground,\n', '        uint256 alohaAmount,\n', '        uint256 erc20Amount,\n', '        uint256 date\n', '    );\n', '    event Withdrawal(\n', '        address indexed wallet,\n', '        address indexed erc20Address,\n', '        uint256 rarity,\n', '        uint256 originalAlohaAmount,\n', '        uint256 originalErc20Amount,\n', '        uint256 receivedAlohaAmount,\n', '        uint256 receivedErc20Amount,\n', '        uint256 erc721Id,\n', '        uint256 date\n', '    );\n', '    event Transfered(\n', '        address indexed wallet,\n', '        address indexed erc20Address,\n', '        uint256 amount,\n', '        uint256 date\n', '    );\n', '\n', '    /* Vars */\n', '    uint256 public fee;\n', '    address public alohaERC20;\n', '    address public alohaERC721;\n', '    uint256 public backgrounds;\n', '    address[] public feesDestinators;\n', '    uint256[] public feesPercentages;\n', '\n', '    struct Pool {\n', '        uint256 alohaAmount;\n', '        uint256 erc20Amount; // 0 when is not a PairPool\n', '        uint256 duration;\n', '        uint256 rarity;\n', '    }\n', '    struct Stake {\n', '        uint256 endDate;\n', '        uint256 tokenImage;\n', '        uint256 tokenBackground;\n', '        uint256 alohaAmount;\n', '        uint256 erc20Amount;  // 0 when is not a PairPool\n', '    }\n', '\n', '    // image => rarity\n', '    mapping (uint256 => uint256) public rewardsMap;\n', '    // rarity => [image]\n', '    mapping (uint256 => uint256[]) public rarityByImages;\n', '    // rarity => totalImages\n', '    mapping (uint256 => uint256) public rarityByImagesTotal;\n', '    // image => rarity => limit\n', '    mapping (uint256 => mapping(uint256 => uint256)) public limitByRarityAndImage;\n', '    // image => rarity => totalTokens\n', '    mapping (uint256 => mapping(uint256 => uint256)) public totalTokensByRarityAndImage;\n', '    // erc20Address => rarity => Pool\n', '    mapping (address => mapping(uint256 => Pool)) public poolsMap;\n', '    // userAddress => erc20Address => rarity => Stake \n', '    mapping (address => mapping(address => mapping(uint256 => Stake))) public stakingsMap;\n', '    // erc20Address => totalStaked \n', '    mapping (address => uint256) public totalStaked;\n', '\n', '    /* Modifiers */\n', '    modifier imageNotExists(uint256 _image) {\n', '        require(\n', '            !_existsReward(_image),\n', '            "AlohaStaking: Image for reward already exists"\n', '        );\n', '        _;\n', '    }\n', '    modifier validRarity(uint256 _rarity) {\n', '        require(\n', '            _rarity >= 1 && _rarity <= 3,\n', '            "AlohaStaking: Rarity must be 1, 2 or 3"\n', '        );\n', '        _;\n', '    }\n', '    modifier poolExists(address _erc20, uint256 _rarity) {\n', '        require(\n', '            _existsPool(_erc20, _rarity),\n', '            "AlohaStaking: Pool for ERC20 Token and rarity not exists"\n', '        );\n', '        _;\n', '    }\n', '    modifier rarityAvailable(uint256 _rarity) {\n', '        require(\n', '            !(rarityByImagesTotal[_rarity] == 0),\n', '            "AlohaStaking: Rarity not available"\n', '        );\n', '        _;\n', '    }\n', '    modifier addressNotInStake(address _userAddress, address _erc20, uint256 _rarity) {\n', '        require(\n', '            (stakingsMap[msg.sender][_erc20][_rarity].endDate == 0),\n', '            "AlohaStaking: Address already stakes in this pool"\n', '        );\n', '        _;\n', '    }\n', '    modifier addressInStake(address _userAddress, address _erc20, uint256 _rarity) {\n', '        require(\n', '            !(stakingsMap[msg.sender][_erc20][_rarity].endDate == 0),\n', '            "AlohaStaking: Address not stakes in this pool"\n', '        );\n', '        _;\n', '    }\n', '    modifier stakeEnded(address _userAddress, address _erc20, uint256 _rarity) {\n', '        require(\n', '            (_getTime() > stakingsMap[msg.sender][_erc20][_rarity].endDate),\n', '            "AlohaStaking: Stake duration has not ended yet"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /* Public Functions */\n', '    constructor(\n', '        address _alohaERC20,\n', '        address _alohaERC721,\n', '        uint256 _backgrounds,\n', '        uint256 _fee\n', '    ) public {\n', '        require(address(_alohaERC20) != address(0)); \n', '        require(address(_alohaERC721) != address(0));\n', '\n', '        alohaERC20 = _alohaERC20;\n', '        alohaERC721 = _alohaERC721;\n', '        backgrounds = _backgrounds;\n', '        fee = _fee;\n', '    }\n', '\n', '    /**\n', '    * @dev Stake ALOHA to get a random token of the selected rarity\n', '    */\n', '    function simpleStake(\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '    {\n', '        pairStake(alohaERC20, _tokenRarity);\n', '    }\n', '\n', '    /**\n', '    * @dev Stake ALOHA/TOKEN to get a random token of the selected rarity\n', '    */\n', '    function pairStake(\n', '        address _erc20Token,\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '        rarityAvailable(_tokenRarity)\n', '        poolExists(_erc20Token, _tokenRarity)\n', '        addressNotInStake(msg.sender, _erc20Token, _tokenRarity)\n', '    {\n', '        uint256 randomImage = _getRandomImage(_tokenRarity);\n', '        uint256 _endDate = _getTime() + poolsMap[_erc20Token][_tokenRarity].duration;\n', '        uint256 randomBackground = _randomB(backgrounds);\n', '\n', '        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\n', '        uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\n', '\n', '        _transferStake(msg.sender, alohaERC20, alohaAmount);\n', '        totalStaked[alohaERC20] += alohaAmount;\n', '        \n', '        if (_erc20Token != alohaERC20) {\n', '            _transferStake(msg.sender, _erc20Token, erc20Amount);\n', '            totalStaked[_erc20Token] += erc20Amount;\n', '        }\n', '\n', '        stakingsMap[msg.sender][_erc20Token][_tokenRarity] = Stake({\n', '            endDate: _endDate,\n', '            tokenImage: randomImage,\n', '            tokenBackground: randomBackground,\n', '            alohaAmount: alohaAmount,\n', '            erc20Amount: erc20Amount\n', '        });\n', '\n', '        emit Staked(\n', '            msg.sender,\n', '            _erc20Token,\n', '            _tokenRarity,\n', '            _endDate,\n', '            randomImage,\n', '            randomBackground,\n', '            alohaAmount,\n', '            erc20Amount,\n', '            _getTime()\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ALOHA and claim your random NFT for the selected rarity\n', '    */\n', '    function simpleWithdraw(\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '    {\n', '        pairWithdraw(alohaERC20, _tokenRarity);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ALOHA/TOKEN and claim your random NFT for the selected rarity\n', '    */\n', '    function pairWithdraw(\n', '        address _erc20Token,\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '        nonReentrant()\n', '        addressInStake(msg.sender, _erc20Token, _tokenRarity)\n', '        stakeEnded(msg.sender, _erc20Token, _tokenRarity)\n', '    {\n', '        _withdraw(_erc20Token, _tokenRarity, true);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdra ALOHA without generating your NFT. This can be done before release time is reached.\n', '    */\n', '    function forceSimpleWithdraw(\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '    {\n', '        forcePairWithdraw(alohaERC20, _tokenRarity);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ALOHA/TOKEN without generating your NFT. This can be done before release time is reached.\n', '    */\n', '    function forcePairWithdraw(\n', '        address _erc20Token,\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '        nonReentrant()\n', '        addressInStake(msg.sender, _erc20Token, _tokenRarity)\n', '    {\n', '        _withdraw(_erc20Token, _tokenRarity, false);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns how many fees we collected from withdraws of one token.\n', '    */\n', '    function getAcumulatedFees(address _erc20Token) public view returns (uint256) {\n', '        uint256 balance = IERC20(_erc20Token).balanceOf(address(this));\n', '\n', '        if (balance > 0) {\n', '            return balance.sub(totalStaked[_erc20Token]);\n', '        }\n', '\n', '        return 0; \n', '    } \n', '\n', '    /**\n', '    * @dev Send all the acumulated fees for one token to the fee destinators.\n', '    */\n', '    function withdrawAcumulatedFees(address _erc20Token) public {\n', '        uint256 total = getAcumulatedFees(_erc20Token);\n', '        \n', '        for (uint8 i = 0; i < feesDestinators.length; i++) {\n', '            IERC20(_erc20Token).transfer(\n', '                feesDestinators[i],\n', '                total.mul(feesPercentages[i]).div(100)\n', '            );\n', '        }\n', '    }\n', '\n', '    /* Governance Functions */\n', '\n', '    /**\n', '    * @dev Sets the fee for every withdraw.\n', '    */\n', '    function setFee(uint256 _fee) public onlyOwner() {\n', '        fee = _fee;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds a new NFT to the pools, so users can stake for it.\n', '    */\n', '    function createReward(\n', '        uint256 _tokenImage,\n', '        uint256 _tokenRarity,\n', '        uint256 _limit\n', '    )\n', '        public\n', '        onlyOwner()\n', '        imageNotExists(_tokenImage)\n', '        validRarity(_tokenRarity)\n', '    {\n', '        rewardsMap[_tokenImage] = _tokenRarity;\n', '        rarityByImages[_tokenRarity].push(_tokenImage);\n', '        rarityByImagesTotal[_tokenRarity] += 1;\n', '        limitByRarityAndImage[_tokenImage][_tokenRarity] = _limit;\n', '    }\n', '\n', '    /**\n', '    * @dev Configure staking time and amount in ALOHA pool for one rarity.\n', '    */\n', '    function setSimplePool(\n', '        uint256 _alohaAmount,\n', '        uint256 _duration,\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '        onlyOwner()\n', '        rarityAvailable(_tokenRarity)\n', '    {\n', '        poolsMap[alohaERC20][_tokenRarity] = Pool({\n', '            alohaAmount: _alohaAmount,\n', '            erc20Amount: 0,\n', '            duration: _duration,\n', '            rarity: _tokenRarity\n', '        });\n', '\n', '        emit SettedPool(\n', '            _alohaAmount,\n', '            0,\n', '            _duration,\n', '            _tokenRarity,\n', '            _getTime()\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Configure staking time and amount in ALOHA/TOKEN pool for one rarity.\n', '    */\n', '    function setPairPool(\n', '        uint256 _alohaAmount,\n', '        address _erc20Address,\n', '        uint256 _erc20Amount,\n', '        uint256 _duration,\n', '        uint256 _tokenRarity\n', '    )\n', '        public\n', '        onlyOwner()\n', '        rarityAvailable(_tokenRarity)\n', '    {\n', '        require(address(_erc20Address) != address(0));\n', '\n', '        poolsMap[_erc20Address][_tokenRarity] = Pool({\n', '            alohaAmount: _alohaAmount,\n', '            erc20Amount: _erc20Amount,\n', '            duration: _duration,\n', '            rarity: _tokenRarity\n', '        });\n', '\n', '        emit SettedPool(\n', '            _alohaAmount,\n', '            _erc20Amount,\n', '            _duration,\n', '            _tokenRarity,\n', '            _getTime()\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Creates a new background for NFTs. New stakers could get this background.\n', '    */\n', '    function addBackground(uint8 increase)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        backgrounds += increase;\n', '    }\n', '\n', '    /**\n', "    * @dev Configure how to distribute the fees for user's withdraws.\n", '    */\n', '    function setFeesDestinatorsWithPercentages(\n', '        address[] memory _destinators,\n', '        uint256[] memory _percentages\n', '    )\n', '        public\n', '        onlyOwner()\n', '    {\n', '        require(_destinators.length <= 3, "AlohaStaking: Destinators lenght more then 3");\n', '        require(_percentages.length <= 3, "AlohaStaking: Percentages lenght more then 3");\n', '        require(_destinators.length == _percentages.length, "AlohaStaking: Destinators and percentageslenght are not equals");\n', '\n', '        uint256 total = 0;\n', '        for (uint8 i = 0; i < _percentages.length; i++) {\n', '            total += _percentages[i];\n', '        }\n', '        require(total == 100, "AlohaStaking: Percentages sum must be 100");\n', '\n', '        feesDestinators = _destinators;\n', '        feesPercentages = _percentages;\n', '    }\n', '\n', '    /* Internal functions */\n', '    function _existsReward(uint256 _tokenImage) internal view returns (bool) {\n', '        return rewardsMap[_tokenImage] != 0;\n', '    }\n', '\n', '    function _existsPool(address _erc20Token, uint256 _rarity) internal view returns (bool) {\n', '        return poolsMap[_erc20Token][_rarity].duration != 0;\n', '    }\n', '\n', '    function _getTime() internal view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '    * @dev Apply withdraw fees to the amounts.\n', '    */\n', '    function _applyStakeFees(\n', '        address _erc20Token,\n', '        uint256 _tokenRarity\n', '    ) internal view returns (\n', '        uint256 _alohaAmountAfterFees,\n', '        uint256 _erc20AmountAfterFees\n', '    ) {\n', '        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\n', '        uint256 alohaAmountAfterFees = alohaAmount.sub(alohaAmount.mul(fee).div(10000));\n', '        uint256 erc20AmountAfterFees = 0;\n', '\n', '        if (_erc20Token != alohaERC20) {\n', '            uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\n', '            erc20AmountAfterFees = erc20Amount.sub(erc20Amount.mul(fee).div(10000));\n', '        }\n', '\n', '        return (alohaAmountAfterFees, erc20AmountAfterFees);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers erc20 tokens to this contract.\n', '    */\n', '    function _transferStake(\n', '        address _wallet,\n', '        address _erc20,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(IERC20(_erc20).transferFrom(_wallet, address(this), _amount), "Must approve the ERC20 first");\n', '\n', '        emit Transfered(_wallet, _erc20, _amount, _getTime());\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers erc20 tokens from this contract to the wallet.\n', '    */\n', '    function _transferWithdrawRewards(\n', '        address _wallet,\n', '        address _erc20,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(IERC20(_erc20).transfer(_wallet, _amount), "Must approve the ERC20 first");\n', '\n', '        emit Transfered(_wallet, _erc20, _amount, _getTime());\n', '    }\n', '\n', '    /**\n', '    * @dev Clear the stake state for a wallet and a rarity.\n', '    */\n', '    function _clearStake(address wallet, address _erc20Token, uint256 _tokenRarity) internal {\n', '        stakingsMap[wallet][_erc20Token][_tokenRarity].endDate = 0;\n', '        stakingsMap[wallet][_erc20Token][_tokenRarity].tokenImage = 0;\n', '        stakingsMap[wallet][_erc20Token][_tokenRarity].tokenBackground = 0;\n', '        stakingsMap[wallet][_erc20Token][_tokenRarity].alohaAmount = 0;\n', '        stakingsMap[wallet][_erc20Token][_tokenRarity].erc20Amount = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw tokens and mints the NFT if claimed.\n', '    */\n', '    function _withdraw(address _erc20Token, uint256 _tokenRarity, bool claimReward) internal {\n', '        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\n', '        uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\n', '        uint256 alohaAmountAfterFees;\n', '        uint256 erc20AmountAfterFees;\n', '    \n', '        if (!claimReward) {\n', '            alohaAmountAfterFees = alohaAmount;\n', '            erc20AmountAfterFees = erc20Amount;\n', '        } else {\n', '            (alohaAmountAfterFees, erc20AmountAfterFees) = _applyStakeFees(_erc20Token, _tokenRarity);\n', '        }\n', '\n', '        _transferWithdrawRewards(msg.sender, alohaERC20, alohaAmountAfterFees);\n', '        totalStaked[alohaERC20] -= alohaAmount;\n', '\n', '        if (_erc20Token != alohaERC20) {\n', '            _transferWithdrawRewards(msg.sender, _erc20Token, erc20AmountAfterFees);\n', '            totalStaked[_erc20Token] -= erc20Amount;\n', '        }\n', '\n', '        uint256 tokenId = 0;\n', '        uint256 image = stakingsMap[msg.sender][_erc20Token][_tokenRarity].tokenImage;\n', '        if (claimReward) {\n', '            uint256 background = stakingsMap[msg.sender][_erc20Token][_tokenRarity].tokenBackground;\n', '\n', '            tokenId = IAlohaNFT(alohaERC721).awardItem(msg.sender, _tokenRarity, image, background);\n', '        } else {\n', '            totalTokensByRarityAndImage[image][_tokenRarity] -= 1;\n', '        }\n', '\n', '        emit Withdrawal(\n', '            msg.sender,\n', '            _erc20Token,\n', '            _tokenRarity,\n', '            alohaAmount,\n', '            erc20Amount,\n', '            alohaAmountAfterFees,\n', '            erc20AmountAfterFees,\n', '            tokenId,\n', '            _getTime()\n', '        );\n', '\n', '        _clearStake(msg.sender, _erc20Token, _tokenRarity);\n', '    }\n', '\n', '    function _getRandomImage(uint256 _rarity) internal returns (uint256) {\n', '        uint256 selectedImage = rarityByImages[_rarity][_randomA(rarityByImagesTotal[_rarity]) - 1];\n', '\n', '        if (limitByRarityAndImage[selectedImage][_rarity] == 0 || \n', '            totalTokensByRarityAndImage[selectedImage][_rarity] < limitByRarityAndImage[selectedImage][_rarity]\n', '        ) {\n', '            totalTokensByRarityAndImage[selectedImage][_rarity] += 1;\n', '            return selectedImage;\n', '        }\n', '\n', '        for (uint256 index = 1; index <= rarityByImagesTotal[_rarity]; index++) {\n', '            selectedImage = rarityByImages[_rarity][index - 1];\n', '            if (limitByRarityAndImage[selectedImage][_rarity] == 0 ||\n', '                totalTokensByRarityAndImage[selectedImage][_rarity] < limitByRarityAndImage[selectedImage][_rarity]\n', '            ) {\n', '                totalTokensByRarityAndImage[selectedImage][_rarity] += 1;\n', '                return selectedImage;\n', '            }\n', '        }\n', '\n', '        revert("AlohaStaking: All images has reached the limit");\n', '    }\n', '\n', '    /**\n', '    * @dev Generates a "random" number using the numbers of backgrounds that we have.\n', '    */\n', '    function _randomA(uint256 _limit) internal view returns (uint8) {\n', '        uint256 _gasleft = gasleft();\n', '        bytes32 _blockhash = blockhash(block.number-1);\n', '        bytes32 _structHash = keccak256(\n', '            abi.encode(\n', '                _blockhash,\n', '                backgrounds,\n', '                _gasleft,\n', '                _limit\n', '            )\n', '        );\n', '        uint256 _randomNumber  = uint256(_structHash);\n', '        assembly {_randomNumber := add(mod(_randomNumber, _limit),1)}\n', '        return uint8(_randomNumber);\n', '    }\n', '\n', '    /**\n', '    * @dev Generates a "random" number using the current block timestamp.\n', '    */\n', '    function _randomB(uint256 _limit) internal view returns (uint256) {\n', '        uint256 _gasleft = gasleft();\n', '        bytes32 _blockhash = blockhash(block.number-1);\n', '        bytes32 _structHash = keccak256(\n', '            abi.encode(\n', '                _blockhash,\n', '                _getTime(),\n', '                _gasleft,\n', '                _limit\n', '            )\n', '        );\n', '        uint256 _randomNumber  = uint256(_structHash);\n', '        assembly {_randomNumber := add(mod(_randomNumber, _limit),1)}\n', '        return uint8(_randomNumber);\n', '    }\n', '\n', '}']