['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'library Constants {\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _launchSupply = 180000 * 10**9;\n', '    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\n', '    uint256 private constant _deployerCost = 10 ether;\n', '\n', '    uint256 private constant _baseExpansionFactor = 100;\n', '    uint256 private constant _baseContractionFactor = 100;\n', '    uint256 private constant _incentivePot = 50;\n', '    uint256 private constant _baseUtilityFee = 50;\n', '    uint256 private constant _baseContractionCap = 1000;\n', '\n', '    uint256 private constant _presaleIndividualCap = 1 ether;\n', '    uint256 private constant _presaleIndividualMin = 1 ether;\n', '    uint256 private constant _presaleCap = 1 * 10**5 * 10**9;\n', '    uint256 private constant _maxPresaleGas = 300000000000;\n', '\n', '    uint256 private constant _epochLength = 60 minutes;\n', '\n', '    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address payable private constant _deployerAddress = 0x083c3b9a697596755834dbEF3D0a70a77c36Ae07;\n', '\n', '    string private constant _name = "SHIBA.STABLE";\n', '    string private constant _symbol = "SHST";\n', '    uint8 private constant _decimals = 9;\n', '\n', '\n', '    /****** Getters *******/\n', '    function getLaunchSupply() internal pure returns (uint256) {\n', '        return _launchSupply;\n', '    }\n', '    function getLargeTotal() internal pure returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getBaseExpansionFactor() internal pure returns (uint256) {\n', '        return _baseExpansionFactor;\n', '    }\n', '    function getBaseContractionFactor() internal pure returns (uint256) {\n', '        return _baseContractionFactor;\n', '    }\n', '    function getBaseContractionCap() internal pure returns (uint256) {\n', '        return _baseContractionCap;\n', '    }\n', '    function getIncentivePot() internal pure returns (uint256) {\n', '        return _incentivePot;\n', '    }\n', '    function getDeployerCost() internal pure returns (uint256) {\n', '        return _deployerCost;\n', '    }\n', '    function getPresaleCap() internal pure returns (uint256) {\n', '        return _presaleCap;\n', '    }\n', '    function getPresaleIndividualMin() internal pure returns (uint256) {\n', '        return _presaleIndividualMin;\n', '    }\n', '    function getPresaleIndividualCap() internal pure returns (uint256) {\n', '        return _presaleIndividualCap;\n', '    }\n', '    function getMaxPresaleGas() internal pure returns (uint256) {\n', '        return _maxPresaleGas;\n', '    }\n', '    function getBaseUtilityFee() internal pure returns (uint256) {\n', '        return _baseUtilityFee;\n', '    }\n', '    function getEpochLength() internal pure returns (uint256) {\n', '        return _epochLength;\n', '    }\n', '    function getRouterAdd() internal pure returns (address) {\n', '        return _routerAddress;\n', '    }\n', '    function getFactoryAdd() internal pure returns (address) {\n', '        return _factoryAddress;\n', '    }\n', '    function getDeployerAdd() internal pure returns (address payable) {\n', '        return _deployerAddress;\n', '    }\n', '    function getName() internal pure returns (string memory)  {\n', '        return _name;\n', '    }\n', '    function getSymbol() internal pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function getDecimals() internal pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/utils/Address.sol";\n', 'import "./external/IUniswapV2Factory.sol";\n', 'import "./external/IUniswapV2Router02.sol";\n', 'import "./Constants.sol";\n', 'import "./State.sol";\n', '\n', 'contract Getters is State {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function getLargeBalances(address account) public view returns (uint256) {\n', '        return _largeBalances[account];\n', '    }\n', '    function getAllowances(address account, address spender) public view returns (uint256) {\n', '        return _allowances[account][spender];\n', '    } \n', '    function getSupportedPools(uint256 index) public view returns (address) {\n', '        return _supportedPools[index];\n', '    }\n', '    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\n', '        PoolCounter memory pc = _poolCounters[pool];\n', '        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\n', '    }\n', '    function isSupportedPool(address pool) public view returns (bool) {\n', '        return _isSupportedPool[pool];\n', '    }\n', '    function mainPool() public view returns (address) {\n', '        return _mainPool;\n', '    }\n', '    function getCurrentEpoch() public view returns (uint256) {\n', '        return _currentEpoch;\n', '    }\n', '    function getLargeTotal() public view returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getTotalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function isPresaleDone() public view returns (bool) {\n', '        return _presaleDone;\n', '    }\n', '    function isTaxLess() public view returns (bool) {\n', '        return _taxLess;\n', '    }\n', '    function getUniswapRouter() public view returns (IUniswapV2Router02) {\n', '        return IUniswapV2Router02(Constants.getRouterAdd());\n', '    }\n', '    function getUniswapFactory() public view returns (IUniswapV2Factory) {\n', '        return IUniswapV2Factory(Constants.getFactoryAdd());\n', '    }\n', '    function getFactor() public view returns(uint256) {\n', '        if (isPresaleDone()) {\n', '            return _largeTotal.div(_totalSupply);\n', '        } else {\n', '            return _largeTotal.div(Constants.getLaunchSupply());\n', '        }\n', '    }\n', '    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\n', '        uint256 lpBalance = IERC20(pool).totalSupply();\n', '        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\n', '        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\n', '        return (tokenBalance, pairTokenBalance, lpBalance);\n', '    }\n', '\n', '    function getCurrentPot() public view returns (uint256) {\n', '        return _currentPot;\n', '    }\n', '    function getMintRate(address pool) external view returns (uint256) {\n', '        uint256 expansionR = (_poolCounters[pool].pairTokenBalance).mul(_poolCounters[pool].startTokenBalance).mul(100).div(_poolCounters[pool].startPairTokenBalance).div(_poolCounters[pool].tokenBalance);\n', '        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\n', '            uint256 mintFactor = expansionR.mul(expansionR);\n', '            return mintFactor.sub(10000);\n', '        } else {\n', '            return Constants.getBaseExpansionFactor();\n', '        }\n', '    }\n', '    function getBurnRate(address pool) public view returns (uint256) {\n', '        uint256 contractionR = (_poolCounters[pool].tokenBalance).mul(_poolCounters[pool].startPairTokenBalance).mul(100).div(_poolCounters[pool].pairTokenBalance).div(_poolCounters[pool].startTokenBalance);\n', '        uint256 burnRate;\n', '        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\n', '            uint256 burnFactor = contractionR.mul(contractionR);\n', '            burnRate = burnFactor.sub(10000);\n', '            if (burnRate > Constants.getBaseContractionCap()) {\n', '                return Constants.getBaseContractionCap();\n', '            }\n', '            return burnRate;\n', '\n', '        } else {\n', '            return Constants.getBaseContractionFactor();\n', '        }\n', '    }\n', '    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256) {\n', '        uint256 expansionR = (_poolCounters[sender].pairTokenBalance).mul(_poolCounters[sender].startTokenBalance).mul(100);\n', '        expansionR = expansionR.div(_poolCounters[sender].startPairTokenBalance).div(_poolCounters[sender].tokenBalance);\n', '        uint256 mintAmount;\n', '        uint256 incentive;\n', '        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\n', '            uint256 mintFactor = expansionR.mul(expansionR);\n', '            mintAmount = amount.mul(mintFactor.sub(10000)).div(10000);\n', '        } else {\n', '            mintAmount = amount.mul(Constants.getBaseExpansionFactor()).div(10000);\n', '            uint256 burnRate = getBurnRate(sender);\n', '            if (burnRate > Constants.getBaseContractionFactor() && _currentPot > 0) {\n', '                incentive = (burnRate.sub(Constants.getBaseContractionFactor())).div(2).mul(amount).div(10000);\n', '                if (incentive > _currentPot) {\n', '                    incentive = _currentPot;\n', '                }\n', '            }\n', '        }\n', '        return (mintAmount,incentive);\n', '    }\n', '\n', '    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256, uint256, uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 contractionR;\n', '        uint256 potAmount;\n', '        uint256 netBurn;\n', '        if (isSupportedPool(recipient)) {\n', '            contractionR = (_poolCounters[recipient].tokenBalance).mul(_poolCounters[recipient].startPairTokenBalance).mul(100);\n', '            contractionR = contractionR.div(_poolCounters[recipient].pairTokenBalance).div(_poolCounters[recipient].startTokenBalance);\n', '        } else {\n', '            contractionR = (_poolCounters[_mainPool].tokenBalance).mul(_poolCounters[_mainPool].startPairTokenBalance).mul(100).div(_poolCounters[_mainPool].pairTokenBalance).div(_poolCounters[_mainPool].startTokenBalance);\n', '        }\n', '        uint256 burnAmount;\n', '        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\n', '            uint256 burnFactor = contractionR.mul(contractionR);\n', '            burnAmount = amount.mul(burnFactor.sub(10000)).div(10000);\n', '            if (burnAmount > amount.mul(Constants.getBaseContractionCap()).div(10000)) burnAmount = amount.mul(Constants.getBaseContractionCap()).div(10000);\n', '            potAmount = burnAmount.mul(Constants.getIncentivePot()).div(100);\n', '            netBurn = burnAmount.sub(potAmount);\n', '        } else {\n', '            burnAmount = amount.mul(Constants.getBaseContractionFactor()).div(10000);\n', '            netBurn = burnAmount;\n', '        }\n', '        return (netBurn, netBurn.mul(currentFactor), potAmount, potAmount.mul(currentFactor));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/utils/Address.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/proxy/Initializable.sol";\n', 'import "./external/IUniswapV2Factory.sol";\n', 'import "./external/IUniswapV2Router02.sol";\n', 'import "./external/IWETH.sol";\n', 'import "./Constants.sol";\n', 'import "./Setters.sol";\n', '\n', 'contract ShibaStable is Setters, Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    modifier taxlessTx {\n', '        _taxLess = true;\n', '        _;\n', '        _taxLess = false;\n', '    }\n', '\n', '    constructor () public {\n', '        // uniswapRouterV2 = IUniswapV2Router02(Constants.getRouterAdd());\n', '        // uniswapFactory = IUniswapV2Factory(Constants.getFactoryAdd());\n', '        updateEpoch();\n', '        initializeLargeTotal();\n', '        _totalSupply = 10**5 * 10**9;\n', '        uint256 currentFactor = getFactor();\n', '        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(_totalSupply.mul(currentFactor));\n', '        _presaleTime = now + 24 hours;\n', '        _presalePrice = 600000;\n', '        emit Transfer(address(0),_msgSender(),_totalSupply);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return Constants.getName();\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return Constants.getSymbol();\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return Constants.getDecimals();\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return getTotalSupply();\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        return getLargeBalances(account).div(currentFactor);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return getAllowances(owner,spender);\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), getAllowances(sender,_msgSender()).sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        setAllowances(owner, spender, amount);\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Amount must be greater than zero");\n', '        require(amount <= balanceOf(sender),"Amount exceeds balance");\n', '        require(isPresaleDone(),"Presale yet to close");\n', '        if (now > getCurrentEpoch().add(Constants.getEpochLength())) updateEpoch();\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        uint256 txType;\n', '        if (isTaxLess()) {\n', '            txType = 3;\n', '        } else {\n', '            bool lpBurn;\n', '            if (isSupportedPool(sender)) {\n', '                lpBurn = syncPair(sender);\n', '            } else if (isSupportedPool(recipient)){\n', '                silentSyncPair(recipient);\n', '            } else {\n', '                silentSyncPair(_mainPool);\n', '            }\n', '            txType = _getTxType(sender, recipient, lpBurn);\n', '        }\n', '        // Buy Transaction from supported pools - requires mint, no utility fee\n', '        if (txType == 1) {\n', '            _implementBuy(sender, recipient, amount, largeAmount, currentFactor);\n', '        }\n', '        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\n', '        else if (txType == 2) {\n', '            _implementSell(sender, recipient, amount, largeAmount, currentFactor);\n', '        } \n', '        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\n', '        else if (txType == 3) {\n', '            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _implementBuy(address sender, address recipient, uint256 amount, uint256 largeAmount, uint256 currentFactor) private {\n', '        (uint256 totalMint, uint256 incentive) = getMintValue(sender, amount);\n', '        // uint256 mintSize = amount.div(100);\n', '        _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '        _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\n', '        _totalSupply = _totalSupply.add(totalMint);\n', '        if (incentive > 0) {\n', '            _largeBalances[recipient] = _largeBalances[recipient].add(incentive.mul(currentFactor));\n', '            _largeBalances[address(this)] = _largeBalances[address(this)].sub(incentive.mul(currentFactor));\n', '            _currentPot = _currentPot.sub(incentive);\n', '            emit Transfer(address(this), recipient, incentive);\n', '        }\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _implementSell(address sender, address recipient, uint256 amount, uint256 largeAmount, uint256 currentFactor) private {\n', '        SellDetails memory sell;\n', '        (sell.burnSize, sell.largeBurnSize, sell.potSize, sell.largePotSize) = getBurnValues(recipient, amount);\n', '        sell.actualTransferAmount = amount.sub(sell.burnSize).sub(sell.potSize);\n', '        sell.largeTransferAmount = sell.actualTransferAmount.mul(currentFactor);\n', '        _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '        _largeBalances[recipient] = _largeBalances[recipient].add(sell.largeTransferAmount);\n', '        if (sell.potSize > 0) {\n', '            _largeBalances[address(this)] = _largeBalances[address(this)].add(sell.largePotSize);\n', '            _currentPot = _currentPot.add(sell.potSize);\n', '            emit Transfer(sender, address(this), sell.potSize);\n', '        }\n', '        _totalSupply = _totalSupply.sub(sell.burnSize);\n', '        _largeTotal = _largeTotal.sub(sell.largeBurnSize);\n', '        emit Transfer(sender, recipient, sell.actualTransferAmount);\n', '        emit Transfer(sender, address(0), sell.burnSize);\n', '    }\n', '\n', '    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\n', '        uint256 txType = 2;\n', '        if (isSupportedPool(sender)) {\n', '            if (lpBurn) {\n', '                txType = 3;\n', '            } else {\n', '                txType = 1;\n', '            }\n', '        } else if (sender == Constants.getRouterAdd()) {\n', '            txType = 3;\n', '        }\n', '        return txType;\n', '    }\n', '\n', '    function setPresaleTime(uint256 time) external onlyOwner() {\n', '        require(isPresaleDone() == false, "This cannot be modified after the presale is done");\n', '        _presaleTime = time;\n', '    }\n', '\n', '    function setPresalePrice(uint256 priceInWei) external onlyOwner() {\n', '        require(!isPresaleDone(),"Can only be set before presale");\n', '        _presalePrice = priceInWei;\n', '    }\n', '\n', '    // Presale function\n', '    function buyPresale() external payable {\n', '        require(!isPresaleDone(), "Presale is already completed");\n', '        require(_presaleTime <= now, "Presale hasn\'t started yet");\n', '        require(_presaleParticipation[_msgSender()].add(msg.value) <= Constants.getPresaleIndividualCap(), "Crossed individual cap");\n', '        require(_presalePrice != 0, "Presale price is not set");\n', '        require(msg.value >= Constants.getPresaleIndividualMin(), "Needs to be above min eth!");\n', '        require(!Address.isContract(_msgSender()),"no contracts");\n', '        require(tx.gasprice <= Constants.getMaxPresaleGas(),"gas price above limit");\n', '        uint256 amountToDist = msg.value.div(_presalePrice);\n', '        require(_presaleDist.add(amountToDist) <= Constants.getPresaleCap(), "Presale max cap already reached");\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amountToDist.mul(currentFactor);\n', '        _largeBalances[owner()] = _largeBalances[owner()].sub(largeAmount);\n', '        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(largeAmount);\n', '        emit Transfer(owner(), _msgSender(), amountToDist);\n', '        _presaleParticipation[_msgSender()] = _presaleParticipation[_msgSender()].add(msg.value);\n', '        _presaleDist = _presaleDist.add(amountToDist);\n', '    }\n', '\n', '    function setPresaleDone() public onlyOwner() {\n', '        require(totalSupply() <= Constants.getLaunchSupply(), "Total supply is already minted");\n', '        _mintRemaining();\n', '        _presaleDone = true;\n', '        _createEthPool();\n', '    }\n', '\n', '    function _mintRemaining() private {\n', '        require(!isPresaleDone(), "Cannot mint post presale");\n', '        addToAccount(address(this),65000 * 10 ** 9);\n', '        addToAccount(owner(),15000 * 10 ** 9);\n', '        emit Transfer(address(0),address(this),65000 * 10 ** 9);\n', '    }\n', '\n', '    function _createEthPool() private taxlessTx {\n', '        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\n', '        IUniswapV2Factory uniswapFactory = getUniswapFactory();\n', '        address tokenUniswapPair;\n', '        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\n', '            tokenUniswapPair = uniswapFactory.createPair(\n', '            address(uniswapRouterV2.WETH()), address(this));\n', '        } else {\n', '            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\n', '        }\n', '        Constants.getDeployerAdd().transfer(Constants.getDeployerCost());\n', '        _approve(address(this), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 65 * 10**3 * 10**9);\n', '        uniswapRouterV2.addLiquidityETH{value: address(this).balance}(address(this),\n', '            65 * 10**3 * 10**9, 0, 0, Constants.getDeployerAdd(), block.timestamp);\n', '        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\n', '        _mainPool = tokenUniswapPair;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./Constants.sol";\n', 'import "./State.sol";\n', 'import "./Getters.sol";\n', '\n', 'contract Setters is State, Getters {\n', '    function setAllowances(address owner, address spender, uint256 amount) internal {\n', '        _allowances[owner][spender] = amount;\n', '    }\n', '    function addToAccount(address account, uint256 amount) internal {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        _largeBalances[account] = _largeBalances[account].add(largeAmount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function addToAll(uint256 amount) internal {\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function initializeEpoch() internal {\n', '        _currentEpoch = now;\n', '    }\n', '    function updateEpoch() internal {\n', '        initializeEpoch();\n', '        for (uint256 i=0; i<_supportedPools.length; i++) {\n', '            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\n', '            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\n', '        }\n', '    }\n', '    function initializeLargeTotal() internal {\n', '        _largeTotal = Constants.getLargeTotal();\n', '    }\n', '    function syncPair(address pool) internal returns(bool) {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '        return (lpBurn);\n', '    }\n', '    function silentSyncPair(address pool) public {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '    }\n', '    function addSupportedPool(address pool, address pairToken) internal {\n', '        require(!isSupportedPool(pool),"This pool is already supported");\n', '        _isSupportedPool[pool] = true;\n', '        _supportedPools.push(pool);\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\n', '        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\n', '    }\n', '    function removeSupportedPool(address pool) internal {\n', '        require(isSupportedPool(pool), "This pool is currently not supported");\n', '        for (uint256 i = 0; i < _supportedPools.length; i++) {\n', '            if (_supportedPools[i] == pool) {\n', '                _supportedPools[i] = _supportedPools[_supportedPools.length - 1];\n', '                _isSupportedPool[pool] = false;\n', '                delete _poolCounters[pool];\n', '                _supportedPools.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract State {\n', '\n', '    mapping (address => uint256) _largeBalances;\n', '    mapping (address => mapping (address => uint256)) _allowances;\n', '\n', '    // Supported pools and data for measuring mint & burn factors\n', '    struct PoolCounter {\n', '        address pairToken;\n', '        uint256 tokenBalance;\n', '        uint256 pairTokenBalance;\n', '        uint256 lpBalance;\n', '        uint256 startTokenBalance;\n', '        uint256 startPairTokenBalance;\n', '    }\n', '\n', '    address[] _supportedPools;\n', '    mapping (address => PoolCounter) _poolCounters;\n', '    mapping (address => bool) _isSupportedPool;\n', '    address _mainPool;\n', '\n', '    uint256 _currentEpoch;\n', ' \n', '    uint256 _largeTotal;\n', '    uint256 _totalSupply;\n', '\n', '    uint256 _presaleDist;\n', '    uint256 _presaleTime;\n', '    uint256 _presalePrice;\n', '    mapping (address => uint256) _presaleParticipation;\n', '    bool _presaleDone;\n', '    \n', '    bool _taxLess;\n', '    uint256 _currentPot;\n', '    struct SellDetails {\n', '            uint256 burnSize;\n', '            uint256 largeBurnSize;\n', '            uint256 potSize;\n', '            uint256 largePotSize;\n', '            uint256 utilityFee;\n', '            uint256 largeUtilityFee;\n', '            uint256 actualTransferAmount;\n', '            uint256 largeTransferAmount;\n', '        }\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}']