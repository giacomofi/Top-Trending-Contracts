['// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "./interfaces/IMillionPieces.sol";\n', 'import "./interfaces/IAuction.sol";\n', 'import "./helpers/ProxyRegistry.sol";\n', '\n', '\n', '/**\n', ' * @title Auction\n', ' */\n', 'contract Auction is IAuction, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant BATCH_PURCHASE_LIMIT = 25;\n', '  uint256 public constant PRICE_FOR_SEGMENT = 0.1 ether;\n', '\n', '  address payable public fund;\n', '  address public immutable proxyRegistryAddress;\n', '  IMillionPieces public immutable millionPieces;\n', '\n', '  event NewPurchase(address purchaser, address receiver, uint256 tokenId, uint256 weiAmount);\n', '\n', '  constructor(\n', '    address _millionPieces,\n', '    address payable _fund,\n', '    address _proxyRegistryAddress\n', '  ) public {\n', '    fund = _fund;\n', '    proxyRegistryAddress = _proxyRegistryAddress;\n', '    millionPieces = IMillionPieces(_millionPieces);\n', '  }\n', '\n', '  fallback () external payable { revert(); }\n', '  receive () external payable { revert(); }\n', '\n', '  //  --------------------\n', '  //  PUBLIC\n', '  //  --------------------\n', '\n', '  function buySingle(address receiver, uint256 tokenId) external payable override {\n', '    require(msg.value >= PRICE_FOR_SEGMENT, "buySingle: Not enough ETH for purchase!");\n', '\n', '    _buySingle(receiver, tokenId);\n', '  }\n', '\n', '  function buyMany(\n', '    address[] calldata receivers,\n', '    uint256[] calldata tokenIds\n', '  ) external payable override {\n', '    uint256 tokensCount = tokenIds.length;\n', '    require(tokensCount > 0 && tokensCount <= BATCH_PURCHASE_LIMIT, "buyMany: Arrays should bigger 0 and less then max limit!");\n', '    require(tokensCount == receivers.length, "buyMany: Arrays should be equal to each other!");\n', '    require(msg.value >= tokensCount.mul(PRICE_FOR_SEGMENT), "buyMany: Not enough ETH for purchase!");\n', '\n', '    _buyMany(receivers, tokenIds);\n', '  }\n', '\n', '  function mint(uint256 tokenId, address receiver) public {\n', '    // Must be sent from the owner proxy or owner.\n', '    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n', '    require(address(proxyRegistry.proxies(owner())) == msg.sender || owner() == msg.sender, "mint: Not auth!");\n', '\n', '    _buySingle(receiver, tokenId);\n', '  }\n', '\n', '  function changeFundAddress(address payable newFund) external onlyOwner {\n', '    require(newFund != address(0), "changeFundAddress: Empty fund address!");\n', '    fund = newFund;\n', '  }\n', '\n', '  //  --------------------\n', '  //  INTERNAL\n', '  //  -------------------\n', '\n', '  function _buySingle(address receiver, uint256 tokenId) private {\n', '    // Mint token to receiver\n', '    _mintNft(receiver, tokenId);\n', '\n', '    // Emit single segment purchase event\n', '    emit NewPurchase(msg.sender, receiver, tokenId, msg.value);\n', '\n', '    // Send ETH to fund address\n', '    _transferEth(fund, msg.value);\n', '  }\n', '\n', '  function _buyMany(address[] memory receivers, uint256[] memory tokenIds) private {\n', '    uint256 tokensCount = tokenIds.length;\n', '    uint256 actualPurchasedSegments = 0;\n', '    uint256 ethPerEachSegment = msg.value.div(tokensCount);\n', '\n', '    for (uint256 i = 0; i < tokensCount; i++) {\n', '      // Transfer if tokens not exist, else sent ETH back to purchaser\n', '      if (_isPurchasable(tokenIds[i])) {\n', '        // Mint token to receiver\n', '        _mintNft(receivers[i], tokenIds[i]);\n', '        actualPurchasedSegments++;\n', '\n', '        emit NewPurchase(msg.sender, receivers[i], tokenIds[i], ethPerEachSegment);\n', '      }\n', '    }\n', '\n', '    // Send ETH to fund address\n', '    _transferEth(fund, actualPurchasedSegments.mul(ethPerEachSegment));\n', '\n', '    // Send non-purchased funds to sender address back\n', '    if (tokensCount != actualPurchasedSegments) {\n', '      _transferEth(msg.sender, (tokensCount.sub(actualPurchasedSegments)).mul(ethPerEachSegment));\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Transfer amount of ETH to the fund address.\n', '   */\n', '  function _transferEth(address receiver, uint256 amount) private {\n', '    (bool success, ) = receiver.call{value: amount}("");\n', '    require(success, "_transferEth: Failed to transfer funds!");\n', '  }\n', '\n', '  /**\n', '   * @notice Mint simple segment.\n', '   */\n', '  function _mintNft(address receiver, uint256 tokenId) private {\n', '    millionPieces.mintTo(receiver, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @notice Is provided token exists or not.\n', '   */\n', '  function _isPurchasable(uint256 tokenId) private view returns (bool) {\n', '    return !millionPieces.exists(tokenId);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @title IMillionPieces\n', ' */\n', 'interface IMillionPieces {\n', '    function mintTo(address to, uint256 tokenId) external;\n', '    function mintToSpecial(address to, uint256 tokenId) external;\n', '    function createArtwork(string calldata name) external;\n', '    function setTokenURI(uint256 tokenId, string calldata uri) external;\n', '    function setBaseURI(string calldata baseURI) external;\n', '    function exists(uint256 tokenId) external view returns (bool);\n', '    function isSpecialSegment(uint256 tokenId) external pure returns (bool);\n', '    function isValidArtworkSegment(uint256 tokenId) external view returns (bool);\n', '    function getArtworkName(uint256 id) external view returns (string memory);\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @title IAuction\n', ' */\n', 'interface IAuction {\n', '    function buySingle(address receiver, uint256 tokenId) external payable;\n', '    function buyMany(address[] calldata receivers, uint256[] calldata tokenIds) external payable;\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract OwnableDelegateProxy {}\n', '\n', 'contract ProxyRegistry {\n', '  mapping(address => OwnableDelegateProxy) public proxies;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 9999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']