['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: contracts/Ownable.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', '\n', "Open Zeppelin's ownable doesn't quite work with factory pattern because _owner has private access.\n", 'When you create a DU, open-zeppelin _owner would be 0x0 (no state from template). Then no address could change _owner to the DU owner.\n', '\n', 'With this custom Ownable, the first person to call initialiaze() can set owner.\n', ' */\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public pendingOwner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor(address owner_) public {\n', '        owner = owner_;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "onlyOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public {\n', '        require(msg.sender == pendingOwner, "onlyPendingOwner");\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/FactoryConfig.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface FactoryConfig {\n', '    function currentToken() external view returns (address);\n', '    function currentMediator() external view returns (address);\n', '}\n', '\n', '// File: contracts/MainnetMigrationManager.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', 'contract MainnetMigrationManager is Ownable, FactoryConfig {\n', '\n', '    event OldTokenChange(address indexed current, address indexed prev);\n', '    event CurrentTokenChange(address indexed current, address indexed prev);\n', '    event CurrentMediatorChange(address indexed current, address indexed prev);\n', '\n', '    address override public currentToken;\n', '    address override public currentMediator;\n', '    \n', '    constructor(address _currentToken, address _currentMediator) public Ownable(msg.sender) {\n', '        currentToken = _currentToken;\n', '        currentMediator = _currentMediator;\n', '    }\n', '\n', '    function setCurrentToken(address currentToken_) public onlyOwner {\n', '        emit CurrentTokenChange(currentToken_, currentToken);\n', '        currentToken = currentToken_;\n', '    }\n', '\n', '    function setCurrentMediator(address currentMediator_) public onlyOwner {\n', '        emit CurrentMediatorChange(currentMediator_, currentMediator);\n', '        currentMediator = currentMediator_;\n', '    }\n', '\n', '}']