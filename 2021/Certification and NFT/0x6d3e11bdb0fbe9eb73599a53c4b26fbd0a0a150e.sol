['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.2 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity 0.6.8;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Math.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Math\n', ' *\n', ' * Library for non-standard Math functions\n', " * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\n", ' * It was forked from https://github.com/dydxprotocol/solo at commit\n', ' * 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\n', ' \n', ' */\n', 'library Math {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Library Functions ============\n', '\n', '    /*\n', '     * Return target * (numerator / denominator).\n', '     */\n', '    function getPartial(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) internal pure returns (uint256) {\n', '        return target.mul(numerator).div(denominator);\n', '    }\n', '\n', '    /*\n', '     * Return target * (numerator / denominator), but rounded up.\n', '     */\n', '    function getPartialRoundUp(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) internal pure returns (uint256) {\n', '        if (target == 0 || numerator == 0) {\n', '            // SafeMath will check for zero denominator\n', '            return SafeMath.div(0, denominator);\n', '        }\n', '        return target.mul(numerator).sub(1).div(denominator).add(1);\n', '    }\n', '\n', '    function to128(uint256 number) internal pure returns (uint128) {\n', '        uint128 result = uint128(number);\n', '        require(result == number, "Math: Unsafe cast to uint128");\n', '        return result;\n', '    }\n', '\n', '    function to96(uint256 number) internal pure returns (uint96) {\n', '        uint96 result = uint96(number);\n', '        require(result == number, "Math: Unsafe cast to uint96");\n', '        return result;\n', '    }\n', '\n', '    function to32(uint256 number) internal pure returns (uint32) {\n', '        uint32 result = uint32(number);\n', '        require(result == number, "Math: Unsafe cast to uint32");\n', '        return result;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Decimal.sol\n', '\n', '/*\n', '    Copyright 2019 dYdX Trading Inc.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '\n', '/**\n', " * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\n", ' * at commit 2d8454e02702fe5bc455b848556660629c3cad36\n', ' *\n', ' \n', ' */\n', '\n', '\n', '/**\n', ' * @title Decimal\n', ' *\n', ' * Library that defines a fixed-point number with 18 decimal places.\n', ' */\n', 'library Decimal {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constants ============\n', '\n', '    uint256 constant BASE_POW = 18;\n', '    uint256 constant BASE = 10**BASE_POW;\n', '\n', '    // ============ Structs ============\n', '\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function one() internal pure returns (D256 memory) {\n', '        return D256({value: BASE});\n', '    }\n', '\n', '    function onePlus(D256 memory d) internal pure returns (D256 memory) {\n', '        return D256({value: d.value.add(BASE)});\n', '    }\n', '\n', '    function mul(uint256 target, D256 memory d)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, d.value, BASE);\n', '    }\n', '\n', '    function div(uint256 target, D256 memory d)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, BASE, d.value);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IMarket.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @title Interface for Zora Protocol's Market\n", ' */\n', 'interface IMarket {\n', '    struct Bid {\n', '        // Amount of the currency being bid\n', '        uint256 amount;\n', '        // Address to the ERC20 token being used to bid\n', '        address currency;\n', '        // Address of the bidder\n', '        address bidder;\n', '        // Address of the recipient\n', '        address recipient;\n', '        // % of the next sale to award the current owner\n', '        Decimal.D256 sellOnShare;\n', '    }\n', '\n', '    struct Ask {\n', '        // Amount of the currency being asked\n', '        uint256 amount;\n', '        // Address to the ERC20 token being asked\n', '        address currency;\n', '    }\n', '\n', '    struct BidShares {\n', '        // % of sale value that goes to the _previous_ owner of the nft\n', '        Decimal.D256 prevOwner;\n', '        // % of sale value that goes to the original creator of the nft\n', '        Decimal.D256 creator;\n', '        // % of sale value that goes to the seller (current owner) of the nft\n', '        Decimal.D256 owner;\n', '    }\n', '\n', '    event BidCreated(uint256 indexed tokenId, Bid bid);\n', '    event BidRemoved(uint256 indexed tokenId, Bid bid);\n', '    event BidFinalized(uint256 indexed tokenId, Bid bid);\n', '    event AskCreated(uint256 indexed tokenId, Ask ask);\n', '    event AskRemoved(uint256 indexed tokenId, Ask ask);\n', '    event BidShareUpdated(uint256 indexed tokenId, BidShares bidShares);\n', '\n', '    function bidForTokenBidder(uint256 tokenId, address bidder)\n', '        external\n', '        view\n', '        returns (Bid memory);\n', '\n', '    function currentAskForToken(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (Ask memory);\n', '\n', '    function bidSharesForToken(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (BidShares memory);\n', '\n', '    function isValidBid(uint256 tokenId, uint256 bidAmount)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function isValidBidShares(BidShares calldata bidShares)\n', '        external\n', '        pure\n', '        returns (bool);\n', '\n', '    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\n', '        external\n', '        pure\n', '        returns (uint256);\n', '\n', '    function configure(address mediaContractAddress) external;\n', '\n', '    function setBidShares(uint256 tokenId, BidShares calldata bidShares)\n', '        external;\n', '\n', '    function setAsk(uint256 tokenId, Ask calldata ask) external;\n', '\n', '    function removeAsk(uint256 tokenId) external;\n', '\n', '    function setBid(\n', '        uint256 tokenId,\n', '        Bid calldata bid,\n', '        address spender\n', '    ) external;\n', '\n', '    function removeBid(uint256 tokenId, address bidder) external;\n', '\n', '    function acceptBid(uint256 tokenId, Bid calldata expectedBid) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IMedia.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @title Interface for Zora Protocol's Media\n", ' */\n', 'interface IMedia {\n', '    struct EIP712Signature {\n', '        uint256 deadline;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    struct MediaData {\n', '        // A valid URI of the content represented by this token\n', '        string tokenURI;\n', '        // A valid URI of the metadata associated with this token\n', '        string metadataURI;\n', '        // A SHA256 hash of the content pointed to by tokenURI\n', '        bytes32 contentHash;\n', '        // A SHA256 hash of the content pointed to by metadataURI\n', '        bytes32 metadataHash;\n', '    }\n', '\n', '    event TokenURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\n', '    event TokenMetadataURIUpdated(\n', '        uint256 indexed _tokenId,\n', '        address owner,\n', '        string _uri\n', '    );\n', '\n', '    function tokenCreators(uint256 tokenId) external view returns (address);\n', '\n', '    /**\n', '     * @notice Return the metadata URI for a piece of media given the token URI\n', '     */\n', '    function tokenMetadataURI(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (string memory);\n', '\n', '    /**\n', '     * @notice Mint new media for msg.sender.\n', '     */\n', '    function mint(MediaData calldata data, IMarket.BidShares calldata bidShares)\n', '        external;\n', '\n', '    /**\n', '     * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\n', '     */\n', '    function mintWithSig(\n', '        address creator,\n', '        MediaData calldata data,\n', '        IMarket.BidShares calldata bidShares,\n', '        EIP712Signature calldata sig\n', '    ) external;\n', '\n', '    /**\n', '     * @notice Transfer the token with the given ID to a given address.\n', '     * Save the previous owner before the transfer, in case there is a sell-on fee.\n', '     * @dev This can only be called by the auction contract specified at deployment\n', '     */\n', '    function auctionTransfer(uint256 tokenId, address recipient) external;\n', '\n', '    /**\n', '     * @notice Set the ask on a piece of media\n', '     */\n', '    function setAsk(uint256 tokenId, IMarket.Ask calldata ask) external;\n', '\n', '    /**\n', '     * @notice Remove the ask on a piece of media\n', '     */\n', '    function removeAsk(uint256 tokenId) external;\n', '\n', '    /**\n', '     * @notice Set the bid on a piece of media\n', '     */\n', '    function setBid(uint256 tokenId, IMarket.Bid calldata bid) external;\n', '\n', '    /**\n', '     * @notice Remove the bid on a piece of media\n', '     */\n', '    function removeBid(uint256 tokenId) external;\n', '\n', '    function acceptBid(uint256 tokenId, IMarket.Bid calldata bid) external;\n', '\n', '    /**\n', '     * @notice Revoke approval for a piece of media\n', '     */\n', '    function revokeApproval(uint256 tokenId) external;\n', '\n', '    /**\n', '     * @notice Update the token URI\n', '     */\n', '    function updateTokenURI(uint256 tokenId, string calldata tokenURI) external;\n', '\n', '    /**\n', '     * @notice Update the token metadata uri\n', '     */\n', '    function updateTokenMetadataURI(\n', '        uint256 tokenId,\n', '        string calldata metadataURI\n', '    ) external;\n', '\n', '    /**\n', '     * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\n', '     */\n', '    function permit(\n', '        address spender,\n', '        uint256 tokenId,\n', '        EIP712Signature calldata sig\n', '    ) external;\n', '}\n', '\n', '\n', '// File contracts/NFTFactoryV3.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IReserveAuctionV3Modified {\n', '    function createAuction(\n', '        uint256 tokenId,\n', '        uint256 duration,\n', '        uint256 reservePrice,\n', '        uint8 curatorFeePercent,\n', '        address curator,\n', '        address payable fundsRecipient\n', '    ) external;\n', '}\n', '\n', 'contract NFTFactoryV3 {\n', '    // ============ Constants ============\n', '\n', '    // To check that the given media address represents an ERC721 contract.\n', '    bytes4 internal constant NFT_INTERFACE_ID = 0x80ac58cd;\n', '\n', '    // ============ Immutable Storage ============\n', '\n', '    // An NFT contract address that represents the media that will eventually be traded.\n', '    address public immutable mediaAddress;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(address mediaAddress_) public {\n', '        // NFT compatibility check.\n', '        require(\n', '            IERC165(mediaAddress_).supportsInterface(NFT_INTERFACE_ID),\n', '            "Media address must be ERC721"\n', '        );\n', '\n', '        // Initialize immutable storage.\n', '        mediaAddress = mediaAddress_;\n', '    }\n', '\n', '    function mintNFT(\n', '        IMedia.MediaData calldata mediaData,\n', '        IMarket.BidShares calldata bidShares,\n', '        address payable creator,\n', '        IMedia.EIP712Signature calldata creatorSignature\n', '    ) external {\n', '        IMedia(mediaAddress).mintWithSig(\n', '            creator,\n', '            mediaData,\n', '            bidShares,\n', '            creatorSignature\n', '        );\n', '    }\n', '\n', '    function createAuction(\n', '        uint256 tokenId,\n', '        uint256 duration,\n', '        uint256 reservePrice,\n', '        uint8 curatorFeePercent,\n', '        address curator,\n', '        address payable fundsRecipient,\n', '        address auction,\n', '        IMedia.EIP712Signature calldata creatorSignature\n', '    ) external {\n', '        // Allow the auction contract to pull the NFT.\n', '        IMedia(mediaAddress).permit(auction, tokenId, creatorSignature);\n', '        // Create an auction for the NFT, which pulls the NFT.\n', '        IReserveAuctionV3Modified(auction).createAuction(\n', '            tokenId,\n', '            duration,\n', '            reservePrice,\n', '            curatorFeePercent,\n', '            curator,\n', '            fundsRecipient\n', '        );\n', '    }\n', '}']