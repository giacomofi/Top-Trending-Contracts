['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.0;\n', '\n', '\n', '\n', '// Part: ICryptoKitties\n', '\n', 'interface ICryptoKitties {\n', '    /// @notice Transfers a Kitty to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  CryptoKitties specifically) or your Kitty may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Kitty to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    ) external;\n', '}\n', '\n', '// Part: ISaleClockAuction\n', '\n', 'interface ISaleClockAuction {\n', '\n', '    /// @dev Updates lastSalePrice if seller is the nft contract\n', '    /// Otherwise, works the same as default bid method.\n', '    function bid(uint256 _tokenId)\n', '    external\n', '    payable;\n', '    \n', '    /// @dev Returns the current price of an auction.\n', '    /// @param _tokenId - ID of the token price we are checking.\n', '    function getCurrentPrice(uint256 _tokenId)\n', '    external\n', '    view\n', '    returns (uint256);\n', '}\n', '\n', '// File: CryptoKittiesMarket.sol\n', '\n', 'library CryptoKittiesMarket {\n', '\n', '    address public constant SALE_CLOCK_AUCTION = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C;\n', '    address public constant CRYPTOKITTIES = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n', '\n', '    function buyAssetsForEth(bytes memory data, address recipient) public {\n', '        uint256[] memory tokenIds;\n', '        (tokenIds) = abi.decode(\n', '            data,\n', '            (uint256[])\n', '        );\n', '        for (uint256 i = 0; i < tokenIds.length; i++) {\n', '            _buyAssetForEth(tokenIds[i], estimateAssetPriceInEth(tokenIds[i]), recipient);\n', '        }\n', '    }\n', '\n', '    function estimateAssetPriceInEth(uint256 tokenId) public view returns(uint256) {\n', '        return ISaleClockAuction(SALE_CLOCK_AUCTION).getCurrentPrice(tokenId);\n', '    }\n', '\n', '    function estimateBatchAssetPriceInEth(bytes memory data) public view returns(uint256 totalCost) {\n', '        uint256[] memory tokenIds;\n', '        (tokenIds) = abi.decode(\n', '            data,\n', '            (uint256[])\n', '        );\n', '        for (uint256 i = 0; i < tokenIds.length; i++) {\n', '            totalCost += ISaleClockAuction(SALE_CLOCK_AUCTION).getCurrentPrice(tokenIds[i]);\n', '        }\n', '    }\n', '\n', '    function _buyAssetForEth(uint256 _tokenId, uint256 _price, address _recipient) internal {\n', '        bytes memory _data = abi.encodeWithSelector(ISaleClockAuction(SALE_CLOCK_AUCTION).bid.selector, _tokenId);\n', '\n', '        (bool success, ) = SALE_CLOCK_AUCTION.call{value:_price}(_data);\n', '        require(success, "_buyAssetForEth: cryptokitty buy failed.");\n', '\n', '        ICryptoKitties(CRYPTOKITTIES).transfer(_recipient, _tokenId);\n', '    }\n', '}']