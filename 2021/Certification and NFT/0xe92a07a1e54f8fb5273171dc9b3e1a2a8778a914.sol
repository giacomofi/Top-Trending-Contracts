['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', 'pragma solidity ^0.7.2;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', 'interface IUniswapV2Factory {\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'interface Chi {\n', '\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256);\n', '    function freeUpTo(uint256 value) external returns (uint256);\n', '    \n', '}\n', '\n', 'interface Uniswap {\n', '    \n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'abstract contract Token {\n', '    \n', '    function transfer(address to, uint256 value) public virtual returns (bool);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n', '    \n', '    function approve(address _spender, uint256 _value) public virtual returns (bool);\n', '    \n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract SIP {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    event SubscribeToSpp(uint256 indexed sppID,address indexed customerAddress,uint256 value,uint256 period,address indexed tokenGet,address tokenGive);\n', '    event ChargeSpp(uint256 sppID);\n', '    event CloseSpp(uint256 sppID);\n', '    event Deposit(address indexed token,address indexed user,uint256 amount,uint256 balance);\n', '    event Withdraw(address indexed token,address indexed user,uint256 amount,uint256 balance);\n', '\n', '    modifier _ownerOnly() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier _ifNotLocked() {\n', '        require(scLock == false);\n', '        _;\n', '    }\n', '    \n', '    modifier discountCHI {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 +  gasStart -  gasleft() +  (16 * msg.data.length);\n', '        uint256 _feeTokenAmt = Math.min(((gasSpent + 14154) / 41947), tokens[chiToken][msg.sender]);\n', '        if(_feeTokenAmt > 0){\n', '           tokens[chiToken][msg.sender] = tokens[chiToken][msg.sender].sub(_feeTokenAmt);\n', '           Chi(chiToken).freeUpTo(_feeTokenAmt); \n', '        }\n', '    }\n', '\n', '    function setLock() external _ownerOnly {\n', '        scLock = !scLock;\n', '    }\n', '\n', '    function changeOwner(address owner_) external _ownerOnly {\n', '        potentialAdmin = owner_;\n', '    }\n', '\n', '    function becomeOwner() external {\n', '        if (potentialAdmin == msg.sender) owner = msg.sender;\n', '    }\n', '\n', '    function depositToken(address token, uint256 amount) external {\n', '        require(token != address(0), "IT");\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '        //require(Token(token).transferFrom(msg.sender, address(this), amount), "TF");\n', '        tokens[token][msg.sender] = SafeMath.add(\n', '            tokens[token][msg.sender],\n', '            amount\n', '        );\n', '        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '    }\n', '\n', '    function withdrawToken(address token, uint256 amount) external {\n', '        require(token != address(0), "IT");\n', '        //require(tokens[token][msg.sender] >= amount, "IB");\n', '        tokens[token][msg.sender] = SafeMath.sub(\n', '            tokens[token][msg.sender],\n', '            amount\n', '        );\n', '        IERC20(token).safeTransfer(msg.sender, amount);\n', '        //require(Token(token).transfer(msg.sender, amount), "WF");\n', '        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '    }\n', '\n', '    function tokenBalanceOf(address token, address user) public view returns (uint256 balance) {\n', '        return tokens[token][user];\n', '    }\n', '    \n', '    function _storePairDetails(address _token0, address _token1, address _pair) internal {\n', '         if(pairDetails[_token0][_token1]==address(0)){ // NOT SET YET\n', '             pairDetails[_token0][_token1] = _pair;\n', '         }\n', '    }    \n', '    \n', '\n', '    function subscribeToSpp(uint256 value, uint256 period, address tokenGet, address tokenGive) external _ifNotLocked returns (uint256 sID) {\n', '        address customerAddress = msg.sender;\n', '        require(period >= minPeriod, "MIN_FREQUENCY");\n', '        require(period.mod(3600) == 0, "INTEGRAL_MULTIPLE_OF_HOUR_NEEDED");\n', '        require(tokenBalanceOf(tokenGive,customerAddress) >= value, "INSUFFICENT_BALANCE");\n', '            _deductFee(customerAddress, WETH, initFee);\n', '            sppID += 1;\n', '            \n', "            require(tokenGet != tokenGive, 'IDENTICAL_ADDRESSES');\n", '            (address token0, address token1) = tokenGet < tokenGive ? (tokenGet, tokenGive) : (tokenGive, tokenGet);\n', "            require(token0 != address(0), 'ZERO_ADDRESS');\n", '            address pair = IUniswapV2Factory(factory).getPair(tokenGet, tokenGive); //reverse this and try\n', '            \n', "            require(pair != address(0), 'NO_SUCH_PAIR');\n", '            \n', '            if(token0==tokenGet){\n', '                if(map1[pair].exists== false){\n', '                    map1[pair].token.push(tokenGive);\n', '                    map1[pair].token.push(tokenGet);\n', '                    map1[pair].exists = true;\n', '                    map1[pair].position = 0;\n', '                    _storePairDetails(token0, token1, pair);\n', '                }\n', '                map1[pair].sppList.push(sppID);\n', '            }\n', '            else{\n', '                if(map2[pair].exists== false){\n', '                    map2[pair].token.push(tokenGive);\n', '                    map2[pair].token.push(tokenGet);\n', '                    map2[pair].exists = true;\n', '                    map2[pair].position = 0;\n', '                    _storePairDetails(token0, token1, pair);\n', '                }\n', '                map2[pair].sppList.push(sppID);\n', '            }\n', '            \n', '            sppSubscriptionStats[sppID] = sppSubscribers({\n', '                exists: true,\n', '                customerAddress: customerAddress,\n', '                value: value,\n', '                period: period,\n', '                lastPaidAt: (block.timestamp).sub(period)\n', '            });\n', '            tokenStats[sppID] = currentTokenStats({\n', '                TokenToGet: tokenGet,\n', '                TokenToGive: tokenGive,\n', '                amountGotten: 0,\n', '                amountGiven: 0\n', '            });\n', '            sppSubList[customerAddress].arr.push(sppID);\n', '            emit SubscribeToSpp(sppID,customerAddress,value,period,tokenGet,tokenGive);\n', '            return sppID;\n', '    }\n', '    \n', '    \n', '    function possibleToCharge(uint256 _sppID) public view returns (bool) {\n', '        \n', '        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\n', '        currentTokenStats storage _tokenStats = tokenStats[_sppID];\n', '        address tokenGive = _tokenStats.TokenToGive;\n', '        if(_subscriptionData.exists==false){\n', '            return false; // SIP is not active\n', '        }\n', '        else if(tokens[WETH][_subscriptionData.customerAddress] < minWETH){\n', '            return false; // No WETH to pay for fee\n', '        }\n', '        else if(_subscriptionData.value > tokens[tokenGive][_subscriptionData.customerAddress]){\n', '            return false; // Insufficient Balance\n', '        }\n', '        \n', '        return true;\n', '    }\n', '\n', '\n', '    function chargeWithSPPIndexes(address pair, uint256[] calldata _indexes, bool _upwards) external _ownerOnly _ifNotLocked discountCHI {\n', '        \n', '        uint256 gasStart = 21000 + gasleft() + 3000 +  (16 * msg.data.length);\n', '\n', '        uint256[] memory result;\n', '        pairStats storage _pairData = map1[pair]; \n', '        \n', '        if(!_upwards){\n', '           _pairData = map2[pair]; \n', '        }\n', '        \n', '        uint256[] storage sppList = _pairData.sppList;\n', '        \n', '        require(sppList.length!=0, "No SIP to charge");\n', '        \n', '        address[] storage pathSwap = _pairData.token;\n', '        \n', '        uint256 finalAmountGive = 0;\n', '        uint256 finalAmountGotten = 0;\n', '        \n', '        chargeSppStruct[] memory sppCharged = new chargeSppStruct[]((_indexes.length + 1));\n', '        \n', '        uint successIndex = 0;\n', '        \n', '        for(uint256 i=0; i< _indexes.length; i++){\n', '            if(_indexes[i] > (sppList.length-1)){\n', '                continue; // No such SIP index. Invalid input. Return and save GAS\n', '            }\n', '            uint256 _sppID = sppList[_indexes[i]];\n', '            sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\n', '            if(_subscriptionData.exists==false){\n', '                continue; // SIP is not active\n', '            }\n', '            else if(tokens[WETH][_subscriptionData.customerAddress] < minWETH){\n', '                continue; // No WETH to pay for fee\n', '            }\n', '            else if(_subscriptionData.lastPaidAt + _subscriptionData.period > block.timestamp){\n', '                continue; // Charging too early\n', '            }\n', '            else if(_subscriptionData.value > tokens[pathSwap[0]][_subscriptionData.customerAddress]){\n', '                continue; // Insufficient Balance\n', '            }\n', '            else {\n', '                finalAmountGive += _subscriptionData.value;\n', '                _deductTokens(_subscriptionData.value, _subscriptionData.customerAddress, pathSwap[0]);\n', '                sppCharged[successIndex] = chargeSppStruct({\n', '                    sppId: _sppID,\n', '                    amt: _subscriptionData.value,\n', '                    custAdd: _subscriptionData.customerAddress\n', '                });\n', '                successIndex++;\n', '            }\n', '        }\n', '        \n', '        require(finalAmountGive > 0 , "Nothing to charge");\n', '        \n', '        uint256[] memory amounts = Uniswap(uniswapContractAddress).getAmountsOut(finalAmountGive, pathSwap);\n', '        \n', '        require(Token(pathSwap[0]).approve(uniswapContractAddress,finalAmountGive),"approve failed");\n', '        result = Uniswap(uniswapContractAddress).swapExactTokensForTokens(finalAmountGive, amounts[1], pathSwap, address(this), block.timestamp+1000);\n', '        \n', '        // take some fee here first\n', '        finalAmountGotten = result[1];\n', '        finalAmountGotten = finalAmountGotten.sub(_deductSppFee(finalAmountGotten, pathSwap[1]));\n', '\n', '        uint256 txFee = (gasStart - gasleft() +  (successIndex * 50000)) * tx.gasprice;\n', '        uint256 _feeDed = txFee;\n', '        \n', '        for(uint256 k=0; k<successIndex; k++){\n', '            uint256 _credAmt = ((sppCharged[k].amt).mul(finalAmountGotten)).div(finalAmountGive);\n', '            uint256 _feeWETH = ((sppCharged[k].amt).mul(txFee)).div(finalAmountGive);\n', '            _creditTokens( _credAmt, sppCharged[k].custAdd, pathSwap[1]);\n', '            _deductTokens(Math.min(_feeWETH, tokens[WETH][sppCharged[k].custAdd]), sppCharged[k].custAdd, WETH);\n', '            _feeDed = _feeDed - Math.min(_feeWETH, tokens[WETH][sppCharged[k].custAdd]);\n', '            require(setcurrentTokenStats(sppCharged[k].sppId, _credAmt, sppCharged[k].amt),"setcurrentTokenStats failed");\n', '            require(setLastPaidAt(sppCharged[k].sppId),"setLastPaidAt failed");\n', '        }\n', '        _creditTokens((txFee - _feeDed), feeAccount, WETH);\n', '    }\n', '\n', '    function chargeSppByID(uint256 _sppId) external _ifNotLocked discountCHI {\n', '        \n', '        uint256[] memory result;\n', '        currentTokenStats storage _tokenStats = tokenStats[_sppId];\n', '        \n', '        address tokenGive = _tokenStats.TokenToGive;\n', '        address tokenGet = _tokenStats.TokenToGet;\n', '        \n', '        uint256 finalAmountGive = 0;\n', '        uint256 finalAmountGotten = 0;\n', '        \n', '        address[] memory paths = new address[](2);\n', '        paths[0] = tokenGive;\n', '        paths[1] = tokenGet;\n', '        \n', '\n', '        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppId];\n', '        require(_subscriptionData.exists==true, "NVS");\n', '        require(_subscriptionData.lastPaidAt + _subscriptionData.period <= block.timestamp, "CTE");\n', '        require(_subscriptionData.value <= tokens[tokenGive][_subscriptionData.customerAddress], "IB");\n', '\n', '        finalAmountGive = _subscriptionData.value;\n', '        require(finalAmountGive > 0 , "Nothing to charge");\n', '        \n', '        \n', '        _deductTokens(_subscriptionData.value, _subscriptionData.customerAddress, tokenGive);\n', '        \n', '        \n', '        uint256[] memory amounts = Uniswap(uniswapContractAddress).getAmountsOut(finalAmountGive, paths);\n', '        \n', '        require(Token(tokenGive).approve(uniswapContractAddress,finalAmountGive),"approve failed");\n', '        result = Uniswap(uniswapContractAddress).swapExactTokensForTokens(finalAmountGive, amounts[1], paths, address(this), block.timestamp+1000);\n', '        \n', '        // take some fee here first\n', '        finalAmountGotten = result[1];\n', '        finalAmountGotten = finalAmountGotten.sub(_deductSppFee(finalAmountGotten, tokenGet));\n', '\n', '        _creditTokens( finalAmountGotten, _subscriptionData.customerAddress, tokenGet);\n', '        require(setcurrentTokenStats(_sppId, finalAmountGotten, _subscriptionData.value),"setcurrentTokenStats failed");\n', '        require(setLastPaidAt(_sppId),"setLastPaidAt failed");\n', '\n', '    }\n', '    \n', ' \n', '    function _deductSppFee(uint256 _amt, address _token) internal returns (uint256) {\n', '        uint256 _feeAmt = ((_amt).mul(fee)).div(10000);\n', '        _creditTokens(_feeAmt, feeAccount, _token);\n', '        return _feeAmt;\n', '    }\n', '    \n', '    function _deductTokens(uint256 _amt, address _custAdd, address _token) internal {\n', '        tokens[_token][_custAdd] = SafeMath.sub(tokens[_token][_custAdd],_amt);\n', '    }\n', '    \n', '    function _creditTokens(uint256 _amt, address _custAdd, address _token) internal {\n', '        tokens[_token][_custAdd] = SafeMath.add(tokens[_token][_custAdd],_amt);\n', '    }\n', '    \n', '\n', '    function closeSpp(uint256 _sppId) external returns (bool success) {\n', '        require(msg.sender == sppSubscriptionStats[_sppId].customerAddress, "NA");\n', '        sppSubscriptionStats[_sppId].exists = false;\n', '        inactiveSIP[_sppId] = true;\n', '        emit CloseSpp(_sppId);\n', '        return true;\n', '    }\n', '    \n', '    function _deductFee(address customerAddress, address token, uint256 amount) internal {\n', '        tokens[token][customerAddress] = tokens[token][customerAddress].sub(amount);\n', '        tokens[token][feeAccount] = tokens[token][feeAccount].add(amount);\n', '    }\n', '    \n', '\n', '    function setAddresses(address feeAccount1, address uniswapContractAddress1, address factory1, address _chi, address _weth) external _ownerOnly {\n', '        feeAccount = feeAccount1;\n', '        uniswapContractAddress = uniswapContractAddress1;\n', '        factory = factory1;\n', '        chiToken = _chi;\n', '        WETH = _weth;\n', '    }\n', '\n', '    function setMinPeriod(uint256 p) external _ownerOnly {\n', '        minPeriod = p;\n', '    }\n', '\n', '    function setLastPaidAt(uint256 _sppID) internal returns (bool success) {\n', '        sppSubscribers storage _subscriptionData = sppSubscriptionStats[_sppID];\n', '        _subscriptionData.lastPaidAt = getNearestHour(block.timestamp);\n', '        return true;\n', '    }\n', '\n', '    function setcurrentTokenStats(uint256 _sppID, uint256 amountGotten, uint256 amountGiven) internal returns (bool success) {\n', '        currentTokenStats storage _tokenStats = tokenStats[_sppID];\n', '        _tokenStats.amountGotten = _tokenStats.amountGotten.add(amountGotten);\n', '        _tokenStats.amountGiven = _tokenStats.amountGiven.add(amountGiven);\n', '        return true;\n', '    }\n', '\n', '    function isActiveSpp(uint256 _sppID) public view returns (bool res) {\n', '        return sppSubscriptionStats[_sppID].exists;\n', '    }\n', '    \n', '     function getLatestSppId() public view returns (uint256 sppId) {\n', '        return sppID;\n', '    }\n', '\n', '    function getlistOfSppSubscriptions(address _from) public view returns (uint256[] memory arr) {\n', '        return sppSubList[_from].arr;\n', '    }\n', '\n', '    function getcurrentTokenAmounts(uint256 _sppID) public view returns (uint256[2] memory arr) {\n', '        arr[0] = tokenStats[_sppID].amountGotten;\n', '        arr[1] = tokenStats[_sppID].amountGiven;\n', '        return arr;\n', '    }\n', '\n', '    function getTokenStats(uint256 _sppID) public view returns (address[2] memory arr) {\n', '        arr[0] = tokenStats[_sppID].TokenToGet;\n', '        arr[1] = tokenStats[_sppID].TokenToGive;\n', '        return arr;\n', '    }\n', '    \n', '    function fetchPairAndDirection(uint256 _sppID) public view returns (bool direction, address pair) {\n', '        currentTokenStats storage _tokenStats = tokenStats[_sppID];\n', '        \n', '        address tokenGive = _tokenStats.TokenToGive;\n', '        address tokenGet = _tokenStats.TokenToGet;\n', '\n', '        (address token0, address token1) = tokenGet < tokenGive ? (tokenGet, tokenGive) : (tokenGive, tokenGet);\n', '\n', '        address _pair = pairDetails[token0][token1];\n', '        bool _direction = false;\n', '\n', '        if(token0==tokenGet){\n', '            _direction = true;\n', '        }\n', '        return (_direction, _pair);\n', '    }\n', '    \n', '    function fetchPathDetailsAdd(address _pair, bool _upwards) public view returns (address[] memory arr) {\n', '        if (_upwards){\n', '           return map1[_pair].token; \n', '        }\n', '        else {\n', '            return map2[_pair].token;\n', '        }\n', '    }\n', '    \n', '    function fetchPathDetailsSPP(address _pair, bool _upwards) public view returns (uint256[] memory arr) {\n', '        if (_upwards){\n', '           return map1[_pair].sppList; \n', '        }\n', '        else {\n', '            return map2[_pair].sppList;\n', '        }\n', '    }\n', '\n', '    function getTimeRemainingToCharge(uint256 _sppID) public view returns (uint256 time) {\n', '        if((sppSubscriptionStats[_sppID].lastPaidAt).add(sppSubscriptionStats[_sppID].period) < block.timestamp){\n', '            return 0;\n', '        }\n', '        else {\n', '          return ((sppSubscriptionStats[_sppID].lastPaidAt).add(sppSubscriptionStats[_sppID].period).sub(block.timestamp));  \n', '        }\n', '    }\n', '    \n', '    // Update dev address by initiating with the previous dev.\n', '    function changeFee(uint8 _fee) external _ownerOnly{\n', '        require(_fee <= 25, "Cannot increase fee beyond 25");\n', '        fee = _fee;\n', '    }\n', '\n', '    // Update min WETH needed for cgarge SIP to run.\n', '    function changeMinWETH(uint256 _minWETH) external _ownerOnly{\n', '        minWETH = _minWETH;\n', '    }\n', '\n', '    // Update min WETH needed for cgarge SIP to run.\n', '    function setInitFee(uint256 _initFee) external _ownerOnly{\n', '        initFee = _initFee;\n', '    }\n', '    \n', '    // Change starting position of a pair.\n', '    function changePosition(address pair, uint256 _index, bool _upwards) external _ownerOnly{\n', '        if(_upwards){\n', '            map1[pair].position = _index;\n', '        }\n', '        else {\n', '            map2[pair].position = _index;\n', '        }\n', '    }\n', '    \n', '    // This function is to optimise batching process\n', '    function getNearestHour(uint256 _time) public pure returns (uint256) {\n', '        uint256 _secondsExtra = _time.mod(3600);\n', '        if(_secondsExtra > 1800){\n', '            return ((_time).add(3600)).sub(_secondsExtra);\n', '        }\n', '        else {\n', '            return (_time).sub(_secondsExtra);\n', '        }\n', '    }\n', '\n', '    struct sppSubscribers {\n', '        bool exists;\n', '        address customerAddress;\n', '        uint256 value; \n', '        uint256 period;\n', '        uint256 lastPaidAt;\n', '    }\n', '\n', '    struct currentTokenStats {\n', '        address TokenToGet;\n', '        uint256 amountGotten;\n', '        address TokenToGive;\n', '        uint256 amountGiven;\n', '    }\n', '\n', '    struct listOfSppByAddress {\n', '        uint256[] arr;\n', '    }\n', '    \n', '    struct pairStats{\n', '        address[] token;\n', '        uint256[] sppList;\n', '        bool exists;\n', '        uint256 position;\n', '    }\n', '    \n', '    struct chargeSppStruct {\n', '        uint256 sppId;\n', '        uint256 amt;\n', '        address custAdd;\n', '    }\n', '    \n', '    mapping(uint256 => uint256) public sppAmounts;\n', '    mapping(address => pairStats) private map1;\n', '    mapping(address => pairStats) private map2;\n', '    mapping(uint256 => currentTokenStats) tokenStats;\n', '    mapping(address => listOfSppByAddress) sppSubList;\n', '    mapping(uint256 => sppSubscribers) public sppSubscriptionStats;\n', '    mapping(address => mapping(address => uint256)) public tokens;\n', '\n', '    mapping(uint256 => bool) public inactiveSIP; // contains a SIP ID only if it existed and now has been deactivated\n', '    \n', '    // TOKEN0 -> TOKEN1 -> PAIRADD\n', '    mapping(address => mapping(address => address)) public pairDetails;\n', '\n', '    \n', '    address public uniswapContractAddress;\n', '    address public factory;\n', '    address public owner;\n', '    address public chiToken;\n', '    address public WETH;\n', '    address private potentialAdmin;\n', '    uint256 public sppID;\n', '    address public feeAccount;\n', '    bool public scLock = false;\n', '    uint8 public fee = 25;\n', '    uint256 public minPeriod = 3600;\n', '    uint256 public minWETH;\n', '    uint256 public initFee;\n', '    \n', '}\n', '\n', 'contract SIPDapp is SIP {\n', '    receive() external payable {\n', '        revert();\n', '    }\n', '\n', '    string public name;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        name = "BNS SIP Dapp";\n', '    }\n', '}']