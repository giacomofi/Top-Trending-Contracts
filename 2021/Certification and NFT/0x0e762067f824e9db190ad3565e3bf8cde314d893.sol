['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-14\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.7.5;\n', '\n', 'interface IERC20 {\n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IOwnable {\n', '\n', '  function owner() external view returns (address);\n', '\n', '  function renounceOwnership() external;\n', '  \n', '  function transferOwnership( address newOwner_ ) external;\n', '}\n', '\n', 'contract Ownable is IOwnable {\n', '    \n', '  address internal _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor () {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred( address(0), _owner );\n', '  }\n', '\n', '  function owner() public view override returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require( _owner == msg.sender, "Ownable: caller is not the owner" );\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public virtual override onlyOwner() {\n', '    emit OwnershipTransferred( _owner, address(0) );\n', '    _owner = address(0);\n', '  }\n', '\n', '  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\n', '    require( newOwner_ != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred( _owner, newOwner_ );\n', '    _owner = newOwner_;\n', '  }\n', '}\n', '\n', 'contract OHMPreSale is Ownable {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;  \n', '    \n', '    address public aOHM;\n', '    address public DAI;\n', '    address public addressToSendDai;\n', '    \n', '    uint public salePrice;\n', '    uint public totalWhiteListed;\n', '    uint public endOfSale;\n', '\n', '    bool public saleStarted;\n', '\n', '    mapping(address => bool) boughtOHM;\n', '    mapping(address => bool) whiteListed;\n', '\n', '    function whiteListBuyers( address[] memory _buyers ) external onlyOwner() returns ( bool ) {\n', "        require(saleStarted == false, 'Already initialized');\n", '\n', '        totalWhiteListed = totalWhiteListed.add( _buyers.length );\n', '\n', '        for( uint i; i < _buyers.length; i++ ) {\n', '            whiteListed[_buyers[i]] = true;\n', '        }\n', '\n', '        return true;\n', '\n', '    }\n', '    \n', '    function initialize ( address _addressToSendDai, address _dai, address _aOHM, uint _salePrice, uint _saleLength ) external onlyOwner() returns(bool) {\n', "        require(saleStarted == false, 'Already initialized');\n", '\n', '        aOHM = _aOHM;\n', '        DAI = _dai;\n', '\n', '        salePrice = _salePrice;\n', '        \n', '        endOfSale = _saleLength.add(block.timestamp);\n', '\n', '        saleStarted = true;\n', '\n', '        addressToSendDai = _addressToSendDai;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getAllotmentPerBuyer() public view returns (uint) {\n', '        return IERC20( aOHM ).balanceOf(address(this)).div(totalWhiteListed);\n', '    }\n', '\n', '    function purchaseaOHM(uint _amountDAI) external returns(bool) {\n', "        require (saleStarted == true, 'Not started');\n", "        require(whiteListed[msg.sender] == true, 'Not whitelisted');\n", "        require(boughtOHM[msg.sender] == false, 'Already participated');\n", "        require(block.timestamp < endOfSale, 'Sale over');\n", '\n', '        boughtOHM[msg.sender] = true;\n', '\n', '        uint _purchaseAmount = _calculateSaleQuote( _amountDAI );\n', '\n', "        require(_purchaseAmount <= getAllotmentPerBuyer(), 'More than alloted');\n", '        totalWhiteListed = totalWhiteListed.sub(1);\n', '\n', '        IERC20( DAI ).safeTransferFrom(msg.sender, addressToSendDai, _amountDAI);\n', '        IERC20( aOHM ).safeTransfer(msg.sender, _purchaseAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function sendRemainingaOHM() external onlyOwner() returns(bool) {\n', "        require (saleStarted == true, 'Not started');\n", "        require (block.timestamp >= endOfSale, 'Not ended');\n", '\n', '        IERC20( aOHM ).safeTransfer(msg.sender, IERC20( aOHM ).balanceOf(address(this)));\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function _calculateSaleQuote( uint paymentAmount_ ) internal view returns ( uint ) {\n', '      return uint(1e9).mul(paymentAmount_).div(salePrice);\n', '    }\n', '\n', '    function calculateSaleQuote( uint paymentAmount_ ) external view returns ( uint ) {\n', '      return _calculateSaleQuote( paymentAmount_ );\n', '    }\n', '}']