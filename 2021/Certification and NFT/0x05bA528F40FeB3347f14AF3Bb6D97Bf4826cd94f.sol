['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath16 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        uint16 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\n', '        require(b <= a, errorMessage);\n', '        uint16 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint16 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\n', '        require(b > 0, errorMessage);\n', '        uint16 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath80 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint80 a, uint80 b) internal pure returns (uint80) {\n', '        uint80 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint80 a, uint80 b) internal pure returns (uint80) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\n', '        require(b <= a, errorMessage);\n', '        uint80 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint80 a, uint80 b) internal pure returns (uint80) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint80 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint80 a, uint80 b) internal pure returns (uint80) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\n', '        require(b > 0, errorMessage);\n', '        uint80 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint80 a, uint80 b) internal pure returns (uint80) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "../v1/utils/SafeMath80.sol";\n', 'import "../v1/utils/SafeMath16.sol";\n', 'import "./utils/SafeMath168.sol";\n', '\n', 'import "./interfaces/IFeesCalculatorV3.sol";\n', '\n', 'contract FeesCalculatorV3 is IFeesCalculatorV3, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeMath16 for uint16;\n', '    using SafeMath168 for uint168;\n', '\n', '    uint256 private constant PRECISION_DECIMALS = 1e10;\n', '\n', '    uint256 private constant FUNDING_FEE_MIN_RATE = 2000;\n', '    uint256 private constant FUNDING_FEE_MAX_RATE = 100000;\n', '    uint256 private constant FUNDING_FEE_BASE_PERIOD = 1 days;\n', '\n', '    uint256 private constant MAX_FUNDING_FEE_PERCENTAGE = 1000000;\n', '\n', '    uint16 private constant MAX_CVI_VALUE = 20000;\n', '    uint16 private constant CVI_DECIMALS = 100;\n', '\n', '    uint16 private constant MAX_FUNDING_FEE_CVI_THRESHOLD = 55;\n', '    uint16 private constant MIN_FUDNING_FEE_CVI_THRESHOLD = 110;\n', '    uint16 private constant FUNDING_FEE_DIVISION_FACTOR = 5;\n', '\n', '    uint16 private constant MAX_PERCENTAGE = 10000;\n', '\n', '    uint16 public override depositFeePercent = 0;\n', '    uint16 public override withdrawFeePercent = 0;\n', '    uint16 public override openPositionFeePercent = 30;\n', '    uint16 public override buyingPremiumFeeMaxPercent = 1000;\n', '    uint16 public override closePositionFeePercent = 30;\n', '\n', '    uint16 public buyingPremiumThreshold = 8000; // 1.0 is MAX_PERCENTAGE = 10000\n', '\n', '    uint16 public closePositionMaxFeePercent = 300;\n', '\n', '    uint16 public maxTurbulenceFeePercentToTrim = 100;\n', '    uint16 public turbulenceStepPercent = 1000;\n', '    uint16 public override turbulenceIndicatorPercent = 0;\n', '\n', '    uint256 public oracleHeartbeatPeriod = 55 minutes;\n', '    uint256 public closePositionFeeDecayPeriod = 24 hours;\n', '\n', '    address public turbulenceUpdator;\n', '\n', '    modifier onlyTurbulenceUpdator {\n', '        require(msg.sender == turbulenceUpdator, "Not allowed");\n', '        _;\n', '    }\n', '\n', '    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds) external override onlyTurbulenceUpdator returns (uint16) {\n', '        uint256 totalHeartbeats = totalTime / oracleHeartbeatPeriod;\n', '        uint16 updatedTurbulenceIndicatorPercent = calculateTurbulenceIndicatorPercent(totalHeartbeats, newRounds);\n', '\n', '        if (updatedTurbulenceIndicatorPercent != turbulenceIndicatorPercent) {\n', '            turbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent;\n', '        }\n', '    }\n', '\n', '    function setTurbulenceUpdator(address _newUpdator) external override onlyOwner {\n', '        turbulenceUpdator = _newUpdator;\n', '    }\n', '\n', '    function setDepositFee(uint16 _newDepositFeePercentage) external override onlyOwner {\n', '        require(_newDepositFeePercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        depositFeePercent = _newDepositFeePercentage;\n', '    }\n', '\n', '    function setWithdrawFee(uint16 _newWithdrawFeePercentage) external override onlyOwner {\n', '        require(_newWithdrawFeePercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        withdrawFeePercent = _newWithdrawFeePercentage;\n', '    }\n', '\n', '    function setOpenPositionFee(uint16 _newOpenPositionFeePercentage) external override onlyOwner {\n', '        require(_newOpenPositionFeePercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        openPositionFeePercent = _newOpenPositionFeePercentage;\n', '    }\n', '\n', '    function setClosePositionFee(uint16 _newClosePositionFeePercentage) external override onlyOwner {\n', '        require(_newClosePositionFeePercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        require(_newClosePositionFeePercentage <= closePositionMaxFeePercent, "Min fee above max fee");\n', '        closePositionFeePercent = _newClosePositionFeePercentage;\n', '    }\n', '\n', '    function setClosePositionMaxFee(uint16 _newClosePositionMaxFeePercentage) external override onlyOwner {\n', '        require(_newClosePositionMaxFeePercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        require(_newClosePositionMaxFeePercentage >= closePositionFeePercent, "Max fee below min fee");\n', '        closePositionMaxFeePercent = _newClosePositionMaxFeePercentage;\n', '    }\n', '\n', '    function setClosePositionFeeDecay(uint256 _newClosePositionFeeDecayPeriod) external override onlyOwner {\n', '        require(_newClosePositionFeeDecayPeriod > 0, "Period must be positive");\n', '        closePositionFeeDecayPeriod = _newClosePositionFeeDecayPeriod;\n', '    }\n', '\n', '    function setOracleHeartbeatPeriod(uint256 _newOracleHeartbeatPeriod) external override onlyOwner {\n', '        require(_newOracleHeartbeatPeriod > 0, "Heartbeat must be positive");\n', '        oracleHeartbeatPeriod = _newOracleHeartbeatPeriod;\n', '    }\n', '\n', '    function setBuyingPremiumFeeMax(uint16 _newBuyingPremiumFeeMaxPercentage) external override onlyOwner {\n', '        require(_newBuyingPremiumFeeMaxPercentage < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        buyingPremiumFeeMaxPercent = _newBuyingPremiumFeeMaxPercentage;\n', '    }\n', '\n', '    function setBuyingPremiumThreshold(uint16 _newBuyingPremiumThreshold) external override onlyOwner {\n', '        require(_newBuyingPremiumThreshold < MAX_PERCENTAGE, "Threshold exceeds maximum");\n', '        buyingPremiumThreshold = _newBuyingPremiumThreshold;   \n', '    }\n', '\n', '    function setTurbulenceStep(uint16 _newTurbulenceStepPercentage) external override onlyOwner {\n', '        require(_newTurbulenceStepPercentage < MAX_PERCENTAGE, "Step exceeds maximum");\n', '        turbulenceStepPercent = _newTurbulenceStepPercentage;\n', '    }\n', '    \n', '    function setMaxTurbulenceFeePercentToTrim(uint16 _newMaxTurbulenceFeePercentToTrim) external override onlyOwner {\n', '        require(_newMaxTurbulenceFeePercentToTrim < MAX_PERCENTAGE, "Fee exceeds maximum");\n', '        maxTurbulenceFeePercentToTrim = _newMaxTurbulenceFeePercentToTrim;\n', '    }\n', '\n', '    function calculateTurbulenceIndicatorPercent(uint256 totalHeartbeats, uint256 newRounds) public view override returns (uint16) {\n', '        uint16 updatedTurbulenceIndicatorPercent = turbulenceIndicatorPercent;\n', '\n', '        uint256 decayTimes = 0;\n', '        uint256 turbulenceTimes = 0;\n', '        if (newRounds > totalHeartbeats) {\n', '            turbulenceTimes = newRounds - totalHeartbeats;\n', '            decayTimes = totalHeartbeats;\n', '        } else {\n', '            decayTimes = newRounds;\n', '        }\n', '\n', '        for (uint256 i = 0; i < decayTimes; i++) {\n', '            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent / 2;\n', '        }\n', '\n', '        if (updatedTurbulenceIndicatorPercent < maxTurbulenceFeePercentToTrim) {\n', '            updatedTurbulenceIndicatorPercent = 0;\n', '        }\n', '\n', '        for (uint256 i = 0; i < turbulenceTimes; i++) {\n', '            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent.add(uint16(uint256(buyingPremiumFeeMaxPercent).mul(turbulenceStepPercent) / MAX_PERCENTAGE));\n', '        }\n', '\n', '        if (updatedTurbulenceIndicatorPercent > buyingPremiumFeeMaxPercent) {\n', '            updatedTurbulenceIndicatorPercent = buyingPremiumFeeMaxPercent;\n', '        }\n', '\n', '        return updatedTurbulenceIndicatorPercent;\n', '    }\n', '\n', '    function calculateBuyingPremiumFee(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\n', '        (buyingPremiumFee, combinedPremiumFeePercentage) =  _calculateBuyingPremiumFeeWithTurbulence(_tokenAmount, _leverage, _collateralRatio, turbulenceIndicatorPercent);\n', '    }\n', '    \n', '    function calculateBuyingPremiumFeeWithTurbulence(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint16 _turbulenceIndicatorPercent) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\n', '        (buyingPremiumFee, combinedPremiumFeePercentage) = _calculateBuyingPremiumFeeWithTurbulence(_tokenAmount, _leverage, _collateralRatio, _turbulenceIndicatorPercent);\n', '    }\n', '\n', '    function calculateSingleUnitFundingFee(CVIValue[] calldata _cviValues) external override pure returns (uint256 fundingFee) {\n', '        for (uint8 i = 0; i < _cviValues.length; i++) {\n', '            fundingFee = fundingFee.add(calculateSingleUnitPeriodFundingFee(_cviValues[i]));\n', '        }\n', '    }\n', '\n', '    function calculateSingleUnitPeriodFundingFee(CVIValue memory _cviValue) private pure returns (uint256 fundingFee) {\n', '        if (_cviValue.cviValue == 0 || _cviValue.period == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\n', '        uint16 integerCVIValue = _cviValue.cviValue / CVI_DECIMALS;\n', '        if (integerCVIValue > MAX_FUNDING_FEE_CVI_THRESHOLD) {\n', '            if (integerCVIValue >= MIN_FUDNING_FEE_CVI_THRESHOLD) {\n', '                fundingFeeRatePercents = FUNDING_FEE_MIN_RATE;\n', '            } else {\n', '                // Defining as memory to keep function pure and save storage space + reads\n', '                uint24[5] memory fundingFeeCoefficients = [100000, 114869, 131950, 151571, 174110];\n', '\n', '                uint256 exponent = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) / FUNDING_FEE_DIVISION_FACTOR;\n', '                uint256 coefficientIndex = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) % FUNDING_FEE_DIVISION_FACTOR;\n', '\n', '                // Note: overflow is not possible as the exponent can only get larger, and other parts are constants\n', '                // However, 2 ** exponent can overflow if cvi value is wrong\n', '                require(exponent < 256, "exponent overflow");\n', '                fundingFeeRatePercents = (PRECISION_DECIMALS / (2 ** exponent) / fundingFeeCoefficients[coefficientIndex]) + \n', '                    FUNDING_FEE_MIN_RATE;\n', '\n', '                if (fundingFeeRatePercents > FUNDING_FEE_MAX_RATE) {\n', '                    fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\n', '                }\n', '            }\n', '        }\n', '\n', '        return PRECISION_DECIMALS.mul(uint256(_cviValue.cviValue)).mul(fundingFeeRatePercents).mul(_cviValue.period) /\n', '            FUNDING_FEE_BASE_PERIOD / MAX_CVI_VALUE / MAX_FUNDING_FEE_PERCENTAGE;\n', '    }\n', '\n', '    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view override returns (uint16) {\n', '        if (block.timestamp.sub(creationTimestamp) >= closePositionFeeDecayPeriod) {\n', '            return closePositionFeePercent;\n', '        }\n', '\n', '        uint16 decay = uint16(uint256(closePositionMaxFeePercent - closePositionFeePercent).mul(block.timestamp.sub(creationTimestamp)) / \n', '            closePositionFeeDecayPeriod);\n', '        return closePositionMaxFeePercent.sub(decay);\n', '    }\n', '\n', '    function calculateWithdrawFeePercent(uint256) external view override returns (uint16) {\n', '        return withdrawFeePercent;\n', '    }\n', '\n', '    function openPositionFees() external view override returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult) {\n', '        openPositionFeePercentResult = openPositionFeePercent;\n', '        buyingPremiumFeeMaxPercentResult = buyingPremiumFeeMaxPercent;\n', '    }\n', '\n', '    function _calculateBuyingPremiumFeeWithTurbulence(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint16 _turbulenceIndicatorPercent) private view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\n', '        uint168 buyingPremiumFeePercentage = 0;\n', '        if (_collateralRatio >= PRECISION_DECIMALS) {\n', '            buyingPremiumFeePercentage = buyingPremiumFeeMaxPercent;\n', '        } else {\n', '            if (_collateralRatio >= uint256(buyingPremiumThreshold).mul(PRECISION_DECIMALS) / MAX_PERCENTAGE) {\n', '                // NOTE: The collateral ratio can never be bigger than 1.0 (= PERCISION_DECIMALS) in calls from the platform,\n', '                // so there is no issue with having a revert always occuring here on specific scenarios\n', '                uint168 denominator = uint168(PRECISION_DECIMALS).sub(uint168(_collateralRatio));\n', '\n', '                // Denominator is multiplied by PRECISION_DECIMALS, but is squared, so need to have a square in numerator as well\n', '                buyingPremiumFeePercentage = uint168(PRECISION_DECIMALS * PRECISION_DECIMALS).\n', '                    div(denominator.mul(denominator));\n', '            }\n', '        }\n', '\n', '        combinedPremiumFeePercentage = uint16(buyingPremiumFeePercentage).add(_turbulenceIndicatorPercent);\n', '        if (combinedPremiumFeePercentage > buyingPremiumFeeMaxPercent) {\n', '            combinedPremiumFeePercentage = buyingPremiumFeeMaxPercent;\n', '        }\n', '        \n', '        uint256 __buyingPremiumFee = uint256(_tokenAmount.mul(_leverage)).mul(combinedPremiumFeePercentage) / MAX_PERCENTAGE;\n', '        buyingPremiumFee = uint168(__buyingPremiumFee);\n', '        require(__buyingPremiumFee == buyingPremiumFee, "Too much tokens");\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IFeesCalculatorV3 {\n', '\n', '    struct CVIValue {\n', '        uint256 period;\n', '        uint16 cviValue;\n', '    }\n', '\n', '    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds) external returns (uint16);\n', '\n', '    function setTurbulenceUpdator(address newUpdator) external;\n', '\n', '    function setDepositFee(uint16 newDepositFeePercentage) external;\n', '    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\n', '    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\n', '    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\n', '    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\n', '    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\n', '    \n', '    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\n', '    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\n', '    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\n', '    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\n', '    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\n', '\n', '    function calculateTurbulenceIndicatorPercent(uint256 totalHeartbeats, uint256 newRounds) external view returns (uint16);\n', '\n', '    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\n', '    function calculateBuyingPremiumFeeWithTurbulence(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint16 turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\n', '    \n', '    function calculateSingleUnitFundingFee(CVIValue[] calldata cviValues) external pure returns (uint256 fundingFee);\n', '    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view returns (uint16);\n', '    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\n', '\n', '    function depositFeePercent() external view returns (uint16);\n', '    function withdrawFeePercent() external view returns (uint16);\n', '    function openPositionFeePercent() external view returns (uint16);\n', '    function closePositionFeePercent() external view returns (uint16);\n', '    function buyingPremiumFeeMaxPercent() external view returns (uint16);\n', '\n', '    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\n', '\n', '    function turbulenceIndicatorPercent() external view returns (uint16);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath168 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint168 a, uint168 b) internal pure returns (uint168) {\n', '        uint168 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint168 a, uint168 b) internal pure returns (uint168) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\n', '        require(b <= a, errorMessage);\n', '        uint168 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint168 a, uint168 b) internal pure returns (uint168) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint168 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint168 a, uint168 b) internal pure returns (uint168) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\n', '        require(b > 0, errorMessage);\n', '        uint168 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint168 a, uint168 b) internal pure returns (uint168) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']