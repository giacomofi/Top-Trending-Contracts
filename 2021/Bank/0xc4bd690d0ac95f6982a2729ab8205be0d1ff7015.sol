['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.4;\n', 'import "./Ownable.sol";\n', 'import "./IERC20.sol";\n', 'import "./IUniswapV3Router.sol";\n', 'import {Path} from "./Path.sol";\n', '\n', 'contract matrEXRouterV3 is Ownable, IUniswapV3Router{\n', '    using Path for bytes;\n', '\n', '    /**\n', '    * @dev Event emitted when the charity fee is taken\n', '    * @param from: The user it is taken from\n', '    * @param token: The token that was taken from the user\n', '    * @param amount: The amount of the token taken for charity\n', '    */\n', '    event feeTaken(address from, IERC20 token, uint256 amount);\n', '\n', '    /**\n', '    * @dev Event emitted when the charity fee is taken (in ETH)\n', '    * @param from: The user it was taken from\n', '    * @param amount: The amount of ETH taken in wei\n', '    */\n', '    event feeTakenInETH(address from, uint256 amount);\n', '\n', '    /**\n', '    * @dev Event emmited when a token is approved for trade for the first\n', '    * time on Uniswap (check takeFeeAndApprove())\n', '    * @param token: The tokens that was approved for trade\n', '    */\n', '    event approvedForTrade(IERC20 token);\n', '\n', '    /**\n', '    * @dev \n', '    * _charityFee: The % that is taken from each swap that gets sent to charity\n', '    * _charityAddress: The address that the charity funds get sent to\n', '    * _uniswapV3Router: Uniswap router that all swaps go through\n', '    * WETH: The address of the WETH token\n', '    */\n', '    uint256 private _charityFee;\n', '    address private _charityAddress;\n', '    IUniswapV3Router private _uniswapV3Router;\n', '    address private WETH;\n', '\n', '    /**\n', '    * @dev Sets the Uniswap router, the charity fee, the charity address and\n', '    * the WETH token address \n', '    */\n', '    constructor(){\n', '        _uniswapV3Router = IUniswapV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n', '        _charityFee = 20;\n', '        _charityAddress = address(0x830be1dba01bfF12C706b967AcDeCd2fDEa48990);\n', '        WETH = address(0xc778417E063141139Fce010982780140Aa0cD5Ab);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the fee and takes it, transfers the fee to the charity\n', '    * address and the remains to this contract.\n', '    * emits feeTaken()\n', '    * Then, it checks if there is enough approved for the swap, if not it\n', '    * approves it to the uniswap contract. Emits approvedForTrade() if so.\n', '    * @param user: The payer\n', '    * @param token: The token that will be swapped and the fee will be paid\n', '    * in\n', '    * @param totalAmount: The total amount of tokens that will be swapped, will\n', '    * be used to calculate how much the fee will be\n', '    */\n', '    function takeFeeAndApprove(address user, IERC20 token, uint256 totalAmount) internal returns (uint256){\n', '        uint256 _feeTaken = (totalAmount / 10000) * _charityFee;\n', '        token.transferFrom(user, address(this), totalAmount - _feeTaken);\n', '        token.transferFrom(user, _charityAddress, _feeTaken);\n', '        if (token.allowance(address(this), address(_uniswapV3Router)) < totalAmount){\n', '            token.approve(address(_uniswapV3Router), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '            emit approvedForTrade(token);\n', '        }\n', '        emit feeTaken(user, token, _feeTaken);\n', '        return totalAmount -= _feeTaken;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the fee and takes it, transfers the fee to the charity\n', '    * address and the remains to this contract.\n', '    * emits feeTakenInETH()\n', '    * @param totalAmount: The total amount of tokens that will be swapped, will\n', '    * be used to calculate how much the fee will be\n', '    */   \n', '    function takeFeeETH(uint256 totalAmount) internal returns (uint256 fee){\n', '        uint256 _feeTaken = (totalAmount / 10000) * _charityFee;\n', '        payable(_charityAddress).transfer(_feeTaken);\n', '        emit feeTakenInETH(_msgSender(), _feeTaken);\n', '        return totalAmount - _feeTaken;\n', '    }\n', '    \n', '    /**\n', '    * @dev The functions below are all the same as the Uniswap contract but\n', '    * they call takeFeeAndApprove() or takeFeeETH() (See the functions above)\n', '    * and deduct the fee from the amount that will be traded.\n', '    */\n', '    \n', '    function exactInputSingle(ExactInputSingleParams calldata params) external virtual override payable returns (uint256){\n', '        if (params.tokenIn == WETH && msg.value >= params.amountIn){\n', '            uint256 newValue = takeFeeETH(params.amountIn);\n', '            ExactInputSingleParams memory params_ = params;\n', '            params_.amountIn = newValue;\n', '            return _uniswapV3Router.exactInputSingle{value: params_.amountIn}(params_);\n', '        }else{\n', '            IERC20 token = IERC20(params.tokenIn);\n', '            uint256 newAmount = takeFeeAndApprove(_msgSender(), token, params.amountIn);\n', '            ExactInputSingleParams memory _params = params;\n', '            _params.amountIn = newAmount;\n', '            return _uniswapV3Router.exactInputSingle(_params);\n', '        }\n', '    }\n', '    \n', '    function exactInput(ExactInputParams calldata params) external virtual override payable returns (uint256){\n', '        (address tokenIn, address tokenOut, uint24 fee) = params.path.decodeFirstPool();\n', '        if (tokenIn == WETH && msg.value >= params.amountIn){\n', '            uint256 newValue = takeFeeETH(params.amountIn);\n', '            ExactInputParams memory params_ = params;\n', '            params_.amountIn = newValue;\n', '            return _uniswapV3Router.exactInput{value: params_.amountIn}(params_);\n', '        }else{\n', '            IERC20 token = IERC20(tokenIn);\n', '            uint256 newAmount = takeFeeAndApprove(_msgSender(), IERC20(token), params.amountIn);\n', '            ExactInputParams memory _params = params;\n', '            _params.amountIn = newAmount;\n', '            return _uniswapV3Router.exactInput(_params);\n', '        }\n', '    }\n', '    \n', '     function exactOutputSingle(ExactOutputSingleParams calldata params) external virtual payable override returns (uint256){\n', '        if (params.tokenIn == address(WETH) && msg.value >= params.amountOut){\n', '            uint256 newValue = takeFeeETH(params.amountOut);\n', '            ExactOutputSingleParams memory params_ = params;\n', '            params_.amountOut = newValue;\n', '            return _uniswapV3Router.exactOutputSingle{value: params_.amountOut}(params_);\n', '        }else{\n', '            IERC20 token = IERC20(params.tokenIn);\n', '            uint256 newAmount = takeFeeAndApprove(_msgSender(), token, params.amountOut);\n', '            ExactOutputSingleParams memory _params = params;\n', '            _params.amountOut = newAmount;\n', '            return _uniswapV3Router.exactOutputSingle(_params);\n', '        }\n', '    }\n', '    \n', '    function exactOutput(ExactOutputParams calldata params) external virtual override payable returns (uint256){\n', '        (address tokenIn, address tokenOut, uint24 fee) = params.path.decodeFirstPool();\n', '         if (tokenIn == address(WETH) && msg.value >= params.amountOut){\n', '            uint256 newValue = takeFeeETH(params.amountOut);\n', '            ExactOutputParams memory params_ = params;\n', '            params_.amountOut == newValue;\n', '            return _uniswapV3Router.exactOutput{value: params_.amountOut}(params_);\n', '        }else{\n', '            IERC20 token = IERC20(tokenIn);\n', '            uint256 newAmount = takeFeeAndApprove(_msgSender(), IERC20(token), params.amountOut);\n', '            ExactOutputParams memory _params = params;\n', '            _params.amountOut == newAmount;\n', '            return _uniswapV3Router.exactOutput(_params);\n', '        }\n', '    } \n', '    \n', '    /**\n', '    * @dev Functions that only the owner can call that change the variables\n', '    * in this contract\n', '    */    \n', '    function setCharityFee(uint256 newCharityFee) external onlyOwner {\n', '        _charityFee = newCharityFee;\n', '    }\n', '    \n', '    function setCharityAddress(address newCharityAddress) external onlyOwner {\n', '        _charityAddress = newCharityAddress;\n', '    }\n', '    \n', '    function setUniswapV3Router(IUniswapV3Router newUniswapV3Router) external onlyOwner {\n', '        _uniswapV3Router = newUniswapV3Router;\n', '    }\n', '\n', '    /**\n', '    * @return Returns the % fee taken from each swap that goes to charity\n', '    */\n', '    function charityFee() external view returns (uint256) {\n', '        return _charityFee;\n', '    }\n', '    \n', '    /**\n', '    * @return The address that the "Charity Fee" is sent to\n', '    */\n', '    function charityAddress() external view returns (address) {\n', '        return _charityAddress;\n', '    }\n', '    \n', '    /**\n', '    * @return The router that all swaps will be directed through\n', '    */\n', '    function uniswapV3Router() external view returns (IUniswapV3Router) {\n', '        return _uniswapV3Router;\n', '    }\n', '}']