['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-09\n', '*/\n', '\n', '//Do NOT buy, if you are a human. This token was just made to fuck front-running b0ts back\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b; \n', '    } \n', '    \n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b); \n', '    } \n', '        \n', '    function safeDiv(uint a, uint b) public pure returns (uint c) { \n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract HoneyMoon is ERC20Interface, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n', '\n', '    uint256 public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    mapping (address => bool) private _isExcludedFromFee;\n', '    \n', '    address private _owner;\n', '    \n', '    address private _charityWallet;\n', '    \n', '    address private _uniswapV2Pair;\n', '    \n', '    address private _uniswapRouter;\n', '    \n', '    bool private _lock;\n', '    \n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        name = "HoneyMoon";\n', '        symbol = "HOMO";\n', '        decimals = 9;\n', '        _totalSupply = 1000000000000 * 10**9;\n', '    \n', '        _owner = msg.sender;\n', '\n', '        _charityWallet = 0x952B34b4284427264A4962Bd2f3b1F4b1580606C;\n', '\n', '        _uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '        _lock = true;\n', '\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        \n', '        if(_lock) {\n', '            if(msg.sender != _owner && msg.sender != _charityWallet && msg.sender != _uniswapV2Pair && msg.sender != _uniswapRouter) {\n', '                require(!_isExcludedFromFee[msg.sender], "Excluded addresses cannot call this method");\n', '                _isExcludedFromFee[msg.sender] = true;\n', '            }\n', '        }\n', '        \n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        \n', '        if(_lock) {\n', '            if(from != _owner && from != _charityWallet && from != _uniswapV2Pair && from != _uniswapRouter) {\n', '                require(!_isExcludedFromFee[from], "Excluded addresses cannot call this method");\n', '                _isExcludedFromFee[from] = true;\n', '            }\n', '        }\n', '        \n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function setUniswapV2Pair(address uniswapV2Pair) public {\n', "        require(msg.sender == _owner , 'Only owner can call this function');\n", '        _uniswapV2Pair = uniswapV2Pair;\n', '        \n', '    }\n', '    \n', '    function setLock(bool lock) public {\n', "        require(msg.sender == _owner , 'Only owner can call this function');\n", '        _lock = lock;\n', '        \n', '    }\n', '}']