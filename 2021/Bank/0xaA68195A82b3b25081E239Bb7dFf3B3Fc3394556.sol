['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.1;\n', '\n', 'struct Payout {\n', '\taddress beneficiary;\n', '\tuint96 amount;\n', '}\n', '\n', 'contract Gamber {\n', '\t\n', '\tuint256 public fee;\n', '\taddress public collector;\n', '\taddress public owner;\n', '\tuint192 public rate; // in 0.01%\n', '\tuint256 public lowerBound;\n', '\tuint256 public upperBound;\t\n', '\tuint128 public first;\n', '  uint128 public last;\n', '\tmapping(uint128 => Payout) public payouts;\n', '\tuint256 public balance;\n', '\n', '\tconstructor() {\n', '\t\towner = msg.sender;\n', '\t\tcollector = msg.sender;\n', '\t\tlowerBound =   30000000000000000;\n', '\t\tupperBound = 1000000000000000000;\n', '\t\trate = 2000;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(owner == msg.sender, "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction setCollector(address newCollector) public onlyOwner {\n', '\t\trequire(newCollector != address(0), "New collector is the zero address");\n', '\t\tcollector = newCollector;\n', '\t}\n', '\n', '\tevent RateChanged(uint192 rate);\n', '\n', '\tfunction setRate(uint192 newRate) public onlyOwner {\n', '\t\trequire(newRate > 0, "Rate should be positive");\n', '\t\trate = newRate;\n', '\t\temit RateChanged(rate);\n', '\t}\n', '\n', '\tevent BoundsUpdated(uint256 lower, uint256 upper);\n', '\n', '\tfunction setBounds(uint192 newLowerBound, uint192 newUpperBound) public onlyOwner {\n', '\t\trequire(newUpperBound > newLowerBound, "Upper bound should be greater than lower bound");\n', '\t\tupperBound = newUpperBound;\n', '\t\tlowerBound = newLowerBound;\n', '\n', '\t\temit BoundsUpdated(lowerBound, upperBound);\n', '\t}\n', '\n', '\tfunction setUpperBound(uint192 newUpperBound) public onlyOwner {\n', '\t\trequire(newUpperBound > lowerBound, "Upper bound should be greater than lower bound");\n', '\t\tupperBound = newUpperBound;\n', '\n', '\t\temit BoundsUpdated(lowerBound, upperBound);\n', '\t}\n', '\n', '\tfunction setLowerBound(uint192 newLowerBound) public onlyOwner {\n', '\t\trequire(newLowerBound < upperBound, "Lower bound should be less than upper bound");\n', '\t\tlowerBound = newLowerBound;\n', '\n', '\t\temit BoundsUpdated(lowerBound, upperBound);\n', '\t}\n', '\n', '\tevent Collected(uint256 amount);\n', '\n', '\tfunction collect() public onlyOwner {\n', '\t\trequire(fee > 0, "Nothing to collect");\n', '\t\tpayable(collector).transfer(fee);\n', '\t\temit Collected(fee);\n', '\t\tfee = 0;\n', '\t}\n', '\n', '\tevent Accepted(address sender, uint256 amount);\n', '\n', '\tfunction accept(address sender, uint256 amount) internal {\n', '\t\tfee += amount/10;\n', '\t\tbalance += amount - amount/10;\n', '\t\tif(amount >= lowerBound) {\n', '\t\t\tif(amount > upperBound) amount = upperBound;\n', '\t\t\temit Accepted(sender, amount);\n', '\t\t\tamount += amount*rate/10000;\n', '\t\t\tpayouts[last++] = Payout(sender, uint96(amount));\n', '\t\t}\n', '\t}\n', '\n', '\tevent Paid(address beneficiary, uint96 amount);\n', '\n', '\tfunction pay(address beneficiary, uint96 amount) internal {\n', '\t\tpayable(beneficiary).transfer(amount);\n', '\t\tbalance -= amount;\n', '\t\temit Paid(beneficiary, amount);\n', '\t}\n', '\n', '\treceive() external payable {\n', '\t\taccept(msg.sender, msg.value);\t\t\n', '\t\twhile(balance > payouts[first].amount && payouts[first].beneficiary != address(0)) {\n', '\t\t\tpay(payouts[first].beneficiary, payouts[first].amount);\n', '\t\t\tdelete payouts[first++];\n', '\t\t}\n', '\t}\n', '}']