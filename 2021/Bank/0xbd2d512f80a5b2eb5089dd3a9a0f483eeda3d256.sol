['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '}\n', '\n', '\n', 'contract Resolver {\n', '    struct Balances {\n', '        address owner;\n', '        uint[] balance;\n', '    }\n', '    function getBalances(address[] memory owners, address[] memory tknAddress) public view returns (Balances[] memory) {\n', '        Balances[] memory tokensBal = new Balances[](owners.length);\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            uint[] memory bals = new uint[](tknAddress.length);\n', '            for (uint j = 0; j < tknAddress.length; j++) {\n', '                if (tknAddress[j] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '                    bals[j] = owners[i].balance;\n', '                } else {\n', '                    TokenInterface token = TokenInterface(tknAddress[j]);\n', '                    bals[j] = token.balanceOf(owners[i]);\n', '                }\n', '            }\n', '            tokensBal[i] = Balances({\n', '                owner: owners[i],\n', '                balance: bals\n', '            });\n', '        }\n', '        return tokensBal;\n', '    }\n', '}\n', '\n', '\n', 'contract InstaPowerERC20Resolver is Resolver {\n', '    string public constant name = "ERC20-Power-Resolver-v1";\n', '}']