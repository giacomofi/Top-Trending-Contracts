['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _Owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _Owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _Owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_Owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '}  \n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface FTPAntiBot {\n', '    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\n', '    function registerBlock(address _recipient, address _sender, address _origin) external;\n', '}\n', '\n', 'contract Balancer {\n', '    constructor()  {\n', '    }\n', '}\n', '\n', 'contract DownDogeToken is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 internal _total_supply = 1_000_000_000_000 * 10**9;\n', '    string private _Name = "Down Doge Token";\n', '    string private _Symbol = "DDT";\n', '    uint8 private _Decimals = 9;\n', '    \n', '    uint256 private _BanCount = 0;\n', '\n', '    uint256 public _minTokensBeforeSwap = 1_000_000 * 10**9; // 1,000,000 DDT\n', '    uint256 public _minWeiBeforeSwap = 1000_000_000 * 10**9; // 1 Eth\n', '\n', '    uint256 public _lastBuyAndBurn = block.timestamp ;\n', '    uint256 public _buyAndBurnInterval = 30 minutes;\n', '    uint256 public _totalBurntFees;\n', '    \n', '    uint256 private _BuyBackFee = 6;\n', '    uint256 private _CharityFee = 2;\n', '    uint256 private _DevFee = 2;\n', '    \n', '    address payable private _FeeAddress;\n', '    address payable private _DevAddress;\n', '    address private _UniswapV2Pair;\n', '    \n', '\n', '    bool private _IsSwap = false;\n', '    bool private _AntiBotEnabled = true;\n', '    bool private _buyAndBurnEnabled = true;\n', '\n', '    address public _AntiBotAddress = 0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3;\n', '    address public _DeadWallet = 0x000000000000000000000000000000000000dEaD;\n', '    address public _balancer;\n', '    bool public _SwapEnabled = false;\n', '    bool public _TradingOpened = false;\n', '    \n', '    uint256 public _CalledReadyToTax = 0;\n', '    bool public _CalledReadyToTax2 = false;\n', '    uint256 public _CalledTax1 = 0;\n', '    uint256 public _CalledTax2 = 0;\n', '    uint256 public _CalledTax3 = 0;\n', '    uint256 public _CalledSenderNotUni = 0;\n', '    uint256 public _CalledBuyAndBurn = 0;\n', '    uint256 public _CalledCanSwap = 0;\n', '    uint256 public _CalledSwapTokensForETH = 0;\n', '    \n', '    mapping (address => bool) private _Bots;\n', '    mapping (address => bool) private _ExcludedAddresses;\n', '\n', '    mapping (address => uint256) private _Balances;\n', '    mapping (address => mapping (address => uint256)) private _Allowances;\n', '    \n', '    FTPAntiBot private AntiBot;\n', '    IUniswapV2Router02 private _UniswapV2Router;\n', '\n', '    event BanAddress(address Address, address Origin);\n', '    event Burnt(uint256 Amount);\n', '    \n', '    modifier lockTheSwap {\n', '        _IsSwap = true;\n', '        _;\n', '        _IsSwap = false;\n', '    }\n', '\n', '    constructor (address payable _feeAddress, address payable _devAddress ) {\n', '        \n', '        _FeeAddress = _feeAddress;\n', '        _DevAddress = _DevAddress;\n', '        _initAntiBot(); // activates antibot if enabled\n', '        _balancer = address(new Balancer()); // new contract to handle auto buy-back\n', '\n', '        _Balances[owner()] = _total_supply.div(100).mul(50); // send 50% to owner address for presale, remaining will be sent back to contract before liquidity will be added.\n', '        _Balances[address(this)] = _total_supply.div(100).mul(50);\n', '        _ExcludedAddresses[owner()] = true;\n', '        _ExcludedAddresses[address(this)] = true;\n', '        _ExcludedAddresses[_balancer] = true;\n', '        _ExcludedAddresses[_feeAddress] = true;\n', '        _ExcludedAddresses[_devAddress] = true;\n', '\n', '        \n', '        emit Transfer(address(0), address(this), _total_supply);\n', '    }\n', '    \n', '    receive() external payable {}\n', '\n', '// ####################\n', '// ##### DEFAULTS #####\n', '// ####################\n', '\n', '    function name() public view returns (string memory) {\n', '        return _Name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _Symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _Decimals;\n', '    }\n', '\n', '// #####################\n', '// ##### OVERRIDES #####\n', '// #####################\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _total_supply;\n', '    }\n', '\n', '    function balanceOf(address _account) public view override returns (uint256) {\n', '        return _Balances[_account];\n', '    }\n', '\n', '    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_msgSender(), _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view override returns (uint256) {\n', '        return _Allowances[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public override returns (bool) {\n', '        _approve(_msgSender(), _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_sender, _recipient, _amount);\n', '        _approve(_sender, _msgSender(), _Allowances[_sender][_msgSender()].sub(_amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '// ####################\n', '// ##### PRIVATES #####\n', '// ####################\n', '\n', '    function _readyToTax(address _sender) private returns(bool) {\n', '        _CalledReadyToTax += 1;\n', '        _CalledReadyToTax2 = _senderNotUni(_sender) && !_ExcludedAddresses[_sender] && _SwapEnabled;\n', '        return _CalledReadyToTax2;\n', '    }\n', '    \n', '    function _notOwnerAddress(address _sender, address _recipient) private view returns(bool) {\n', '        return _sender != owner() && _recipient != owner() && _TradingOpened;\n', '    }\n', '\n', '    function _senderNotUni(address _sender) private view returns(bool) {\n', '        return _sender != _UniswapV2Pair;\n', '    }\n', '\n', '    function _approve(address _owner, address _spender, uint256 _amount) private {\n', '        require(_owner != address(0), "ERC20: approve from the zero address");\n', '        require(_spender != address(0), "ERC20: approve to the zero address");\n', '        _Allowances[_owner][_spender] = _amount;\n', '        emit Approval(_owner, _spender, _amount);\n', '    }\n', '\n', '    function _transfer(address _sender, address _recipient, uint256 _amount) private {\n', '        require(_sender != address(0), "ERC20: transfer from the zero address");\n', '        require(_recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(_amount > 0, "Transfer amount must be greater than zero");\n', '        require(_TradingOpened || _sender == owner() || _recipient == owner() ||\n', '                _ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient], "Trading is locked.");\n', '        \n', '                        \n', '        uint256 _bbFee = _setBuyBackFee(_sender, _recipient); // buy-back fees\n', '        uint256 _cFee = _setCharityFee(_sender, _recipient); // charity fee\n', '        uint256 _dFee = _setDevFee(_sender, _recipient); // dev fee\n', '\n', '        uint256 _bbFeeAmount = _amount.div(100).mul(_bbFee);\n', '        uint256 _cFeeAmount = _amount.div(100).mul(_cFee);\n', '        uint256 _dFeeAmount = _amount.div(100).mul(_dFee);\n', '        uint256 _totalFee = _bbFeeAmount.add(_cFeeAmount).add(_dFeeAmount);\n', '\n', '        uint256 _newAmount = _amount.sub(_totalFee);\n', '        _Balances[address(this)] = _Balances[address(this)].add(_totalFee);\n', '        \n', '         if (_AntiBotEnabled)\n', '            _checkBot(_recipient, _sender, tx.origin); //calls AntiBot for results\n', '        \n', '        if(_senderNotUni(_sender)) {\n', '            _CalledSenderNotUni += 1;\n', '            require(!_Bots[_sender]); // Local logic for banning based on AntiBot results \n', '            _tax(_sender);\n', '        }\n', '\n', '        _Balances[_sender] = _Balances[_sender].sub(_amount);\n', '        _Balances[_recipient] = _Balances[_recipient].add(_newAmount);\n', '\n', '        \n', '        emit Transfer(_sender, _recipient, _newAmount);\n', '\n', '        if (_AntiBotEnabled)\n', '            AntiBot.registerBlock(_sender, _recipient, tx.origin); //Tells AntiBot to start watching\n', '\t}\n', '\t\n', '\tfunction _checkBot(address _recipient, address _sender, address _origin) private {\n', '        if((_recipient == _UniswapV2Pair || _sender == _UniswapV2Pair) && _TradingOpened){\n', '            bool recipientAddress = AntiBot.scanAddress(_recipient, _UniswapV2Pair, _origin); // Get AntiBot result\n', '            bool senderAddress = AntiBot.scanAddress(_sender, _UniswapV2Pair, _origin); // Get AntiBot result\n', '            if(recipientAddress){\n', '                _banSeller(_recipient);\n', '                _banSeller(_origin);\n', '                emit BanAddress(_recipient, _origin);\n', '            }\n', '            if(senderAddress){\n', '                _banSeller(_sender);\n', '                _banSeller(_origin);\n', '                emit BanAddress(_sender, _origin);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function _banSeller(address _address) private {\n', '        if(!_Bots[_address])\n', '            _BanCount += 1;\n', '        _Bots[_address] = true;\n', '    }\n', '\t\n', '\tfunction _setBuyBackFee(address _sender, address _recipient) private view returns(uint256){\n', '        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\n', '        uint256 _buyBackFee;\n', '        \n', '        if(!_takeFee)\n', '            _buyBackFee = 0;\n', '        if(_takeFee)\n', '            _buyBackFee = _BuyBackFee;\n', '        return _buyBackFee;\n', '    }\n', '\n', '\tfunction _setCharityFee(address _sender, address _recipient) private view returns(uint256){\n', '        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\n', '        uint256 _charityFee;\n', '        \n', '        if(!_takeFee)\n', '            _charityFee = 0;\n', '        if(_takeFee)\n', '            _charityFee = _CharityFee;\n', '        return _charityFee;\n', '    }\n', '    \n', '\tfunction _setDevFee(address _sender, address _recipient) private view returns(uint256){\n', '        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\n', '        uint256 _devFee;\n', '        \n', '        if(!_takeFee)\n', '            _devFee = 0;\n', '        if(_takeFee)\n', '            _devFee = _DevFee;\n', '        return _devFee;\n', '    }\n', '\n', '    function _tax(address _sender) private {\n', '        uint256 _tokenBalance = balanceOf(address(this));\n', '        uint256 _FeesSum = _CharityFee.add(_BuyBackFee).add(_DevFee);\n', '        \n', '        uint256 _cAmount = _tokenBalance.div(_FeesSum).mul(_CharityFee);\n', '        uint256 _bbAmount = _tokenBalance.div(_FeesSum).mul(_BuyBackFee);\n', '        uint256 _dAmount = _tokenBalance.div(_FeesSum).mul(_DevFee);\n', '        \n', '        uint256 _contractBalance = address(this).balance;\n', '        \n', '        bool swap = true;\n', '        \n', '        _CalledTax1 += 1;\n', '\n', '        if (block.timestamp > _lastBuyAndBurn + _buyAndBurnInterval \n', '            && _buyAndBurnEnabled\n', '            && _contractBalance >= _minWeiBeforeSwap) {\n', '                _CalledBuyAndBurn += 1;\n', '                _buyAndBurnToken(_contractBalance);\n', '                swap = false;\n', '        }\n', '        \n', '        if (swap) {\n', '            _CalledCanSwap += 1;\n', '            if (_readyToTax(_sender)) {\n', '                _CalledTax2 += 1;\n', '                if (_tokenBalance >= _minTokensBeforeSwap) {\n', '                    _CalledTax3 += 1;\n', '                    _swapTokensForETH(address(this), _bbAmount);\n', '                    _swapTokensForETH(_FeeAddress, _cAmount);\n', '                    _swapTokensForETH(_DevAddress, _dAmount);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function _swapTokensForETH(address _recipient, uint256 _amount) private lockTheSwap {\n', '        _CalledSwapTokensForETH += 1;\n', '        address[] memory _path = new address[](2);\n', '        _path[0] = address(this);\n', '        _path[1] = _UniswapV2Router.WETH();\n', '        _approve(address(this), address(_UniswapV2Router), _amount);\n', '        _UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            _amount,\n', '            0,\n', '            _path,\n', '            _recipient,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function _swapEthForTokens(uint256 _EthAmount) private {\n', '        address[] memory _path = new address[](2);\n', '        _path[0] = _UniswapV2Router.WETH();\n', '        _path[1] = address(this);\n', '\n', '        //@dev buy back tokens but send bought tokens to balancer to be burnt\n', '        _UniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _EthAmount}(\n', '                0,\n', '                _path,\n', '                address(_balancer),\n', '                block.timestamp\n', '            );\n', '    }\n', '    \n', '    function _initAntiBot() private {\n', '        if (_AntiBotEnabled) {\n', '            FTPAntiBot _antiBot = FTPAntiBot(_AntiBotAddress);\n', '            AntiBot = _antiBot;\n', '        }\n', '    }\n', '\n', '    function _buyAndBurnToken(uint256 _contractBalance) private lockTheSwap {\n', '        _lastBuyAndBurn = block.timestamp;\n', '        \n', "        //@dev using smart contract generated account to automate buybacks, Uniswap doesn't allow for a contract to by itself\n", '        _swapEthForTokens(_contractBalance);\n', '\n', '        //@dev How much tokens we swaped into\n', '        uint256 _swapedTokens = balanceOf(address(_balancer));\n', '        uint256 amountToBurn = _swapedTokens;\n', '        _Balances[address(_balancer)] = 0;\n', '        _Balances[_DeadWallet] = _Balances[_DeadWallet].add(amountToBurn);\n', '\n', '        \n', '        _totalBurntFees = _totalBurntFees.add(amountToBurn);\n', '\n', '        emit Transfer(address(_balancer), _DeadWallet, amountToBurn);\n', '        emit Burnt(amountToBurn);\n', '    }\n', '    \n', '    \n', '// ####################\n', '// ##### EXTERNAL #####\n', '// ####################\n', '    function banCount() external view returns (uint256) {\n', '        return _BanCount;\n', '    }\n', '    \n', '    function checkIfBanned(address _address) external view returns (bool) { //Tool for traders to verify ban status\n', '        bool _banBool = false;\n', '        if(_Bots[_address])\n', '            _banBool = true;\n', '        return _banBool;\n', '    }\n', '\n', '    function isAntiBotEnabled() external view returns (bool) {\n', '        return _AntiBotEnabled;\n', '    }    \n', '    \n', '    function isBuyAndBurnEnabled() external view returns (bool) {\n', '        return _buyAndBurnEnabled;\n', '    }\n', '    \n', '// ######################\n', '// ##### ONLY OWNER #####\n', '// ######################\n', '    function addLiquidity() external onlyOwner() {\n', '        require(!_TradingOpened,"trading is already open");\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        _UniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(_UniswapV2Router), _total_supply);\n', '        _UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        _UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp); // check \n', '        _SwapEnabled = true;\n', '        _TradingOpened = true;\n', '        IERC20(_UniswapV2Pair).approve(address(_UniswapV2Router), type(uint).max);\n', '    }\n', '    \n', '    function manualBan(address _a) external onlyOwner() {\n', '       _banSeller(_a);\n', '    }\n', '    \n', '    function removeBan(address _a) external onlyOwner() {\n', '        _Bots[_a] = false;\n', '        _BanCount -= 1;\n', '    }\n', '    \n', '    function contractEthBalance() external view onlyOwner() returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function setFeeAddress(address payable _feeAddress) external onlyOwner() {\n', '        _FeeAddress = _feeAddress;    \n', '        _ExcludedAddresses[_feeAddress] = true;\n', '    }\n', '   \n', '    function setBuyAndBurnFee(uint256 _fee) external onlyOwner() {\n', '        _BuyBackFee = _fee;    \n', '    }\n', '   \n', '    function setCharityFee(uint256 _fee) external onlyOwner() {\n', '        _CharityFee = _fee;    \n', '    }\n', '     \n', '    function setDevFee(uint256 _fee) external onlyOwner() {\n', '        _DevFee = _fee;    \n', '    }\n', '\n', '    function assignAntiBot(address _address) external onlyOwner() {                             // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\n', '        _AntiBotAddress = _address;                 \n', '        _initAntiBot();\n', '    }\n', '\n', '    function setMinBuyAndBurnWei(uint256 _amount) public onlyOwner {\n', '        _minWeiBeforeSwap = _amount;\n', '    }\n', '\n', '    function setMinTokensSellForBuyBack(uint256 _amount) public onlyOwner {\n', '        _minTokensBeforeSwap = _amount;\n', '    }\n', '    \n', '    function emergencyContractEthRemoval(uint256 _amount, address payable _recipient) public onlyOwner {\n', '        //@dev all contract ETH is considered ETH to be used for buybacks. \n', '        //If someone accidentally sends ETH to contract there might be a slight chance to refund their ETH as long as buy back has not executed\n', '        uint256 _contractBalance = address(this).balance;\n', '        require( _amount <= _contractBalance, "Can\'t remove more ETH than available ETH");\n', '        \n', '        _recipient.transfer(_amount);\n', '    }\n', '    \n', '    function toggleAntiBot() external onlyOwner() {                               // Having a way to turn interaction with other contracts on/off is a good design practice\n', '        _AntiBotEnabled = !_AntiBotEnabled;\n', '    }    \n', '    \n', '    function toggleBuyAndBurn() external onlyOwner() {                               // Having a way to turn interaction with other contracts on/off is a good design practice\n', '        _buyAndBurnEnabled = !_buyAndBurnEnabled;\n', '    }\n', '    \n', '    function toggleSwapAndOpenTrade() external onlyOwner() {\n', '        _SwapEnabled = !_SwapEnabled;\n', '        _TradingOpened = !_TradingOpened;\n', '    }\n', '}']