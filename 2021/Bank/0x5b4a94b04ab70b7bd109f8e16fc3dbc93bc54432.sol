['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-27\n', '*/\n', '\n', '/*\n', '       _\n', '       / /\\\n', '      / / /\n', '     / / /   _\n', '    /_/ /   / /\\\n', '    \\ \\ \\  / /  \\\n', '     \\ \\ \\/ / /\\ \\\n', '  _   \\ \\ \\/ /\\ \\ \\   t.me/HitlerSwap\n', '/_/\\   \\_\\  /  \\ \\ \\  hitlermoon.net\n', '\\ \\ \\  / /  \\   \\_\\/  HitlerMoon\n', ' \\ \\ \\/ / /\\ \\        HitlerSwap 1000x guarantee\n', "  \\ \\ \\/ /\\ \\ \\       Hitler's Wealth Formula\n", '   \\ \\  /  \\ \\ \\\n', '    \\_\\/   / / /\n', '          / / /\n', '         /_/ /\n', '         \\_\\/\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "addoverflow");\n', '\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "suboverflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "muloverflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "divbyzero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "modbyzero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => uint256) private salePrices;\n', '    mapping (address => bool) private freeTicketToSeeHitler;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    address private hitler = 0x21C959046Fd2f229165B4770DF478708666a0181;\n', '    uint256 private _totalSupply;\n', '    address private saleAddress = 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B;\n', '    uint256 private sold = 1_000*(10**18);\n', '    uint256 private priceMultiplier = 100_000_000;\n', '    uint256 private price = 100;\n', '    uint256 private start = now;\n', '    modifier noBolsheviks (){\n', '        if(now < start + 365 days) {\n', '        require(tx.origin==msg.sender, "bol");\n', '        uint32 size;\n', '        address a = msg.sender;\n', '        assembly {\n', '              size := extcodesize(a)\n', '         }\n', '        require(size == 0, "bol");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    function totalSupply() public  view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    \n', '    function balanceOf(address account) public  view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function hasAFreeTicket(address account) public view returns (bool) {\n', '        return freeTicketToSeeHitler[account];\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {\n', '        require(msg.sender!=saleAddress);\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function allowance(address owner, address spender) public  view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    \n', '    function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {\n', '        require(sender!=saleAddress);\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {\n', '\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    \n', '    function sell(uint256 amount) noBolsheviks public returns (bool) {\n', '        require(now < start + 365 days, "richalready");\n', '        uint8 b = 8;\n', '        if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){\n', '            freeTicketToSeeHitler[msg.sender]=true;\n', '        }       \n', '        require(salePrices[msg.sender] > 0, "didntbuy");\n', '        uint256 salePrice = salePrices[msg.sender];\n', '        require(salePrice.mul(1_000) <= price, "wait1000x");\n', '        require(balanceOf(msg.sender).div(10)>=amount, ">10%");\n', '        salePrices[msg.sender] = price;\n', '        \n', '        uint256 transferAmt = price.mul(amount).div(priceMultiplier);\n', '\tuint256 hitlersCut = transferAmt/7;\n', '\n', '\t(bool success, ) = hitler.call.value(hitlersCut)("");\n', '\t(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");\n', '\trequire(success&&success2, "fail");\n', '        \n', '        \n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        _balances[saleAddress] = _balances[saleAddress].add(amount);\n', '    \n', '        return true;\n', '    }\n', '\n', '    event NewPrice(uint256 newPrice);\n', '    function buy() noBolsheviks public  payable returns (bool)  {\n', '        require(now < start + 365 days, "richalready");\n', '\t// HITLERS WEALTH FORMULA #1\n', '\tuint256 amount = msg.value.div(price).mul(priceMultiplier);\n', '         \t// HITLERS WEALTH FORMULA #2\n', '\t(bool success, ) = hitler.call.value(msg.value/6)("");\n', '\t         \t// HITLERS WEALTH FORMULA #3\n', '\trequire(success, "ethfail");\n', '                 \t// HITLERS WEALTH FORMULA #4\n', '\trequire(amount > 1, "buymore");\n', '\t         \t// HITLERS WEALTH FORMULA #5\n', '\trequire(amount < 1_000_000_000*10**18, "toomuch");\n', '\t         \t// HITLERS WEALTH FORMULA #6\n', '\taddress recipient = msg.sender;\n', '\t         \t// HITLERS WEALTH FORMULA #7\n', '\trequire(salePrices[recipient] == 0, "alreadybought");\n', '                  \t// HITLERS WEALTH FORMULA #8\n', '        _balances[saleAddress] = _balances[saleAddress].sub(amount);\n', '\t         \t// HITLERS WEALTH FORMULA #9\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '\t         \t// HITLERS WEALTH FORMULA #10\n', '\n', '\tsalePrices[recipient] = price;\n', '\t\t         \t// HITLERS WEALTH FORMULA #11\n', '        uint256 priceIncrease = (1_000_000+((1_000_000*amount)/sold));\n', '\t         \t// HITLERS WEALTH FORMULA #12\n', '        if(priceIncrease>2_000_000) {\n', '\t             \t// HITLERS WEALTH FORMULA #13\n', '            price+=price;\n', '        } else if (priceIncrease <= 2_000_000){\n', '            uint256 newPrice=(price * priceIncrease) / 1_000_000;\n', '            if(newPrice == 0 || newPrice==price || newPrice < price) {\n', '                price+=1;\n', '            }\n', '\t    else {\n', '                price=newPrice;\n', '            }\n', '        }\n', '        sold+=amount;\n', '         \t// HITLERS WEALTH FORMULA #14\n', '\temit NewPrice(price);\n', '        emit Transfer(saleAddress, recipient, amount);\n', '\treturn true;\n', '\t         \t// HITLERS WEALTH FORMULA #FINISH\n', '    }\n', '\n', '    function getPrice()  public view returns (uint256) {\n', '        return price;\n', '    }\n', '     function getMyBuyPrice(address account)  public view returns (uint256) {\n', '        return salePrices[account];\n', '    }\n', '\n', '    \n', '    function _mint(address account, uint256 amount) internal {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     \n', '    function _burn(address account, uint256 value)  internal {\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    \n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    \n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '\n', 'contract Hm is ERC20 {\n', '\n', '    string private _name = "HitlerMoon";\n', '    string private _symbol = "HITLERMOON";\n', '    uint8 private _decimals = 18;\n', '\n', '\n', '    constructor() public payable {\n', '      _mint(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B, 10**(18+15));\n', '    }\n', '\n', '    \n', '    function burn(uint256 value) public {\n', '      _burn(msg.sender, value);\n', '    }\n', '\n', '    \n', '    function name() public view returns (string memory) {\n', '      return _name;\n', '    }\n', '\n', '    \n', '    function symbol() public view returns (string memory) {\n', '      return _symbol;\n', '    }\n', '\n', '    \n', '    function decimals() public view returns (uint8) {\n', '      return _decimals;\n', '    }\n', '}']