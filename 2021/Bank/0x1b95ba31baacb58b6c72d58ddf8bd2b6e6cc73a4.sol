['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', 'pragma solidity >=0.5.12;\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient {\n', '    event receivedEther(address sender, uint amount);\n', '    event receivedTokens(address _from, uint256 _value, address _token, bytes _extraData);\n', '\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n', '        Token t = Token(_token);\n', '        require(t.transferFrom(_from, address(this), _value));\n', '        emit receivedTokens(_from, _value, _token, _extraData);\n', '    }\n', '\n', '    function () payable external {\n', '        emit receivedEther(msg.sender, msg.value);\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/**\n', ' * The PubeCoin DevTeam contract\n', ' */\n', 'contract PubeCoinDevTeam is owned, tokenRecipient {\n', '    Token public tokenAddress;\n', '    bool public initialized = false;\n', '\n', '    event Initialized();\n', '    event WithdrawTokens(address destination, uint256 amount);\n', '    event WithdrawAnyTokens(address tokenAddress, address destination, uint256 amount);\n', '    event WithdrawEther(address destination, uint256 amount);\n', '\n', '\n', '    /**\n', '     * Constructor\n', '     *\n', '     * First time rules setup \n', '     */\n', '    constructor() payable public {\n', '    }\n', '\n', '\n', '    /**\n', '     * Initialize contract\n', '     *\n', '     * @param _tokenAddress token address\n', '     */\n', '    function init(Token _tokenAddress) onlyOwner public {\n', '        require(!initialized);\n', '        initialized = true;\n', '        tokenAddress = _tokenAddress;\n', '        emit Initialized();\n', '    }\n', '\n', '\n', '    /**\n', '     * withdrawTokens\n', '     *\n', '     * Withdraw tokens from the contract\n', '     *\n', '     * @param amount is an amount of tokens\n', '     */\n', '    function withdrawTokens(\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        require(initialized);\n', '        tokenAddress.transfer(msg.sender, amount);\n', '        emit WithdrawTokens(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * withdrawAnyTokens\n', '     *\n', '     * Withdraw any tokens from the contract\n', '     *\n', '     * @param _tokenAddress is a token contract address\n', '     * @param amount is an amount of tokens\n', '     */\n', '    function withdrawAnyTokens(\n', '        address _tokenAddress,\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        Token(_tokenAddress).transfer(msg.sender, amount);\n', '        emit WithdrawAnyTokens(_tokenAddress, msg.sender, amount);\n', '    }\n', '    \n', '    /**\n', '     * withdrawEther\n', '     *\n', '     * Withdraw ether from the contract\n', '     *\n', '     * @param amount is a wei amount \n', '     */\n', '    function withdrawEther(\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        msg.sender.transfer(amount);\n', '        emit WithdrawEther(msg.sender, amount);\n', '    }\n', '    \n', '    /**\n', '     * Execute transaction\n', '     *\n', '     * @param transactionBytecode transaction bytecode\n', '     */\n', '    function execute(bytes memory transactionBytecode) onlyOwner public {\n', '        require(initialized);\n', '        (bool success, ) = msg.sender.call.value(0)(transactionBytecode);\n', '            require(success);\n', '    }\n', '}']