['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '/**\n', '\n', '███████╗███╗░░░███╗░█████╗░████████╗██████╗░██╗██╗░░██╗\n', '██╔════╝████╗░████║██╔══██╗╚══██╔══╝██╔══██╗██║╚██╗██╔╝\n', '█████╗░░██╔████╔██║███████║░░░██║░░░██████╔╝██║░╚███╔╝░\n', '██╔══╝░░██║╚██╔╝██║██╔══██║░░░██║░░░██╔══██╗██║░██╔██╗░\n', '███████╗██║░╚═╝░██║██║░░██║░░░██║░░░██║░░██║██║██╔╝╚██╗\n', '╚══════╝╚═╝░░░░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝╚═╝░░╚═╝\n', '\n', 'https://t.me/ethereumatrix\n', 'https://ethereumatrix.com/\n', 'https://twitter.com/ethereumatrix\n', 'https://www.reddit.com/r/EthereuMatrix/\n', '\n', 'Token Information\n', '1. Total 1,000,000,000,000\n', '2. 7% buy-back tax\n', '3. Auto buy-back after each sell when buy-back mode is turned on \n', '4. Dev will turn on buy-back mode when price is low, and turn it off when price is high\n', '5. Fair launch on Ethereum\n', '6. Anti-robot protection\n', '7. 0.5% initial buy limit in the first 5 minutes\n', '8. 3% marketing fee and team fee\n', '9. No presale\n', '10. No team tokens\n', '11. Contract renounced on launch\n', '12. LP locked on launch\n', '*/\n', '// SPDX-License-Identifier: Unlicensed\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '}\n', '\n', 'contract EthereuMatrix is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string private constant _name = "EthereuMatrix";\n', '    string private constant _symbol = "eMTX";\n', '    uint8 private constant _decimals = 9;\n', '    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n', '    mapping(address => uint256) private _owned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '\n', '    uint256 private constant _total = 1_000_000_000_000 * 10**9;\n', '    \n', '    uint256 private _teamFee = 3;\n', '    uint256 private _buybackFee = 7;\n', '\n', '    // Bot detection\n', '    mapping(address => bool) private bots;\n', '    mapping(address => uint256) private cooldown;\n', '    \n', '    address payable private _teamCOOAddr;//\n', '    address payable private _teamMktAddress1;// market\n', '    address payable private _teamMktAddress2;// \n', '    address payable private _teamMktAddress3;\n', '    address payable private _teamCTOAddr;\n', '\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address private uniswapV2Pair;\n', '    bool private tradingOpen;\n', '    bool private inSwap = false;\n', '    bool private swapEnabled = false;\n', '    bool private cooldownEnabled = false;\n', '    uint256 private _maxTxAmount = _total;\n', '    uint256 public launchBlock;\n', '\n', '    event MaxTxAmountUpdated(uint256 amount_);\n', '    event BuyBack(uint256 amount_);\n', '\n', '    uint256 _buybackpercent = 3;//default is 3%;\n', '    bool _buybackEnabled = false;\n', '    uint256 _buybackThresold = 0;\n', '    \n', '    modifier lockTheSwap {\n', '        inSwap = true;\n', '        _;\n', '        inSwap = false;\n', '    }\n', '\n', '    modifier checkPermission() {\n', '        require(_teamCTOAddr == _msgSender() || owner() == _msgSender(), "permission denied.");\n', '        _;\n', '    }\n', '\n', '    constructor(address payable cooAddr, \n', '                address payable mktAddr1,\n', '                address payable mktAddr2,\n', '                address payable mktAddr3,\n', '                address payable ctoAddr) {\n', '\n', '        _teamCOOAddr = cooAddr;\n', '        _teamMktAddress1 = mktAddr1;\n', '        _teamMktAddress2 = mktAddr2;\n', '        _teamMktAddress3 = mktAddr3;\n', '        _teamCTOAddr = ctoAddr;\n', '        \n', '        _owned[address(this)] = _total;\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _isExcludedFromFee[_teamCOOAddr] = true;\n', '        _isExcludedFromFee[_teamMktAddress1] = true;\n', '        _isExcludedFromFee[_teamMktAddress2] = true;\n', '        _isExcludedFromFee[_teamMktAddress3] = true;\n', '        _isExcludedFromFee[_teamCTOAddr] = true;\n', '\n', '        emit Transfer(address(0), address(this), _total);\n', '    }\n', '\n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public pure override returns (uint256) {\n', '        return _total;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _owned[account];\n', '    }\n', '\n', '    function isBot(address account) public view returns (bool) {\n', '        return bots[account];\n', '    }\n', '\n', '    function isBuybackEnabled() public view returns (bool) {\n', '        return _buybackEnabled;\n', '    }\n', '\n', '    function buybackThreshold() public view returns (uint256) {\n', '        return _buybackThresold;\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function setCooldownEnabled(bool onoff) external checkPermission() {\n', '        cooldownEnabled = onoff;\n', '    }\n', '\n', '    function removeAllFee() private {\n', '        _teamFee = 0;\n', '        _buybackFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _teamFee = 3;\n', '        _buybackFee = 7;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        if (from != owner() && to != owner()) {\n', '            if (cooldownEnabled) {\n', '                if (\n', '                    from != address(this) &&\n', '                    to != address(this) &&\n', '                    from != address(uniswapV2Router) &&\n', '                    to != address(uniswapV2Router)\n', '                ) {\n', '                    require(\n', '                        _msgSender() == address(uniswapV2Router) ||\n', '                            _msgSender() == uniswapV2Pair,\n', '                        "ERR: Uniswap only"\n', '                    );\n', '                }\n', '            }\n', '            require(amount <= _maxTxAmount);\n', '            require(!bots[from] && !bots[to] && !bots[msg.sender]);\n', '\n', '            if (\n', '                from == uniswapV2Pair &&\n', '                to != address(uniswapV2Router) &&\n', '                !_isExcludedFromFee[to] &&\n', '                cooldownEnabled\n', '            ) {\n', '                require(cooldown[to] < block.timestamp);\n', '                cooldown[to] = block.timestamp + (60 seconds);\n', '            }\n', '\n', '            if (block.number <= launchBlock + 2 && !_isExcludedFromFee[to]) {\n', '                if (from != uniswapV2Pair && from != address(uniswapV2Router)) {\n', '                    bots[from] = true;\n', '                } else if (to != uniswapV2Pair && to != address(uniswapV2Router)) {\n', '                    bots[to] = true;\n', '                }\n', '            }\n', '\n', '            uint256  contractTokenBalance = balanceOf(address(this));\n', '            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n', '                uint256 oldBalance = address(this).balance;\n', '                swapTokensForEth(contractTokenBalance);\n', '                uint256 contractETHBalance = address(this).balance;\n', '                if (contractETHBalance > 0) {\n', '                    sendETHToFee(address(this).balance, oldBalance);\n', '                }\n', '\n', '                if (to == uniswapV2Pair && _buybackEnabled && amount > _buybackThresold) {\n', '                    buybackToken();\n', '                }\n', '            }\n', '        }\n', '        bool takeFee = true;\n', '\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '        }\n', '\n', '        _tokenTransfer(from, to, amount, takeFee);\n', '        \n', '    }\n', '\n', '    function _tokenTransfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount,\n', '        bool takeFee\n', '    ) private {\n', '        if (!takeFee) removeAllFee();\n', '        _transferStandard(sender, recipient, amount);\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) private {\n', '        uint256 fee = _teamFee + _buybackFee;\n', '        uint256 totalFee = amount.mul(fee).div(100);\n', '        uint256 received = amount.sub(totalFee);\n', '\n', '        _owned[sender] = _owned[sender].sub(amount);\n', '        _owned[recipient] = _owned[recipient].add(received);\n', '        _owned[address(this)] = _owned[address(this)].add(totalFee);\n', '\n', '        if(totalFee != 0){\n', '            emit Transfer(sender, address(this), totalFee);\n', '        }\n', '        emit Transfer(sender, recipient, received);\n', '    }\n', '\n', '    function buybackToken() private lockTheSwap {\n', '        uint256 ethbalance = address(this).balance;\n', '        if(ethbalance == 0){\n', '            return;\n', '        }\n', '        \n', '        uint256 amount = ethbalance.mul(_buybackpercent).div(100);\n', '\n', '        if(amount == 0 ){ //< 0.0001 ether){\n', '            return;\n', '        }\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswapV2Router.WETH();\n', '        path[1] = address(this);\n', '\n', '        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\n', '            0, // accept any amount of Tokens\n', '            path,\n', '            deadAddress,\n', '            block.timestamp.add(300)\n', '        );\n', '    \n', '        emit BuyBack(amount);\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0,\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function sendETHToFee(uint256 amount, uint256 oldAmount) private {\n', '        \n', '        uint256 feeAmount = amount.sub(oldAmount);\n', '\n', '        uint256 totalPercent = _teamFee.add(_buybackFee);\n', '\n', '        uint256 teamEth = feeAmount.mul(_teamFee).div(totalPercent);\n', '\n', '        uint256 share = teamEth.div(5);\n', '        uint256 remain = teamEth.sub(share.mul(4));\n', '\n', '        _teamCOOAddr.transfer(share);\n', '        _teamMktAddress1.transfer(share);\n', '        _teamMktAddress2.transfer(share);\n', '        _teamMktAddress3.transfer(share);\n', '        _teamCTOAddr.transfer(remain);\n', '    }\n', '\n', '\n', '    function sendETHToFeeRemain(uint256 amount) private {\n', '        uint256 share = amount.div(5);\n', '        uint256 remain = amount.sub(share.mul(4));\n', '\n', '        _teamCOOAddr.transfer(share);\n', '        _teamMktAddress1.transfer(share);\n', '        _teamMktAddress2.transfer(share);\n', '        _teamMktAddress3.transfer(share);\n', '        _teamCTOAddr.transfer(remain);\n', '    }\n', '\n', '    function openTrading() external onlyOwner() {\n', '        require(!tradingOpen, "trading is already open");\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _total);\n', '\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '            .createPair(address(this), _uniswapV2Router.WETH());\n', '        \n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n', '            address(this),\n', '            balanceOf(address(this)),\n', '            0,\n', '            0,\n', '            owner(),\n', '            block.timestamp\n', '        );\n', '\n', '        IERC20(uniswapV2Pair).approve(\n', '            address(uniswapV2Router),\n', '            type(uint256).max\n', '        );\n', '\n', '        swapEnabled = true;\n', '        cooldownEnabled = true;\n', '        _maxTxAmount = 5_000_000_000 * 10**9;\n', '        launchBlock = block.number;\n', '        tradingOpen = true;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function manualswap() public checkPermission() {\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        uint256 oldBalance = address(this).balance;\n', '        swapTokensForEth(contractBalance);\n', '        uint256 contractETHBalance = address(this).balance;\n', '        sendETHToFee(contractETHBalance, oldBalance);\n', '    }\n', '\n', '    function manualSend() public checkPermission() {\n', '        uint256 contractETHBalance = address(this).balance;\n', '        sendETHToFeeRemain(contractETHBalance);\n', '    }\n', '\n', '    function setMaxTxPercent(uint256 maxTxPercent) external checkPermission() {\n', '        require(maxTxPercent > 0);\n', '        _maxTxAmount = _total.mul(maxTxPercent).div(1000);\n', '        emit MaxTxAmountUpdated(_maxTxAmount);\n', '    }\n', '    \n', '    function setBuybackPercent(uint256 percent_) external checkPermission() {\n', '        require(percent_ > 0);\n', '        _buybackpercent = percent_;\n', '    }\n', '    function setBuybackThreshold(uint256 thresold_) external checkPermission() {\n', '        require(thresold_ > 0);\n', '        _buybackThresold = thresold_;\n', '    }\n', '\n', '    function setBuybackEnabled(bool enabled) external checkPermission() {\n', '        _buybackEnabled = enabled;\n', '    }\n', '\n', '    function setBots(address[] memory bots_) public checkPermission() {\n', '        for (uint256 i = 0; i < bots_.length; i++) {\n', '            bots[bots_[i]] = true;\n', '        }\n', '    }\n', '\n', '    function delBot(address addr) public checkPermission() {\n', '        bots[addr] = false;\n', '    }\n', '\n', '}']