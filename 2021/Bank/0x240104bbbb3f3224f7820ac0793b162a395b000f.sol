['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-11\n', '*/\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/math/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC1155/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '\n', '// File contracts/PLASMA.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract MrFusion {\n', '    constructor() {}\n', '}\n', '\n', 'contract Reactor {\n', '    using SafeMath for uint256;\n', '\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '    PLASMA private _tokenContract;\n', '\n', '    constructor(PLASMA tokenContract, IUniswapV2Router02 uniswapV2Router) {\n', '        _tokenContract = tokenContract;\n', '        _uniswapV2Router = uniswapV2Router;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function rebalance() external returns (uint256 rebal) {\n', '        swapEthForTokens(address(this).balance);\n', '    }\n', '\n', '    function swapEthForTokens(uint256 EthAmount) private {\n', '        address[] memory uniswapPairPath = new address[](2);\n', '        uniswapPairPath[0] = _uniswapV2Router.WETH();\n', '        uniswapPairPath[1] = address(_tokenContract);\n', '\n', '        _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n', '            value: EthAmount\n', '        }(0, uniswapPairPath, address(this), block.timestamp);\n', '    }\n', '}\n', '\n', 'contract TimeCircuts {\n', '    using SafeMath for uint256;\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '    PLASMA private _tokenContract;\n', '\n', '    constructor(PLASMA tokenContract, IUniswapV2Router02 uniswapV2Router) {\n', '        _tokenContract = tokenContract;\n', '        _uniswapV2Router = uniswapV2Router;\n', '    }\n', '\n', '    function swapTokens(address pairTokenAddress, uint256 tokenAmount)\n', '        external\n', '    {\n', '        uint256 initialPairTokenBalance =\n', '            IERC20(pairTokenAddress).balanceOf(address(this));\n', '        swapTokensForTokens(pairTokenAddress, tokenAmount);\n', '        uint256 newPairTokenBalance =\n', '            IERC20(pairTokenAddress).balanceOf(address(this)).sub(\n', '                initialPairTokenBalance\n', '            );\n', '        IERC20(pairTokenAddress).transfer(\n', '            address(_tokenContract),\n', '            newPairTokenBalance\n', '        );\n', '    }\n', '\n', '    function swapTokensForTokens(address pairTokenAddress, uint256 tokenAmount)\n', '        private\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(_tokenContract);\n', '        path[1] = pairTokenAddress;\n', '\n', '        _tokenContract.approve(address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of pair token\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '}\n', '\n', 'contract PLASMA is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    mapping(address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '    address public _anomalieAddress;\n', '    address public _mrFusion;\n', '    uint256 public _initialMrFusionLockAmount;\n', '    uint256 public _initialFluxAmount;\n', '    address public _uniswapETHPool;\n', '    address public _fluxCapacitor;\n', '    address public _orbs;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 6000000e18;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 public _tFeeTotal;\n', '    uint256 public _tBurnTotal;\n', '\n', '    string private _name = "PLASMA";\n', '    string private _symbol = "PLASMA";\n', '    uint8 private _decimals = 18;\n', '\n', '    uint256 public _feeDecimals = 1;\n', '    uint256 public _taxFee;\n', '    uint256 public _lockFee;\n', '    uint256 public _maxTxAmount = 100000e18;\n', '    uint256 public _minTokensBeforeSwap = 1000e18;\n', '    uint256 public _minInterestForReward = 10e18;\n', '    uint256 private _autoSwapCallerFee = 200e18;\n', '\n', '    bool private inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled;\n', '    bool public tradingEnabled;\n', '    bool public clearenceCheckEnabled;\n', '\n', '    address private currentPairTokenAddress;\n', '    address private currentPoolAddress;\n', '\n', '    uint256 private _liquidityRemoveFee = 2;\n', '    uint256 private _fusionCallerFee = 5;\n', '    uint256 private _minTokenForfusion = 1000e18;\n', '    uint256 private _lastfusion;\n', '    uint256 private _fusionInterval = 1 hours;\n', '\n', '    uint256 private _fluxCapacitorFee = 10;\n', '    uint256 private _powerFee = 5;\n', '\n', '    event Loged(address indexed madScientist, uint256 amount);\n', '    event Unloged(address indexed madScientist, uint256 amount);\n', '\n', '    event FeeDecimalsUpdated(uint256 taxFeeDecimals);\n', '    event TaxFeeUpdated(uint256 taxFee);\n', '    event LockFeeUpdated(uint256 lockFee);\n', '    event MaxTxAmountUpdated(uint256 maxTxAmount);\n', '    event WhitelistUpdated(address indexed pairTokenAddress);\n', '    event TradingEnabled();\n', '    event ClearenceCheckEnabledUpdated(bool enabled);\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        address indexed pairTokenAddress,\n', '        uint256 tokensSwapped,\n', '        uint256 pairTokenReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '    event Rebalance(uint256 tokenBurnt);\n', '    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\n', '    event MinInterestForRewardUpdated(uint256 minInterestForReward);\n', '    event LiquidityRemoveFeeUpdated(uint256 liquidityRemoveFee);\n', '    event fusionCallerFeeUpdated(uint256 rebalnaceCallerFee);\n', '    event MinTokenForfusionUpdated(uint256 minRebalanceAmount);\n', '    event fusionIntervalUpdated(uint256 rebalanceInterval);\n', '\n', '    event AnomaliesAddressUpdated(address anomalies);\n', '    event PowerFeeUpdated(uint256 powerFee);\n', '\n', '    event fluxCapacitorUpdated(address fluxCapacitor);\n', '    event fluxCapacitorFeeUpdated(uint256 fluxCapacitorFee);\n', '\n', '    event orbsUpdated(address orbs);\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '    Reactor public reactor;\n', '    TimeCircuts public timeCircuts;\n', '\n', '    constructor(\n', '        IUniswapV2Router02 uniswapV2Router,\n', '        uint256 initialMrFusionLockAmount\n', '    ) {\n', '        _lastfusion = block.timestamp;\n', '\n', '        _uniswapV2Router = uniswapV2Router;\n', '        _mrFusion = address(new MrFusion());\n', '        _initialMrFusionLockAmount = initialMrFusionLockAmount;\n', '\n', '        reactor = new Reactor(this, uniswapV2Router);\n', '        timeCircuts = new TimeCircuts(this, uniswapV2Router);\n', '\n', '        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\n', '            .createPair(address(this), uniswapV2Router.WETH());\n', '        currentPairTokenAddress = uniswapV2Router.WETH();\n', '        _uniswapETHPool = currentPoolAddress;\n', '\n', '        updateSwapAndLiquifyEnabled(false);\n', '\n', '        _rOwned[_msgSender()] = reflectionFromToken(\n', '            _tTotal.sub(_initialMrFusionLockAmount),\n', '            false\n', '        );\n', '\n', '        _rOwned[_mrFusion] = reflectionFromToken(\n', '            _initialMrFusionLockAmount,\n', '            false\n', '        );\n', '\n', '        emit Transfer(\n', '            address(0),\n', '            _msgSender(),\n', '            _tTotal.sub(_initialMrFusionLockAmount)\n', '        );\n', '\n', '        emit Transfer(address(0), _mrFusion, _initialMrFusionLockAmount);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function reflect(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(\n', '            !_isExcluded[sender],\n', '            "PLASMA: Excluded addresses cannot call this function"\n', '        );\n', '        (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            rAmount <= _rTotal,\n', '            "PLASMA: Amount must be less than total reflections"\n', '        );\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(\n', '            account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\n', '            "PLASMA: We can not exclude Uniswap router."\n', '        );\n', '        require(\n', '            account != address(this),\n', '            "PLASMA: We can not exclude contract self."\n', '        );\n', '        require(\n', '            account != _mrFusion,\n', '            "PLASMA: We can not exclude reweard wallet."\n', '        );\n', '        require(!_isExcluded[account], "PLASMA: Account is already excluded");\n', '\n', '        if (_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "PLASMA: Account is already included");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "PLASMA: approve from the zero address");\n', '        require(spender != address(0), "PLASMA: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) private {\n', '        require(sender != address(0), "PLASMA: transfer from the zero address");\n', '        require(\n', '            recipient != address(0),\n', '            "PLASMA: transfer to the zero address"\n', '        );\n', '        require(\n', '            amount > 0,\n', '            "PLASMA: Transfer amount must be greater than zero"\n', '        );\n', '\n', '        if (sender != owner() && recipient != owner() && !inSwapAndLiquify) {\n', '            require(\n', '                amount <= _maxTxAmount,\n', '                "PLASMA: Transfer amount exceeds the maxTxAmount."\n', '            );\n', '            if (\n', '                (_msgSender() == currentPoolAddress ||\n', '                    _msgSender() == address(_uniswapV2Router)) &&\n', '                !tradingEnabled\n', '            ) require(false, "PLASMA: trading is disabled.");\n', '        }\n', '\n', '        if (!inSwapAndLiquify) {\n', '            uint256 lockedBalanceForPool = balanceOf(address(this));\n', '            bool overMinTokenBalance =\n', '                lockedBalanceForPool >= _minTokensBeforeSwap;\n', '            if (\n', '                overMinTokenBalance &&\n', '                msg.sender != currentPoolAddress &&\n', '                swapAndLiquifyEnabled\n', '            ) {\n', '                if (currentPairTokenAddress == _uniswapV2Router.WETH())\n', '                    swapAndLiquifyForEth(lockedBalanceForPool);\n', '                else\n', '                    swapAndLiquifyForTokens(\n', '                        currentPairTokenAddress,\n', '                        lockedBalanceForPool\n', '                    );\n', '            }\n', '        }\n', '\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function swapAndLiquifyForEth(uint256 lockedBalanceForPool)\n', '        private\n', '        lockTheSwap\n', '    {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '        uint256 half = lockedForSwap.div(2);\n', '        uint256 otherHalf = lockedForSwap.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half);\n', '\n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForEth(otherHalf, newBalance);\n', '\n', '        emit SwapAndLiquify(\n', '            _uniswapV2Router.WETH(),\n', '            half,\n', '            newBalance,\n', '            otherHalf\n', '        );\n', '\n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '\n', '        _sendRewardInterestToPool();\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = _uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount)\n', '        private\n', '    {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function swapAndLiquifyForTokens(\n', '        address pairTokenAddress,\n', '        uint256 lockedBalanceForPool\n', '    ) private lockTheSwap {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '        uint256 half = lockedForSwap.div(2);\n', '        uint256 otherHalf = lockedForSwap.sub(half);\n', '\n', '        _transfer(address(this), address(timeCircuts), half);\n', '\n', '        uint256 initialPairTokenBalance =\n', '            IERC20(pairTokenAddress).balanceOf(address(this));\n', '\n', '        // swap tokens for pairToken\n', '        timeCircuts.swapTokens(pairTokenAddress, half);\n', '\n', '        uint256 newPairTokenBalance =\n', '            IERC20(pairTokenAddress).balanceOf(address(this)).sub(\n', '                initialPairTokenBalance\n', '            );\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForTokens(pairTokenAddress, otherHalf, newPairTokenBalance);\n', '\n', '        emit SwapAndLiquify(\n', '            pairTokenAddress,\n', '            half,\n', '            newPairTokenBalance,\n', '            otherHalf\n', '        );\n', '\n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '\n', '        _sendRewardInterestToPool();\n', '    }\n', '\n', '    function addLiquidityForTokens(\n', '        address pairTokenAddress,\n', '        uint256 tokenAmount,\n', '        uint256 pairTokenAmount\n', '    ) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '        IERC20(pairTokenAddress).approve(\n', '            address(_uniswapV2Router),\n', '            pairTokenAmount\n', '        );\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidity(\n', '            address(this),\n', '            pairTokenAddress,\n', '            tokenAmount,\n', '            pairTokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function fusion() public lockTheSwap {\n', '        if (clearenceCheckEnabled == true) {\n', '            require(\n', '                IERC1155(_orbs).balanceOf(msg.sender, 3) >= 1,\n', '                "PLASMA: one much be holding the PLASMA orb to yeild such power"\n', '            );\n', '\n', '            require(\n', '                block.timestamp > _lastfusion + _fusionInterval,\n', '                "PLASMA: Too Soon."\n', '            );\n', '\n', '            fusionPartTwo();\n', '        } else if (clearenceCheckEnabled == false) {\n', '            require(\n', '                balanceOf(_msgSender()) >= _minTokenForfusion,\n', '                "PLASMA: Access denied, need more PLASMA to fusion "\n', '            );\n', '            require(\n', '                block.timestamp > _lastfusion + _fusionInterval,\n', '                "PLASMA: Too Soon."\n', '            );\n', '\n', '            fusionPartTwo();\n', '        }\n', '    }\n', '\n', '    function fusionPartTwo() public lockTheSwap {\n', '        _lastfusion = block.timestamp;\n', '\n', '        uint256 amountToRemove =\n', '            IERC20(_uniswapETHPool)\n', '                .balanceOf(address(this))\n', '                .mul(_liquidityRemoveFee)\n', '                .div(100);\n', '\n', '        removeLiquidityETH(amountToRemove);\n', '\n', '        reactor.rebalance();\n', '\n', '        uint256 tNewTokenBalance = balanceOf(address(reactor));\n', '        uint256 tRewardForCaller =\n', '            tNewTokenBalance.mul(_fusionCallerFee).div(100);\n', '        uint256 tRemaining = tNewTokenBalance.sub(tRewardForCaller);\n', '\n', '        uint256 toAnomalie = tRemaining.mul(_powerFee).div(100);\n', '\n', '        addAnomalie(toAnomalie);\n', '\n', '        uint256 aftPower = tRemaining.sub(toAnomalie);\n', '\n', '        uint256 flux = aftPower.mul(_fluxCapacitorFee).div(100);\n', '\n', '        addFlux(flux);\n', '\n', '        uint256 tBurn = aftPower.sub(flux);\n', '        uint256 currentRate = _getRate();\n', '        uint256 rBurn = tBurn.mul(currentRate);\n', '\n', '        _rOwned[_msgSender()] = _rOwned[_msgSender()].add(\n', '            tRewardForCaller.mul(currentRate)\n', '        );\n', '\n', '        _rOwned[address(reactor)] = 0;\n', '\n', '        _tBurnTotal = _tBurnTotal.add(tBurn);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '        _rTotal = _rTotal.sub(rBurn);\n', '\n', '        emit Transfer(address(reactor), address(_anomalieAddress), toAnomalie);\n', '        emit Transfer(address(reactor), _msgSender(), tRewardForCaller);\n', '        emit Transfer(address(reactor), address(0), tBurn);\n', '        emit Rebalance(tBurn);\n', '    }\n', '\n', '    function addFlux(uint256 flux) private {\n', '        uint256 currentRate = _getRate();\n', '\n', '        _rOwned[_fluxCapacitor] = _rOwned[_fluxCapacitor].add(\n', '            flux.mul(currentRate)\n', '        );\n', '\n', '        emit Transfer(address(reactor), _fluxCapacitor, flux);\n', '    }\n', '\n', '    function addAnomalie(uint256 toAnomalie) private {\n', '        uint256 currentRate = _getRate();\n', '\n', '        _rOwned[_anomalieAddress] = _rOwned[_anomalieAddress].add(\n', '            toAnomalie.mul(currentRate)\n', '        );\n', '\n', '        emit Transfer(address(reactor), _anomalieAddress, toAnomalie);\n', '    }\n', '\n', '    function removeLiquidityETH(uint256 lpAmount)\n', '        private\n', '        returns (uint256 ETHAmount)\n', '    {\n', '        IERC20(_uniswapETHPool).approve(address(_uniswapV2Router), lpAmount);\n', '        (ETHAmount) = _uniswapV2Router\n', '            .removeLiquidityETHSupportingFeeOnTransferTokens(\n', '            address(this),\n', '            lpAmount,\n', '            0,\n', '            0,\n', '            address(reactor),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function _sendRewardInterestToPool() private {\n', '        uint256 tRewardInterest =\n', '            balanceOf(_mrFusion).sub(_initialMrFusionLockAmount);\n', '        if (tRewardInterest > _minInterestForReward) {\n', '            uint256 rRewardInterest =\n', '                reflectionFromToken(tRewardInterest, false);\n', '            _rOwned[currentPoolAddress] = _rOwned[currentPoolAddress].add(\n', '                rRewardInterest\n', '            );\n', '            _rOwned[_mrFusion] = _rOwned[_mrFusion].sub(rRewardInterest);\n', '            emit Transfer(_mrFusion, currentPoolAddress, tRewardInterest);\n', '            IUniswapV2Pair(currentPoolAddress).sync();\n', '        }\n', '    }\n', '\n', '    function _transferStandard(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        uint256 currentRate = _getRate();\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLock\n', '        ) = _getValues(tAmount);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if (inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _transferToExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        uint256 currentRate = _getRate();\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLock\n', '        ) = _getValues(tAmount);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if (inSwapAndLiquify) {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _transferFromExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        uint256 currentRate = _getRate();\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLock\n', '        ) = _getValues(tAmount);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if (inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _transferBothExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        uint256 currentRate = _getRate();\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLock\n', '        ) = _getValues(tAmount);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if (inSwapAndLiquify) {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount)\n', '        private\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tLock) =\n', '            _getTValues(tAmount, _taxFee, _lockFee, _feeDecimals);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\n', '            _getRValues(tAmount, tFee, tLock, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLock);\n', '    }\n', '\n', '    function _getTValues(\n', '        uint256 tAmount,\n', '        uint256 taxFee,\n', '        uint256 lockFee,\n', '        uint256 feeDecimals\n', '    )\n', '        private\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 tFee = tAmount.mul(taxFee).div(10**(feeDecimals + 2));\n', '        uint256 tLockFee = tAmount.mul(lockFee).div(10**(feeDecimals + 2));\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLockFee);\n', '        return (tTransferAmount, tFee, tLockFee);\n', '    }\n', '\n', '    function _getRValues(\n', '        uint256 tAmount,\n', '        uint256 tFee,\n', '        uint256 tLock,\n', '        uint256 currentRate\n', '    )\n', '        private\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLock);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() public view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function calculateFee(\n', '        uint256 _amount,\n', '        uint256 _feeDeci,\n', '        uint256 _percentage\n', '    ) public pure returns (uint256 amount) {\n', '        amount = _amount.mul(_percentage).div(10**(uint256(_feeDeci) + 2));\n', '    }\n', '\n', '    function _getCurrentSupply() public view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (\n', '                _rOwned[_excluded[i]] > rSupply ||\n', '                _tOwned[_excluded[i]] > tSupply\n', '            ) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function getCurrentPoolAddress() public view returns (address) {\n', '        return currentPoolAddress;\n', '    }\n', '\n', '    function getCurrentPairTokenAddress() public view returns (address) {\n', '        return currentPairTokenAddress;\n', '    }\n', '\n', '    function getLiquidityRemoveFee() public view returns (uint256) {\n', '        return _liquidityRemoveFee;\n', '    }\n', '\n', '    function getfusionCallerFee() public view returns (uint256) {\n', '        return _fusionCallerFee;\n', '    }\n', '\n', '    function getMinTokenForfusion() public view returns (uint256) {\n', '        return _minTokenForfusion;\n', '    }\n', '\n', '    function getLastfusion() public view returns (uint256) {\n', '        return _lastfusion;\n', '    }\n', '\n', '    function getfusionInterval() public view returns (uint256) {\n', '        return _fusionInterval;\n', '    }\n', '\n', '    function getFluxCapacitorAddress() public view returns (address) {\n', '        return _fluxCapacitor;\n', '    }\n', '\n', '    function _setFeeDecimals(uint256 feeDecimals) external onlyOwner() {\n', '        require(\n', '            feeDecimals >= 0 && feeDecimals <= 2,\n', '            "PLASMA: fee decimals should be in 0 - 2"\n', '        );\n', '        _feeDecimals = feeDecimals;\n', '        emit FeeDecimalsUpdated(feeDecimals);\n', '    }\n', '\n', '    function _setTaxFee(uint256 taxFee) external onlyOwner() {\n', '        require(\n', '            taxFee >= 0 && taxFee <= 10 * 10**_feeDecimals,\n', '            "PLASMA: taxFee should be in 0 - 10"\n', '        );\n', '        _taxFee = taxFee;\n', '        emit TaxFeeUpdated(taxFee);\n', '    }\n', '\n', '    function _setLockFee(uint256 lockFee) external onlyOwner() {\n', '        require(\n', '            lockFee >= 0 && lockFee <= 10 * 10**_feeDecimals,\n', '            "PLASMA: lockFee should be in 0 - 10"\n', '        );\n', '        _lockFee = lockFee;\n', '        emit LockFeeUpdated(lockFee);\n', '    }\n', '\n', '    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', '        require(\n', '            maxTxAmount >= 50000e18,\n', '            "PLASMA: maxTxAmount should be greater than 50000e18"\n', '        );\n', '        _maxTxAmount = maxTxAmount;\n', '        emit MaxTxAmountUpdated(maxTxAmount);\n', '    }\n', '\n', '    function _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        require(\n', '            minTokensBeforeSwap >= 1e18 && minTokensBeforeSwap <= 25000e18,\n', '            "PLASMA: minTokenBeforeSwap should be in 1e18 - 25000e18"\n', '        );\n', '        require(\n', '            minTokensBeforeSwap > _autoSwapCallerFee,\n', '            "PLASMA: minTokenBeforeSwap should be greater than autoSwapCallerFee"\n', '        );\n', '        _minTokensBeforeSwap = minTokensBeforeSwap;\n', '        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\n', '    }\n', '\n', '    function _setAutoSwapCallerFee(uint256 autoSwapCallerFee)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        require(\n', '            autoSwapCallerFee >= 1e18,\n', '            "PLASMA: autoSwapCallerFee should be greater than 1e18"\n', '        );\n', '        _autoSwapCallerFee = autoSwapCallerFee;\n', '        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\n', '    }\n', '\n', '    function _setMinInterestForReward(uint256 minInterestForReward)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        _minInterestForReward = minInterestForReward;\n', '        emit MinInterestForRewardUpdated(minInterestForReward);\n', '    }\n', '\n', '    function _setLiquidityRemoveFee(uint256 liquidityRemoveFee)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        require(\n', '            liquidityRemoveFee >= 1 && liquidityRemoveFee <= 10,\n', '            "PLASMA: liquidityRemoveFee should be in 1 - 10"\n', '        );\n', '        _liquidityRemoveFee = liquidityRemoveFee;\n', '        emit LiquidityRemoveFeeUpdated(liquidityRemoveFee);\n', '    }\n', '\n', '    function _setfusionCallerFee(uint256 fusionCallerFee) external onlyOwner() {\n', '        require(\n', '            fusionCallerFee >= 1 && fusionCallerFee <= 15,\n', '            "PLASMA: fusionCallerFee should be in 1 - 15"\n', '        );\n', '        _fusionCallerFee = fusionCallerFee;\n', '        emit fusionCallerFeeUpdated(fusionCallerFee);\n', '    }\n', '\n', '    function _setMinTokenForfusion(uint256 minTokenForfusion)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        _minTokenForfusion = minTokenForfusion;\n', '        emit MinTokenForfusionUpdated(minTokenForfusion);\n', '    }\n', '\n', '    function _setfusionInterval(uint256 fusionInterval) external onlyOwner() {\n', '        _fusionInterval = fusionInterval;\n', '        emit fusionIntervalUpdated(fusionInterval);\n', '    }\n', '\n', '    function _setfluxCapacitorAddress(address fluxCapacitor)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        _fluxCapacitor = fluxCapacitor;\n', '        emit fluxCapacitorUpdated(fluxCapacitor);\n', '    }\n', '\n', '    function _setOrbsAddress(address orbs) external onlyOwner() {\n', '        _orbs = orbs;\n', '        emit orbsUpdated(orbs);\n', '    }\n', '\n', '    function _setFluxCapacitorFee(uint256 fluxCapacitorFee)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        _fluxCapacitorFee = fluxCapacitorFee;\n', '        emit fluxCapacitorFeeUpdated(fluxCapacitorFee);\n', '    }\n', '\n', '    function _setPowerFee(uint256 powerFee) external onlyOwner() {\n', '        _powerFee = powerFee;\n', '\n', '        emit PowerFeeUpdated(powerFee);\n', '    }\n', '\n', '    function _setAnomalies(address payable anomalieAddress)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        _anomalieAddress = anomalieAddress;\n', '\n', '        emit AnomaliesAddressUpdated(anomalieAddress);\n', '    }\n', '\n', '    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '\n', '    function _updateWhitelist(address poolAddress, address pairTokenAddress)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        require(poolAddress != address(0), "PLASMA: Pool address is zero.");\n', '        require(\n', '            pairTokenAddress != address(0),\n', '            "PLASMA: Pair token address is zero."\n', '        );\n', '        require(\n', '            pairTokenAddress != address(this),\n', '            "PLASMA: Pair token address self address."\n', '        );\n', '        require(\n', '            pairTokenAddress != currentPairTokenAddress,\n', '            "PLASMA: Pair token address is same as current one."\n', '        );\n', '\n', '        currentPoolAddress = poolAddress;\n', '        currentPairTokenAddress = pairTokenAddress;\n', '\n', '        emit WhitelistUpdated(pairTokenAddress);\n', '    }\n', '\n', '    function _enableTrading() external onlyOwner() {\n', '        tradingEnabled = true;\n', '        TradingEnabled();\n', '    }\n', '\n', '    function _enableClearenceCheck(bool _enabled) public onlyOwner {\n', '        clearenceCheckEnabled = true;\n', '        emit ClearenceCheckEnabledUpdated(_enabled);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Flux.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', "// Adapted from SushiSwap's MasterChef contract\n", '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', "// Adapted from SushiSwap's MasterChef contract\n", '\n', 'contract FluxCapacitor is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '\n', '        //\n', '        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 stakableToken; // Address of staking token contract.\n', '        uint256 allocPoint; // How many PLASMA to distribute per block.\n', '        uint256 lastRewardBlock;\n', '        uint256 accPlasmaPerShare; // Accumulated PLASMA per share, times 100. See below.\n', '    }\n', '\n', '    // Plasma Address\n', '    PLASMA public plasma;\n', '\n', '    // Amount of PLASMA allocated to pool per block\n', '    uint256 plasmaPerBlock;\n', '    // Bonus end block.\n', '    uint256 public bonusEndBlock;\n', '    // Bonus multiplier for the OGs\n', '    uint256 public constant BONUS_MULTIPLIER = 10;\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocatuion  points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // start block\n', '    uint256 public startBlock;\n', '\n', '    // Make sure this is not a duplicate pool\n', '    mapping(IERC20 => bool) public supportedToken;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(\n', '        PLASMA _plasma,\n', '        uint256 _plasmaPerBlock,\n', '        uint256 _startBlock,\n', '        uint256 _bonusEndBlock\n', '    ) public {\n', '        plasma = _plasma;\n', '        plasmaPerBlock = _plasmaPerBlock;\n', '        startBlock = _startBlock;\n', '        bonusEndBlock = _bonusEndBlock;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new token or LP to the pool. Can only be called by the owner.\n', '    // DO NOT add the same LP or token more than once. Rewards will be messed up if you do.\n', '\n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _stakableToken,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        // Each stakable token can only be added once.\n', '        require(!supportedToken[_stakableToken], "add: duplicate token");\n', '        supportedToken[_stakableToken] = true;\n', '\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        uint256 lastRewardBlock =\n', '            block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                stakableToken: _stakableToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                accPlasmaPerShare: 0\n', '            })\n', '        );\n', '    }\n', '\n', "    // Update the given pool's PLASMA allocation pointpercentage. Can only be called by the owner.\n", '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_to <= bonusEndBlock) {\n', '            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '        } else if (_from >= bonusEndBlock) {\n', '            return _to.sub(_from);\n', '        } else {\n', '            return\n', '                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n', '                    _to.sub(bonusEndBlock)\n', '                );\n', '        }\n', '    }\n', '\n', '    // View function to see pending PLASMA on frontend.\n', '    function pendingPLASMA(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accPlasmaPerShare = pool.accPlasmaPerShare;\n', '        uint256 stakedSupply = pool.stakableToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && stakedSupply != 0) {\n', '            uint256 multiplier =\n', '                getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 PLASMAReward =\n', '                multiplier.mul(plasmaPerBlock).mul(pool.allocPoint).div(\n', '                    totalAllocPoint\n', '                );\n', '\n', '            accPlasmaPerShare = accPlasmaPerShare.add(\n', '                PLASMAReward.mul(1e12).div(stakedSupply)\n', '            );\n', '        }\n', '        return\n', '            user.amount.mul(accPlasmaPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 stakedSupply = pool.stakableToken.balanceOf(address(this));\n', '        if (stakedSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '\n', '        uint256 PLASMAReward =\n', '            multiplier.mul(plasmaPerBlock).mul(pool.allocPoint).div(\n', '                totalAllocPoint\n', '            );\n', '\n', '        pool.accPlasmaPerShare = pool.accPlasmaPerShare.add(\n', '            PLASMAReward.mul(1e12).div(stakedSupply)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Claim all if no amount specified, or Deposit new LP/SAS.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '\n', '        // this is claim\n', '        if (user.amount > 0) {\n', '            uint256 pending =\n', '                user.amount.mul(pool.accPlasmaPerShare).div(1e12).sub(\n', '                    user.rewardDebt\n', '                );\n', '            if (pending > 0) {\n', '                safePLASMAtransfer(msg.sender, pending);\n', '            }\n', '        } /// Deposit\n', '        if (_amount > 0) {\n', '            uint256 beforeAmount = pool.stakableToken.balanceOf(address(this));\n', '            pool.stakableToken.safeTransferFrom(\n', '                address(msg.sender),\n', '                address(this),\n', '                _amount\n', '            );\n', '\n', '            uint256 _addAmt =\n', '                pool.stakableToken.balanceOf(address(this)).sub(beforeAmount);\n', '\n', '            user.amount = user.amount.add(_addAmt);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accPlasmaPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw or Claim Plasma/LP/SaS tokens from FluxCampacitor.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending =\n', '            user.amount.mul(pool.accPlasmaPerShare).div(1e12).sub(\n', '                user.rewardDebt\n', '            ); // Claim first all that is pending\n', '        if (pending > 0) {\n', '            safePLASMAtransfer(msg.sender, pending);\n', '        }\n', '        if (_amount > 0) {\n', '            // Remove stake\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.stakableToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accPlasmaPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        pool.stakableToken.safeTransfer(address(msg.sender), user.amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    // Safe PLASMA transfer function, just in case if rounding error causes pool to not have enough PLASMA.\n', '    function safePLASMAtransfer(address _to, uint256 _amount) internal {\n', '        uint256 PLASMABal = plasma.balanceOf(address(this));\n', '        if (_amount > PLASMABal) {\n', '            plasma.transfer(_to, PLASMABal);\n', '        } else {\n', '            plasma.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function updatePlasmaPerBlock(uint256 _plasmaPerBlock)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        plasmaPerBlock = _plasmaPerBlock;\n', '        return true;\n', '    }\n', '\n', '    function getPlasmaBalance() external view returns (uint256) {\n', '        uint256 plasmaBalance = plasma.balanceOf(address(this));\n', '        return plasmaBalance;\n', '    }\n', '\n', '    function getStakedLiq(uint256 _pid, address)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 stakedLiq = user.amount;\n', '        return stakedLiq;\n', '    }\n', '}']