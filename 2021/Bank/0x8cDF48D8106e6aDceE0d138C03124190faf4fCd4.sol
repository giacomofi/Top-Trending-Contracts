['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '/*\n', 'Straight out of Kattegat, raised between sheeps, wooden houses covered in bear fur & self made viking ships, \n', 'Flokinu has decided to show himself on the Uniswap meme token scene. Absolutely usesless as the token is, \n', "he prays to Odin that the ape/degen's community shows themselves once more to prove this could be a possible mooner!\n", '\n', 'Telegram: t.me/officialflokinu\n', '\n', '\n', '\n', 'SPDX-License-Identifier: M̧͖̪̬͚͕̘̻̙̫͎̉̾͑̽͌̓̏̅͌̕͘ĩ̢͎̥̦̼͖̾̀͒̚͠n̺̼̳̩̝̐͒̑̄̕͢͞è̫̦̬͙̌͗͡ş̣̞̤̲̳̭̫̬̦͗́͂̅̉̒̍͑̑̒̈́̏͟͜™͍͙͆̒̏ͅ®̳̻̋̿©͕̅\n', '*/\n', '\n', 'pragma solidity ^0.8.6;\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function approve(address to, uint value) external returns (bool);\n', '}\n', '\n', 'contract FLOKINU is Context, IERC20, Ownable {\n', '    string private constant _name = unicode"Flokinu💨";\n', '    string private constant _symbol = "FLOKINU";\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping(address => uint256)) private _allowances;\n', '    mapping (address => bool) private bots;\n', '    mapping (address => uint) private cooldown;\n', '    mapping (address => bool) private _isExcludedFromFee;\n', '    mapping (address => bool) private _isExcluded;\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address[] private _excluded;\n', '    address private c;\n', '    address private bob;\n', '    address private otherguy;\n', '    address private uniswapV2Pair;\n', '    address private WETH;\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _tTotal = 1000000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 private _taxFee;\n', '    uint256 private _LiquidityFee;\n', '    uint64 private buyCounter;\n', '    uint8 private constant _decimals = 9;\n', '    uint16 private maxTx;\n', '    bool private tradingOpen;\n', '    bool private inSwap;\n', '    bool private swapEnabled;\n', '    bool private cooldownEnabled;\n', '    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n', '    modifier lockTheSwap {\n', '        inSwap = true;\n', '        _;\n', '        inSwap = false;\n', '    }\n', '    constructor(address payable _bob, address payable _otherguy) {\n', '        c = address(this);\n', '        bob = _bob;\n', '        otherguy = _otherguy;\n', '        _rOwned[c] = _rTotal;\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[c] = true;\n', '        _isExcludedFromFee[bob] = true;\n', '        _isExcludedFromFee[otherguy] = true;\n', '        excludeFromReward(owner());\n', '        excludeFromReward(c);\n', '        excludeFromReward(bob);\n', '        excludeFromReward(otherguy);\n', '        emit Transfer(address(0),c,_tTotal);\n', '    }\n', '    \n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public pure override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()] - amount);\n', '        return true;\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\n', '        require(rAmount <= _rTotal,"Amount must be less than total reflections");\n', '        uint256 currentRate = _getRate();\n', '        return rAmount / currentRate;\n', '    }\n', '\n', '    function nofees() private {\n', '        _taxFee = 0;\n', '        _LiquidityFee = 0;\n', '    }\n', '    \n', '    function basefees() private {\n', '        _taxFee = 2;\n', '        _LiquidityFee = 18;\n', '    }\n', '    \n', '    function setBots(address[] memory bots_) public onlyOwner {\n', '        for (uint i = 0; i < bots_.length; i++) {\n', '            bots[bots_[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function delBot(address notbot) public onlyOwner {\n', '        bots[notbot] = false;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(!bots[from] && !bots[to]);\n', '        basefees();\n', '        if (from != owner() && to != owner() && tradingOpen) {\n', '            if (cooldownEnabled && !inSwap) {\n', '                if (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {\n', '                    require(_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair,"ERR: Uniswap only");\n', '                }\n', '            }\n', '            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && !inSwap) {\n', '                if (buyCounter < 100)\n', '                    require(amount <= _tTotal * maxTx / 1000);\n', '                if (cooldownEnabled) {\n', '                    require(cooldown[to] < block.timestamp);\n', '                    if (buyCounter < 30)\n', '                        cooldown[to] = block.timestamp + (10 minutes);\n', '                    else\n', '                        cooldown[to] = block.timestamp + (30 seconds);\n', '                }\n', '                if (buyCounter % 50 == 0 && buyCounter != 0)\n', '                    nofees();\n', '                buyCounter++;\n', '            }\n', '            if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from] && !inSwap) {\n', '                require(cooldown[from] < block.timestamp);\n', '                if (swapEnabled) {\n', '                    uint256 contractTokenBalance = balanceOf(c);\n', '                    if (contractTokenBalance > balanceOf(uniswapV2Pair) * 1 / 10000) {\n', '                        swapAndLiquify(contractTokenBalance);\n', '                    }\n', '                }\n', '            }\n', '            if (!inSwap) {\n', '                if (buyCounter == 25)\n', '                    maxTx = 20; // 2%\n', '                if (buyCounter == 50) {\n', '                    maxTx = 50; // 5%\n', '                    cooldownEnabled = false;\n', '                }\n', '                //if (buyCounter == 100)\n', '                //    maxTx = 1000; // 100%\n', "                //don't need to set max to 100% here to disable it since max stops getting checked after the 100th buy\n", '            }\n', '        }\n', '        \n', '        bool takeFee = true;\n', '\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwap) {\n', '            takeFee = false;\n', '        }\n', '\n', '        _tokenTransfer(from, to, amount, takeFee);  \n', '    }\n', '    \n', '    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '        swapTokensForEth(contractTokenBalance);\n', '        uint256 balance = c.balance / 2;\n', '        sendETHToFee(balance);\n', '        IWETH(WETH).deposit{value: balance}();\n', '        assert(IWETH(WETH).transfer(uniswapV2Pair, balance));\n', '    }\n', '    \n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        address[] memory path = new address[](2);\n', '        path[0] = c;\n', '        path[1] = WETH;\n', '        _approve(c, address(uniswapV2Router), tokenAmount);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, c, block.timestamp);\n', '    }\n', '    \n', '    function sendETHToFee(uint256 ETHamount) private {\n', '        payable(bob).transfer(ETHamount / 2);\n', '        payable(otherguy).transfer(ETHamount / 2);\n', '    }\n', '    \n', '    function openTrading() external onlyOwner() {\n', '        require(!tradingOpen, "trading is already open");\n', '        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        WETH = uniswapV2Router.WETH();\n', '        _approve(c, address(uniswapV2Router), ~uint256(0));\n', '        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(c, WETH);\n', '        uniswapV2Router.addLiquidityETH{value: c.balance}(c,balanceOf(c),0,0,owner(),block.timestamp);\n', '        maxTx = 10; // 1%\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),~uint256(0));\n', '        tradingOpen = true;\n', '        swapEnabled = true;\n', '        cooldownEnabled = true;\n', '    }\n', '    \n', '    function manualswap() external {\n', '        require(_msgSender() == bob || _msgSender() == otherguy);\n', '        uint256 contractBalance = balanceOf(c);\n', '        swapTokensForEth(contractBalance);\n', '    }\n', '    \n', '    function manualsend() external {\n', '        require(_msgSender() == bob || _msgSender() == otherguy);\n', '        uint256 contractETHBalance = c.balance;\n', '        sendETHToFee(contractETHBalance);\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if (!takeFee) nofees();\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender] - rAmount;\n', '        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n', '        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender] - tAmount;\n', '        _rOwned[sender] = _rOwned[sender] - rAmount;\n', '        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; \n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    \n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender] - tAmount;\n', '        _rOwned[sender] = _rOwned[sender] - rAmount;\n', '        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n', '        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender] - rAmount;\n', '        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _takeLiquidity(uint256 tLiquidity) private {\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rLiquidity = tLiquidity * currentRate;\n', '        _rOwned[c] = _rOwned[c] + rLiquidity;\n', '        _tOwned[c] = _tOwned[c] + tLiquidity;\n', '    }\n', '\t\n', '\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal - rFee;\n', '        _tFeeTotal = _tFeeTotal + tFee;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount, _taxFee, _LiquidityFee);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 LiquidityFee) private pure returns (uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount * taxFee / 100;\n', '        uint256 tLiquidity = tAmount * LiquidityFee / 100;\n', '\t\tuint256 tTransferAmount = tAmount - tFee - tLiquidity;\n', '        return (tTransferAmount, tFee, tLiquidity);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount * currentRate;\n', '        uint256 rFee = tFee * currentRate;\n', '        uint256 rLiquidity = tLiquidity * currentRate;\n', '\t\tuint256 rTransferAmount = rAmount - rFee - rLiquidity;\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply / tSupply;\n', '    }\n', '\n', '    function excludeFromReward(address addr) internal {\n', "        require(addr != address(uniswapV2Router), 'ERR: Can\\'t exclude Uniswap router');\n", '        require(!_isExcluded[addr], "Account is already excluded");\n', '        if(_rOwned[addr] > 0) {\n', '            _tOwned[addr] = tokenFromReflection(_rOwned[addr]);\n', '        }\n', '        _isExcluded[addr] = true;\n', '        _excluded.push(addr);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply - _rOwned[_excluded[i]];\n', '            tSupply = tSupply - _tOwned[_excluded[i]];\n', '        }\n', '        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\t\n', '}']