['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context \n', '{\n', '    address private _owner;\n', '    address internal _creator;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        _creator = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'contract Gazillion is Context, IERC20, Ownable \n', '{\n', '    using SafeMath for uint256;\n', '    string private constant _name = "Gazillion";\n', '    string private constant _symbol = "GG";\n', '    uint8 private constant _decimals = 9;\n', '\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '    mapping(address => bool) private _pairings;\n', '\n', '    uint256 private constant _tTotal = 69696969696969 * 10**9;\n', '    address payable private _mkt;\n', '\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address private uniswapV2Pair;\n', '    bool private tradingOpen = false;\n', '    bool private liquidityAdded = false;\n', '    bool private inSwap = false;\n', '    bool private swapEnabled = false;\n', '\n', '    constructor(address payable addr) \n', '    {\n', '        _mkt = addr;\n', '        _tOwned[address(this)] = _tTotal;\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public pure returns (string memory) \n', '    {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) \n', '    {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) \n', '    {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public pure override returns (uint256) \n', '    {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) \n', '    {\n', '        return _tOwned[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) \n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) \n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) \n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) \n', '    {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function addPairing(address addr) external\n', '    {\n', '        require(_msgSender() == _creator, "Trade pairings can only be added by contract creator");\n', '        _pairings[addr] = true;\n', '    }\n', '        \n', '    function addLiquidity() external onlyOwner() \n', '    {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _tTotal);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        swapEnabled = true;\n', '        liquidityAdded = true;\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n', '        _pairings[uniswapV2Pair] = true;\n', '    }\n', '    \n', '    function openTrading() public onlyOwner \n', '    {\n', '        require(liquidityAdded);\n', '        tradingOpen = true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private \n', '    {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _transfer(address from, address to, uint256 amount) private \n', '    {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if (inSwap)\n', '        {\n', '            _tOwned[from] = _tOwned[from].sub(amount);\n', '            _tOwned[to] = _tOwned[to].add(amount);\n', '            emit Transfer(from, to, amount);\n', '        }\n', '        else\n', '        {\n', '            if (_pairings[from] && to != address(uniswapV2Router)) \n', '            {\n', '                require(tradingOpen);\n', '            }\n', '            if (!_pairings[from] && swapEnabled)\n', '            {\n', '                uint256 bal = balanceOf(address(this));\n', '                uint256 pool = balanceOf(uniswapV2Pair);\n', '                if (bal > pool.div(500))\n', '                {\n', '                  inSwap = true;\n', '                  address[] memory path = new address[](2);\n', '                  path[0] = address(this);\n', '                  path[1] = uniswapV2Router.WETH();\n', '                  _approve(address(this), address(uniswapV2Router), bal);\n', '                  uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(pool.div(500), 0, path, address(this), block.timestamp);\n', '                  uint256 contractETHBalance = address(this).balance;\n', '                  if (contractETHBalance > 0) \n', '                      _mkt.transfer(contractETHBalance);\n', '                  inSwap = false;\n', '                }\n', '            }\n', '            _tokenTransfer(from, to, amount);\n', '        }\n', '    }\n', '\n', '    function _tokenTransfer(address from, address to, uint256 amount) private \n', '    {\n', '        _tOwned[from] =_tOwned[from].sub(amount);\n', '        _tOwned[address(this)] = _tOwned[address(this)].add(amount.div(20));\n', '        _tOwned[to] = _tOwned[to].add(amount.sub(amount.div(20)));\n', '        emit Transfer(from, to, amount.sub(amount.div(20)));\n', '    }\n', '    receive() external payable {}\n', '}']