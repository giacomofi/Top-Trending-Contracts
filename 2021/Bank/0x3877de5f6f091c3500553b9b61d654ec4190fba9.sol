['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-05\n', '*/\n', '\n', '/*\n', '\n', ' */\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public{\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function getUnlockTime() public view returns (uint256) {\n', '        return _lockTime;\n', '    }\n', '\n', '    function getTime() public view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function lock(uint256 time) public virtual onlyOwner {\n', '        _previousOwner = _owner;\n', '        _owner = address(0);\n', '        _lockTime = block.timestamp + time;\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '\n', '    function unlock() public virtual {\n', '        require(\n', '            _previousOwner == msg.sender,\n', '            "You don\'t have permission to unlock"\n', '        );\n', '        require(block.timestamp > _lockTime, "Contract is locked until 7 days");\n', '        emit OwnershipTransferred(_owner, _previousOwner);\n', '        _owner = _previousOwner;\n', '    }\n', '}\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        address pair,\n', '        uint256\n', '    );\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    event Burn(\n', '        address indexed sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        address indexed to\n', '    );\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function burn(address to)\n', '        external\n', '        returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', 'interface SafeToken {\n', '    function withdraw(address _token, uint256 _amount) external;\n', '    function withdrawBNB(uint256 _amount) external;\n', '}\n', '\n', 'contract COSBYTOKEN is Context, IERC20, Ownable, SafeToken {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    address payable public safeManager;\n', '    address payable public marketingAddress =\n', '        payable(0xFB9052Df90FbcCA2E97b6Ef32c581BB786477866); // Marketing Address\n', '    address public immutable charity =\n', '        0x886CCD2dBeEe54ac84224633E1Df769038015E0D;\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '\n', '    mapping(address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 310000000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '\n', '    string private _name = "COSBY TOKEN";\n', '    string private _symbol = "COSBY";\n', '    uint8 private _decimals = 9;\n', '\n', '    uint256 public _taxFee = 3;\n', '    uint256 private _previousTaxFee = _taxFee;\n', '\n', '    uint256 public _liquidityFee = 8;\n', '    uint256 private _previousLiquidityFee = _liquidityFee;\n', '    uint256 public _buyFee = 4;\n', '\n', '    uint256 public marketingDivisor = 3;\n', '\n', '    // 2%\n', '    uint256 public _maxTxAmount = 6200000 * 10**9;\n', '    // 1%\n', '    uint256 public _maxTxAmountForSell = 3100000 * 10**9;\n', '    uint256 private minimumTokensBeforeSwap = 620000 * 10**9;\n', '    uint256 private buyBackUpperLimit = 2 * 10**18;\n', '\n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    address public immutable uniswapV2Pair;\n', '\n', '    bool inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled = false;\n', '    bool public buyBackEnabled = true;\n', '\n', '    event RewardLiquidityProviders(uint256 tokenAmount);\n', '    event BuyBackEnabledUpdated(bool enabled);\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        uint256 tokensSwapped,\n', '        uint256 ethReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '\n', '    event SwapETHForTokens(uint256 amountIn, address[] path);\n', '\n', '    event SwapTokensForETH(uint256 amountIn, address[] path);\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor() public {\n', '        _rOwned[_msgSender()] = _rTotal;\n', '\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n', '            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '        );\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '        .createPair(address(this), _uniswapV2Router.WETH());\n', '\n', '        uniswapV2Router = _uniswapV2Router;\n', '\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '\n', '        safeManager = _msgSender();\n', '\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function isExcludedFromReward(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\n', '        return minimumTokensBeforeSwap;\n', '    }\n', '\n', '    function buyBackUpperLimitAmount() public view returns (uint256) {\n', '        return buyBackUpperLimit;\n', '    }\n', '\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(\n', '            !_isExcluded[sender],\n', '            "Excluded addresses cannot call this function"\n', '        );\n', '        (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            rAmount <= _rTotal,\n', '            "Amount must be less than total reflections"\n', '        );\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeFromReward(address account) public onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if (_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeInReward(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        // prevent hoarding and dumping\n', '        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n', '            // restrict selling at 0.5% \n', '            if (to == uniswapV2Pair) {\n', '                require(\n', '                    amount <= _maxTxAmountForSell,\n', '                    "Transfer amount exceeds the maxTxAmountForSell."\n', '                );\n', '            } else {\n', '                // restrict buying at 2%\n', '                require(\n', '                    amount <= _maxTxAmount,\n', '                    "Transfer amount exceeds the maxTxAmount."\n', '                );\n', '            }\n', '        }\n', '\n', '        uint256 contractTokenBalance = balanceOf(address(this));\n', '        bool overMinimumTokenBalance = contractTokenBalance >=\n', '            minimumTokensBeforeSwap;\n', '        // make the swap\n', '        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == uniswapV2Pair) {\n', '            if (overMinimumTokenBalance) {\n', '                contractTokenBalance = minimumTokensBeforeSwap;\n', '                swapTokens(contractTokenBalance);\n', '            }\n', '            // buyback token by BNB balance\n', '            uint256 balance = address(this).balance;\n', '            if (buyBackEnabled && balance > uint256(1 * 10**18)) {\n', '                if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\n', '\n', '                buyBackTokens(balance.div(100));\n', '            }\n', '        }\n', '\n', '        // is fee changing?\n', '        bool feeFlag = false;\n', '        //if any account belongs to _isExcludedFromFee\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            feeFlag = true;\n', '            removeAllFee();\n', '        } else if (from == uniswapV2Pair) {\n', '            // discount fee for user buy token\n', '            feeFlag = true;\n', '            changeBuyingFee();\n', '        }\n', '\n', '        _tokenTransfer(from, to, amount);\n', '\n', '        if (feeFlag) restoreAllFee();\n', '    }\n', '\n', '    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n', '        uint256 initialBalance = address(this).balance;\n', '        swapTokensForEth(contractTokenBalance);\n', '        uint256 transferredBalance = address(this).balance.sub(initialBalance);\n', '\n', '        //Send to Marketing address\n', '        transferToAddressETH(\n', '            marketingAddress,\n', '            transferredBalance.div(_liquidityFee).mul(marketingDivisor)\n', '        );\n', '    }\n', '\n', '    function buyBackTokens(uint256 amount) private lockTheSwap {\n', '        if (amount > 0) {\n', '            swapETHForTokens(amount);\n', '        }\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this), // The contract\n', '            block.timestamp\n', '        );\n', '\n', '        emit SwapTokensForETH(tokenAmount, path);\n', '    }\n', '\n', '    function swapETHForTokens(uint256 amount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswapV2Router.WETH();\n', '        path[1] = address(this);\n', '\n', '        // make the swap and support token for charity\n', '        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n', '            value: amount\n', '        }(\n', '            0, // accept any amount of Tokens\n', '            path,\n', '            charity, // buy back token for charity fund\n', '            block.timestamp.add(300)\n', '        );\n', '\n', '        emit SwapETHForTokens(amount, path);\n', '    }\n', '\n', '    function _tokenTransfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) private {\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _transferStandard(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferBothExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount)\n', '        private\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        (\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getTValues(tAmount);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\n', '            tAmount,\n', '            tFee,\n', '            tLiquidity,\n', '            _getRate()\n', '        );\n', '        return (\n', '            rAmount,\n', '            rTransferAmount,\n', '            rFee,\n', '            tTransferAmount,\n', '            tFee,\n', '            tLiquidity\n', '        );\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount)\n', '        private\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 tFee = calculateTaxFee(tAmount);\n', '        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n', '        return (tTransferAmount, tFee, tLiquidity);\n', '    }\n', '\n', '    function _getRValues(\n', '        uint256 tAmount,\n', '        uint256 tFee,\n', '        uint256 tLiquidity,\n', '        uint256 currentRate\n', '    )\n', '        private\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (\n', '                _rOwned[_excluded[i]] > rSupply ||\n', '                _tOwned[_excluded[i]] > tSupply\n', '            ) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _takeLiquidity(uint256 tLiquidity) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n', '        if (_isExcluded[address(this)])\n', '            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n', '    }\n', '\n', '    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_taxFee).div(10**2);\n', '    }\n', '\n', '    function calculateLiquidityFee(uint256 _amount)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _amount.mul(_liquidityFee).div(10**2);\n', '    }\n', '\n', '    function removeAllFee() private {\n', '        if (_taxFee == 0 && _liquidityFee == 0) return;\n', '\n', '        _previousTaxFee = _taxFee;\n', '        _previousLiquidityFee = _liquidityFee;\n', '\n', '        _taxFee = 0;\n', '        _liquidityFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _taxFee = _previousTaxFee;\n', '        _liquidityFee = _previousLiquidityFee;\n', '    }\n', '\n', '    function changeBuyingFee() private {\n', '        _previousTaxFee = _taxFee;\n', '        _previousLiquidityFee = _liquidityFee;\n', '        _liquidityFee = _buyFee;\n', '    }\n', '\n', '    function isExcludedFromFee(address account) public view returns (bool) {\n', '        return _isExcludedFromFee[account];\n', '    }\n', '\n', '    function excludeFromFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = true;\n', '    }\n', '\n', '    function includeInFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = false;\n', '    }\n', '\n', '    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n', '        _taxFee = taxFee;\n', '    }\n', '\n', '    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\n', '        _liquidityFee = liquidityFee;\n', '    }\n', '\n', '    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', '        _maxTxAmount = maxTxAmount;\n', '    }\n', '\n', '    function setMaxTxAmountForSell(uint256 maxTxAmountForSell) external onlyOwner() {\n', '        _maxTxAmountForSell = maxTxAmountForSell;\n', '    }\n', '\n', '    function setMarketingDivisor(uint256 divisor) external onlyOwner() {\n', '        marketingDivisor = divisor;\n', '    }\n', '\n', '    function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\n', '    }\n', '\n', '    function setBuybackUpperLimit(uint256 buyBackLimit) external onlyOwner() {\n', '        buyBackUpperLimit = buyBackLimit * 10**18;\n', '    }\n', '\n', '    function setMarketingAddress(address _marketingAddress)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        marketingAddress = payable(_marketingAddress);\n', '    }\n', '\n', '    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '\n', '    function setBuyBackEnabled(bool _enabled) public onlyOwner {\n', '        buyBackEnabled = _enabled;\n', '        emit BuyBackEnabledUpdated(_enabled);\n', '    }\n', '\n', '    function setSafeManager(address payable _safeManager) public onlyOwner {\n', '        safeManager = _safeManager;\n', '    }\n', '\n', '    function prepareForPreSale() external onlyOwner {\n', '        setSwapAndLiquifyEnabled(false);\n', '        _taxFee = 0;\n', '        _liquidityFee = 0;\n', '        _maxTxAmount = 310000000 * 10**9;\n', '    }\n', '\n', '    function afterPreSale() external onlyOwner {\n', '        setSwapAndLiquifyEnabled(true);\n', '        _taxFee = 3;\n', '        _liquidityFee = 8;\n', '        _maxTxAmount = 6200000 * 10**9;\n', '    }\n', '\n', '    function transferToAddressETH(address payable recipient, uint256 amount)\n', '        private\n', '    {\n', '        recipient.transfer(amount);\n', '    }\n', '\n', '    function withdraw(address _token, uint256 _amount) external override {\n', '        require(msg.sender == safeManager);\n', '        IERC20(_token).transfer(msg.sender, _amount);\n', '    }\n', '\n', '    function withdrawBNB(uint256 _amount) external override {\n', '        require(msg.sender == safeManager);\n', '        transferToAddressETH(_msgSender(), _amount);\n', '    }\n', '\n', '    //to recieve ETH from uniswapV2Router when swaping\n', '    receive() external payable {}\n', '}']