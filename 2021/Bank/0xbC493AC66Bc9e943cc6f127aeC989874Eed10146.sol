['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.3;\n', "import { IERC20, ISafeMath, IKladeDiffToken } from './Interfaces.sol';\n", '\n', '// ----------------------------------------------------------------------------\n', '// This contract is used to "manage" Klade Tokens. Specifically you can use\n', '// it to mint tokens for any quarter and it holds the collateral you send over\n', '// until payouts are taken, at which point the Klade Tokens can take the collateral\n', '// and send it to the token holders as payout.\n', '// ----------------------------------------------------------------------------\n', 'contract TokenManager {\n', '    address public immutable KladeAddress1;\n', '    address public immutable KladeAddress2;\n', '    ISafeMath public immutable safemath;\n', '    IERC20 public immutable wbtc;\n', '\n', '    uint public uncollected_fees = 0;\n', '    uint public constant fee = 640; // Fee per 0.1 pairs minted in satoshis\n', '\n', '    struct quarter_data_component {\n', '        address AlphaToken;\n', '        address OmegaToken;\n', '        uint required_collateral; // Required Collateral for 0.1 pairs minted in satoshis\n', '        uint total_collateral_backing;\n', '    }\n', '\n', '    mapping(string => quarter_data_component) public quarter_data;\n', '    mapping(string => bool) public quarter_set;\n', '\n', '    constructor(address klade_address1, address klade_address2, ISafeMath safemath_contract, IERC20 wbtc_contract) {\n', '        KladeAddress1 = klade_address1;\n', '        KladeAddress2 = klade_address2;\n', '        safemath = safemath_contract;\n', '        wbtc = wbtc_contract;\n', '    }\n', '\n', '\n', '    /**\n', '     * Adds token data for a quarter.\n', "     * Require #1: Ensures that once a quarter's data is set, it cannot be changed.\n", '     * Require #2: Function can only be called by Klade\n', '     * The quarter string will follow the format "Q12021".\n', '     * required_collateral should be the required collateral for 0.1 pairs of Klade Tokens in WBTC units\n', '     * @param quarter string - String representing Quarter that token will be added for - ie Q12021 for Quarter 1 of 2021\n', '     * @param alpha_token_address address - Address of Klade Alpha Token\n', '     * @param omega_token_address address - Address of Klade Omega Token\n', '     * @param required_collateral uint - Required collateral to mint one pair of Klade Alpha/Omega Token\n', '     */\n', '    function add_new_token_pair(string calldata quarter, address alpha_token_address, address omega_token_address, uint required_collateral) external {\n', '        require(!quarter_set[quarter], "Quarter Already Set");\n', '        require(msg.sender == KladeAddress1 || msg.sender == KladeAddress2, "Only Klade can add token pairs");\n', '        quarter_data[quarter] = quarter_data_component(alpha_token_address, omega_token_address, required_collateral, 0);\n', '        quarter_set[quarter] = true;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     *  This function requires the user to send over wBTC in order to mint (_numToMint/10) pairs of tokens for the given\n', '     * quarter. Ex. _numPairsToMint is set to 100, the recipients will each be credited with 10 alpha and omega tokens respectively.\n', '     * @param quarter string - String representing Quarter that token will be added for - ie Q12021 for Quarter 1 of 2021\n', '     * @param _alpha_token_recipient address - Address of Klade Alpha Token receiver\n', '     * @param _omega_token_recipient address - Address of Klade Omega Token receiver\n', '     * @param _numPairsToMint uint - Number of Klade Alpha/Omega pairs to mint\n', '     */\n', '    function mint_tokens(string calldata quarter, address _alpha_token_recipient, address _omega_token_recipient, uint256 _numPairsToMint) external {\n', '        require(quarter_set[quarter], "Quarter not set");\n', '\n', '        uint collateral = safemath.mul(_numPairsToMint, quarter_data[quarter].required_collateral);\n', '        uint minting_fees = safemath.mul(_numPairsToMint, fee);\n', '\n', '        require(wbtc.transferFrom(msg.sender, address(this), safemath.add(collateral, minting_fees)));\n', '        quarter_data[quarter].total_collateral_backing = safemath.add(collateral, quarter_data[quarter].total_collateral_backing);\n', '\n', '        IKladeDiffToken alpha_token = IKladeDiffToken(quarter_data[quarter].AlphaToken);\n', '        IKladeDiffToken omega_token = IKladeDiffToken(quarter_data[quarter].OmegaToken);\n', '\n', '        // if either mint fails then the whole transaction is reverted\n', '        uint units_to_mint = safemath.mul(10**17, _numPairsToMint);\n', '        require(alpha_token.mint_tokens(_alpha_token_recipient, units_to_mint));\n', '        require(omega_token.mint_tokens(_omega_token_recipient, units_to_mint));\n', '        uncollected_fees = safemath.add(uncollected_fees, minting_fees);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * This function can only be called by a registered Klade Token\n', '     * The payout will be sent to payout_recipient\n', '     * impossible that a token can claim collateral from another quarter. \n', '     * Line 100 reverts if amount > quarter_data[quarter].total_collateral_backing\n', '     * @param quarter string - String representing Quarter that token will be added for - ie Q12021 for Quarter 1 of 2021\n', '     * @param recipient address - The recipient of the WBTC payout\n', '     * @param amount uint - amount of WBTC to payout\n', '     */\n', '    function payout(string calldata quarter, address recipient, uint amount) external returns (bool success) {\n', '        require(quarter_set[quarter], "Quarter not set");\n', '        require(quarter_data[quarter].AlphaToken == msg.sender || quarter_data[quarter].OmegaToken == msg.sender, "Only Alpha and Omega can transfer payout");\n', '        quarter_data[quarter].total_collateral_backing = safemath.sub(quarter_data[quarter].total_collateral_backing, amount);\n', '        require(wbtc.transfer(recipient, amount));\n', '        return true;\n', '    }\n', '\n', '\n', '    // Klade can collect fees\n', '    function collect_fees() external {\n', '        require(msg.sender == KladeAddress1 || msg.sender == KladeAddress2, "Only Klade wallets can collect minting fees");\n', '        uint to_pay = uncollected_fees;\n', '        uncollected_fees = 0;\n', '        require(wbtc.transfer(msg.sender, to_pay), "Failed to send minting fees");\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    fallback () external payable {\n', '        revert();\n', '    }\n', '}']