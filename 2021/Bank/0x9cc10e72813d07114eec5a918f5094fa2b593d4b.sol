['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// SPDX-License-Identifier: none\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract MultiCaller  {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '  \n', '    address public owner = msg.sender;\n', '\n', '    string public name;\n', '    string public symbol;\n', '\n', '\n', '    constructor  ()  {\n', '        name = "MultiCaller";\n', '        symbol = "MKC";\n', '  \n', '    }\n', '\n', '   \n', '    function withdrawAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n', '        require(owner==msg.sender);\n', '        return IERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '        \n', '    function withdrawETH(address payable to, uint amount) public returns (bool) {\n', '        require(msg.sender==owner);\n', '        to.transfer(amount);\n', '        return true;\n', '    }\n', '    \n', '     function ercBalanceMultiple(address[] memory tokenAddress, address walletAddress) public view returns  (uint [] memory ,address []  memory) {\n', '         uint[]    memory allBalance = new uint[](tokenAddress.length);\n', '         address[]    memory allContract = new address[](tokenAddress.length);\n', '         for(uint i=0; i<tokenAddress.length;i++){\n', '            allBalance[i]=IERC20(tokenAddress[i]).balanceOf(walletAddress);\n', '            allContract[i]=tokenAddress[i];\n', '           \n', '            \n', '         }\n', '         return (allBalance,allContract);\n', '    }\n', '    \n', '    receive() external payable {}\n', '    \n', '    function ercSingleBalancee(address tokenAddress, address userAddr) public view returns  (uint  balance,address  contractAddr) {\n', '         \n', '        balance=IERC20(tokenAddress).balanceOf(userAddr);\n', '        contractAddr=tokenAddress;\n', '            \n', '        return (balance,contractAddr);\n', '    }\n', '    \n', '  \n', '\n', '  \n', '}']