['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./AccessControl.sol";\n', 'import "./SafeMath.sol";\n', 'import "./IBPool.sol";\n', '\n', '\n', '/**\n', ' * @title Arbitrage bot contract\n', ' */\n', 'contract ArbitrageBot is AccessControl {\n', '    using SafeMath for uint256;\n', '\n', '    IBPool public bPool;\n', '    address public safeAccount;\n', '\n', '    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR_ROLE");\n', '    bytes32 public constant WITHDRAWAL_ROLE = keccak256("WITHDRAWAL_ROLE");\n', '\n', '    mapping(address => ERC20) private tokens;\n', '\n', '    string private constant UNAUTHORIZED_USER = "The Caller is Unauthorized";\n', '    string private constant UNSET_SAFE_ACCOUNT = "First set the safe account";\n', '    string private constant TRANSFER_ERROR = "Token transfer failed";\n', '\n', '    event Swapped(address tokenIn, address tokenOut, uint256 tokenAmountIn, uint256 minTokenAmountOut);\n', '    event SafeAccountSet(address safeAccount);\n', '    event ReclaimedToken(address token, uint256 amount, address safeAccount);\n', '\n', '    /**\n', '     * @dev sets values for\n', '     * @param _bPool address of the balancer pool\n', '     * @param _deus address of DEUS token\n', '     * @param _dea address of DEA token\n', '     * @param _sdea address of SDEA token\n', '     * @param _suni_dd address of SUNI_DD token\n', '     * @param _suni_de address of SUNI_DE token\n', '     * @param _suni_du address of SUNI_DU token\n', '     * @param _sdeus address of SDEUS token\n', '     */\n', '    constructor(\n', '        address _bPool,\n', '        address _deus,\n', '        address _dea,\n', '        address _sdea,\n', '        address _suni_dd,\n', '        address _suni_de,\n', '        address _suni_du,\n', '        address _sdeus\n', '    ) public {\n', '        bPool = IBPool(_bPool);\n', '        tokens[_deus] = ERC20(_deus);\n', '        tokens[_dea] = ERC20(_dea);\n', '        tokens[_sdea] = ERC20(_sdea);\n', '        tokens[_suni_dd] = ERC20(_suni_dd);\n', '        tokens[_suni_de] = ERC20(_suni_de);\n', '        tokens[_suni_du] = ERC20(_suni_du);\n', '        tokens[_sdeus] = ERC20(_sdeus);\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '    }\n', '\n', '    /**\n', '     *@notice swap base token to quote token\n', '     * @param tokenIn address of the base token\n', '     * @param tokenOut address of the quote token\n', '     * @param tokenAmountIn amount of the base token\n', '     * @param incrementalPercentage The incremental percentage\n', '     */\n', '    function _trade(address tokenIn, address tokenOut, uint256 tokenAmountIn, uint256 incrementalPercentage)\n', '        internal\n', '    {\n', '        uint maxPrice = bPool.getSpotPrice(tokenIn, tokenOut).mul(incrementalPercentage).div(100);\n', '        uint minTokenAmountOut = tokenAmountIn.div(maxPrice);\n', '        tokens[tokenIn].approve(address(bPool), tokenAmountIn);\n', '        emit Swapped(tokenIn, tokenOut, tokenAmountIn, minTokenAmountOut);\n', '        bPool.swapExactAmountIn(tokenIn, tokenAmountIn, tokenOut, minTokenAmountOut, maxPrice);\n', '    }\n', '\n', '    /**\n', '     *@notice create a batch transaction to swap multiple pairs on the Balancer pool to balance the pool\n', '     * @param tokensIn The list of the base tokens\n', '     * @param tokensOut The list of the quote tokens\n', '     * @param tokensAmountIn The amount of list of the base tokens\n', '     * @param incrementalPercentages list of the incremental percentage\n', '     */\n', '    function makeBalance(\n', '        address[] memory tokensIn,\n', '        address[] memory tokensOut,\n', '        uint256[] memory tokensAmountIn,\n', '        uint256[] memory incrementalPercentages\n', '    )\n', '    \texternal\n', '    {\n', '        require(hasRole(OPERATOR_ROLE, _msgSender()), UNAUTHORIZED_USER);\n', '\n', '        for (uint8 i = 0; i < tokensIn.length; i++) {\n', '        \t_trade(tokensIn[i], tokensOut[i], tokensAmountIn[i], incrementalPercentages[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @notice get the the pair's current price\n", '     * @param tokenIn address of the base token\n', '     * @param tokenOut address of the quote token\n', '     */\n', '    function getSpotPrice(address tokenIn, address tokenOut)\n', '        external\n', '        view\n', '        returns(uint)\n', '    {\n', '        return bPool.getSpotPrice(tokenIn, tokenOut);\n', '    }\n', '\n', '    /**\n', '     * @notice Set a safe address where reclaimed tokens will go\n', '     * @param _safeAccount a safe address where reclaimed tokens will go\n', '     */\n', '    function setSafeAccount(address _safeAccount)\n', '        external\n', '    {\n', '        require(hasRole(WITHDRAWAL_ROLE, _msgSender()), UNAUTHORIZED_USER);\n', '\n', '        safeAccount = _safeAccount;\n', '        emit SafeAccountSet(_safeAccount);\n', '    }\n', '\n', '    /**\n', '    * @notice Reclaim tokens of the specified type sent to the safe account\n', '     * @param token The token address\n', '     * @param amount Withdrawal amount\n', '     */\n', '    function reclaimTokens(address token, uint256 amount)\n', '        external\n', '    {\n', '        require(hasRole(WITHDRAWAL_ROLE, _msgSender()), UNAUTHORIZED_USER);\n', '\n', '        require(safeAccount != address(0), UNSET_SAFE_ACCOUNT);\n', '\n', '        require(tokens[token].transfer(safeAccount, amount), TRANSFER_ERROR);\n', '        emit ReclaimedToken(token, amount, safeAccount);\n', '    }\n', '}']