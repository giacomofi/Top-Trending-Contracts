['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "./Context.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'import "./AggregatorV3Interface.sol";\n', '\n', 'interface Oracle{\n', '    function getPrice() external view returns(uint256);\n', '}\n', '\n', '\n', 'contract buying is Context{\n', '    using SafeMath for uint256;\n', '    \n', '    AggregatorV3Interface internal _priceETH;\n', '    AggregatorV3Interface internal _priceLINK;\n', '    \n', '    address public _USDT=0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address public _USDC=0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public _LINK=0x514910771AF9Ca656af840dff83E8264EcF986CA;\n', '    address public _ROTS;\n', '    address payable public _admin;\n', '    uint256 _balance=105e23;\n', '    bool public _started;\n', '    uint256 public _startTime;\n', '    address public oracle;\n', '    \n', '    constructor(address _rotsAddress) public {\n', '        _ROTS=_rotsAddress;\n', '        _admin=msg.sender;\n', '        _priceETH = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '        _priceLINK = AggregatorV3Interface(0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c);\n', '    }\n', '    \n', '    \n', '    \n', '    function remainingROTS() public view returns (uint256) {\n', '        return _balance;\n', '    }\n', '    \n', '    function getUSDPrice(uint256 _amount) public view returns(uint256){\n', '        return _amount.mul(_price()).div(10e18);\n', '    }\n', '    \n', '    function getLINKPrice(uint256 _amount) public view returns(uint256){\n', '        return _amount.mul(_price()).mul(getLatestPrice(_priceLINK)).div(10e11);\n', '    }\n', '    \n', '    function getETHPrice(uint256 _amount) public view returns(uint256){\n', '        return _amount.mul(_price()).mul(getLatestPrice(_priceETH)).div(10e11);\n', '    }\n', '    \n', '    \n', '    function setOracle(address _oracle) public virtual returns (bool){\n', '        require(_msgSender()==_admin,"You don\'t have permissions to perfrom the selected task.");\n', '        oracle=_oracle;\n', '    }\n', '    \n', '    function start() public virtual returns (bool){\n', '        require(_msgSender()==_admin,"You don\'t have permissions to perfrom the selected task.");\n', '        require(_started==false,"Already started.");\n', '        _started=true;\n', '        _startTime=now;\n', '    }\n', '     \n', '    function buyUSDT(uint256 _amount) public virtual returns(bool){\n', '        require(_started==true,"Buying not yet started.");\n', '        uint256 _rotsAmount=_amount.mul(_price()).div(10e18);\n', '        _buy(_USDT,_amount,_rotsAmount);\n', '        return true;\n', '    }\n', '    \n', '    function buyUSDC(uint256 _amount) public virtual returns(bool){\n', '        require(_started==true,"Buying not yet started.");\n', '        uint256 _rotsAmount=_amount.mul(_price()).div(10e18);\n', '        _buy(_USDC,_amount,_rotsAmount);\n', '        return true;\n', '    }\n', '    \n', '    function buyLINK(uint256 _amount) public virtual returns(bool){\n', '        require(_started==true,"Buying not yet started.");\n', '        uint256 _rotsAmount=_amount.mul(_price()).mul(getLatestPrice(_priceLINK)).div(10e11);\n', '        _buy(_LINK,_amount,_rotsAmount);\n', '        return true;\n', '    }\n', '    \n', '    function buyETH() public payable returns(bool){\n', '        require(_started==true,"Buying not yet started.");\n', '        uint256 _amount=msg.value;\n', '        _admin.transfer(_amount);\n', '        uint256 _rotsAmount=_amount.mul(_price()).mul(getLatestPrice(_priceETH)).div(10e11);\n', '        require(_rotsAmount<=_balance,"Not enough ROTS in contract.");\n', '        IERC20(_ROTS).transfer(_msgSender(),_rotsAmount);\n', '        _balance=_balance.sub(_rotsAmount);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function _buy(address _tokenAddress,uint256 _amount,uint256 _rotsAmount) internal virtual{\n', '        IERC20(_tokenAddress).transferFrom(_msgSender(),_admin,_amount);\n', '        require(_rotsAmount<=_balance,"Not enough ROTS in contract.");\n', '        IERC20(_ROTS).transfer(_msgSender(),_rotsAmount);\n', '        _balance=_balance.sub(_rotsAmount);\n', '    }\n', '    \n', '    function _price() public view returns(uint256){\n', '        uint256 price_;\n', '        if (oracle!=address(0)){\n', '            price_=Oracle(oracle).getPrice();\n', '        }\n', '        else {\n', '            price_=1e19;\n', '        }\n', '        \n', '        \n', '        return price_;\n', '    }\n', '    \n', '    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n', '        (,int price,,,) = priceFeed.latestRoundData();\n', '        return uint256(price);\n', '    }\n', '}']