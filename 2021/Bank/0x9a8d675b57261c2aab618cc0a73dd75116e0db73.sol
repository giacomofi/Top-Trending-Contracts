['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "./Context.sol";\n', 'import "./Ownable.sol";\n', 'import "./IERC20.sol";\n', 'import "./Address.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'import "./IPancakeRouter02.sol";\n', 'import "./IPancakeFactory.sol";\n', '\n', 'contract EthGold is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '\n', '    mapping(address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 1000000000 * 10**8;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '\n', '    string private _name = "EthGold";\n', '    string private _symbol = "ETHGOLD";\n', '    uint8 private _decimals = 9;\n', '\n', '    uint256 public _taxFee = 10;\n', '    uint256 private _previousTaxFee = _taxFee;\n', '\n', '    uint256 public _liquidityFee = 10;\n', '    uint256 private _previousLiquidityFee = _liquidityFee;\n', '\n', '    IPancakeRouter02 public immutable uniswapV2Router;\n', '    address public immutable uniswapV2Pair;\n', '\n', '    bool inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled = true;\n', '\n', '    uint256 public _maxTxAmount = 5000000 * 10**8;\n', '    uint256 private numTokensSellToAddToLiquidity = 500000 * 10**8;\n', '\n', '    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        uint256 tokensSwapped,\n', '        uint256 ethReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor(uint256 _pancakeRouterAddress) public {\n', '        _rOwned[_msgSender()] = _rTotal;\n', '\n', '        IPancakeRouter02 _uniswapV2Router =\n', '            IPancakeRouter02(_pancakeRouterAddress);\n', '        // Create a uniswap pair for this new token\n', '        uniswapV2Pair = IPancakeFactory(_uniswapV2Router.factory()).createPair(\n', '            address(this),\n', '            _uniswapV2Router.WETH()\n', '        );\n', '\n', '        // set the rest of the contract variables\n', '        uniswapV2Router = _uniswapV2Router;\n', '\n', '        //exclude owner and this contract from fee\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function isExcludedFromReward(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(\n', '            !_isExcluded[sender],\n', '            "Excluded addresses cannot call this function"\n', '        );\n', '        (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount, , , , , ) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            rAmount <= _rTotal,\n', '            "Amount must be less than total reflections"\n', '        );\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeFromReward(address account) public onlyOwner() {\n', "        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\n", '        require(!_isExcluded[account], "Account is already excluded");\n', '        if (_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeInReward(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _transferBothExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function excludeFromFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = true;\n', '    }\n', '\n', '    function includeInFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = false;\n', '    }\n', '\n', '    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n', '        _taxFee = taxFee;\n', '    }\n', '\n', '    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\n', '        _liquidityFee = liquidityFee;\n', '    }\n', '\n', '    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n', '        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n', '    }\n', '\n', '    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '\n', '    //to recieve ETH from uniswapV2Router when swaping\n', '    receive() external payable {}\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount)\n', '        private\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) =\n', '            _getTValues(tAmount);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\n', '            _getRValues(tAmount, tFee, tLiquidity, _getRate());\n', '        return (\n', '            rAmount,\n', '            rTransferAmount,\n', '            rFee,\n', '            tTransferAmount,\n', '            tFee,\n', '            tLiquidity\n', '        );\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount)\n', '        private\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 tFee = calculateTaxFee(tAmount);\n', '        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n', '        return (tTransferAmount, tFee, tLiquidity);\n', '    }\n', '\n', '    function _getRValues(\n', '        uint256 tAmount,\n', '        uint256 tFee,\n', '        uint256 tLiquidity,\n', '        uint256 currentRate\n', '    )\n', '        private\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (\n', '                _rOwned[_excluded[i]] > rSupply ||\n', '                _tOwned[_excluded[i]] > tSupply\n', '            ) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _takeLiquidity(uint256 tLiquidity) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n', '        if (_isExcluded[address(this)])\n', '            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n', '    }\n', '\n', '    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_taxFee).div(10**2);\n', '    }\n', '\n', '    function calculateLiquidityFee(uint256 _amount)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _amount.mul(_liquidityFee).div(10**2);\n', '    }\n', '\n', '    function removeAllFee() private {\n', '        if (_taxFee == 0 && _liquidityFee == 0) return;\n', '\n', '        _previousTaxFee = _taxFee;\n', '        _previousLiquidityFee = _liquidityFee;\n', '\n', '        _taxFee = 0;\n', '        _liquidityFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _taxFee = _previousTaxFee;\n', '        _liquidityFee = _previousLiquidityFee;\n', '    }\n', '\n', '    function isExcludedFromFee(address account) public view returns (bool) {\n', '        return _isExcludedFromFee[account];\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if (from != owner() && to != owner())\n', '            require(\n', '                amount <= _maxTxAmount,\n', '                "Transfer amount exceeds the maxTxAmount."\n', '            );\n', '\n', '        // is the token balance of this contract address over the min number of\n', '        // tokens that we need to initiate a swap + liquidity lock?\n', "        // also, don't get caught in a circular liquidity event.\n", "        // also, don't swap & liquify if sender is uniswap pair.\n", '        uint256 contractTokenBalance = balanceOf(address(this));\n', '\n', '        if (contractTokenBalance >= _maxTxAmount) {\n', '            contractTokenBalance = _maxTxAmount;\n', '        }\n', '\n', '        bool overMinTokenBalance =\n', '            contractTokenBalance >= numTokensSellToAddToLiquidity;\n', '        if (\n', '            overMinTokenBalance &&\n', '            !inSwapAndLiquify &&\n', '            from != uniswapV2Pair &&\n', '            swapAndLiquifyEnabled\n', '        ) {\n', '            contractTokenBalance = numTokensSellToAddToLiquidity;\n', '            //add liquidity\n', '            swapAndLiquify(contractTokenBalance);\n', '        }\n', '\n', '        //indicates if fee should be deducted from transfer\n', '        bool takeFee = true;\n', '\n', '        //if any account belongs to _isExcludedFromFee account then remove the fee\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '        }\n', '\n', '        //transfer amount, it will take tax, burn, liquidity fee\n', '        _tokenTransfer(from, to, amount, takeFee);\n', '    }\n', '\n', '    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '        // split the contract balance into halves\n', '        uint256 half = contractTokenBalance.div(2);\n', '        uint256 otherHalf = contractTokenBalance.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n', '\n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidity(otherHalf, newBalance);\n', '\n', '        emit SwapAndLiquify(half, newBalance, otherHalf);\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            owner(),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    //this method is responsible for taking all fee, if takeFee is true\n', '    function _tokenTransfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount,\n', '        bool takeFee\n', '    ) private {\n', '        if (!takeFee) removeAllFee();\n', '\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(\n', '        address sender,\n', '        address recipient,\n', '        uint256 tAmount\n', '    ) private {\n', '        (\n', '            uint256 rAmount,\n', '            uint256 rTransferAmount,\n', '            uint256 rFee,\n', '            uint256 tTransferAmount,\n', '            uint256 tFee,\n', '            uint256 tLiquidity\n', '        ) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '}']