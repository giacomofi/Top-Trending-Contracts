['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-11\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '*\n', '* Code by Harshil Jain\n', '* Email: - [email\xa0protected]\n', '* Telegram: - @OreGaZembuTouchiSuru\n', '* ----------------------------------\n', '* Compiler Configurations: -\n', '* 1) Solidity -> v0.8.4\n', '* 2) Optimizations -> Yes (200)\n', '* ----------------------------------\n', '* Depolyed At -> 0x65C4a53dcC7c87024e6f91aEb39AC2d0B459F4df\n', '* \n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.9.0;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes32 initCodeHash) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint160(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '                initCodeHash\n', '            )))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB, bytes32 initCodeHash) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, initCodeHash)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path, bytes32 initCodeHash) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], initCodeHash);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path, bytes32 initCodeHash) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], initCodeHash);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Callee {\n', '    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '  function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '  function allPairs(uint) external view returns (address pair);\n', '  function allPairsLength() external view returns (uint);\n', '  function feeTo() external view returns (address);\n', '  function feeToSetter() external view returns (address);\n', '  function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'abstract contract Authorization {\n', '    \n', '    mapping(address => bool) isOwner;\n', '    mapping(address => bool) isAuthorized;\n', '    address kamiSama = 0x8c7B31eF7f282330Fa705677c185d495356F8026;\n', '    \n', '    constructor() {\n', '        isOwner[kamiSama] = true;\n', '        isAuthorized[kamiSama] = true;\n', '    }\n', '    \n', '    modifier onlyAuthorized() {\n', '        require(isAuthorized[msg.sender], "Not allowed");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(isOwner[msg.sender], "Not allowed");\n', '        _;\n', '    }\n', '    \n', '    event changedAuthorization(address _address, bool authorization);\n', '    event changedOwnership(address _address, bool _ownership);\n', '    \n', '    function setAuthorization(address _address, bool _authorize) onlyOwner() external {\n', '        if (!isOwner[_address]) {\n', '            isAuthorized[_address] = _authorize;\n', '            emit changedAuthorization(_address, _authorize);\n', '        }\n', '    }\n', '    \n', '    function setOwnership(address _address, bool _permission) onlyOwner() public {\n', '        if(_address != address(0) && _address != kamiSama) {\n', '            isOwner[_address] = _permission;\n', '            if(_permission) {\n', '                isAuthorized[_address] = _permission;\n', '            }\n', '            emit changedOwnership(_address, _permission);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ArbitrageSmartContract is Authorization {\n', '    using SafeMath for uint;\n', '    \n', '    struct DexInformation {\n', '        uint dexIndex;\n', '        string name;\n', '        bytes32 initCodeHash;\n', '        address routerAddress;\n', '    }\n', '    \n', '    mapping(uint => DexInformation) allDexInformation;\n', '    uint public dexCount = 0;\n', '\n', '    uint constant deadline = 1 days;\n', '    address token0;\n', '    address token1;\n', '    uint indexA;\n', '    uint indexB;\n', '    uint borrowAmount;\n', '    IUniswapV2Pair pairOnExchangeA;\n', '    address routerAddressOnExchangeB;\n', '    uint256 profitAmount = 0;\n', '    \n', '    constructor() {\n', '    }\n', '    \n', '    bool inArbitrage = false;\n', '    \n', '    modifier lockEntrace() {\n', '        require(!inArbitrage, "Already In Arbitrage. Cannot Re-enter");\n', '        inArbitrage = true;\n', '        _;\n', '        inArbitrage = false;\n', '    }\n', '    \n', '    event ProfitGenerated(uint256 _amount);\n', '    \n', '    function startArbitrage(\n', '        address _token0,\n', '        address _token1,\n', '        uint _amount0,\n', '        uint _amount1,\n', '        address _pairAddressOnExchangeA,\n', '        uint256 _indexA,\n', '        uint256 _indexB\n', '    ) onlyAuthorized() lockEntrace() external {\n', '        \n', '        require(_indexA <= dexCount && _indexB <= dexCount && _indexA > 0 && _indexB > 0, "Invalid Index Values");\n', '        require(\n', '            _pairAddressOnExchangeA != address(0) && \n', '            allDexInformation[_indexA].routerAddress != address(0) && \n', '            allDexInformation[_indexB].routerAddress != address(0),\n', '            "This pool or router does not exists"\n', '        );\n', '        require(_amount0 == 0 || _amount1 == 0, "One of the amounts has to be zero");\n', '        \n', '        borrowAmount = (_amount0 == 0) ? _amount1 : _amount0;\n', '        require(borrowAmount != 0, "Cannot borrow 0 tokens");\n', '        \n', '        indexA = _indexA;\n', '        indexB = _indexB;\n', '        pairOnExchangeA = IUniswapV2Pair(_pairAddressOnExchangeA);\n', '        routerAddressOnExchangeB = allDexInformation[_indexB].routerAddress;\n', '        (token0, token1) = (pairOnExchangeA.token0() == _token0) ? (_token0, _token1) : (_token1, _token0);\n', '        (uint amount0Out, uint amount1Out) = (pairOnExchangeA.token0() == _token0) ? (_amount0, _amount1) : (_amount1, _amount0);\n', '        \n', '        pairOnExchangeA.swap(\n', '            amount0Out,\n', '            amount1Out,\n', '            address(this),\n', "            bytes('not empty')\n", '        );\n', '        \n', '        emit ProfitGenerated(profitAmount);\n', '        profitAmount = 0;\n', '    }\n', '    \n', '    function uniswapV2Call(\n', '        address _sender, \n', '        uint _amount0, \n', '        uint _amount1, \n', '        bytes calldata _data\n', '    ) external {\n', '        require(msg.sender == address(pairOnExchangeA), "Unauthorized");\n', '        require(_amount0 == borrowAmount || _amount1 == borrowAmount, "Invalid Out Amount");\n', '        require(_amount0 == 0 || _amount1 == 0, "We never borrow two tokens at once");\n', '        \n', '        address[] memory path = new address[](2);\n', '        address _token0 = IUniswapV2Pair(msg.sender).token0();\n', '        address _token1 = IUniswapV2Pair(msg.sender).token1();\n', '        (path[0], path[1]) = _amount0 == 0 ? (_token0, _token1) : (_token1, _token0);\n', '        \n', '        require(\n', '            (path[0] == token0 && path[1] == token1) || (path[1] == token0 && path[0] == token1),\n', '            "Token Addresses have to be same as original addresses"\n', '        );\n', '        \n', '        uint amountRequired = UniswapV2Library.getAmountsIn(\n', '            pairOnExchangeA.factory(),\n', '            borrowAmount,\n', '            path,\n', '            allDexInformation[indexA].initCodeHash\n', '        )[0];\n', '        \n', '        IERC20 token = IERC20(path[1]);\n', '        token.approve(routerAddressOnExchangeB, borrowAmount);\n', '        \n', '        address temp = path[0];\n', '        path[0] = path[1];\n', '        path[1] = temp;\n', '        \n', '        uint amountReceived = IUniswapV2Router02(routerAddressOnExchangeB).swapExactTokensForTokens(\n', '            borrowAmount,\n', '            amountRequired,\n', '            path,\n', '            address(this),\n', '            block.timestamp + deadline\n', '        )[1];\n', '        \n', '        require(amountRequired > 0, "Invalid Required Amount");\n', '        require(amountReceived > amountRequired, "Amount Received is Less Than Repay Amount");\n', '        \n', '        IERC20 otherToken = IERC20(path[1]);\n', '        otherToken.transfer(msg.sender, amountRequired);\n', '        profitAmount = amountReceived - amountRequired;\n', '        otherToken.transfer(tx.origin, profitAmount);\n', '    }\n', '    \n', '    function addNewDexInformation(string memory _name, address _routerAddress, bytes32 _initCodeHash) external onlyOwner() returns(uint256) {\n', '        require(_routerAddress != address(0), "Invalid Input data...");\n', '        dexCount += 1;\n', '        \n', '        DexInformation storage newDexInfo = allDexInformation[dexCount];\n', '        newDexInfo.dexIndex = dexCount;\n', '        newDexInfo.name = _name;\n', '        newDexInfo.routerAddress = _routerAddress;\n', '        newDexInfo.initCodeHash = _initCodeHash;\n', '        allDexInformation[dexCount] = newDexInfo;\n', '        \n', '        return dexCount;\n', '    }\n', '    \n', '    function editDexInformation(uint256 _index, string memory _name, address _routerAddress, bytes32 _initCodeHash) external onlyOwner() {\n', '        require(_index > 0 && _index <= dexCount && _routerAddress != address(0), "Invalid Input data...");\n', '        \n', '        DexInformation storage newDexInfo = allDexInformation[_index];\n', '        newDexInfo.dexIndex = dexCount;\n', '        newDexInfo.name = _name;\n', '        newDexInfo.routerAddress = _routerAddress;\n', '        newDexInfo.initCodeHash = _initCodeHash;\n', '        allDexInformation[_index] = newDexInfo;\n', '    }\n', '    \n', '    function getDexInformation(uint256 _index) external view returns(DexInformation memory) {\n', '        return allDexInformation[_index];\n', '    }\n', '    \n', '    function getAllDexInformation() external view returns(DexInformation[] memory) {\n', '        DexInformation[] memory availableDexs = new DexInformation[](dexCount);\n', '        \n', '        for (uint i = 1; i <= dexCount; i++) {\n', '            availableDexs[i - 1] = allDexInformation[i];\n', '        }\n', '        \n', '        return availableDexs;\n', '    }\n', '}']