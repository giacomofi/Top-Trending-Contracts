['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', '\n', '/*\n', '\n', 'FairShare\n', '\n', 'I was testing some ideas on a fair lottery token on ropsten then i saw the EverShare contract. We have some similar ideas so i tweaked my token a bit.\n', '\n', 'This token save fees in the contract & send to a random single holder wallet in the community every 120-180 mins.\n', '\n', 'More info:\n', '\n', '    - Stealth / fair launch with small liquidity.\n', '    - There is a max tx (buy / sell) & 1 block cooldown to stop bots.\n', '    - A wallet can not hold more than 1.5% total supply.\n', '    - Fees of transactions will stay in the contract as lottery pool, the prize is sent out every 120-180 mins (appro.) to a random single holder wallet.\n', '    - 2% burn fee\n', '    - 8% dev fee (50% lottery pool, 50% shared wallet)\n', '\n', 'For traders:\n', '\n', '    - Total supply: 1 000 000 000 000\n', '    - Max tx (buy/sell): 3 000 000 000\n', '    - Max wallet amount: 15 000 000 000\n', '    - Slippage: 12-15%\n', '\n', 'Lottery rules:\n', '\n', '    - Minimum amount of tokens to be eligible for lottery: 2 000 000 000\n', '    - If you bought and have not sold, you are eligible.\n', "    - Sellers are a part of the token so to be fair, i don't exclude them completely from the lottery prize but there are some punishments:\n", '        - If you sell any amount and your final balance has less than 500 000 000 tokens, you are blacklisted from lottery\n', '        - If you sell any amount and your final balance has more than 500 000 000 tokens, your wallet will be flagged, you can only win 5% of the prize if you are selected by the contract (next draw will have bigger prize, i like EuroMillions style)\n', '        - A seller can only win once, then the wallet is blacklisted from lottery\n', '\n', 'This is a community token, I will lock LP & renounce ownership.\n', '\n', '    - 100% tokens & 1.5-2 ETH will be put in liquidity, 0 dev tokens, 0 burnt. (why burn tokens if you can lower the initial supply on creation ...)\n', '    - I will initially lock all LP in the contract for 7 days.\n', '    - If this token takes off, i will extend the lock / burn liquidity.\n', '    - If this token fails, i will remove the locked liquidity after it unlocks.\n', '\n', 'Little advertisement:\n', '\n', '    - My friend created a new TG group for discussion about new ideas / tokenomics for meme coins: t.me/new_idea_meme, feel free to join & discuss.\n', '\n', 'Good luck & have fun\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Contract is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    struct PlayerInfo {\n', '        bool included;\n', '        bool reduced;\n', '        uint256 index;\n', '    }\n', '\n', '    struct Payout {\n', '        address addr;\n', '        uint256 amount;\n', '        uint256 time;\n', '    }\n', '\n', '    // uniswap & trading\n', '    address internal constant ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address public uniswapV2Pair;\n', '    bool public tradingOpen = false;\n', '    bool private _inSwap = false;\n', '    mapping (address => uint256) private _timestamp;\n', '    uint256 private _coolDown = 15 seconds;\n', '\n', '    // token\n', '    mapping(address => bool) public isExcludedFromFee;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => uint256) private _balances;\n', '    uint256 public constant maxTxAmount = 3000 * 10 ** 6 * 10 ** 9;\n', '    uint256 public constant maxWalletAmount = 15000 * 10 ** 6 * 10 ** 9;\n', '    uint256 public constant minHoldForLottery = 2000 * 10 ** 6 * 10 ** 9;\n', '    uint256 public constant minHoldSellerForLottery = 500 * 10 ** 6 * 10 ** 9;\n', '    uint256 private constant _totalSupply = 1000000 * 10 ** 6 * 10 ** 9;\n', "    string private constant _name = 'Fair Share';\n", "    string private constant _symbol = 'FairShare';\n", '    uint8 private constant _decimals = 9;\n', '    uint256 public burnFee = 2; // 2% burn\n', '    uint256 public devFee = 8; // 8% dev (50% lottery pool, 50% shared wallet)\n', '    uint256 private _previousBurnFee = burnFee;\n', '    uint256 private _previousDevFee = devFee;\n', '    address payable private _sharedWallet;\n', '    address private constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\n', '\n', '    // for liquidity lock\n', '    uint256 public releaseTime = block.timestamp;\n', '\n', '    // lottery\n', '    address[] private _lotteryPlayers;\n', '    Payout[] public lotteryPayout;\n', '    Payout public lastLotteryPayout;\n', '    mapping(address => bool) public isBlacklistedFromLottery;\n', '    mapping(address => PlayerInfo) private _lotteryPlayersInfo;\n', '    uint256 public lotteryBalance = 0;\n', '    uint256 public timeBetweenLotteryDraw = 180;\n', '    uint256 public lastLotteryDraw = block.timestamp;\n', '\n', '    modifier lockTheSwap {\n', '        _inSwap = true;\n', '        _;\n', '        _inSwap = false;\n', '    }\n', '\n', '    constructor() public {\n', '        _sharedWallet = _msgSender();\n', '        _balances[address(this)] = _totalSupply;\n', '        isExcludedFromFee[_msgSender()] = true;\n', '        isExcludedFromFee[address(this)] = true;\n', '\n', '        // blacklist contract & burn addr from lottery\n', '        isBlacklistedFromLottery[address(this)] = true;\n', '        isBlacklistedFromLottery[_burnAddress] = true;\n', '\n', '        emit Transfer(address(0), address(this), _totalSupply);\n', '    }\n', '\n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() external view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\n', '        return true; \n', '    }\n', '        \n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function isReducedLotteryPrize(address account) public view returns(bool) {\n', '        return _lotteryPlayersInfo[account].reduced;\n', '    }\n', '\n', '    function isLotteryPlayer(address account) public view returns(bool) {\n', '        return _lotteryPlayersInfo[account].included;\n', '    }\n', '\n', '    function nbLotteryPlayer() external view returns(uint256) {\n', '        return _lotteryPlayers.length;\n', '    }\n', '\n', '    function nbLotteryPayout() external view returns(uint256) {\n', '        return lotteryPayout.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Return next lottery draw time\n', '     */\n', '    function nextLotteryDraw() external view returns (uint256) {\n', '        return lastLotteryDraw + timeBetweenLotteryDraw * 1 minutes;\n', '    }\n', '\n', '    /**\n', '     * @dev Extends the lock of LP in contract\n', '     */\n', '    function lockLp(uint256 newReleaseTime) external {\n', '        require(_msgSender() == _sharedWallet || _msgSender() == owner(), "You are not allowed to call this function");\n', '        require(newReleaseTime > releaseTime, "You can only extend LP lock time");\n', '\n', '        releaseTime = newReleaseTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Release LP when its unlock\n', '     */\n', '    function releaseLp() external {\n', '        require(_msgSender() == _sharedWallet || _msgSender() == owner(), "You are not allowed to call this function");\n', '        require(releaseTime < now, "LP still locked");\n', '\n', '        IERC20(uniswapV2Pair).transfer(_sharedWallet, IERC20(uniswapV2Pair).balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Burn LP when its unlock (send all LP to burn address)\n', '     */\n', '    function burnLp() external {\n', '        require(_msgSender() == _sharedWallet || _msgSender() == owner(), "You are not allowed to call this function");\n', '\n', '        IERC20(uniswapV2Pair).transfer(_burnAddress, IERC20(uniswapV2Pair).balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Create uniswap pair, add liquidity & open trading\n', '     */\n', '    function openTrading() external onlyOwner() {\n', '        require(!tradingOpen, "Trading is already enabled / opened");\n', '\n', '        uniswapV2Router = IUniswapV2Router02(ROUTER_ADDRESS);\n', '\n', '        _approve(address(this), address(uniswapV2Router), _totalSupply);\n', '        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n', '\n', '        // blacklist uniswap addr from lottery\n', '        isBlacklistedFromLottery[ROUTER_ADDRESS] = true;\n', '        isBlacklistedFromLottery[uniswapV2Pair]  = true;\n', '\n', '        // add liquidity\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, address(this), now + 600);\n', '\n', '        // open trading\n', '        tradingOpen = true;\n', '\n', '        // lock liquidity\n', '        releaseTime = now + 7 days;\n', '\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        if (! isExcludedFromFee[sender] && ! isExcludedFromFee[recipient]) {\n', '            require(amount <= maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '\n', '            if (recipient != uniswapV2Pair) {\n', '                require(amount.add(balanceOf(recipient)) <= maxWalletAmount, "Wallet amount exceeds the maxWalletAmount");\n', '            }\n', '        }\n', '\n', '        if (sender == uniswapV2Pair) {\n', '            //they just bought so add 1 block cooldown - fuck you frontrunners\n', '            _timestamp[recipient] = block.timestamp.add(_coolDown);\n', '        }\n', '\n', '        if (! isExcludedFromFee[sender] && sender != uniswapV2Pair) {\n', '            require(block.timestamp >= _timestamp[sender], "Cooldown");\n', '        }\n', '\n', '        uint256 contractTokenBalance = balanceOf(address(this));\n', '        uint256 minOfTokensToExchangeForDev = _getMinOfTokensToExchangeForDev();\n', '\n', '        if (minOfTokensToExchangeForDev > maxTxAmount) {\n', '            minOfTokensToExchangeForDev = maxTxAmount;\n', '        }\n', '\n', '        if (!_inSwap && tradingOpen && sender!= uniswapV2Pair && contractTokenBalance >= minOfTokensToExchangeForDev) {\n', '            _swapTokensForEth(minOfTokensToExchangeForDev);\n', '\n', '            _sendETHToFee(address(this).balance);\n', '        }\n', '\n', '        bool takeFee = true;\n', '\n', '        if(isExcludedFromFee[sender] || isExcludedFromFee[recipient]){\n', '            takeFee = false;\n', '        }\n', '\n', '        _tokenTransfer(sender,recipient,amount,takeFee);\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if(!takeFee)\n', '            _removeAllFee();\n', '\n', '        _transferStandard(sender, recipient, amount);\n', '\n', '        if(!takeFee)\n', '            _restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 tTransferAmount, uint256 tDev, uint256 tBurn) = _getValues(tAmount);\n', '\n', '        _balances[sender]    = _balances[sender].sub(tAmount);\n', '        _balances[recipient] = _balances[recipient].add(tTransferAmount);\n', '\n', '        _takeAllFee(tDev);\n', '        _sendBurnFee(sender, tBurn);\n', '\n', '        // buyer has more than `minHoldForLottery` tokens\n', '        if (_balances[recipient] >= minHoldForLottery) {\n', '            // add new addr to lottery pool\n', '            if (! isLotteryPlayer(recipient) && ! isBlacklistedFromLottery[recipient]) {\n', '                _lotteryPlayers.push(recipient);\n', '                _lotteryPlayersInfo[recipient] = PlayerInfo(true, false, _lotteryPlayers.length - 1);\n', '            }\n', '        }\n', '\n', '        // seller has more than `minHoldSellerForLottery` tokens\n', '        if (_balances[sender] >= minHoldSellerForLottery && ! isBlacklistedFromLottery[sender]) {\n', '            if (! isLotteryPlayer(sender)) {\n', '                _lotteryPlayers.push(sender);\n', '                _lotteryPlayersInfo[sender] = PlayerInfo(true, true, _lotteryPlayers.length - 1);\n', '            } else {\n', '                _lotteryPlayersInfo[sender].reduced = true;\n', '            }\n', '        }\n', '\n', '        // seller has lass than `minHoldSellerForLottery` tokens\n', '        if (_balances[sender] < minHoldSellerForLottery && ! isBlacklistedFromLottery[sender]) {\n', '            _blacklistFromLottery(sender);\n', '        }\n', '\n', '        // draw\n', '        if (block.timestamp >= lastLotteryDraw + timeBetweenLotteryDraw * 1 minutes) {\n', '            _sendLotteryPrize();\n', '        }\n', '\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _removeAllFee() private {\n', '        if(burnFee == 0 && devFee == 0) return;\n', '\n', '        _previousBurnFee = burnFee;\n', '        _previousDevFee = devFee;\n', '        burnFee = 0;\n', '        devFee = 0;\n', '    }\n', '\n', '    function _restoreAllFee() private {\n', '        burnFee = _previousBurnFee;\n', '        devFee = _previousDevFee;\n', '    }\n', '\n', '    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n', '        if (tokenAmount > 0) {\n', '            address[] memory path = new address[](2);\n', '            path[0] = address(this);\n', '            path[1] = uniswapV2Router.WETH();\n', '            _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '                tokenAmount,\n', '                0,\n', '                path,\n', '                address(this),\n', '                block.timestamp\n', '            );\n', '        }\n', '    }\n', '\n', '    function _sendETHToFee(uint256 amount) private lockTheSwap {\n', '        if (amount > lotteryBalance) {\n', '            uint256 change = amount.sub(lotteryBalance);\n', '\n', '            _sharedWallet.transfer(change.div(2));\n', '            lotteryBalance = lotteryBalance.add(change.div(2));\n', '        }\n', '    }\n', '\n', '    function _sendLotteryPrize() private {\n', '        if (_lotteryPlayers.length > 0 && lotteryBalance > 0) {\n', '            uint256 prize = lotteryBalance;\n', '            uint256 index = _semiRandom() % _lotteryPlayers.length;\n', '            address winner = _lotteryPlayers[index];\n', '            address payable target = payable(winner);\n', '\n', '            if (isReducedLotteryPrize(winner)) {\n', '                prize = lotteryBalance.div(20);\n', '            }\n', '\n', '            target.transfer(prize);\n', '\n', '            lastLotteryPayout = Payout(winner, prize, block.timestamp);\n', '            lotteryPayout.push(lastLotteryPayout);\n', '\n', '            // reset lastdraw\n', '            lastLotteryDraw = block.timestamp;\n', '\n', '            // reset random time between draw\n', '            timeBetweenLotteryDraw = _randtimeBetweenLotteryDraw();\n', '\n', '            // seller can only win once\n', '            if (isReducedLotteryPrize(winner)) {\n', '                _blacklistFromLottery(winner);\n', '            }\n', '\n', '            // update lottery balance\n', '            lotteryBalance = lotteryBalance.sub(prize);\n', '        }\n', '    }\n', '\n', '    function _takeAllFee(uint256 tFee) private {\n', '        if (tFee > 0) {\n', '            _balances[address(this)] = _balances[address(this)].add(tFee);\n', '        }\n', '    }\n', '\n', '    function _sendBurnFee(address sender, uint256 tFee) private {\n', '        if (tFee > 0) {\n', '            _balances[_burnAddress] = _balances[_burnAddress].add(tFee);\n', '\n', '            emit Transfer(sender, _burnAddress, tFee);\n', '        }\n', '    }\n', '\n', '    function _getMinOfTokensToExchangeForDev() private view returns (uint256) {\n', '        (uint256 tokens, , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\n', '\n', '        return tokens.div(100);\n', '    }\n', '\n', '    function _blacklistFromLottery(address addr) private {\n', '        isBlacklistedFromLottery[addr] = true;\n', '\n', '        if (_lotteryPlayers.length == 1) {\n', '            _lotteryPlayers.pop();\n', '\n', '            if (isLotteryPlayer(addr)) {\n', '                _lotteryPlayersInfo[addr].included = false;\n', '            }\n', '        }\n', '\n', '        if (_lotteryPlayers.length > 1 && isLotteryPlayer(addr)) {\n', '            uint256 index   = _lotteryPlayersInfo[addr].index;\n', '            address newAddr = _lotteryPlayers[_lotteryPlayers.length - 1];\n', '\n', '            if (index < _lotteryPlayers.length) {\n', '                _lotteryPlayers[index] = newAddr;\n', '                \n', '                if (isLotteryPlayer(newAddr)) {\n', '                    _lotteryPlayersInfo[newAddr].index = index;\n', '                }\n', '            }\n', '\n', '            _lotteryPlayers.pop();\n', '        }\n', '    }\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n', '        uint256 tDev = tAmount.mul(devFee).div(100);\n', '        uint256 tBurn = tAmount.mul(burnFee).div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tDev).sub(tBurn);\n', '\n', '        return (tTransferAmount, tDev, tBurn);\n', '    }\n', '\n', '    function _semiRandom() private view returns (uint256) {\n', '        return uint256(keccak256(abi.encodePacked(\n', '                block.timestamp + block.difficulty +\n', '                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\n', '                block.gaslimit +\n', '                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) +\n', '                block.number,\n', '                _lotteryPlayers\n', '            )));\n', '    }\n', '\n', '    /**\n', '     * @dev return 120-180 randomly\n', '     */\n', '    function _randtimeBetweenLotteryDraw() private view returns(uint256) {\n', '        uint256 seed = _semiRandom();\n', '\n', '        return 120 + seed % 61;\n', '    }\n', '\n', '    receive() external payable {}\n', '}']