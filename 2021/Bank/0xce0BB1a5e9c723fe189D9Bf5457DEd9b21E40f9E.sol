['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// File: contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: APPROVE_FAILED");\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: TRANSFER_FAILED");\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: TRANSFER_FROM_FAILED");\n', '    }\n', '\n', '    function safeTransferETH(address to, uint256 value) internal {\n', '        (bool success, ) = to.call{value: value}(new bytes(0));\n', '        require(success, "TransferHelper: ETH_TRANSFER_FAILED");\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', '// File: dxswap-core/contracts/interfaces/IDXswapPair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IDXswapPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '    function swapFee() external view returns (uint32);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '    function setSwapFee(uint32) external;\n', '}\n', '\n', '// File: contracts/libraries/DXswapLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', 'library DXswapLibrary {\n', '    using SafeMath for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', '        require(tokenA != tokenB, "DXswapLibrary: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(token0 != address(0), "DXswapLibrary: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"2db943b381c6ef706828ea5e89f480bd449d4d3a2b98e6da97b30d0eb41fb6d6" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) = IDXswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getSwapFee(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 swapFee) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        swapFee = IDXswapPair(pairFor(factory, tokenA, tokenB)).swapFee();\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "DXswapLibrary: INSUFFICIENT_AMOUNT");\n', '        require(reserveA > 0 && reserveB > 0, "DXswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 swapFee\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "DXswapLibrary: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > 0, "DXswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 amountInWithFee = amountIn.mul(uint256(10000).sub(swapFee));\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 swapFee\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "DXswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > 0, "DXswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\n', '        uint256 denominator = reserveOut.sub(amountOut).mul(uint256(10000).sub(swapFee));\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "DXswapLibrary: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i], path[i + 1]));\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "DXswapLibrary: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i - 1], path[i]));\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IDXswapFactory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IDXswapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n', '\n', '    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function protocolFeeDenominator() external view returns (uint8);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setProtocolFee(uint8 _protocolFee) external;\n', '\n', '    function setSwapFee(address pair, uint32 swapFee) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function balanceOf(address guy) external returns (uint256);\n', '\n', '    function approve(address guy, uint256 wad) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IBatchExchange.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IBatchExchange {\n', '    function tokenAddressToIdMap(address addr) external view returns (uint16);\n', '\n', '    function tokenIdToAddressMap(uint16 id) external view returns (address);\n', '\n', '    function hasToken(address addr) external view returns (bool);\n', '\n', '    function placeOrder(\n', '        uint16 buyToken,\n', '        uint16 sellToken,\n', '        uint32 validUntil,\n', '        uint128 buyAmount,\n', '        uint128 sellAmount\n', '    ) external returns (uint256);\n', '\n', '    function placeValidFromOrders(\n', '        uint16[] calldata buyTokens,\n', '        uint16[] calldata sellTokens,\n', '        uint32[] calldata validFroms,\n', '        uint32[] calldata validUntils,\n', '        uint128[] calldata buyAmounts,\n', '        uint128[] calldata sellAmounts\n', '    ) external returns (uint16[] memory orderIds);\n', '\n', '    function cancelOrders(uint16[] calldata orderIds) external;\n', '}\n', '\n', '// File: contracts/interfaces/IEpochTokenLocker.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IEpochTokenLocker {\n', '    function deposit(address token, uint256 amount) external;\n', '\n', '    function withdraw(address user, address token) external;\n', '\n', '    function getCurrentBatchId() external view returns (uint32);\n', '\n', '    function requestWithdraw(address token, uint256 amount) external;\n', '\n', '    function BATCH_TIME() external view returns (uint32);\n', '}\n', '\n', '// File: contracts/libraries/FixedPoint.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', '        require(x != 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n', '        uint256 z;\n', '        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/DXswapOracleLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library DXswapOracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2**32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(address pair)\n', '        internal\n', '        view\n', '        returns (\n', '            uint256 price0Cumulative,\n', '            uint256 price1Cumulative,\n', '            uint32 blockTimestamp\n', '        )\n', '    {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IDXswapPair(pair).price0CumulativeLast();\n', '        price1Cumulative = IDXswapPair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IDXswapPair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/OracleCreator.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '\n', '\n', '\n', 'contract OracleCreator {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint256;\n', '\n', '    event OracleCreated(\n', '        uint256 indexed _oracleIndex,\n', '        address indexed _pair,\n', '        uint256 _windowTime\n', '    );\n', '\n', '    struct Oracle{\n', '        uint256 windowTime;\n', '        address token0;\n', '        address token1;\n', '        IDXswapPair pair;\n', '        uint32 blockTimestampLast;\n', '        uint256 price0CumulativeLast;\n', '        uint256 price1CumulativeLast;\n', '        FixedPoint.uq112x112 price0Average;\n', '        FixedPoint.uq112x112 price1Average;\n', '        uint256 observationsCount;\n', '        address owner;\n', '    }\n', '\n', '    mapping(uint256 => Oracle) public oracles;\n', '    uint256 public oraclesIndex;\n', '\n', '    function createOracle(\n', '        uint256 windowTime,\n', '        address pair\n', '    ) public returns (uint256 oracleId) {\n', '        IDXswapPair sourcePair = IDXswapPair(pair);\n', '        address token0 = sourcePair.token0();\n', '        address token1 = sourcePair.token1();\n', '        (,, uint32 blockTimestampLast) =  sourcePair.getReserves();\n', '\n', '        oracles[oraclesIndex] = Oracle({\n', '            windowTime: windowTime,\n', '            token0: token0,\n', '            token1: token1,\n', '            pair: sourcePair,\n', '            blockTimestampLast: blockTimestampLast,\n', '            price0CumulativeLast: sourcePair.price0CumulativeLast(),\n', '            price1CumulativeLast: sourcePair.price1CumulativeLast(),\n', '            price0Average: FixedPoint.uq112x112(0),\n', '            price1Average: FixedPoint.uq112x112(0),\n', '            observationsCount: 0,\n', '            owner: msg.sender\n', '        });\n', '        oracleId = oraclesIndex;\n', '        oraclesIndex++;\n', '        emit OracleCreated(oracleId, address(sourcePair), windowTime);\n', '    }\n', '\n', '    function update(uint256 oracleIndex) public {\n', '        Oracle storage oracle = oracles[oracleIndex];\n', "        require(msg.sender == oracle.owner, 'OracleCreator: CALLER_NOT_OWNER');\n", "        require(oracle.observationsCount < 2, 'OracleCreator: FINISHED_OBERSERVATION');\n", '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            DXswapOracleLibrary.currentCumulativePrices(address(oracle.pair));\n', '        uint32 timeElapsed = blockTimestamp - oracle.blockTimestampLast; // overflow is desired\n', '\n', '        // first update can be executed immediately. Ensure that at least one full period has passed since the first update \n', '        require(\n', '          oracle.observationsCount == 0 || timeElapsed >= oracle.windowTime, \n', "          'OracleCreator: PERIOD_NOT_ELAPSED'\n", '        );\n', '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        oracle.price0Average = FixedPoint.uq112x112(\n', '          uint224((price0Cumulative - oracle.price0CumulativeLast) / timeElapsed)\n', '        );\n', '        oracle.price1Average = FixedPoint.uq112x112(\n', '          uint224((price1Cumulative - oracle.price1CumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        oracle.price0CumulativeLast = price0Cumulative;\n', '        oracle.price1CumulativeLast = price1Cumulative;\n', '        oracle.blockTimestampLast = blockTimestamp;\n', '        oracle.observationsCount++;\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(uint256 oracleIndex, address token, uint256 amountIn) external view returns (uint256 amountOut) {\n', '        Oracle storage oracle = oracles[oracleIndex];\n', '        FixedPoint.uq112x112 memory avg;\n', '        if (token == oracle.token0) { \n', '          avg = oracle.price0Average;\n', '        } else {\n', "          require(token == oracle.token1, 'OracleCreator: INVALID_TOKEN'); \n", '          avg = oracle.price1Average;\n', '        }\n', '        amountOut = avg.mul(amountIn).decode144();\n', '    }\n', '\n', '    function isOracleFinalized(uint256 oracleIndex) external view returns (bool){\n', '        return oracles[oracleIndex].observationsCount == 2;\n', '    }\n', '\n', '    function getOracleDetails(uint256 oracleIndex) external view returns (Oracle memory) {\n', '      return oracles[oracleIndex];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/GnosisProtocolRelayer.sol\n', '\n', 'pragma solidity =0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GnosisProtocolRelayer {\n', '    using SafeMath for uint256;\n', '\n', '    event NewOrder(\n', '        uint256 indexed _orderIndex\n', '    );\n', '\n', '    event PlacedTrade(\n', '        uint256 indexed _orderIndex,\n', '        uint256 _gpOrderID,\n', '        uint16 buyToken,\n', '        uint16 sellToken,\n', '        uint32 validUntil,\n', '        uint128 expectedAmountMin,\n', '        uint128 tokenInAmount\n', '    );\n', '\n', '    event PlacedExactTrade(\n', '        uint16 _gpOrderID,\n', '        uint16 buyToken,\n', '        uint16 sellToken,\n', '        uint32 validFrom,\n', '        uint32 validUntil,\n', '        uint128 tokenOutAmount,\n', '        uint128 tokenInAmount\n', '    );\n', '\n', '    event WithdrawnExpiredOrder(\n', '        uint256 indexed _orderIndex\n', '    );\n', '\n', '    struct Order {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint128 tokenInAmount;\n', '        uint128 minTokenOutAmount;\n', '        uint256 priceTolerance;\n', '        uint256 minReserve;\n', '        address oraclePair;\n', '        uint256 startDate;\n', '        uint256 deadline;\n', '        uint256 oracleId;\n', '        uint256 gpOrderId;\n', '        address factory;\n', '        bool executed;\n', '    }\n', '\n', '    uint256 public immutable GAS_ORACLE_UPDATE = 168364;\n', '    uint256 public immutable PARTS_PER_MILLION = 1000000;\n', '    uint256 public immutable BOUNTY = 0.01 ether;\n', '    uint256 public immutable ORACLE_WINDOW_TIME = 120; // 2 Minutes\n', '    uint32 public immutable BATCH_TIME;\n', '    uint32 public immutable UINT32_MAX_VALUE = 2**32 - 1;\n', '    uint128 public immutable UINT128_MAX_VALUE = 2**128 - 1;\n', '\n', '    address public immutable batchExchange;\n', '    address public immutable epochTokenLocker;\n', '    address payable public owner;\n', '    address public immutable WETH;\n', '\n', '    OracleCreator public oracleCreator;\n', '    uint256 public orderCount;\n', '    mapping(uint256 => Order) public orders;\n', '    mapping(address => bool) public exchangeFactoryWhitelist;\n', '\n', '    constructor(\n', '        address payable _owner,\n', '        address _batchExchange,\n', '        address _epochTokenLocker,\n', '        address[] memory _factoryWhitelist,\n', '        address _WETH,\n', '        OracleCreator _oracleCreater\n', '    ) public {\n', "        require(_factoryWhitelist.length > 0, 'GnosisProtocolRelayer: MISSING_FACTORY_WHITELIST');\n", '        batchExchange = _batchExchange;\n', '        epochTokenLocker = _epochTokenLocker;\n', '        oracleCreator = _oracleCreater;\n', '        owner = _owner;\n', '        WETH = _WETH;\n', '        BATCH_TIME = IEpochTokenLocker(_epochTokenLocker).BATCH_TIME();\n', '\n', '        for (uint i=0; i < _factoryWhitelist.length; i++) {\n', '            exchangeFactoryWhitelist[_factoryWhitelist[i]] = true;\n', '        }\n', '    }\n', '\n', '    function orderTrade(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint128 tokenInAmount,\n', '        uint128 minTokenOutAmount,\n', '        uint256 priceTolerance,\n', '        uint256 minReserve,\n', '        uint256 startDate,\n', '        uint256 deadline,\n', '        address factory\n', '    ) external payable returns (uint256 orderIndex) {\n', "        require(exchangeFactoryWhitelist[factory], 'GnosisProtocolRelayer: INVALID_FACTORY');\n", "        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", "        require(tokenIn != tokenOut, 'GnosisProtocolRelayer: INVALID_PAIR');\n", "        require(tokenInAmount > 0 && minTokenOutAmount > 0, 'GnosisProtocolRelayer: INVALID_TOKEN_AMOUNT');\n", "        require(priceTolerance <= PARTS_PER_MILLION, 'GnosisProtocolRelayer: INVALID_TOLERANCE');\n", "        require(deadline <= UINT32_MAX_VALUE, 'GnosisProtocolRelayer: INVALID_DEADLINE');\n", "        require(block.timestamp <= deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\n", '        if (tokenIn == address(0)) {\n', "            require(address(this).balance >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFICIENT_ETH');\n", '            tokenIn = WETH;\n', '            IWETH(WETH).deposit{value: tokenInAmount}();\n', '        } else if (tokenOut == address(0)) {\n', '            tokenOut = WETH;\n', '        }\n', "        require(IERC20(tokenIn).balanceOf(address(this)) >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFIENT_TOKEN_IN');\n", '\n', '        address pair = _pair(tokenIn, tokenOut, factory);\n', "        require(pair != address(0), 'GnosisProtocolRelayer: UNKOWN_PAIR');\n", '        orderIndex = _OrderIndex();\n', '        orders[orderIndex] = Order({\n', '            tokenIn: tokenIn,\n', '            tokenOut: tokenOut,\n', '            tokenInAmount: tokenInAmount,\n', '            minTokenOutAmount: minTokenOutAmount,\n', '            priceTolerance: priceTolerance,\n', '            minReserve: minReserve,\n', '            oraclePair: pair,\n', '            startDate: startDate,\n', '            deadline: deadline,\n', '            oracleId: 0,\n', '            gpOrderId: 0,\n', '            factory: factory,\n', '            executed: false\n', '        });\n', '\n', '        /* Create an oracle to calculate average price */\n', '        orders[orderIndex].oracleId = oracleCreator.createOracle(ORACLE_WINDOW_TIME, pair);\n', '        emit NewOrder(orderIndex);\n', '    }\n', '\n', '    function placeTrade(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\n", "        require(!order.executed, 'GnosisProtocolRelayer: ORDER_EXECUTED');\n", "        require(oracleCreator.isOracleFinalized(order.oracleId) , 'GnosisProtocolRelayer: OBSERVATION_RUNNING');\n", "        require(block.timestamp <= order.deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\n", "        require(block.timestamp > order.startDate , 'GnosisProtocolRelayer: FUTURE_STARTDATE');\n", '\n', '        order.executed = true;\n', '        /* Approve token on Gnosis Protocol */\n', '        TransferHelper.safeApprove(order.tokenIn, epochTokenLocker, order.tokenInAmount);\n', '\n', '        /* Deposit token in Gnosis Protocol */\n', '        IEpochTokenLocker(epochTokenLocker).deposit(order.tokenIn, order.tokenInAmount);\n', '\n', '        /* Lookup TokenIds in Gnosis Protocol */\n', '        uint16 sellToken = IBatchExchange(batchExchange).tokenAddressToIdMap(order.tokenIn);\n', '        uint16 buyToken = IBatchExchange(batchExchange).tokenAddressToIdMap(order.tokenOut);\n', '        \n', '        uint256 expectedAmount = oracleCreator.consult(\n', '          order.oracleId,\n', '          order.tokenIn == address(0) ? WETH : order.tokenIn,\n', '          order.tokenInAmount \n', '        );\n', '\n', '        uint256 expectedAmountMin = expectedAmount.sub(expectedAmount.mul(order.priceTolerance) / PARTS_PER_MILLION);\n', '        \n', "        require(expectedAmountMin >= order.minTokenOutAmount, 'GnosisProtocolRelayer: INVALID_PRICE_RANGE');\n", "        require(expectedAmountMin <= UINT128_MAX_VALUE,'GnosisProtocolRelayer: AMOUNT_OUT_OF_RANGE');\n", '       \n', '        /* Calculate batch Deadline (5 Minutes window) */\n', '        uint32 validUntil = uint32(order.deadline/BATCH_TIME);\n', '        uint256 gpOrderId = IBatchExchange(batchExchange).placeOrder(buyToken, sellToken, validUntil, uint128(expectedAmountMin), order.tokenInAmount);\n', '        order.gpOrderId = gpOrderId;\n', '        emit PlacedTrade(orderIndex, gpOrderId, buyToken, sellToken, validUntil, uint128(expectedAmountMin), order.tokenInAmount);\n', '    }\n', '\n', '    function placeExactTrade(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint128 tokenInAmount,\n', '        uint128 tokenOutAmount,\n', '        uint256 startDate,\n', '        uint256 deadline\n', '    ) external {\n', "        require(startDate < deadline, 'GnosisProtocolRelayer: INVALID_STARTDATE');\n", "        require(block.timestamp <= deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\n", "        require(deadline <= UINT32_MAX_VALUE, 'GnosisProtocolRelayer: INVALID_DEADLINE');\n", "        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", "        require(tokenIn != tokenOut, 'GnosisProtocolRelayer: INVALID_PAIR');\n", "        require(tokenInAmount > 0 && tokenOutAmount > 0, 'GnosisProtocolRelayer: INVALID_TOKEN_AMOUNT');\n", '\n', '        if (tokenIn == address(0)) {\n', "            require(address(this).balance >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFICIENT_ETH');\n", '            tokenIn = WETH;\n', '            IWETH(WETH).deposit{value: tokenInAmount}();\n', '        } else if (tokenOut == address(0)) {\n', '            tokenOut = WETH;\n', '        }\n', '\n', "        require(IERC20(tokenIn).balanceOf(address(this)) >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFIENT_TOKEN_IN');\n", '\n', '        /* Extend startDate if needed, to make sure the order will be placed on GP */\n', '        if(startDate <= block.timestamp){\n', '          startDate = block.timestamp.add(ORACLE_WINDOW_TIME) < deadline ? block.timestamp.add(ORACLE_WINDOW_TIME) : startDate;\n', '        }\n', '\n', '        /* Approve token on Gnosis Protocol */\n', '        TransferHelper.safeApprove(tokenIn, epochTokenLocker, tokenInAmount);\n', '\n', '        /* Deposit token in Gnosis Protocol */\n', '        IEpochTokenLocker(epochTokenLocker).deposit(tokenIn, tokenInAmount);\n', '\n', '        uint16[] memory sellTokens = new uint16[](1);\n', '        uint16[] memory buyTokens = new uint16[](1);\n', '        uint32[] memory validFroms = new uint32[](1);\n', '        uint32[] memory validUntils = new uint32[](1);\n', '        uint128[] memory buyAmounts = new uint128[](1);\n', '        uint128[] memory sellAmounts = new uint128[](1);\n', '        \n', '         /* Lookup TokenIds in Gnosis Protocol */\n', '        sellTokens[0] = IBatchExchange(batchExchange).tokenAddressToIdMap(tokenIn);\n', '        buyTokens[0] = IBatchExchange(batchExchange).tokenAddressToIdMap(tokenOut);\n', '        validFroms[0] = uint32(startDate/BATCH_TIME);\n', '        validUntils[0] = uint32(deadline/BATCH_TIME);\n', '        buyAmounts[0] = tokenOutAmount;\n', '        sellAmounts[0] = tokenInAmount;\n', '\n', '        uint16[] memory gpOrderId = IBatchExchange(batchExchange).placeValidFromOrders(buyTokens, sellTokens, validFroms, validUntils, buyAmounts, sellAmounts);\n', '        emit PlacedExactTrade(gpOrderId[0], buyTokens[0], sellTokens[0], validFroms[0], validUntils[0], buyAmounts[0], sellAmounts[0]);\n', '    }\n', '\n', '    function cancelOrder(uint16 gpOrderId) external {\n', "        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '\n', '        uint16[] memory orderArray = new uint16[](1);\n', '        orderArray[0] = uint16(gpOrderId);\n', '        IBatchExchange(batchExchange).cancelOrders(orderArray);\n', '    }\n', '\n', '    // Updates a price oracle and sends a bounty to msg.sender\n', '    function updateOracle(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\n", "        require(block.timestamp <= order.deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\n", "        require(!oracleCreator.isOracleFinalized(order.oracleId) , 'GnosisProtocolRelayer: OBSERVATION_ENDED');\n", "        require(block.timestamp > order.startDate, 'GnosisProtocolRelayer: FUTURE_STARTDATE');\n", '        uint256 amountBounty = GAS_ORACLE_UPDATE.mul(tx.gasprice).add(BOUNTY);\n', '        (uint reserve0, uint reserve1,) = IDXswapPair(order.oraclePair).getReserves();\n', '        address token0 = IDXswapPair(order.oraclePair).token0();\n', '        address tokenIn = order.tokenIn == address(0) ? WETH : order.tokenIn;\n', '\n', '        // Makes sure the reserve of TokenIn is higher then minReserve\n', '        if(tokenIn == token0){\n', '            require(\n', '              reserve0 >= order.minReserve,\n', "              'GnosisProtocolRelayer: RESERVE_TO_LOW'\n", '            );\n', '        } else {\n', '            require(\n', '              reserve1 >= order.minReserve,\n', "              'GnosisProtocolRelayer: RESERVE_TO_LOW'\n", '            );\n', '        }\n', '        \n', '        oracleCreator.update(order.oracleId);\n', '        if(address(this).balance >= amountBounty){\n', '            TransferHelper.safeTransferETH(msg.sender, amountBounty);\n', '        }\n', '    }\n', '\n', '    function withdrawExpiredOrder(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\n", "        require(block.timestamp > order.deadline, 'GnosisProtocolRelayer: DEADLINE_NOT_REACHED');\n", "        require(!order.executed, 'GnosisProtocolRelayer: ORDER_EXECUTED');\n", '\n', '        if (order.tokenIn == WETH) {\n', '            IWETH(WETH).withdraw(order.tokenInAmount);\n', '            TransferHelper.safeTransferETH(owner, order.tokenInAmount);\n', '        } else {\n', '            TransferHelper.safeTransfer(order.tokenIn, owner, order.tokenInAmount);\n', '        }\n', '\n', '        order.executed = true;\n', '        emit WithdrawnExpiredOrder(orderIndex);\n', '    }\n', '\n', '    // Requests a token withdraw on GP\n', '    function requestWithdraw(address token, uint256 amount) public{\n', "      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '      IEpochTokenLocker(epochTokenLocker).requestWithdraw(token,amount);\n', '    }\n', '\n', '    // Releases tokens from Gnosis Protocol\n', '    function withdrawToken(address token) public {\n', "      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '      IEpochTokenLocker(epochTokenLocker).withdraw(address(this), token);\n', '      if (token == WETH) {\n', '          uint balance = IWETH(WETH).balanceOf(address(this));\n', '          IWETH(WETH).withdraw(balance);\n', '          ETHWithdraw(balance);\n', '      } else {\n', '          uint balance = IERC20(token).balanceOf(address(this));\n', '          ERC20Withdraw(token, balance);\n', '      }\n', '    }\n', '\n', '    // Internal function to return the pair address on a given factory\n', '    function _pair(address tokenA, address tokenB, address factory) internal view returns (address pair) {\n', "      require(exchangeFactoryWhitelist[factory], 'GnosisProtocolRelayer: INVALID_FACTORY');\n", '      pair = IDXswapFactory(factory).getPair(tokenA, tokenB);\n', '    }\n', '\n', '    // Returns an OrderIndex that is used to reference liquidity orders\n', '    function _OrderIndex() internal returns(uint256 orderIndex){\n', '        orderIndex = orderCount;\n', '        orderCount++;\n', '    }\n', '\n', '    function changeOwner(address payable _newOwner) public{\n', "      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '      owner = _newOwner;\n', '    }\n', '    \n', '    // Allows the owner to withdraw any ERC20 from the relayer\n', '    function ERC20Withdraw(address token, uint256 amount) public {\n', "        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '        TransferHelper.safeTransfer(token, owner, amount);\n', '    }\n', '\n', '    // Allows the owner to withdraw any ETH amount from the relayer\n', '    function ETHWithdraw(uint256 amount) public {\n', "        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\n", '        TransferHelper.safeTransferETH(owner, amount);\n', '    }\n', '\n', '    // Returns the data of one specific order\n', '    function GetOrderDetails(uint256 orderIndex) external view returns (Order memory) {\n', '      return orders[orderIndex];\n', '    }\n', '\n', '    receive() external payable {}\n', '}']