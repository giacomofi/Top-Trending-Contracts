['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com \n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.8.0; // solhint-disable-line\n', '\n', '// site : \n', '\n', 'contract VoltesFarm {\n', '    \n', '    // CEO FEE - %% of transaction\n', '    uint256 public CEO_FEE = 5;\n', '    \n', '    address payable public superPowerfulDragonOwner;\n', '    uint256 public lastPrice = 2000000000000000000;\n', '    uint public hatchingSpeed = 200;\n', '    uint256 public snatchedOn;\n', '    bool public isSuperPowerfulDragonEnabled = false;\n', '    \n', '    function enableSuperPowerfulDragon(bool enable) public {\n', '        require(msg.sender == ceoAddress);\n', '        isSuperPowerfulDragonEnabled = enable;\n', '        superPowerfulDragonOwner = ceoAddress;\n', '        snatchedOn = block.timestamp;\n', '    }\n', '    \n', '    function withdrawAdminMoney(uint percentage) public {\n', '        require(msg.sender == ceoAddress);\n', '        uint256 myBalance = calculatePercentage(ceoEtherBalance, percentage);\n', '        ceoAddress.transfer(myBalance);\n', '    }\n', '    \n', '    function buySuperPowerFulDragon() public payable {\n', '        require(isSuperPowerfulDragonEnabled);\n', '        require(isSuperPowerfulDragonEnabled);\n', '        uint currenPrice = SafeMath.add(SafeMath.div(SafeMath.mul(lastPrice, 4),100),lastPrice);\n', '        require(msg.value > currenPrice);\n', '        \n', '        uint256 timeSpent = SafeMath.sub(block.timestamp, snatchedOn);\n', '        userReferralEggs[superPowerfulDragonOwner] += SafeMath.mul(hatchingSpeed,timeSpent);\n', '        \n', '        hatchingSpeed += SafeMath.div(SafeMath.sub(block.timestamp, contractStarted), 60*60*24);\n', '        ceoEtherBalance += calculatePercentage(msg.value, 2);\n', '        superPowerfulDragonOwner.transfer(msg.value - calculatePercentage(msg.value, 2));\n', '        lastPrice = currenPrice;\n', '        superPowerfulDragonOwner = msg.sender;\n', '        snatchedOn = block.timestamp;\n', '    }\n', '    \n', '    function claimSuperDragonEggs() public {\n', '        require(isSuperPowerfulDragonEnabled);\n', '        require (msg.sender == superPowerfulDragonOwner);\n', '        uint256 timeSpent = SafeMath.sub(block.timestamp, snatchedOn);\n', '        userReferralEggs[superPowerfulDragonOwner] += SafeMath.mul(hatchingSpeed,timeSpent);\n', '        snatchedOn = block.timestamp;\n', '    }\n', '    \n', '    //uint256 EGGS_PER_Dragon_PER_SECOND=1;\n', '    uint256 public EGGS_TO_HATCH_1Dragon=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_Dragon=5;\n', '\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    \n', '    bool public activated=false;\n', '    address payable public ceoAddress;\n', '    uint public ceoEtherBalance;\n', '    \n', '    mapping (address => uint256) public iceDragons;\n', '    mapping (address => uint256) public premiumDragons;\n', '    mapping (address => uint256) public ultraDragon;\n', '    \n', '    mapping (address => uint256) public userHatchRate;\n', '    \n', '    mapping (address => bool) public cashedOut;\n', '    \n', '    mapping (address => uint256) public userReferralEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    \n', '    uint256 public marketEggs;\n', '    uint256 public contractStarted;\n', '    \n', '    constructor() public {\n', '        ceoAddress = msg.sender;\n', '    }\n', '    \n', '    function seedMarket() public payable {\n', '        require(marketEggs == 0);\n', '        activated = true;\n', '        marketEggs = 8640000000;\n', '        contractStarted = block.timestamp;\n', '    }\n', '    \n', '    function getMyEggs() public view returns(uint256) {\n', '        return SafeMath.add(userReferralEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    \n', '    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(EGGS_TO_HATCH_1Dragon,SafeMath.sub(block.timestamp,lastHatch[adr]));\n', '\n', '        uint256 dragonCount = SafeMath.mul(iceDragons[adr], 10);\n', '        dragonCount = SafeMath.add(SafeMath.mul(ultraDragon[adr], 20), dragonCount);\n', '        dragonCount = SafeMath.add(dragonCount, premiumDragons[adr]);\n', '        return SafeMath.mul(secondsPassed, dragonCount);\n', '    }\n', '    \n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function getMyPremiumDragons() public view returns(uint256) {\n', '        return premiumDragons[msg.sender];\n', '    }\n', '    \n', '    function getMyIceDragon() public view returns(uint256) {\n', '        return iceDragons[msg.sender];\n', '    }\n', '    \n', '    function getMyUltraDragon() public view returns(uint256) {\n', '        return ultraDragon[msg.sender];\n', '    }\n', '    \n', '    // 10 eggs per hour\n', '    function getEggsToHatchDragon() public view returns (uint) {\n', '        uint256 timeSpent = SafeMath.sub(block.timestamp, contractStarted); \n', '        timeSpent = SafeMath.div(timeSpent, 3600);\n', '        return SafeMath.mul(timeSpent, 10);\n', '    }\n', '    \n', '    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount,percentage), 100);\n', '    }\n', '    \n', '    function getDragonsToBuy(uint256 eth, uint256 multiplier) internal returns(uint256) {\n', '        require(activated);\n', '        \n', '        if (lastHatch[msg.sender] == 0) {\n', '            lastHatch[msg.sender] = block.timestamp;\n', '        }\n', '        \n', '        uint eggsBought = SafeMath.div(calculateEggBuy(msg.value, SafeMath.sub(SafeMath.sub(address(this).balance, ceoEtherBalance), msg.value)), multiplier);\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '\n', '        require(eggsBought > 0);\n', '        \n', '        ceoEtherBalance += calculatePercentage(msg.value, CEO_FEE);\n', '        hatchEggs(msg.sender);\n', '        return eggsBought;\n', '    }\n', '    \n', '    \n', '    function devFee(uint256 amount) public view returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount,CEO_FEE),100);\n', '    }\n', '    \n', '    function buyPremiumDrangon() public payable {\n', '        uint dragons = getDragonsToBuy(msg.value, 1);\n', '        premiumDragons[msg.sender] += dragons;\n', '    }\n', '    \n', '    function buyIceDrangon() public payable {\n', '        uint dragons = getDragonsToBuy(msg.value, 9);\n', '        iceDragons[msg.sender] += dragons;\n', '    }\n', '    \n', '    function buyUltraDrangon() public payable {\n', '        require(activated);\n', '        uint dragons = getDragonsToBuy(msg.value, 17);\n', '        ultraDragon[msg.sender] += dragons;\n', '    }\n', '    \n', '    function hatchEggs(address ref) public {\n', '        require(activated);\n', '        \n', '        if (ref != msg.sender ) {\n', '            referrals[msg.sender] = ref;\n', '        }\n', '        \n', '        uint256 eggsProduced = getMyEggs();\n', '        uint256 newDragon = SafeMath.div(eggsProduced, EGGS_TO_HATCH_1Dragon);\n', '        newDragon = SafeMath.div(eggsProduced, EGGS_TO_HATCH_1Dragon);\n', '        premiumDragons[msg.sender] = SafeMath.add(premiumDragons[msg.sender], newDragon);\n', '        lastHatch[msg.sender]=block.timestamp;\n', '        \n', '        \n', '         userReferralEggs[msg.sender] = 0; \n', '        \n', '        //send referral eggs\n', '        userReferralEggs[referrals[msg.sender]]=SafeMath.add(userReferralEggs[referrals[msg.sender]],SafeMath.div(eggsProduced,10));\n', '        \n', '        //boost market to nerf Dragon hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(newDragon,10));\n', '    }\n', '    \n', '    function sellEggs() public {\n', '        require(activated);\n', '        uint256 hasEggs = SafeMath.div(getMyEggs(), EGGS_TO_HATCH_1Dragon);\n', '        uint256 ethValue = calculateEggSell(hasEggs);\n', '        uint256 fee = calculatePercentage(ethValue, CEO_FEE);\n', '        userReferralEggs[msg.sender] = 0;\n', '        lastHatch[msg.sender]=block.timestamp;\n', '        marketEggs=SafeMath.add(marketEggs, hasEggs);\n', '        ceoEtherBalance += fee;\n', '        require(address(this).balance > ceoEtherBalance);\n', '        msg.sender.transfer(SafeMath.sub(ethValue,fee));\n', '    }\n', '    \n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    \n', '    function calculateEggSell(uint256 eggs) public view returns(uint256){\n', '        return calculateEggSell(eggs, SafeMath.sub(address(this).balance, ceoEtherBalance));\n', '    }\n', '    \n', '    function calculateEggSell(uint256 eggs, uint256 eth) public view returns(uint256){\n', '        return calculateTrade(eggs, marketEggs, eth);\n', '    }\n', '    \n', '    \n', '    function calculateEggBuy(uint256 eth, uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth, contractBalance, marketEggs);\n', '    }\n', '    \n', '    function calculateEggBuy(uint256 eth) public view returns(uint256) {\n', '        return calculateEggBuy(eth, SafeMath.sub(address(this).balance, ceoEtherBalance));\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']