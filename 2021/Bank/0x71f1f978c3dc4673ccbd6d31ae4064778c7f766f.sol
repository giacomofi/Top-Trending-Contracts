['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface IUniswapV2Pair {\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract UniBuy {\n', '    \n', '    address constant private WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address private _owner;\n', '    mapping(address => bool) private _ownerList;\n', '    \n', '    constructor() {\n', '        _owner = msg.sender;\n', '        _ownerList[msg.sender] = true;\n', '    }\n', '    \n', '    function buy(IUniswapV2Pair pair) external payable {\n', '        require(_ownerList[msg.sender], "!Owner");\n', '        require(msg.value > 0, "INSUFFICIENT_INPUT_AMOUNT");\n', '        address[2] memory path = [pair.token0(), pair.token1()];\n', '        bool direction = true;\n', '        require(path[0] != address(0) && path[1] != address(0), "!Pair");\n', '        require(path[0] == WETH || path[1] == WETH, "!Eth Pair");\n', '        if (path[1] == WETH) {\n', '            direction = false;\n', '        }\n', '        (uint reserveIn, uint reserveOut,) = pair.getReserves();\n', '        if (!direction) {\n', '            uint temp = reserveIn;\n', '            reserveIn = reserveOut;\n', '            reserveOut = temp;\n', '        }\n', '        require(reserveIn > 0 && reserveOut > 0, "INSUFFICIENT_LIQUIDITY");\n', '        uint amountInWithFee = msg.value * 997;\n', '        uint numerator = amountInWithFee * reserveOut;\n', '        uint denominator = reserveIn * 1000 + amountInWithFee;\n', '        uint amountsOut = numerator / denominator;\n', '        IWETH(WETH).deposit{value: msg.value}();\n', '        IWETH(WETH).transfer(address(pair), msg.value);\n', '        if (direction) {\n', '            pair.swap(0, amountsOut, msg.sender, new bytes(0));\n', '        } else {\n', '            pair.swap(amountsOut, 0, msg.sender, new bytes(0));\n', '        }\n', '    }\n', '    \n', '    function newOwner(address _newOwner) external {\n', '        require(_owner == msg.sender, "!Owner");\n', '        _ownerList[_newOwner] = true;\n', '    }\n', '}']