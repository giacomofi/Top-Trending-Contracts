['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'pragma abicoder v2;\n', '\n', 'interface IUniswapV3 {\n', '    \n', '    function tickSpacing() external view returns (int24);\n', '    \n', '    function slot0()\n', '        external\n', '        view\n', '        returns (\n', '            uint160 sqrtPriceX96,\n', '            int24 tick,\n', '            uint16 observationIndex,\n', '            uint16 observationCardinality,\n', '            uint16 observationCardinalityNext,\n', '            uint8 feeProtocol,\n', '            bool unlocked\n', '        );\n', '\n', '    function feeGrowthGlobal0X128() external view returns (uint256);\n', '    \n', '    function feeGrowthGlobal1X128() external view returns (uint256);\n', '\n', '    function protocolFees() external view returns (uint128 token0, uint128 token1);\n', '\n', '    function liquidity() external view returns (uint128);\n', '\n', '    function ticks(int24 tick)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 liquidityGross,\n', '            int128 liquidityNet,\n', '            uint256 feeGrowthOutside0X128,\n', '            uint256 feeGrowthOutside1X128,\n', '            int56 tickCumulativeOutside,\n', '            uint160 secondsPerLiquidityOutsideX128,\n', '            uint32 secondsOutside,\n', '            bool initialized\n', '        );\n', '\n', '    function tickBitmap(int16 wordPosition) external view returns (uint256);\n', '\n', '    function positions(bytes32 key)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 _liquidity,\n', '            uint256 feeGrowthInside0LastX128,\n', '            uint256 feeGrowthInside1LastX128,\n', '            uint128 tokensOwed0,\n', '            uint128 tokensOwed1\n', '        );\n', '\n', '    function observations(uint256 index)\n', '        external\n', '        view\n', '        returns (\n', '            uint32 blockTimestamp,\n', '            int56 tickCumulative,\n', '            uint160 secondsPerLiquidityCumulativeX128,\n', '            bool initialized\n', '        );\n', '}\n', '\n', '\n', 'contract UniV3Helper {\n', '    \n', '    int24 private constant MIN_TICK = -887272;\n', '    int24 private constant MAX_TICK = -MIN_TICK;\n', '    \n', '    struct Tick {\n', '        uint128 liquidityGross;\n', '        int128 liquidityNet;\n', '        uint256 feeGrowthOutside0X128;\n', '        uint256 feeGrowthOutside1X128;\n', '        int56 tickCumulativeOutside;\n', '        uint160 secondsPerLiquidityOutsideX128;\n', '        uint32 secondsOutside;\n', '        int24 index; // tick index\n', '    }\n', '    \n', '    function getTicks(IUniswapV3 pool) external view returns (bytes[] memory ticks) {\n', '        \n', '        int24 tickSpacing = pool.tickSpacing();\n', '        (,int24 tick,,,,,) = pool.slot0();\n', '        \n', '        int24 fromTick = tick - (tickSpacing * 1000);\n', '        int24 toTick = tick + (tickSpacing * 1000);\n', '        if (fromTick < MIN_TICK) {\n', '            fromTick = MIN_TICK;\n', '        }\n', '        if (toTick > MAX_TICK) {\n', '            toTick = MAX_TICK;\n', '        }\n', '        \n', '        int24[] memory initTicks = new int24[](uint((toTick - fromTick + 1) / tickSpacing));\n', '\n', '        uint counter = 0;\n', '        for (int24 tickNum = (fromTick / tickSpacing * tickSpacing); tickNum <=  (toTick / tickSpacing * tickSpacing); tickNum += 256) {\n', '            int16 pos = int16((tickNum / tickSpacing) >> 8);\n', '            uint256 bm = pool.tickBitmap(pos);   \n', '        \n', '             while (bm != 0) {\n', '                 uint8 bit = mostSignificantBit(bm);\n', '                 initTicks[counter] = (int24(pos) * 256 + int24(bit)) * tickSpacing;\n', '                 \n', '                 counter += 1;\n', '                 bm ^= 1 << bit;\n', '             }\n', '             \n', '        }\n', '        \n', '        ticks = new bytes[](counter);\n', '        for (uint i = 0; i < counter; i++) {\n', '            (           \n', '                uint128 liquidityGross,\n', '                int128 liquidityNet,\n', '                uint256 feeGrowthOutside0X128,\n', '                uint256 feeGrowthOutside1X128\n', '                , // int56 tickCumulativeOutside,\n', '                , // secondsPerLiquidityOutsideX128\n', '                , // uint32 secondsOutside\n', '                , // init\n', '            ) = pool.ticks(initTicks[i]);\n', '                 \n', '             ticks[i] = abi.encodePacked(\n', '                 liquidityGross,\n', '                 liquidityNet,\n', '                 feeGrowthOutside0X128,\n', '                 feeGrowthOutside1X128,\n', '                 // tickCumulativeOutside,\n', '                 // secondsPerLiquidityOutsideX128,\n', '                 // secondsOutside,\n', '                 initTicks[i]\n', '             );\n', '        }\n', '    }\n', '    \n', '    function mostSignificantBit(uint256 x) private pure returns (uint8 r) {\n', '        require(x > 0);\n', '\n', '        if (x >= 0x100000000000000000000000000000000) {\n', '            x >>= 128;\n', '            r += 128;\n', '        }\n', '        if (x >= 0x10000000000000000) {\n', '            x >>= 64;\n', '            r += 64;\n', '        }\n', '        if (x >= 0x100000000) {\n', '            x >>= 32;\n', '            r += 32;\n', '        }\n', '        if (x >= 0x10000) {\n', '            x >>= 16;\n', '            r += 16;\n', '        }\n', '        if (x >= 0x100) {\n', '            x >>= 8;\n', '            r += 8;\n', '        }\n', '        if (x >= 0x10) {\n', '            x >>= 4;\n', '            r += 4;\n', '        }\n', '        if (x >= 0x4) {\n', '            x >>= 2;\n', '            r += 2;\n', '        }\n', '        if (x >= 0x2) r += 1;\n', '    }\n', '}']