['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '/*\n', ' * Insert info about your project here\n', ' *\n', ' * \n', ' * ****USING FTPAntiBot**** \n', ' *\n', ' * \n', ' * Visit FairTokenProject.com/#antibot to learn how to use AntiBot with your project\n', ' * Your contract must hold 5Bil $GOLD(ProjektGold) or 5Bil $GREEN(ProjektGreen) in order to make calls on mainnet\n', ' * Calls on kovan testnet require > 1 $GOLD or $GREEN\n', ' * FairTokenProject is giving away 500Bil $GREEN to projects on a first come first serve basis for use of AntiBot\n', ' */ \n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private m_Owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        m_Owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return m_Owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_msgSender() == m_Owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }                                                                                           // You will notice there is no renounceOwnership() This is an unsafe and unnecessary practice\n', '}                                                                                               // By renouncing ownership you lose control over your coin and open it up to potential attacks \n', '                                                                                                // This practice only came about because of the lack of understanding on how contracts work\n', 'interface IUniswapV2Factory {                                                                   // We advise not using a renounceOwnership() function. You can look up hacks of address(0) contracts.\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface FTPAntiBot {                                                                          // Here we create the interface to interact with AntiBot\n', '    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\n', '    function registerBlock(address _recipient, address _sender) external;\n', '}\n', '\n', 'contract PHOENIX is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 private constant TOTAL_SUPPLY = 500000000 * 10**9;\n', '    uint256 private constant TEAM_SUPPLY = 10000000 * 10**9;\n', '    string private m_Name = "PHOENIX";\n', '    string private m_Symbol = "PHOENIX";\n', '    uint8 private m_Decimals = 9;\n', '    \n', '    uint256 private m_BanCount = 0;\n', '    uint256 private m_TxLimit  = 300000000 * 10**9;\n', '    uint256 private m_SafeTxLimit  = m_TxLimit;\n', '    uint256 private m_WalletLimit = m_SafeTxLimit.mul(4);\n', '    uint256 private m_TaxFee;\n', '    \n', '    uint8 private m_DevFee = 15;\n', '    \n', '    address payable private m_FeeAddress;\n', '    address private m_UniswapV2Pair;\n', '    \n', '    bool private m_TradingOpened = false;\n', '    bool private m_IsSwap = false;\n', '    bool private m_SwapEnabled = false;\n', '    bool private m_AntiBot = true;\n', '    \n', '    mapping (address => bool) private m_Bots;\n', '    mapping (address => bool) private m_Staked;\n', '    mapping (address => bool) private m_ExcludedAddresses;\n', '    mapping (address => uint256) private m_Balances;\n', '    mapping (address => mapping (address => uint256)) private m_Allowances;\n', '    \n', '    FTPAntiBot private AntiBot;\n', '    IUniswapV2Router02 private m_UniswapV2Router;\n', '\n', '    event MaxOutTxLimit(uint MaxTransaction);\n', '    event BanAddress(address Address, address Origin);\n', '    \n', '    modifier lockTheSwap {\n', '        m_IsSwap = true;\n', '        _;\n', '        m_IsSwap = false;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    constructor () {\n', '        FTPAntiBot _antiBot = FTPAntiBot(0x590C2B20f7920A2D21eD32A21B616906b4209A43);           // AntiBot address for KOVAN TEST NET (its ok to leave this in mainnet push as long as you reassign it with external function)\n', '        AntiBot = _antiBot;\n', '        \n', '        m_Balances[address(this)] = TOTAL_SUPPLY - TEAM_SUPPLY;\n', '        m_Balances[owner()] = TEAM_SUPPLY;\n', '        m_ExcludedAddresses[owner()] = true;\n', '        m_ExcludedAddresses[address(this)] = true;\n', '        emit Transfer(address(0),owner(), TEAM_SUPPLY);\n', '        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\n', '    }\n', '\n', '// ####################\n', '// ##### DEFAULTS #####\n', '// ####################\n', '\n', '    function name() public view returns (string memory) {\n', '        return m_Name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return m_Symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return m_Decimals;\n', '    }\n', '\n', '// #####################\n', '// ##### OVERRIDES #####\n', '// #####################\n', '\n', '    function totalSupply() public pure override returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '\n', '    function balanceOf(address _account) public view override returns (uint256) {\n', '        return m_Balances[_account];\n', '    }\n', '\n', '    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_msgSender(), _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view override returns (uint256) {\n', '        return m_Allowances[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public override returns (bool) {\n', '        _approve(_msgSender(), _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_sender, _recipient, _amount);\n', '        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '// ####################\n', '// ##### PRIVATES #####\n', '// ####################\n', '\n', '    function _readyToTax(address _sender) private view returns(bool) {\n', '        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled;\n', '    }\n', '\n', '    function _pleb(address _sender, address _recipient) private view returns(bool) {\n', '        return _sender != owner() && _recipient != owner() && m_TradingOpened;\n', '    }\n', '\n', '    function _senderNotUni(address _sender) private view returns(bool) {\n', '        return _sender != m_UniswapV2Pair;\n', '    }\n', '\n', '    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\n', '        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\n', '    }\n', '\n', '    function _walletCapped(address _recipient) private view returns(bool) {\n', '        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\n', '    }\n', '\n', '    function _approve(address _owner, address _spender, uint256 _amount) private {\n', '        require(_owner != address(0), "ERC20: approve from the zero address");\n', '        require(_spender != address(0), "ERC20: approve to the zero address");\n', '        m_Allowances[_owner][_spender] = _amount;\n', '        emit Approval(_owner, _spender, _amount);\n', '    }\n', '\n', '    function _transfer(address _sender, address _recipient, uint256 _amount) private {\n', '        require(_sender != address(0), "ERC20: transfer from the zero address");\n', '        require(_recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(_amount > 0, "Transfer amount must be greater than zero");\n', '        \n', '        \n', '        uint8 _fee = _setFee(_sender, _recipient);\n', '        uint256 _feeAmount = _amount.div(100).mul(_fee);\n', '        uint256 _newAmount = _amount.sub(_feeAmount);\n', '        \n', '        if(m_AntiBot) {\n', '            if((_recipient == m_UniswapV2Pair || _sender == m_UniswapV2Pair) && m_TradingOpened){\n', '                require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), "Beep Beep Boop, You\'re a piece of poop");                                          \n', '                require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  "Beep Beep Boop, You\'re a piece of poop");\n', '            }\n', '        }\n', '            \n', '        if(_walletCapped(_recipient))\n', '            require(balanceOf(_recipient) < m_WalletLimit);                                     // Check balance of recipient and if < max amount, fails\n', '            \n', '        if (_pleb(_sender, _recipient)) {\n', '            if (_txRestricted(_sender, _recipient)) \n', '                require(_amount <= m_TxLimit);\n', '            _tax(_sender);                                                                      // This contract taxes users X% on every tX and converts it to Eth to send to wherever\n', '        }\n', '        \n', '        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\n', '        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\n', '        m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\n', '        \n', '        emit Transfer(_sender, _recipient, _newAmount);\n', '        \n', '        if(m_AntiBot)                                                                           // Check if AntiBot is enabled\n', '            AntiBot.registerBlock(_sender, _recipient);                                         // Tells AntiBot to start watching\n', '\t}\n', '    \n', '\tfunction _setFee(address _sender, address _recipient) private returns(uint8){\n', '        bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\n', '        if(!_takeFee)\n', '            m_DevFee = 0;\n', '        if(_takeFee)\n', '            m_DevFee = 15;\n', '        return m_DevFee;\n', '    }\n', '\n', '    function _tax(address _sender) private {\n', '        uint256 _tokenBalance = balanceOf(address(this));\n', '        if (_readyToTax(_sender)) {\n', '            _swapTokensForETH(_tokenBalance);\n', '            _disperseEth();\n', '        }\n', '    }\n', '\n', '    function _swapTokensForETH(uint256 _amount) private lockTheSwap {                           // If you want to do something like add taxes to Liquidity, change the logic in this block\n', '        address[] memory _path = new address[](2);                                              // say m_AmountEth = _amount.div(2).add(_amount.div(100))   (Make sure to define m_AmountEth up top)\n', '        _path[0] = address(this);                                                               // ^This provides a buffer for the 0.6% tax that uniswap charges.\n', '        _path[1] = m_UniswapV2Router.WETH();                                                    // This prevents the declination of value that is trending in current coins\n', '        _approve(address(this), address(m_UniswapV2Router), _amount);                           // change _amount to m_AmountEth if you want to addLiquidity from tax\n', '        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            _amount,\n', '            0,\n', '            _path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function _disperseEth() private {\n', '       m_FeeAddress.transfer(address(this).balance);                                            // If you want to add taxes to Liquidity, instead of sending to m_FeeAddress\n', '    }                                                                                           // call _UniswapV2Router.addLiquidityETH{value: m_AmountEth}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '    \n', '// ####################\n', '// ##### EXTERNAL #####\n', '// ####################\n', '    \n', '    function banCount() external view returns (uint256) {\n', '        return m_BanCount;\n', '    }\n', '    \n', '    function checkIfBanned(address _address) external view returns (bool) {                     // Tool for traders to verify ban status\n', '        bool _banBool = false;\n', '        if(m_Bots[_address])\n', '            _banBool = true;\n', '        return _banBool;\n', '    }\n', '\n', '// ######################\n', '// ##### ONLY OWNER #####\n', '// ######################\n', '\n', '    function addLiquidity() external onlyOwner() {\n', '        require(!m_TradingOpened,"trading is already open");\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        m_UniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\n', '        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        m_SwapEnabled = true;\n', '        m_TradingOpened = true;\n', '        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\n', '    }\n', '\n', '    function setTxLimitMax() external onlyOwner() {                                             // As it sits here, this function raises maxTX to maxWallet\n', '        m_TxLimit = m_WalletLimit;\n', '        m_SafeTxLimit = m_WalletLimit;\n', '        emit MaxOutTxLimit(m_TxLimit);\n', '    }\n', '    \n', '    function manualBan(address _a) external onlyOwner() {\n', '        m_Bots[_a] = true;\n', '    }\n', '    \n', '    function removeBan(address _a) external onlyOwner() {\n', '        m_Bots[_a] = false;\n', '        m_BanCount -= 1;\n', '    }\n', '    \n', '    function contractBalance() external view onlyOwner() returns (uint256) {                    // Just used to verify initial balance for addLiquidity\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function setFeeAddress(address payable _feeAddress) external onlyOwner() {                  // Use this function to assign Dev tax wallet\n', '        m_FeeAddress = _feeAddress;    \n', '        m_ExcludedAddresses[_feeAddress] = true;\n', '    }\n', '    \n', '    function assignAntiBot(address _address) external onlyOwner() {                             // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\n', '        FTPAntiBot _antiBot = FTPAntiBot(_address);                 \n', '        AntiBot = _antiBot;\n', '    }\n', '    \n', '    function toggleAntiBot() external onlyOwner() returns (bool){                               // Having a way to turn interaction with other contracts on/off is a good design practice\n', '        bool _localBool;\n', '        if(m_AntiBot){\n', '            m_AntiBot = false;\n', '            _localBool = false;\n', '        }\n', '        else{\n', '            m_AntiBot = true;\n', '            _localBool = true;\n', '        }\n', '        return _localBool;\n', '    }\n', '}']