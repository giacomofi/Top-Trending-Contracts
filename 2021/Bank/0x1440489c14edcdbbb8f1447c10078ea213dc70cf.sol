['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IWSFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '\n', 'interface IWSPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function swapDiscount(uint amount0Out, uint amount1Out, address to, bytes calldata data, uint discount) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '    function isLocked() external view returns (uint);\n', '\n', '    function initialize(address _factory, address _token0, address _token1) external returns(bool);\n', '}\n', '\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', 'library WSLibrary {\n', '    using SafeMath for uint;\n', '    // Swap fee discount\n', '    uint96 constant FEE_BORDER_01 = 100 * 1e18;\n', '    uint96 constant FEE_BORDER_02 = 1000 * 1e18;\n', '    uint96 constant FEE_BORDER_03 = 10_000 * 1e18;\n', '    uint96 constant FEE_BORDER_04 = 100_000 * 1e18;\n', '    uint96 constant FEE_BORDER_05 = 1_000_000 * 1e18;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'WSLibrary: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'WSLibrary: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'fad2a9a251fff38151d87d2aa4e39e75ad40feabd873069329d3c31ab9afe018' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IWSPair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'WSLibrary: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'WSLibrary: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', '        return getAmountOut(amountIn, reserveIn, reserveOut, uint256(0));\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint discount) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'WSLibrary: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'WSLibrary: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(9970 + discount);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(10_000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint) {\n', '        return getAmountIn(amountOut, reserveIn, reserveOut, uint(0));\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint discount) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'WSLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'WSLibrary: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(10_000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(9970 + discount);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', '        return getAmountsOut(factory, amountIn, path, uint(0));\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path, uint256 discount) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'WSLibrary: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, discount);\n', '        }\n', '    }\n', '\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', '        amounts = getAmountsIn(factory, amountOut, path, uint(0));\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path, uint discount) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'WSLibrary: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, discount);\n', '        }\n', '    }\n', '\n', '    // Returns amount of discount for account\n', '    function getDiscount(address account, uint256 balance) internal view returns (uint256) {\n', '        if (isContract(account)) {\n', '            return 0;\n', '        }\n', '        if (balance < FEE_BORDER_01) {\n', '            return 0;\n', '        } \n', '        if (balance < FEE_BORDER_02) {\n', '            return 1;\n', '        }\n', '        if (balance < FEE_BORDER_03) {\n', '            return 2;\n', '        }\n', '        if (balance < FEE_BORDER_04) {\n', '            return 3;\n', '        }\n', '        if (balance < FEE_BORDER_05) {\n', '            return 4;\n', '        }\n', '        return 5;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', 'interface IWSRouter {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(bool burnGasToken,\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(bool burnGasToken,\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(bool burnGasToken,uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(bool burnGasToken,uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(bool burnGasToken,uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(bool burnGasToken,uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(bool burnGasToken,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface IWSERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', '\n', 'interface IChi is IERC20 {\n', '    function mint(uint256 value) external;\n', '    function free(uint256 value) external returns (uint256 freed);\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IWSImplementation {\n', '\tfunction getImplementationType() external pure returns(uint256);\n', '}\n', '\n', 'contract WSRouter is IWSRouter, IWSImplementation {\n', '    using SafeMath for uint;\n', '\n', '    bool private initialized;\n', '    address public override factory;\n', '    address public override WETH;\n', '\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'WSRouter: EXPIRED');\n", '        _;\n', '    }\n', '\n', '    modifier discountCHI(bool burnChi) {\n', '        // strange if structure required for contract size optimization\n', '        uint256 gasStart;\n', '        if(burnChi) {\n', '            gasStart = gasleft();\n', '        }\n', '        _;\n', '        if(burnChi) {\n', '            _freeChi(gasStart);\n', '        }\n', '    }\n', '\n', '    function _freeChi(uint256 gasStart) internal {\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '        _getChi().freeFromUpTo(msg.sender, (gasSpent + 14174) / 41947);\n', '    }\n', '\n', '    function initialize(address _factory, address _WETH) public returns(bool) {\n', '        require(initialized == false, "WSRouter: Alredy initialized.");\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '        initialized = true;\n', '        return true;\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function _getChi() internal virtual pure returns(IChi) {\n', '        return IChi(address(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c));\n', '    }\n', '\n', '    function _getWSE() internal virtual pure returns(IERC20) {\n', '        return IERC20(address(0x77b8ae2E83c7d044d159878445841E2A9777Af38));\n', '    }\n', '\n', '    // **** ADD LIQUIDITY ****\n', '    function _addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin\n', '    ) internal virtual returns (uint amountA, uint amountB) {\n', "        // create the pair if it doesn't exist yet\n", '        if (IWSFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n', '            IWSFactory(factory).createPair(tokenA, tokenB);\n', '        }\n', '        (uint reserveA, uint reserveB) = WSLibrary.getReserves(factory, tokenA, tokenB);\n', '        if (reserveA == 0 && reserveB == 0) {\n', '            (amountA, amountB) = (amountADesired, amountBDesired);\n', '        } else {\n', '            uint amountBOptimal = WSLibrary.quote(amountADesired, reserveA, reserveB);\n', '            if (amountBOptimal <= amountBDesired) {\n', "                require(amountBOptimal >= amountBMin, 'WSRouter: INSUFFICIENT_B_AMOUNT');\n", '                (amountA, amountB) = (amountADesired, amountBOptimal);\n', '            } else {\n', '                uint amountAOptimal = WSLibrary.quote(amountBDesired, reserveB, reserveA);\n', '                assert(amountAOptimal <= amountADesired);\n', "                require(amountAOptimal >= amountAMin, 'WSRouter: INSUFFICIENT_A_AMOUNT');\n", '                (amountA, amountB) = (amountAOptimal, amountBDesired);\n', '            }\n', '        }\n', '    }\n', '    function addLiquidity(\n', '        bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual override discountCHI(burnGasToken) ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n', '        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n', '        // avoid stack too deep error\n', '        address tokenAstacked = tokenA;\n', '        address tokenBstacked = tokenB;\n', '        address pair = WSLibrary.pairFor(factory, tokenAstacked, tokenBstacked);\n', '        TransferHelper.safeTransferFrom(tokenAstacked, msg.sender, pair, amountA);\n', '        TransferHelper.safeTransferFrom(tokenBstacked, msg.sender, pair, amountB);\n', '        liquidity = IWSPair(pair).mint(to);\n', '    }\n', '    function addLiquidityETH(\n', '        bool burnGasToken,\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual override payable discountCHI(burnGasToken) ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n', '        (amountToken, amountETH) = _addLiquidity(\n', '            token,\n', '            WETH,\n', '            amountTokenDesired,\n', '            msg.value,\n', '            amountTokenMin,\n', '            amountETHMin\n', '        );\n', '        address pair = WSLibrary.pairFor(factory, token, WETH);\n', '        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n', '        IWETH(WETH).deposit{value: amountETH}();\n', '        assert(IWETH(WETH).transfer(pair, amountETH));\n', '        liquidity = IWSPair(pair).mint(to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY ****\n', '\n', '    // spacer function to avoid too big stack error\n', '    function _makeLiquidityPermit(\n', '        address tokenA,\n', '        address tokenB, \n', '        uint256 liquidity, \n', '        bool approveMax, \n', '        uint256 deadline, \n', '        uint8 v, bytes32 r, bytes32 s\n', '        ) internal {\n', '        address pair = WSLibrary.pairFor(factory, tokenA, tokenB);\n', '        uint value = approveMax ? uint(-1) : liquidity;\n', '        IWSERC20(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '    }\n', '\n', '    // spacer function to avoid too big stack error\n', '    function _remLiqNoChi(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) internal returns(uint amountA, uint amountB) {\n', '        (amountA, amountB) = removeLiquidity(false, tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n', '    }\n', '\n', '    function removeLiquidity(\n', '        bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual override discountCHI(burnGasToken) ensure(deadline) returns (uint amountA, uint amountB) {\n', '        address pair = WSLibrary.pairFor(factory, tokenA, tokenB);\n', '        IWSERC20(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n', '        // Avoid stack too big error\n', '        (address tokenAstacked, address tokenBstacked) = (tokenA, tokenB);\n', '        (uint amount0, uint amount1) = IWSPair(pair).burn(to);\n', '        (address token0,) = WSLibrary.sortTokens(tokenAstacked, tokenBstacked);\n', '        (amountA, amountB) = tokenAstacked == token0 ? (amount0, amount1) : (amount1, amount0);\n', "        require(amountA >= amountAMin, 'WSRouter: INSUFFICIENT_A_AMOUNT');\n", "        require(amountB >= amountBMin, 'WSRouter: INSUFFICIENT_B_AMOUNT');\n", '    }\n', '    function removeLiquidityETH(\n', '        bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual override discountCHI(burnGasToken) returns (uint amountToken, uint amountETH) {\n', '        (amountToken, amountETH) = removeLiquidity(\n', '            false,\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        TransferHelper.safeTransfer(token, to, amountToken);\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '    function removeLiquidityWithPermit(\n', '        bool burnGasToken,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual override discountCHI(burnGasToken) returns (uint amountA, uint amountB) {\n', '        _makeLiquidityPermit(tokenA, tokenB, liquidity, approveMax, deadline, v, r, s);\n', '        // address pair = WSLibrary.pairFor(factory, tokenA, tokenB);\n', '        // uint value = approveMax ? uint(-1) : liquidity;\n', '        // IWSERC20(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        (amountA, amountB) = _remLiqNoChi(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n', '    }\n', '    function removeLiquidityETHWithPermit(\n', '        bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual override discountCHI(burnGasToken) returns (uint amountToken, uint amountETH) {\n', '        _makeLiquidityPermit(token, WETH, liquidity, approveMax, deadline, v, r, s);\n', '        (amountToken, amountETH) = removeLiquidityETH(false, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual override discountCHI(burnGasToken) returns (uint amountETH) {\n', '        (, amountETH) = removeLiquidity(\n', '            false,\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        bool burnGasToken,\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual override discountCHI(burnGasToken) returns (uint amountETH) {\n', '        _makeLiquidityPermit(token, WETH, liquidity, approveMax, deadline, v, r, s);\n', '        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n', '            false, token, liquidity, amountTokenMin, amountETHMin, to, deadline\n', '        );\n', '    }\n', '\n', '    // **** SWAP ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swap(uint[] memory amounts, address[] memory path, address _to, uint discount) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = WSLibrary.sortTokens(input, output);\n', '            uint amountOut = amounts[i + 1];\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '            address to = i < path.length - 2 ? WSLibrary.pairFor(factory, output, path[i + 2]) : _to;\n', '            IWSPair(WSLibrary.pairFor(factory, input, output)).swapDiscount(\n', '                amount0Out, amount1Out, to, new bytes(0), discount\n', '            );\n', '        }\n', '    }\n', '    function swapExactTokensForTokens(\n', '        bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual override discountCHI(burnGasToken) ensure(deadline) returns (uint[] memory amounts) {\n', '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsOut(factory, amountIn, path, discount);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, to, discount);\n', '    }\n', '    function swapTokensForExactTokens(\n', '        bool burnGasToken,\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual override discountCHI(burnGasToken) ensure(deadline) returns (uint[] memory amounts) {\n', '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsIn(factory, amountOut, path, discount);\n', "        require(amounts[0] <= amountInMax, 'WSRouter: EXCESSIVE_INPUT_AMOUNT');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, to, discount);\n', '    }\n', '    function swapExactETHForTokens(bool burnGasToken,uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        override\n', '        payable\n', '        discountCHI(burnGasToken)\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[0] == WETH, 'WSRouter: INVALID_PATH');\n", '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsOut(factory, msg.value, path, discount);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(IWETH(WETH).transfer(WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n', '        _swap(amounts, path, to, discount);\n', '    }\n', '    function swapTokensForExactETH(bool burnGasToken,uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        override\n', '        discountCHI(burnGasToken)\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'WSRouter: INVALID_PATH');\n", '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsIn(factory, amountOut, path, discount);\n', "        require(amounts[0] <= amountInMax, 'WSRouter: EXCESSIVE_INPUT_AMOUNT');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this), discount);\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '    function swapExactTokensForETH(bool burnGasToken,uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        override\n', '        discountCHI(burnGasToken)\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'WSRouter: INVALID_PATH');\n", '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsOut(factory, amountIn, path, discount);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this), discount);\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '    function swapETHForExactTokens(bool burnGasToken,uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        override\n', '        payable\n', '        discountCHI(burnGasToken)\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[0] == WETH, 'WSRouter: INVALID_PATH');\n", '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        amounts = WSLibrary.getAmountsIn(factory, amountOut, path, discount);\n', "        require(amounts[0] <= msg.value, 'WSRouter: EXCESSIVE_INPUT_AMOUNT');\n", '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(IWETH(WETH).transfer(WSLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n', '        _swap(amounts, path, to, discount);\n', '        // refund dust eth, if any\n', '        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n', '    }\n', '\n', '    // **** SWAP (supporting fee-on-transfer tokens) ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n', '        uint discount = WSLibrary.getDiscount(msg.sender, _getWSE().balanceOf(msg.sender));\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = WSLibrary.sortTokens(input, output);\n', '            IWSPair pair = IWSPair(WSLibrary.pairFor(factory, input, output));\n', '            uint amountInput;\n', '            uint amountOutput;\n', '            { // scope to avoid stack too deep errors\n', '            (uint reserve0, uint reserve1,) = pair.getReserves();\n', '            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n', '            amountOutput = WSLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, discount);\n', '            }\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n', '            address to = i < path.length - 2 ? WSLibrary.pairFor(factory, output, path[i + 2]) : _to;\n', '            uint _discount = discount; // Avoid stack too deep errors\n', '            pair.swapDiscount(amount0Out, amount1Out, to, new bytes(0), _discount);\n', '        }\n', '    }\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual override ensure(deadline) discountCHI(burnGasToken) {\n', '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amountIn\n', '        );\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', "            'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n", '        );\n', '    }\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        bool burnGasToken,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    )\n', '        external\n', '        virtual\n', '        override\n', '        payable\n', '        ensure(deadline)\n', '        discountCHI(burnGasToken)\n', '    {\n', "        require(path[0] == WETH, 'WSRouter: INVALID_PATH');\n", '        uint amountIn = msg.value;\n', '        IWETH(WETH).deposit{value: amountIn}();\n', '        assert(IWETH(WETH).transfer(WSLibrary.pairFor(factory, path[0], path[1]), amountIn));\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', "            'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n", '        );\n', '    }\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        bool burnGasToken,\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    )\n', '        external\n', '        virtual\n', '        override\n', '        discountCHI(burnGasToken)\n', '        ensure(deadline)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'WSRouter: INVALID_PATH');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, WSLibrary.pairFor(factory, path[0], path[1]), amountIn\n', '        );\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint amountOut = IERC20(WETH).balanceOf(address(this));\n', "        require(amountOut >= amountOutMin, 'WSRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        IWETH(WETH).withdraw(amountOut);\n', '        TransferHelper.safeTransferETH(to, amountOut);\n', '    }\n', '\n', '    // **** LIBRARY FUNCTIONS ****\n', '    // deleted\n', '\n', '    function getImplementationType() external pure override returns(uint256) {\n', '        /// 3 is a router type\n', '        return 3;\n', '    }\n', '}']