['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'interface ERC20 {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external;\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external;\n', '}\n', '\n', 'contract bcMarket is Ownable{\n', '    using SafeMath for uint;\n', '\n', '    uint oneUsdg = 1000000000;\n', '    uint8  public rate = 100;\n', '\n', '    address[] pathUsdg2Bc;\n', '    IUniswapV2Router01 public uniswapRouter;\n', '\n', '    constructor(address _usdg, address _bc, address _uniswap)public {\n', '        _setPath(_usdg,_bc,_uniswap);\n', '    }\n', '\n', '    function _setPath(address _usdg, address _bc,address _uniswap)private {\n', '        uniswapRouter = IUniswapV2Router01(_uniswap);\n', '        pathUsdg2Bc.push(_usdg);\n', '        pathUsdg2Bc.push(_bc);\n', '    }\n', '\n', '    function getUniOutput(uint _input, address _token1, address _token2)public view returns (uint) {\n', '        address[] memory paths = new address[](2);\n', '        paths[0] = _token1;\n', '        paths[1] = _token2;\n', '        uint[] memory amounts = uniswapRouter.getAmountsOut( _input, paths);\n', '        return amounts[1];\n', '    }\n', '\n', '    function usdgToBc() external view returns (uint){\n', '        uint[] memory amounts = uniswapRouter.getAmountsOut( oneUsdg, pathUsdg2Bc);\n', '        uint rs =  amounts[1];\n', '        if(rate != 100){\n', '            rs = rs.mul(rate).div(100);\n', '        }\n', '        return rs;\n', '    }\n', '\n', '    function changeRates(uint8 _rate)onlyOwner public {\n', '        require(201 > _rate, "_rate big than 200");\n', '        rate = _rate;\n', '    }\n', '\n', '}']