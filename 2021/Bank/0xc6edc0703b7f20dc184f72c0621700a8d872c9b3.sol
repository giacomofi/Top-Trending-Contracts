['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-14\n', '*/\n', '\n', '//SPDX-License-Identifier: TBD\n', 'pragma solidity =0.7.4;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface ICoinSwapERC20 is IERC20 {\n', '    event Swap(address indexed,uint192,uint192,address indexed); \n', '    event Sync(uint);\n', '    event Mint(address indexed sender, uint192);\n', '    event Burn(address indexed sender, uint192, address indexed to);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', 'interface ICoinSwapCallee {\n', '    function coinswapCall(address sender, uint amount0,uint amount1, bytes calldata data) external;\n', '}\n', '\n', 'contract CoinSwapERC20 is ICoinSwapERC20 {\n', '    using SafeMath for uint;\n', '\n', "    string public constant override name = 'CoinSwap V1';\n", "    string public constant override symbol = 'CSWPLT';//CoinSwap Liquidity Token\n", '    uint8 public constant override decimals = 18;\n', '    uint  public override totalSupply;\n', '    mapping(address => uint) public override balanceOf;\n', '    mapping(address => mapping(address => uint)) public override allowance;\n', '\n', '    bytes32 public override DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public override nonces;\n', '\n', '    constructor() {\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external override returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n', "        require(deadline >= block.timestamp, 'CSWP:01');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'CSWP:02');\n", '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', '\n', 'contract CoinSwapPair is CoinSwapERC20  {\n', '    using SafeMath for uint;\n', '    \n', '    address public  patron;\n', '    address public  factory;\n', '    address public  token0; // token0 < token1\n', '    address public  token1;\n', '    uint224 private reserve; //reserve0(96) | reserve1(96) | blockTimestampLast(32)\n', '    uint private unlocked = 1;\n', '    uint public  priceCumulative; //=Delta_y/Delta_x: 96-fractional bits; allows overflow\n', '    uint224 private circleData;\n', '  \n', '    modifier lock() {\n', "        require(unlocked == 1, 'CSWP:1');\n", '    \tunlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '    \n', '    constructor() {factory = msg.sender; patron=tx.origin;}\n', '    function initialize(address _token0, address _token1, uint224 circle) external  {\n', '        //circle needs to in order of token0<token1\n', "        require(circleData == 0, 'CSWP:2');\n", '        token0 = _token0;\n', '        token1 = _token1;\n', '        circleData = circle;  // validity of circle should be checked by CoinSwapFactory\n', '    }\n', '\n', '    function ICO(uint224 _circleData)  external  {\n', "        require( (tx.origin==patron) && (circleData >> 216) >0, 'CSWP:3');//to close ICO, set (circleData >> 216) = 0x00\n", '        circleData = _circleData;\n', '    }\n', '\n', '    function setPatron(address _patron)  external  {\n', "        require( (tx.origin==patron), 'CSWP:11');\n", '        patron = _patron;\n', '    }\n', '    \n', '    function getReserves() public  view returns (uint224 _reserve, uint224 _circleData) {\n', '        _reserve = reserve;\n', '        _circleData = circleData;\n', '    }\n', '    \n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CSWP:6');\n", '    }\n', '\n', '    function revisemu(uint192 balance) private returns (uint56 _mu) {\n', "        require(balance>0, 'CSWP:4');\n", '    \tuint224 _circleData = circleData;\n', '        uint X = uint(balance>>96) *      uint16(_circleData >> 72)* uint56(_circleData >> 160);\n', '        uint Y = uint(uint96(balance)) *  uint16(_circleData >> 56)* uint56(_circleData >> 104);\n', '        uint XpY =  X + Y;\n', '        uint X2pY2 = (X*X) + (Y*Y);\n', '       \tX = XpY*100;\n', '       \tY = (X*X)  + X2pY2 * (10000+ uint16(_circleData>>88));\n', '        uint Z= X2pY2 * 20000;\n', "    \trequire(Y>Z, 'CSWP:5');\n", '        Y = SQRT.sqrt(Y-Z); \n', '        Z = Y > X ? X + Y : X-Y;\n', '        _mu =  uint56(1)+uint56(((10**32)*Z) / X2pY2);\n', '        circleData = (_circleData & 0xFF_FFFFFFFFFFFFFF_FFFFFFFFFFFFFF_FFFF_FFFF_FFFF_00000000000000) | uint224(_mu);\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(uint balance) private {\n', '\t    uint32 lastTime = uint32(balance);\t\n', '        uint32 deltaTime = uint32(block.timestamp) -lastTime ;\n', '        if (deltaTime>0 && lastTime>0) {\n', '    \t    uint circle = circleData;\n', '            uint lambda0 = uint16(circle >> 72);\n', '            uint lambda1 = uint16(circle >> 56);\n', '\t        uint CmulambdaX = 10**34 - (balance>>128)     *lambda0*uint56(circle)*uint56(circle >> 160);\n', '            uint CmulambdaY = 10**34 - uint96(balance>>32)*lambda1*uint56(circle)*uint56(circle >> 104); \n', '\t        priceCumulative += (((lambda0*CmulambdaX)<< 96)/(lambda1*CmulambdaY)) * deltaTime;  \n', '        }\n', '        reserve = uint224(balance +deltaTime);\n', '        emit Sync(balance>>32);\n', '    }\n', '\n', '    function _mintFee(uint56 mu0) private returns (uint56 mu) {\n', '        address feeTo = CoinSwapFactory(factory).feeTo();\n', '        mu=revisemu(uint192(reserve>>32));\n', '        if (mu0>mu) _mint(feeTo, totalSupply.mul(uint(mu0-mu)) / (5*mu0+mu));\n', '    }\n', '\n', '    function mint(address to) external  lock returns (uint liquidity) {\n', '        uint224 circle = circleData;\n', '        uint _totalSupply = totalSupply; \n', '        uint224 _reserve = reserve;\n', '        uint96 reserve0 = uint96(_reserve >>128);\n', '        uint96 reserve1 = uint96(_reserve >>32);\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint scaledBalance0 = balance0* uint56(circle >> 160);\n', '        uint scaledBalance1 = balance1* uint56(circle >> 104);\n', '        require((scaledBalance0< 2**96) && (scaledBalance1< 2**96) \n', "            && ( scaledBalance0 >=10**16 || scaledBalance1 >=10**16), 'CSWP:7');\n", '        if (_totalSupply == 0) { \n', '            uint lambda0 = uint16(circle >> 72);\n', '            uint lambda1 = uint16(circle >> 56);\n', '            liquidity = (scaledBalance0 * lambda0 + scaledBalance1 * lambda1) >> 1;\n', '    \t    revisemu(uint192((balance0<<96)|balance1));\n', '        } else { \n', '            uint56 mu0=_mintFee(uint56(circle));\n', '            _totalSupply = totalSupply;\n', '    \t    (uint mu, uint _totalS)=(0,0);\n', '\t        if (reserve0==0) {\n', '\t            mu=(uint(mu0) * reserve1) / balance1;\n', '\t            _totalS =  _totalSupply.mul(balance1)/reserve1;\n', '\t        } else if (reserve1==0) {\n', '\t            mu=(uint(mu0) * reserve0) / balance0;\n', '\t            _totalS = _totalSupply.mul(balance0)/reserve0;\n', '\t        } else {\n', '\t            (mu, _totalS) = (balance0 * reserve1) < (balance1 * reserve0)?\n', '\t\t        ((uint(mu0) * reserve0) / balance0, _totalSupply.mul(balance0)/reserve0) :\n', '\t\t        ((uint(mu0) * reserve1) / balance1, _totalSupply.mul(balance1)/reserve1) ;\n', '\t        }\n', '            liquidity = _totalS - _totalSupply;\n', '            circleData = (circle & 0xFF_FFFFFFFFFFFFFF_FFFFFFFFFFFFFF_FFFF_FFFF_FFFF_00000000000000) | uint224(mu);\n', '        }\n', '        _mint(to, liquidity);\n', '        _update(balance0<<128 | balance1<<32 | uint32(_reserve));\n', '        emit Mint(msg.sender, uint192((balance0-reserve0)<<96 | (balance1-reserve1)));\n', '    }\n', '\n', '    function burn(address to) external  lock returns (uint192 amount) {\n', '        uint224 _reserve = reserve;\n', '        address _token0 = token0;                                \n', '        address _token1 = token1;    \n', '        _mintFee(uint56(circleData));\n', '        uint _totalSupply = totalSupply; \n', '        uint liquidity = balanceOf[address(this)];\n', '        uint amount0 = liquidity.mul(uint96(_reserve>>128)) / _totalSupply; \n', '        uint amount1 = liquidity.mul(uint96(_reserve>>32)) / _totalSupply; \n', '        amount = uint192((amount0<<96)|amount1);\n', "        require(amount > 0, 'CSWP:8');\n", '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        uint192 combinedBalance = uint192(IERC20(_token0).balanceOf(address(this))<<96 | IERC20(_token1).balanceOf(address(this)));\n', '        _update(uint(combinedBalance)<<32 | uint32(_reserve));\n', '        if (combinedBalance>0) revisemu(combinedBalance);\n', '        emit Burn(msg.sender, amount, to); \n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(uint amountOut, address to, bytes calldata data) external  lock {       \n', '        uint amount0Out = (amountOut >> 96); \n', '        uint amount1Out = uint(uint96(amountOut));\n', '        uint balance0;\n', '        uint balance1;\n', '        uint _circleData = circleData;\n', '\n', '        { // avoids stack too deep errors\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require((to != _token0) && (to != _token1), 'CSWP:9');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n', '            if (data.length > 0) ICoinSwapCallee(to).coinswapCall(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = IERC20(_token0).balanceOf(address(this));\n', '            balance1 = IERC20(_token1).balanceOf(address(this));\n', '            require(balance0*uint56(_circleData >> 160) < 2**96 \n', "                 && balance1*uint56(_circleData >> 104) < 2**96, 'CSWP:10');\n", '        }\n', '        uint amountIn0;\n', '        uint amountIn1;\n', '        uint224 _reserve = reserve;\n', '        {// if _reserve0 < amountOut, then should have been reverted above already, so no need to check here \n', '            uint96 reserve0 = uint96(_reserve >>128);\n', '            uint96 reserve1 = uint96(_reserve >>32);\n', '            amountIn0 = balance0 + amount0Out - reserve0;\n', '            amountIn1 = balance1 + amount1Out - reserve1;\n', '            uint mulambda0 = uint(uint16(_circleData >> 72))*uint56(_circleData)*uint56(_circleData >> 160);\n', '            uint mulambda1 = uint(uint16(_circleData >> 56))*uint56(_circleData)*uint56(_circleData >> 104);        \n', '            uint X=mulambda0*(balance0*1000 - amountIn0*3); \n', '            uint Y=mulambda1*(balance1*1000 - amountIn1*3);\n', "    \t    require(10**37 > X && 10**37 >Y, 'CSWP:11');\n", '            X = 10**37-X;\n', '            Y = 10**37-Y;\n', '            uint newrSquare = X*X+Y*Y;\n', '            X=10**37-(mulambda0 * reserve0*1000);\n', '            Y=10**37-(mulambda1 * reserve1*1000);\n', "            require(newrSquare<= (X*X+Y*Y), 'CSWP:12');\n", '        }\n', '        _update(balance0<<128 | balance1<<32 | uint32(_reserve));\n', '        emit Swap(msg.sender, uint192(amountIn0<<96 | amountIn1), uint192(amountOut), to);\n', '    }\n', '}\n', '\n', 'contract CoinSwapFactory {\n', '    address payable public feeTo;\n', '    address payable public feeToSetter;\n', '    mapping(address => mapping(address => address)) public getPair;\n', '    address[] public allPairs;\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    constructor(address payable _feeToSetter) {\n', '        feeToSetter = _feeToSetter;\n', '        feeTo = _feeToSetter;\n', '    }\n', '    \n', '    function allPairsLength() external view returns (uint) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB, uint224 circle) external returns (address pair) {  \n', "        require(tx.origin==feeToSetter, 'CSWP:22');\n", '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(getPair[token0][token1] == address(0), 'CSWP:20'); \n", '        require(uint16(circle>>56)>0 && uint16(circle>>72)>0 && \n', '                uint16(circle>>88)>0 && uint16(circle>>88)<=9999\n', '                && uint56(circle>>104)>=1 && uint56(circle>>104)<=10**16\n', "                && uint56(circle>>160)>=1 && uint56(circle>>160)<=10**16, 'CSWP:23');\n", '        bytes memory bytecode = type(CoinSwapPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        CoinSwapPair(pair).initialize(token0, token1, circle);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; \n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '    \n', '    function setFeeTo(address payable _feeTo) external {\n', "\t    require(msg.sender == feeToSetter, 'CSWP:21');\n", '        feeTo = _feeTo;\n', '    }\n', '\n', '    function setFeeToSetter(address payable _feeToSetter) external {\n', "        require(msg.sender == feeToSetter, 'CSWP:22');\n", '        feeToSetter = _feeToSetter;\n', '    }\n', '}\n', '\n', 'contract CoinSwapRouterV1 { \n', '    using SafeMath for uint;\n', '    address public immutable factory;\n', '    address public immutable WETH;\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'CSWP:30');\n", '        _;\n', '    }\n', '    constructor(address _factory, address _WETH) {\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '    }\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n', '    }\n', '        \n', '    function _addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin, \n', '        uint amountBMin,\n', '        uint224 circle //lambda0/lambda1 in circle needs in order of token0<token1 \n', '    ) internal virtual returns (uint amountA, uint amountB, address pairForAB) {\n', '        pairForAB =CoinSwapFactory(factory).getPair(tokenA, tokenB);\n', '        if (pairForAB == address(0)) {\n', '            pairForAB= CoinSwapFactory(factory).createPair(tokenA,tokenB,circle);\n', '        }\n', '        (uint reserveA, uint reserveB,) = CoinSwapLibrary.getReservesAndmu(factory, tokenA, tokenB);\n', '        if (reserveA == 0 && reserveB == 0) {\n', '          (amountA, amountB) = (amountADesired, amountBDesired);\n', '        } else if (reserveA == 0) {\n', '\t        (amountA, amountB) = (0, amountBDesired);\n', '\t    } else if (reserveB == 0) {\n', '\t        (amountA, amountB) = (amountADesired,0);\n', '\t    } else {\n', '\t        uint amountBOptimal = (amountADesired *reserveB) / reserveA;\n', '\t        if (amountBOptimal <= amountBDesired) {\n', "\t            require(amountBOptimal >= amountBMin, 'CSWP:31');\n", '\t            (amountA, amountB) = (amountADesired, amountBOptimal);\n', '\t        } else {\n', '\t            uint amountAOptimal = (amountBDesired *reserveA) / reserveB;\n', '\t            assert(amountAOptimal <= amountADesired);\n', "\t            require(amountAOptimal >= amountAMin, 'CSWP:32');\n", '\t            (amountA, amountB) = (amountAOptimal, amountBDesired);\n', '\t        }\n', '\t    }\n', '    }\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amtADesired,\n', '        uint amtBDesired,\n', '        uint amtAMin,\n', '        uint amtBMin,\n', '        address to,\n', '        uint deadline,\n', '        uint224 circle\n', '    ) external virtual ensure(deadline) returns (uint amtA, uint amtB, uint liquidity) {\n', '        address pair;\n', '        (amtA, amtB, pair) = _addLiquidity(tokenA, tokenB, amtADesired, amtBDesired, amtAMin, amtBMin, circle);\n', '        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amtA);\n', '        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amtB);\n', '        liquidity = CoinSwapPair(pair).mint(to);\n', '    }\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amtTokenDesired,\n', '        uint amtTokenMin,\n', '        uint amtETHMin,\n', '        address to,\n', '        uint deadline,\n', '        uint224 circle\n', '    ) external virtual payable ensure(deadline) returns (uint amtToken, uint amtETH, uint liquidity) {\n', '        address pair;\n', '        (amtToken, amtETH, pair) = _addLiquidity(token,WETH,amtTokenDesired,msg.value,amtTokenMin,amtETHMin,circle);\n', '                TransferHelper.safeTransferFrom(token, msg.sender, pair, amtToken);\n', '        IWETH(WETH).deposit{value: amtETH}();\n', '        assert(IWETH(WETH).transfer(pair, amtETH));\n', '        liquidity = CoinSwapPair(pair).mint(to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amtETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amtETH);\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY **** \n', '    // For OCI market, we do not have specific remove liquidity function\n', '    // but one can remove a pair by providing OCI-ed addresses\n', '       function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amtAMin,\n', '        uint amtBMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual ensure(deadline) returns (uint amountA, uint amountB) {\n', '        address pair = CoinSwapLibrary.pairFor(factory, tokenA, tokenB);\n', '        CoinSwapPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n', '        uint192 amount = CoinSwapPair(pair).burn(to);\n', '        (amountA, amountB) = tokenA < tokenB ? (uint(amount>>96), uint(uint96(amount))) : (uint(uint96(amount)), uint(amount>>96));\n', "        require((amountA >= amtAMin) && (amountB >= amtBMin), 'CSWP:33');\n", '    }\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual ensure(deadline) returns (uint amountToken, uint amountETH) {\n', '        (amountToken, amountETH) = removeLiquidity(\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        TransferHelper.safeTransfer(token, to, amountToken);\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual returns (uint amountA, uint amountB) {\n', '        address pair = CoinSwapLibrary.pairFor(factory, tokenA, tokenB);\n', '        uint value = approveMax ? uint(-1) : liquidity;\n', '        CoinSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n', '    }\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual returns (uint amountToken, uint amountETH) {\n', '        address pair = CoinSwapLibrary.pairFor(factory, token, WETH);\n', '        uint value = approveMax ? uint(-1) : liquidity;\n', '        CoinSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n', '    }\n', '    \n', '    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) public virtual ensure(deadline) returns (uint amountETH) {\n', '        (, amountETH) = removeLiquidity(\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '    \n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external virtual returns (uint amountETH) {\n', '        address pair = CoinSwapLibrary.pairFor(factory, token, WETH);\n', '        uint value = approveMax ? uint(-1) : liquidity;\n', '        CoinSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n', '            token, liquidity, amountTokenMin, amountETHMin, to, deadline\n', '        );\n', '    }\n', '    \n', '\n', '    // **** SWAP ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            uint amountOut = amounts[i + 1];\n', '            (uint amount0Out, uint amount1Out) = input < output ? (uint(0), amountOut) : (amountOut, uint(0));\n', '            address to = i < path.length - 2 ? CoinSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n', '            CoinSwapPair(CoinSwapLibrary.pairFor(factory, input, output)).swap(\n', '                uint192((amount0Out<<96) | amount1Out), to, new bytes(0));\n', '        }\n', '    }\n', '    \n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\n', '        amounts = CoinSwapLibrary.getAmountsOut(factory, amountIn, path);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'CSWP:34');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, to);\n', '    }\n', '    \n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\n', '        amounts = CoinSwapLibrary.getAmountsIn(factory, amountOut, path);\n', "        require(amounts[0] <= amountInMax, 'CSWP:35');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, to);\n', '    }\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        payable\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[0] == WETH, 'CSWP:36');\n", '        amounts = CoinSwapLibrary.getAmountsOut(factory, msg.value, path);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'CSWP:37');\n", '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(IWETH(WETH).transfer(CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n', '        _swap(amounts, path, to);\n', '    }\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'CSWP:38');\n", '        amounts = CoinSwapLibrary.getAmountsIn(factory, amountOut, path);\n', "        require(amounts[0] <= amountInMax, 'CSWP:39');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this));\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'CSWP:40');\n", '        amounts = CoinSwapLibrary.getAmountsOut(factory, amountIn, path);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'CSWP:41');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this));\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        payable\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[0] == WETH, 'CSWP:42');\n", '        amounts = CoinSwapLibrary.getAmountsIn(factory, amountOut, path);\n', "        require(amounts[0] <= msg.value, 'CSWP:43');\n", '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(IWETH(WETH).transfer(CoinSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n', '        _swap(amounts, path, to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n', '    }\n', '\n', '    // **** SWAP (supporting fee-on-transfer tokens) ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            CoinSwapPair pair = CoinSwapPair(CoinSwapLibrary.pairFor(factory, input, output));\n', '            uint amountInput;\n', '            uint amountOutput;\n', '            { // scope to avoid stack too deep errors\n', '\t    \n', '\t    (uint reserveInput, uint reserveOutput, uint mulambda) = CoinSwapLibrary.getReservesAndmu(factory, input, output);\n', '            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n', '            amountOutput = CoinSwapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, mulambda);\n', '            }\n', '            (uint amount0Out, uint amount1Out) = input < output ? (uint(0), amountOutput) : (amountOutput, uint(0));\n', '            address to = i < path.length - 2 ? CoinSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n', '            pair.swap(uint192(amount0Out<<96 | amount1Out), to, new bytes(0));\n', '        }\n', '    }\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual ensure(deadline) {\n', '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\n', '        );\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', "            'CSWP:44'\n", '        );\n', '    }\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    )\n', '        external\n', '        virtual\n', '        payable\n', '        ensure(deadline)\n', '    {\n', "        require(path[0] == WETH, 'CSWP:45');\n", '        uint amountIn = msg.value;\n', '        IWETH(WETH).deposit{value: amountIn}();\n', '        assert(IWETH(WETH).transfer(CoinSwapLibrary.pairFor(factory, path[0], path[1]), amountIn));\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', "            'CSWP:46'\n", '        );\n', '    }\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    )\n', '        external\n', '        virtual\n', '        ensure(deadline)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'CSWP:47');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, CoinSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\n', '        );\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint amountOut = IERC20(WETH).balanceOf(address(this));\n', "        require(amountOut >= amountOutMin, 'CSWP:48');\n", '        IWETH(WETH).withdraw(amountOut);\n', '        TransferHelper.safeTransferETH(to, amountOut);\n', '    }\n', '    \n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint mulambda) public pure returns (uint amountOut) {\n', '        return CoinSwapLibrary.getAmountOut(amountIn, reserveIn, reserveOut, mulambda);\n', '    }\n', '\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint mulambda) public pure returns (uint amountIn) {\n', '        return CoinSwapLibrary.getAmountIn(amountOut, reserveIn, reserveOut, mulambda);\n', '    }\n', '\n', '    function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts) {\n', '        return CoinSwapLibrary.getAmountsOut(factory, amountIn, path);\n', '    }\n', '\n', '    function getAmountsIn(uint amountOut, address[] memory path) public view returns (uint[] memory amounts) {\n', '        return CoinSwapLibrary.getAmountsIn(factory, amountOut, path);\n', '    }\n', '}\n', '\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CSWP70');\n", '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CSWP71');\n", '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CSWP72');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint256 value) internal {\n', '        (bool success, ) = to.call{value: value}(new bytes(0));\n', "        require(success, 'CSWP73');\n", '    }\n', '}\n', '\n', 'library CoinSwapLibrary {\n', '    using SafeMath for uint;\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'08d6ace72c919d3777e7a6a0ae82941b79932ea4e7b37e16d8c04f7fd2783574'\n", '            ))));\n', '    }\n', '\n', '    function getReservesAndmu(address factory, address tokenA, address tokenB) internal view returns \n', '                                        (uint reserveA, uint reserveB, uint mulambda) {\n', '        (uint224 reserve, uint224 circleData) = CoinSwapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        uint reserve0 = uint(reserve>>128);\n', '        uint reserve1 = uint(uint96(reserve>>32));\n', '        uint mulambda0 = uint(uint16(circleData >> 72))* uint56(circleData >> 160) * uint56(circleData);\n', '        uint mulambda1 = uint(uint16(circleData >> 56))* uint56(circleData >> 104) * uint56(circleData);\n', '        (reserveA, reserveB, mulambda) = tokenA < tokenB ?\n', '\t      (reserve0,reserve1, (mulambda0<<128) | mulambda1 ):(reserve1,reserve0, (mulambda1<<128) | mulambda0);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint mulambda) internal pure returns (uint amountOut) {\n', "        require((amountIn > 0) && (reserveOut > 0), 'CSWP:63');\n", '\t    uint mulambda0 = (mulambda>>128);\n', '\t    uint mulambda1 = uint(uint128(mulambda));\n', '        uint Z = 10**37-(mulambda0 * reserveIn * 1000);\n', '        uint R0=Z*Z;\n', '        Z= 10**37-(mulambda1 * reserveOut * 1000);\n', '        R0 += Z*Z;\n', '        uint ZZ = uint(10**37).sub(mulambda0 * (1000*reserveIn + amountIn * 997));  \n', '        R0 = R0.sub(ZZ*ZZ);  \n', '        R0 = SQRT.sqrt(R0);\n', '        amountOut = R0.sub(Z) / (mulambda1 * 1000);\n', '\t    if (amountOut > reserveOut) amountOut = reserveOut;\n', '    }\n', '\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint mulambda) internal pure returns (uint amountIn) {\n', '        uint mulambda0 = (mulambda>>128);\n', '\t    uint mulambda1 = uint(uint128(mulambda));\n', '        uint Z= 10**37-(mulambda1 * reserveOut * 1000);\n', '        uint R1 = Z*Z;\n', '\t    Z = 10**37-(mulambda0 * reserveIn * 1000);\n', '        R1 += Z*Z;\n', '        uint ZZ = 10**37-(mulambda1 * 1000* (reserveOut.sub(amountOut)));  \n', '\t    R1 =R1.sub(ZZ*ZZ); \n', '        amountIn = 1+ (Z.sub(SQRT.sqrt(R1))) / (mulambda0 * 997) ; \n', '    }\n', '\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) \n', '            internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'CSWP:65');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut, uint mulambda) \n', '                = getReservesAndmu(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, mulambda);\n', '        }\n', '    }\n', '\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'CSWP:66');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut, uint mulambda) \n', '                = getReservesAndmu(factory, path[i-1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, mulambda);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'library SQRT {\n', '    function sqrt(uint256 a) internal pure returns (uint256 x) { \n', '        if (a > 3) {\n', '            uint msbpos =0;\n', '            uint b=a;\n', '            if (b > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n', '                msbpos += 128;\n', '                b = b >> 128;\n', '            } \n', '            if (b > 0xFFFFFFFFFFFFFFFF) {\n', '                msbpos += 64;\n', '                b = b>>64;\n', '            }\n', '            if (b > 0xFFFFFFFF ) {\n', '                msbpos += 32;\n', '                b = b>>32;\n', '            }\n', '            if (b > 0xFFFF ) {\n', '                msbpos += 16;\n', '                b = b>>16;\n', '            }\n', '            if (b > 0xFF ) {\n', '                msbpos += 8;\n', '                b = b>>8;\n', '            }\n', '            if (b > 0xF ) {\n', '                msbpos += 4;\n', '            }\n', '            msbpos += 4;\n', '            \n', '            uint256 x0=a;\n', '            uint X=((a >> 1) + 1);\n', '            uint Y=2**(msbpos/2);\n', '            x = X< Y ? X : Y;\n', '            while (x < x0 ) {\n', '                x0 = x;\n', '                x = (a / x0 + x0) >> 1;\n', '            }\n', '        } else if (a != 0) {\n', '            x = 1;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}']