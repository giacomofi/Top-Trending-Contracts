['pragma solidity ^0.8.0;\n', '\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./Address.sol";\n', ' \n', ' \n', 'contract EpsteinToken is Context, IERC20, Ownable {\t\n', '    using SafeMath for uint256;\n', '    using Address for address;\t\n', '    mapping (address => uint256) private _rOwned;\t\n', '    mapping (address => uint256) private _tOwned;\t\n', '    mapping (address => mapping (address => uint256)) private _allowances;\t\n', '    mapping (address => bool) private _isExcluded;\t\n', '    address[] private _excluded;\t\n', '   \t\n', '    uint256 private constant MAX = ~uint256(0);\t\n', '    uint256 private constant _tTotal = 69 * 10**12 * 10**9;\t\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\t\n', '    uint256 private _tFeeTotal;\t\n', "    string private _name = 'Epstein Token';\t\n", "    string private _symbol = 'EPSTEIN';\t\n", '    uint8 private _decimals = 9;\t\n', '    constructor () public {\t\n', '        _rOwned[_msgSender()] = _rTotal;\t\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\t\n', '    }\t\n', '    function name() public view returns (string memory) {\t\n', '        return _name;\t\n', '    }\t\n', '    function symbol() public view returns (string memory) {\t\n', '        return _symbol;\t\n', '    }\t\n', '    function decimals() public view returns (uint8) {\t\n', '        return _decimals;\t\n', '    }\t\n', '    function totalSupply() public view override returns (uint256) {\t\n', '        return _tTotal;\t\n', '    }\t\n', '    function balanceOf(address account) public view override returns (uint256) {\t\n', '        if (_isExcluded[account]) return _tOwned[account];\t\n', '        return tokenFromReflection(_rOwned[account]);\t\n', '    }\t\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\t\n', '        _transfer(_msgSender(), recipient, amount);\t\n', '        return true;\t\n', '    }\t\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\t\n', '        return _allowances[owner][spender];\t\n', '    }\t\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\t\n', '        _approve(_msgSender(), spender, amount);\t\n', '        return true;\t\n', '    }\t\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\t\n', '        _transfer(sender, recipient, amount);\t\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\t\n', '        return true;\t\n', '    }\t\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\t\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\t\n', '        return true;\t\n', '    }\t\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\t\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\t\n', '        return true;\t\n', '    }\t\n', '    function isExcluded(address account) public view returns (bool) {\t\n', '        return _isExcluded[account];\t\n', '    }\t\n', '    function totalFees() public view returns (uint256) {\t\n', '        return _tFeeTotal;\t\n', '    }\t\n', '\t\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\t\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\t\n', '        if (!deductTransferFee) {\t\n', '            (uint256 rAmount,,,,) = _getValues(tAmount);\t\n', '            return rAmount;\t\n', '        } else {\t\n', '            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\t\n', '            return rTransferAmount;\t\n', '        }\t\n', '    }\t\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\t\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\t\n', '        uint256 currentRate =  _getRate();\t\n', '        return rAmount.div(currentRate);\t\n', '    }\t\n', '    function excludeAccount(address account) external onlyOwner() {\t\n', '        require(!_isExcluded[account], "Account is already excluded");\t\n', '        if(_rOwned[account] > 0) {\t\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\t\n', '        }\t\n', '        _isExcluded[account] = true;\t\n', '        _excluded.push(account);\t\n', '    }\t\n', '    function includeAccount(address account) external onlyOwner() {\t\n', '        require(_isExcluded[account], "Account is already included");\t\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\t\n', '            if (_excluded[i] == account) {\t\n', '                _excluded[i] = _excluded[_excluded.length - 1];\t\n', '                _tOwned[account] = 0;\t\n', '                _isExcluded[account] = false;\t\n', '                _excluded.pop();\t\n', '                break;\t\n', '            }\t\n', '        }\t\n', '    }\t\n', '    function _approve(address owner, address spender, uint256 amount) private {\t\n', '        require(owner != address(0), "ERC20: approve from the zero address");\t\n', '        require(spender != address(0), "ERC20: approve to the zero address");\t\n', '        _allowances[owner][spender] = amount;\t\n', '        emit Approval(owner, spender, amount);\t\n', '    }\t\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\t\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\t\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\t\n', '        require(amount > 0, "Transfer amount must be greater than zero");\t\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\t\n', '            _transferFromExcluded(sender, recipient, amount);\t\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\t\n', '            _transferToExcluded(sender, recipient, amount);\t\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\t\n', '            _transferStandard(sender, recipient, amount);\t\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\t\n', '            _transferBothExcluded(sender, recipient, amount);\t\n', '        } else {\t\n', '            _transferStandard(sender, recipient, amount);\t\n', '        }\t\n', '    }\t\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\t\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\t\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \t\n', '        _reflectFee(rFee, tFee);\t\n', '        emit Transfer(sender, recipient, tTransferAmount);\t\n', '    }\t\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\t\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\t\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \t\n', '        _reflectFee(rFee, tFee);\t\n', '        emit Transfer(sender, recipient, tTransferAmount);\t\n', '    }\t\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\t\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\t\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \t\n', '        _reflectFee(rFee, tFee);\t\n', '        emit Transfer(sender, recipient, tTransferAmount);\t\n', '    }\t\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\t\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\t\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \t\n', '        _reflectFee(rFee, tFee);\t\n', '        emit Transfer(sender, recipient, tTransferAmount);\t\n', '    }\t\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\t\n', '        _rTotal = _rTotal.sub(rFee);\t\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\t\n', '    }\t\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\t\n', '        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\t\n', '        uint256 currentRate =  _getRate();\t\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\t\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\t\n', '    }\t\n', '    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\t\n', '        uint256 tFee = tAmount.div(100).mul(3);\t\n', '        uint256 tTransferAmount = tAmount.sub(tFee);\t\n', '        return (tTransferAmount, tFee);\t\n', '    }\t\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\t\n', '        uint256 rAmount = tAmount.mul(currentRate);\t\n', '        uint256 rFee = tFee.mul(currentRate);\t\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\t\n', '        return (rAmount, rTransferAmount, rFee);\t\n', '    }\t\n', '    function _getRate() private view returns(uint256) {\t\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\t\n', '        return rSupply.div(tSupply);\t\n', '    }\t\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\t\n', '        uint256 rSupply = _rTotal;\t\n', '        uint256 tSupply = _tTotal;      \t\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\t\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\t\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\t\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\t\n', '        }\t\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\t\n', '        return (rSupply, tSupply);\t\n', '    }\t\n', '}']