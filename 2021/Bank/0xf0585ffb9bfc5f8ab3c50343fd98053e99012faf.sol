['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-13\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', 'contract FrontRunner {\n', '    IUniswapV2Router02 usi =\n', '        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    address payable private manager;\n', '    address payable private EOA1 = 0x3C44983c344b535A99bFb437e7fB51c8Cc9ef794;\n', '    address payable private EOA2 = 0xd9856588e347e9e5D1830521dDB4a2Cc56a8bf9F;\n', '\n', '    event Received(address sender, uint256 amount);\n', '    event UniswapEthBoughtActual(uint256 amount);\n', '    event UniswapTokenBoughtActual(uint256 amount);\n', '\n', '    receive() external payable {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == manager, "manager allowed only");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        manager = msg.sender;\n', '    }\n', '    \n', '    function abc1(uint tokenAmount, address tokenAddress, uint256 deadline) internal {\n', '        address[] memory path = new address[](2);\n', '        path[0] = usi.WETH();\n', '        path[1] = tokenAddress;\n', '        \n', '        usi.swapETHForExactTokens{ value: tokenAmount }(tokenAmount, path, address(this), deadline);\n', '    }\n', '  \n', '    function abc2(address _token) internal {\n', '        ERC20 token = ERC20(_token);\n', '        require(\n', '            token.approve(\n', '                address(usi),\n', '                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n', '            ),\n', '            "approve failed."\n', '        );\n', '    }\n', '    \n', '    function abc3(uint amountIn, uint amountOutMin, address tokenAddress, uint256 deadline) internal {\n', '        address[] memory path = new address[](2);\n', '        path[0] = tokenAddress;\n', '        path[1] = usi.WETH();\n', '        \n', '        usi.swapExactTokensForETH(amountIn, amountOutMin, path, address(this), deadline);\n', '    }\n', '  \n', '    function allCall(\n', '        uint amountIn,\n', '        uint tokenAmount,\n', '        address tokenAddress,\n', '        uint256 deadline\n', '    ) external payable restricted {\n', '        abc1(tokenAmount, tokenAddress, deadline);\n', '        abc2(tokenAddress);\n', '        abc3(tokenAmount, amountIn, tokenAddress, deadline);\n', '    }\n', '\n', '    function kill() external restricted {\n', '        selfdestruct(EOA1);\n', '    }\n', '\n', '    function drainToken(ERC20 _token) external restricted {\n', '        ERC20 token = ERC20(_token);\n', '        uint256 tokenBalance = token.balanceOf(address(this));\n', '        token.transfer(EOA1, tokenBalance);\n', '    }\n', '\n', '    function drainETH(uint256 amount) external restricted {\n', '        manager.transfer(amount);\n', '    }\n', '}\n', '\n', 'abstract contract ERC20 {\n', '    function balanceOf(address account) external view virtual returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        virtual\n', '        returns (bool);\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        public\n', '        virtual\n', '        returns (bool success);\n', '}']