['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', "import '@openzeppelin/contracts/utils/EnumerableSet.sol';\n", "import '@openzeppelin/contracts/access/Ownable.sol';\n", "import '@openzeppelin/contracts/math/SafeMath.sol';\n", '\n', 'import "./interface/IPremiaReferral.sol";\n', 'import "./interface/IPremiaFeeDiscount.sol";\n', '\n', '/// @author Premia\n', '/// @title Calculate protocol fees, including discount from xPremia locking and referrals\n', 'contract FeeCalculator is Ownable {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using SafeMath for uint256;\n', '\n', '    enum FeeType {Write, Exercise, Maker, Taker, FlashLoan}\n', '\n', '    // Addresses which dont have to pay fees\n', '    EnumerableSet.AddressSet private _whitelisted;\n', '\n', '    uint256 public writeFee = 100; // 1%\n', '    uint256 public exerciseFee = 100; // 1%\n', '    uint256 public flashLoanFee = 20; // 0.2%\n', '\n', '    // 10% of write/exercise fee | Referrer fee calculated after all discounts applied\n', '    uint256 public referrerFee = 1000;\n', '    // -10% from write/exercise fee\n', '    uint256 public referredDiscount = 1000;\n', '\n', '    uint256 public makerFee = 150; // 1.5%\n', '    uint256 public takerFee = 150; // 1.5%\n', '\n', '    uint256 private constant _inverseBasisPoint = 1e4;\n', '\n', '    //\n', '\n', '    // PremiaFeeDiscount contract, handling xPremia locking for fee discount\n', '    IPremiaFeeDiscount public premiaFeeDiscount;\n', '\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '\n', '    /// @param _premiaFeeDiscount Address of PremiaFeeDiscount contract\n', '    constructor(IPremiaFeeDiscount _premiaFeeDiscount) {\n', '        premiaFeeDiscount = _premiaFeeDiscount;\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '\n', '    ///////////\n', '    // Admin //\n', '    ///////////\n', '\n', '    /// @notice Set new address for PremiaFeeDiscount contract\n', '    /// @param _premiaFeeDiscount The new contract address\n', '    function setPremiaFeeDiscount(IPremiaFeeDiscount _premiaFeeDiscount) external onlyOwner {\n', '        premiaFeeDiscount = _premiaFeeDiscount;\n', '    }\n', '\n', '    /// @notice Set new protocol fee for option writing\n', '    /// @param _fee The new fee (In basis points)\n', '    function setWriteFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 500); // Hardcoded max at 5%\n', '        writeFee = _fee;\n', '    }\n', '\n', '    /// @notice Set new protocol fee for exercising options\n', '    /// @param _fee The new fee (In basis points)\n', '    function setExerciseFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 500); // Hardcoded max at 5%\n', '        exerciseFee = _fee;\n', '    }\n', '\n', '    /// @notice Set new protocol fee for flashLoans\n', '    /// @param _fee The new fee (In basis points)\n', '    function setFlashLoanFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 500); // Hardcoded max at 5%\n', '        flashLoanFee = _fee;\n', '    }\n', '\n', '    /// @notice Set new referrer fee\n', '    /// @dev This is expressed as % (in basis points) of fee paid. Ex : 1e3 means that 10% of fee paid goes toward referrer\n', '    /// @param _fee The new fee (In basis points)\n', '    function setReferrerFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 1e4);\n', '        referrerFee = _fee;\n', '    }\n', '\n', '    /// @notice Set new discount for users having a referrer\n', '    /// @param _discount The new discount (In basis points)\n', '    function setReferredDiscount(uint256 _discount) external onlyOwner {\n', '        require(_discount <= 1e4);\n', '        referredDiscount = _discount;\n', '    }\n', '\n', '    /// @notice Set new protocol fee for order maker\n', '    /// @param _fee The new fee (In basis points)\n', '    function setMakerFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 500); // Hardcoded max at 5%\n', '        makerFee = _fee;\n', '    }\n', '\n', '    /// @notice Set new protocol fee for order taker\n', '    /// @param _fee The new fee (In basis points)\n', '    function setTakerFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= 500); // Hardcoded max at 5%\n', '        takerFee = _fee;\n', '    }\n', '\n', '    /// @notice Add addresses to the whitelist so that they dont have to pay fees. (Could be use to whitelist some contracts)\n', '    /// @param _addr The addresses to add to the whitelist\n', '    function addWhitelisted(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            _whitelisted.add(_addr[i]);\n', '        }\n', '    }\n', '\n', '    /// @notice Removed addresses from the whitelist so that they have to pay fees again.\n', '    /// @param _addr The addresses to remove the whitelist\n', '    function removeWhitelisted(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            _whitelisted.remove(_addr[i]);\n', '        }\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '\n', '    //////////\n', '    // View //\n', '    //////////\n', '\n', '    /// @notice Get the list of whitelisted addresses\n', '    /// @return The list of whitelisted addresses\n', '    function getWhitelisted() external view returns(address[] memory) {\n', '        uint256 length = _whitelisted.length();\n', '        address[] memory result = new address[](length);\n', '\n', '        for (uint256 i=0; i < length; i++) {\n', '            result[i] = _whitelisted.at(i);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Get fee (In basis points) to pay by a given user, for a given fee type\n', '    /// @param _user The address for which to calculate the fee\n', '    /// @param _hasReferrer Whether the address has a referrer or not\n', '    /// @param _feeType The type of fee\n', '    /// @return The protocol fee to pay by _user (In basis points)\n', '    function getFee(address _user, bool _hasReferrer, FeeType _feeType) public view returns(uint256) {\n', '        if (_whitelisted.contains(_user)) return 0;\n', '\n', '        uint256 fee = _getBaseFee(_feeType);\n', '\n', '        // If premiaFeeDiscount contract is set, we calculate discount\n', '        if (address(premiaFeeDiscount) != address(0)) {\n', '            uint256 discount = premiaFeeDiscount.getDiscount(_user);\n', '            fee = fee.mul(discount).div(_inverseBasisPoint);\n', '        }\n', '\n', '        if (_hasReferrer) {\n', '            fee = fee.mul(_inverseBasisPoint.sub(referredDiscount)).div(_inverseBasisPoint);\n', '        }\n', '\n', '        return fee;\n', '    }\n', '\n', '    /// @notice Get the final fee amounts (In wei) to pay to protocol and referrer\n', '    /// @param _user The address for which to calculate the fee\n', '    /// @param _hasReferrer Whether the address has a referrer or not\n', '    /// @param _amount The amount for which fee needs to be calculated\n', '    /// @param _feeType The type of fee\n', '    /// @return _fee Fee amount to pay to protocol\n', '    /// @return _feeReferrer Fee amount to pay to referrer\n', '    function getFeeAmounts(address _user, bool _hasReferrer, uint256 _amount, FeeType _feeType) public view returns(uint256 _fee, uint256 _feeReferrer) {\n', '        if (_whitelisted.contains(_user)) return (0,0);\n', '\n', '        uint256 baseFee = _amount.mul(_getBaseFee(_feeType)).div(_inverseBasisPoint);\n', '        return getFeeAmountsWithDiscount(_user, _hasReferrer, baseFee);\n', '    }\n', '\n', '    /// @notice Calculate protocol fee and referrer fee to pay, from a total fee (in wei), after applying all discounts\n', '    /// @param _user The address for which to calculate the fee\n', '    /// @param _hasReferrer Whether the address has a referrer or not\n', '    /// @param _baseFee The total fee to pay (without including any discount)\n', '    /// @return _fee Fee amount to pay to protocol\n', '    /// @return _feeReferrer Fee amount to pay to referrer\n', '    function getFeeAmountsWithDiscount(address _user, bool _hasReferrer, uint256 _baseFee) public view returns(uint256 _fee, uint256 _feeReferrer) {\n', '        if (_whitelisted.contains(_user)) return (0,0);\n', '\n', '        uint256 feeReferrer = 0;\n', '        uint256 feeDiscount = 0;\n', '\n', '        // If premiaFeeDiscount contract is set, we calculate discount\n', '        if (address(premiaFeeDiscount) != address(0)) {\n', '            uint256 discount = premiaFeeDiscount.getDiscount(_user);\n', '            require(discount <= _inverseBasisPoint, "Discount > max");\n', '            feeDiscount = _baseFee.mul(discount).div(_inverseBasisPoint);\n', '        }\n', '\n', '        if (_hasReferrer) {\n', '            // feeDiscount = feeDiscount + ( (_feeAmountBase - feeDiscount ) * referredDiscountRate)\n', '            feeDiscount = feeDiscount.add(_baseFee.sub(feeDiscount).mul(referredDiscount).div(_inverseBasisPoint));\n', '            feeReferrer = _baseFee.sub(feeDiscount).mul(referrerFee).div(_inverseBasisPoint);\n', '        }\n', '\n', '        return (_baseFee.sub(feeDiscount).sub(feeReferrer), feeReferrer);\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '\n', '    //////////////\n', '    // Internal //\n', '    //////////////\n', '\n', '    /// @notice Get the base protocol fee, for a given fee type\n', '    /// @param _feeType The type of fee\n', '    /// @return The base protocol fee for _feeType (In basis points)\n', '    function _getBaseFee(FeeType _feeType) internal view returns(uint256) {\n', '        if (_feeType == FeeType.Write) {\n', '            return writeFee;\n', '        } else if (_feeType == FeeType.Exercise) {\n', '            return exerciseFee;\n', '        } else if (_feeType == FeeType.Maker) {\n', '            return makerFee;\n', '        } else if (_feeType == FeeType.Taker) {\n', '            return takerFee;\n', '        } else if (_feeType == FeeType.FlashLoan) {\n', '            return flashLoanFee;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IPremiaReferral {\n', '    function referrals(address _referred) external view returns(address _referrer);\n', '    function trySetReferrer(address _referred, address _potentialReferrer) external returns(address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IPremiaFeeDiscount {\n', '    function getDiscount(address _user) external view returns(uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']