['# Copyright (C) 2021 VolumeFi Software, Inc.\n', '\n', '#  This program is free software: you can redistribute it and/or modify\n', '#  it under the terms of the Apache 2.0 License. \n', '#  This program is distributed WITHOUT ANY WARRANTY without even the implied warranty of\n', '#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n', '#  @author VolumeFi, Software Inc.\n', '#  @notice This Vyper contract adds liquidity to any Uniswap V3 pool using ETH or any ERC20 Token.\n', '#  SPDX-License-Identifier: Apache-2.0\n', '\n', '# @version >=0.2.12\n', '\n', 'struct RemoveParams:\n', '    liquidity: uint256\n', '    recipient: address\n', '    deadline: uint256\n', '\n', 'interface ERC20:\n', '    def allowance(owner: address, spender: address) -> uint256: view\n', '\n', 'interface ERC721:\n', '    def transferFrom(_from: address, _to: address, _tokenId: uint256): payable\n', '\n', 'interface NonfungiblePositionManager:\n', '    def burn(tokenId: uint256): payable\n', '\n', 'interface UniswapV2Factory:\n', '    def getPair(tokenA: address, tokenB: address) -> address: view\n', '\n', 'interface UniswapV2Pair:\n', '    def token0() -> address: view\n', '    def token1() -> address: view\n', '    def getReserves() -> (uint256, uint256, uint256): view\n', '\n', 'interface WrappedEth:\n', '    def withdraw(amount: uint256): nonpayable\n', '\n', 'event RemovedLiquidity:\n', '    tokenId: indexed(uint256)\n', '    token0: indexed(address)\n', '    token1: indexed(address)\n', '    liquidity: uint256\n', '    amount0: uint256\n', '    amount1: uint256\n', '\n', 'event Paused:\n', '    paused: bool\n', '\n', 'event FeeChanged:\n', '    newFee: uint256\n', '\n', 'NONFUNGIBLEPOSITIONMANAGER: constant(address) = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88\n', 'UNISWAPV2ROUTER02: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', 'UNISWAPV2FACTORY: constant(address) = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '\n', 'VETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', 'WETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', 'DEADLINE: constant(uint256) = MAX_UINT256\n', '\n', 'APPROVE_MID: constant(Bytes[4]) = method_id("approve(address,uint256)")\n', 'SWAPETFT_MID: constant(Bytes[4]) = method_id("swapExactTokensForTokens(uint256,uint256,address[],address,uint256)")\n', 'TRANSFER_MID: constant(Bytes[4]) = method_id("transfer(address,uint256)")\n', 'POSITIONS_MID: constant(Bytes[4]) = method_id("positions(uint256)")\n', 'DECREASELIQUIDITY_MID: constant(Bytes[4]) = method_id("decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))")\n', 'COLLECT_MID: constant(Bytes[4]) = method_id("collect((uint256,address,uint128,uint128))")\n', '\n', '\n', 'paused: public(bool)\n', 'admin: public(address)\n', 'feeAddress: public(address)\n', 'feeAmount: public(uint256)\n', '\n', '@external\n', 'def __init__():\n', '    self.paused = False\n', '    self.admin = msg.sender\n', '    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\n', '    self.feeAmount = 5 * 10 ** 15\n', '\n', '@internal\n', 'def safeTransfer(_token: address, _to: address, _value: uint256):\n', '    _response: Bytes[32] = raw_call(\n', '        _token,\n', '        concat(\n', '            TRANSFER_MID,\n', '            convert(_to, bytes32),\n', '            convert(_value, bytes32)\n', '        ),\n', '        max_outsize=32\n', '    )  # dev: failed transfer\n', '    if len(_response) > 0:\n', '        assert convert(_response, bool), "Transfer failed"  # dev: failed transfer\n', '\n', '@internal\n', '@pure\n', 'def _getPairTokens(pair: address) -> (address, address):\n', '    token0: address = UniswapV2Pair(pair).token0()\n', '    token1: address = UniswapV2Pair(pair).token1()\n', '    return (token0, token1)\n', '\n', '@internal\n', '@view\n', 'def _getLiquidityInPool(midToken: address, pair: address) -> uint256:\n', '    res0: uint256 = 0\n', '    res1: uint256 = 0\n', '    token0: address = ZERO_ADDRESS\n', '    token1: address = ZERO_ADDRESS\n', '    blockTimestampLast: uint256 = 0\n', '    (res0, res1, blockTimestampLast) = UniswapV2Pair(pair).getReserves()\n', '    (token0, token1) = self._getPairTokens(pair)\n', '    if token0 == midToken:\n', '        return res0\n', '    else:\n', '        return res1\n', '\n', '@internal\n', '@view\n', 'def _getMidToken(midToken: address, token0: address, token1: address) -> address:\n', '    if token0 == midToken or token1 == midToken:\n', '        return midToken\n', '    pair0: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token0)\n', '    pair1: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token1)\n', '    eth0: uint256 = self._getLiquidityInPool(midToken, pair0)\n', '    eth1: uint256 = self._getLiquidityInPool(midToken, pair1)\n', '    if eth0 > eth1:\n', '        return token0\n', '    else:\n', '        return token1\n', '\n', '@internal\n', 'def _token2Token(fromToken: address, toToken: address, tokens2Trade: uint256, deadline: uint256) -> uint256:\n', '    if fromToken == toToken:\n', '        return tokens2Trade\n', '    _response32: Bytes[32] = empty(Bytes[32])\n', '    if ERC20(fromToken).allowance(self, UNISWAPV2ROUTER02) == 0:\n', '        _response32 = raw_call(\n', '            fromToken,\n', '            concat(\n', '                APPROVE_MID,\n', '                convert(UNISWAPV2ROUTER02, bytes32),\n', '                convert(MAX_UINT256, bytes32)\n', '            ),\n', '            max_outsize=32\n', '        )  # dev: failed approve\n', '        if len(_response32) > 0:\n', '            assert convert(_response32, bool), "Approve failed"  # dev: failed approve\n', '    \n', '    addrBytes: Bytes[288] = concat(convert(tokens2Trade, bytes32), convert(0, bytes32), convert(160, bytes32), convert(self, bytes32), convert(deadline, bytes32), convert(2, bytes32), convert(fromToken, bytes32), convert(toToken, bytes32))\n', '    funcsig: Bytes[4] = SWAPETFT_MID\n', '    full_data: Bytes[292] = concat(funcsig, addrBytes)\n', '    \n', '    _response128: Bytes[128] = raw_call(\n', '        UNISWAPV2ROUTER02,\n', '        full_data,\n', '        max_outsize=128\n', '    )\n', '    tokenBought: uint256 = convert(slice(_response128, 96, 32), uint256)\n', '    assert tokenBought > 0, "Error Swapping Token 2"\n', '    return tokenBought\n', '\n', '@internal\n', 'def removeLiquidity(_tokenId: uint256, _removeParams: RemoveParams, _isBurn: bool=True, _recipient: address=ZERO_ADDRESS) -> (address, address, uint256, uint256):\n', '    _response384: Bytes[384] = raw_call(\n', '        NONFUNGIBLEPOSITIONMANAGER,\n', '        concat(\n', '            POSITIONS_MID,\n', '            convert(_tokenId, bytes32)\n', '        ),\n', '        max_outsize=384,\n', '        is_static_call=True\n', '    )\n', '    token0: address = convert(convert(slice(_response384, 64, 32), uint256), address)\n', '    token1: address = convert(convert(slice(_response384, 96, 32), uint256), address)\n', '    liquidity: uint256 = convert(slice(_response384, 224, 32), uint256)\n', '    isBurn: bool = _isBurn\n', '    if isBurn and liquidity > _removeParams.liquidity:\n', '        liquidity = _removeParams.liquidity\n', '        isBurn = False\n', '\n', '    _response64: Bytes[64] = raw_call(\n', '        NONFUNGIBLEPOSITIONMANAGER,\n', '        concat(\n', '            DECREASELIQUIDITY_MID,\n', '            convert(_tokenId, bytes32),\n', '            convert(liquidity, bytes32),\n', '            convert(0, bytes32),\n', '            convert(0, bytes32),\n', '            convert(_removeParams.deadline, bytes32)\n', '        ),\n', '        max_outsize=64\n', '    )\n', '\n', '    recipient: address = _recipient\n', '    if _recipient == ZERO_ADDRESS:\n', '        recipient = _removeParams.recipient\n', '\n', '    _response64 = raw_call(\n', '        NONFUNGIBLEPOSITIONMANAGER,\n', '        concat(\n', '            COLLECT_MID,\n', '            convert(_tokenId, bytes32),\n', '            convert(recipient, bytes32),\n', '            convert(2 ** 128 - 1, bytes32),\n', '            convert(2 ** 128 - 1, bytes32)\n', '        ),\n', '        max_outsize=64\n', '    )\n', '    amount0: uint256 = convert(slice(_response64, 0, 32), uint256)\n', '    amount1: uint256 = convert(slice(_response64, 32, 32), uint256)\n', '    if isBurn:\n', '        NonfungiblePositionManager(NONFUNGIBLEPOSITIONMANAGER).burn(_tokenId)\n', '\n', '    log RemovedLiquidity(_tokenId, token0, token1, liquidity, amount0, amount1)\n', '\n', '    return (token0, token1, amount0, amount1)\n', '\n', '@external\n', '@payable\n', "@nonreentrant('lock')\n", 'def removeLiquidityFromUniV3NFLP(_tokenId: uint256, _removeParams: RemoveParams, isBurn: bool=True):\n', '    assert _tokenId != 0, "Wrong Token ID"\n', '\n', '    fee: uint256 = self.feeAmount\n', '    if msg.value > fee:\n', '        send(msg.sender, msg.value - fee)\n', '    else:\n', '        assert msg.value == fee, "Insufficient fee"\n', '    if fee > 0:\n', '        send(self.feeAddress, fee)\n', '\n', '    ERC721(NONFUNGIBLEPOSITIONMANAGER).transferFrom(msg.sender, self, _tokenId)\n', '\n', '    self.removeLiquidity(_tokenId, _removeParams, isBurn)\n', '\n', '@external\n', '@payable\n', "@nonreentrant('lock')\n", 'def removeLiquidityEthFromUniV3NFLP(_tokenId: uint256, _removeParams: RemoveParams, isBurn: bool=True):\n', '    assert _tokenId != 0, "Wrong Token ID"\n', '\n', '    fee: uint256 = self.feeAmount\n', '    if msg.value > fee:\n', '        send(msg.sender, msg.value - fee)\n', '    else:\n', '        assert msg.value == fee, "Insufficient fee"\n', '    if fee > 0:\n', '        send(self.feeAddress, fee)\n', '\n', '    ERC721(NONFUNGIBLEPOSITIONMANAGER).transferFrom(msg.sender, self, _tokenId)\n', '\n', '    token0: address = ZERO_ADDRESS\n', '    token1: address = ZERO_ADDRESS\n', '    amount0: uint256 = 0\n', '    amount1: uint256 = 0\n', '    (token0, token1, amount0, amount1) = self.removeLiquidity(_tokenId, _removeParams, isBurn, self)\n', '    if token0 == WETH and token1 != WETH:\n', '        WrappedEth(token0).withdraw(amount0)\n', '        send(_removeParams.recipient, amount0)\n', '        self.safeTransfer(token1, _removeParams.recipient, amount1)\n', '    elif token1 == WETH and token0 != WETH:\n', '        WrappedEth(token1).withdraw(amount1)\n', '        send(_removeParams.recipient, amount1)\n', '        self.safeTransfer(token0, _removeParams.recipient, amount0)\n', '    else:\n', '        raise "Not Eth Pair"\n', '\n', '@external\n', '@payable\n', "@nonreentrant('lock')\n", 'def divestUniV3NFLPToToken(_tokenId: uint256, _token: address, _removeParams: RemoveParams, minTokenAmount: uint256, isBurn: bool=True, deadline: uint256=MAX_UINT256) -> uint256:\n', '    assert not self.paused, "Paused"\n', '    fee: uint256 = self.feeAmount\n', '    msg_value: uint256 = msg.value\n', '\n', '    assert msg.value >= fee, "Insufficient fee"\n', '    if msg.value > fee:\n', '        send(msg.sender, msg.value - fee)\n', '    send(self.feeAddress, fee)\n', '\n', '    token: address = _token\n', '    if token == VETH or token == ZERO_ADDRESS:\n', '        token = WETH\n', '\n', '    token0: address = ZERO_ADDRESS\n', '    token1: address = ZERO_ADDRESS\n', '    amount0: uint256 = 0\n', '    amount1: uint256 = 0\n', '    (token0, token1, amount0, amount1) = self.removeLiquidity(_tokenId, _removeParams, isBurn, self)\n', '\n', '    amount: uint256 = 0\n', '    if token0 == token:\n', '        amount = self._token2Token(token1, token0, amount1, deadline)\n', '    elif token1 == token:\n', '        amount = self._token2Token(token0, token1, amount0, deadline)\n', '    else:\n', '        midToken: address = self._getMidToken(WETH, token0, token1)\n', '        if midToken == token0:\n', '            amount = self._token2Token(token1, token0, amount1, deadline)\n', '            amount = self._token2Token(token0, WETH, amount + amount0, deadline)\n', '            amount = self._token2Token(WETH, token, amount, deadline)\n', '        else:\n', '            amount = self._token2Token(token0, token1, amount0, deadline)\n', '            amount = self._token2Token(token1, WETH, amount + amount1, deadline)\n', '            amount = self._token2Token(WETH, token, amount, deadline)\n', '\n', '    assert amount >= minTokenAmount, "High Slippage"\n', '\n', '    if token != _token:\n', '        WrappedEth(WETH).withdraw(amount)\n', '        send(msg.sender, amount)\n', '    else:\n', '        self.safeTransfer(token, msg.sender, amount)\n', '    return amount\n', '\n', '# Admin functions\n', '@external\n', 'def pause(_paused: bool):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.paused = _paused\n', '    log Paused(_paused)\n', '\n', '@external\n', 'def newAdmin(_admin: address):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.admin = _admin\n', '\n', '@external\n', 'def newFeeAmount(_feeAmount: uint256):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.feeAmount = _feeAmount\n', '    log FeeChanged(_feeAmount)\n', '\n', '@external\n', 'def newFeeAddress(_feeAddress: address):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.feeAddress = _feeAddress\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def batchWithdraw(token: address[8], amount: uint256[8], to: address[8]):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    for i in range(8):\n', '        if token[i] == VETH:\n', '            send(to[i], amount[i])\n', '        elif token[i] != ZERO_ADDRESS:\n', '            self.safeTransfer(token[i], to[i], amount[i])\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def withdraw(token: address, amount: uint256, to: address):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    if token == VETH:\n', '        send(to, amount)\n', '    elif token != ZERO_ADDRESS:\n', '        self.safeTransfer(token, to, amount)\n', '\n', '@external\n', '@payable\n', 'def __default__():\n', '    assert msg.sender == WETH, "can\'t receive Eth"']