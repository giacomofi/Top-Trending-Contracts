['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}\n', '\n', 'contract HEXA_DEX{\n', '\n', '\n', '    uint public tokenPrice=0.007 ether;\n', '    event Bought(address user,uint256 amount);\n', '    event Sold(address user,uint256 amount);\n', '\n', '\n', '    IERC20 public token;\n', '    address public owner;\n', '    constructor(IERC20 _hexa) public {\n', '        owner=msg.sender;\n', '        token = _hexa;\n', '    }\n', '\n', '    function buy(uint amount) payable public {\n', '        uint256 eVal=(amount*tokenPrice);\n', '        require(msg.value>=eVal,"Invalid Amount");\n', '        uint256 dexBalance = token.balanceOf(address(this));\n', '        require(amount >=10, "You need to send some Ether");\n', '        uint256 amountTobuy = amount*100000000;\n', '        require(amountTobuy <= dexBalance, "Not enough tokens in the reserve");\n', '        token.transfer(msg.sender, amountTobuy);\n', '        emit Bought(msg.sender,amount);\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '        require(amount >=10, "You need to sell at least some tokens");\n', '        uint256 allowance = token.allowance(msg.sender, address(this));\n', '        uint256 amountToSell = amount*100000000;\n', '        require(allowance >= amountToSell, "Check the token allowance");\n', '        token.transferFrom(msg.sender, address(this), amountToSell);\n', '        uint256 eVal=(amount*tokenPrice);\n', '        msg.sender.transfer(eVal);\n', '        emit Sold(msg.sender,amount);\n', '    }\n', '    \n', '    function changeTokenPrice(uint price) public\n', '    {\n', '        require(msg.sender==owner,"Only Owner");\n', '        tokenPrice=price;\n', '    }\n', '    \n', '    function withdrawBalance(uint _type, uint amt,address payable user) public\n', '    {\n', '        require(msg.sender==owner,"Only Owner");\n', '        require(_type==1 || _type==2, "Invalid Request");\n', '        if(_type==1)\n', '        {\n', '          user.transfer(amt);  \n', '        }\n', '        else\n', '        {\n', '          token.transfer(user, amt);  \n', '        }\n', '        \n', '    }\n', '    \n', '\n', '}']