['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n', '    function WETH() external view returns (address);\n', '}\n', '\n', 'contract RegisterManager {\n', '    IUniswapV2Router02 constant uniV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address public WETH = uniV2Router02.WETH();\n', '    address public distributionToken;\n', '    address public WHLClubAddress;\n', '    address[] path;\n', '    \n', '    uint public roomFee = 0.01 ether;\n', '    uint public systemFee = 0.05 ether;\n', '    \n', '    address public admin;\n', '\n', '    address payable public donationAddress;\n', '    \n', '    mapping(address => bool) public isSystemRegistered;\n', '    mapping(uint => mapping(address => bool)) private _isRoomRegistered;\n', '\n', '    \n', '    event SystemRegistered(address registrant);\n', '    event SystemUnregistered(address registrant);\n', '    event RoomRegistered(address registrant, uint room_id);\n', '    event RoomUnregistered(address registrant, uint room_id);\n', '    \n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "Not admin");\n', '        _;\n', '    }\n', '\n', '    constructor(address _distributionToken, address _whlclubAddress, address payable _donationAddress) {\n', '        require(_distributionToken != address(0), "Invalid address");\n', '        require(_whlclubAddress != address(0), "Invalid address");\n', '        \n', '        distributionToken = _distributionToken;\n', '        path.push(WETH);\n', '        path.push(_distributionToken);\n', '        \n', '        admin = msg.sender;\n', '        \n', '        WHLClubAddress = _whlclubAddress;\n', '        donationAddress = _donationAddress;\n', '    }\n', '    \n', '    function setDistributionToken(address _token) external onlyAdmin {\n', '        require(_token != address(0), "Invalid address");\n', '        \n', '        distributionToken = _token;\n', '    }\n', '    \n', '    function autoSwapAndDistritue(uint _estimatedAmount) private {\n', '        uint _ethBalance = address(this).balance;\n', '        uint _returnBalance;\n', '        if (_ethBalance >= 2 ether) {\n', '            _returnBalance = uniV2Router02.swapExactETHForTokens{value:1 ether}(_estimatedAmount, path, address(this), type(uint256).max)[1];\n', '            IERC20(distributionToken).transfer(address(0x000000000000000000000000000000000000dEaD), _returnBalance);\n', '        }\n', '    }\n', '    \n', '    function systemRegister(uint _estimatedAmount) external payable {\n', '        require(msg.value == systemFee, "Wrong ETH value!");\n', '        require(!isSystemRegistered[msg.sender], "Already Registered!");\n', '        \n', '        uint256 _amount = msg.value;\n', '        uint256 _donationAmount = _amount / 10;\n', '        \n', '        if (!donationAddress.send(_donationAmount)) {\n', '            donationAddress.transfer(_donationAmount);\n', '        }\n', '        \n', '        autoSwapAndDistritue(_estimatedAmount);\n', '        \n', '        isSystemRegistered[msg.sender] = true;\n', '        emit SystemRegistered(msg.sender);\n', '    }\n', '\n', '    function roomRegister(uint roomId, uint _estimatedAmount) external payable {\n', '        require(msg.value == roomFee, "Wrong ETH value!");\n', '        require(!_isRoomRegistered[roomId][msg.sender], "Already Registered!");\n', '        \n', '        uint256 _amount = msg.value;\n', '        uint256 _donationAmount = _amount / 10;\n', '        \n', '        if (!donationAddress.send(_donationAmount)) {\n', '            donationAddress.transfer(_donationAmount);\n', '        }\n', '        \n', '        autoSwapAndDistritue(_estimatedAmount);\n', '        \n', '        _isRoomRegistered[roomId][msg.sender] = true;\n', '        emit RoomRegistered(msg.sender, roomId);\n', '    }\n', '    \n', '    function isRoomRegistered(uint roomId, address registrant) external view returns(bool) {\n', '        return _isRoomRegistered[roomId][registrant];\n', '    }\n', '\n', '    function setSystemFee(uint _systemFee) external onlyAdmin {\n', '        systemFee = _systemFee;\n', '    }\n', '\n', '    function setRoomFee(uint _roomFee) external onlyAdmin {\n', '        roomFee = _roomFee;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0), "Invalid address");\n', '        \n', '        admin = _newAdmin;\n', '    }\n', '    \n', '    function setDonationAddress(address payable _donationAddress) external onlyAdmin {\n', '        require(_donationAddress != address(0), "Invalid address");\n', '        \n', '        donationAddress = _donationAddress;\n', '    }\n', '    \n', '    function roomUnregister(uint roomId, address registrant) external onlyAdmin {\n', '        // require(!isSystemRegistered[registrant], "Unexist registrant!");\n', '        require(_isRoomRegistered[roomId][registrant], "Unexist registrant in the room!");\n', '        _isRoomRegistered[roomId][registrant] = false;\n', '        emit RoomUnregistered(registrant, roomId);\n', '    }\n', '\n', '    function systemUnregister(address registrant) external onlyAdmin {\n', '        require(isSystemRegistered[registrant], "Unexist registrant!");\n', '        isSystemRegistered[registrant] = false;\n', '        emit SystemUnregistered(registrant);\n', '    }\n', '}']