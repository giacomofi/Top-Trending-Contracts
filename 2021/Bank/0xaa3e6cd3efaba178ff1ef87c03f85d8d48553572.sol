['# Copyright (C) 2021 VolumeFi Software, Inc.\n', '\n', '#  This program is free software: you can redistribute it and/or modify\n', '#  it under the terms of the Apache 2.0 License. \n', '#  This program is distributed WITHOUT ANY WARRANTY without even the implied warranty of\n', '#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n', '#  @author VolumeFi, Software inc.\n', '#  @notice This Vyper contract removes liquidity from any Uniswap V2 pool into ETH or any ERC20 Token.\n', '#  SPDX-License-Identifier: Apache-2.0\n', '\n', '# @version ^0.2.0\n', '\n', 'interface ERC20:\n', '    def approve(spender: address, amount: uint256): nonpayable\n', '    def transfer(recipient: address, amount: uint256): nonpayable\n', '    def transferFrom(sender: address, recipient: address, amount: uint256): nonpayable\n', '\n', 'interface UniswapV2Pair:\n', '    def token0() -> address: view\n', '    def token1() -> address: view\n', '    def getReserves() -> (uint256, uint256, uint256): view\n', '    def burn(to: address) -> (uint256, uint256): nonpayable\n', '\n', 'interface UniswapV2Factory:\n', '    def getPair(tokenA: address, tokenB: address) -> address: view\n', '\n', 'interface UniswapV2Router02:\n', '    def removeLiquidity(tokenA: address, tokenB: address, liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to: address, deadline: uint256) -> (uint256, uint256): nonpayable\n', '\n', 'interface WrappedEth:\n', '    def withdraw(wad: uint256): nonpayable\n', '\n', 'UNISWAPV2ROUTER02: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', 'UNISWAPV2FACTORY: constant(address) = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '\n', 'VETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', 'WETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', 'DEADLINE: constant(uint256) = MAX_UINT256 # change\n', '\n', 'paused: public(bool)\n', 'admin: public(address)\n', 'feeAmount: public(uint256)\n', 'feeAddress: public(address)\n', '\n', '@external\n', 'def __init__():\n', '    self.paused = False\n', '    self.admin = msg.sender\n', '    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\n', '    self.feeAmount = 5 * 10 ** 15\n', '\n', '@internal\n', 'def _token2Token(fromToken: address, toToken: address, tokens2Trade: uint256, to: address, deadline: uint256) -> uint256:\n', '    if fromToken == toToken:\n', '        return tokens2Trade\n', '    ERC20(fromToken).approve(UNISWAPV2ROUTER02, 0)\n', '    ERC20(fromToken).approve(UNISWAPV2ROUTER02, tokens2Trade)\n', '    \n', '    addrBytes: Bytes[288] = concat(convert(tokens2Trade, bytes32), convert(0, bytes32), convert(160, bytes32), convert(to, bytes32), convert(deadline, bytes32), convert(2, bytes32), convert(fromToken, bytes32), convert(toToken, bytes32))\n', '    funcsig: Bytes[4] = method_id("swapExactTokensForTokens(uint256,uint256,address[],address,uint256)")\n', '    full_data: Bytes[292] = concat(funcsig, addrBytes)\n', '    \n', '    _response: Bytes[128] = raw_call(\n', '        UNISWAPV2ROUTER02,\n', '        full_data,\n', '        max_outsize=128\n', '    )\n', '    tokenBought: uint256 = convert(slice(_response, 96, 32), uint256)\n', '    assert tokenBought > 0, "Error Swapping Token 2"\n', '    return tokenBought\n', '\n', '@internal\n', '@pure\n', 'def _getPairTokens(pair: address) -> (address, address):\n', '    token0: address = UniswapV2Pair(pair).token0()\n', '    token1: address = UniswapV2Pair(pair).token1()\n', '    return (token0, token1)\n', '\n', '@internal\n', '@view\n', 'def _getLiquidityInPool(midToken: address, pair: address) -> uint256:\n', '    res0: uint256 = 0\n', '    res1: uint256 = 0\n', '    token0: address = ZERO_ADDRESS\n', '    token1: address = ZERO_ADDRESS\n', '    blockTimestampLast: uint256 = 0\n', '    (res0, res1, blockTimestampLast) = UniswapV2Pair(pair).getReserves()\n', '    (token0, token1) = self._getPairTokens(pair)\n', '    if token0 == midToken:\n', '        return res0\n', '    else:\n', '        return res1\n', '\n', '@internal\n', '@view\n', 'def _getMidToken(midToken: address, token0: address, token1: address) -> address:\n', '    pair0: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token0)\n', '    pair1: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token1)\n', '    eth0: uint256 = self._getLiquidityInPool(midToken, pair0)\n', '    eth1: uint256 = self._getLiquidityInPool(midToken, pair1)\n', '    if eth0 > eth1:\n', '        return token0\n', '    else:\n', '        return token1\n', '\n', '@external\n', '@payable\n', "@nonreentrant('lock')\n", 'def divestUniPairToToken(pair: address, token: address, amount: uint256, deadline: uint256=MAX_UINT256) -> uint256:\n', '    assert not self.paused, "Paused"\n', '    fee: uint256 = self.feeAmount\n', '    msg_value: uint256 = msg.value\n', '\n', '    assert msg.value >= fee, "Insufficient fee"\n', '    if msg.value > fee:\n', '        send(msg.sender, msg.value - fee)\n', '    send(self.feeAddress, fee)\n', '\n', '    assert pair != ZERO_ADDRESS, "Invalid Unipool Address"\n', '\n', '    token0: address = UniswapV2Pair(pair).token0()\n', '    token1: address = UniswapV2Pair(pair).token1()\n', '\n', '    ERC20(pair).transferFrom(msg.sender, self, amount)\n', '    ERC20(pair).approve(UNISWAPV2ROUTER02, amount)\n', '\n', '    token0Amount: uint256 = 0\n', '    token1Amount: uint256 = 0\n', '    (token0Amount, token1Amount) = UniswapV2Router02(UNISWAPV2ROUTER02).removeLiquidity(token0, token1, amount, 1, 1, self, deadline)\n', '    tokenAmount: uint256 = 0\n', '    if token == token0:\n', '        tokenAmount = token0Amount + self._token2Token(token1, token0, token1Amount, self, deadline)\n', '        ERC20(token).transfer(msg.sender, tokenAmount)\n', '        return tokenAmount\n', '    elif token == token1:\n', '        tokenAmount = token1Amount + self._token2Token(token0, token1, token0Amount, self, deadline)\n', '        ERC20(token).transfer(msg.sender, tokenAmount)\n', '        return tokenAmount\n', '    elif token0 == WETH:\n', '        tokenAmount = token0Amount + self._token2Token(token1, token0, token1Amount, self, deadline)\n', '    elif token1 == WETH:\n', '        tokenAmount = token1Amount + self._token2Token(token0, token1, token0Amount, self, deadline)\n', '    else:\n', '        midToken: address = self._getMidToken(WETH, token0, token1)\n', '        if midToken == token0:\n', '            tokenAmount = self._token2Token(token1, midToken, token1Amount, self, deadline)\n', '        elif midToken == token1:\n', '            tokenAmount = self._token2Token(token0, midToken, token0Amount, self, deadline)\n', '        else:\n', '            raise "Token Error"\n', '        tokenAmount = self._token2Token(midToken, WETH, tokenAmount, self, deadline)\n', '    if token == WETH:\n', '        ERC20(WETH).transfer(msg.sender, tokenAmount)\n', '        return tokenAmount\n', '    if token == VETH or token == ZERO_ADDRESS:\n', '        WrappedEth(WETH).withdraw(tokenAmount)\n', '        send(msg.sender, tokenAmount)\n', '        return tokenAmount\n', '    return self._token2Token(WETH, token, tokenAmount, msg.sender, deadline)\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def removeLiquidity(tokenA: address, tokenB: address, liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to: address, deadline: uint256=DEADLINE) -> (uint256, uint256):\n', '    assert block.timestamp <= deadline, "Expired!"\n', '    pair: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(tokenA, tokenB)\n', '    ERC20(pair).transferFrom(msg.sender, pair, liquidity)\n', '    amount0: uint256 = 0\n', '    amount1: uint256 = 0\n', '    (amount0, amount1) = UniswapV2Pair(pair).burn(to)\n', '    if convert(tokenA, uint256) < convert(tokenB, uint256):\n', '        assert amount0 >= amountAMin, "INSUFFICIENT_A_AMOUNT"\n', '        assert amount1 >= amountBMin, "INSUFFICIENT_B_AMOUNT"\n', '        return (amount0, amount1)\n', '    else:\n', '        assert amount1 >= amountAMin, "INSUFFICIENT_A_AMOUNT"\n', '        assert amount0 >= amountBMin, "INSUFFICIENT_B_AMOUNT"\n', '        return (amount1, amount0)\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def removeLiquidityETH(token: address, liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to: address, deadline: uint256=DEADLINE) -> (uint256, uint256):\n', '    assert block.timestamp <= deadline, "Expired!"\n', '    pair: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(token, WETH)\n', '    ERC20(pair).transferFrom(msg.sender, pair, liquidity)\n', '    amount0: uint256 = 0\n', '    amount1: uint256 = 0\n', '    (amount0, amount1) = UniswapV2Pair(pair).burn(self)\n', '    if convert(token, uint256) < convert(WETH, uint256):\n', '        ERC20(token).transfer(to, amount0)\n', '        WrappedEth(WETH).withdraw(amount1)\n', '        send(to, amount1)\n', '        assert amount0 >= amountTokenMin, "INSUFFICIENT_TOKEN_AMOUNT"\n', '        assert amount1 >= amountETHMin, "INSUFFICIENT_ETH_AMOUNT"\n', '        return (amount0, amount1)\n', '    else:\n', '        ERC20(token).transfer(to, amount1)\n', '        WrappedEth(WETH).withdraw(amount0)\n', '        send(to, amount0)\n', '        assert amount1 >= amountTokenMin, "INSUFFICIENT_TOKEN_AMOUNT"\n', '        assert amount0 >= amountETHMin, "INSUFFICIENT_ETH_AMOUNT"\n', '        return (amount1, amount0)\n', '\n', '# Admin functions\n', '@external\n', 'def pause(_paused: bool):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.paused = _paused\n', '\n', '@external\n', 'def newAdmin(_admin: address):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.admin = _admin\n', '\n', '@external\n', 'def newFeeAmount(_feeAmount: uint256):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.feeAmount = _feeAmount\n', '\n', '@external\n', 'def newFeeAddress(_feeAddress: address):\n', '    assert msg.sender == self.admin, "Not admin"\n', '    self.feeAddress = _feeAddress\n', '\n', '@external\n', '@payable\n', 'def __default__(): pass']