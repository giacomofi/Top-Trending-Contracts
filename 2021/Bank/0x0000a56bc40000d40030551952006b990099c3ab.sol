['// https://tornado.cash\n', '/*\n', ' * d888888P                                           dP              a88888b.                   dP\n', " *    88                                              88             d8'   `88                   88\n", ' *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\n', " *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\n", ' *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\n', " *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\n", ' * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n', ' */\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./Tornado.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeERC20.sol";\n', '\n', 'contract ERC20Tornado is Tornado {\n', '  using SafeERC20 for IERC20;\n', '  IERC20 public immutable token;\n', '\n', '  constructor(\n', '    IVerifier _verifier,\n', '    IHasher _hasher,\n', '    uint256 _denomination,\n', '    uint32 _merkleTreeHeight,\n', '    IERC20 _token\n', '  ) Tornado(_verifier, _hasher, _denomination, _merkleTreeHeight) {\n', '    token = _token;\n', '  }\n', '\n', '  function _processDeposit() internal override {\n', '    require(msg.value == 0, "ETH value is supposed to be 0 for ERC20 instance");\n', '    token.safeTransferFrom(msg.sender, address(this), denomination);\n', '  }\n', '\n', '  function _processWithdraw(\n', '    address payable _recipient,\n', '    address payable _relayer,\n', '    uint256 _fee,\n', '    uint256 _refund\n', '  ) internal override {\n', '    require(msg.value == _refund, "Incorrect refund amount received by the contract");\n', '\n', '    token.safeTransfer(_recipient, denomination - _fee);\n', '    if (_fee > 0) {\n', '      token.safeTransfer(_relayer, _fee);\n', '    }\n', '\n', '    if (_refund > 0) {\n', '      (bool success, ) = _recipient.call{ value: _refund }("");\n', '      if (!success) {\n', "        // let's return _refund back to the relayer\n", '        _relayer.transfer(_refund);\n', '      }\n', '    }\n', '  }\n', '}']