['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\tuint256 public basisPointsRate = 0;\n', '\tuint256 public maximumFee = 0;\n', '\tuint256 public minimumFee = 0;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezes;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event CollectFee(address indexed _from, address indexed _owner, uint256 fee);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Params(address indexed _owner, uint256 feeBasisPoints, uint256 minFee, uint256 maxFee);\n', '    event Freeze(address indexed to, uint256 value);\n', '    event Unfreeze(address indexed to, uint256 value);\n', '\tevent Withdraw(address indexed to, uint256 value);\n', '\n', '    constructor(uint256 initialSupply, uint8 decimalUnits, string tokenName, string tokenSymbol) public {\n', '        balanceOf[msg.sender] = initialSupply;\n', '        totalSupply = initialSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '\t\towner = msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire(_to != address(0));\n', '        uint256 fee = calFee(_value);\n', '        require(_value > fee);\n', '        uint256 sendAmount = _value.sub(fee);\n', '\t\trequire(balanceOf[msg.sender] >= _value && _value > 0 && balanceOf[_to] + sendAmount > balanceOf[_to]);\n', '\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '\t\tbalanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '\t\tif (fee > 0) {\n', '            balanceOf[owner] = balanceOf[owner].add(fee);\n', '            emit CollectFee(msg.sender, owner, fee);\n', '        }\n', '        emit Transfer(msg.sender, _to, sendAmount);\n', '\t\treturn true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\trequire(_spender != address(0));\n', '\t\trequire((_value == 0) || (allowance[msg.sender][_spender] == 0));\n', '        allowance[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire((_from != address(0)) && (_to != address(0)));\n', '        uint256 fee = calFee(_value);\n', '        require(_value > fee);\n', '        uint256 sendAmount = _value.sub(fee);\n', '\t\trequire(balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value && _value > 0 && balanceOf[_to] + sendAmount > balanceOf[_to]);\n', '\t\tbalanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '\t\tif (fee > 0) {\n', '            balanceOf[owner] = balanceOf[owner].add(fee);\n', '            emit CollectFee(msg.sender, owner, fee);\n', '        }\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function freeze(address _to,uint256 _value) public returns (bool success) {\n', '\t\trequire(msg.sender == owner);\n', '        require(balanceOf[_to] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[_to] = balanceOf[_to].sub(_value);\n', '        freezes[_to] = freezes[_to].add(_value);\n', '        emit Freeze(_to, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction unfreeze(address _to,uint256 _value) public returns (bool success) {\n', '\t\trequire(msg.sender == owner);\n', '        require(freezes[_to] >= _value);\n', '        require(_value > 0);\n', '        freezes[_to] = freezes[_to].sub(_value);\n', '\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Unfreeze(_to, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction setParams(uint256 newBasisPoints, uint256 newMinFee, uint256 newMaxFee) public returns (bool success) {\n', '\t    require(msg.sender == owner);\n', '        require(newBasisPoints <= 20);\n', '        require(newMinFee <= 50);\n', '        require(newMaxFee <= 50);\n', '\t\trequire(newMinFee <= newMaxFee);\n', '        basisPointsRate = newBasisPoints;\n', '        minimumFee = newMinFee.mul(10**decimals);\n', '        maximumFee = newMaxFee.mul(10**decimals);\n', '        emit Params(msg.sender, basisPointsRate, minimumFee, maximumFee);\n', '        return true;\n', '    }\n', '\n', '    function calFee(uint256 _value) private view returns (uint256 fee) {\n', '        fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '        if (fee < minimumFee) {\n', '            fee = minimumFee;\n', '        }\n', '    }\n', '\n', '\tfunction withdrawEther(uint256 amount) public returns (bool success) {\n', '\t\trequire (msg.sender == owner);\n', '\t\towner.transfer(amount);\n', '\t\temit Withdraw(msg.sender,amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction destructor() public returns (bool success) {\n', '\t    require(msg.sender == owner);\n', '        selfdestruct(owner);\n', '        return true;\n', '    }\n', '\n', '\tfunction() payable private {\n', '    }\n', '}']