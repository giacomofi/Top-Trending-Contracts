['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', 'pragma solidity ^0.6.0;\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'pragma solidity ^0.6.0;\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'pragma solidity ^0.6.2;\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '            \n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', 'pragma solidity ^0.6.0;\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', 'pragma solidity ^0.6.2;\n', 'contract WHORE is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    mapping (address => uint256) private _cOwned;\n', '    mapping (address => uint256) private _xOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _xTotal = 5 * 10**4 * 10**9;\n', '    uint256 private _cTotal = (MAX - (MAX % _xTotal));\n', '    uint256 private _xFeeTotal;\n', "    string private _name = 'WHORE.FINANCE';\n", "    string private _symbol = 'WHORE';\n", '    uint8 private _decimals = 9;\n', '    constructor () public {\n', '        _cOwned[_msgSender()] = _cTotal;\n', '        emit Transfer(address(0), _msgSender(), _xTotal);\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _xTotal;\n', '    }\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _xOwned[account];\n', '        return tokenFromRefund(_cOwned[account]);\n', '    }\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '    function totalFees() public view returns (uint256) {\n', '        return _xFeeTotal;\n', '    }\n', '    function refund(uint256 xAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 cAmount,,,,) = _getValues(xAmount);\n', '        _cOwned[sender] = _cOwned[sender].sub(cAmount);\n', '        _cTotal = _cTotal.sub(cAmount);\n', '        _xFeeTotal = _xFeeTotal.add(xAmount);\n', '    }\n', '    function RefundFromToken(uint256 xAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(xAmount <= _xTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 cAmount,,,,) = _getValues(xAmount);\n', '            return cAmount;\n', '        } else {\n', '            (,uint256 cTransferAmount,,,) = _getValues(xAmount);\n', '            return cTransferAmount;\n', '        }\n', '    }\n', '    function tokenFromRefund(uint256 cAmount) public view returns(uint256) {\n', '        require(cAmount <= _cTotal, "Amount must be less than total refunds");\n', '        uint256 currentRate = _getRate();\n', '        return cAmount.div(currentRate);\n', '    }\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_cOwned[account] > 0) {\n', '            _cOwned[account] = tokenFromRefund(_cOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _xOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '    function _transferStandard(address sender, address recipient, uint256 xAmount) private {\n', '        (uint256 cAmount, uint256 cTransferAmount, uint256 cFee, uint256 xTransferAmount, uint256 xFee) = _getValues(xAmount);\n', '        _cOwned[sender] = _cOwned[sender].sub(cAmount);\n', '        _cOwned[recipient] = _cOwned[recipient].add(cTransferAmount);\n', '        _refundFee(cFee, xFee);\n', '        emit Transfer(sender, recipient, xTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 xAmount) private {\n', '        (uint256 cAmount, uint256 cTransferAmount, uint256 cFee, uint256 xTransferAmount, uint256 xFee) = _getValues(xAmount);\n', '        _cOwned[sender] = _cOwned[sender].sub(cAmount);\n', '        _xOwned[recipient] = _xOwned[recipient].add(xTransferAmount);\n', '        _cOwned[recipient] = _cOwned[recipient].add(cTransferAmount);\n', '        _refundFee(cFee, xFee);\n', '        emit Transfer(sender, recipient, xTransferAmount);\n', '    }\n', '    function _transferFromExcluded(address sender, address recipient, uint256 xAmount) private {\n', '        (uint256 cAmount, uint256 cTransferAmount, uint256 cFee, uint256 xTransferAmount, uint256 xFee) = _getValues(xAmount);\n', '        _xOwned[sender] = _xOwned[sender].sub(xAmount);\n', '        _cOwned[sender] = _cOwned[sender].sub(cAmount);\n', '        _cOwned[recipient] = _cOwned[recipient].add(cTransferAmount);\n', '        _refundFee(cFee, xFee);\n', '        emit Transfer(sender, recipient, xTransferAmount);\n', '    }\n', '    function _transferBothExcluded(address sender, address recipient, uint256 xAmount) private {\n', '        (uint256 cAmount, uint256 cTransferAmount, uint256 cFee, uint256 xTransferAmount, uint256 xFee) = _getValues(xAmount);\n', '        _xOwned[sender] = _xOwned[sender].sub(xAmount);\n', '        _cOwned[sender] = _cOwned[sender].sub(cAmount);\n', '        _xOwned[recipient] = _xOwned[recipient].add(xTransferAmount);\n', '        _cOwned[recipient] = _cOwned[recipient].add(cTransferAmount);\n', '        _refundFee(cFee, xFee);\n', '        emit Transfer(sender, recipient, xTransferAmount);\n', '    }\n', '    function _refundFee(uint256 cFee, uint256 xFee) private {\n', '        _cTotal = _cTotal.sub(cFee);\n', '        _xFeeTotal = _xFeeTotal.add(xFee);\n', '    }\n', '    function _getValues(uint256 xAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 xTransferAmount, uint256 xFee) = _getXValues(xAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 cAmount, uint256 cTransferAmount, uint256 cFee) = _getCValues(xAmount, xFee, currentRate);\n', '        return (cAmount, cTransferAmount, cFee, xTransferAmount, xFee);\n', '    }\n', '    function _getXValues(uint256 xAmount) private pure returns (uint256, uint256) {\n', '        uint256 xFee = xAmount.mul(50).div(100);\n', '        uint256 xTransferAmount = xAmount.sub(xFee);\n', '        return (xTransferAmount, xFee);\n', '    }\n', '    function _getCValues(uint256 xAmount, uint256 xFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 cAmount = xAmount.mul(currentRate);\n', '        uint256 cFee = xFee.mul(currentRate);\n', '        uint256 cTransferAmount = cAmount.sub(cFee);\n', '        return (cAmount, cTransferAmount, cFee);\n', '    }\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 cSupply, uint256 xSupply) = _getCurrentSupply();\n', '        return cSupply.div(xSupply);\n', '    }\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 cSupply = _cTotal;\n', '        uint256 xSupply = _xTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_cOwned[_excluded[i]] > cSupply || _xOwned[_excluded[i]] > xSupply) return (_cTotal, _xTotal);\n', '            cSupply = cSupply.sub(_cOwned[_excluded[i]]);\n', '            xSupply = xSupply.sub(_xOwned[_excluded[i]]);\n', '        }\n', '        if (cSupply < _cTotal.div(_xTotal)) return (_cTotal, _xTotal);\n', '        return (cSupply, xSupply);\n', '    }\n', '}']