['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint amount\n', '    ) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'interface IUniswapV2Router {\n', '  function getAmountsOut(uint256 amountIn, address[] memory path)\n', '    external\n', '    view\n', '    returns (uint256[] memory amounts);\n', '  \n', '  function swapExactTokensForTokens(\n', '    uint256 amountIn,\n', '    uint256 amountOutMin,\n', '    address[] calldata path,\n', '    address to,\n', '    uint256 deadline\n', '  ) external returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '  function token0() external view returns (address);\n', '  function token1() external view returns (address);\n', '  function swap(\n', '    uint256 amount0Out,\n', '    uint256 amount1Out,\n', '    address to,\n', '    bytes calldata data\n', '  ) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '  function getPair(address token0, address token1) external returns (address);\n', '}\n', '\n', 'contract tokenSwap {\n', '    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '   function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\n', '    IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);   \n', '    IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\n', '\n', '    address[] memory path;\n', '    if (_tokenIn == WETH || _tokenOut == WETH) {\n', '      path = new address[](2);\n', '      path[0] = _tokenIn;\n', '      path[1] = _tokenOut;\n', '    } else {\n', '      path = new address[](3);\n', '      path[0] = _tokenIn;\n', '      path[1] = WETH;\n', '      path[2] = _tokenOut;\n', '    }\n', '        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\n', '    }\n', '    \n', '     function getAmountOutMin(address _tokenIn, address _tokenOut, uint256 _amountIn) external view returns (uint256) {\n', '        address[] memory path;\n', '        if (_tokenIn == WETH || _tokenOut == WETH) {\n', '            path = new address[](2);\n', '            path[0] = _tokenIn;\n', '            path[1] = _tokenOut;\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = _tokenIn;\n', '            path[1] = WETH;\n', '            path[2] = _tokenOut;\n', '        }\n', '        \n', '        uint256[] memory amountOutMins = IUniswapV2Router(UNISWAP_V2_ROUTER).getAmountsOut(_amountIn, path);\n', '        return amountOutMins[path.length -1];  \n', '    }    \n', '}']