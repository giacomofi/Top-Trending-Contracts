['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract KanaShop is Ownable {\n', '    address private kanaToken; //KanaToken address\n', '\n', '    string public _name = "KanaToken shop";\n', '    string public _symbol = "KanaShop";\n', '    uint8 private _decimalsKana = 8;\n', '    uint8 private _decimalsETH = 18;\n', '\n', '    uint256 _priceKanaAmount; //兑换比例；\n', '    uint256 _priceEthAmount; //兑换比例；\n', '\n', '    uint256 private _totalSellLimit = 200 * 10**uint256(_decimalsETH); //销售总量限制，200 ETH\n', '    uint256 private _totalsold; //已售出总量；\n', '\n', '    int256 _releaseIndex; //已释放数组记录的下标\n', '\n', '    struct OrderInfo {\n', '        address addrUser;\n', '        uint256 amount;\n', '        bool release; //是否释放\n', '        uint256 createTime; //购买时间；unixtime；精度，秒；\n', '        uint256 updateTime; //释放时间；unixtime；精度，秒；\n', '    }\n', '\n', '    struct OrderList {\n', '        address addrUser;\n', '        uint256[] arrOrderId;\n', '    }\n', '\n', '    uint256[] arrOrderTimeStamp; //订单时间戳数据；数组下标就是 orderId\n', '    mapping(uint256 => OrderInfo) private mapOrderInfo; //map<orderId, OrderInfo>\n', '    mapping(address => OrderList) private mapAddressOrderList; //map<address, OrderList>\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    event Approval(address indexed src, address indexed guy, uint256 wad);\n', '    event EventBuyKana(address indexed dst, uint256 wad);\n', '    event EventOwnerWithdraw(address indexed owner, uint256 amount);\n', '    event EventSetRawPrice(uint256 amountKana, uint256 amountEth);\n', '    event EventRelease(address indexed addr, uint256 amountKana);\n', '\n', '    constructor(address _kToken) public {\n', '        kanaToken = _kToken;\n', '        _totalsold = 0;\n', '        _releaseIndex = -1;\n', '\n', '        _priceKanaAmount = 0;\n', '        _priceEthAmount = 0;\n', '    }\n', '\n', '    fallback() external payable {\n', '        buyKana();\n', '    }\n', '\n', '    receive() external payable {\n', '        buyKana();\n', '    }\n', '\n', '    function buyKana() public payable {\n', '        uint256 min = 1 * 10**uint256(_decimalsETH);\n', '        uint256 max = 10 * 10**uint256(_decimalsETH);\n', '\n', '        uint256 tsOrder = now; //时间戳；\n', '\n', '        //单次购买限额\n', '        require(msg.value >= min && msg.value <= max, "amount limit");\n', '\n', '        //单地址购买总额限制\n', '        require(\n', '            balanceOf[msg.sender] + msg.value <= max,\n', '            "address total limit error"\n', '        );\n', '\n', '        //销售总量限制\n', '        require(_totalsold + msg.value <= _totalSellLimit, "total sell limit");\n', '\n', '        //订单信息\n', '        arrOrderTimeStamp.push(tsOrder);\n', '        uint256 currOrderId = arrOrderTimeStamp.length - 1;\n', '\n', '        mapOrderInfo[currOrderId].addrUser = msg.sender;\n', '        mapOrderInfo[currOrderId].amount = msg.value;\n', '        mapOrderInfo[currOrderId].release = false;\n', '        mapOrderInfo[currOrderId].createTime = tsOrder;\n', '        mapOrderInfo[currOrderId].updateTime = tsOrder;\n', '\n', '        //订单列表\n', '        mapAddressOrderList[msg.sender].addrUser = msg.sender;\n', '        mapAddressOrderList[msg.sender].arrOrderId.push(currOrderId);\n', '\n', '        //金额更新\n', '        balanceOf[msg.sender] += msg.value;\n', '        _totalsold += msg.value;\n', '\n', '        emit EventBuyKana(msg.sender, msg.value);\n', '    }\n', '\n', '    function getOrdersByAddress(address addrUser)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 totalOrders,\n', '            address[] memory addrUsers,\n', '            uint256[] memory amounts,\n', '            bool[] memory releases,\n', '            uint256[] memory createTimes,\n', '            uint256[] memory updateTimes\n', '        )\n', '    {\n', '        totalOrders = mapAddressOrderList[addrUser].arrOrderId.length;\n', '\n', '        address[] memory retAddrUsers = new address[](totalOrders);\n', '        uint256[] memory retAmounts = new uint256[](totalOrders);\n', '        bool[] memory retReleases = new bool[](totalOrders);\n', '        uint256[] memory retCreateTimes = new uint256[](totalOrders);\n', '        uint256[] memory retUpdateTimes = new uint256[](totalOrders);\n', '\n', '        for (uint256 i = 0; i < totalOrders; i++) {\n', '            uint256 currOrderId = mapAddressOrderList[addrUser].arrOrderId[i];\n', '\n', '            retAddrUsers[i] = mapOrderInfo[currOrderId].addrUser;\n', '            retAmounts[i] = mapOrderInfo[currOrderId].amount;\n', '            retReleases[i] = mapOrderInfo[currOrderId].release;\n', '            retCreateTimes[i] = mapOrderInfo[currOrderId].createTime;\n', '            retUpdateTimes[i] = mapOrderInfo[currOrderId].updateTime;\n', '        }\n', '\n', '        addrUsers = retAddrUsers;\n', '        amounts = retAmounts;\n', '        releases = retReleases;\n', '        createTimes = retCreateTimes;\n', '        updateTimes = retUpdateTimes;\n', '    }\n', '\n', '    function ownerWithdraw(uint256 wad) public onlyOwner {\n', '        payable(address(this.owner())).transfer(wad);\n', '        emit EventOwnerWithdraw(address(this.owner()), wad);\n', '    }\n', '\n', '    function release() public onlyOwner {\n', '        //     return IERC20(kanaToken).balanceOf(address(this));\n', '\n', '        require(_priceKanaAmount != 0, "need to set price of kana");\n', '        require(_priceEthAmount != 0, "need to set price of eth");\n', '\n', '        uint256 currIndex = uint256(_releaseIndex + 1);\n', '        for (uint256 i = currIndex; i < arrOrderTimeStamp.length; i++) {\n', '            if (true == mapOrderInfo[i].release) continue;\n', '\n', '            //兑换计算\n', '            uint256 amountKanaRelease =\n', '                (mapOrderInfo[i].amount * _priceKanaAmount) / _priceEthAmount;\n', '\n', '            IERC20(kanaToken).transfer(\n', '                mapOrderInfo[i].addrUser,\n', '                amountKanaRelease\n', '            );\n', '            mapOrderInfo[i].release = true;\n', '            mapOrderInfo[i].updateTime = now;\n', '            currIndex = i;\n', '\n', '            emit EventRelease(mapOrderInfo[i].addrUser, amountKanaRelease);\n', '        }\n', '\n', '        _releaseIndex = int256(currIndex);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function totalSellLimit() public view returns (uint256) {\n', '        return _totalSellLimit;\n', '    }\n', '\n', '    function totalSold() public view returns (uint256) {\n', '        return _totalsold;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        emit Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function decimalsETH() public view returns (uint8) {\n', '        return _decimalsETH;\n', '    }\n', '\n', '    function decimalsKana() public view returns (uint8) {\n', '        return _decimalsKana;\n', '    }\n', '\n', '    function setRawPrice(uint256 amountKana, uint256 amountEth)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_getRate(amountKana, amountEth) >= 1, "kana price too high");\n', '\n', '        _priceKanaAmount = amountKana;\n', '        _priceEthAmount = amountEth;\n', '    }\n', '\n', '    function getRawPrice()\n', '        public\n', '        view\n', '        returns (uint256 amountKana, uint256 amountEth)\n', '    {\n', '        amountKana = _priceKanaAmount;\n', '        amountEth = _priceEthAmount;\n', '    }\n', '\n', '    function _getRate(uint256 amountKana, uint256 amountEth)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_decimalsETH >= _decimalsKana, "decimal error");\n', '\n', '        return\n', '            (amountKana * 10**uint256(_decimalsETH - _decimalsKana)) /\n', '            amountEth;\n', '    }\n', '\n', '    function getRate() public view returns (uint256) {\n', '        return _getRate(_priceKanaAmount, _priceEthAmount);\n', '    }\n', '}']