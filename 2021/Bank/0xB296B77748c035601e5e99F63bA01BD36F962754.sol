['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.7.3;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ManorToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address public _owner  = 0x8cd0B8941AF4199787A3A93510Fe41534D50e189;\n', '    address public _realtor = 0x9E9b841f19a6Fc5E20c3b4C26Ec113e4C4D040e3;\n', '    uint256 public end;\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Purchase(address indexed buyer, uint256 tokens, uint256 eth);\n', '\n', '    string public constant name = "Manor Token";\n', '    string public constant symbol = "MT";\n', '    uint256 public constant decimals = 18;\n', '\n', '    uint256 private constant DECIMALS = 18;\n', '    uint256 private constant MAX_UINT256 = ~uint256(0) / 1000000000000000000;\n', '    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 10**DECIMALS;\n', '\n', '    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n', '    uint256 totalGons = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n', '\n', '    uint256 private constant MAX_SUPPLY = 21000000 * 10**DECIMALS;  // (2^128) - 1\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _totalDeposit;\n', '    uint256 private _gonsPerFragment;\n', '    mapping(address => uint256) private _gonBalances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowedFragments;\n', '\n', '    uint256 public dollar = uint256(1 ether).div(2100);\n', '    uint256 public basePrice = dollar.div(10);\n', '    uint256 public priceIncrement = dollar.div(100);\n', '\n', '    mapping(address => address) public referrer;\n', '    mapping(address => uint256) public refBalances;\n', '\n', '    constructor() public {\n', '      end = block.timestamp + (55 * 86400); // 55 days\n', '      _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n', '      _gonBalances[_owner] = TOTAL_GONS;\n', '      _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '\n', '      emit Transfer(address(0), _owner, _totalSupply);\n', '    }\n', '\n', '    function isEnded() public view returns(bool) {\n', '        return (block.timestamp >= end || _totalDeposit >= dollar.mul(21000000));\n', '    }\n', '\n', '    function _mint(address _user, uint256 _amount) internal{\n', '      _gonBalances[_user] = _gonBalances[_user].add(_amount.mul(_gonsPerFragment));\n', '      totalGons = totalGons.add(_amount.mul(_gonsPerFragment));\n', '      _totalSupply = _totalSupply.add(_amount);\n', '      _gonsPerFragment = totalGons.div(_totalSupply);\n', '      emit Transfer(address(0), _user, _amount);\n', '    }\n', '\n', '    function _payRefs(address _user, address _ref, uint256 _amount) internal {\n', '      _mint(_realtor, _amount.div(20));\n', '      if(referrer[_user] != address(0)){\n', '        refBalances[referrer[_user]] += _amount.div(20);\n', '      }\n', '      else if(_ref != address(0)){\n', '        referrer[_user] = _ref;\n', '        refBalances[referrer[_user]] += _amount.div(20);\n', '      }\n', '    }\n', '\n', '    function hardcap() public view returns(uint256){\n', '      return dollar.mul(21000000);\n', '    }\n', '\n', '    function updateDollar(uint256 _usdPrice) public onlyOwner {\n', '      dollar = uint256(1 ether).div(_usdPrice);\n', '      basePrice = dollar.div(10);\n', '      priceIncrement = dollar.div(100);\n', '    }\n', '\n', '    function calcPrice(uint256 _tokens) public view returns(uint256 _eth){\n', '      uint256 rev = _totalDeposit.div(dollar);\n', '      uint256 remainder = 100000 - (rev.mod(100000));\n', '      uint256 curPrice = basePrice.add(priceIncrement.mul(rev.div(100000)));\n', '\n', '      if(_tokens.mul(curPrice).div(dollar) > remainder){\n', '        _eth = remainder.mul(dollar);\n', '        _tokens = _tokens.sub(remainder.mul(dollar).div(curPrice));\n', '        for(uint256 x = 0; x < 21; x++){\n', '          if(x == 20){\n', '            revert("Amount Exceeds HardCap");\n', '          }\n', '          uint256 nextPrice = basePrice.add(priceIncrement.mul(rev.div(100000).add(1 + x)));\n', '          if(_tokens.mul(nextPrice) > dollar.mul(100000)){\n', '            _eth += dollar.mul(100000);\n', '            _tokens = _tokens.sub(dollar.mul(100000).div(nextPrice));\n', '          }\n', '          else{\n', '            _eth += _tokens.mul(nextPrice);\n', '            break;\n', '          }\n', '        }\n', '\n', '      }\n', '      else{\n', '        _eth = _tokens.mul(curPrice);\n', '      }\n', '    }\n', '\n', '    function calcTokens(uint256 _amount) public view returns(uint256 _tokens){\n', '      uint256 rev = _totalDeposit.div(dollar);\n', '      uint256 remainder = 100000 - (rev.mod(100000));\n', '      uint256 curPrice = basePrice.add(priceIncrement.mul(rev.div(100000)));\n', '      uint256 dollarSpent = _amount.div(dollar);\n', '\n', '      if(dollarSpent > remainder){\n', '        _tokens = remainder.mul(dollar).mul(1 ether).div(curPrice);\n', '        _amount = _amount.sub(remainder.mul(dollar));\n', '        for(uint256 x = 0; x < 21; x++){\n', '          if(x == 20){\n', '            revert("Amount Exceeds HardCap");\n', '          }\n', '          uint256 nextPrice = basePrice.add(priceIncrement.mul(rev.div(100000).add(1 + x)));\n', '          if(_amount > dollar.mul(100000)){\n', '            _tokens += dollar.mul(100000).mul(1 ether).div(nextPrice);\n', '            _amount = _amount.sub(dollar.mul(100000));\n', '          }\n', '          else{\n', '            _tokens += _amount.mul(1 ether).div(nextPrice);\n', '            break;\n', '          }\n', '        }\n', '      }\n', '      else{\n', '        _tokens = _amount.mul(1 ether).div(curPrice);\n', '      }\n', '\n', '    }\n', '\n', '    function purchaseTokens(address _ref) public payable {\n', '      require(!isEnded(), "ICO Ended");\n', '      require(_totalDeposit + msg.value <= dollar.mul(21000000), "Amount Exceeds HardCap");\n', '      uint256 tokensBought = calcTokens(msg.value);\n', '\n', '      _payRefs(msg.sender, _ref, tokensBought);\n', '      _totalDeposit += msg.value;\n', '\n', '      _mint(msg.sender, tokensBought);\n', '      emit Purchase(msg.sender, tokensBought, msg.value);\n', '    }\n', '\n', '    function purchaseExactTokens(address _ref, uint256 _amount) public payable {\n', '      require(!isEnded(), "ICO Ended");\n', '      uint256 tokenPrice = calcPrice(_amount);\n', '      require(msg.value >= tokenPrice, "Insufficient Funds Sent");\n', '      require(_totalDeposit + tokenPrice <= dollar.mul(21000000), "Amount Exceeds HardCap");\n', '\n', '      _payRefs(msg.sender, _ref, _amount);\n', '      _totalDeposit += tokenPrice;\n', '\n', '      _mint(msg.sender, _amount);\n', '      if(msg.value > tokenPrice){\n', '        msg.sender.transfer(msg.value.sub(tokenPrice));\n', '      }\n', '      emit Purchase(msg.sender, _amount, tokenPrice);\n', '    }\n', '\n', '    function claimRefs(uint256 _amount) public {\n', '      require(isEnded(), "ICO Not Ended");\n', '      require(refBalances[msg.sender] >= _amount, "Claim Exceeds Balance");\n', '      refBalances[msg.sender] -= _amount;\n', '      _mint(msg.sender, _amount);\n', '    }\n', '\n', '    function clearLiquidity() public onlyOwner{\n', '      require(isEnded(), "ICO Not Ended");\n', '      _mint(msg.sender, _totalSupply);\n', '    }\n', '\n', '    function withdrawETH(uint256 _amount) public onlyOwner{\n', '      msg.sender.transfer(_amount);\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function totalDeposit()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalDeposit;\n', '    }\n', '\n', '    function balanceOf(address who)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _gonBalances[who].div(_gonsPerFragment);\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 gonValue = value.mul(_gonsPerFragment);\n', '        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n', '\n', '        _gonBalances[to] = _gonBalances[to].add(gonValue.mul(95).div(100));\n', '        totalGons = totalGons.sub(gonValue.div(20)); // give everyone else 5%\n', '        _gonsPerFragment = totalGons.div(_totalSupply);\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner_, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowedFragments[owner_][spender];\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\n', '\n', '        uint256 gonValue = value.mul(_gonsPerFragment);\n', '        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n', '\n', '        _gonBalances[to] = _gonBalances[to].add(gonValue.mul(95).div(100));\n', '        totalGons = totalGons.sub(gonValue.div(20)); // give everyone else 5%\n', '        _gonsPerFragment = totalGons.div(_totalSupply);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _allowedFragments[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _allowedFragments[msg.sender][spender] =\n', '            _allowedFragments[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = _allowedFragments[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowedFragments[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']