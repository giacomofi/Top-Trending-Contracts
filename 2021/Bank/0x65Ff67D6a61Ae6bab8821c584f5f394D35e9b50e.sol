['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-18\n', '*/\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/AddressArray.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library AddressArray{\n', '  function exists(address[] memory self, address addr) public pure returns(bool){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function index_of(address[] memory self, address addr) public pure returns(uint){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return i;\n', '      }\n', '    }\n', '    require(false, "AddressArray:index_of, not exist");\n', '  }\n', '\n', '  function remove(address[] storage self, address addr) public returns(bool){\n', '    uint index = index_of(self, addr);\n', '    self[index] = self[self.length - 1];\n', '\n', '    delete self[self.length-1];\n', '    self.length--;\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\n', '        require(b <= a, s);\n', '        c = a - b;\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\n', '        require(b > 0, s);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/core/CRVExchange.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CFControllerInterfaceForEx{\n', '  function refundTarget(uint256 _amount) public;\n', '}\n', '\n', 'contract CFETHControllerInterfaceForEx{\n', '  function refundTarget() public payable;\n', '}\n', '\n', 'contract SushiUniInterfaceERC20{\n', '  function getAmountsOut(uint256 amountIn, address[] memory path) public view returns(uint256[] memory);\n', '  function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn,   uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external ;\n', '  function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\n', '}\n', '\n', '\n', 'contract CRVExchange is Ownable{\n', '  address public crv_token;\n', '  using AddressArray for address[];\n', '  using SafeERC20 for IERC20;\n', '\n', '  struct path_info{\n', '    address dex;\n', '    address[] path;\n', '  }\n', '  mapping(bytes32 => path_info) public paths;\n', '  bytes32[] public path_indexes;\n', '\n', '  address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '  constructor(address _crv) public{\n', '    if(_crv == address(0x0)){\n', '      crv_token = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    }else{\n', '      crv_token = _crv;\n', '    }\n', '  }\n', '  function path_from_addr(uint index) public view returns(address){\n', '    return paths[path_indexes[index]].path[0];\n', '  }\n', '  function path_to_addr(uint index) public view returns(address){\n', '    return paths[path_indexes[index]].path[paths[path_indexes[index]].path.length - 1];\n', '  }\n', '\n', '  function handleCRV(address target_token, uint256 amount, uint min_amount) public{\n', '    handleExtraToken(crv_token, target_token, amount, min_amount);\n', '  }\n', '\n', '  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public{\n', '    uint256 maxOut = 0;\n', '    uint256 fpi = 0;\n', '\n', '    for(uint pi = 0; pi < path_indexes.length; pi ++){\n', '      if(path_from_addr(pi) != from || path_to_addr(pi) != target_token){\n', '        continue;\n', '      }\n', '      uint256 t = get_out_for_dex_path(pi, amount);\n', '      if( t > maxOut ){\n', '        fpi = pi;\n', '        maxOut = t;\n', '      }\n', '    }\n', '\n', '    address dex = paths[path_indexes[fpi]].dex;\n', '    IERC20(from).safeTransferFrom(msg.sender, address(this), amount);\n', '    IERC20(from).safeApprove(dex, amount);\n', '    if(target_token == weth){\n', '      SushiUniInterfaceERC20(dex).swapExactTokensForETHSupportingFeeOnTransferTokens(amount, min_amount, paths[path_indexes[fpi]].path, address(this), block.timestamp + 10800);\n', '      uint256 target_amount = address(this).balance;\n', '      require(target_amount >= min_amount, "slippage screwed you");\n', '      CFETHControllerInterfaceForEx(msg.sender).refundTarget.value(target_amount)();\n', '    }else{\n', '      SushiUniInterfaceERC20(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, min_amount, paths[path_indexes[fpi]].path, address(this), block.timestamp + 10800);\n', '      uint256 target_amount = IERC20(target_token).balanceOf(address(this));\n', '      require(target_amount >= min_amount, "slippage screwed you");\n', '      IERC20(target_token).safeApprove(address(msg.sender), target_amount);\n', '      CFControllerInterfaceForEx(msg.sender).refundTarget(target_amount);\n', '    }\n', '  }\n', '\n', '  function get_out_for_dex_path(uint pi, uint256 _amountIn) internal view returns(uint256) {\n', '    address dex = paths[path_indexes[pi]].dex;\n', '    uint256[] memory ret = SushiUniInterfaceERC20(dex).getAmountsOut(_amountIn, paths[path_indexes[pi]].path);\n', '    return ret[ret.length - 1];\n', '  }\n', '\n', '  event AddPath(bytes32 hash, address dex, address[] path);\n', '  function addPath(address dex, address[] memory path) public onlyOwner{\n', '    SushiUniInterfaceERC20(dex).getAmountsOut(1e18, path); //This is a double check \n', '    bytes32 hash = keccak256(abi.encodePacked(dex, path));\n', '    require(paths[hash].path.length == 0, "already exist path");\n', '    path_indexes.push(hash);\n', '    paths[hash].path = path;\n', '    paths[hash].dex = dex;\n', '    emit AddPath(hash, dex, path);\n', '  }\n', '\n', '  event RemovePath(bytes32 hash);\n', '  function removePath(address dex, address[] memory path) public onlyOwner{\n', '    bytes32 hash = keccak256(abi.encodePacked(dex, path));\n', '    removePathWithHash(hash);\n', '  }\n', '\n', '  function removePathWithHash(bytes32 hash) public onlyOwner{\n', '    require(paths[hash].path.length != 0, "path not exist");\n', '    delete paths[hash];\n', '    for(uint i = 0; i < path_indexes.length; i++){\n', '      if(path_indexes[i] == hash){\n', '          path_indexes[i] = path_indexes[path_indexes.length - 1];\n', '          delete path_indexes[path_indexes.length - 1];\n', '          path_indexes.length --;\n', '          emit RemovePath(hash);\n', '          break;\n', '      }\n', '    }\n', '  }\n', '\n', '  function() external payable{}\n', '}']