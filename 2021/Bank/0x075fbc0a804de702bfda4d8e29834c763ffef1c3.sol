['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-08\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.6;\n', '\n', 'library SafeMath\n', '{\n', '\n', '   function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       uint256 c = a + b;\n', '       require(c >= a, "SafeMath: addition overflow");\n', '       return c;\n', '   }\n', '\n', '   \n', '   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       return sub(a, b, "SafeMath: subtraction overflow");\n', '   }\n', '\n', '   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '       require(b <= a, errorMessage);\n', '       uint256 c = a - b;\n', '\n', '       return c;\n', '   }\n', '\n', '   \n', '   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "       // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "       // benefit is lost if 'b' is also tested.\n", '       // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '       if (a == 0) {\n', '           return 0;\n', '       }\n', '\n', '       uint256 c = a * b;\n', '       require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '       return c;\n', '   }\n', '\n', '\n', '   function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       return div(a, b, "SafeMath: division by zero");\n', '   }\n', '\n', '   \n', '   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '       require(b > 0, errorMessage);\n', '       uint256 c = a / b;\n', "       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '       return c;\n', '   }\n', '\n', '   \n', '   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       return mod(a, b, "SafeMath: modulo by zero");\n', '   }\n', '\n', '   \n', '   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '       require(b != 0, errorMessage);\n', '       return a % b;\n', '   }\n', '\n', '   function ceil(uint a, uint m) internal pure returns (uint r) {\n', '       return (a + m - 1) / m * m;\n', '   }\n', '\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Owned is Context\n', '{\n', '   modifier onlyOwner() virtual{\n', '       require(_msgSender()==owner);\n', '       _;\n', '   }\n', '   address payable owner;\n', '   address payable newOwner;\n', '   function changeOwner(address payable _newOwner) external onlyOwner {\n', '       require(_newOwner!=address(0));\n', '       newOwner = _newOwner;\n', '   }\n', '   function acceptOwnership() external {\n', '       if (_msgSender()==newOwner) {\n', '           owner = newOwner;\n', '       }\n', '   }\n', '}\n', '\n', 'interface ERC20 \n', '{\n', '   function balanceOf(address _owner) view external  returns (uint256 balance);\n', '   function transfer(address _to, uint256 _value) external  returns (bool success);\n', '   function transferFrom(address _from, address _to, uint256 _value) external  returns (bool success);\n', '   function approve(address _spender, uint256 _value) external returns (bool success);\n', '   function allowance(address _owner, address _spender) view external  returns (uint256 remaining);\n', '   event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'contract PIKA is Context,Owned,  ERC20 {\n', '    using SafeMath for uint256;\n', '    uint256 public _taxFee;\n', '    uint256 public totalSupply;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 private _taxFeepercent = 225;\n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    address public immutable uniswapV2Pair;\n', '    mapping (address => bool) private _isExcludedFromFee;\n', '    uint256 public ContractDeployed;\n', '    address oldPika = 0xE09fB60E8D6e7E1CEbBE821bD5c3FC67a40F86bF;\n', '    uint256 public oldPika_amount;\n', '    uint256 private minamountTakenOut = 1000000 *10**9 * 10 **9;  \n', '    uint256 private MinimumSupply = 100000000 *10**9 * 10**9;\n', '    \n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '\n', '    event TransferFee(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    function balanceOf(address _owner) view    public override  returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function transfer(address _to, uint256 _amount)  public override     returns (bool success) {\n', '        _transfer(_msgSender(), _to, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function transferFrom(address sender, address recipient, uint256 amount) public override  returns (bool success) {\n', '        \n', '        _transfer(sender, recipient, amount);\n', '        uint256 currentAllowance = allowed[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '\n', '        \n', '    }\n', '  \n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        if(_isExcludedFromFee[sender]  ||  _isExcludedFromFee[recipient])\n', '        {\n', '            uint256 senderBalance = balances[sender];\n', '            require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '            balances[sender] = senderBalance - amount;\n', '            balances[recipient] += amount;\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '        else\n', '        {\n', '            uint256 _Fee = calSwapToken(amount,_taxFeepercent);\n', '            _taxFee +=  _Fee;\n', '            if(_taxFee >= minamountTakenOut )\n', '            {\n', '                swapTokensForEth(_taxFee);\n', '            }\n', '            \n', '                uint256 senderBalance = balances[sender];\n', '                require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '                balances[sender] = senderBalance - amount;\n', '                balances[recipient] += amount-_Fee ;\n', '                emit Transfer(sender, recipient, amount-_Fee);\n', '            \n', '        }\n', '\n', '\n', '      \n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '  \n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        allowed[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public override  returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        \n', '        \n', '            require(account != address(0), "ERC20: burn from the zero address");\n', '            uint256 accountBalance = balances[account];\n', '            require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '            balances[account] = accountBalance - amount;\n', '            totalSupply -= amount;\n', '            emit Transfer(account, address(0), amount);\n', '        \n', '            \n', '        }\n', '    \n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            owner,\n', '            block.timestamp\n', '        );\n', '        \n', '        _taxFee =0;\n', '    }\n', '\n', '    function viewMinExtractAmt() public view returns(uint256){\n', '         return minamountTakenOut;\n', '     }    \n', '        \n', '    function setMinExtractAmt(uint256 _amount) public onlyOwner() {\n', '         minamountTakenOut = _amount;\n', '     }\n', '    \n', '    function viewFee() public view  returns(uint256){\n', '       return  _taxFeepercent ;\n', '    } \n', '    \n', '    function exchnagePika(uint256 tokens)external{\n', '            \n', '        require(tokens <= PIKA(address(this)).balanceOf(address(this)), "Not enough tokens in the reserve");\n', '        require(ERC20(oldPika).transferFrom(_msgSender(), address(this), tokens), "Tokens cannot be transferred from user account");      \n', '            \n', '\n', '               uint256 time = block.timestamp - ContractDeployed;\n', '               uint256 day = time.div(86400);\n', '               require(day <= 4, "Sorry Swaping Time Period is finished");\n', '\n', '                if(tokens < 10000000000 * 10**9 * 10**9)\n', '                {\n', '                    uint256 extra = calSwapToken(tokens,500);\n', '                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\n', '                }\n', '                \n', '                else if ( (tokens >= 10000000000 * 10**9 * 10**9)  &&  (tokens < 100000000000 * 10**9 * 10**9))\n', '                {\n', '                    uint256 extra = calSwapToken(tokens,250);\n', '                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\n', '                }\n', '                else if( tokens >= 100000000000 * 10**9 * 10**9 )\n', '                {\n', '                    uint256 extra = calSwapToken(tokens,100);\n', '                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\n', '                }\n', '                \n', '            \n', '            oldPika_amount = oldPika_amount.add(tokens);\n', '\n', '    }\n', '    \n', '    function extractOldPIKA() external onlyOwner(){\n', '            ERC20(oldPika).transfer(_msgSender(), oldPika_amount);\n', '            oldPika_amount = 0;\n', '        }\n', '        \n', '    function extractfee() external onlyOwner(){\n', '        PIKA(address(this)).transfer(_msgSender(), _taxFee);\n', '        _taxFee = 0;\n', '       }\n', '   \n', '    function calSwapToken(uint256 _tokens, uint256 cust) internal virtual returns (uint256) {\n', '        uint256 custPercentofTokens = _tokens.mul(cust).div(100 * 10**uint(2));\n', '        return custPercentofTokens;\n', '        }\n', '\n', '    function burn(uint256 value) public returns(bool flag) {\n', '     if(totalSupply >= MinimumSupply)         \n', '     {\n', '      _burn(_msgSender(), value);\n', '      return true;\n', '     } \n', '     else\n', '     return false;\n', '\n', '    }\n', '    \n', '    function viewMinSupply()public view  returns(uint256) {\n', '            return MinimumSupply;\n', '    }\n', '    \n', '    function changeMinSupply(uint256 newMinSupply)onlyOwner() public{\n', '            MinimumSupply = newMinSupply;\n', '    }\n', '    \n', '    function addLiquidity(uint256 tokenAmount) public payable onlyOwner() {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: msg.value}(\n', '            address(this),\n', '            tokenAmount,\n', '            0,\n', '            0, // slippage is unavoidable\n', '           owner,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    constructor() {\n', '       symbol = "PIKA";\n', '       name = "PIKA";\n', '       decimals = 18;\n', '       totalSupply = 50000000000000 * 10**9 * 10**9; //50 trillion\n', '        owner = _msgSender();\n', '       balances[owner] = totalSupply;\n', '       _isExcludedFromFee[owner] = true;\n', '       _isExcludedFromFee[address(this)] = true;\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '            .createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router = _uniswapV2Router;\n', '    ContractDeployed = block.timestamp;\n', '   }\n', '\n', '    receive () payable external {\n', '       require(msg.value>0);\n', '       owner.transfer(msg.value);\n', '   }\n', '    \n', '}']