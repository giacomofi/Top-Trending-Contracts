['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', 'contract AleToschiSwitchPriceDumper {\n', '\n', '    address private owner = msg.sender;\n', '\n', '    uint256 public immutable fromBlock;\n', '\n', '    uint256 public blockNumber;\n', '    mapping(address => uint256) public pricePerETH;\n', '\n', '    address[] private _tokenAddresses;\n', '    address[] private _liquidityPoolAddresses;\n', '\n', '    IAMM public amm;\n', '\n', '    event PriceDump(address indexed from, address indexed to, uint256 pricePerETH);\n', '\n', '    constructor(uint256 _fromBlock, address[] memory tokenAddresses, address[] memory liquidityPoolAddresses, address ammAddress) {\n', '        fromBlock = _fromBlock;\n', '        _tokenAddresses = tokenAddresses;\n', '        _liquidityPoolAddresses = liquidityPoolAddresses;\n', '        amm = IAMM(ammAddress);\n', '    }\n', '\n', '    receive() external payable {\n', '        _ensureTime();\n', '    }\n', '\n', '    function addresses() external view returns(address[] memory tokenAddresses, address[] memory liquidityPoolAddresses) {\n', '        return (tokenAddresses = _tokenAddresses, liquidityPoolAddresses = _liquidityPoolAddresses);\n', '    }\n', '\n', '    function _ensureTime() private view {\n', '        require(blockNumber == 0, "Already dumped BRO");\n', '        require(block.number >= fromBlock, "Too early to dump BRO");\n', '    }\n', '\n', '    function dump() external {\n', '        _ensureTime();\n', '        require(msg.sender == owner, "Unauthorized");\n', '        (address ethereumAddress,,) = amm.data();\n', '\n', '        address[] memory path = new address[](1);\n', '        path[0] = ethereumAddress;\n', '\n', '        SwapData memory data = SwapData({\n', '            enterInETH : false,\n', '            exitInETH : true,\n', '            liquidityPoolAddresses : new address[](1),\n', '            path : path,\n', '            inputToken : address(0),\n', '            amount : 0,\n', '            receiver : address(this)\n', '        });\n', '\n', '        for(uint256 i = 0; i < _tokenAddresses.length; i++) {\n', '            uint256 unity = 1 * (10**IERC20(_tokenAddresses[i]).decimals());\n', '            IERC20(_tokenAddresses[i]).approve(address(amm), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n', '            data.inputToken = _tokenAddresses[i];\n', '            data.amount = unity;\n', '            data.liquidityPoolAddresses[0] = _liquidityPoolAddresses[i];\n', '            emit PriceDump(_tokenAddresses[i], ethereumAddress, pricePerETH[_tokenAddresses[i]] = amm.swapLiquidity(data));\n', '        }\n', '        blockNumber = block.number;\n', '        owner.call{value : address(this).balance}("");\n', '    }\n', '}\n', '\n', 'struct SwapData {\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '    address[] liquidityPoolAddresses;\n', '    address[] path;\n', '    address inputToken;\n', '    uint256 amount;\n', '    address receiver;\n', '}\n', '\n', 'interface IAMM {\n', '    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\n', '    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\n', '}\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns(uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}']