['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-10\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/weth/IWETH.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '    function withdraw(uint wad) external;\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Router01.sol\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Router02.sol\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/kaya/ISmartPool.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface ISmartPool{\n', '\n', '    function joinPool(uint256 amount) external;\n', '\n', '    function exitPool(uint256 amount) external;\n', '\n', '    function transferCash(address to,uint256 amount)external;\n', '\n', '    function token()external view returns(address);\n', '\n', '    function assets()external view returns(uint256);\n', '}\n', '\n', '// File: contracts/interfaces/kaya/IController.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface IController {\n', '\n', '    function invest(address _vault, uint256 _amount) external;\n', '\n', '    function exec(\n', '        address _strategy,\n', '        bool _useToken,\n', '        uint256 _useAmount,\n', '        string memory _signature,\n', '        bytes memory _data) external;\n', '\n', '    function harvest(uint256 _amount) external;\n', '\n', '    function harvestAll(address _vault)external;\n', '\n', '    function harvestOfUnderlying(address to,uint256 _scale)external;\n', '\n', '    function extractableUnderlyingNumber(uint256 _scale)external view returns(uint256[] memory);\n', '\n', '    function assets() external view returns (uint256);\n', '\n', '    function vaults(address _strategy) external view returns(address);\n', '\n', '    function strategies(address _vault) external view returns(address);\n', '\n', '    function inRegister(address _contract) external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Pair.sol\n', '\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/libraries/UniswapV2ExpandLibrary.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'library UniswapV2ExpandLibrary{\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address constant internal factory=address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0,address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    function pairFor(address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    function getReserves(address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    function quote(uint amountA,uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    function getAmountIn(address inputToken,address outputToken,uint256 amountOut)internal view returns(uint256 amountIn){\n', '        (uint reserveIn, uint reserveOut) = getReserves(inputToken, outputToken);\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    function getAmountOut(address inputToken,address outputToken,uint256 amountIn)internal view returns(uint256 amountOut){\n', '        (uint reserveIn, uint reserveOut) = getReserves(inputToken, outputToken);\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    function getAmountsOut(uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            amounts[i + 1] = getAmountOut(path[i], path[i + 1],amounts[i]);\n', '        }\n', '    }\n', '\n', '    function getAmountsIn(uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            amounts[i - 1] = getAmountIn(path[i - 1], path[i],amounts[i]);\n', '        }\n', '    }\n', '\n', '    function calcLiquidityToTokens(address tokenA,address tokenB,uint256 liquidity) internal view returns (uint256 amountA, uint256 amountB) {\n', '        if(liquidity==0){\n', '            return (0,0);\n', '        }\n', '        address pair=pairFor(tokenA,tokenB);\n', '        uint256 balanceA = IERC20(tokenA).balanceOf(address(pair));\n', '        uint256 balanceB = IERC20(tokenB).balanceOf(address(pair));\n', '        uint256 totalSupply=IERC20(pair).totalSupply();\n', '        amountA = liquidity.mul(balanceA).div(totalSupply);\n', '        amountB = liquidity.mul(balanceB).div(totalSupply);\n', '        return(amountA,amountB);\n', '    }\n', '\n', '    function tokens(address _pair)internal view returns(address,address){\n', '        IUniswapV2Pair pair=IUniswapV2Pair(_pair);\n', '        return (pair.token0(),pair.token1());\n', '    }\n', '\n', '    function liquidityBalance(address _pair,address _owner)internal view returns(uint256){\n', '        return IUniswapV2Pair(_pair).balanceOf(_owner);\n', '    }\n', '\n', '    function calcLiquiditySwapToToken(address _pair,address _target,address bridgeToken,uint256 liquidity) internal view returns (uint256) {\n', '        if(liquidity==0){\n', '            return 0;\n', '        }\n', '        IUniswapV2Pair pair=IUniswapV2Pair(_pair);\n', '        (address tokenA,address tokenB)=(pair.token0(),pair.token1());\n', '        (uint256 amountA,uint256 amountB)=calcLiquidityToTokens(tokenA,tokenB,liquidity);\n', '        if(tokenA!=bridgeToken&&tokenA!=_target){\n', '            amountA=getAmountOut(tokenA,bridgeToken,amountA);\n', '        }\n', '        if(tokenB!=bridgeToken&&tokenB!=_target){\n', '            amountB=getAmountOut(tokenB,bridgeToken,amountB);\n', '        }\n', '        uint256 tokenAOut=getAmountOut(bridgeToken,_target,amountA);\n', '        uint256 tokenBOut=getAmountOut(bridgeToken,_target,amountB);\n', '        return tokenAOut.add(tokenBOut);\n', '    }\n', '\n', '    function swap(address to,address inputToken,address outputToken,uint256 amountIn,uint256 amountOut) internal{\n', '        IUniswapV2Pair pair=IUniswapV2Pair(pairFor(inputToken,outputToken));\n', '        IERC20(inputToken).safeTransfer(address(pair), amountIn);\n', '        (address token0,) = sortTokens(inputToken, outputToken);\n', '        (uint amount0Out, uint amount1Out) = inputToken == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '        pair.swap(amount0Out,amount1Out, to, new bytes(0));\n', '    }\n', '\n', '    function swapExactIn(address to,address inputToken,address outputToken, uint256 amountIn) internal returns(uint256 amountOut){\n', '        amountOut=amountIn;\n', '        if (amountIn > 0 && inputToken != outputToken) {\n', '            amountOut = getAmountOut(inputToken, outputToken, amountIn);\n', '            swap(to, inputToken, outputToken, amountIn, amountOut);\n', '        }\n', '    }\n', '\n', '    function swapExactOut(address to,address inputToken,address outputToken,uint256 amountOut) internal returns(uint256 amountIn){\n', '        amountIn=amountOut;\n', '        if (amountOut > 0 && inputToken != outputToken) {\n', '            amountIn = getAmountIn(inputToken, outputToken, amountOut);\n', '            swap(to, inputToken, outputToken, amountIn, amountOut);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/libraries/MathExpandLibrary.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// a library for performing various math operations\n', '\n', 'library MathExpandLibrary {\n', '\n', '    uint256 internal constant BONE = 10**18;\n', '\n', '    // Add two numbers together checking for overflows\n', '    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // subtract two numbers and return diffecerence when it underflows\n', '    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    // Subtract two numbers checking for underflows\n', '    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        (uint256 c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // Multiply two 18 decimals numbers\n', '    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint256 c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint256 c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    // Divide two 18 decimals numbers\n', '    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint256 c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint256 c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint256 c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/EnumerableExpandSet.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableExpandSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '\n', '    function _index(Set storage set, bytes32 value) private view returns (uint256) {\n', '        return set._indexes[value];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '    function indexs(AddressSet storage set, address value) internal view returns (uint256) {\n', '        return _index(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '\n', '    function indexs(UintSet storage set, uint256 value) internal view returns (uint256) {\n', '        return _index(set._inner, bytes32(value));\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/ERC20Helper.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'library ERC20Helper{\n', '\n', '    using SafeERC20 for IERC20;\n', '\n', '    function safeApprove(address _token,address _to,uint256 _amount)internal{\n', '        IERC20 token=IERC20(_token);\n', '        uint256 allowance= token.allowance(address(this),_to);\n', '        if(allowance<_amount){\n', '            if(allowance>0){\n', '                token.safeApprove(_to,0);\n', '            }\n', '            token.safeApprove(_to,_amount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/storage/GovIdentityStorage.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library GovIdentityStorage {\n', '\n', '  bytes32 public constant govSlot = keccak256("GovIdentityStorage.storage.location");\n', '\n', '  struct Identity{\n', '    address governance;\n', '    address strategist;\n', '    address rewards;\n', '  }\n', '\n', '  function load() internal pure returns (Identity storage gov) {\n', '    bytes32 loc = govSlot;\n', '    assembly {\n', '      gov_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/GovIdentity.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract GovIdentity {\n', '\n', '    constructor() public {\n', '        _build();\n', '    }\n', '\n', '    function _build() internal{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = msg.sender;\n', '        identity.strategist = msg.sender;\n', '        identity.rewards = msg.sender;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.strategist, "GovIdentity.onlyStrategist: !strategist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategistOrGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.strategist || msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance and !strategist");\n', '        _;\n', '    }\n', '\n', '    function setRewards(address _rewards) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.rewards = _rewards;\n', '    }\n', '\n', '    function setStrategist(address _strategist) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = _governance;\n', '    }\n', '\n', '    function getRewards() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.rewards ;\n', '    }\n', '\n', '    function getStrategist() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.strategist;\n', '    }\n', '\n', '    function getGovernance() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.governance;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/strategies/UniDynamicLiquidityStrategy.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract UniDynamicLiquidityStrategy is GovIdentity {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using MathExpandLibrary for uint256;\n', '    using SafeMath for uint256;\n', '    using EnumerableExpandSet for EnumerableExpandSet.AddressSet;\n', '\n', '    IController public controller;\n', '    IUniswapV2Router02 constant public route=IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    EnumerableExpandSet.AddressSet private _tokens;\n', '    EnumerableExpandSet.AddressSet private _pools;\n', '\n', '    event AddLiquidity(address indexed from,address indexed pool,uint256 liquidity);\n', '    event RemoveLiquidity(address indexed from,address indexed pool,uint256 liquidity);\n', '\n', '    constructor(address _controller)\n', '    public {\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    modifier onlyAuthorize() {\n', '        require(msg.sender == getGovernance()\n', '        ||msg.sender==getStrategist()\n', '        ||msg.sender==address(controller), "Strategy.onlyAuthorize: !authorize");\n', '        _;\n', '    }\n', '\n', '    receive() external payable {\n', '\n', '    }\n', '\n', '    function init()external{\n', '\n', '    }\n', '\n', '    function _vaultInfo() internal view returns (address, address){\n', '        address _vault = controller.vaults(address(this));\n', '        address _token = ISmartPool(_vault).token();\n', '        return (_vault, _token);\n', '    }\n', '\n', '    function pools()public view returns(address[] memory ps){\n', '        uint256 length=_pools.length();\n', '        ps=new address[](length);\n', '        for(uint256 i=0;i<length;i++){\n', '            ps[i]=_pools.at(i);\n', '        }\n', '    }\n', '\n', '    function _updatePools(address _pool)internal{\n', '        bool isNeedPool=IERC20(_pool).balanceOf(address(this))>0?true:false;\n', '        if(!_pools.contains(_pool)&&isNeedPool){\n', '            _pools.add(_pool);\n', '        }else if(_pools.contains(_pool)&&!isNeedPool){\n', '            _pools.remove(_pool);\n', '        }\n', '    }\n', '\n', '    function setUnderlyingTokens(address[] memory _ts)public onlyAuthorize{\n', '        for(uint256 i=0;i<_ts.length;i++){\n', '            if(!_tokens.contains(_ts[i])){\n', '                _tokens.add(_ts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function removeUnderlyingTokens(address[] memory _ts)public onlyAuthorize{\n', '        for(uint256 i=0;i<_ts.length;i++){\n', '            if(_tokens.contains(_ts[i])){\n', '                _tokens.remove(_ts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addLiquidity(address _pool,uint256 liquidityExpect,uint256 amount0,uint256 amount1)public onlyAuthorize{\n', "        require(amount0>0&&amount1>0,'Strategy.addLiquidity: Must be greater than 0 amount');\n", '        (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\n', '        ERC20Helper.safeApprove(token0,address(route),amount0);\n', '        ERC20Helper.safeApprove(token1,address(route),amount1);\n', '        (,,uint256 liquidityActual)=route.addLiquidity(token0,token1,amount0,amount1,0,0,address(this),block.timestamp);\n', "        require(liquidityActual>=liquidityExpect,'Strategy.addLiquidity: Actual quantity is less than the expected quantity');\n", '        _updatePools(_pool);\n', '        emit AddLiquidity(msg.sender,_pool,liquidityActual);\n', '    }\n', '\n', '    function removeLiquidity(address _pool,uint256 liquidity)public onlyAuthorize{\n', "        require(liquidity>0,'Strategy.removeLiquidity: Must be greater than 0 liquidity');\n", '        _removeLiquidity(_pool,liquidity,address(this));\n', '        emit RemoveLiquidity(msg.sender,_pool,liquidity);\n', '    }\n', '\n', '    function _removeLiquidity(address _pool,uint256 liquidity,address _to)internal returns(uint256 amount0,uint256 amount1){\n', '        if(liquidity>0){\n', '            ERC20Helper.safeApprove(_pool,address(route),liquidity);\n', '            (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\n', '            (amount0,amount1)=UniswapV2ExpandLibrary.calcLiquidityToTokens(token0,token1,liquidity);\n', '            (amount0,amount1)=route.removeLiquidity(token0,token1,liquidity,amount0,amount1,_to,block.timestamp);\n', '            _updatePools(_pool);\n', '        }\n', '    }\n', '\n', '    function swapExactInByUni(address inputToken,address outputToken, uint256 amountIn)public onlyAuthorize returns(uint256 amountOut){\n', '        if(inputToken==WETH||outputToken==WETH){\n', '            return UniswapV2ExpandLibrary.swapExactIn(address(this),inputToken,outputToken,amountIn);\n', '        }else{\n', '            uint256 wethOut=UniswapV2ExpandLibrary.swapExactIn(address(this),inputToken,WETH,amountIn);\n', '            return UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,outputToken,wethOut);\n', '        }\n', '    }\n', '\n', '    function swapExactOutByUni(address inputToken,address outputToken, uint256 amountOut)public onlyAuthorize returns(uint256 amountIn){\n', '        if(inputToken==WETH||outputToken==WETH){\n', '            return UniswapV2ExpandLibrary.swapExactOut(address(this),inputToken,outputToken,amountOut);\n', '        }else{\n', '            uint256 wethIn=UniswapV2ExpandLibrary.getAmountIn(WETH,outputToken,amountOut);\n', '            if(IERC20(WETH).balanceOf(address(this))<wethIn){\n', '                UniswapV2ExpandLibrary.swapExactOut(address(this),inputToken,WETH,wethIn);\n', '            }\n', '            return UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,outputToken,wethIn);\n', '        }\n', '    }\n', '\n', '    function ethToWeth(uint256 amountIn)public onlyAuthorize{\n', '        IWETH(WETH).deposit{value: amountIn}();\n', '    }\n', '\n', '\n', '    function deposit(uint256 _amount) external {\n', "        require(msg.sender == address(controller), 'Strategy.deposit: !controller');\n", '        (,address _vaultToken) = _vaultInfo();\n', "        require(_amount > 0, 'Strategy.deposit: token balance is zero');\n", '        IERC20 tokenContract = IERC20(_vaultToken);\n', "        require(tokenContract.balanceOf(msg.sender) >= _amount, 'Strategy.deposit: Insufficient balance');\n", '        tokenContract.safeTransferFrom(msg.sender, address(this), _amount);\n', '        if(!_tokens.contains(_vaultToken)){\n', '            _tokens.add(_vaultToken);\n', '        }\n', '    }\n', '\n', '    function withdraw(uint256 _amount) external {\n', "        require(msg.sender == address(controller), 'Strategy.withdraw: !controller');\n", "        require(_amount > 0, 'Strategy.withdraw: Must be greater than 0 amount');\n", "        require(_amount <= assets(), 'Strategy.withdraw: Must be less than assets');\n", '        (address _vault,address _vaultToken) = _vaultInfo();\n', '        IERC20 tokenContract=IERC20(_vaultToken);\n', '        uint256 cashAmount=tokenContract.balanceOf(address(this));\n', '        if(cashAmount<_amount){\n', '            uint256 scale=_amount.bdiv(assets());\n', '            uint256[] memory underlyingNumbers=_withdrawOfUnderlying(scale);\n', '            uint256 wethAmountOut;\n', '            for(uint256 i=0;i<_tokens.length();i++){\n', '                address token=_tokens.at(i);\n', '                if(token==WETH){\n', '                    wethAmountOut=wethAmountOut.add(underlyingNumbers[i]);\n', '                }else if(token!=_vaultToken&&underlyingNumbers[i]>0){\n', '                    wethAmountOut=wethAmountOut.add(UniswapV2ExpandLibrary.swapExactIn(address(this),token,WETH,underlyingNumbers[i]));\n', '                }\n', '            }\n', '            UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,_vaultToken,wethAmountOut);\n', '        }\n', '        cashAmount=tokenContract.balanceOf(address(this));\n', '        if(cashAmount<_amount){\n', '            _amount=cashAmount;\n', '        }\n', '        tokenContract.safeTransfer(_vault,_amount);\n', '    }\n', '\n', '    function withdrawOfUnderlying(address payable _to,uint256 _scale)external{\n', "        require(msg.sender == address(controller), 'Strategy.withdrawOfUnderlying: !controller');\n", "        require(_scale > 0, 'Strategy.withdrawOfUnderlying: Must be greater than 0');\n", '        uint256[] memory underlyingNumbers= _withdrawOfUnderlying(_scale);\n', '        for(uint256 i=0;i<underlyingNumbers.length;i++){\n', '            if(underlyingNumbers[i]>0){\n', '                IERC20(_tokens.at(i)).safeTransfer(_to,underlyingNumbers[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _withdrawOfUnderlying(uint256 _scale)internal returns(uint256[] memory underlyingNumbers){\n', '        underlyingNumbers=new uint256[](_tokens.length());\n', '        for(uint256 i=0;i<_tokens.length();i++){\n', '            uint256 bal=IERC20(_tokens.at(i)).balanceOf(address(this));\n', '            underlyingNumbers[i]=bal.mul(_scale).div(1e18);\n', '        }\n', '        for(uint256 i=_pools.length();i>0;i--){\n', '            address pool=_pools.at(i.sub(1));\n', '            uint256 liquidityBalance=UniswapV2ExpandLibrary.liquidityBalance(pool,address(this));\n', '            uint256 liquidity=liquidityBalance.mul(_scale).div(1e18);\n', '            if(liquidity>0){\n', '                (uint256 amount0,uint256 amount1)=_removeLiquidity(pool,liquidity,address(this));\n', '                (address token0,address token1)=UniswapV2ExpandLibrary.tokens(pool);\n', '                uint256 token0Index= _tokens.indexs(token0).sub(1);\n', '                uint256 token1Index= _tokens.indexs(token1).sub(1);\n', '                underlyingNumbers[token0Index]=amount0.add(underlyingNumbers[token0Index]);\n', '                underlyingNumbers[token1Index]=amount1.add(underlyingNumbers[token1Index]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdraw(address _token) external onlyGovernance returns (uint256 balance){\n', '        IERC20 token=IERC20(_token);\n', '        balance = token.balanceOf(address(this));\n', '        if (balance > 0) {\n', '            token.safeTransfer(msg.sender, balance);\n', '        }\n', '    }\n', '\n', '    function withdrawAll() external {\n', "        require(msg.sender == address(controller), 'Strategy.withdrawAll: !controller');\n", '        for(uint256 i=_pools.length();i>0;i--){\n', '            address pool=_pools.at(i.sub(1));\n', '            uint256 liquidity=UniswapV2ExpandLibrary.liquidityBalance(pool,address(this));\n', '            _removeLiquidity(pool,liquidity,address(this));\n', '        }\n', '        (address _vault,address _vaultToken) = _vaultInfo();\n', '        for(uint256 j=0;j<_tokens.length();j++){\n', '            address token=_tokens.at(j);\n', '            uint256 bal=IERC20(token).balanceOf(address(this));\n', '            if(token!=_vaultToken&&token!=WETH&&bal>0){\n', '               UniswapV2ExpandLibrary.swapExactIn(address(this),token,WETH,bal);\n', '            }\n', '        }\n', '        uint256 amountIn = IERC20(WETH).balanceOf(address(this));\n', '        UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,_vaultToken,amountIn);\n', '        IERC20 vaultToken=IERC20(_vaultToken);\n', '        vaultToken.safeTransfer(_vault, vaultToken.balanceOf(address(this)));\n', '    }\n', '\n', '    function extractableUnderlyingNumber(uint256 _scale)public view returns(uint256[] memory tokenNumbers){\n', '        uint256[] memory tokenTotalNumbers=getTokenNumbers();\n', '        tokenNumbers=new uint256[](tokenTotalNumbers.length);\n', '        for(uint256 i=0;i<tokenTotalNumbers.length;i++){\n', '            if(tokenTotalNumbers[i]>0){\n', '                tokenNumbers[i]=tokenTotalNumbers[i].mul(_scale).div(1e18);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTokenNumbers()public view returns(uint256[] memory amounts){\n', '        amounts=new uint256[](_tokens.length());\n', '        for(uint256 i=_pools.length();i>0;i--){\n', '            address pool=_pools.at(i.sub(1));\n', '            (address token0,address token1)=UniswapV2ExpandLibrary.tokens(pool);\n', '            (uint256 amount0,uint256 amount1)=liquidityTokenOut(pool);\n', '            uint256 token0Index= _tokens.indexs(token0).sub(1);\n', '            uint256 token1Index= _tokens.indexs(token1).sub(1);\n', '            amounts[token0Index]=amount0.add(amounts[token0Index]);\n', '            amounts[token1Index]=amount1.add(amounts[token1Index]);\n', '        }\n', '        for(uint256 i=0;i<_tokens.length();i++){\n', '            amounts[i]=amounts[i].add(IERC20(_tokens.at(i)).balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    function getTokens()public view returns(address[] memory ts){\n', '        uint256 length=_tokens.length();\n', '        ts=new address[](length);\n', '        for(uint256 i=0;i<length;i++){\n', '            ts[i]=_tokens.at(i);\n', '        }\n', '    }\n', '\n', '    function getWeights()public view returns(uint256[] memory ws){\n', '        uint256 assets=assets();\n', '        (,address _vaultToken) = _vaultInfo();\n', '        ws=new uint256[](_tokens.length());\n', '        uint256[] memory tokenNumbers=getTokenNumbers();\n', '        for(uint256 i=0;i<_tokens.length();i++){\n', '            uint256 ta=tokenValueByIn(_tokens.at(i),_vaultToken,tokenNumbers[i]);\n', '            if(assets!=0){\n', '                ws[i]=ta.bdiv(assets).mul(100);\n', '            }\n', '        }\n', '    }\n', '\n', '    function assets() public view returns (uint256){\n', '        (,address _vaultToken) = _vaultInfo();\n', '        uint256 total=0;\n', '        uint256[] memory tokenNumbers=getTokenNumbers();\n', '        for(uint256 i=0;i<_tokens.length();i++){\n', '            uint256 ta=tokenValueByIn(_tokens.at(i),_vaultToken,tokenNumbers[i]);\n', '            total=total.add(ta);\n', '        }\n', '        return total;\n', '    }\n', '\n', '    function available() public view returns (uint256){\n', '        (,address _vaultToken) = _vaultInfo();\n', '        uint256 total=0;\n', '        uint256 wethBal=0;\n', '        for(uint256 i=0;i<_tokens.length();i++){\n', '            address token=_tokens.at(i);\n', '            uint256 bal=IERC20(token).balanceOf(address(this));\n', '            if(token==WETH){\n', '                wethBal=wethBal.add(bal);\n', '            }else if(token!=_vaultToken&&bal>0){\n', '                wethBal=wethBal.add(UniswapV2ExpandLibrary.getAmountOut(token,WETH,bal));\n', '            }\n', '        }\n', '        if(wethBal>0){\n', '            total=total.add(UniswapV2ExpandLibrary.getAmountOut(WETH,_vaultToken,wethBal));\n', '        }\n', '        total=total.add(IERC20(_vaultToken).balanceOf(address(this)));\n', '        return total;\n', '    }\n', '\n', '    function tokenValueByIn(address _fromToken,address _toToken,uint256 _amount)public view returns (uint256){\n', '        if(_amount==0)return _amount;\n', '        if(_fromToken==_toToken){\n', '            return _amount;\n', '        }else if(_fromToken==WETH){\n', '            return UniswapV2ExpandLibrary.getAmountOut(_fromToken,_toToken,_amount);\n', '        }else{\n', '            uint256 wethAmount=UniswapV2ExpandLibrary.getAmountOut(_fromToken,WETH,_amount);\n', '            return UniswapV2ExpandLibrary.getAmountOut(WETH,_toToken,wethAmount);\n', '        }\n', '    }\n', '\n', '    function tokenValueByOut(address _fromToken,address _toToken,uint256 _amount)public view returns (uint256){\n', '        if(_amount==0)return _amount;\n', '        if(_fromToken==_toToken){\n', '            return _amount;\n', '        }else if(_fromToken==WETH){\n', '            return UniswapV2ExpandLibrary.getAmountIn(_fromToken,_toToken,_amount);\n', '        }else{\n', '            uint256 wethOut=UniswapV2ExpandLibrary.getAmountIn(_fromToken,WETH,_amount);\n', '            return UniswapV2ExpandLibrary.getAmountIn(_fromToken,WETH,wethOut);\n', '        }\n', '    }\n', '\n', '\n', '    function liquidityTokenOut(address _pool) public view returns (uint256,uint256){\n', '        (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\n', '        uint256 liquidity=UniswapV2ExpandLibrary.liquidityBalance(_pool,address(this));\n', '        return UniswapV2ExpandLibrary.calcLiquidityToTokens(token0,token1,liquidity);\n', '    }\n', '}']