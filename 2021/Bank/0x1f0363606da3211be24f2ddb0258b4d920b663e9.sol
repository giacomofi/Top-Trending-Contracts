['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', 'pragma solidity ^0.8.2;\n', '//SPDX-License-Identifier: MIT\n', '\n', '/*\n', '* LeoBridge: Swap ERC20 <--> BEP20\n', '*\n', '* @fbslo, 2021\n', '*/\n', '\n', 'contract LeoBridge {\n', '    address payable public owner;\n', '    address public leo;\n', '    string public hiveAccount;\n', '    \n', '    address public router; //UNSIWAP ROUTER\n', '    IUniswapV2Router02 uniswapRouter;\n', '    \n', '    event Entry(address _inputToken, uint256 _inputAmount, uint256 _minAmountOut, uint256 outputAmount, address _recepient);\n', '    event Exit(address _exitToken, uint256 _inputAmount, uint256 _outputAmount, address recepient);\n', '    \n', '    modifier ownerOnly {\n', "        require(msg.sender == owner, 'Restricted to owner');\n", '        _;\n', '    }\n', '\n', '    constructor(address _router, address _leo, string memory _hiveAccount) {\n', '        router = _router;\n', '        owner = payable(msg.sender);\n', '        leo = _leo;\n', '        hiveAccount = _hiveAccount;\n', '        uniswapRouter = IUniswapV2Router02(_router);\n', '    }\n', '\n', '    function entrance(address _inputToken, uint256 _inputAmount, uint256 _minAmountOut, address[] calldata _path, address _recepient) public {\n', "        require(_path[_path.length - 1] == leo, 'Trade must end with LEO');\n", '        \n', '        //You need to approve this contract to spend input tokens\n', '        ERC20(_inputToken).transferFrom(msg.sender, address(this), _inputAmount);\n', '        \n', '        //Swap input token on uniswap for LEO\n', '        ERC20(_inputToken).approve(address(router), _inputAmount);\n', '        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_inputAmount, _minAmountOut, _path, address(this), block.timestamp + 15);\n', '        \n', '        //Unwrap LEO\n', '        ERC20(leo).approve(address(leo), amounts[amounts.length - 1]);\n', '        ERC20(leo).convertTokenWithTransfer(amounts[amounts.length - 1], hiveAccount); \n', '        \n', '        emit Entry(_inputToken, _inputAmount, _minAmountOut, amounts[amounts.length - 1], _recepient);\n', '    }\n', '\n', '    function exit(address _exitToken, uint256 _inputAmount, uint256 _minAmountOut, address[] calldata _path, address _recepient) public {\n', "        require(_path[0] == leo, 'Trade must start with LEO');\n", '          \n', '        //You need to approve this contract to spend LEO tokens\n', '        ERC20(leo).transferFrom(msg.sender, address(this), _inputAmount);\n', '        \n', '        //Swap input token on uniswap for LEO\n', '        ERC20(leo).approve(address(router), _inputAmount);\n', '        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_inputAmount, _minAmountOut, _path, _recepient, block.timestamp + 15);\n', '        \n', '        emit Exit(_exitToken, _inputAmount, amounts[amounts.length - 1], _recepient);\n', '    }\n', '    \n', '    //contract is stateless, so no tokens/ETH/BNB should ever be here.\n', '    function rescue(address _token, uint256 _amount, bool _isETH) public ownerOnly {\n', '        if (_isETH){\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            ERC20(_token).transfer(owner, _amount);\n', '        }\n', '    }\n', '}\n', '\n', 'interface ERC20 {\n', '    function balanceOf(address _owner) external returns (uint256);\n', '    function transfer(address _to, uint _value) external;\n', '    function transferFrom(address _from, address _to, uint _value) external;\n', '    function approve(address _spender, uint _value) external;\n', '    function convertTokenWithTransfer(uint256 amount, string memory username) external;\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}']