['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'interface IOracle {\n', '    function getPriceUsdcRecommended(address tokenAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IVault {\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract CalculationsYearnVaults {\n', '    address public oracleAddress;\n', '    IOracle private oracle;\n', '\n', '    constructor(address _oracleAddress) {\n', '        oracleAddress = _oracleAddress;\n', '        oracle = IOracle(_oracleAddress);\n', '    }\n', '\n', '    function isYearnV1Vault(address tokenAddress) public view returns (bool) {\n', '        IVault vault = IVault(tokenAddress);\n', '        try vault.getPricePerFullShare() returns (uint256 pricePerShare) {\n', '            return true;\n', '        } catch {}\n', '        return false;\n', '    }\n', '\n', '    function isYearnV2Vault(address tokenAddress) public view returns (bool) {\n', '        IVault vault = IVault(tokenAddress);\n', '        try vault.pricePerShare() returns (uint256 pricePerShare) {\n', '            return true;\n', '        } catch {}\n', '        return false;\n', '    }\n', '\n', '    function isYearnVault(address tokenAddress) public view returns (bool) {\n', '        return isYearnV1Vault(tokenAddress) || isYearnV2Vault(tokenAddress);\n', '    }\n', '\n', '    function getPriceYearnVault(address tokenAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // v1 vaults use getPricePerFullShare scaled to 18 decimals\n', '        // v2 vaults use pricePerShare scaled to underlying token decimals\n', '        IVault vault = IVault(tokenAddress);\n', '        if (isYearnVault(tokenAddress) == false) {\n', '            revert("CalculationsYearnVaults: Token is not a yearn vault");\n', '        }\n', '        address underlyingTokenAddress = vault.token();\n', '        uint256 underlyingTokenPrice =\n', '            oracle.getPriceUsdcRecommended(underlyingTokenAddress);\n', '        if (isYearnV1Vault(tokenAddress)) {\n', '            uint256 sharePrice = vault.getPricePerFullShare();\n', '            return (underlyingTokenPrice * sharePrice) / 10**18;\n', '        } else if (isYearnV2Vault(tokenAddress)) {\n', '            uint256 sharePrice = vault.pricePerShare();\n', '            uint8 tokenDecimals = IERC20(underlyingTokenAddress).decimals();\n', '            return (underlyingTokenPrice * sharePrice) / 10**tokenDecimals;\n', '        }\n', '        revert();\n', '    }\n', '\n', '    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\n', '        return getPriceYearnVault(tokenAddress);\n', '    }\n', '}']