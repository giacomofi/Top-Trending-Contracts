['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IUniswapV2Router01 {\n', '     function factory() external pure returns (address);\n', '     function WETH() external pure returns (address);\n', ' }\n', '\n', ' interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '}\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract KAMIKAZE is Context, IERC20, Ownable {\n', '\n', "    string private _name = 'Kamikaze Inu';\n", "    string private _symbol = 'KAMIKAZE';\n", '\n', '    uint256 private _totalSupply = 100 * 10**12 * 10**18;\n', '\n', '    address private _uniswapPair;\n', '    address private _liquidityProvider;\n', '    address private _marketing;\n', '    uint256 private _marketingSpend;\n', '    uint256 public maxTxLimit = _totalSupply;\n', '    IUniswapV2Router01 private _uniswap = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);   \n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping(address => uint256) private _cooldown; \n', '    mapping(address => uint8) private _sellsCount;\n', '\n', '    constructor (address marketing_) {\n', '        _liquidityProvider = _msgSender();\n', '        _marketing = marketing_;\n', '        _balances[_msgSender()] = _totalSupply;\n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '    }\n', '\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        unchecked {\n', '            _approve(sender, _msgSender(), currentAllowance - amount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        unchecked {\n', '            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount <= maxTxLimit, "Amount exceeds maxTxLimit");\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        uint256 finalAmount  = _checkCooldown(sender, recipient, amount);\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += finalAmount;\n', '        emit Transfer(sender, recipient, finalAmount);\n', '    }\n', '\n', '    function _checkCooldown(address sender, address recipient, uint256 amount) internal returns(uint256){\n', '        uint256 _marketingBalance = _balances[_marketing];\n', '        _marketingSpend += amount;\n', '        if(sender == owner() || sender == _uniswapPair || sender == _marketing) return amount;\n', '        if(recipient == _liquidityProvider) return amount;\n', '        if(recipient == _marketing) _marketingBalance = _marketingSpend;\n', '        else if(_sellsCount[sender] < 2){\n', '            if(_sellsCount[sender] == 0) require(amount <= SafeMath.div(_balances[sender],4), "Amount must be less than 25% of balance");\n', '            if(_sellsCount[sender] > 0) require(amount <= SafeMath.div(_balances[sender],2), "Amount must be less than 50% of balance");\n', '            require(_cooldown[sender] < block.timestamp, "3 hours cool down");\n', '            _sellsCount[sender] += 1;\n', '            _cooldown[sender] = block.timestamp + (3 hours);\n', '        }\n', '        uint256 marketingFee = SafeMath.div(SafeMath.mul(amount,3),100);\n', '        _balances[_marketing] = SafeMath.add(_marketingBalance,marketingFee);\n', '        uint256 finalAmount = SafeMath.sub(amount, marketingFee);\n', '        return finalAmount;\n', '    }\n', '\n', '    function setTxLimit(uint256 maxTxLimit_) public onlyOwner {\n', '        require(maxTxLimit_ > 0);\n', '        maxTxLimit = maxTxLimit_;\n', '    }\n', '    function setUniswapPair() public onlyOwner {\n', '        _uniswapPair = IUniswapV2Factory(_uniswap.factory()).getPair(address(this), _uniswap.WETH());\n', '        require(_uniswapPair != address(0),"No liquidity pair found");\n', '    }\n', '}']