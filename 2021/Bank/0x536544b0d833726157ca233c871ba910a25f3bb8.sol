['pragma solidity ^0.4.23;\n', "import './owned.sol';\n", "import './SafeMath.sol';\n", '\n', '\n', 'contract token{\n', '    function transfer(address _to,uint256 amount) external;\n', '    function transferFrom(address _from,address _to,uint256 _value) external;\n', '}\n', '\n', 'contract ICO_USDT is owned{\n', '    \n', '    using SafeMath for uint;\n', '    uint price;\n', '    uint public fundAmount;\n', '    token public tokenReward;\n', '    token public usdtToken;\n', '\n', '    address public beneficiary;\n', '    mapping(address => uint) public balanceOf;\n', '    event FundTransfer(address backer,uint amount);\n', '    constructor (uint usdtDecimalCostofToken,address addressOfToken,address addressOfUSDT) {\n', '        price = usdtDecimalCostofToken ;\n', '        tokenReward = token(addressOfToken);\n', '        usdtToken = token(addressOfUSDT);\n', '        beneficiary = msg.sender;\n', '    }\n', '    function setPrice(uint usdtDecimalCostofToken) public onlyowner{\n', '        price = usdtDecimalCostofToken ;\n', '    }\n', '    \n', '    function getPrice() public view returns (uint){\n', '        return price ;\n', '    }\n', '    \n', '    function() public {\n', '    }\n', '    \n', '    function withdrawal() public{\n', '        \n', '        require(beneficiary == msg.sender);\n', '        usdtToken.transfer(beneficiary,fundAmount) ;\n', '        fundAmount = 0;\n', '        \n', '    }\n', '    \n', '    function usdtSwap(uint _usdtDecimalAmount) public{\n', '        \n', '        usdtToken.transferFrom(msg.sender,address(this),_usdtDecimalAmount);\n', '        balanceOf[msg.sender] += _usdtDecimalAmount;\n', '        fundAmount += _usdtDecimalAmount;\n', '        uint256 tokenAmount = _usdtDecimalAmount * (10 ** 18 )  / price  ;\n', '        tokenReward.transfer(msg.sender,tokenAmount);\n', '        emit FundTransfer(msg.sender,_usdtDecimalAmount);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '}']