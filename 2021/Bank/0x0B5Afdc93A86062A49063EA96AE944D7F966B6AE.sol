['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '/**\n', '  #SHIBIES #TREATS\n', '\n', '   Our fully decentralized website ***** shibiestreats.crypto *****   powered by Unstoppable Domains, IPFS, Pinata and Shiba Inus\n', '   \n', '   All Shibas <3 TREATS!\n', '\n', '   Finally the long hunger will come to an end! \n', '   The most delicious TREATS that the best INUs deserve. \n', '   We are SHIBIES a very yummy and experimental decentralized community MEME Treat Token Project for all hungry SHIBA INUs. \n', '   We celebrate this big ascent of Shiba Inu Token and surprise the community with our tasty TREATS.\n', '   Over 50% of TREATS will burned and 40% will be distributed 1:1 to every SHIB and AKITA holder except exchanges and big holder. \n', '   The small rest will be used for charities and promotion.\n', '   New unique delicacies from SHIBIES will primarily go to TREATS holder!\n', '   Because SHIBAs love our TREATS so much, the supply is reduced with each transaction.\n', '   and every holder gets fully automatically rewards but on Ethereum only! \n', '   We almost love Ethereum like Shibas.\n', '   The best you HODL TREATS for ever, so that your Shiba never has to go hungry again!\n', '\n', '   Because the very high Ethereum gas fees, we distribute our TREATS via Polygon/Matic Network!\n', '   Use the same keys form your Ethereum Wallet in Polygon/Matic to get your tokens.\n', '   Withdrawals from Polygon/Matic to Ethereum are excluded from fee.\n', '\n', '   Features: \n', '   Total supply 1,100,000,000,000,000 TREATS\n', '   TREATS can be used for farming new tasty tokens frum us in the future \n', '   Over 50% burn to the burnaddress\n', '   40% distribute 1:1 to SHIB and AKITA holder but big holder get maximal 0.05% of total supply for better decentralization and we burn the other tokens\n', '   4% distribute for promotion at the beginning phase\n', '   4% distribute to charities and open projects:\n', '\n', '   UNICEF France              5.500.000.000.000 TREATS   0.5%\n', '   India Covid Relief Fund    5.500.000.000.000 TREATS   0.5%\n', '   CoolEarth                  5.500.000.000.000 TREATS   0.5%\n', '   Freedom of the Press       5.500.000.000.000 TREATS   0.5%\n', '   Internet Archive           5.500.000.000.000 TREATS   0.5%\n', '   Tor Project                5.500.000.000.000 TREATS   0.5%\n', '   Gitcoin                    5.500.000.000.000 TREATS   0.5%\n', '   CoinGecko                  1.100.000.000.000 TREATS   0.1%\n', '   Etherscan                  1.100.000.000.000 TREATS   0.1%\n', '   MyEtherWallet              1.100.000.000.000 TREATS   0.1%\n', '   Polygon Foundation         1.100.000.000.000 TREATS   0.1%\n', '   Shib Token Developer       1.100.000.000.000 TREATS   0.1%\n', '\n', '   Variable transaction fee with auto rewards to all holders:\n', '\n', '   1%                    0+ TREATS\n', '   2%                  100+ TREATS\n', '   3%                1,000+ TREATS\n', '   4%               10,000+ TREATS\n', '   5%              100,000+ TREATS\n', '   6%            1,000,000+ TREATS\n', '   8%           10,000,000+ TREATS\n', '   10%         100,000,000+ TREATS\n', '   12%       1,000,000,000+ TREATS\n', '   15%      10,000,000,000+ TREATS\n', '   20%   1,000,000,000,000+ TREATS\n', '\n', '   Polygon/Matic Network is excluded from fees and rewards\n', '   Withdrawals from Polygon/Matic to Ethereum are excluded from fee\n', '   Charities and owner excluded from fee\n', '   Rewards to TREATS holder on Ethereum only\n', '   \n', '   With our variable transaction fee, we want to avoid many large transactions for better decentralization. \n', '   We would like to attract so more small holders in order to become an even larger community. \n', '   Because the token supply is still high at the beginning, higher transaction fees will apply and early holders get more rewards. \n', '   The minimum fee will always be at least 1%.\n', '\n', '   This is a full decentralized community token and we will burn the ownership after full distrubation.\n', '   No sale or team tokens!\n', '\n', '   Our fully decentralized website **** shibiestreats.crypto ****   powered by Unstoppable Domains, IPFS, Pinata and Shiba Inus\n', '\n', '   */\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '// SPDX-License-Identifier: Unlicensed\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', ' \n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '    \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    //uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '     /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ShibiesTreats is Context, IERC20, Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _rOwn;\n', '    mapping (address => uint256) private _tOwn;\n', '    mapping (address => mapping (address => uint256)) private _allow;\n', '\n', '    mapping (address => bool) private _excludedFee;\n', '\n', '    mapping (address => bool) private _excluded;\n', '    address[] private _exclude;\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 1.1 * 10**15 * 10**18;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFee;\n', '\n', '    string private _name = "Shibies Treats";\n', '    string private _symbol = "TREATS";\n', '    uint8 private _decimals = 18;\n', '    \n', '    uint256 public _transFee = 1;\n', '    address _polyBridge = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\n', '\n', ' constructor () public {\n', '        _rOwn[_msgSender()] = _rTotal;\n', '        \n', '        //exclude this contract, owner and zero address from fee\n', '        _excludedFee[owner()] = true;\n', '        _excludedFee[address(this)] = true;\n', '        _excludedFee[0x0000000000000000000000000000000000000000] = true;\n', '\n', '        //exclude charities and projects from fee\n', '        _excludedFee[0xA59B29d7dbC9794d1e7f45123C48b2b8d0a34636] = true; //UNICEF\n', '        _excludedFee[0x68A99f89E475a078645f4BAC491360aFe255Dff1]= true;  //India Covid Relief FUND\n', '        _excludedFee[0x3c8cB169281196737c493AfFA8F49a9d823bB9c5] = true; //CoolEarth\n', '        _excludedFee[0x998F25Be40241CA5D8F5fCaF3591B5ED06EF3Be7] = true; //Freedom of the Press\n', '        _excludedFee[0xFA8E3920daF271daB92Be9B87d9998DDd94FEF08]= true;  //Internet Archive\n', '        _excludedFee[0x532Fb5D00f40ced99B16d1E295C77Cda2Eb1BB4F] = true; //Tor Project\n', '        _excludedFee[0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6] = true; //Gitcoin\n', '        _excludedFee[0x4Cdc86fa95Ec2704f0849825f1F8b077deeD8d39]= true;  //CoinGecko\n', '        _excludedFee[0x71C7656EC7ab88b098defB751B7401B5f6d8976F] = true; //Etherscan\n', '        _excludedFee[0xDECAF9CD2367cdbb726E904cD6397eDFcAe6068D] = true; //MyEtherWallet\n', '        _excludedFee[0xb316fa9Fa91700D7084D377bfdC81Eb9F232f5Ff]= true;  //Polygon Foundation\n', '        _excludedFee[0xc351155C80aCD043BD5F8FE7ffc8536af1fF9375] = true; //Shib Token Developer\n', '\n', '        //exclude polygon/matic bridge from rewards\n', '        _excluded[_polyBridge] = true;\n', '        _exclude.push(_polyBridge);\n', '        \n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_excluded[account]) return _tOwn[account];\n', '        return tokenReflect(_rOwn[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allow[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allow[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allow[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allow[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    //get total fee\n', '    function totalFee() public view returns (uint256) {\n', '        return _tFee;\n', '    }\n', '\n', '    //deliver of transaction values\n', '    function delivery(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_excluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,) = _values(tAmount);\n', '        _rOwn[sender] = _rOwn[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFee = _tFee.add(tAmount);\n', '    }\n', '    \n', '\n', '    //get reflected transfer amount\n', '    function reflectToken(uint256 tAmount, bool deductFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductFee) {\n', '            (uint256 rAmount,,,,) = _values(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransAmount,,,) = _values(tAmount);\n', '            return rTransAmount;\n', '        }\n', '    }\n', '\n', '    //get reflection of token\n', '    function tokenReflect(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _rate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '     \n', '    //transfer token and set fee   \n', '    function _tokenSend(address sender, address recipient, uint256 amount,bool payFee) private {\n', '        \n', '        if(!payFee){\n', '            _transFee = 0;\n', '        } else {\n', '            //determine fee according to transaction amount\n', '             if(amount > (100*10**18)){\n', '                 _transFee = 2;\n', '                 if(amount > 1000000000000*10**18){\n', '                    _transFee = 20;\n', '                 }else if(amount > 10000000000*10**18){\n', '                    _transFee = 15;\n', '                 }else if(amount > 10000000000*10**18){\n', '                    _transFee = 12;\n', '                 }else if(amount > 1000000000*10**18){\n', '                    _transFee = 10;\n', '                 }else if(amount > 100000000*10**18){\n', '                    _transFee = 8;\n', '                 }else if(amount > 10000000*10**18){\n', '                    _transFee = 6;\n', '                 }else if(amount > 1000000*10**18){\n', '                    _transFee = 5;\n', '                 }else if(amount > 10000*10**18){\n', '                    _transFee = 4;\n', '                 }else if(amount > 1000*10**18){\n', '                    _transFee = 3;\n', '                 }\n', '             }\n', '        }\n', '        \n', '        if (_excluded[sender] && !_excluded[recipient]) {\n', '            _transferFromExclude(sender, recipient, amount);\n', '        } else if (!_excluded[sender] && _excluded[recipient]) {\n', '            _transferToExclude(sender, recipient, amount);\n', '        } else if (!_excluded[sender] && !_excluded[recipient]) {\n', '            _transferNormal(sender, recipient, amount);\n', '        } else if (_excluded[sender] && _excluded[recipient]) {\n', '            _transferBothExclude(sender, recipient, amount);\n', '        } else {\n', '            _transferNormal(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    //transaction without excluded account\n', '    function _transferNormal(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransAmount, uint256 rFee, uint256 tTransAmount, uint256 tFee) = _values(tAmount);\n', '        _rOwn[sender] = _rOwn[sender].sub(rAmount);\n', '        _rOwn[recipient] = _rOwn[recipient].add(rTransAmount);\n', '        _rewardFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransAmount);\n', '    }\n', '\n', '    //transaction to excluded account\n', '    function _transferToExclude(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransAmount, uint256 rFee, uint256 tTransAmount, uint256 tFee) = _values(tAmount);\n', '        _rOwn[sender] = _rOwn[sender].sub(rAmount);\n', '        _tOwn[recipient] = _tOwn[recipient].add(tTransAmount);\n', '        _rOwn[recipient] = _rOwn[recipient].add(rTransAmount);           \n', '        _rewardFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransAmount);\n', '    }\n', '\n', '    //transaction from excluded account\n', '    function _transferFromExclude(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransAmount, uint256 rFee, uint256 tTransAmount, uint256 tFee) = _values(tAmount);\n', '        _tOwn[sender] = _tOwn[sender].sub(tAmount);\n', '        _rOwn[sender] = _rOwn[sender].sub(rAmount);\n', '        _rOwn[recipient] = _rOwn[recipient].add(rTransAmount);   \n', '        _rewardFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransAmount);\n', '    }\n', '\n', '    //transaction both accounts are excluded\n', '    function _transferBothExclude(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransAmount, uint256 rFee, uint256 tTransAmount, uint256 tFee) = _values(tAmount);\n', '        _tOwn[sender] = _tOwn[sender].sub(tAmount);\n', '        _rOwn[sender] = _rOwn[sender].sub(rAmount);\n', '        _tOwn[recipient] = _tOwn[recipient].add(tTransAmount);\n', '        _rOwn[recipient] = _rOwn[recipient].add(rTransAmount);        \n', '       \n', '        _rewardFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransAmount);\n', '    }\n', '\n', '    //exclude account from rewards\n', '    function excludeReward(address account) public onlyOwner() {\n', "        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap V2 router.');\n", "        require(account != 0xE592427A0AEce92De3Edee1F18E0157C05861564, 'We can not exclude Uniswap V3 router.');\n", '        require(!_excluded[account], "Account is already excluded");\n', '        if(_rOwn[account] > 0) {\n', '            _tOwn[account] = tokenReflect(_rOwn[account]);\n', '        }\n', '        _excluded[account] = true;\n', '        _exclude.push(account);\n', '    }\n', '      \n', '    //include account to rewards\n', '    function includeReward(address account) external onlyOwner() {\n', '        require(_excluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _exclude.length; i++) {\n', '            if (_exclude[i] == account) {\n', '                _exclude[i] = _exclude[_exclude.length - 1];\n', '                _tOwn[account] = 0;\n', '                _excluded[account] = false;\n', '                _exclude.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '   \n', '    //exclude account from fees\n', '    function excludeFee(address account) public onlyOwner {\n', '        _excludedFee[account] = true;\n', '    }\n', '    \n', '    //include account to fees\n', '    function includeFee(address account) public onlyOwner {\n', '        _excludedFee[account] = false;\n', '    }\n', '\n', '\n', '    //distribute fee to holder\n', '    function _rewardFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFee = _tFee.add(tFee);\n', '    }\n', '\n', '    //check is account excluded from rewards\n', '    function excludedReward(address account) public view returns (bool) {\n', '        return _excluded[account];\n', '    }\n', '   \n', '    //check of is account excluded from fee\n', '    function excludedFee(address account) public view returns(bool) {\n', '        return _excludedFee[account];\n', '    }\n', '    \n', '    //get values of transaction\n', '    function _values(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransAmount, uint256 tFee) = _tValues(tAmount);\n', '        (uint256 rAmount, uint256 rTransAmount, uint256 rFee) = _rValues(tAmount, tFee, _rate());\n', '        return (rAmount, rTransAmount, rFee, tTransAmount, tFee);\n', '    }\n', '\n', '    //get transfer values of transaction\n', '    function _tValues(uint256 tAmount) private view returns (uint256, uint256) {\n', '        uint256 tFee = calcFee(tAmount);\n', '        uint256 tTransAmount = tAmount.sub(tFee);\n', '        return (tTransAmount, tFee);\n', '    }\n', '\n', '    //get reward values of transaction\n', '    function _rValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rTransAmount = rAmount.sub(rFee);\n', '        return (rAmount, rTransAmount, rFee);\n', '    }\n', '\n', '    //get reflection rate\n', '    function _rate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _currentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '    \n', '    //get reflected and total supply\n', '    function _currentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _exclude.length; i++) {\n', '            if (_rOwn[_exclude[i]] > rSupply || _tOwn[_exclude[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwn[_exclude[i]]);\n', '            tSupply = tSupply.sub(_tOwn[_exclude[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '    \n', '    //get amount of fee\n', '    function calcFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_transFee).div(\n', '            10**2\n', '        );\n', '    }\n', '  \n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allow[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) private {\n', '        require(from != address(0), "ERC20: transfer from zero address");\n', '        require(to != address(0), "ERC20: transfer to zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        //indicates if fee should be deducted from transfer\n', '        bool payFee = true;\n', '        bool noEthereum = false;\n', '        \n', '        //check of transaction is not on Ethereum\n', '        if(IERC20(address(this)).balanceOf(0xdEAD000000000000000042069420694206942069) < 550000000000000){\n', '            noEthereum = true;\n', '        } \n', '        \n', '        //if any account belongs to _excludedFee account or withdrawal from matic/polygon then remove the fee\n', '        if(_excludedFee[from] || _excludedFee[to] || from == _polyBridge || noEthereum){\n', '            payFee = false;\n', '        }\n', '        \n', '        //transfer amount and fee\n', '        _tokenSend(from,to,amount,payFee);\n', '    }\n', '  }']