['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.1;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./interfaces/IController.sol";\n', '\n', 'contract Controller is IController {\n', '    // Governance\n', '    address public override dao;\n', '    address public override guardian;\n', '    address public override feesOwner;\n', '\n', '    // EPools\n', '    bool public override pausedIssuance;\n', '\n', '    event SetDao(address dao);\n', '    event SetGuardian(address guardian);\n', '    event SetFeesOwner(address feesOwner);\n', '    event SetPausedIssuance(bool pausedIssuance);\n', '\n', '    modifier onlyDao {\n', '        require(msg.sender == dao, "Controller: not dao");\n', '        _;\n', '    }\n', '\n', '    modifier onlyDaoOrGuardian {\n', '        require(msg.sender == dao || msg.sender == guardian, "Controller: not dao or guardian");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', '        dao = msg.sender;\n', '        guardian = msg.sender;\n', '    }\n', '\n', '    function isDaoOrGuardian(address sender) external view override returns (bool) {\n', '        return (sender == dao || sender == guardian);\n', '    }\n', '\n', '    function setDao(address _dao) public override onlyDao returns (bool) {\n', '        dao = _dao;\n', '        emit SetDao(_dao);\n', '        return true;\n', '    }\n', '\n', '    function setGuardian(address _guardian) public override onlyDao returns (bool) {\n', '        guardian = _guardian;\n', '        emit SetGuardian(_guardian);\n', '        return true;\n', '    }\n', '\n', '    function setFeesOwner(address _feesOwner) public override onlyDao returns (bool) {\n', '        feesOwner = _feesOwner;\n', '        emit SetFeesOwner(_feesOwner);\n', '        return true;\n', '    }\n', '\n', '    function setPausedIssuance(bool _pausedIssuance) public override onlyDaoOrGuardian returns (bool) {\n', '        pausedIssuance = _pausedIssuance;\n', '        emit SetPausedIssuance(_pausedIssuance);\n', '        return true;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.1;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IController {\n', '\n', '    function dao() external view returns (address);\n', '\n', '    function guardian() external view returns (address);\n', '\n', '    function isDaoOrGuardian(address sender) external view returns (bool);\n', '\n', '    function setDao(address _dao) external returns (bool);\n', '\n', '    function setGuardian(address _guardian) external returns (bool);\n', '\n', '    function feesOwner() external view returns (address);\n', '\n', '    function pausedIssuance() external view returns (bool);\n', '\n', '    function setFeesOwner(address _feesOwner) external returns (bool);\n', '\n', '    function setPausedIssuance(bool _pausedIssuance) external returns (bool);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']