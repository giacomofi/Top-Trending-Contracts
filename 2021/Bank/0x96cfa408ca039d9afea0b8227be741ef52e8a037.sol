['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-16\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity =0.6.12;\n', '\n', 'contract Context {\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface ISwapper {\n', '    function swap(\n', '        address fromAssetHash,\n', '        uint64 toPoolId,\n', '        uint64 toChainId,\n', '        bytes calldata toAssetHash,\n', '        bytes calldata toAddress,\n', '        uint amount,\n', '        uint minOutAmount,\n', '        uint fee,\n', '        uint id\n', '    ) external payable returns (bool);\n', '}\n', '\n', 'library Convert {\n', '    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys,20))\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '\n', '    function div(uint x, uint y) internal pure returns (uint z) {\n', '        return x / y;\n', '    }\n', '}\n', '\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'contract O3SwapETHUniswapBridge is Ownable {\n', '    using SafeMath for uint256;\n', '    using Convert for bytes;\n', '\n', '    event LOG_AGG_SWAP (\n', '        uint256 amountOut, // Raw swapped token amount out without aggFee\n', '        uint256 fee\n', '    );\n', '\n', '    address public WETH;\n', '    address public uniswapFactory;\n', '    address public polySwapper;\n', '    uint public polySwapperId;\n', '\n', '    uint256 public aggregatorFee = 3 * 10 ** 7; // Default to 0.3%\n', '    uint256 public constant FEE_DENOMINATOR = 10 ** 10;\n', '\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'O3SwapETHUniswapBridge: EXPIRED');\n", '        _;\n', '    }\n', '\n', '    constructor (\n', '        address _weth,\n', '        address _factory,\n', '        address _swapper,\n', '        uint _swapperId\n', '    ) public {\n', '        WETH = _weth;\n', '        uniswapFactory = _factory;\n', '        polySwapper = _swapper;\n', '        polySwapperId = _swapperId;\n', '    }\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual ensure(deadline) {\n', '        uint amountOut = _swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, swapAmountOutMin, path);\n', '        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\n', '\n', '        emit LOG_AGG_SWAP(amountOut, feeAmount);\n', '\n', '        uint adjustedAmountOut = amountOut.sub(feeAmount);\n', '        TransferHelper.safeTransfer(path[path.length - 1], to, adjustedAmountOut);\n', '    }\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokensCrossChain(\n', '        uint amountIn,\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        bytes memory to,\n', '        uint deadline,\n', '        uint64 toPoolId,\n', '        uint64 toChainId,\n', '        bytes memory toAssetHash,\n', '        uint polyMinOutAmount,\n', '        uint fee\n', '    ) external virtual payable ensure(deadline) returns (bool) {\n', '        uint polyAmountIn;\n', '        {\n', '            uint amountOut = _swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, swapAmountOutMin, path);\n', '            uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\n', '            emit LOG_AGG_SWAP(amountOut, feeAmount);\n', '            polyAmountIn = amountOut.sub(feeAmount);\n', '        }\n', '\n', '        return _cross(\n', '            path[path.length - 1],\n', '            toPoolId,\n', '            toChainId,\n', '            toAssetHash,\n', '            to,\n', '            polyAmountIn,\n', '            polyMinOutAmount,\n', '            fee\n', '        );\n', '    }\n', '\n', '    function _swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path\n', '    ) internal virtual returns (uint) {\n', '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, UniswapV2Library.pairFor(uniswapFactory, path[0], path[1]), amountIn\n', '        );\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint amountOut = IERC20(path[path.length - 1]).balanceOf(address(this)).sub(balanceBefore);\n', "        require(amountOut >= amountOutMin, 'O3SwapETHUniswapBridge: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        return amountOut;\n', '    }\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual payable ensure(deadline) {\n', '        uint amountOut = _swapExactETHForTokensSupportingFeeOnTransferTokens(swapAmountOutMin, path, 0);\n', '        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\n', '\n', '        emit LOG_AGG_SWAP(amountOut, feeAmount);\n', '\n', '        uint adjustedAmountOut = amountOut.sub(feeAmount);\n', '        TransferHelper.safeTransfer(path[path.length - 1], to, adjustedAmountOut);\n', '    }\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokensCrossChain(\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        bytes memory to,\n', '        uint deadline,\n', '        uint64 toPoolId,\n', '        uint64 toChainId,\n', '        bytes memory toAssetHash,\n', '        uint polyMinOutAmount,\n', '        uint fee\n', '    ) external virtual payable ensure(deadline) returns (bool) {\n', '        uint polyAmountIn;\n', '        {\n', '            uint amountOut = _swapExactETHForTokensSupportingFeeOnTransferTokens(swapAmountOutMin, path, fee);\n', '            uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\n', '            emit LOG_AGG_SWAP(amountOut, feeAmount);\n', '            polyAmountIn = amountOut.sub(feeAmount);\n', '        }\n', '\n', '        return _cross(\n', '            path[path.length - 1],\n', '            toPoolId,\n', '            toChainId,\n', '            toAssetHash,\n', '            to,\n', '            polyAmountIn,\n', '            polyMinOutAmount,\n', '            fee\n', '        );\n', '    }\n', '\n', '    function _swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        uint fee\n', '    ) internal virtual returns (uint) {\n', "        require(path[0] == WETH, 'O3SwapETHUniswapBridge: INVALID_PATH');\n", '        uint amountIn = msg.value.sub(fee);\n', "        require(amountIn > 0, 'O3SwapETHUniswapBridge: INSUFFICIENT_INPUT_AMOUNT');\n", '        IWETH(WETH).deposit{value: amountIn}();\n', '        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(uniswapFactory, path[0], path[1]), amountIn));\n', '        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint amountOut = IERC20(path[path.length - 1]).balanceOf(address(this)).sub(balanceBefore);\n', "        require(amountOut >= swapAmountOutMin, 'O3SwapETHUniswapBridge: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        return amountOut;\n', '    }\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint swapAmountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external virtual ensure(deadline) {\n', '        uint amountOut = _swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, swapAmountOutMin, path);\n', '        uint feeAmount = amountOut.mul(aggregatorFee).div(FEE_DENOMINATOR);\n', '\n', '        emit LOG_AGG_SWAP(amountOut, feeAmount);\n', '\n', '        IWETH(WETH).withdraw(amountOut);\n', '        uint adjustedAmountOut = amountOut.sub(feeAmount);\n', '        TransferHelper.safeTransferETH(to, adjustedAmountOut);\n', '    }\n', '\n', '    function _swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint swapAmountOutMin,\n', '        address[] calldata path\n', '    ) internal virtual returns (uint) {\n', "        require(path[path.length - 1] == WETH, 'O3SwapETHUniswapBridge: INVALID_PATH');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, UniswapV2Library.pairFor(uniswapFactory, path[0], path[1]), amountIn\n', '        );\n', '        uint balanceBefore = IERC20(WETH).balanceOf(address(this));\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint amountOut = IERC20(WETH).balanceOf(address(this)).sub(balanceBefore);\n', "        require(amountOut >= swapAmountOutMin, 'O3SwapETHUniswapBridge: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        return amountOut;\n', '    }\n', '\n', '    // **** SWAP (supporting fee-on-transfer tokens) ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = UniswapV2Library.sortTokens(input, output);\n', '            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(uniswapFactory, input, output));\n', '            uint amountInput;\n', '            uint amountOutput;\n', '            { // scope to avoid stack too deep errors\n', '            (uint reserve0, uint reserve1,) = pair.getReserves();\n', '            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n', '            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n', '            }\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n', '            address to = i < path.length - 2 ? UniswapV2Library.pairFor(uniswapFactory, output, path[i + 2]) : _to;\n', '            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n', '        }\n', '    }\n', '\n', '    function _cross(\n', '        address fromAssetHash,\n', '        uint64 toPoolId,\n', '        uint64 toChainId,\n', '        bytes memory toAssetHash,\n', '        bytes memory toAddress,\n', '        uint amount,\n', '        uint minOutAmount,\n', '        uint fee\n', '    ) internal returns (bool) {\n', '        // Allow `swapper contract` to transfer `amount` of `fromAssetHash` on belaof of this contract.\n', '        TransferHelper.safeApprove(fromAssetHash, polySwapper, amount);\n', '\n', '        bool result = ISwapper(polySwapper).swap{value: fee}(\n', '            fromAssetHash,\n', '            toPoolId,\n', '            toChainId,\n', '            toAssetHash,\n', '            toAddress,\n', '            amount,\n', '            minOutAmount,\n', '            fee,\n', '            polySwapperId\n', '        );\n', '        require(result, "POLY CROSSCHAIN ERROR");\n', '\n', '        return result;\n', '    }\n', '\n', '    receive() external payable { }\n', '\n', '    function setPolySwapperId(uint _id) external onlyOwner {\n', '        polySwapperId = _id;\n', '    }\n', '\n', '    function collect(address token) external onlyOwner {\n', '        if (token == WETH) {\n', '            uint256 wethBalance = IERC20(token).balanceOf(address(this));\n', '            if (wethBalance > 0) {\n', '                IWETH(WETH).withdraw(wethBalance);\n', '            }\n', '            TransferHelper.safeTransferETH(owner(), address(this).balance);\n', '        } else {\n', '            TransferHelper.safeTransfer(token, owner(), IERC20(token).balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    function setAggregatorFee(uint _fee) external onlyOwner {\n', '        aggregatorFee = _fee;\n', '    }\n', '\n', '    function setUniswapFactory(address _factory) external onlyOwner {\n', '        uniswapFactory = _factory;\n', '    }\n', '\n', '    function setPolySwapper(address _swapper) external onlyOwner {\n', '        polySwapper = _swapper;\n', '    }\n', '\n', '    function setWETH(address _weth) external onlyOwner {\n', '        WETH = _weth;\n', '    }\n', '}']