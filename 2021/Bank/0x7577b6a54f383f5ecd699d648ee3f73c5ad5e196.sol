['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-04\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0){\n', '            return 0;\n', '        }\n', '       \n', '        uint256 c = a * b;\n', '         require(a == 0 || c / a == b);\n', '       \n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       require (b > 0, "safeMath : division by zero");\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       require(b <= a, "subsraction owerflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "addition owerflow");\n', '        return c;\n', '    }\n', '   \n', '     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require (b !=0, "safeMath : module by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Owned{\n', '    address payable public owner;\n', '    address payable private newOwner;\n', '   \n', '   \n', '     \n', '      event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '       \n', '    }\n', '     \n', '     \n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    //this flow is to prevent transferring ownership to wrong wallet by mistake\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '   \n', '    function CEO ()public view returns (address) {\n', '        return owner;\n', '    }\n', '   \n', '    modifier onlyOwner {\n', '      require (msg.sender == owner, "No owner");\n', '       _;\n', '    }\n', '}\n', '\n', '\n', 'contract Token$8Pay is Owned {\n', '    using SafeMath for uint;\n', '   \n', '\n', '    uint256 public sellPriceToken;\n', '    uint256 public buyPrice;\n', '     \n', '       string constant private _name = "8PAY";\n', '       string constant private _simbol = "$8Pay";\n', '       uint8 constant private  _decimals = 18;\n', '     uint256 public _totalSupply;\n', '   \n', '    function name() public pure returns(string memory){\n', '        return _name;\n', '    }\n', '   \n', '    function symbol() public pure returns(string memory){\n', '        return _simbol;\n', '    }\n', '   \n', '    function decimals() public pure returns(uint8){\n', '        return _decimals;\n', '    }\n', ' \n', ' \n', '    bool internal locker;\n', '   \n', '    modifier noReentrant() {\n', '        require (!locker ,"no retrency");\n', '        locker = true;\n', '        _;\n', '        locker = false;\n', '    }  \n', ' \n', '    function totalNoDecimals() public view  returns (uint256) {\n', '        return _totalSupply/10**18;\n', '    }\n', '   \n', '    mapping(address => uint ) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '   \n', ' \n', '   \n', '    event Transfer(address indexed _from, address indexed  _to, uint _value);\n', '    event Approval(address indexed _from, address indexed _to, uint _value);\n', '    event Sell(address indexed sender, uint indexed balance, uint amount);\n', '     \n', '   \n', '   \n', '       function allowance (address _owner, address _spender) public view returns (uint){       // показывает сколько можно снимать деньги с адреса отправителя\n', '        return allowed [_owner][_spender];\n', '    }\n', '   \n', '     function approve(address _spender, uint _value) public {             // отправитель даеет разрешение на снятие денег с адреса function transferFrom\n', '            allowed [msg.sender][_spender] = _value;\n', '        emit Approval (msg.sender, _spender, _value);\n', '    }\n', '   \n', '   \n', '   \n', '     \n', '    function mint(address account, uint256 _value)  public  onlyOwner {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        uint value = _value*(10**18);\n', '        _beforeTokenTransfer(address(0), account, value);\n', '        _totalSupply = _totalSupply.add(value);\n', '        balances[account] = balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '   \n', '     \n', '        function _beforeTokenTransfer(address from, address to, uint256 amount) internal pure { }\n', '\n', ' function WithdrawTokens(uint256 tokenAmount) public onlyOwner noReentrant{\n', '       \n', '        // no need for overflow checking as that will be done in transfer function\n', '        _transfer(address(this),msg.sender, tokenAmount);\n', '    }\n', '\n', '  /// Withdraw a bid that was overbid.\n', '    function withdraw() public onlyOwner noReentrant returns  (bool) {\n', '        uint amount = balances[msg.sender];\n', '        if (amount > 0) {\n', '            // It is important to set this to zero because the recipient\n', '            // can call this function again as part of the receiving call\n', '            // before `send` returns.\n', '            balances[msg.sender] = 0;\n', '\n', '            if (!msg.sender.send(amount)) {\n', '                // No need to call throw here, just reset the amount owing\n', '                balances[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '  // function withdraw () public onlyOwner noReentrant {\n', '     //  uint amount = balances[msg.sender];\n', '     //   balances[msg.sender] = 0;\n', '     //   msg.sender.transfer(amount);\n', '     //        address(owner).transfer(address(this).balance);\n', '   // }\n', '   \n', '   \n', '     function balanceOf(address sender) public view returns (uint) {        \n', '        return balances[sender];\n', '    }\n', '   \n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this) );\n', '        _;\n', '    }\n', '   \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != address(0));                      // Prevent transfer to 0x0 address. Use burn() instead\n', '        // overflow and undeflow checked by SafeMath Library\n', '       balances[_from] = balances[_from].sub(_value);    // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);        // Add the same to the recipient\n', '       \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '   \n', '    function transfer(address _to, uint256 _value) public  returns (bool success) {\n', '       \n', '        //no need to check for input validations, as that is ruled by SafeMath\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '   \n', '     function transferFrom(address _from, address spender, uint256 _value) public returns (bool success) {\n', '        //checking of allowance and token value is done by SafeMath\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '       \n', '        _transfer(_from, spender, _value);\n', '        return true;\n', '    }\n', '   \n', '   \n', '   function setPrices(uint256  newsellPriceToken, uint256  newBuyPrice) onlyOwner public{\n', '     sellPriceToken = newsellPriceToken ;\n', '        buyPrice = newBuyPrice;\n', ' }\n', '   \n', '    function buyTokens() payable public noReentrant {\n', "       require(msg.sender != address(0),  'No contract address allowed to claim air drop');\n", '        uint amount = msg.value * buyPrice;                 // calculates the amount\n', '         \n', '       \n', '        _transfer(address(this), msg.sender, amount);       // makes the transfers\n', '       \n', '    }\n', ' \n', ' \n', '      function sellTokens(uint256 amount) public {\n', '       uint256 etherAmount = amount * sellPriceToken/(10**18);\n', '        require(address(this).balance >= etherAmount);   // checks if the contract has enough ether to buy\n', '          _transfer(msg.sender, address(this),amount);           // makes the transfers\n', "        msg.sender.transfer(etherAmount);                // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '   \n', '   \n', '       \n', '     function ETHcontrBalance () public view returns (uint) {\n', '        return address(this).balance;\n', '        }\n', '       \n', '        function() external { //fallback\n', '    revert();\n', '  }\n', ' \n', ' \n', '}']