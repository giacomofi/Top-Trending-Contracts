['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ETHereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow"); \n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            \n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address public _owner;\n', '    address private _previousOwner;\n', '    uint256 public _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function getUnlockTime() public view returns (uint256) {\n', '        return _lockTime;\n', '    }\n', '    \n', '    function getTime() public view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function lock(uint256 time) public virtual onlyOwner {\n', '        _previousOwner = _owner;\n', '        _owner = address(0);\n', '        _lockTime = block.timestamp + time;\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '    \n', '    function unlock() public virtual {\n', '        require(_previousOwner == msg.sender, "You can\'t unlock");\n', '        require(block.timestamp > _lockTime , "Contract is locked");\n', '        emit OwnershipTransferred(_owner, _previousOwner);\n', '        _owner = _previousOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '    \n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '\n', 'contract Buff is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    \n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => bool) private _isExcludedFromFee;\n', '    mapping (address => bool) private _isExcludedFromTxLimit;\n', '\n', '    mapping (address => bool) private _isExcluded;\n', '    mapping (address => bool) private _isExcludedTxLimit;\n', '    address[] private _excluded;\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 50 * 10**9 * 10**18;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 private _tBurnTotal;\n', '    uint256 private _tDonationTotal;\n', '\n', '    string private _name = "BUFF";\n', '    string private _symbol = "BUFF";\n', '    uint8 private _decimals = 18;\n', '\n', '    struct UserInfo {\n', '        uint256 lock4month;\n', '        uint256 aTime1;\n', '        uint256 aTime2;\n', '        uint256 aTime3;\n', '        uint256 aTime4;\n', '    }\n', '    address[] public userlist;\n', '\n', '    mapping (address => UserInfo) public userInfo;\n', '    uint256 public _taxFee = 2;\n', '    uint256 private _previousTaxFee = _taxFee;\n', '    \n', '    uint256 public _burnFee = 2;\n', '    uint256 private _previousBurnFee = _burnFee;\n', '    \n', '    uint256 public _donationFee = 6;\n', '    uint256 private _previousDonationFee = _donationFee;\n', '    \n', '    uint256 public _maxTxAmount = 1 * 10**9 * 10**18;\n', '    uint256 private minimumTokensBeforeSwap = 3 * 10**3 * 10**18; \n', '    \n', '    address payable public devAddress = 0x806EF8C943226F082d298D5F2f3AF727A95A03C7;\n', '    address payable public charityAddress = 0x841626CfF9e6C92332fb9947Ae9b8413159443C9;\n', '    address payable public markAddress = 0x0fC906C0643Fe5B5a3Bc2Ae50220cc54168797E7;\n', '    \n', '        \n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    address public immutable uniswapV2Pair;\n', '    \n', '    bool inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled = true;\n', '    \n', '    event RewardLiquidityProviders(uint256 tokenAmount);\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        uint256 tokensSwapped,\n', '        uint256 ethReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '    \n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '    \n', '    constructor () public {\n', '        _rOwned[_msgSender()] = _rTotal;\n', '\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '            .createPair(address(this), _uniswapV2Router.WETH());\n', '\n', '        uniswapV2Router = _uniswapV2Router;\n', '        \n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _isExcludedFromTxLimit[owner()] = true;\n', '        _isExcludedFromTxLimit[address(this)] = true;\n', '        _isExcludedFromFee[markAddress] = true;\n', '        _isExcludedFromTxLimit[markAddress] = true;\n', '        \n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '        userlist.push(_msgSender());\n', '        userlist.push(address(this));\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '    \n', '    function claimAllTxTime () public returns (bool) {\n', '        uint256 length = userlist.length;\n', '        if(length > 0) {\n', '            for (uint256 uid = 0; uid < length; ++uid) {\n', '                claimTxTime(userlist[uid]);\n', '            }   \n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function lock4month(address account) public onlyOwner {\n', '        \n', '        UserInfo storage user = userInfo[account];\n', '        user.lock4month = block.timestamp + 30 days ;\n', '\n', '    }\n', '    function claimTxTime(address account) public returns (bool) {\n', '        UserInfo storage user = userInfo[account];\n', '        uint first_atime =  user.aTime1;\n', '        uint _fmon = getMonth(first_atime);\n', '        uint _fyear = getYear(first_atime);\n', '        \n', '        uint current_time = block.timestamp;\n', '        uint16 _cyear = getYear(current_time);\n', '        uint8 _cmon = getMonth(current_time);\n', '\n', '        bool claimable = false;\n', '\n', '        if (_fyear < _cyear) claimable = true;\n', '        if (_fyear == _cyear && _fmon < _cmon) claimable = true;\n', '\n', '        if ( claimable == true ) {\n', '            \n', '            uint rand = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, msg.sender)));\n', '            \n', '            current_time = block.timestamp;\n', '            \n', '            uint startTime = toTimestamp(_cyear, _cmon, 1);\n', '            uint endTime = toTimestamp(_cyear, _cmon, 1);\n', '            \n', '            startTime = toTimestamp(_cyear, _cmon, 1);\n', '            endTime = toTimestamp(_cyear, _cmon, 7);\n', '            user.aTime1 = startTime + rand % ( endTime - startTime );\n', '            \n', '            startTime = toTimestamp(_cyear, _cmon, 8);\n', '            endTime = toTimestamp(_cyear, _cmon, 14);\n', '            user.aTime2 = startTime + (rand.div(100000000000)) % ( endTime - startTime );\n', '            \n', '            startTime = toTimestamp(_cyear, _cmon, 15);\n', '            endTime = toTimestamp(_cyear, _cmon, 21);\n', '            user.aTime3 = startTime + (rand.div(10000000000000000000000)) % ( endTime - startTime );\n', '            \n', '            startTime = toTimestamp(_cyear, _cmon, 22);\n', '            endTime = toTimestamp(_cyear, _cmon, 28);\n', '            user.aTime4 = startTime + (rand.div(1000000000000000000000000000000000)) % ( endTime - startTime );\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '\n', '        _transfer(_msgSender(), recipient, amount);\n', '        if(balanceOf(recipient) > 0 ) userlist.push(recipient);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcludedFromReward(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '    \n', '    function totalBurn() public view returns (uint256) {\n', '        return _tBurnTotal;\n', '    }\n', '    \n', '    function totalDonationBNB() public view returns (uint256) {\n', '        return _tDonationTotal;  // 18 decimals!\n', '    }\n', '\n', '    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\n', '        return minimumTokensBeforeSwap;\n', '    }\n', '\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '  \n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeFromReward(address account) public onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeInReward(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if(from != owner() && to != owner())\n', '            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '\n', '        uint256 current_time;\n', '        \n', '        current_time = block.timestamp;\n', '        UserInfo storage user = userInfo[_msgSender()];\n', '        bool tradable = false;\n', '\n', '        if(isExcludedTxLimit(from) || isExcludedTxLimit(to) ) tradable = true;\n', '        else {\n', '            if(current_time >= user.aTime1 && current_time <= user.aTime1 + 2 hours)\n', '                tradable = true;\n', '            if(current_time >= user.aTime2 && current_time <= user.aTime2 + 2 hours)\n', '                tradable = true;\n', '            if(current_time >= user.aTime3 && current_time <= user.aTime3 + 2 hours)\n', '                tradable = true;\n', '            if(current_time >= user.aTime4 && current_time <= user.aTime4 + 2 hours)\n', '                tradable = true;\n', '            if(user.lock4month>current_time) tradable = false;\n', '        }\n', '        require (tradable == true, "No fitable time to trade");\n', '\n', '        uint256 contractTokenBalance = balanceOf(address(this));\n', '        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\n', '        if (\n', '            overMinimumTokenBalance &&\n', '            !inSwapAndLiquify &&\n', '            from != uniswapV2Pair &&\n', '            swapAndLiquifyEnabled\n', '        ) {\n', '            contractTokenBalance = minimumTokensBeforeSwap;\n', '            swapAndLiquify(contractTokenBalance);\n', '        }\n', '        \n', '\n', '        bool takeFee = true;\n', '        \n', '        //if any account belongs to _isExcludedFromFee account then remove the fee\n', '        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n', '            takeFee = false;\n', '        }\n', '        \n', '        _tokenTransfer(from,to,amount,takeFee);\n', '    }\n', '\n', '    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '        IERC20(address(this)).transferFrom(address(this), markAddress, contractTokenBalance.div(3));\n', '        swapTokensForBNB(contractTokenBalance); \n', '        uint256 beforeTransferBalance = address(this).balance;\n', '        uint256 donationTransfer = (address(this).balance).div(2);\n', '        \n', '        TransferCharityBNB(devAddress, donationTransfer);\n', '        TransferCharityBNB(charityAddress, donationTransfer);\n', '        \n', '        uint256 afterTransferBalance = address(this).balance;\n', '        _tDonationTotal = _tDonationTotal.add(beforeTransferBalance.sub(afterTransferBalance));\n', "        // The donation total is implemented in this wasy so it's more accurate because we're dealing with thirds.\n", '    }\n', '\n', '    function swapTokensForBNB(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> wETH\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this), // The contract\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n', '        if(!takeFee)\n', '            removeAllFee();\n', '        \n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '        \n', '        if(!takeFee)\n', '            restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, rBurn, tFee, tBurn);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, rBurn, tFee, tBurn);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, rBurn, tFee, tBurn);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n', '        _takeLiquidity(tLiquidity);\n', '        _reflectFee(rFee, rBurn, tFee, tBurn);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {\n', '        _rTotal = _rTotal.sub(rFee).sub(rBurn);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '        _tBurnTotal = _tBurnTotal.add(tBurn);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity) = _getTValues(tAmount);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, tLiquidity, _getRate());\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn, tLiquidity);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\n', '        uint256 tFee = calculateTaxFee(tAmount);\n', '        uint256 tBurn = calculateBurnFee(tAmount);\n', '        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tBurn).sub(tLiquidity);\n', '        return (tTransferAmount, tFee, tBurn, tLiquidity);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rBurn = tBurn.mul(currentRate);\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rLiquidity);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '    \n', '    function _takeLiquidity(uint256 tLiquidity) private {\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rLiquidity = tLiquidity.mul(currentRate);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n', '        if(_isExcluded[address(this)])\n', '            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n', '    }\n', '    \n', '    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_taxFee).div(\n', '            10**2\n', '        );\n', '    }\n', '    \n', '    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_burnFee).div(\n', '            10**2\n', '        );\n', '    }\n', '    \n', '    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n', '        return _amount.mul(_donationFee).div(\n', '            10**2\n', '        );\n', '    }\n', '    \n', '    function removeAllFee() private {\n', '        if(_taxFee == 0 && _burnFee == 0 && _donationFee == 0) return;\n', '        \n', '        _previousTaxFee = _taxFee;\n', '        _previousBurnFee = _burnFee;\n', '        _previousDonationFee = _donationFee;\n', '        \n', '        _taxFee = 0;\n', '        _burnFee = 0;\n', '        _donationFee = 0;\n', '    }\n', '    \n', '    function restoreAllFee() private {\n', '        _taxFee = _previousTaxFee;\n', '        _burnFee = _previousBurnFee;\n', '        _donationFee = _previousDonationFee;\n', '    }\n', '\n', '    function isExcludedFromFee(address account) public view returns(bool) {\n', '        return _isExcludedFromFee[account];\n', '    }\n', '    \n', '    function excludeFromFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = true;\n', '    }\n', '    \n', '    function includeInFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = false;\n', '    }\n', '    \n', '    \n', '    function isExcludedTxLimit(address account) public view returns(bool) {\n', '        return _isExcludedFromTxLimit[account];\n', '    }\n', '    \n', '    function excludeTxLimit(address account) public onlyOwner {\n', '        _isExcludedFromTxLimit[account] = true;\n', '    }\n', '    \n', '    function includeTxLimit(address account) public onlyOwner {\n', '        _isExcludedFromTxLimit[account] = false;\n', '    }\n', '    \n', '    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n', '        _taxFee = taxFee;\n', '    }\n', '    \n', '    function setBurnFeePercent(uint256 burnFee) external onlyOwner() {\n', '        _burnFee = burnFee;\n', '    }\n', '    \n', '    function setDonationFeePercent(uint256 DonationFee) external onlyOwner() {\n', '        _donationFee = DonationFee;\n', '    }\n', '    \n', '    function setdevAddress(address payable dev) external onlyOwner() {\n', '        devAddress = dev;\n', '    }\n', '    \n', '    function setDonationAddress(address payable charity) external onlyOwner() {\n', '        charityAddress = charity;\n', '    }\n', '    \n', '    function setAirdropAddress3(address payable mark) external onlyOwner() {\n', '        markAddress = mark;\n', '    }\n', '    \n', '    function setMaxTxPercent(uint256 maxTxPercent, uint256 maxTxDecimals) external onlyOwner() {\n', '        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\n', '            10**(uint256(maxTxDecimals) + 2)\n', '        );\n', '    }\n', '    \n', '    function getUnlockTimeSeconds() public view returns (uint256) {\n', '        if (_owner == address(0)) {\n', '            if (_lockTime > block.timestamp) {\n', '                return _lockTime.sub(block.timestamp);\n', '            }\n', '            \n', '            else {\n', '                return 0;\n', '            }\n', '            \n', '        }\n', '        \n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getUnlockTimeDays() public view returns (uint256) {\n', '        if (_owner == address(0)) {\n', '            if (_lockTime > block.timestamp) {\n', '                return (_lockTime.sub(block.timestamp)).div(86400);\n', '            }\n', '            \n', '            else {\n', '                return 0;\n', '            }\n', '        }\n', '        \n', '        else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '\n', '    function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\n', '        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\n', '    }\n', '\n', '    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '    \n', '    \n', '    function TransferCharityBNB(address payable recipient, uint256 amount) private {\n', '        recipient.transfer(amount);\n', '    }\n', '    \n', '    \n', '     //to recieve BNB\n', '    receive() external payable {}\n', '    \n', '    struct _DateTime {\n', '        uint16 year;\n', '        uint8 month;\n', '        uint8 day;\n', '        uint8 hour;\n', '        uint8 minute;\n', '        uint8 second;\n', '        uint8 weekday;\n', '    }\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant YEAR_IN_SECONDS = 31536000;\n', '    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint constant HOUR_IN_SECONDS = 3600;\n', '    uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '    \n', '    function isLeapYear(uint16 year) public pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '                return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '                return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '                return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function leapYearsBefore(uint year) public pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n', '        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                return 31;\n', '        }\n', '        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                return 30;\n', '        }\n', '        else if (isLeapYear(year)) {\n', '                return 29;\n', '        }\n', '        else {\n', '                return 28;\n', '        }\n', '    }\n', '\n', '    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\n', '        uint secondsAccountedFor = 0;\n', '        uint buf;\n', '        uint8 i;\n', '\n', '        // Year\n', '        dt.year = getYear(timestamp);\n', '        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '        // Month\n', '        uint secondsInMonth;\n', '        for (i = 1; i <= 12; i++) {\n', '                secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                        dt.month = i;\n', '                        break;\n', '                }\n', '                secondsAccountedFor += secondsInMonth;\n', '        }\n', '\n', '        // Day\n', '        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                        dt.day = i;\n', '                        break;\n', '                }\n', '                secondsAccountedFor += DAY_IN_SECONDS;\n', '        }\n', '\n', '        // Hour\n', '        dt.hour = getHour(timestamp);\n', '\n', '        // Minute\n', '        dt.minute = getMinute(timestamp);\n', '\n', '        // Second\n', '        dt.second = getSecond(timestamp);\n', '\n', '        // Day of week.\n', '        dt.weekday = getWeekday(timestamp);\n', '    }\n', '\n', '    function getYear(uint timestamp) public pure returns (uint16) {\n', '        uint secondsAccountedFor = 0;\n', '        uint16 year;\n', '        uint numLeapYears;\n', '\n', '        // Year\n', '        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '        while (secondsAccountedFor > timestamp) {\n', '                if (isLeapYear(uint16(year - 1))) {\n', '                        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                }\n', '                else {\n', '                        secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                }\n', '                year -= 1;\n', '        }\n', '        return year;\n', '    }\n', '\n', '    function getMonth(uint timestamp) public pure returns (uint8) {\n', '            return parseTimestamp(timestamp).month;\n', '    }\n', '\n', '    function getDay(uint timestamp) public pure returns (uint8) {\n', '            return parseTimestamp(timestamp).day;\n', '    }\n', '\n', '    function getHour(uint timestamp) public pure returns (uint8) {\n', '            return uint8((timestamp / 60 / 60) % 24);\n', '    }\n', '\n', '    function getMinute(uint timestamp) public pure returns (uint8) {\n', '            return uint8((timestamp / 60) % 60);\n', '    }\n', '\n', '    function getSecond(uint timestamp) public pure returns (uint8) {\n', '            return uint8(timestamp % 60);\n', '    }\n', '\n', '    function getWeekday(uint timestamp) public pure returns (uint8) {\n', '            return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n', '    }\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n', '            return toTimestamp(year, month, day, 0, 0, 0);\n', '    }\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n', '            return toTimestamp(year, month, day, hour, 0, 0);\n', '    }\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n', '        return toTimestamp(year, month, day, hour, minute, 0);\n', '    }\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        for (i = ORIGIN_YEAR; i < year; i++) {\n', '            if (isLeapYear(i)) {\n', '                    timestamp += LEAP_YEAR_IN_SECONDS;\n', '            }\n', '            else {\n', '                    timestamp += YEAR_IN_SECONDS;\n', '            }\n', '        }\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '                timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '        }\n', '\n', '        // Day\n', '        timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '        // Hour\n', '        timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '        // Minute\n', '        timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '        // Second\n', '        timestamp += second;\n', '\n', '        return timestamp;\n', '    }\n', '\n', '}']