['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SafeCast {\n', '\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '    \n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  bool private initialized;\n', '\n', '  bool private initializing;\n', '\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Already Initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  function isConstructor() private view returns (bool) {\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract ContextUpgradeSafe is Initializable {\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', 'contract PolkaSet is ERC20UpgradeSafe, OwnableUpgradeSafe {\n', '    \n', '    using SafeCast for int256;\n', '    using SafeMath for uint256;\n', '    \n', '    struct Transaction {\n', '        bool enabled;\n', '        address destination;\n', '        bytes data;\n', '    }\n', '\n', '    event TransactionFailed(address indexed destination, uint index, bytes data);\n', '\n', '    Transaction[] public transactions;\n', '\n', '    uint256 private _epoch;\n', '    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\t\n', '\tuint256 private _totalSupply;\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _rTotal;\n', '    uint256 private _tFeeTotal;\n', '    \n', '    uint256 private constant DECIMALS = 9;\n', '    uint256 private constant RATE_PRECISION = 10 ** DECIMALS;\n', '    \n', '    uint256 public _tFeePercent;\n', '    \n', '    address public _rebaser;\n', '    \n', '    uint256 public _limitTransferAmount;\n', '    uint256 public _limitMaxBalance;\n', '    uint256 public _limitSellFeePercent;\n', '    \n', '    uint256 public _limitTimestamp;\n', '    \n', '    function initialize()\n', '        public\n', '        initializer\n', '    {\n', '        __ERC20_init("PolkaSet", "PSET");\n', '        _setupDecimals(uint8(DECIMALS));\n', '        __Ownable_init();\n', '        \n', '        _totalSupply = 23000 * 10**9 ;\n', '        _rTotal = (MAX - (MAX % _totalSupply));\n', '        \n', '        _rebaser = _msgSender();\n', '        \n', '        _tFeePercent = 300; // 3%\n', '\n', '        _rOwned[_msgSender()] = _rTotal;\n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '\n', '        excludeAccount(_msgSender());\n', '        excludeAccount(address(this));\n', '        \n', '    }\n', '    \n', '    function setRebaser(address rebaser) external onlyOwner() {\n', '        _rebaser = rebaser;\n', '    }\n', '    \n', '    function setTransferFeePercent(uint256 tFeePercent) external onlyOwner() {\n', '\n', '        _tFeePercent = tFeePercent;\n', '    }\n', '    \n', '    function setLimit(uint256 transferAmount, uint256 maxBalance, uint256 sellFeePercent) external onlyOwner() {\n', '        require(_limitTimestamp == 0, "Limit changes not allowed");\n', '        \n', '        _limitTransferAmount = transferAmount;\n', '        _limitMaxBalance = maxBalance;\n', '        _limitSellFeePercent = sellFeePercent;\n', '\n', '        _limitTimestamp = now;\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function rebase(int256 supplyDelta)\n', '        external\n', '        returns (uint256)\n', '    {\n', '        require(_msgSender() == owner() || _msgSender() == _rebaser, "Sender not authorized");\n', '        \n', '        _epoch = _epoch.add(1);\n', '\t\t\n', '        if (supplyDelta == 0) {\n', '            emit LogRebase(_epoch, _totalSupply);\n', '            return _totalSupply;\n', '        }\n', '        \n', '        uint256 uSupplyDelta = (supplyDelta < 0 ? -supplyDelta : supplyDelta).toUint256();\n', '        uint256 rate = uSupplyDelta.mul(RATE_PRECISION).div(_totalSupply);\n', '        uint256 multiplier;\n', '        \n', '        if (supplyDelta < 0) {\n', '            multiplier = RATE_PRECISION.sub(rate);\n', '        } else {\n', '            multiplier = RATE_PRECISION.add(rate);\n', '        }\n', '        \n', '        if (supplyDelta < 0) {\n', '            _totalSupply = _totalSupply.sub(uSupplyDelta);\n', '        } else {\n', '            _totalSupply = _totalSupply.add(uSupplyDelta);\n', '        }\n', '        \n', '        if (_totalSupply > MAX) {\n', '            _totalSupply = MAX;\n', '        }\n', '        \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if(_tOwned[_excluded[i]] > 0) {\n', '                _tOwned[_excluded[i]] = _tOwned[_excluded[i]].mul(multiplier).div(RATE_PRECISION);\n', '            }\n', '        }\n', '        \n', '        emit LogRebase(_epoch, _totalSupply);\n', '\n', '\t\tfor (uint i = 0; i < transactions.length; i++) {\n', '            Transaction storage t = transactions[i];\n', '            if (t.enabled) {\n', '                bool result = externalCall(t.destination, t.data);\n', '                if (!result) {\n', '                    emit TransactionFailed(t.destination, i, t.data);\n', '                    revert("Transaction Failed");\n', '                }\n', '            }\n', '        }\n', '\n', '        return _totalSupply;\n', '    }\n', '    \n', '    /**\n', '     * @notice Adds a transaction that gets called for a downstream receiver of rebases\n', '     * @param destination Address of contract destination\n', '     * @param data Transaction data payload\n', '     */\n', '\t\n', '    function addTransaction(address destination, bytes memory data)\n', '        external\n', '        onlyOwner\n', '    {\n', '        transactions.push(Transaction({\n', '            enabled: true,\n', '            destination: destination,\n', '            data: data\n', '        }));\n', '    }\n', '\t\n', '\t/**\n', '     * @param index Index of transaction to remove.\n', '     *              Transaction ordering may have changed since adding.\n', '     */\n', '\n', '    function removeTransaction(uint index)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(index < transactions.length, "index out of bounds");\n', '\n', '        if (index < transactions.length - 1) {\n', '            transactions[index] = transactions[transactions.length - 1];\n', '        }\n', '\n', '        transactions.pop();\n', '    }\n', '\t\n', '\t/**\n', '     * @param index Index of transaction. Transaction ordering may have changed since adding.\n', '     * @param enabled True for enabled, false for disabled.\n', '     */\n', '\n', '    function setTransactionEnabled(uint index, bool enabled)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(index < transactions.length, "index must be in range of stored tx list");\n', '        transactions[index].enabled = enabled;\n', '    }\n', '\t\n', '\t/**\n', '     * @return Number of transactions, both enabled and disabled, in transactions list.\n', '     */\n', '\n', '    function transactionsSize()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return transactions.length;\n', '    }\n', '\t\n', '\n', '    function externalCall(address destination, bytes memory data)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bool result;\n', '        assembly {  // solhint-disable-line no-inline-assembly\n', '            // "Allocate" memory for output\n', '            // (0x40 is where "free memory" pointer is stored by convention)\n', '            let outputAddress := mload(0x40)\n', '\n', '            // First 32 bytes are the padded length of data, so exclude that\n', '            let dataAddress := add(data, 32)\n', '\n', '            result := call(\n', '                // 34710 is the value that solidity is currently emitting\n', '                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\n', '                // + callValueTransferGas (9000) + callNewAccountGas\n', '                // (25000, in case the destination address does not exist and needs creating)\n', '                sub(gas(), 34710),\n', '\n', '\n', '                destination,\n', '                0, // transfer value in wei\n', '                dataAddress,\n', '                mload(data),  // Size of the input, in bytes. Stored in position 0 of the array.\n', '                outputAddress,\n', '                0  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromRefraction(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    function refract(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,) = _getValues(tAmount, _tFeePercent);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function refractionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _totalSupply, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,) = _getValues(tAmount, _tFeePercent);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,) = _getValues(tAmount, _tFeePercent);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromRefraction(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total refractions");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) public onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromRefraction(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) public onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal override {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal override {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if(sender == address(this) || sender == owner()) {\n', '            _transferBothExcluded(sender, recipient, amount, 0);\n', '        } else if(_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount, _tFeePercent);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '                _transferToExcluded(sender, recipient, amount, _tFeePercent);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount, _tFeePercent);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount, 0);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount, _tFeePercent);\n', '        }\n', '    }\n', '    \n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount, uint256 tFeePercent) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount, tFeePercent);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \n', '        _refractFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount, uint256 tFeePercent) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount, tFeePercent);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n', '        _refractFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount, uint256 tFeePercent) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount, tFeePercent);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n', '        _refractFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount, uint256 tFeePercent) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount, tFeePercent);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n', '        _refractFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _refractFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount, uint256 tFeePercent) private view returns (uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount, tFeePercent);\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 tFeePercent) private pure returns (uint256, uint256) {\n', '        uint256 tFee = tAmount.mul(tFeePercent).div(10000);\n', '        uint256 tTransferAmount = tAmount.sub(tFee);\n', '        return (tTransferAmount, tFee);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _totalSupply;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _totalSupply);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_totalSupply)) return (_rTotal, _totalSupply);\n', '        return (rSupply, tSupply);\n', '    }\n', '}']