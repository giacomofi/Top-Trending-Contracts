['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', 'pragma solidity 0.6.0;\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract SeekGold {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlybelievers () {\n', '        require(myTokens() > 0, "SEEK_GOLD : onlybelievers - Insufficient balance");\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyhodler() {\n', '        require(myDividends(true) > 0, "SEEK_GOLD: onlyhodler - Insufficient balance");\n', '        _;\n', '    }\n', '    \n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty \n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '       require(administrators[_customerAddress], "SEEK_GOLD: Only owner");\n', '        _;\n', '    }\n', '    \n', '    modifier contractLockCheck(){\n', '        require(contractLockStatus == 1, "SEEK_GOLD: Contract is locked");\n', '        _;\n', '    }\n', '    \n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '        \n', '      \n', '        if( onlyAmbassadors && ((contractBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                ambassadors_[_customerAddress] == true &&\n', '                \n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n', '                \n', '            , "Owner only accessible : antiEarlyWhale");\n', '            \n', '            // updated the accumulated quota    \n', '            ambassadorAccumulatedQuota_[_customerAddress] = ambassadorAccumulatedQuota_[_customerAddress].add(_amountOfEthereum);\n', '        \n', '            // execute\n', '            _;\n', '        } else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            _;    \n', '        }\n', '        \n', '    }\n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(address indexed customerAddress,uint256 incomingEthereum,uint256 tokensMinted,address indexed referredBy,uint _date);\n', '    \n', '    event onTokenSell(address indexed customerAddress,uint256 tokensBurned,uint256 ethereumEarned,uint _date);\n', '    \n', '    event onReinvestment(address indexed customerAddress,uint256 ethereumReinvested,uint256 tokensMinted,uint _date);\n', '    \n', '    event onWithdraw(address indexed customerAddress,uint256 ethereumWithdrawn,uint _date);\n', '    \n', '    // ERC20\n', '    event Transfer(address indexed from,address indexed to,uint256 tokens);\n', '    \n', '    event adminShare(address indexed admin1, address indexed admin2,uint _amount,uint _balance,uint _date);\n', '    \n', '    event bonus(address indexed ref1,address indexed ref2,uint refCommission,uint dirCommission,uint _date);\n', '    \n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "SeekGold";\n', '    string public symbol = "Seek";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    uint256 constant internal adminFee = 5 ;\n', '    \n', '    // proof of stake (defaults at 1 token)\n', '    uint256 public stakingRequirement = 1e18;\n', '    \n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n', '    uint256 constant internal ambassadorQuota_ = 1 ether;\n', '    \n', '    \n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) public referralBalance_;\n', '    mapping(address => uint256) public directBonusBalance;\n', '    mapping(address => int256) public payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 private tokenSupply_ = 733390541122419160302584;\n', '    uint256 internal profitPerShare_;\n', '    address public share1;\n', '    address public share2;\n', '    \n', '    uint8 contractLockStatus = 1; // 1 - unlock, 2 - lock\n', '    \n', '    \n', '    mapping(address => address) public userUpline;\n', '    \n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '    \n', '    \n', '    bool public onlyAmbassadors = false;\n', '    \n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    constructor(address admin,address _Share1,address _Share2)\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[admin] = true;\n', '        \n', '        ambassadors_[0x0000000000000000000000000000000000000000] = true;\n', '        \n', '        share1 = _Share1;\n', '        share2 = _Share2;\n', '    }\n', '    \n', '    function changeContractLockStatus( uint8 _status) public onlyAdministrator() returns(bool){\n', '        require((_status == 1) || (_status == 2), "_status should be 1 or 2");\n', '        \n', '        contractLockStatus = _status;\n', '        return true;\n', '    }\n', '    \n', '    function failSafe(address payable _toUser, uint _amount) public onlyAdministrator() returns (bool) {\n', '        require(_toUser != address(0), "Invalid Address");\n', '        require(address(this).balance >= _amount, "Insufficient balance");\n', '\n', '        (_toUser).transfer(_amount);\n', '        return true;\n', '    }\n', '    \n', '     \n', '    /**\n', '     * Converts all incoming Ethereum to tokens for the caller, and passes down the referral address (if any)\n', '     */\n', '    function buy(address _referredBy) public contractLockCheck payable returns(uint256){\n', '        uint ReceivedAmount = msg.value;\n', '        uint amount = ((ReceivedAmount).mul(adminFee)).div(100);\n', '        uint _balance = ReceivedAmount.sub(amount);\n', '        \n', '        purchaseTokens(_balance, _referredBy,amount);\n', '    }\n', '    \n', '    \n', '    receive() payable external{\n', '        uint ReceivedAmount = msg.value;\n', '        uint amount = ReceivedAmount * adminFee / 100;\n', '        uint _balance = ReceivedAmount.sub(amount);\n', '        \n', '        purchaseTokens(_balance, address(0),amount);\n', '    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest() onlyhodler() contractLockCheck public {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '        \n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // retrieve ref. bonus\n', '        _dividends += (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]);\n', '        referralBalance_[_customerAddress] = 0;\n', '        directBonusBalance[_customerAddress] = 0;\n', '        \n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, address(0),0);\n', '        \n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens, block.timestamp);\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit() public contractLockCheck {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        \n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw() onlyhodler() public contractLockCheck{\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '        \n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // add ref. bonus\n', '        _dividends += (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]);\n', '        referralBalance_[_customerAddress] = 0;\n', '        directBonusBalance[_customerAddress] = 0;\n', '        \n', '        // delivery service\n', '        require(address(uint160(_customerAddress)).send(_dividends), "SEEK_GOLD : Transaction failed");\n', '        \n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends, block.timestamp);\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens) public onlybelievers () contractLockCheck{\n', '      \n', '        address _customerAddress = msg.sender;\n', '       \n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress], "SEEK_GOLD : Invalid token");\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = _ethereum\n', '                                   .mul(7)\n', '                                   .div(100);\n', '        uint256 _taxedEthereum = _ethereum.sub(_dividends);\n', '        \n', '        // burn the sold tokens\n', '        tokenSupply_ = tokenSupply_.sub(_tokens);\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_tokens);\n', '        \n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        \n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = profitPerShare_.add((_dividends * magnitude) / tokenSupply_);\n', '        }\n', '        \n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, block.timestamp);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) onlybelievers () contractLockCheck public returns(bool){\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // make sure we have the requested tokens\n', '     \n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress], "Invalid address or Insufficient fund");\n', '        \n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '        \n', '        // liquify 10% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = _amountOfTokens.div(dividendFee_);\n', '        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = tokenSupply_.sub(_tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = tokenBalanceLedger_[_toAddress].add(_taxedTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '        \n', '        // disperse dividends among holders\n', '        profitPerShare_ = profitPerShare_.add((_dividends * magnitude) / tokenSupply_);\n', '        \n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage() onlyAdministrator()  contractLockCheck public {\n', '        onlyAmbassadors = false;\n', '    }\n', '    \n', '   \n', '    function setAdministrator(address _identifier, bool _status) onlyAdministrator() contractLockCheck public {\n', '        require(_identifier != address(0), "Invalid address");\n', '        administrators[_identifier] = _status;\n', '    }\n', '    \n', '   \n', '    function setStakingRequirement(uint256 _amountOfTokens) onlyAdministrator() contractLockCheck public {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '    \n', '    \n', '    function setName(string memory _name) onlyAdministrator() contractLockCheck public{\n', '        name = _name;\n', '    }\n', '    \n', '   \n', '    function setSymbol(string memory _symbol) onlyAdministrator() contractLockCheck public{\n', '        symbol = _symbol;\n', '    }\n', '    \n', '     /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: contractBalance()\n', '     */\n', '    function contractBalance() public view returns(uint){\n', '        return address(this).balance;\n', '    }\n', '        \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '     \n', '    function myTokens() public view returns(uint256){\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '       */ \n', '    function myDividends(bool _includeReferralBonus) internal view returns(uint256){\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]): dividendsOf(_customerAddress) ;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress) view public returns(uint256){\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress) view public returns(uint256)  {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() public view returns(uint256) {\n', '       \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = _ethereum.mul(7).div(100);\n', '            uint256 _taxedEthereum = _ethereum.sub(_dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() public view returns(uint256){\n', '        \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = _ethereum.mul(dividendFee_ + 7).div(100);\n', '            uint256 _taxedEthereum = _ethereum.add(_dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '   \n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256){\n', '        uint256 _dividends = (_ethereumToSpend.mul(dividendFee_ + 7))/100;\n', '        uint256 _taxedEthereum = _ethereumToSpend.sub(_dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '   \n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256){\n', '        require(_tokensToSell <= tokenSupply_ , "InInsufficient amount");\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = _ethereum.mul(7).div(100);\n', '        uint256 _taxedEthereum = _ethereum.sub(_dividends);\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '    function fee(uint256 _amount,uint8 flag) internal{\n', '        if(flag == 1){\n', '            require(address(uint160(share1)).send(_amount/2), "Transaction failed");\n', '            require(address(uint160(share2)).send(_amount/2), "Transaction failed");\n', '        }\n', '    }\n', '    \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy,uint _amount) antiEarlyWhale(_incomingEthereum) internal returns(uint256) {\n', '        uint amount = _incomingEthereum;\n', '        address _customerAddress = msg.sender;\n', '        userUpline[_customerAddress] = _referredBy;\n', '        \n', '        if(_amount > 0){\n', '            require(address(uint160(share1)).send(_amount/2), "Transaction failed");\n', '            require(address(uint160(share2)).send(_amount/2), "Transaction failed");\n', '        }\n', '        \n', '        emit adminShare(share1,share2,_amount/2,_incomingEthereum, block.timestamp);\n', '        \n', '        address ref =  _referredBy;\n', '        address ref2 = userUpline[_referredBy];\n', '        \n', '        // data setup\n', '\n', '        uint256 _undividedDividends = amount.div(dividendFee_);\n', '        uint256 directBonus1 = (amount.mul(3)).div(100);\n', '        uint256 _referralBonus = (amount.mul(7)).div(100);\n', '        uint256 _dividends = _referralBonus;\n', '        uint256 _taxedEthereum = amount.sub((_undividedDividends.add(_referralBonus)));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require(_amountOfTokens > 0 && (_amountOfTokens.add(tokenSupply_) > tokenSupply_) , "Insufficient amount: purchase token");\n', '        \n', '         // is the user referred by a karmalink?\n', '        if(\n', '           // no cheating!\n', '           ref != _customerAddress  && ref2 != _customerAddress &&\n', '            // is this a referred purchase?\n', '            \n', '            ref !=  address(0) && ref2 != address(0) &&\n', '            \n', '            //minimum 1 token referrer\n', '            tokenBalanceLedger_[ref] >= stakingRequirement && tokenBalanceLedger_[ref2] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            \n', '            referralBalance_[ref] = referralBalance_[ref].add(_referralBonus); // 7% commission\n', '            directBonusBalance[ref2] = directBonusBalance[ref2].add(directBonus1); // 3% commission\n', '            \n', '            emit bonus(ref,ref2,_referralBonus,directBonus1,block.timestamp);\n', '            \n', '        }else {\n', '             bool status;\n', '             if(ref != _customerAddress && ref !=  address(0) && tokenBalanceLedger_[ref] >= stakingRequirement){\n', '                referralBalance_[ref] = referralBalance_[ref].add(_referralBonus); // 7% commission\n', '                _dividends = _dividends.add(directBonus1);\n', '                _fee = _dividends * magnitude;\n', '                status = true;\n', '            \n', '                emit bonus(ref,ref2,_referralBonus,0,block.timestamp);\n', '             }\n', '             \n', '             if(ref2 != _customerAddress && ref2 !=  address(0) && tokenBalanceLedger_[ref2] >= stakingRequirement){\n', '                 directBonusBalance[ref2] = directBonusBalance[ref2].add(directBonus1); // 3% commission\n', '                _dividends = _dividends.add(_referralBonus);\n', '                _fee = _dividends * magnitude;\n', '                status = true;\n', '                \n', '                emit bonus(ref,ref2,0,directBonus1,block.timestamp); \n', '             }\n', '             \n', '             if(status != true) {\n', '                // no ref purchase\n', '                // add the referral bonus back to the global dividends cake\n', '                 uint256 _bonus =  _referralBonus.add(directBonus1);\n', '                _dividends = _dividends.add(_bonus);\n', '                _fee = _dividends * magnitude;\n', '                \n', '                emit bonus(address(0),address(0),_bonus,_fee,block.timestamp); \n', '             }\n', '        }\n', '        \n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = tokenSupply_.add(_amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '            \n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].add(_amountOfTokens);\n', '        \n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '        \n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, amount, _amountOfTokens, ref, block.timestamp);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256){\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '        (\n', '            (\n', '                // underflow attempts BTFO\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ).sub(_tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', '          */\n', '     function tokensToEthereum_(uint256 _tokens) internal view returns(uint256) {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ).sub((tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}']