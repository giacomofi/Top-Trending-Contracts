['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', 'pragma solidity 0.8.6;\n', '\n', '// "SPDX-License-Identifier: MIT"\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address _owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address transferOwner) public onlyOwner {\n', '        require(transferOwner != newOwner);\n', '        newOwner = transferOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/// Ethereum\n', 'contract Bridge is Owned{\n', '    address constant public TBCC_TOKEN_CONTRACT = 0x2Ecb95eB932DfBBb71545f4D23CA303700aC855F;\n', '    uint256 constant public  MAX_GAS_FOR_CALLING_ERC20 = 70000;\n', '  \n', '    uint256 public relayFee;\n', '    \n', '    event transferOutSuccess(address senderAddr, uint256 amount);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        relayFee = 4500000000000000;\n', '    }\n', '\n', '\n', '    function transferOut(uint256 amount) external payable returns (bool) {\n', '        require(msg.value > relayFee);\n', '        require(IERC20(TBCC_TOKEN_CONTRACT).transferFrom(msg.sender, address(this), amount));  \n', '        emit transferOutSuccess(msg.sender, amount);\n', '        return true;\n', '    }\n', '\n', '    function withdrawTokens(address payable to, uint256 amount) external onlyOwner returns(uint256) {\n', '        uint256 actualBalance = IERC20(TBCC_TOKEN_CONTRACT).balanceOf{gas: MAX_GAS_FOR_CALLING_ERC20}(address(this));\n', '        uint256 actualAmount = amount < actualBalance ? amount : actualBalance;\n', '        require(IERC20(TBCC_TOKEN_CONTRACT).transfer{gas: MAX_GAS_FOR_CALLING_ERC20}(to, actualAmount));\n', '        return actualAmount;\n', '    }\n', '\n', '    function withdrawCoins(address to, uint256 amount) external onlyOwner returns(uint256) {\n', '        (bool succ, ) = payable(to).call{value: amount }("");\n', '        require(succ, "TRANSFER FAILED");\n', '        return amount;\n', '    }\n', '\n', '    function updateRelayFee(uint256 amount) external onlyOwner returns(uint256) {\n', '        relayFee = amount;\n', '        return relayFee;\n', '    }\n', '}']