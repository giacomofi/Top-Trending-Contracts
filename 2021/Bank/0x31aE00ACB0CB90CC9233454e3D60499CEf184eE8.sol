['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-05\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function depositTokens(uint256 _amount) external;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\n', '    function withdraw(uint) external;\n', '    function withdrawTokens(uint256 _amount) external;\n', '    function balanceOf(address _account) external view returns (uint256);\n', '    function approve(address _spender, uint256 _amount) external returns (bool);\n', '}\n', '\n', 'contract RootRouterWrapper {\n', '\n', '    IUniswapV2Router02 router;\n', '    address public KETH;\n', '    address public WETH;\n', '    address public TOKEN;\n', '\n', '    constructor(address _router, address _KETH, address _WETH, address _TOKEN) public payable {\n', '        router = IUniswapV2Router02(_router);\n', '        KETH = _KETH;\n', '        WETH = _WETH;\n', '        TOKEN = _TOKEN;\n', '        IWETH(KETH).approve(_router, 100000000000000000 * 1e18);\n', '        IWETH(WETH).approve(_router, 100000000000000000 * 1e18);\n', '        IWETH(TOKEN).approve(_router, 10000000000000000 * 1e18);\n', '    }\n', '\n', '    // This function overrides the swapExactTokensForETHSupportingFeeOnTransferTokens of the router\n', '    // This function is used to trade TOKEN for WETH using KETH as middleware\n', '    // This function will take the TOKEN and sell it for KETH and unwrap the KETH for WETH.\n', '    // Path should be [TOKEN/KETH/WETH]\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external {\n', '        IWETH(TOKEN).transferFrom(msg.sender, address(this), amountIn);\n', '        uint256 tokenBalance = IWETH(TOKEN).balanceOf(address(this));\n', '        address[] memory newPath = new address[](2);\n', '        newPath[0] = path[0];\n', '        newPath[1] = path[1];\n', '        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenBalance, amountOutMin, newPath, address(this), deadline);\n', '        uint256 balance = IWETH(KETH).balanceOf(address(this));\n', '        IWETH(KETH).withdrawTokens(balance);\n', '        IWETH(WETH).transfer(to, balance);\n', '    }\n', '\n', '    // This function overrides the swapExactETHForTokensSupportingFeeOnTransferTokens\n', '    // This function is used to trade WETH for TOKEN using KETH as middleware\n', '    // This function will take the WETH wrap it to KETH and buy the TOKEN.\n', '    // Path should be [WETH/KETH/TOKEN]\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        uint256 amountIn = msg.value;\n', '        IWETH(KETH).deposit{value: amountIn}();\n', '        address[] memory newPath = new address[](2);\n', '        newPath[0] = path[1];\n', '        newPath[1] = path[2];\n', '        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, newPath, to, deadline);\n', '    }\n', '\n', '\n', '}']