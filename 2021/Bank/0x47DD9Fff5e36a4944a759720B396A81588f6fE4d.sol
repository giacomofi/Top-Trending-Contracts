['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '  function initialize() external;\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '  function mint(address account, uint amount) external;\n', '  function burn(address account, uint amount) external;\n', '  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface IUniswapV3Pool {\n', '\n', '  function slot0() external view returns (\n', '    uint160 sqrtPriceX96,\n', '    int24 tick,\n', '    uint16 observationIndex,\n', '    uint16 observationCardinality,\n', '    uint16 observationCardinalityNext,\n', '    uint8 feeProtocol,\n', '    bool unlocked\n', '  );\n', '\n', '  function increaseObservationCardinalityNext(\n', '    uint16 observationCardinalityNext\n', '  ) external;\n', '}\n', '\n', 'interface IUniswapV3Factory {\n', '\n', '  function getPool(\n', '    address tokenA,\n', '    address tokenB,\n', '    uint24 fee\n', '  ) external view returns (address pool);\n', '}\n', '\n', 'interface ILinkOracle {\n', '  function latestAnswer() external view returns(uint);\n', '  function decimals() external view returns(int256);\n', '}\n', '\n', 'interface IUniswapPriceConverter {\n', '\n', '  function assetToAssetThruRoute(\n', '    address _tokenIn,\n', '    uint256 _amountIn,\n', '    address _tokenOut,\n', '    uint32 _twapPeriod,\n', '    address _routeThruToken,\n', '    uint24[2] memory _poolFees\n', '  ) external view returns (uint256 amountOut);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function isOwner() public view returns (bool) {\n', '    return msg.sender == owner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(owner, address(0));\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract UniswapV3Oracle is Ownable {\n', '\n', '  IUniswapV3Factory public constant uniFactory    = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\n', '  ILinkOracle       public constant wethOracle    = ILinkOracle(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '  address           public constant WETH          = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '  uint24            public constant WETH_POOL_FEE = 3000;\n', '\n', '  struct Pool {\n', '    address pairToken;\n', '    uint24  poolFee;\n', '  }\n', '\n', '  uint32 public twapPeriod;\n', '  uint   public minObservations;\n', '\n', '  IUniswapPriceConverter public uniPriceConverter;\n', '\n', '  mapping(address => Pool) public pools;\n', '\n', '  event PoolAdded(address indexed token);\n', '  event PoolRemoved(address indexed token);\n', '\n', '  constructor(\n', '    IUniswapPriceConverter _uniPriceConverter,\n', '    uint32       _twapPeriod,\n', '    uint         _minObservations\n', '  ) {\n', '    uniPriceConverter = _uniPriceConverter;\n', '    twapPeriod        = _twapPeriod;\n', '    minObservations   = _minObservations;\n', '  }\n', '\n', '  function addPool(\n', '    address _token,\n', '    address _pairToken,\n', '    uint24  _poolFee\n', '  ) public onlyOwner {\n', '\n', '    _validatePool(_token, _pairToken, _poolFee);\n', '\n', '    pools[_token] = Pool({\n', '      pairToken: _pairToken,\n', '      poolFee: _poolFee\n', '    });\n', '\n', '    emit PoolAdded(_token);\n', '  }\n', '\n', '  function removePool(address _token) public onlyOwner {\n', '    pools[_token] = Pool(address(0), 0);\n', '    emit PoolRemoved(_token);\n', '  }\n', '\n', '  function setUniPriceConverter(IUniswapPriceConverter _value) public onlyOwner {\n', '    uniPriceConverter = _value;\n', '  }\n', '\n', '  function setTwapPeriod(uint32 _value) public onlyOwner {\n', '    twapPeriod = _value;\n', '  }\n', '\n', '  function setMinObservations(uint _value) public onlyOwner {\n', '    minObservations = _value;\n', '  }\n', '\n', '  function tokenPrice(address _token) public view returns(uint) {\n', '    require(pools[_token].pairToken != address(0), "UniswapV3Oracle: token not supported");\n', '    _validatePool(_token, pools[_token].pairToken, pools[_token].poolFee);\n', '\n', '    uint ethValue = uniPriceConverter.assetToAssetThruRoute(\n', '      _token,\n', '      10 ** IERC20(_token).decimals(),\n', '      WETH,\n', '      twapPeriod,\n', '      pools[_token].pairToken,\n', '      [pools[_token].poolFee, WETH_POOL_FEE]\n', '    );\n', '\n', '    return ethValue * ethPrice() / 1e18;\n', '  }\n', '\n', '  function ethPrice() public view returns(uint) {\n', '    return wethOracle.latestAnswer() * 1e10;\n', '  }\n', '\n', '  function isPoolValid(address _token, address _pairToken, uint24 _poolFee) public view returns(bool) {\n', '    address poolAddress = uniFactory.getPool(_token, _pairToken, _poolFee);\n', '    if (poolAddress == address(0)) { return false; }\n', '\n', '    (, , , , uint observationSlots , ,) = IUniswapV3Pool(poolAddress).slot0();\n', '    return observationSlots >= minObservations;\n', '  }\n', '\n', '  function tokenSupported(address _token) public view returns(bool) {\n', '    return pools[_token].pairToken != address(0);\n', '  }\n', '\n', '  function _validatePool(address _token, address _pairToken, uint24 _poolFee) internal view {\n', '    require(isPoolValid(_token, _pairToken, _poolFee), "UniswapV3Oracle: invalid pool");\n', '  }\n', '}']