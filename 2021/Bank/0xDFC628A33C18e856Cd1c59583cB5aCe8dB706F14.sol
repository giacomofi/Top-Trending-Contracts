['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', '/* Projekt Gold, by The Fair Token Project\n', ' * 100% LP Lock\n', ' * 0% burn\n', ' * \n', ' * ****USING FTPAntiBot****\n', ' *\n', ' * Projekt Gold uses FTPAntiBot to automatically detect scalping and pump-and-dump bots\n', ' * Visit FairTokenProject.com/#antibot to learn how to use AntiBot with your project\n', ' * Your contract must hold 5Bil $GOLD(ProjektGold) or 5Bil $GREEN(ProjektGreen) in order to make calls on mainnet\n', ' * Calls on kovan testnet require > 1 $GOLD or $GREEN\n', ' * FairTokenProject is giving away 500Bil $GREEN to projects on a first come first serve basis for use of AntiBot\n', ' *\n', ' * Projekt Telegram: t.me/projektgold\n', ' * FTP Telegram: t.me/fairtokenproject\n', ' * \n', ' * If you use bots/contracts to trade on ProjektGold you are hereby declaring your investment in the project a DONATION\n', ' */ \n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private m_Owner;\n', '    address private m_Admin;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        m_Owner = msgSender;\n', '        m_Admin = 0x63f540CEBB69cC683Be208aFCa9Aaf1508EfD98A; // Will be able to call all onlyOwner() functions\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return m_Owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(m_Owner == _msgSender() || m_Admin == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '}  \n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface FTPAntiBot {\n', '    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\n', '    function blackList(address _address, address _origin) external; //Do not copy this, only callable by original contract. Tx will fail\n', '    function registerBlock(address _recipient, address _sender) external;\n', '}\n', '\n', 'contract ProjektGold is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 private constant TOTAL_SUPPLY = 100000000000000 * 10**9;\n', '    string private m_Name = "Projekt Gold";\n', "    string private m_Symbol = unicode'GOLD ðŸŸ¡';\n", '    uint8 private m_Decimals = 9;\n', '    \n', '    uint256 private m_BanCount = 0;\n', '    uint256 private m_TxLimit  = 500000000000 * 10**9;\n', '    uint256 private m_SafeTxLimit  = m_TxLimit;\n', '    uint256 private m_WalletLimit = m_SafeTxLimit.mul(4);\n', '    uint256 private m_TaxFee;\n', '    uint256 private m_MinStake;\n', '    uint256 private m_totalEarnings = 0;\n', '    uint256 private m_previousBalance = 0;\n', '    uint256 [] private m_iBalance;\n', '    \n', '    uint8 private m_DevFee = 5;\n', '    uint8 private m_investorCount = 0;\n', '    \n', '    address payable private m_FeeAddress;\n', '    address private m_UniswapV2Pair;\n', '    \n', '    bool private m_TradingOpened = false;\n', '    bool private m_IsSwap = false;\n', '    bool private m_SwapEnabled = false;\n', '    bool private m_InvestorsSet = false;\n', '    bool private m_OwnerApprove = false;\n', '    bool private m_InvestorAApprove = false;\n', '    bool private m_InvestorBApprove = false;\n', '    \n', '    mapping (address => bool) private m_Bots;\n', '    mapping (address => bool) private m_Staked;\n', '    mapping (address => bool) private m_ExcludedAddresses;\n', '    mapping (address => bool) private m_InvestorController;\n', '    mapping (address => uint8) private m_InvestorId;\n', '    mapping (address => uint256) private m_Stake;\n', '    mapping (address => uint256) private m_Balances;\n', '    mapping (address => address payable) private m_InvestorPayout;\n', '    mapping (address => mapping (address => uint256)) private m_Allowances;\n', '    \n', '    FTPAntiBot private AntiBot;\n', '    IUniswapV2Router02 private m_UniswapV2Router;\n', '\n', '    event MaxOutTxLimit(uint MaxTransaction);\n', '    event Staked(bool StakeVerified, uint256 StakeAmount);\n', '    event BalanceOfInvestor(uint256 CurrentETHBalance);\n', '    event BanAddress(address Address, address Origin);\n', '    \n', '    modifier lockTheSwap {\n', '        m_IsSwap = true;\n', '        _;\n', '        m_IsSwap = false;\n', '    }\n', '    modifier onlyInvestor {\n', '        require(m_InvestorController[_msgSender()] == true, "Not an Investor");\n', '        _;\n', '    }\n', '\n', '    receive() external payable {\n', '        m_Stake[msg.sender] += msg.value;\n', '    }\n', '\n', '    constructor () {\n', '        FTPAntiBot _antiBot = FTPAntiBot(0x88C4dEDd24DC99f5C9b308aC25DA34889A5073Ab);\n', '        AntiBot = _antiBot;\n', '        \n', '        m_Balances[address(this)] = TOTAL_SUPPLY;\n', '        m_ExcludedAddresses[owner()] = true;\n', '        m_ExcludedAddresses[address(this)] = true;\n', '        \n', '        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\n', '    }\n', '\n', '// ####################\n', '// ##### DEFAULTS #####\n', '// ####################\n', '\n', '    function name() public view returns (string memory) {\n', '        return m_Name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return m_Symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return m_Decimals;\n', '    }\n', '\n', '// #####################\n', '// ##### OVERRIDES #####\n', '// #####################\n', '\n', '    function totalSupply() public pure override returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '\n', '    function balanceOf(address _account) public view override returns (uint256) {\n', '        return m_Balances[_account];\n', '    }\n', '\n', '    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_msgSender(), _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view override returns (uint256) {\n', '        return m_Allowances[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public override returns (bool) {\n', '        _approve(_msgSender(), _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\n', '        _transfer(_sender, _recipient, _amount);\n', '        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '// ####################\n', '// ##### PRIVATES #####\n', '// ####################\n', '\n', '    function _readyToTax(address _sender) private view returns(bool) {\n', '        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled;\n', '    }\n', '\n', '    function _pleb(address _sender, address _recipient) private view returns(bool) {\n', '        return _sender != owner() && _recipient != owner() && m_TradingOpened;\n', '    }\n', '\n', '    function _senderNotUni(address _sender) private view returns(bool) {\n', '        return _sender != m_UniswapV2Pair;\n', '    }\n', '\n', '    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\n', '        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\n', '    }\n', '\n', '    function _walletCapped(address _recipient) private view returns(bool) {\n', '        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\n', '    }\n', '\n', '    function _approve(address _owner, address _spender, uint256 _amount) private {\n', '        require(_owner != address(0), "ERC20: approve from the zero address");\n', '        require(_spender != address(0), "ERC20: approve to the zero address");\n', '        m_Allowances[_owner][_spender] = _amount;\n', '        emit Approval(_owner, _spender, _amount);\n', '    }\n', '\n', '    function _transfer(address _sender, address _recipient, uint256 _amount) private {\n', '        require(_sender != address(0), "ERC20: transfer from the zero address");\n', '        require(_recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(_amount > 0, "Transfer amount must be greater than zero");\n', '                        \n', '        uint8 _fee = _setFee(_sender, _recipient);\n', '        uint256 _feeAmount = _amount.div(100).mul(_fee);\n', '        uint256 _newAmount = _amount.sub(_feeAmount);\n', '        \n', '        _checkBot(_recipient, _sender, tx.origin); //calls AntiBot for results\n', '        \n', '        if(_walletCapped(_recipient))\n', '            require(balanceOf(_recipient) < m_WalletLimit);\n', '    \n', '        if(_senderNotUni(_sender))\n', '            require(!m_Bots[_sender]); // Local logic for banning based on AntiBot results \n', '        \n', '        if (_pleb(_sender, _recipient)) {\n', '            if (_txRestricted(_sender, _recipient)) \n', '                require(_amount <= m_TxLimit);\n', '            _tax(_sender);\n', '        }\n', '        \n', '        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\n', '        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\n', '        m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\n', '        \n', '        emit Transfer(_sender, _recipient, _newAmount);\n', '        AntiBot.registerBlock(_sender, _recipient); //Tells AntiBot to start watching\n', '\t}\n', '\t\n', '\tfunction _checkBot(address _recipient, address _sender, address _origin) private {\n', '        if((_recipient == m_UniswapV2Pair || _sender == m_UniswapV2Pair) && m_TradingOpened){\n', '            bool recipientAddress = AntiBot.scanAddress(_recipient, m_UniswapV2Pair, _origin); // Get AntiBot result\n', '            bool senderAddress = AntiBot.scanAddress(_sender, m_UniswapV2Pair, _origin); // Get AntiBot result\n', '            if(recipientAddress){\n', '                _banSeller(_recipient);\n', '                _banSeller(_origin);\n', '                AntiBot.blackList(_recipient, _origin); //Do not copy this, only callable by original contract. Tx will fail\n', '                emit BanAddress(_recipient, _origin);\n', '            }\n', '            if(senderAddress){\n', '                _banSeller(_sender);\n', '                _banSeller(_origin);\n', '                AntiBot.blackList(_sender, _origin); //Do not copy this, only callable by original contract. Tx will fail\n', '                emit BanAddress(_sender, _origin);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function _banSeller(address _address) private {\n', '        if(!m_Bots[_address])\n', '            m_BanCount += 1;\n', '        m_Bots[_address] = true;\n', '    }\n', '\t\n', '\tfunction _setFee(address _sender, address _recipient) private returns(uint8){\n', '        bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\n', '        if(!_takeFee)\n', '            m_DevFee = 0;\n', '        if(_takeFee)\n', '            m_DevFee = 5;\n', '        return m_DevFee;\n', '    }\n', '\n', '    function _tax(address _sender) private {\n', '        uint256 _tokenBalance = balanceOf(address(this));\n', '        if (_readyToTax(_sender)) {\n', '            _swapTokensForETH(_tokenBalance);\n', '            _disperseEth();\n', '        }\n', '    }\n', '\n', '    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\n', '        address[] memory _path = new address[](2);\n', '        _path[0] = address(this);\n', '        _path[1] = m_UniswapV2Router.WETH();\n', '        _approve(address(this), address(m_UniswapV2Router), _amount);\n', '        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            _amount,\n', '            0,\n', '            _path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function _disperseEth() private {\n', '        uint256 _earnings = m_Stake[address(m_UniswapV2Router)].sub(m_previousBalance);\n', '        uint256 _investorShare = _earnings.div(5).mul(3);\n', '        uint256 _devShare;\n', '        \n', '        if(m_InvestorsSet)\n', '            _devShare = _earnings.sub(_investorShare);\n', '        else {\n', '            m_iBalance = [0, 0];\n', '            _investorShare = 0;\n', '            _devShare = _earnings;\n', '        }   \n', '        \n', '        m_previousBalance = m_Stake[address(m_UniswapV2Router)];\n', '        m_iBalance[0] += _investorShare.div(2);\n', '        m_iBalance[1] += _investorShare.div(2);\n', '        m_FeeAddress.transfer(_devShare);\n', '    }\n', '    \n', '    \n', '// ####################\n', '// ##### EXTERNAL #####\n', '// ####################\n', '    \n', '    function banCount() external view returns (uint256) {\n', '        return m_BanCount;\n', '    }\n', '    \n', '    function investorBalance(address payable _address) external view returns (uint256) {\n', '        uint256 _balance = m_iBalance[m_InvestorId[_address]].div(10**13);\n', '        return _balance;\n', '    }\n', '    \n', '    function totalEarnings() external view returns (uint256) {\n', '        return m_Stake[address(m_UniswapV2Router)];\n', '    }\n', '    \n', '    function checkIfBanned(address _address) external view returns (bool) { //Tool for traders to verify ban status\n', '        bool _banBool = false;\n', '        if(m_Bots[_address])\n', '            _banBool = true;\n', '        return _banBool;\n', '    }\n', '    \n', '// #########################\n', '// ##### ONLY INVESTOR #####\n', '// #########################\n', '\n', '    function setPayoutAddress(address payable _payoutAddress) external onlyInvestor {\n', '        require(m_Staked[_msgSender()] == true, "Please stake first");\n', '        m_InvestorController[_payoutAddress] = true;\n', '        m_InvestorPayout[_msgSender()] = _payoutAddress;\n', '        m_InvestorId[_payoutAddress] = m_investorCount;\n', '        m_investorCount += 1;\n', '    }\n', '    \n', '    function investorWithdraw() external onlyInvestor {\n', '        m_InvestorPayout[_msgSender()].transfer(m_iBalance[m_InvestorId[_msgSender()]]);\n', '        m_iBalance[m_InvestorId[_msgSender()]] -= m_iBalance[m_InvestorId[_msgSender()]];\n', '    }\n', '    \n', '    function verifyStake() external onlyInvestor {\n', '        require(!m_Staked[_msgSender()], "Already verified");\n', '        if(m_Stake[_msgSender()] >= m_MinStake){\n', '            m_Staked[_msgSender()] = true;\n', '            emit Staked (m_Staked[_msgSender()], m_Stake[_msgSender()]);\n', '        }\n', '        else\n', '            emit Staked (m_Staked[_msgSender()], m_Stake[_msgSender()]);\n', '    }\n', '    \n', '    function investorAuthorize() external onlyInvestor {\n', '        if(m_InvestorId[_msgSender()] == 0)\n', '            m_InvestorAApprove = true;\n', '        if(m_InvestorId[_msgSender()] == 1)\n', '            m_InvestorBApprove = true;\n', '    }\n', '    \n', '    function emergencyWithdraw() external onlyInvestor {\n', '        require(m_InvestorAApprove && m_InvestorBApprove && m_TradingOpened, "All parties must consent");\n', '        m_InvestorPayout[_msgSender()].transfer(address(this).balance);\n', '        m_InvestorAApprove = false;\n', '        m_InvestorBApprove = false;\n', '    }\n', '\n', '// ######################\n', '// ##### ONLY OWNER #####\n', '// ######################\n', '\n', '    function addLiquidity() external onlyOwner() {\n', '        require(!m_TradingOpened,"trading is already open");\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        m_UniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\n', '        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        m_SwapEnabled = true;\n', '        m_TradingOpened = true;\n', '        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\n', '    }\n', '\n', '    function setTxLimitMax() external onlyOwner() {\n', '        m_TxLimit = m_WalletLimit;\n', '        m_SafeTxLimit = m_WalletLimit;\n', '        emit MaxOutTxLimit(m_TxLimit);\n', '    }\n', '    \n', '    function manualBan(address _a) external onlyOwner() {\n', '       _banSeller(_a);\n', '    }\n', '    \n', '    function removeBan(address _a) external onlyOwner() {\n', '        m_Bots[_a] = false;\n', '        m_BanCount -= 1;\n', '    }\n', '    \n', '    function contractBalance() external view onlyOwner() returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function setFeeAddress(address payable _feeAddress) external onlyOwner() {\n', '        m_FeeAddress = _feeAddress;    \n', '        m_ExcludedAddresses[_feeAddress] = true;\n', '    }\n', '    \n', '    function setInvestors(address _investorAddressA, address _investorAddressB, uint256 _minStake) external onlyOwner() {\n', '        require(!m_InvestorsSet, "Already declared investors");\n', '        m_InvestorController[_investorAddressA] = true;\n', '        m_InvestorController[_investorAddressB] = true;\n', '        m_iBalance = [0, 0, 0, 0, 0, 0];\n', '        m_Staked[_investorAddressA] = false;\n', '        m_Staked[_investorAddressB] = false;\n', '        m_MinStake = _minStake;\n', '        m_InvestorsSet = true;\n', '    }\n', '    \n', '    function assignAntiBot(address _address) external onlyOwner() { // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\n', '        FTPAntiBot _antiBot = FTPAntiBot(_address);                // Creating a function to toggle AntiBot is a good design practice as well\n', '        AntiBot = _antiBot;\n', '    }\n', '}']