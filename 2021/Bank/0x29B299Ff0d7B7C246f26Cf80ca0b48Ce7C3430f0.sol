['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.4;\n', '\n', 'import "../interfaces/IContractsRegistry.sol";\n', '\n', 'abstract contract AbstractDependant {\n', '    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\n', '    bytes32 private constant _INJECTOR_SLOT =\n', '        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\n', '\n', '    modifier onlyInjectorOrZero() {\n', '        address _injector = injector();\n', '\n', '        require(_injector == address(0) || _injector == msg.sender, "Dependant: Not an injector");\n', '        _;\n', '    }\n', '\n', '    function setInjector(address _injector) external onlyInjectorOrZero {\n', '        bytes32 slot = _INJECTOR_SLOT;\n', '\n', '        assembly {\n', '            sstore(slot, _injector)\n', '        }\n', '    }\n', '\n', '    /// @dev has to apply onlyInjectorOrZero() modifier\n', '    function setDependencies(IContractsRegistry) external virtual;\n', '\n', '    function injector() public view returns (address _injector) {\n', '        bytes32 slot = _INJECTOR_SLOT;\n', '\n', '        assembly {\n', '            _injector := sload(slot)\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";\n', '\n', 'import "../interfaces/helpers/IPriceFeed.sol";\n', '\n', 'import "../abstract/AbstractDependant.sol";\n', '\n', 'contract PriceFeed is IPriceFeed, AbstractDependant {\n', '    IUniswapV2Router02 public uniswapRouter;\n', '\n', '    address public wethToken;\n', '    address public bmiToken;\n', '    address public daiToken;\n', '\n', '    function setDependencies(IContractsRegistry _contractsRegistry)\n', '        external\n', '        override\n', '        onlyInjectorOrZero\n', '    {\n', '        uniswapRouter = IUniswapV2Router02(_contractsRegistry.getUniswapRouterContract());\n', '        wethToken = _contractsRegistry.getWETHContract();\n', '        bmiToken = _contractsRegistry.getBMIContract();\n', '        daiToken = _contractsRegistry.getDAIContract();\n', '    }\n', '\n', '    function howManyBMIsInDAI(uint256 daiAmount) external view override returns (uint256) {\n', '        if (daiAmount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        address[] memory pairs = new address[](3);\n', '        pairs[0] = daiToken;\n', '        pairs[1] = wethToken;\n', '        pairs[2] = bmiToken;\n', '\n', '        uint256[] memory amounts = uniswapRouter.getAmountsOut(daiAmount, pairs);\n', '\n', '        return amounts[amounts.length - 1];\n', '    }\n', '\n', '    function howManyDAIsInBMI(uint256 bmiAmount) external view override returns (uint256) {\n', '        if (bmiAmount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        address[] memory pairs = new address[](3);\n', '        pairs[0] = bmiToken;\n', '        pairs[1] = wethToken;\n', '        pairs[2] = daiToken;\n', '\n', '        uint256[] memory amounts = uniswapRouter.getAmountsOut(bmiAmount, pairs);\n', '\n', '        return amounts[amounts.length - 1];\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IContractsRegistry {\n', '    function getUniswapRouterContract() external view returns (address);\n', '\n', '    function getUniswapBMIToETHPairContract() external view returns (address);\n', '\n', '    function getWETHContract() external view returns (address);\n', '\n', '    function getDAIContract() external view returns (address);\n', '\n', '    function getBMIContract() external view returns (address);\n', '\n', '    function getPriceFeedContract() external view returns (address);\n', '\n', '    function getPolicyBookRegistryContract() external view returns (address);\n', '\n', '    function getPolicyBookFabricContract() external view returns (address);\n', '\n', '    function getBMIDAIStakingContract() external view returns (address);\n', '\n', '    function getRewardsGeneratorContract() external view returns (address);\n', '\n', '    function getBMIUtilityNFTContract() external view returns (address);\n', '\n', '    function getLiquidityMiningContract() external view returns (address);\n', '\n', '    function getClaimingRegistryContract() external view returns (address);\n', '\n', '    function getPolicyRegistryContract() external view returns (address);\n', '\n', '    function getLiquidityRegistryContract() external view returns (address);\n', '\n', '    function getClaimVotingContract() external view returns (address);\n', '\n', '    function getReinsurancePoolContract() external view returns (address);\n', '\n', '    function getPolicyBookAdminContract() external view returns (address);\n', '\n', '    function getPolicyQuoteContract() external view returns (address);\n', '\n', '    function getLegacyBMIStakingContract() external view returns (address);\n', '\n', '    function getBMIStakingContract() external view returns (address);\n', '\n', '    function getSTKBMIContract() external view returns (address);\n', '\n', '    function getVBMIContract() external view returns (address);\n', '\n', '    function getLegacyLiquidityMiningStakingContract() external view returns (address);\n', '\n', '    function getLiquidityMiningStakingContract() external view returns (address);\n', '\n', '    function getReputationSystemContract() external view returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.4;\n', '\n', 'interface IPriceFeed {\n', '    function howManyBMIsInDAI(uint256 daiAmount) external view returns (uint256);\n', '\n', '    function howManyDAIsInBMI(uint256 bmiAmount) external view returns (uint256);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']