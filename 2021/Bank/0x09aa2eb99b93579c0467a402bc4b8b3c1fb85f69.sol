['// Be Name KHODA\n', '// Bime Abolfazl\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.4;\n', '\n', 'import "./AccessControl.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', '\n', 'interface IBPool {\n', '\tfunction totalSupply() external view returns (uint);\n', '\tfunction exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '\tfunction exitswapPoolAmountIn(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut) external returns (uint256 tokenAmountOut);\n', '\tfunction transferFrom(address src, address dst, uint256 amt) external returns (bool);\n', '}\n', '\n', 'interface IERC20 {\n', '\tfunction approve(address dst, uint256 amt) external returns (bool);\n', '\tfunction totalSupply() external view returns (uint);\n', '\tfunction burn(address from, uint256 amount) external;\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\tfunction transferFrom(address src, address dst, uint256 amt) external returns (bool);\n', '\tfunction balanceOf(address owner) external view returns (uint);\n', '}\n', '\n', 'interface Vault {\n', '\tfunction lockFor(uint256 amount, address _user) external returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '\tfunction removeLiquidityETH(\n', '\t\taddress token,\n', '\t\tuint256 liquidity,\n', '\t\tuint256 amountTokenMin,\n', '\t\tuint256 amountETHMin,\n', '\t\taddress to,\n', '\t\tuint256 deadline\n', '\t) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '\tfunction removeLiquidity(\n', '\t\taddress tokenA,\n', '\t\taddress tokenB,\n', '\t\tuint256 liquidity,\n', '\t\tuint256 amountAMin,\n', '\t\tuint256 amountBMin,\n', '\t\taddress to,\n', '\t\tuint256 deadline\n', '\t) external returns (uint256 amountA, uint256 amountB);\n', '\n', '\tfunction swapExactTokensForTokens(\n', '\t\tuint256 amountIn,\n', '\t\tuint256 amountOutMin,\n', '\t\taddress[] calldata path,\n', '\t\taddress to,\n', '\t\tuint256 deadline\n', '\t) external returns (uint256[] memory amounts);\n', '\n', '\tfunction swapExactTokensForETH(\n', '\t\tuint amountIn,\n', '\t\tuint amountOutMin,\n', '\t\taddress[] calldata path,\n', '\t\taddress to,\n', '\t\tuint deadline\n', '\t) external returns (uint[] memory amounts);\n', '\n', '\tfunction getAmountsOut(uint256 amountIn, address[] memory path) external  returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface AutomaticMarketMaker {\n', '\tfunction calculateSaleReturn(uint256 tokenAmount) external view returns (uint256);\n', '\tfunction calculatePurchaseReturn(uint256 etherAmount) external returns (uint256);\n', '\tfunction buy(uint256 _tokenAmount) external payable;\n', '\tfunction sell(uint256 tokenAmount, uint256 _etherAmount) external;\n', '\tfunction withdrawPayments(address payable payee) external;\n', '}\n', '\n', 'contract SealedSwapper is AccessControl, ReentrancyGuard {\n', '\n', '\tbytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR_ROLE");\n', '\tbytes32 public constant ADMIN_SWAPPER_ROLE = keccak256("ADMIN_SWAPPER_ROLE");\n', '\tbytes32 public constant TRUSTY_ROLE = keccak256("TRUSTY_ROLE");\n', '\t\n', '\tIBPool public bpt;\n', '\tIUniswapV2Router02 public uniswapRouter;\n', '\tAutomaticMarketMaker public AMM;\n', '\tVault public sdeaVault;\n', '\tIERC20 public sdeus;\n', '\tIERC20 public sdea;\n', '\tIERC20 public sUniDD;\n', '\tIERC20 public sUniDE;\n', '\tIERC20 public sUniDU;\n', '\tIERC20 public dea;\n', '\tIERC20 public deus;\n', '\tIERC20 public usdc;\n', '\tIERC20 public uniDD;\n', '\tIERC20 public uniDU;\n', '\tIERC20 public uniDE;\n', '\n', '\taddress[] public usdc2wethPath =  [0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2];\n', '\taddress[] public deus2deaPath =  [0x3b62F3820e0B035cc4aD602dECe6d796BC325325, 0x80aB141F324C3d6F2b18b030f1C4E95d4d658778];\n', '\t\n', '\n', '\tuint256 public MAX_INT = type(uint256).max;\n', '\tuint256 public scale = 1e18;\n', '\tuint256 public DDRatio;\n', '\tuint256 public DERatio;\n', '\tuint256 public DURatio;\n', '\tuint256 public deusRatio;\n', '\tuint256 public DUVaultRatio;\n', '\n', '\tevent Swap(address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\n', '\n', '\tconstructor (\n', '\t\taddress _uniswapRouter,\n', '\t\taddress _bpt,\n', '\t\taddress _amm,\n', '\t\taddress _sdeaVault\n', '\t) ReentrancyGuard() {\n', '\t    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '\t    _setupRole(OPERATOR_ROLE, msg.sender);\n', '\t\tuniswapRouter = IUniswapV2Router02(_uniswapRouter);\n', '\t\tbpt = IBPool(_bpt);\n', '\t\tAMM = AutomaticMarketMaker(_amm);\n', '\t\tsdeaVault = Vault(_sdeaVault);\n', '\t}\n', '\t\n', '\tfunction init(\n', '\t\taddress[] memory tokens,\n', '\t\tuint256 _DERatio,\n', '\t\tuint256 _DURatio,\n', '\t\tuint256 _DDRatio,\n', '\t\tuint256 _deusRatio,\n', '\t\tuint256 _DUVaultRatio\n', '\t) external {\n', '\t\trequire(hasRole(OPERATOR_ROLE, msg.sender), "OPERATOR_ROLE ERROR");\n', '\t\tsdea = IERC20(tokens[0]);\n', '\t\tsdeus = IERC20(tokens[1]);\n', '\t\tsUniDD = IERC20(tokens[2]);\n', '\t\tsUniDE = IERC20(tokens[3]);\n', '\t\tsUniDU = IERC20(tokens[4]);\n', '\t\tdea = IERC20(tokens[5]);\n', '\t\tdeus = IERC20(tokens[6]);\n', '\t\tusdc = IERC20(tokens[7]);\n', '\t\tuniDD = IERC20(tokens[8]);\n', '\t\tuniDU = IERC20(tokens[9]);\n', '\t\tuniDE = IERC20(tokens[10]);\n', '\t\tdea.approve(address(uniswapRouter), MAX_INT);\n', '\t\tdeus.approve(address(uniswapRouter), MAX_INT);\n', '\t\tusdc.approve(address(uniswapRouter), MAX_INT);\n', '\t\tuniDD.approve(address(uniswapRouter), MAX_INT);\n', '\t\tuniDE.approve(address(uniswapRouter), MAX_INT);\n', '\t\tuniDU.approve(address(uniswapRouter), MAX_INT);\n', '\t\tdea.approve(address(sdeaVault), MAX_INT);\n', '\t\tDDRatio = _DDRatio;\n', '\t\tDURatio = _DURatio;\n', '\t\tDERatio = _DERatio;\n', '\t\tdeusRatio = _deusRatio;\n', '\t\tDUVaultRatio = _DUVaultRatio;\n', '\t}\n', '\n', '\tfunction setRatios(uint256 _DERatio, uint256 _DURatio, uint256 _DDRatio, uint256 _deusRatio, uint256 _DUVaultRatio) external {\n', '\t\trequire(hasRole(OPERATOR_ROLE, msg.sender), "OPERATOR_ROLE ERROR");\n', '\t\tDDRatio = _DDRatio;\n', '\t\tDURatio = _DURatio;\n', '\t\tDERatio = _DERatio;\n', '\t\tdeusRatio = _deusRatio;\n', '\t\tDUVaultRatio = _DUVaultRatio;\n', '\t}\n', '\n', '\tfunction approve(address token, address recipient, uint256 amount) external {\n', '\t\trequire(hasRole(TRUSTY_ROLE, msg.sender), "TRUSTY_ROLE ERROR");\n', '\t\tIERC20(token).approve(recipient, amount);\n', '\t}\n', '\n', '\tfunction bpt2eth(address tokenOut, uint256 poolAmountIn, uint256[] memory minAmountsOut) public nonReentrant() {\n', '\t\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\n', '\t\tuint256 deaAmount = bpt.exitswapPoolAmountIn(tokenOut, poolAmountIn, minAmountsOut[0]);\n', '\t\tuint256 deusAmount = uniswapRouter.swapExactTokensForTokens(deaAmount, minAmountsOut[1], deus2deaPath, address(this), block.timestamp + 1 days)[1];\n', '\t\tuint256 ethAmount = AMM.calculateSaleReturn(deusAmount);\n', '\t\tAMM.sell(deusAmount, minAmountsOut[2]);\n', '\t\tAMM.withdrawPayments(payable(address(this)));\n', '\t\tpayable(msg.sender).transfer(ethAmount);\n', '\t}\n', '\n', '\tfunction deus2dea(uint256 amountIn) internal returns(uint256) {\n', '\t\treturn uniswapRouter.swapExactTokensForTokens(amountIn, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\n', '\t}\n', '\n', '\tfunction bpt2sdea(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut) public nonReentrant() {\n', '\t\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\n', '\n', '\t\tuint256 deaAmount = bpt.exitswapPoolAmountIn(tokenOut, poolAmountIn, minAmountOut);\n', '\t\tuint256 sdeaAmount = sdeaVault.lockFor(deaAmount, msg.sender);\n', '\n', '\t\tsdea.transfer(msg.sender, sdeaAmount);\n', '\t\temit Swap(msg.sender, address(bpt), address(sdea), poolAmountIn, sdeaAmount);\n', '\t}\n', '\n', '\tfunction sdea2dea(uint256 amount, address recipient) external nonReentrant() {\n', '\t\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), "ADMIN_SWAPPER_ROLE ERROR");\n', '\t\tsdea.burn(msg.sender, amount);\n', '\t\tdea.transfer(recipient, amount);\n', '\t\t\n', '\t\temit Swap(recipient, address(sdea), address(dea), amount, amount);\n', '\t}\n', '\n', '\tfunction sdeus2deus(uint256 amount, address recipient) external nonReentrant() {\n', '\t\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), "ADMIN_SWAPPER_ROLE ERROR");\n', '\t\tsdeus.burn(msg.sender, amount);\n', '\t\tdeus.transfer(recipient, amount);\n', '\n', '\t\temit Swap(recipient, address(sdeus), address(deus), amount, amount);\n', '\t}\n', '\n', '\tfunction sUniDE2UniDE(uint256 amount, address recipient) external nonReentrant() {\n', '\t\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), "ADMIN_SWAPPER_ROLE ERROR");\n', '\t\tsUniDE.burn(msg.sender, amount);\n', '\t\tuniDE.transfer(recipient, amount);\n', '\n', '\t\temit Swap(recipient, address(sUniDE), address(uniDE), amount, amount);\n', '\t}\n', '\n', '\tfunction sUniDD2UniDD(uint256 amount, address recipient) external nonReentrant() {\n', '\t\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), "ADMIN_SWAPPER_ROLE ERROR");\n', '\t\tsUniDD.burn(msg.sender, amount);\n', '\t\tuniDD.transfer(recipient, amount);\n', '\n', '\t\temit Swap(recipient, address(sUniDD), address(uniDD), amount, amount);\n', '\t}\n', '\n', '\tfunction sUniDU2UniDU(uint256 amount, address recipient) external nonReentrant() {\n', '\t\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), "ADMIN_SWAPPER_ROLE ERROR");\n', '\t\tsUniDU.burn(msg.sender, amount);\n', '\t\tuniDU.transfer(recipient, amount/DUVaultRatio);\n', '\n', '\t\temit Swap(recipient, address(sUniDU), address(uniDU), amount, amount/DUVaultRatio);\n', '\t}\n', '\n', '\tfunction deaExitAmount(uint256 Predeemed) public view returns(uint256) {\n', '\t\tuint256 Psupply = bpt.totalSupply();\n', '\t\tuint256 Bk = dea.balanceOf(address(bpt));\n', '\t\treturn Bk - (((Psupply - Predeemed) * Bk) / Psupply);\n', '\t}\n', '\n', '\tfunction bpt2sdea(\n', '\t\tuint256 poolAmountIn,\n', '\t\tuint256[] memory balancerMinAmountsOut,\n', '\t\tuint256 minAmountOut\n', '\t) external nonReentrant() {\n', '\t\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\n', '\t\tuint256 deaAmount = deaExitAmount(poolAmountIn);\n', '\n', '\t\tbpt.exitPool(poolAmountIn, balancerMinAmountsOut);\n', '\n', '\t\tuint256 sdeusAmount = sdeus.balanceOf(address(this));\n', '\t\tsdeus.burn(address(this), sdeusAmount);\n', '\t\tdeaAmount += deus2dea(sdeusAmount * deusRatio / scale);\n', '\n', '\t\tuint256 sUniDDAmount = sUniDD.balanceOf(address(this));\n', '\t\tsUniDD.burn(address(this), sUniDDAmount);\n', '\t\tdeaAmount += uniDD2dea(sUniDDAmount * DDRatio / scale);\n', '\n', '\t\tuint256 sUniDEAmount = sUniDE.balanceOf(address(this));\n', '\t\tsUniDE.burn(address(this), sUniDEAmount);\n', '\t\tdeaAmount += uniDE2dea(sUniDEAmount * DERatio / scale);\n', '\n', '\t\tuint256 sUniDUAmount = sUniDU.balanceOf(address(this));\n', '\t\tsUniDU.burn(address(this), sUniDUAmount);\n', '\t\tdeaAmount += uniDU2dea(sUniDUAmount * DURatio / scale);\n', '\n', '\t\trequire(deaAmount >= minAmountOut, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '\n', '\t\tsdeaVault.lockFor(deaAmount, msg.sender);\n', '\t\tsdea.transfer(msg.sender, deaAmount);\n', '\n', '\t\temit Swap(msg.sender, address(bpt), address(sdea), poolAmountIn, deaAmount);\n', '\t}\n', '\n', '\tfunction uniDD2dea(uint256 sUniDDAmount) internal returns(uint256) {\n', '\t\t(uint256 deusAmount, uint256 deaAmount) = uniswapRouter.removeLiquidity(address(deus), address(dea), sUniDDAmount, 1, 1, address(this), block.timestamp + 1 days);\n', '\n', '\t\tuint256 deaAmount2 = uniswapRouter.swapExactTokensForTokens(deusAmount, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\n', '\n', '\t\treturn deaAmount + deaAmount2;\n', '\t}\n', '\n', '\tfunction sUniDD2sdea(uint256 sUniDDAmount, uint256 minAmountOut) public nonReentrant() {\n', '\t\tsUniDD.burn(msg.sender, sUniDDAmount);\n', '\n', '\t\tuint256 deaAmount = uniDD2dea(sUniDDAmount * DDRatio / scale);\n', '\n', '\t\trequire(deaAmount >= minAmountOut, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '\t\tsdeaVault.lockFor(deaAmount, msg.sender);\n', '\t\tsdea.transfer(msg.sender, deaAmount);\n', '\n', '\t\temit Swap(msg.sender, address(uniDD), address(sdea), sUniDDAmount, deaAmount);\n', '\t}\n', '\n', '\tfunction uniDU2dea(uint256 sUniDUAmount) internal returns(uint256) {\n', '\t\t(uint256 deaAmount, uint256 usdcAmount) = uniswapRouter.removeLiquidity(address(dea), address(usdc), (sUniDUAmount/DUVaultRatio), 1, 1, address(this), block.timestamp + 1 days);\n', '\n', '\t\tuint256 ethAmount = uniswapRouter.swapExactTokensForETH(usdcAmount, 1, usdc2wethPath, address(this), block.timestamp + 1 days)[1];\n', '\n', '\t\tuint256 deusAmount = AMM.calculatePurchaseReturn(ethAmount);\n', '\t\tAMM.buy{value: ethAmount}(deusAmount);\n', '\t\t\n', '\t\tuint256 deaAmount2 = uniswapRouter.swapExactTokensForTokens(deusAmount, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\n', '\n', '\t\treturn deaAmount + deaAmount2;\n', '\t}\n', '\t\n', '\n', '\tfunction sUniDU2sdea(uint256 sUniDUAmount, uint256 minAmountOut) public nonReentrant() {\n', '\t\tsUniDU.burn(msg.sender, sUniDUAmount);\n', '\n', '\t\tuint256 deaAmount = uniDU2dea(sUniDUAmount * DURatio / scale);\n', '\n', '\t\trequire(deaAmount >= minAmountOut, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '\t\tsdeaVault.lockFor(deaAmount, msg.sender);\n', '\t\tsdea.transfer(msg.sender, deaAmount);\n', '\t\t\n', '\t\temit Swap(msg.sender, address(uniDU), address(sdea), sUniDUAmount, deaAmount);\n', '\t}\n', '\n', '\tfunction uniDE2dea(uint256 sUniDEAmount) internal returns(uint256) {\n', '\t\t(uint256 deusAmount, uint256 ethAmount) = uniswapRouter.removeLiquidityETH(address(deus), sUniDEAmount, 1, 1, address(this), block.timestamp + 1 days);\n', '\t\tuint256 deusAmount2 = AMM.calculatePurchaseReturn(ethAmount);\n', '\t\tAMM.buy{value: ethAmount}(deusAmount2);\n', '\t\tuint256 deaAmount = uniswapRouter.swapExactTokensForTokens(deusAmount + deusAmount2, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\n', '\t\treturn deaAmount;\n', '\t}\n', '\n', '\tfunction sUniDE2sdea(uint256 sUniDEAmount, uint256 minAmountOut) public nonReentrant() {\n', '\t\tsUniDE.burn(msg.sender, sUniDEAmount);\n', '\n', '\t\tuint256 deaAmount = uniDE2dea(sUniDEAmount * DERatio / scale);\n', '\n', '\t\trequire(deaAmount >= minAmountOut, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '\t\tsdeaVault.lockFor(deaAmount, msg.sender);\n', '\t\tsdea.transfer(msg.sender, deaAmount);\n', '\n', '\t\temit Swap(msg.sender, address(uniDE), address(sdea), sUniDEAmount, deaAmount);\n', '\t}\n', '\n', '\tfunction withdraw(address token, uint256 amount, address to) public {\n', '\t\trequire(hasRole(TRUSTY_ROLE, msg.sender), "TRUSTY_ROLE ERROR");\n', '\t\tIERC20(token).transfer(to, amount);\n', '\t}\n', '\n', '\treceive() external payable {}\n', '}\n', '\n', '// Dar panahe Khoda']