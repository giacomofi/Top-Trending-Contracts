['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', '/**\n', ' * \n', ' * \n', ' * \n', ' MMMMMMMMMMMMWNX0kxdolccccccllooxkO0XNMMMMMMMMMMMMM\n', ' MMMMMMMMMWX0xoc:::::::::ccc:cccccclldk0NWMMMMMMMMM\n', ' MMMMMMMN0xc;;;;;;;;;:::okkdc::cccccccclokKWMMMMMMM\n', ' MMMMMN0o:,,,,,;;,;;;;:dOK0Oxc::::cccccccclx0WMMMMM\n', ' MMMWKd;,,,,,,,,,,,,,:d0KK000xl::::::ccccccclxKWMMM\n', " MMNOc,'''''''','',,:x0KK00000kl::::::::cccccco0WMM\n", " MNk:'''''''''''''':xKKKK000000ko:;;:::::cccccclONM\n", " Nk:'''''''''....'ckKKKK00OOOO00Oo:;;::::ccccccclOW\n", " 0c''''''.......'lO000000OkkkkkOOOd:;;;::::cccccco0\n", " o,''''.........'lkO00000Okkkkkkkxdc;;;:::::ccccclx\n", " c''''...........,:cldO00Okkkxdollc;;;;;::::cccccco\n", " ;'''............'ldoccldddocccoddc,,;;;;:::ccccccl\n", " ;''''..........''':k0kdl::coxOOo;,,,,;;;::::cccccl\n", " :''''......,,;loo;.,d0KK0OO00xc,'',,,;;;:::ccccccl\n", " l,'''....':oolccc;...cOKK00Od;''',,,,;;;:::ccccccd\n", " x;''''..':ooccllc'..';oO000kl:,,,,,,;;;::::ccccclk\n", " Xo,'''.':ll::oddocclooodkkkxddoc:;;;;;;;:::cccclxX\n", " W0l,'''';ol:looodxxdddoodddddoooooc;;;;::::ccccdKW\n", " MW0l,''';lolc;,,lkxdxxddooooolllool;,;;:::cccldKWM\n", " MMWXd;''',,'...'lxxdxkkxdooolcclool;,;::::cclkXWMM\n", " MMMMN0o;'''.....;lodxxkxdooolcclolc,,;::::cd0NMMMM\n", " MMMMMMNOo;,'''''.',:ldkxdooolc::;;,,;;::ld0NMMMMMM\n", " MMMMMMMMNKxl;,''''''';cllcc:;,,,,,;;:cokKNMMMMMMMM\n", " MMMMMMMMMMWNKkdl:;,''''','''',,;:coxOKNMMMMMMMMMMM\n", ' MMMMMMMMMMMMMMWNKOdoc:;;;;;::loxOKNWMMMMMMMMMMMMMM\n', '\n', ' Evergive Token \n', '\n', ' Description\n', '\n', ' Get rewarded extra tokens when you buy the dip! Dumpers get taxed when they sell below the moving \n', ' average and that funds the buy back wallet, then those tokens get burned! FIRST EVER TOKENOMICS of \n', ' its kind and the FOMO will never be so real! So donâ€™t miss out and join the telegram!! Solving the \n', ' problems in the world of Crypto. Lets start off with building a great and strong community here.\n', '\n', ' Token Features:\n', ' \n', ' 2% Charity Wallet\n', ' 1% Dev Wallet\n', ' 2% Marketing Wallet\n', ' 3% Auto Liquidity\n', ' 1% Buy Back Wallet\n', ' 1% Buy-the-dip Bonus\n', ' \n', ' visit https://evergive.io for more information!\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '     /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function geUnlockTime() public view returns (uint256) {\n', '        return _lockTime;\n', '    }\n', '\n', '    //Locks the contract for owner for the amount of time provided\n', '    function lock(uint256 time) public virtual onlyOwner {\n', '        _previousOwner = _owner;\n', '        _owner = address(0);\n', '        _lockTime = block.timestamp + time;\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '    \n', '    //Unlocks the contract for owner when _lockTime is exceeds\n', '    function unlock() public virtual {\n', '        require(_previousOwner == msg.sender, "You don\'t have permission to unlock");\n', '        require(block.timestamp > _lockTime , "Contract is locked until 7 days");\n', '        emit OwnershipTransferred(_owner, _previousOwner);\n', '        _owner = _previousOwner;\n', '    }\n', '}\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In, \n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '    \n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '/* SAINT is a fork of SafeMoon that has been edited to support the children-focused\n', '   charitable mission of Saint\n', '*/\n', '\n', 'abstract contract IERC20Extented is IERC20 {\n', '    function decimals() public view virtual returns (uint8);\n', '    function name() public view virtual returns (string memory);\n', '    function symbol() public view virtual returns (string memory);\n', '}\n', '\n', 'contract Evergive is Context, IERC20, IERC20Extented, Ownable {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  mapping (address => uint256) private _rOwned;\n', '  mapping (address => uint256) private _tOwned;\n', '  mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '  mapping (address => bool) private _isExcludedFromFee;\n', '\n', '  mapping (address => bool) private _isExcluded;\n', '  address[] private _excluded;\n', '\n', '  address payable public _feeWallet = payable(0xbD6B5A591964F2ecbd521c98C4002f18034Ee7c0);\n', '  address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n', '  /* Variables _tTotal, _name, _symbol, _decimals, and numTokensSellToAddToLiquidity\n', '     changed to constant.\n', '     See "SSL-05 | Variable could be declared as constant" from the Certik \n', '     audit of Safemoon.\n', '  */\n', '  uint256 private constant MAX = 150000000000000 * 10**9;\n', '  uint256 private constant _tTotal = 150000000000000 * 10**9;\n', '  uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '  uint256 private _tFeeTotal;\n', '  \n', '  string public _name = " ";\n', '  string public _symbol = "bbb";\n', '  uint8 private constant _decimals = 9;\n', ' \n', '  uint256 private _buyBackDivisor = 100;\n', '  \n', '  uint256 public _devFee = 3;\n', '  uint256 private _previousDevFee = _devFee;\n', '  \n', '  uint256 public _marketingFee = 2;\n', '  uint256 private _previousMarketingFee = _marketingFee;\n', '\n', '  uint256 public _liquidityFee = 3;\n', '  uint256 private _previousLiquidityFee = _liquidityFee;\n', '  \n', '  uint256 public _buyBackFee = 1;\n', '  uint256 private _previousBuyBackFee = _buyBackFee;\n', '  \n', '  uint256 public _dipRewardFee = 1;\n', '  uint256 private _previousDipRewardFee = _dipRewardFee;\n', '  \n', '  uint256 public _txFee = _devFee.add(_marketingFee).add(_liquidityFee).add(_buyBackFee).add(_dipRewardFee);\n', '  uint256 private _previousTxFee  =  _txFee;\n', '  \n', '  mapping (bytes32 => uint256) private _balances;\n', '  \n', '  bytes32 public constant _devBalance = keccak256("_devBalance"); \n', '  bytes32 public constant _marketingBalance = keccak256("_marketingBalance");\n', '  bytes32 public constant _liquidityBalance = keccak256("_liquidityBalance");\n', '  bytes32 public constant _buyBackBalance = keccak256("_buyBackBalance");\n', '  bytes32 public constant _dipBalance = keccak256("_dipBalance");\n', '  bytes32 public constant _buyBackETHbalance = keccak256("_buyBackETHbalance");\n', '  \n', '  IUniswapV2Router02 public uniswapV2Router;\n', '  address public uniswapV2Pair;\n', '  \n', '  bool inSwapAndLiquify;\n', '  bool public swapAndLiquifyEnabled = true;\n', '  \n', '  uint256 public _maxTxAmount = _tTotal;\n', '  uint256 private numTokensSellToAddToLiquidity = 1000000000000 * 10**9;\n', '  uint256 public marketingDivisor = 3;\n', '  uint256 public maxWallet = 1500000000000 * 10**9;\n', '  uint256 public _whalePenaltyAmount = 1125000000000 * 10**9; // 75% of maxWallet\n', '    \n', '  uint256 private buyBackUpperLimit = 1500000000000 * 10**9;\n', '    \n', '  event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '  event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '  event SwapAndLiquify(\n', '      uint256 tokensSwapped,\n', '      uint256 ethReceived,\n', '      uint256 tokensIntoLiquidity\n', '  );\n', '  \n', '  event AddLiquidityETH(uint amountA, uint amountB, uint liquidity);\n', '\n', '  modifier lockTheSwap {\n', '      inSwapAndLiquify = true;\n', '      _;\n', '      inSwapAndLiquify = false;\n', '  }\n', '  bool public buyBackEnabled = true;\n', '    \n', '  event BuyBackEnabledUpdated(bool enabled);\n', '    \n', '  event SwapETHForTokens(\n', '      uint256 amountIn,\n', '      address[] path\n', '  );\n', '    \n', '  event SwapTokensForETH(\n', '      uint256 amountIn,\n', '      address[] path\n', '  );\n', '\n', '  event test_value(uint256 indexed value1);\n', '  \n', '  constructor () {\n', '      _rOwned[_msgSender()] = _rTotal;\n', '      \n', '      IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);// v2 testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\n', '        // Create a pancakeswap pair for this new token \n', '      uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '          .createPair(address(this), _uniswapV2Router.WETH());\n', '\n', '      // set the rest of the contract variables\n', '      uniswapV2Router = _uniswapV2Router;\n', '      \n', '      //exclude owner and this contract from fee\n', '      _isExcludedFromFee[owner()] = true;\n', '      _isExcludedFromFee[address(this)] = true;\n', '      _isExcludedFromFee[_feeWallet] = true;\n', '\n', '      _balances[_devBalance] = 0; \n', '      _balances[_marketingBalance] = 0;\n', '      _balances[_liquidityBalance] = 0;\n', '      _balances[_buyBackBalance] = 0;\n', '      _balances[_dipBalance] = 0;\n', '      _balances[_buyBackETHbalance] = 0;\n', '\n', '      emit Transfer(address(0), _msgSender(), _tTotal);\n', '  }\n', '  \n', '  // calculate price based on pair reserves\n', '  function getTokenPrice() public view returns(uint256) {\n', '    IERC20Extented token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());\n', '    (uint256 Res0, uint256 Res1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\n', '\n', '    // decimals\n', '    return((Res0*(10**uint256(token1.decimals())))/(Res1)); // return amount of token0 needed to buy token1\n', '  }\n', '   \n', '  function name() override public view returns (string memory) {\n', '      return _name;\n', '  }\n', '\n', '  function symbol() override public view returns (string memory) {\n', '      return _symbol;\n', '  }\n', '\n', '  function decimals() override public pure returns (uint8) {\n', '      return _decimals;\n', '  }\n', '\n', '  function totalSupply() public pure override returns (uint256) {\n', '      return _tTotal;\n', '  }\n', '\n', '  function balanceOf(address account) public view override returns (uint256) {\n', '      if (_isExcluded[account]) return _tOwned[account];\n', '      return tokenFromReflection(_rOwned[account]);\n', '  }\n', '\n', '  function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '      _transfer(_msgSender(), recipient, amount);\n', '      return true;\n', '  }\n', '\n', '  function allowance(address owner, address spender) public view override returns (uint256) {\n', '      return _allowances[owner][spender];\n', '  }\n', '\n', '  function approve(address spender, uint256 amount) public override returns (bool) {\n', '      _approve(_msgSender(), spender, amount);\n', '      return true;\n', '  }\n', '\n', '  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '      _transfer(sender, recipient, amount);\n', '      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));\n', '      return true;\n', '  }\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '      return true;\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));\n', '      return true;\n', '  }\n', '\n', '  function isExcludedFromReward(address account) public view returns (bool) {\n', '      return _isExcluded[account];\n', '  }\n', '\n', '  function totalFees() public view returns (uint256) {\n', '      return _tFeeTotal;\n', '  }\n', '\n', '  function buyBackTokens(uint256 amount) private lockTheSwap {\n', '      if (amount > 0) {\n', '    \t  swapETHForTokens(amount);\n', '\t  }\n', '  }\n', '    \n', '  function swapTokensForEth(uint256 tokenAmount) private {\n', '      // generate the uniswap pair path of token -> weth\n', '      address[] memory path = new address[](2);\n', '      path[0] = address(this);\n', '      path[1] = uniswapV2Router.WETH();\n', '\n', '      _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '      // make the swap\n', '      uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '          tokenAmount,\n', '          0, // accept any amount of ETH\n', '          path,\n', '          address(this), // The contract\n', '          block.timestamp\n', '      );\n', '        \n', '      emit SwapTokensForETH(tokenAmount, path);\n', '  }\n', '    \n', '  function swapETHForTokens(uint256 amount) private {\n', '      // generate the uniswap pair path of token -> weth\n', '      address[] memory path = new address[](2);\n', '      path[0] = uniswapV2Router.WETH();\n', '      path[1] = address(this);\n', '\n', '      // make the swap\n', '      uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\n', '          0, // accept any amount of Tokens\n', '          path,\n', '          deadAddress, // Burn address\n', '          block.timestamp.add(300)\n', '      );\n', '        \n', '      emit SwapETHForTokens(amount, path);\n', '  }\n', '    \n', '  /* removed function due to security concerns\n', '     See "SSL-12 | The purpose of function deliver" from the Certik audit of safemoon\n', '     \n', '  function deliver(uint256 tAmount) public {\n', '      address sender = _msgSender();\n', '      require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '      (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '      _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '      _rTotal = _rTotal.sub(rAmount);\n', '      _tFeeTotal = _tFeeTotal.add(tAmount);\n', '  }\n', '  */\n', '  \n', '  function buyBackUpperLimitAmount() public view returns (uint256) {\n', '      return buyBackUpperLimit;\n', '  }\n', '    \n', '  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '      require(tAmount <= _tTotal, "Amount must be less than supply");\n', '      if (!deductTransferFee) {\n', '          (uint256 rAmount,,,) = _getValues(tAmount);\n', '          return rAmount;\n', '      } else {\n', '          (,uint256 rTransferAmount,,) = _getValues(tAmount);\n', '          return rTransferAmount;\n', '      }\n', '  }\n', '\n', '  function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '      require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '      uint256 currentRate =  _getRate();\n', '      return rAmount.div(currentRate);\n', '  }\n', '\n', '  function excludeFromReward(address account) public onlyOwner() {\n', "      // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Pancakeswap router.');\n", '      require(!_isExcluded[account], "Account is already excluded");\n', '      if(_rOwned[account] > 0) {\n', '          _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '      }\n', '      _isExcluded[account] = true;\n', '      _excluded.push(account);\n', '  }\n', '\n', '  function includeInReward(address account) external onlyOwner() {\n', '      /* Changed error message to "Account not excluded"\n', '         See "SSL-01 | Incorrect error message" from the Certik\n', '         audit of safemoon.\n', '      */\n', '      require(_isExcluded[account], "Account not excluded");\n', '      for (uint256 i = 0; i < _excluded.length; i++) {\n', '          if (_excluded[i] == account) {\n', '              _excluded[i] = _excluded[_excluded.length - 1];\n', '              _tOwned[account] = 0;\n', '              _isExcluded[account] = false;\n', '              _excluded.pop();\n', '              break;\n', '          }\n', '      }\n', '  }\n', '  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '      (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTxFee) = _getValues(tAmount);\n', '      \n', '      _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '      _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '      _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n', '      _takeTxFee(tTxFee);\n', '      setBalancesOnTransfer(tAmount);\n', '      emit Transfer(sender, recipient, tTransferAmount);\n', '  }\n', '  \n', '  function excludeFromFee(address account) public onlyOwner {\n', '      _isExcludedFromFee[account] = true;\n', '  }\n', '  \n', '  function includeInFee(address account) public onlyOwner {\n', '      _isExcludedFromFee[account] = false;\n', '  }\n', '  \n', '  function setDevFeePercent(uint256 devFee) private {\n', '      require(devFee <= 20, "Fee must be less than 20%");\n', '      _devFee = devFee;\n', '  }\n', '  \n', '  function setMarketingFeePercent(uint256 marketingFee) private {\n', '      require(marketingFee <= 20, "Fee must be less than 20%");\n', '      _marketingFee = marketingFee;\n', '  }\n', '\n', '  function setLiquidityFeePercent(uint256 liquidityFee) private {\n', '      require(liquidityFee <= 20, "Fee must be less than 20%");\n', '      _liquidityFee = liquidityFee;\n', '  }\n', '  \n', '  function setBuyBackFeePercent(uint256 buyBackFee) private {\n', '      require(buyBackFee <= 20, "Fee must be less than 20%");\n', '      _buyBackFee = buyBackFee;\n', '  }\n', '  \n', '  function setDipRewardFeePercent(uint256 dipRewardFee) private {\n', '      require(dipRewardFee <= 20, "Fee must be less than 20%");\n', '      _dipRewardFee = dipRewardFee;\n', '  }\n', '  \n', '  function setTxFeePercent(uint256 devFee, uint256 marketingFee, uint256 liquidityFee, uint256 buyBackFee, uint256 dipRewardFee) external onlyOwner() {\n', '      setDevFeePercent(devFee);\n', '      setMarketingFeePercent(marketingFee);\n', '      setLiquidityFeePercent(liquidityFee);\n', '      setBuyBackFeePercent(buyBackFee);\n', '      setDipRewardFeePercent(dipRewardFee);\n', '      _txFee = _devFee.add(_marketingFee).add(_liquidityFee).add(_buyBackFee).add(_dipRewardFee);\n', '  }\n', '  \n', '  function setBuyBackDivisor(uint256 divisor) external onlyOwner() {\n', '      require(divisor > 0, "divisor must be greater than zero");\n', '      _buyBackDivisor = divisor;\n', '  }\n', '  \n', '  function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', '      _maxTxAmount = maxTxAmount;\n', '  }\n', '\n', '  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '      swapAndLiquifyEnabled = _enabled;\n', '      emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '  }\n', '  \n', '  function setBuyBackEnabled(bool _enabled) public onlyOwner {\n', '      buyBackEnabled = _enabled;\n', '      emit BuyBackEnabledUpdated(_enabled);\n', '  }\n', '  \n', '  //to recieve ETH from pancakeswapV2Router when swaping\n', '  receive() external payable {}\n', '\n', '  function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '      _rTotal = _rTotal.sub(rFee);\n', '      _tFeeTotal = _tFeeTotal.add(tFee);\n', '  }\n', '\n', '  function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\n', '      (uint256 tTransferAmount, uint256 tTxFee) = _getTValues(tAmount);\n', '      (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tTxFee, _getRate());\n', '      return (rAmount, rTransferAmount, tTransferAmount, tTxFee);\n', '      \n', '  }\n', '\n', '  function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\n', '      uint256 tTxFee = calculateTxFee(tAmount);\n', '      uint256 tTransferAmount = tAmount.sub(tTxFee);\n', '      return (tTransferAmount, tTxFee);\n', '  }\n', '\n', '  function _getRValues(uint256 tAmount, uint256 tTxFee, uint256 currentRate) private pure returns (uint256, uint256) {\n', '      uint256 rAmount = tAmount.mul(currentRate);\n', '      uint256 rTxFee = tTxFee.mul(currentRate);\n', '      uint256 rTransferAmount = rAmount.sub(rTxFee);\n', '      return (rAmount, rTransferAmount);\n', '  }\n', '\n', '  function _getRate() private view returns(uint256) {\n', '      (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '      return rSupply.div(tSupply);\n', '  }\n', '\n', '  function _getCurrentSupply() private view returns(uint256, uint256) {\n', '      uint256 rSupply = _rTotal;\n', '      uint256 tSupply = _tTotal;      \n', '      for (uint256 i = 0; i < _excluded.length; i++) {\n', '          if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '          rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '          tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '      }\n', '      if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '      return (rSupply, tSupply);\n', '  }\n', '  \n', '  function _takeTxFee(uint256 tTxFee) private {\n', '      uint256 currentRate = _getRate();\n', '      uint256 rTxFee = tTxFee.mul(currentRate);\n', '      _rOwned[owner()] = _rOwned[owner()].add(rTxFee);\n', '      if(_isExcluded[owner()])\n', '        _tOwned[owner()] = _tOwned[owner()].add(tTxFee);\n', '  }\n', '\n', '  function calculateTxFee(uint256 _amount) private view returns (uint256) {\n', '      return _amount.mul(_txFee).div(\n', '          10**2\n', '      );\n', '  }\n', '  \n', '  function removeAllFee() private {\n', '      if(_txFee == 0) return;\n', '      \n', '      _previousTxFee = _txFee;\n', '      \n', '      _txFee = 0;\n', '  }\n', '  \n', '  function restoreAllFee() private {\n', '      _txFee = _previousTxFee;\n', '  }\n', '  \n', '  function isExcludedFromFee(address account) public view returns(bool) {\n', '      return _isExcludedFromFee[account];\n', '  }\n', '\n', '  function _approve(address owner, address spender, uint256 amount) private {\n', '      require(owner != address(0), "BEP20: approve from the zero address");\n', '      require(spender != address(0), "BEP20: approve to the zero address");\n', '\n', '      _allowances[owner][spender] = amount;\n', '      emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  function _transfer(\n', '      address from,\n', '      address to,\n', '      uint256 amount\n', '  ) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if(from != owner() && to != owner()) {\n', '            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '        }\n', '\n', '        uint256 contractTokenBalance = balanceOf(address(this));\n', '        bool overMinimumTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\n', '        \n', '        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == uniswapV2Pair) {\n', '            if (overMinimumTokenBalance) {\n', '                contractTokenBalance = numTokensSellToAddToLiquidity;\n', '                swapTokens(contractTokenBalance);    \n', '            }\n', '\t        uint256 balance = address(this).balance;\n', '            if (buyBackEnabled && balance > uint256(1 * 10**18)) {\n', '                \n', '                if (balance > buyBackUpperLimit)\n', '                    balance = buyBackUpperLimit;\n', '                \n', '                buyBackTokens(balance.div(100));\n', '            }\n', '        }\n', '        \n', '        bool takeFee = true;\n', '        \n', '        //if any account belongs to _isExcludedFromFee account then remove the fee\n', '        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n', '            takeFee = false;\n', '            _tokenTransfer(from,to,amount,takeFee);\n', '        }\n', '        else {\n', '            if(to != uniswapV2Pair){\n', '                require(balanceOf(to).add(amount) <= maxWallet, "transfer amount must be less than maxWallet");\n', '            }\n', '            require(amount <= _maxTxAmount, "transfer amount must be less than _maxTxAmount");\n', '            \n', '            if(amount > _whalePenaltyAmount && to == uniswapV2Pair){\n', '                _previousDipRewardFee = _dipRewardFee;\n', '                _previousTxFee = _txFee;\n', '                \n', '                _dipRewardFee = _dipRewardFee + 15;\n', '                _txFee = _devFee.add(_marketingFee).add(_liquidityFee).add(_buyBackFee).add(_dipRewardFee);\n', '        \n', '                _tokenTransfer(from,to,amount,takeFee);\n', '                \n', '                _dipRewardFee = _previousDipRewardFee;\n', '                _txFee = _previousTxFee;            \n', '            }\n', '            else {\n', '                _tokenTransfer(from,to,amount,takeFee);\n', '            }\n', '        }\n', '        \n', '  }\n', '\n', '  function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n', '       \n', '      uint256 initialBalance = address(this).balance;\n', '      swapTokensForEth(contractTokenBalance);\n', '      uint256 transferredBalance = address(this).balance.sub(initialBalance);\n', '\n', '      //Send to Marketing address\n', '      transferToAddressETH(_feeWallet, transferredBalance.div(_txFee).mul(_devFee.add(_marketingFee).add(_buyBackFee)));\n', '        \n', '  }\n', '    \n', '  function setBalancesOnTransfer(uint256 amount) private {\n', '          _balances[_devBalance] = _balances[_devBalance].add(amount.mul(_devFee.div(100)));\n', '          _balances[_marketingBalance] = _balances[_marketingBalance].add(amount.mul(_marketingFee.div(100)));\n', '          _balances[_liquidityBalance] += amount.mul(_liquidityFee.div(100));\n', '          _balances[_buyBackBalance] += amount.mul(_buyBackFee.div(100));\n', '          _balances[_dipBalance] += amount.mul(_dipRewardFee.div(100));\n', '  }\n', '  \n', '  function setBalancesOnBuy(uint256 amount, uint256 buyBackETH) private {\n', '          _balances[_devBalance] -= amount.mul(_devFee.div(100));\n', '          _balances[_marketingBalance] -= amount.mul(_marketingFee.div(100));\n', '          _balances[_buyBackBalance] -= amount.mul(_buyBackFee.div(100));\n', '          _balances[_buyBackETHbalance] += buyBackETH;\n', '  }\n', '  \n', '  function updateBuyBackBalance(uint amount) private {\n', '           _balances[_buyBackETHbalance] -= amount;\n', '  }\n', '  \n', '  function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '      // split the contract balance into halves\n', '      uint256 half = contractTokenBalance.div(2);\n', '      uint256 otherHalf = contractTokenBalance.sub(half);\n', '\n', "      // capture the contract's current ETH balance.\n", '      // this is so that we can capture exactly the amount of ETH that the\n', '      // swap creates, and not make the liquidity event include any ETH that\n', '      // has been manually sent to the contract\n', '      uint256 initialBalance = address(this).balance;\n', '\n', '      // swap tokens for ETH\n', '      swapTokensForETH(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n', '\n', '      // how much ETH did we just swap into?\n', '      uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '      // add liquidity to pancakeswap\n', '      addLiquidity(otherHalf, newBalance);\n', '      \n', '      emit SwapAndLiquify(half, newBalance, otherHalf);\n', '  }\n', '\n', '  function swapTokensForETH(uint256 tokenAmount) private {\n', '      // generate the pancakeswap pair path of token -> WETH\n', '      address[] memory path = new address[](2);\n', '      path[0] = address(this);\n', '      path[1] = uniswapV2Router.WETH();\n', '\n', '      _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '      // make the swap\n', '      uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '          tokenAmount,\n', '          0, // accept any amount of ETH\n', '          path,\n', '          address(this),\n', '          block.timestamp\n', '      );\n', '  }\n', '\n', '  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '      // approve token transfer to cover all possible scenarios\n', '      /* "to" account changed to address(this) to mitigate major centralization\n', "         issue in Safemoon's contract.\n", '         See "SSL-04 | Centralized risk in addLiquidity" from the Certik\n', '         audit of Safemoon.\n', '      */\n', '      _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '         // add the liquidity\n', '      uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '      //emit AddLiquidityETH(amountA, amountB, liquidity);\n', '  }\n', '\n', '  //this method is responsible for taking all fee, if takeFee is true\n', '  function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n', '      /* Removed:\n', '         ".....else  if  (!_isExcluded[sender]  &&  !_isExcluded[recipient])  {{        \n', '                         _transferStandard(sender, recipient, amount);  }....."\n', '                         \n', '        See "SSL-02 | Redundant code" from the Certik audit of Safemoon\n', '      */\n', '      if(!takeFee)\n', '          removeAllFee();\n', '      \n', '      if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '          _transferFromExcluded(sender, recipient, amount);\n', '      } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '          _transferToExcluded(sender, recipient, amount);\n', '      } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '          _transferBothExcluded(sender, recipient, amount);\n', '      } else {\n', '          _transferStandard(sender, recipient, amount);\n', '      }\n', '      \n', '      if(!takeFee)\n', '          restoreAllFee();\n', '  }\n', '\n', '  function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '      (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTxFee) = _getValues(tAmount);\n', '\n', '      _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '      _takeTxFee(tTxFee);\n', '      setBalancesOnTransfer(tAmount);\n', '      emit Transfer(sender, recipient, tTransferAmount);\n', '  }\n', '\n', '  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '      (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTxFee) = _getValues(tAmount);\n', '      \n', '      _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '      _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n', '      _takeTxFee(tTxFee);\n', '      setBalancesOnTransfer(tAmount);\n', '\n', '      emit Transfer(sender, recipient, tTransferAmount);\n', '  }\n', '\n', '  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '      (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTxFee) = _getValues(tAmount);\n', '      \n', '      _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '      _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n', '      _takeTxFee(tTxFee);\n', '      setBalancesOnTransfer(tAmount);\n', '\n', '      emit Transfer(sender, recipient, tTransferAmount);\n', '  }\n', '  \n', '  function transferToAddressETH(address payable recipient, uint256 amount) private {\n', '      recipient.transfer(amount);\n', '  }\n', '    \n', '  //New Pancakeswap router version?\n', '  //No problem, just change it!\n', '  function setRouterAddress(address newRouter) external onlyOwner() {\n', '      IUniswapV2Router02 _uniswapV2newRouter = IUniswapV2Router02(newRouter);//v2 router --> 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '      // Create a pancakeswap pair for this new token \n', '      uniswapV2Pair = IUniswapV2Factory(_uniswapV2newRouter.factory())\n', '            .createPair(address(this), _uniswapV2newRouter.WETH());\n', '\n', '      // set the rest of the contract variables\n', '      uniswapV2Router = _uniswapV2newRouter;\n', '      \n', '    }\n', '    \n', '  function setFeeWallet(address payable newWallet) external onlyOwner(){\n', '      // in case the charity wallet needs to be updated\n', '      _feeWallet = payable(newWallet);\n', '  }\n', '  function setName(string memory newName) external onlyOwner()  {\n', '      _name = newName;\n', '  }\n', '  function setSymbol(string memory newSymbol) external onlyOwner() {\n', '      _symbol =  newSymbol;\n', '  }\n', '  function setMaxWallet(uint256 _maxWallet) external onlyOwner() {\n', '      maxWallet = _maxWallet;\n', '  }\n', '  function setWhalePenaltyAmount(uint256 whalePenaltyAmount) external onlyOwner() {\n', '      _whalePenaltyAmount = whalePenaltyAmount;\n', '  }\n', '  function getMaxTxAmount() external view onlyOwner() returns(uint256){\n', '      return _maxTxAmount;\n', '  }\n', '  \n', '  function getBalances() external view onlyOwner() returns(uint256, uint256, uint256, uint256, uint256, uint256) {\n', '      return (_balances[_devBalance], _balances[_marketingBalance], _balances[_liquidityBalance], _balances[_buyBackBalance],\n', '      _balances[_dipBalance], _balances[_buyBackETHbalance]);\n', '  }\n', '  \n', '}']