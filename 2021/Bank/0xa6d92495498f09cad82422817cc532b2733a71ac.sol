['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// SPDX-License-Identifier: CC0-1.0\n', '\n', '/*\n', '\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^[email\xa0protected]@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`  ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@/        \\@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@/          \\@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@^            [email\xa0protected]@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@`              ,@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@`                ,@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@/                      \\@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@/                        \\@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@^                          [email\xa0protected]@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@`       D o g Q u e e n      ,@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@                                @@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@`                                ,@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@\\[@@\\`                        ,/@@[/@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@` ,\\@@\\`                ,/@@/` ,@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@^    [@@@@]        ]@@@@[    [email\xa0protected]@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@\\       [@@@@]]@@@@[       /@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@`        ,\\@@/`        ,@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@^                    [email\xa0protected]@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@\\                  /@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@`            ,@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@\\          /@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`    ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\  /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '\n', '*/\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IChiToken {\n', '    function mint(uint256 value) external;\n', '    function free(uint256 value) external returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'contract DogQueen is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    address public _admin;\n', '    address public _dogKing;\n', '    address public _pairAddr;\n', '    address public _operater = 0x00Aa1B305E62d66F7B693E009CBFfDc08Ef98393;\n', '    address public _chiToken = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c; \n', '    address public _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address public _weth =  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\n', '  \n', '\n', '    mapping (address => mapping (address => uint256)) public _allowances;\n', '    mapping (address => uint256) public _usedChiToken;\n', '    mapping (address => uint256) public _balances;\n', '    \n', '    struct UserInfor {\n', '        uint256 amount;\n', '        uint256 debt;\n', '    }\n', '    \n', '    mapping (address => UserInfor) public _userInfor;\n', '    uint256 public _userPool;\n', '    uint256 public _accPerShare;\n', '    \n', '    uint256 public _totalSupply;\n', '    string public _symbol;\n', '    string public _tokenname;\n', '    uint8 public _decimals;\n', '    uint256 public _chiTokenAmount = 0;\n', '    uint256 public _totalUpLimit = 210000 * 1e9;\n', '    uint256 public _addLiquitfyPoint = 105000 *1e9;\n', '    uint256 public _rate = 238095238095; \n', '    uint256 public _coefficient = 1e25;\n', '    \n', '    bool public _openTransaction;\n', '    bool public inSwapAndLiquify;\n', '    uint256 public gastokenNum = 1;\n', '    \n', '    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n', '    event Mint (address owner, uint256 userbalance, uint256 swapAmount, uint256 userpool, \n', '                                                uint256 tokenBamount, uint256 acc, uint256 debt);\n', '\n', '    event Message(string str);\n', '\n', '    constructor () public {   \n', '        _admin = msg.sender;\n', '        _symbol = "DOQE";\n', '        _tokenname = "DogQueen";\n', '        _totalSupply = 1e9;   //init 1 token for uniswap\n', '        _decimals = 9;\n', '        _balances[_operater] = _totalSupply;\n', '        _approve(address(this), _uniRouter, _totalUpLimit);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_admin == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyPair() {\n', '        require(msg.sender == _dogKing, "you not authority");\n', '        _;\n', '    }\n', '\n', '    function setPairAddress(address addr) public onlyOwner {\n', '        _pairAddr = addr;\n', '    }\n', '    \n', '    function setOperator(address operator) public onlyOwner {\n', '        _operater = operator;\n', '    }\n', '    \n', '    function makePair(address addr) public onlyOwner {\n', '        _dogKing = addr;\n', '    }\n', '    \n', '    function startTransaction(bool start) public onlyOwner {\n', '        _openTransaction = start;\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _tokenname;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) external view override returns (uint256) {\n', '        uint256 reward = calReward(account);\n', '        return _balances[account].add(reward);\n', '    }\n', '    \n', '    function updatePool(uint256 amount) internal {\n', '        if (_userPool == 0) {\n', '            return;\n', '        }\n', '        _accPerShare = _accPerShare.add(amount.mul(_coefficient).div(_userPool));  \n', '    }\n', '    \n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '    \n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '        IUniswapV2Router02(_uniRouter).addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, \n', '            0, \n', '            _admin,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '        \n', '        uint256 half = contractTokenBalance.div(2);\n', '        uint256 otherHalf = contractTokenBalance.sub(half);\n', '        uint256 initialBalance = address(this).balance;\n', '        swapTokensForEth(half);\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '        emit SwapAndLiquify(half, newBalance, otherHalf);\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        \n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = _weth;\n', '\n', '        _approve(address(this), _uniRouter, tokenAmount);\n', '        \n', '        IUniswapV2Router02(_uniRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, \n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function calReward(address owner) internal view returns(uint256 reward) {\n', '        UserInfor storage user = _userInfor[owner];\n', '        reward = user.amount.mul(_accPerShare).div(_coefficient).sub(user.debt);\n', '    }\n', '\n', '    function TestaddTokenBLiquify(uint256 amount) public {\n', '        swapAndLiquify(amount);\n', '    }\n', '\n', '    function mint(address owner, uint256 amount, bool exchange) public onlyPair returns (uint256) {\n', '        if (_totalSupply > _totalUpLimit) {\n', '            emit Message("over total up limit.");\n', '            return 0;\n', '        }\n', '        \n', '        UserInfor storage user = _userInfor[owner];\n', '        uint256 mintTokenBAmount = amount.div(_rate); \n', '        _totalSupply = _totalSupply.add(mintTokenBAmount);\n', '        uint256 half = mintTokenBAmount.mul(50).div(100);\n', '        _balances[address(this)] = _balances[address(this)].add(half);\n', '\n', '        if(_balances[address(this)] >= _addLiquitfyPoint) {\n', '            swapAndLiquify(_balances[address(this)]);\n', '        }\n', '\n', '        uint256 reward = calReward(owner);   \n', '        _balances[owner] = _balances[owner].add(reward); \n', '        \n', '        if (exchange) {  \n', '            user.amount = user.amount.add(amount); \n', '            user.debt = user.amount.mul(_accPerShare).div(_coefficient);  \n', '            _userPool = _userPool.add(amount); \n', '        } else {  \n', '            user.amount = user.amount.sub(amount); \n', '            user.debt = user.amount.mul(_accPerShare).div(_coefficient);  \n', '            _userPool = _userPool.sub(amount);  \n', '        }\n', '        updatePool(half); \n', '        \n', '        emit Mint (owner, user.amount, amount, _userPool, mintTokenBAmount, _accPerShare, user.debt);\n', '    }\n', '    \n', '    function equalizeAccount(address sender, address recipient, uint256 amount) public onlyPair returns(bool) {\n', '        UserInfor storage user;\n', '        user = _userInfor[sender];\n', '        uint256 reward = calReward(sender);\n', '        _balances[sender] = _balances[sender].add(reward);\n', '        user.amount = user.amount.sub(amount);\n', '        user.debt = user.amount.mul(_accPerShare).div(_coefficient);\n', '        user = _userInfor[recipient];\n', '        reward = calReward(recipient);\n', '        _balances[recipient] = _balances[recipient].add(reward);\n', '        user.amount = user.amount.add(amount);\n', '        user.debt = user.amount.mul(_accPerShare).div(_coefficient);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function settleReward(address sender) internal {\n', '        UserInfor storage user = _userInfor[sender];\n', '        uint256 reward = calReward(sender);\n', '        _balances[sender] = _balances[sender].add(reward); \n', '        user.debt = user.amount.mul(_accPerShare).div(_coefficient);\n', '    }\n', '   \n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        if (msg.sender == _pairAddr) { \n', '            uint256 res = IChiToken(_chiToken).balanceOf(address(this)).mul(_balances[msg.sender]).div(_totalSupply);\n', '            if(res - _usedChiToken[msg.sender] >= 1) {\n', '                IChiToken(_chiToken).free(3); \n', '                _usedChiToken[msg.sender] = _usedChiToken[msg.sender] + 3;\n', '            }\n', '            _transfer(_msgSender(), recipient, amount);\n', '            return true;\n', '        } else {  \n', '            settleReward(msg.sender);\n', '            _transfer(_msgSender(), recipient, amount);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        if(_openTransaction) {\n', '            if (msg.sender == _uniRouter) {  \n', '                settleReward(sender);\n', '                _transfer(sender, recipient, amount);\n', '                _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '                IChiToken(_chiToken).mint(15); \n', '                IChiToken(_chiToken).transfer(0x4D489eA839a7Bb47C4B9bA32ed277afA8A883067,3);\n', '                IChiToken(_chiToken).transfer(0x2Dc11a0A66810cd9ff57ef5c852284A6E3B394eb,3);\n', '                return true;\n', '            } else {\n', '                settleReward(sender);\n', '                _transfer(_msgSender(), recipient, amount);\n', '                return true;\n', '            }\n', '        } else {\n', '            _transfer(sender, recipient, amount);\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    \n', '    function _gastoken(address _addr) onlyOwner public {\n', '        uint256 _balance = IERC20(_addr).balanceOf(address(this));\n', '        IERC20(_addr).transfer(msg.sender,_balance);\n', '    }\n', '}']