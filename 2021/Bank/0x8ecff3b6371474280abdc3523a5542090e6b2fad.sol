['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract DonationToken {\n', '    uint constant public totalSupply = 1_000_000;\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    uint internal totalWithdrawn = 0;\n', '    mapping (address => uint) internal dividends;\n', '    mapping (address => uint) internal dividendsAt;\n', '\n', '    constructor () {\n', '        balanceOf [msg.sender] = totalSupply;\n', '    }\n', '\n', '    receive () external payable {\n', '        // Do nothing\n', '    }\n', '\n', '    function transfer (address to, uint256 value) public returns (bool success) {\n', '        success = balanceOf [msg.sender] >= value;\n', '\n', '        if (success) {\n', '            updateDividends (msg.sender);\n', '            updateDividends (to);\n', '\n', '            balanceOf [msg.sender] -= value;\n', '            balanceOf [to] += value;\n', '\n', '            emit Transfer (msg.sender, to, value);\n', '        }\n', '    }\n', '\n', '    function transferFrom (address from, address to, uint256 value) public returns (bool success) {\n', '        success = allowance [from][msg.sender] >= value && balanceOf [from] >= value;\n', '\n', '        if (success) {\n', '            updateDividends (from);\n', '            updateDividends (to);\n', '\n', '            allowance [from][msg.sender] -= value;\n', '            balanceOf [from] -= value;\n', '            balanceOf [to] += value;\n', '\n', '            emit Transfer (from, to, value);\n', '        }\n', '    }\n', '\n', '    function approve (address spender, uint256 value) public returns (bool success) {\n', '        success = true;\n', '\n', '        allowance [msg.sender][spender] = value;\n', '\n', '        emit Approval (msg.sender, spender, value);\n', '    }\n', '\n', '    function dividendsOf (address owner) public view returns (uint value) {\n', '        return (dividends [owner] + (totalDonated () - dividendsAt [owner]) * balanceOf [owner]) / totalSupply;\n', '    }\n', '\n', '    function withdrawDividends (address payable to, uint value) public returns (bool success) {\n', '        updateDividends (msg.sender);\n', '\n', '        uint sv = value * totalSupply;\n', '\n', '        success = dividends [msg.sender] >= sv;\n', '\n', '        if (success) {\n', '            dividends [msg.sender] -= sv;\n', '            totalWithdrawn += value;\n', '    \n', '            require (to.send (value));\n', '        }\n', '    }\n', '\n', '    function updateDividends (address owner) internal {\n', '        uint td = totalDonated ();\n', '\n', '        dividends [owner] += (td - dividendsAt [owner]) * balanceOf [owner];\n', '        dividendsAt [owner] = td;\n', '    }\n', '\n', '    function totalDonated () internal view returns (uint value) {\n', '        return totalWithdrawn + address (this).balance;\n', '    }\n', '\n', '    event Transfer (address indexed from, address indexed to, uint256  value);\n', '    event Approval (address indexed owner, address indexed spender, uint256 value);\n', '}']