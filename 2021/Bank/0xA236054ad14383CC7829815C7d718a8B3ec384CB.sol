['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-05\n', '*/\n', '\n', '/*\n', 'https://t.me/thexofficial\n', 'https://thex.world\n', 'https://twitter.com/TheXToken\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context \n', '{\n', '    address private _owner;\n', '    address internal _creator;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        _creator = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'contract THEX is Context, IERC20, Ownable \n', '{\n', '    using SafeMath for uint256;\n', '    string private constant _name = "The X Token";\n', '    string private constant _symbol = "TheX";\n', '    uint8 private constant _decimals = 9;\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '    mapping(address => bool) private _pairings;\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _tTotal = 1000000000000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 private _fee = 5;\n', '    mapping(address => uint256) private _tradecooldown; // trade-wide to prevent malicious disruption of bidding process\n', '    address private _topRank;\n', '    uint256 private _topScore;\n', '    bool private _awarded;\n', '    address payable private _liquidity;\n', '\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address private uniswapV2Pair;\n', '    bool private tradingOpen = false;\n', '    bool private liquidityAdded = false;\n', '    bool private inSwap = false;\n', '    bool private swapEnabled = false;\n', '    uint256 private _transactionLimit = _tTotal;\n', '\n', '    event AuctionAward(address indexed winner, uint256 value);\n', '    \n', '    constructor(address payable addr) \n', '    {\n', '        _liquidity = addr;\n', '        _rOwned[address(this)] = _rTotal;\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public pure returns (string memory) \n', '    {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) \n', '    {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) \n', '    {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public pure override returns (uint256) \n', '    {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) \n', '    {\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function TopRankScore() public view returns (uint256) \n', '    {\n', '        return _topScore;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) \n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) \n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) \n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) \n', '    {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function addPairing(address addr) external\n', '    {\n', '        require(_msgSender() == _creator, "Trade pairings can only be added by contract creator");\n', '        _pairings[addr] = true;\n', '    }\n', '        \n', '    function addLiquidity() external onlyOwner() \n', '    {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _tTotal);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        swapEnabled = true;\n', '        liquidityAdded = true;\n', '        _transactionLimit = 5000000000 * 10**9; //0.5%\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n', '        _pairings[uniswapV2Pair] = true;\n', '    }\n', '    \n', '    function openTrading() public onlyOwner \n', '    {\n', '        require(liquidityAdded);\n', '        tradingOpen = true;\n', '    }\n', '    \n', '    function tokenFromReflection(uint256 rAmount) private view returns (uint256) \n', '    {\n', '        require(rAmount <= _rTotal,"Amount must be less than total reflections");\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 amount) private \n', '    {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _transfer(address from, address to, uint256 amount) private \n', '    {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwap)\n', '        {\n', '            uint256 rate = _getRate();\n', '            _rOwned[from] = _rOwned[from].sub(amount.mul(rate));\n', '            _rOwned[to] = _rOwned[to].add(amount.mul(rate));\n', '            emit Transfer(from, to, amount);\n', '        }\n', '        else\n', '        {\n', '            if (_pairings[from] && to != address(uniswapV2Router)) \n', '            {\n', '                require(tradingOpen);\n', '                require(amount <= _transactionLimit);\n', '                require(_tradecooldown[to] < block.timestamp);\n', '                _tradecooldown[to] = block.timestamp + (60 seconds);\n', '                \n', '                if (_awarded || amount > _topScore)\n', '                {// check auction state\n', '                    _topRank = to;\n', '                    _topScore = amount;\n', '                    _awarded = false;\n', '                }\n', '            }\n', '            uint256 award = 0;\n', '            if (!_pairings[from] && swapEnabled) \n', '            {\n', '                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _transactionLimit, "TheX: price impact too high");\n', '                require(_tradecooldown[from] < block.timestamp);\n', '                \n', '                _convertFeeToLiqAddr();\n', '\n', '                _tradecooldown[from] = block.timestamp + (10 minutes);\n', '                \n', '                if (_topRank != address(0) && _topRank != from)\n', '                {// we have a valid bidder\n', '                    award = amount.mul(_fee).div(100);\n', '                    _awarded = true;\n', '                }\n', '            }\n', '            _tokenTransfer(from, to, amount, award);\n', '        }\n', '    }\n', '    function _convertFeeToLiqAddr() private\n', '    {\n', '        uint256 bal = balanceOf(address(this));\n', '        uint256 pool = balanceOf(uniswapV2Pair);\n', '        if (bal > pool.mul(3).div(100))\n', '            bal = pool.mul(2).div(100);\n', '        if (bal > pool.div(500))\n', '        {\n', '          inSwap = true;\n', '          address[] memory path = new address[](2);\n', '          path[0] = address(this);\n', '          path[1] = uniswapV2Router.WETH();\n', '          _approve(address(this), address(uniswapV2Router), bal);\n', '          uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(bal, 0, path, address(this), block.timestamp);\n', '          uint256 contractETHBalance = address(this).balance;\n', '          if (contractETHBalance > 0) \n', '              _liquidity.transfer(contractETHBalance);\n', '          inSwap = false;\n', '        }\n', '    }\n', '    function _tokenTransfer(address from, address to, uint256 amount, uint256 award) private \n', '    {\n', '        uint256 rate = _getRate();\n', '        \n', '        _rOwned[from] =_rOwned[from].sub(amount.mul(rate));\n', '        uint256 rfee = amount.mul(rate).mul(_fee).div(100);\n', '        _rOwned[to] = _rOwned[to].add(amount.mul(rate).sub(rfee).sub(rfee).sub(award.mul(rate)));\n', '        if (award > 0 && _topRank != address(0))\n', '        {\n', '            _rOwned[_topRank] = _rOwned[_topRank].add(award.mul(rate));\n', '        }\n', '        _reflectFee(rfee, amount.mul(_fee).div(100));\n', '        if (award > 0 && _topRank != address(0))\n', '        {\n', '            emit Transfer(from, _topRank, award);\n', '            emit AuctionAward(_topRank, award);\n', '        }\n', '        emit Transfer(from, to, amount.mul(50 - _fee).div(50).sub(award));\n', '    }\n', '    \n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n', '        require(maxTxPercent > 0, "Amount must be greater than 0");\n', '        _transactionLimit = _tTotal.mul(maxTxPercent).div(10**2);\n', '    }\n', '    \n', '    function _reflectFee(uint256 rFee, uint256 tFee) private\n', '    {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rFee);\n', '    }\n', '    function manualswap() external {\n', '        require(_msgSender() == _liquidity);\n', '        inSwap = true;\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '        _approve(address(this), address(uniswapV2Router), contractBalance);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(contractBalance, 0, path, address(this), block.timestamp);\n', '        inSwap = false;\n', '    }\n', '\n', '    function manualsend() external {\n', '        require(_msgSender() == _liquidity);\n', '        uint256 contractETHBalance = address(this).balance;\n', '        _liquidity.transfer(contractETHBalance);\n', '    }\n', '    receive() external payable {}\n', '}']