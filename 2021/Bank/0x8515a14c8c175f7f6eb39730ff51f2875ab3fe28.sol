['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '/// @title Contains 512-bit math functions\n', '/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n', '/// @dev Handles "phantom overflow" i.e., allows multiplication and division where an intermediate value overflows 256 bits\n', 'library FullMath {\n', '  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n', '  /// @param a The multiplicand\n', '  /// @param b The multiplier\n', '  /// @param denominator The divisor\n', '  /// @return result The 256-bit result\n', '  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n', '  function mulDiv(\n', '    uint256 a,\n', '    uint256 b,\n', '    uint256 denominator\n', '  ) internal pure returns (uint256 result) {\n', '    // 512-bit multiply [prod1 prod0] = a * b\n', '    // Compute the product mod 2**256 and mod 2**256 - 1\n', '    // then use the Chinese Remainder Theorem to reconstruct\n', '    // the 512 bit result. The result is stored in two 256\n', '    // variables such that product = prod1 * 2**256 + prod0\n', '    uint256 prod0; // Least significant 256 bits of the product\n', '    uint256 prod1; // Most significant 256 bits of the product\n', '    assembly {\n', '      let mm := mulmod(a, b, not(0))\n', '      prod0 := mul(a, b)\n', '      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n', '    }\n', '\n', '    // Handle non-overflow cases, 256 by 256 division\n', '    if (prod1 == 0) {\n', '      require(denominator > 0);\n', '      assembly {\n', '        result := div(prod0, denominator)\n', '      }\n', '      return result;\n', '    }\n', '\n', '    // Make sure the result is less than 2**256.\n', '    // Also prevents denominator == 0\n', '    require(denominator > prod1);\n', '\n', '    ///////////////////////////////////////////////\n', '    // 512 by 256 division.\n', '    ///////////////////////////////////////////////\n', '\n', '    // Make division exact by subtracting the remainder from [prod1 prod0]\n', '    // Compute remainder using mulmod\n', '    uint256 remainder;\n', '    assembly {\n', '      remainder := mulmod(a, b, denominator)\n', '    }\n', '    // Subtract 256 bit number from 512 bit number\n', '    assembly {\n', '      prod1 := sub(prod1, gt(remainder, prod0))\n', '      prod0 := sub(prod0, remainder)\n', '    }\n', '\n', '    // Factor powers of two out of denominator\n', '    // Compute largest power of two divisor of denominator.\n', '    // Always >= 1.\n', '    uint256 twos = -denominator & denominator;\n', '    // Divide denominator by power of two\n', '    assembly {\n', '      denominator := div(denominator, twos)\n', '    }\n', '\n', '    // Divide [prod1 prod0] by the factors of two\n', '    assembly {\n', '      prod0 := div(prod0, twos)\n', '    }\n', '    // Shift in bits from prod1 into prod0. For this we need\n', '    // to flip `twos` such that it is 2**256 / twos.\n', '    // If twos is zero, then it becomes one\n', '    assembly {\n', '      twos := add(div(sub(0, twos), twos), 1)\n', '    }\n', '    prod0 |= prod1 * twos;\n', '\n', '    // Invert denominator mod 2**256\n', '    // Now that denominator is an odd number, it has an inverse\n', '    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n', '    // Compute the inverse by starting with a seed that is correct\n', '    // correct for four bits. That is, denominator * inv = 1 mod 2**4\n', '    uint256 inv = (3 * denominator) ^ 2;\n', '    // Now use Newton-Raphson iteration to improve the precision.\n', "    // Thanks to Hensel's lifting lemma, this also works in modular\n", '    // arithmetic, doubling the correct bits in each step.\n', '    inv *= 2 - denominator * inv; // inverse mod 2**8\n', '    inv *= 2 - denominator * inv; // inverse mod 2**16\n', '    inv *= 2 - denominator * inv; // inverse mod 2**32\n', '    inv *= 2 - denominator * inv; // inverse mod 2**64\n', '    inv *= 2 - denominator * inv; // inverse mod 2**128\n', '    inv *= 2 - denominator * inv; // inverse mod 2**256\n', '\n', '    // Because the division is now exact we can divide by multiplying\n', '    // with the modular inverse of denominator. This will give us the\n', '    // correct result modulo 2**256. Since the precoditions guarantee\n', '    // that the outcome is less than 2**256, this is the final result.\n', "    // We don't need to compute the high bits of the result and prod1\n", '    // is no longer required.\n', '    result = prod0 * inv;\n', '    return result;\n', '  }\n', '\n', '  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n', '  /// @param a The multiplicand\n', '  /// @param b The multiplier\n', '  /// @param denominator The divisor\n', '  /// @return result The 256-bit result\n', '  function mulDivRoundingUp(\n', '    uint256 a,\n', '    uint256 b,\n', '    uint256 denominator\n', '  ) internal pure returns (uint256 result) {\n', '    result = mulDiv(a, b, denominator);\n', '    if (mulmod(a, b, denominator) > 0) {\n', '      require(result < (0 - uint256(1)));\n', '      result++;\n', '    }\n', '  }\n', '}\n', '\n', '/// @title Math library for computing sqrt prices from ticks and vice versa\n', '/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n', '/// prices between 2**-128 and 2**128\n', 'library TickMath {\n', '  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n', '  int24 internal constant MIN_TICK = -887272;\n', '  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n', '  int24 internal constant MAX_TICK = -MIN_TICK;\n', '\n', '  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n', '  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n', '  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n', '  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n', '\n', '  /// @notice Calculates sqrt(1.0001^tick) * 2^96\n', '  /// @dev Throws if |tick| > max tick\n', '  /// @param tick The input tick for the above formula\n', '  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n', '  /// at the given tick\n', '  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n', '    uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n', '    require(absTick <= uint256(MAX_TICK), "T");\n', '\n', '    uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n', '    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n', '    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n', '    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n', '    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n', '    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n', '    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n', '    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n', '    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n', '    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n', '    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n', '    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n', '    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n', '    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n', '    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n', '    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n', '    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n', '    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n', '    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n', '    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n', '\n', '    if (tick > 0) ratio = (0 - uint256(1)) / ratio;\n', '\n', '    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n', '    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n', '    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n', '    sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n', '  }\n', '\n', '  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n', '  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n', '  /// ever return.\n', '  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n', '  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n', '  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n', '    // second inequality must be < because the price can never reach the price at the max tick\n', '    require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, "R");\n', '    uint256 ratio = uint256(sqrtPriceX96) << 32;\n', '\n', '    uint256 r = ratio;\n', '    uint256 msb = 0;\n', '\n', '    assembly {\n', '      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(5, gt(r, 0xFFFFFFFF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(4, gt(r, 0xFFFF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(3, gt(r, 0xFF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(2, gt(r, 0xF))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := shl(1, gt(r, 0x3))\n', '      msb := or(msb, f)\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      let f := gt(r, 0x1)\n', '      msb := or(msb, f)\n', '    }\n', '\n', '    if (msb >= 128) r = ratio >> (msb - 127);\n', '    else r = ratio << (127 - msb);\n', '\n', '    int256 log_2 = (int256(msb) - 128) << 64;\n', '\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(63, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(62, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(61, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(60, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(59, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(58, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(57, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(56, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(55, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(54, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(53, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(52, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(51, f))\n', '      r := shr(f, r)\n', '    }\n', '    assembly {\n', '      r := shr(127, mul(r, r))\n', '      let f := shr(128, r)\n', '      log_2 := or(log_2, shl(50, f))\n', '    }\n', '\n', '    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n', '\n', '    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n', '    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n', '\n', '    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n', '  }\n', '}\n', '\n', '/// @title Pool state that never changes\n', '/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\n', 'interface IUniswapV3PoolImmutables {\n', '    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n', '    /// @return The contract address\n', '    function factory() external view returns (address);\n', '\n', '    /// @notice The first of the two tokens of the pool, sorted by address\n', '    /// @return The token contract address\n', '    function token0() external view returns (address);\n', '\n', '    /// @notice The second of the two tokens of the pool, sorted by address\n', '    /// @return The token contract address\n', '    function token1() external view returns (address);\n', '\n', "    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n", '    /// @return The fee\n', '    function fee() external view returns (uint24);\n', '\n', '    /// @notice The pool tick spacing\n', '    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n', '    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n', '    /// This value is an int24 to avoid casting even though it is always positive.\n', '    /// @return The tick spacing\n', '    function tickSpacing() external view returns (int24);\n', '\n', '    /// @notice The maximum amount of position liquidity that can use any tick in the range\n', '    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n', '    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n', '    /// @return The max amount of liquidity per tick\n', '    function maxLiquidityPerTick() external view returns (uint128);\n', '}\n', '\n', '/// @title Pool state that can change\n', "/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n", '/// per transaction\n', 'interface IUniswapV3PoolState {\n', '    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n', '    /// when accessed externally.\n', '    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n', '    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n', '    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n', '    /// boundary.\n', '    /// observationIndex The index of the last oracle observation that was written,\n', '    /// observationCardinality The current maximum number of observations stored in the pool,\n', '    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n', '    /// feeProtocol The protocol fee for both tokens of the pool.\n', '    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n', '    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n', '    /// unlocked Whether the pool is currently locked to reentrancy\n', '    function slot0()\n', '        external\n', '        view\n', '        returns (\n', '            uint160 sqrtPriceX96,\n', '            int24 tick,\n', '            uint16 observationIndex,\n', '            uint16 observationCardinality,\n', '            uint16 observationCardinalityNext,\n', '            uint8 feeProtocol,\n', '            bool unlocked\n', '        );\n', '\n', '    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n', '    /// @dev This value can overflow the uint256\n', '    function feeGrowthGlobal0X128() external view returns (uint256);\n', '\n', '    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n', '    /// @dev This value can overflow the uint256\n', '    function feeGrowthGlobal1X128() external view returns (uint256);\n', '\n', '    /// @notice The amounts of token0 and token1 that are owed to the protocol\n', '    /// @dev Protocol fees will never exceed uint128 max in either token\n', '    function protocolFees() external view returns (uint128 token0, uint128 token1);\n', '\n', '    /// @notice The currently in range liquidity available to the pool\n', '    /// @dev This value has no relationship to the total liquidity across all ticks\n', '    function liquidity() external view returns (uint128);\n', '\n', '    /// @notice Look up information about a specific tick in the pool\n', '    /// @param tick The tick to look up\n', '    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n', '    /// tick upper,\n', '    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n', '    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n', '    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n', '    /// feeGrowthOutsideX128 values can only be used if the tick is initialized,\n', '    /// i.e. if liquidityGross is greater than 0. In addition, these values are only relative and are used to\n', '    /// compute snapshots.\n', '    function ticks(int24 tick)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 liquidityGross,\n', '            int128 liquidityNet,\n', '            uint256 feeGrowthOutside0X128,\n', '            uint256 feeGrowthOutside1X128\n', '        );\n', '\n', '    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n', '    function tickBitmap(int16 wordPosition) external view returns (uint256);\n', '\n', '    /// @notice Returns 8 packed tick seconds outside values. See SecondsOutside for more information\n', '    function secondsOutside(int24 wordPosition) external view returns (uint256);\n', '\n', "    /// @notice Returns the information about a position by the position's key\n", "    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n", '    /// @return _liquidity The amount of liquidity in the position,\n', '    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n', '    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n', '    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n', '    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n', '    function positions(bytes32 key)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 _liquidity,\n', '            uint256 feeGrowthInside0LastX128,\n', '            uint256 feeGrowthInside1LastX128,\n', '            uint128 tokensOwed0,\n', '            uint128 tokensOwed1\n', '        );\n', '\n', '    /// @notice Returns data about a specific observation index\n', '    /// @param index The element of the observations array to fetch\n', '    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n', '    /// ago, rather than at a specific index in the array.\n', '    /// @return blockTimestamp The timestamp of the observation,\n', '    /// Returns tickCumulative the current tick multiplied by seconds elapsed for the life of the pool as of the\n', '    /// observation,\n', '    /// Returns liquidityCumulative the current liquidity multiplied by seconds elapsed for the life of the pool as of\n', '    /// the observation,\n', '    /// Returns initialized whether the observation has been initialized and the values are safe to use\n', '    function observations(uint256 index)\n', '        external\n', '        view\n', '        returns (\n', '            uint32 blockTimestamp,\n', '            int56 tickCumulative,\n', '            uint160 liquidityCumulative,\n', '            bool initialized\n', '        );\n', '}\n', '\n', '/// @title Pool state that is not stored\n', '/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n', '/// blockchain. The functions here may have variable gas costs.\n', 'interface IUniswapV3PoolDerivedState {\n', '    /// @notice Returns a relative timestamp value representing how long, in seconds, the pool has spent between\n', '    /// tickLower and tickUpper\n', '    /// @dev This timestamp is strictly relative. To get a useful elapsed time (i.e., duration) value, the value returned\n', '    /// by this method should be checkpointed externally after a position is minted, and again before a position is\n', '    /// burned. Thus the external contract must control the lifecycle of the position.\n', '    /// @param tickLower The lower tick of the range for which to get the seconds inside\n', '    /// @param tickUpper The upper tick of the range for which to get the seconds inside\n', '    /// @return A relative timestamp for how long the pool spent in the tick range\n', '    function secondsInside(int24 tickLower, int24 tickUpper) external view returns (uint32);\n', '\n', '    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n', '    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n', '    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n', '    /// you must call it with secondsAgos = [3600, 0].\n', '    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n', '    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n', '    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n', '    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n', '    /// @return liquidityCumulatives Cumulative liquidity-in-range value as of each `secondsAgos` from the current block\n', '    /// timestamp\n', '    function observe(uint32[] calldata secondsAgos)\n', '        external\n', '        view\n', '        returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\n', '}\n', '\n', '\n', '\n', '/// @title The interface for a Uniswap V3 Pool\n', '/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n', '/// to the ERC20 specification\n', '/// @dev The pool interface is broken up into many smaller pieces\n', 'interface IUniswapV3Pool is\n', '    IUniswapV3PoolImmutables,\n', '    IUniswapV3PoolState,\n', '    IUniswapV3PoolDerivedState\n', '{\n', '\n', '}\n', '\n', '/// @title Optimized overflow and underflow safe math operations\n', '/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\n', 'library LowGasSafeMath {\n', '  /// @notice Returns x + y, reverts if sum overflows uint256\n', '  /// @param x The augend\n', '  /// @param y The addend\n', '  /// @return z The sum of x and y\n', '  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require((z = x + y) >= x);\n', '  }\n', '\n', '  /// @notice Returns x - y, reverts if underflows\n', '  /// @param x The minuend\n', '  /// @param y The subtrahend\n', '  /// @return z The difference of x and y\n', '  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require((z = x - y) <= x);\n', '  }\n', '\n', '  /// @notice Returns x * y, reverts if overflows\n', '  /// @param x The multiplicand\n', '  /// @param y The multiplier\n', '  /// @return z The product of x and y\n', '  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require(x == 0 || (z = x * y) / x == y);\n', '  }\n', '\n', '  /// @notice Returns x + y, reverts if overflows or underflows\n', '  /// @param x The augend\n', '  /// @param y The addend\n', '  /// @return z The sum of x and y\n', '  function add(int256 x, int256 y) internal pure returns (int256 z) {\n', '    require((z = x + y) >= x == (y >= 0));\n', '  }\n', '\n', '  /// @notice Returns x - y, reverts if overflows or underflows\n', '  /// @param x The minuend\n', '  /// @param y The subtrahend\n', '  /// @return z The difference of x and y\n', '  function sub(int256 x, int256 y) internal pure returns (int256 z) {\n', '    require((z = x - y) <= x == (y >= 0));\n', '  }\n', '}\n', '\n', '/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\n', 'library PoolAddress {\n', '    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n', '\n', '    /// @notice The identifying key of the pool\n', '    struct PoolKey {\n', '        address token0;\n', '        address token1;\n', '        uint24 fee;\n', '    }\n', '\n', '    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n', '    /// @param tokenA The first token of a pool, unsorted\n', '    /// @param tokenB The second token of a pool, unsorted\n', '    /// @param fee The fee level of the pool\n', '    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n', '    function getPoolKey(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint24 fee\n', '    ) internal pure returns (PoolKey memory) {\n', '        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n', '        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n', '    }\n', '\n', '    /// @notice Deterministically computes the pool address given the factory and PoolKey\n', '    /// @param factory The Uniswap V3 factory contract address\n', '    /// @param key The PoolKey\n', '    /// @return pool The contract address of the V3 pool\n', '    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n', '        require(key.token0 < key.token1);\n', '        pool = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', "                        hex'ff',\n", '                        factory,\n', '                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n', '                        POOL_INIT_CODE_HASH\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '}\n', '\n', '/// @title Oracle library\n', '/// @notice Provides functions to integrate with V3 pool oracle\n', 'library OracleLibrary {\n', '    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\n', '    /// @param pool Address of Uniswap V3 pool that we want to observe\n', '    /// @param period Number of seconds in the past to start calculating time-weighted average\n', '    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\n', '    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\n', "        require(period != 0, 'BP');\n", '\n', '        uint32[] memory secondAgos = new uint32[](2);\n', '        secondAgos[0] = period;\n', '        secondAgos[1] = 0;\n', '\n', '        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondAgos);\n', '        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n', '\n', '        timeWeightedAverageTick = int24(tickCumulativesDelta / period);\n', '\n', '        // Always round to negative infinity\n', '        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % period != 0)) timeWeightedAverageTick--;\n', '    }\n', '\n', '    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n', '    /// @param tick Tick value used to calculate the quote\n', '    /// @param baseAmount Amount of token to be converted\n', '    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n', '    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n', '    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n', '    function getQuoteAtTick(\n', '        int24 tick,\n', '        uint128 baseAmount,\n', '        address baseToken,\n', '        address quoteToken\n', '    ) internal pure returns (uint256 quoteAmount) {\n', '        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n', '\n', "        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n", '        if (sqrtRatioX96 <= uint128(-1)) {\n', '            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n', '            quoteAmount = baseToken < quoteToken\n', '                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n', '                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n', '        } else {\n', '            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n', '            quoteAmount = baseToken < quoteToken\n', '                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n', '                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract TokenLike {\n', '    function balanceOf(address) public view virtual returns (uint256);\n', '}\n', '\n', 'contract UniswapV3Medianizer {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "UniswapV3Medianizer/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Uniswap Vars ---\n', '    // Default amount of targetToken used when calculating the denominationToken output\n', '    uint128              public defaultAmountIn  = 1 ether;\n', '    // Minimum liquidity of targetToken to consider a valid result\n', '    uint256              public minimumLiquidity = 10000 ether; // note: increase this for prod\n', '    // Token for which the contract calculates the medianPrice for\n', '    address              public targetToken;\n', '    // Pair token from the Uniswap pair\n', '    address              public denominationToken;\n', '    // The pool to read price data from\n', '    address              public uniswapPool;\n', '\n', '    // --- General Vars ---\n', '    // The desired amount of time over which the moving average should be computed, e.g. 24 hours\n', '    uint32  public windowSize;\n', '    // Manual flag that can be set by governance and indicates if a result is valid or not\n', '    uint256 public validityFlag;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '\n', '    constructor(\n', '      address uniswapPool_,\n', '      address targetToken_,\n', '      uint32  windowSize_\n', '    ) public {\n', '        require(uniswapPool_ != address(0), "UniswapV3Medianizer/null-uniswap-factory");\n', "        require(windowSize_ > 0, 'UniswapV3Medianizer/null-window-size');\n", '\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        uniswapPool                    = uniswapPool_;\n', '        windowSize                     = windowSize_;\n', '        validityFlag                   = 1;\n', '        targetToken                    = targetToken_;\n', '\n', '        address token0 = IUniswapV3Pool(uniswapPool_).token0();\n', '        address token1 = IUniswapV3Pool(uniswapPool_).token1();\n', '\n', '        require(targetToken_ == token0 || targetToken_ == token1, "UniswapV3Medianizer/target-not-from-pool");\n', '\n', '        denominationToken = targetToken_ == token0 ? token1 : token0;\n', '\n', '        // Emit events\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters(bytes32("windowSize"), windowSize_);\n', '    }\n', '\n', '    // --- General Utils --\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '    function both(bool x, bool y) private pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "UniswapV3Medianizer/toUint128_overflow");\n', '        return uint128(value);\n', '    }\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "UniswapV3Medianizer/toUint32_overflow");\n', '        return uint32(value);\n', '    }\n', '\n', '    // --- Administration ---\n', '    /**\n', '    * @notice Modify uint256 parameters\n', '    * @param parameter Name of the parameter to modify\n', '    * @param data New parameter value\n', '    **/\n', '    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n', '        if (parameter == "validityFlag") {\n', '          require(either(data == 1, data == 0), "UniswapV3Medianizer/invalid-data");\n', '          validityFlag = data;\n', '        }\n', '        else if (parameter == "defaultAmountIn") {\n', '          require(data > 0, "UniswapV3Medianizer/invalid-default-amount-in");\n', '          defaultAmountIn = toUint128(data);\n', '        }\n', '        else if (parameter == "windowSize") {\n', "          require(data > 0, 'UniswapV3Medianizer/invalid-window-size');\n", '          windowSize = toUint32(data);\n', '        }\n', '        else revert("UniswapV3Medianizer/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, data);\n', '    }\n', '\n', '    // --- Getters ---\n', '    /**\n', '    * @notice Returns true if feed is valid\n', '    **/\n', '    function isValid() public view returns (bool) {\n', '        return both(validityFlag == 1, TokenLike(targetToken).balanceOf(address(uniswapPool)) >= minimumLiquidity);\n', '    }\n', '\n', '    /**\n', '    * @notice Returns medianPrice for windowSize\n', '    **/\n', '    function getMedianPrice() public view returns (uint256) {\n', '        return getMedianPrice(windowSize);\n', '    }\n', '\n', '    /**\n', '    * @notice Returns medianPrice for a given period\n', '    * @param period Number of seconds in the past to start calculating time-weighted average\n', '    * @return TWAP\n', '    **/\n', '    function getMedianPrice(uint32 period) public view returns (uint256) {\n', '        int24 timeWeightedAverageTick = OracleLibrary.consult(address(uniswapPool), period);\n', '        return OracleLibrary.getQuoteAtTick(\n', '            timeWeightedAverageTick,\n', '            defaultAmountIn,\n', '            targetToken,\n', '            denominationToken\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Fetch the latest medianPrice (for maxWindow) or revert if is is null\n', '    **/\n', '    function read() external view returns (uint256 value) {\n', '        value = getMedianPrice();\n', '        require(\n', '          both(value > 0, isValid()),\n', '          "UniswapV3Medianizer/invalid-price-feed"\n', '        );\n', '    }\n', '    /**\n', '    * @notice Fetch the latest medianPrice and whether it is null or not\n', '    **/\n', '    function getResultWithValidity() external view returns (uint256 value, bool valid) {\n', '        value = getMedianPrice();\n', '        valid = both(value > 0, isValid());\n', '    }\n', '}']