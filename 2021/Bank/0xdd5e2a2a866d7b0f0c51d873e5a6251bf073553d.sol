['// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.5;\n', '\n', 'import "LibSafeMath.sol";\n', 'import "LibBaseAuth.sol";\n', '\n', '\n', 'interface IVokenTB {\n', '    function cap() external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function burningPermilleBorder() external view returns (uint16 min, uint16 max);\n', '    function vokenCounter() external view returns (uint256);\n', '    \n', '    function address2voken(address account) external view returns (uint160);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function vestingOf(address account) external view returns (uint256);\n', '    function availableOf(address account) external view returns (uint256);\n', '    function isBank(address account) external view returns (bool);\n', '    function referrer(address account) external view returns (address payable);\n', '}\n', '\n', '\n', 'interface IUniswapV2Router02 {\n', '    function WETH() external pure returns (address);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'contract VokenTBData is BaseAuth {\n', '    using SafeMath for uint256;\n', '\n', '    IUniswapV2Router02 private immutable UniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    IVokenTB private immutable VOKEN_TB = IVokenTB(0x1234567a022acaa848E7D6bC351d075dBfa76Dd4);\n', '    address private immutable DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    receive() external payable {}\n', '\n', '    function data(address account)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 etherBalance,\n', '            uint256 etherPrice,\n', '            uint256 vokenPrice,\n', '\n', '            uint256 cap,\n', '            uint256 totalSupply,\n', '            uint16 burningPermilleMin,\n', '            uint16 burningPermilleMax,\n', '\n', '            uint256 vokenCounter,\n', '\n', '            uint160 vokenInt,\n', '            uint256 balance,\n', '            uint256 vesting,\n', '\n', '            bool isBank,\n', '            address payable referrer\n', '        )\n', '    {\n', '        etherBalance = account.balance;\n', '        etherPrice = _etherPrice();\n', '        vokenPrice = _vokenPrice();\n', '\n', '        cap = VOKEN_TB.cap();\n', '        totalSupply = VOKEN_TB.totalSupply();\n', '        (burningPermilleMin, burningPermilleMax) = VOKEN_TB.burningPermilleBorder();\n', '\n', '        vokenCounter = VOKEN_TB.vokenCounter();\n', '\n', '        vokenInt = VOKEN_TB.address2voken(account);\n', '        balance = VOKEN_TB.balanceOf(account);\n', '        vesting = VOKEN_TB.vestingOf(account);\n', '\n', '        isBank = VOKEN_TB.isBank(account);\n', '        referrer = VOKEN_TB.referrer(account);\n', '    }\n', '    \n', '    function _etherPrice()\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = UniswapV2Router02.WETH();\n', '        path[1] = DAI;\n', '\n', '        return UniswapV2Router02.getAmountsOut(1_000_000, path)[1];\n', '    }\n', '\n', '    function _vokenPrice()\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(VOKEN_TB);\n', '        path[1] = DAI;\n', '        \n', '        return UniswapV2Router02.getAmountsOut(1_000_000, path)[1].mul(1_000_000_000).div(1 ether);\n', '    }\n', '}']