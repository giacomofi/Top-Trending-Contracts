['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '//SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '    * @dev Returns the amount of tokens in existence.\n', '    */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '    * @dev Returns the amount of tokens owned by `account`.\n', '    */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "    * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @dev Returns the remaining number of tokens that `spender` will be\n', '    * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '    * zero by default.\n', '    *\n', '    * This value changes when {approve} or {transferFrom} are called.\n', '    */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '    * that someone may use both the old and the new allowance by unfortunate\n', '    * transaction ordering. One possible solution to mitigate this race\n', "    * condition is to first reduce the spender's allowance to 0 and set the\n", '    * desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    *\n', '    * Emits an {Approval} event.\n', '    */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "    * allowance mechanism. `amount` is then deducted from the caller's\n", '    * allowance.\n', '    *\n', '    * Returns a boolean value indicating whether the operation succeeded.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '    * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '    * another (`to`).\n', '    *\n', '    * Note that `value` may be zero.\n', '    */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '    * a call to {approve}. `value` is the new allowance.\n', '    */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Addition cannot overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '    */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Multiplication cannot overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts with custom message when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '    * @dev Returns true if `account` is a contract.\n', '    *\n', '    * [IMPORTANT]\n', '    * ====\n', '    * It is unsafe to assume that an address for which this function returns\n', '    * false is an externally-owned account (EOA) and not a contract.\n', '    *\n', '    * Among others, `isContract` will return false for the following\n', '    * types of addresses:\n', '    *\n', '    *  - an externally-owned account\n', '    *  - a contract in construction\n', '    *  - an address where a contract will be created\n', '    *  - an address where a contract lived, but was destroyed\n', '    * ====\n', '    */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '    * `recipient`, forwarding all available gas and reverting on errors.\n', '    *\n', '    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '    * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '    * imposed by `transfer`, making them unable to receive funds via\n', '    * `transfer`. {sendValue} removes this limitation.\n', '    *\n', '    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '    *\n', '    * IMPORTANT: because control is transferred to `recipient`, care must be\n', '    * taken to not create reentrancy vulnerabilities. Consider using\n', '    * {ReentrancyGuard} or the\n', '    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '    */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '    * @dev Performs a Solidity function call using a low level `call`. A\n', '    * plain`call` is an unsafe replacement for a function call: use this\n', '    * function instead.\n', '    *\n', '    * If `target` reverts with a revert reason, it is bubbled up by this\n', '    * function (like regular Solidity function calls).\n', '    *\n', '    * Returns the raw returned data. To convert to the expected return value,\n', '    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `target` must be a contract.\n', '    * - calling `target` with `data` must not revert.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '    * `errorMessage` as a fallback revert reason when `target` reverts.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '    * but also transferring `value` wei to `target`.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - the calling contract must have an ETH balance of at least `value`.\n', '    * - the called Solidity function must be `payable`.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '    * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Initializes the contract setting the deployer as the initial owner.\n', '    */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the address of the current owner.\n', '    */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Leaves the contract without owner. It will not be possible to call\n', '    * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '    *\n', '    * NOTE: Renouncing ownership will leave the contract without an owner,\n', '    * thereby removing any functionality that is only available to the owner.\n', '    */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '    * Can only be called by the current owner.\n', '    */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// Contract implementation\n', 'contract BitcoinMax is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => bool) private _isExcludedFromFee;\n', '\n', '    mapping (address => bool) private _isExcluded; // excluded from reward\n', '    address[] private _excluded;\n', '    mapping (address => bool) private _isBlackListedBot;\n', '    address[] private _blackListedBots;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '\n', '    uint256 private _tTotal = 21_000_000_000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '\n', "    string private _name = 'Bitcoin Max';\n", "    string private _symbol = 'BMAX';\n", '    uint8 private _decimals = 9;\n', '\n', '    uint256 private _taxFee = 4; // 4% reflection fee for every holder\n', '    uint256 private _marketingFee = 2; // 2% marketing\n', '    uint256 private _liquidityFee = 4; // 4% into liquidity\n', '\n', '    uint256 private _previousTaxFee = _taxFee;\n', '    uint256 private _previousMarketingFee = _marketingFee;\n', '    uint256 private _previousLiquidityFee = _liquidityFee;\n', '\n', '    address payable private _marketingWalletAddress = payable(0xf8Ec8bB8ABbC61C2373827282Dbe84A6a381511E);\n', '\n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    address public immutable uniswapV2Pair;\n', '\n', '    bool inSwapAndLiquify = false;\n', '    bool public swapAndLiquifyEnabled = true;\n', '\n', '    uint256 private _maxTxAmount = _tTotal;\n', '    // We will set a minimum amount of tokens to be swapped\n', '    uint256 private _numTokensSellToAddToLiquidity = 210000 * 10**9;\n', '\n', '    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        uint256 tokensSwapped,\n', '        uint256 ethReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor () public {\n', '        _rOwned[_msgSender()] = _rTotal;\n', '\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for Ethereum network\n', '        // Create a uniswap pair for this new token\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '        .createPair(address(this), _uniswapV2Router.WETH());\n', '\n', '        // set the rest of the contract variables\n', '        uniswapV2Router = _uniswapV2Router;\n', '\n', '        // Exclude owner and this contract from fee\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _isExcludedFromFee[_marketingWalletAddress] = true;\n', '\n', '        // BLACKLIST\n', '        _isBlackListedBot[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;\n', '        _blackListedBots.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));\n', '\n', '        _isBlackListedBot[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;\n', '        _blackListedBots.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));\n', '\n', '        _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;\n', '        _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));\n', '\n', '        _isBlackListedBot[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;\n', '        _blackListedBots.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));\n', '\n', '        _isBlackListedBot[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;\n', '        _blackListedBots.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));\n', '\n', '        _isBlackListedBot[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;\n', '        _blackListedBots.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));\n', '\n', '        _isBlackListedBot[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;\n', '        _blackListedBots.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));\n', '\n', '        _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;\n', '        _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));\n', '\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcludedFromReward(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\n', '        _isExcludedFromFee[account] = excluded;\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,,) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,,) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeFromReward(address account) external onlyOwner() {\n', "        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\n", '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeInReward(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addBotToBlackList(address account) external onlyOwner() {\n', "        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');\n", '        require(!_isBlackListedBot[account], "Account is already blacklisted");\n', '        _isBlackListedBot[account] = true;\n', '        _blackListedBots.push(account);\n', '    }\n', '\n', '    function removeBotFromBlackList(address account) external onlyOwner() {\n', '        require(_isBlackListedBot[account], "Account is not blacklisted");\n', '        for (uint256 i = 0; i < _blackListedBots.length; i++) {\n', '            if (_blackListedBots[i] == account) {\n', '                _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];\n', '                _isBlackListedBot[account] = false;\n', '                _blackListedBots.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function removeAllFee() private {\n', '        if(_taxFee == 0 && _marketingFee == 0 && _liquidityFee == 0) return;\n', '\n', '        _previousTaxFee = _taxFee;\n', '        _previousMarketingFee = _marketingFee;\n', '        _previousLiquidityFee = _liquidityFee;\n', '\n', '        _taxFee = 0;\n', '        _marketingFee = 0;\n', '        _liquidityFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _taxFee = _previousTaxFee;\n', '        _marketingFee = _previousMarketingFee;\n', '        _liquidityFee = _previousLiquidityFee;\n', '    }\n', '\n', '    function isExcludedFromFee(address account) public view returns(bool) {\n', '        return _isExcludedFromFee[account];\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(!_isBlackListedBot[sender], "You have no power here!");\n', '        require(!_isBlackListedBot[recipient], "You have no power here!");\n', '        require(!_isBlackListedBot[tx.origin], "You have no power here!");\n', '\n', '        if(sender != owner() && recipient != owner()) {\n', '            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '            // sorry about that, but sniper bots nowadays are buying multiple times, hope I have something more robust to prevent them to nuke the launch :-(\n', '            require(balanceOf(recipient).add(amount) <= _maxTxAmount, "Already bought maxTxAmount, wait till check off");\n', '        }\n', '\n', '        // is the token balance of this contract address over the min number of\n', '        // tokens that we need to initiate a swap + liquidity lock?\n', "        // also, don't get caught in a circular liquidity event.\n", "        // also, don't swap & liquify if sender is uniswap pair.\n", '        uint256 contractTokenBalance = balanceOf(address(this));\n', '\n', '        if(contractTokenBalance >= _maxTxAmount)\n', '        {\n', '            contractTokenBalance = _maxTxAmount;\n', '        }\n', '\n', '        bool overMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;\n', '        if (!inSwapAndLiquify && swapAndLiquifyEnabled && overMinTokenBalance && sender != uniswapV2Pair) {\n', '            contractTokenBalance = _numTokensSellToAddToLiquidity;\n', '            //add liquidity\n', '            swapAndLiquify(contractTokenBalance);\n', '        }\n', '\n', '        //indicates if fee should be deducted from transfer\n', '        bool takeFee = true;\n', '\n', '        //if any account belongs to _isExcludedFromFee account then remove the fee\n', '        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\n', '            takeFee = false;\n', '        }\n', '\n', '        //transfer amount, it will take tax and charity fee\n', '        _tokenTransfer(sender, recipient, amount, takeFee);\n', '    }\n', '\n', '    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '        uint256 toMarketing = contractTokenBalance.mul(_marketingFee).div(_marketingFee.add(_liquidityFee));\n', '        uint256 toLiquify = contractTokenBalance.sub(toMarketing);\n', '\n', '        // split the contract balance into halves\n', '        uint256 half = toLiquify.div(2);\n', '        uint256 otherHalf = toLiquify.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        uint256 toSwapForEth = half.add(toMarketing);\n', '        swapTokensForEth(toSwapForEth); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n', '\n', '        // how much ETH did we just swap into?\n', '        uint256 fromSwap = address(this).balance.sub(initialBalance);\n', '        uint256 newBalance = fromSwap.mul(half).div(toSwapForEth);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidity(otherHalf, newBalance);\n', '\n', '        emit SwapAndLiquify(half, newBalance, otherHalf);\n', '\n', '        sendETHToMarketing(fromSwap.sub(newBalance));\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            owner(),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function sendETHToMarketing(uint256 amount) private {\n', '        _marketingWalletAddress.transfer(amount);\n', '    }\n', '\n', '    // We are exposing these functions to be able to manual swap and send\n', '    // in case the token is highly valued and 5M becomes too much\n', '    function manualSwap() external onlyOwner() {\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        swapTokensForEth(contractBalance);\n', '    }\n', '\n', '    function manualSend() public onlyOwner() {\n', '        uint256 contractETHBalance = address(this).balance;\n', '        sendETHToMarketing(contractETHBalance);\n', '    }\n', '\n', '    function setSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external onlyOwner(){\n', '        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if(!takeFee)\n', '            removeAllFee();\n', '\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '\n', '        if(!takeFee)\n', '            restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeMarketingLiquidity(tMarketingLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeMarketingLiquidity(tMarketingLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeMarketingLiquidity(tMarketingLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeMarketingLiquidity(tMarketingLiquidity);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _takeMarketingLiquidity(uint256 tMarketingLiquidity) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rMarketingLiquidity = tMarketingLiquidity.mul(currentRate);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketingLiquidity);\n', '        if(_isExcluded[address(this)])\n', '            _tOwned[address(this)] = _tOwned[address(this)].add(tMarketingLiquidity);\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    //to recieve ETH from uniswapV2Router when swapping\n', '    receive() external payable {}\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidityFee) = _getTValues(tAmount, _taxFee, _marketingFee.add(_liquidityFee));\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketingLiquidityFee);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 marketingLiquidityFee) private pure returns (uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount.mul(taxFee).div(100);\n', '        uint256 tMarketingLiquidityFee = tAmount.mul(marketingLiquidityFee).div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(marketingLiquidityFee);\n', '        return (tTransferAmount, tFee, tMarketingLiquidityFee);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _getTaxFee() private view returns(uint256) {\n', '        return _taxFee;\n', '    }\n', '\n', '    function _getMaxTxAmount() private view returns(uint256) {\n', '        return _maxTxAmount;\n', '    }\n', '\n', '    function _getETHBalance() public view returns(uint256 balance) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function _setTaxFee(uint256 taxFee) external onlyOwner() {\n', "        require(taxFee >= 1 && taxFee <= 49, 'taxFee should be in 1 - 49');\n", '        _taxFee = taxFee;\n', '    }\n', '\n', '    function _setMarketingFee(uint256 marketingFee) external onlyOwner() {\n', "        require(marketingFee >= 1 && marketingFee <= 49, 'marketingFee should be in 1 - 11');\n", '        _marketingFee = marketingFee;\n', '    }\n', '\n', '    function _setLiquidityFee(uint256 liquidityFee) external onlyOwner() {\n', "        require(liquidityFee >= 1 && liquidityFee <= 49, 'liquidityFee should be in 1 - 11');\n", '        _liquidityFee = liquidityFee;\n', '    }\n', '\n', '    function _setNumTokensSellToAddToLiquidity(uint256 numTokensSellToAddToLiquidity) external onlyOwner() {\n', "        require(numTokensSellToAddToLiquidity >= 10**9 , 'numTokensSellToAddToLiquidity should be greater than total 1e9');\n", '        _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity;\n', '    }\n', '\n', '    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', "        require(maxTxAmount >= 10**9 , 'maxTxAmount should be greater than total 1e9');\n", '        _maxTxAmount = maxTxAmount;\n', '    }\n', '\n', '    function recoverTokens(uint256 tokenAmount) public virtual onlyOwner() {\n', '        _approve(address(this), owner(), tokenAmount);\n', '        _transfer(address(this), owner(), tokenAmount);\n', '    }\n', '}']