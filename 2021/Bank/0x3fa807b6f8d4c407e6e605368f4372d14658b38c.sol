['/* \n', '   SPDX-License-Identifier: MIT\n', '   https://riseprotocol.io\n', '   Copyright 2020\n', '*/\n', '\n', '/// SWC-103:  Floating Pragma\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./RiseSafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./Rebaser.sol";\n', 'import "./Address.sol";\n', '\n', 'contract Rise is Ownable, Rebasable\n', '{\n', '    using RiseSafeMath for uint256;\n', '\tusing Address for address;\n', '\t\n', '\tIUniswapV2Router02 public immutable _uniswapV2Router;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    event Rebase(uint256 indexed epoch, uint256 scalingFactor);\n', '\n', '    event WhitelistFrom(address _addr, bool _whitelisted);\n', '    event WhitelistTo(address _addr, bool _whitelisted);\n', '    event UniswapPairAddress(address _addr, bool _whitelisted);\n', '\n', '    string public name     = "Rise Protocol";\n', '    string public symbol   = "RISE";\n', '    uint8  public decimals = 9;\n', '\n', '\n', '    address public BurnAddress = 0x000000000000000000000000000000000000dEaD;\n', '\t\n', '    address public rewardAddress;\n', '\n', '\n', '    /**\n', '     * @notice Internal decimals used to handle scaling factor\n', '     */\n', '    uint256 public constant internalDecimals = 10**9;\n', '\n', '    /**\n', '     * @notice Used for percentage maths\n', '     */\n', '    uint256 public constant BASE = 10**9;\n', '\n', '    /**\n', "     * @notice Scaling factor that adjusts everyone's balances\n", '     */\n', '    uint256 public RiseScalingFactor  = BASE;\n', '\n', '\tmapping (address => uint256) private _rOwned;\n', '\tmapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) internal _allowedFragments;\n', '\t\n', '\tmapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\n', '    mapping(address => bool) public whitelistFrom;\n', '    mapping(address => bool) public whitelistTo;\n', '    mapping(address => bool) public uniswapPairAddress;\n', '\taddress private currentPoolAddress;\n', '\taddress private currentPairTokenAddress;\n', '\taddress public uniswapETHPool;\n', '\taddress[] public futurePools;\n', '\n', '\n', '    uint256 initSupply = 10**5 * 10**9;\n', '    uint256 _totalSupply = 10**5 * 10**9;\n', '    uint16 public SELL_FEE = 6;\n', '    uint16 public TX_FEE = 2;\n', '    uint16 public BURN_TOP = 1;\n', '\tuint16 public BURN_BOTTOM = 2;\n', '\tuint256 private _tFeeTotal;\n', '\tuint256 private constant MAX = ~uint256(0);\n', '    uint256 private _rTotal = (MAX - (MAX % _totalSupply));\n', '\tuint16 public FYFee = 100;\n', '\tuint256 public _maxTxAmount = 500 * 10**9;\n', '\tuint256 public _minTokensBeforeSwap = 100 * 10**9;\n', '\tuint256 public _autoSwapCallerFee = 2 * 10**9;\n', '\tuint256 public liquidityRewardRate = 2;\n', '\t\n', '\tbool private inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled;\n', '    bool public tradingEnabled;\n', '\t\n', '\tevent MaxTxAmountUpdated(uint256 maxTxAmount);\n', '\tevent TradingEnabled();\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        address indexed pairTokenAddress,\n', '        uint256 tokensSwapped,\n', '        uint256 pairTokenReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\n', '\t\n', '\tmodifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor(IUniswapV2Router02 uniswapV2Router)\n', '    public\n', '    Ownable()\n', '    Rebasable()\n', '    {\n', '\t\t_uniswapV2Router = uniswapV2Router;\n', '        \n', '        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\n', '            .createPair(address(this), uniswapV2Router.WETH());\n', '        currentPairTokenAddress = uniswapV2Router.WETH();\n', '        uniswapETHPool = currentPoolAddress;\n', '\t\trewardAddress = address(this);\n', '        \n', '        updateSwapAndLiquifyEnabled(false);\n', '        \n', '        _rOwned[_msgSender()] = reflectionFromToken(_totalSupply, false);\n', '        \n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function getSellBurn(uint256 value) public view returns (uint256)\n', '    {\n', '        uint256 nPercent = value.mul(SELL_FEE).divRound(100);\n', '        return nPercent;\n', '    }\n', '\n', '    function getTxBurn(uint256 value) public view returns (uint256)\n', '    {\n', '        uint256 nPercent = value.mul(TX_FEE).divRound(100);\n', '        return nPercent;\n', '    }\n', '\n', '    function _isWhitelisted(address _from, address _to) internal view returns (bool)\n', '    {\n', '        return whitelistFrom[_from]||whitelistTo[_to];\n', '    }\n', '\n', '    function _isUniswapPairAddress(address _addr) internal view returns (bool)\n', '    {\n', '        return uniswapPairAddress[_addr];\n', '    }\n', '\n', '    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner\n', '    {\n', '        emit WhitelistTo(_addr, _whitelisted);\n', '        whitelistTo[_addr] = _whitelisted;\n', '    }\n', '\n', '    function setTxFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee < 50, 'Rise: Transaction fee should be less than 40%');\n", '        TX_FEE = fee;\n', '    }\n', '\t\n', '\tfunction setFYFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee > 2, 'Rise: Frictionless yield fee should be less than 50%');\n", '        FYFee = fee;\n', '    }\n', '\n', '    function setSellFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee < 50, 'Rise: Sell fee should be less than 50%');\n", '        SELL_FEE = fee;\n', '    }\n', '\t\n', '    function setBurnTop(uint16 burntop) external onlyOwner\n', '    {\n', '        BURN_TOP = burntop;\n', '    }\n', '\t\n', '\tfunction setBurnBottom(uint16 burnbottom) external onlyOwner\n', '    {\n', '        BURN_BOTTOM = burnbottom;\n', '    }\n', '\t\n', '    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner\n', '    {\n', '        emit WhitelistFrom(_addr, _whitelisted);\n', '        whitelistFrom[_addr] = _whitelisted;\n', '    }\n', '\n', '    function setUniswapPairAddress(address _addr, bool _whitelisted) external onlyOwner \n', '\t{\n', '        emit UniswapPairAddress(_addr, _whitelisted);\n', '        uniswapPairAddress[_addr] = _whitelisted;\n', '    }\n', '\t\n', '\tfunction addfuturePool(address futurePool) external onlyOwner\n', '\t{\n', '\t\tIUniswapV2Pair(futurePool).sync();\n', '\t\tfuturePools.push(futurePool);\n', '\t}\n', '\n', '    function maxScalingFactor() external view returns (uint256)\n', '    {\n', '        return _maxScalingFactor();\n', '    }\n', '\n', '    function _maxScalingFactor() internal view returns (uint256)\n', '    {\n', '        // scaling factor can only go up to 2**256-1 = initSupply * RiseScalingFactor\n', '        // this is used to check if RiseScalingFactor will be too high to compute balances when rebasing.\n', '        return uint256(-1) / initSupply;\n', '    }\n', '\n', '   function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '\t\t_transfer(sender, recipient, amount);\n', '\t\t// decrease allowance\n', '        _approve(sender, _msgSender(), _allowedFragments[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '\tfunction balanceOf(address account) public view returns (uint256) {\n', '\t  \n', '        if (_isExcluded[account]) return _tOwned[account].mul(RiseScalingFactor).div(internalDecimals);\n', '        uint256 tOwned = tokenFromReflection(_rOwned[account]);\n', '\t\treturn _scaling(tOwned);\n', '\t}\n', '\n', '    function balanceOfUnderlying(address account) external view returns (uint256)\n', '    {\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    \n', '    function allowance(address owner_, address spender) external view returns (uint256)\n', '    {\n', '        return _allowedFragments[owner_][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)\n', '    {\n', '        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)\n', '    {\n', '        uint256 oldValue = _allowedFragments[msg.sender][spender];\n', '        if (subtractedValue >= oldValue)\n', '        {\n', '            _allowedFragments[msg.sender][spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "Rise: approve from the zero address");\n', '        require(spender != address(0), "Rise: approve to the zero address");\n', '\n', '        _allowedFragments[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\t\n', '\tfunction isExcluded(address account) public view returns (bool) \n', '\t{\n', '        return _isExcluded[account];\n', '    }\n', '\t\n', '\tfunction totalFees() public view returns (uint256) \n', '\t{\n', '        return _tFeeTotal;\n', '    }\n', '\t\n', '\tfunction reflect(uint256 tAmount) public \n', '\t{\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        uint256 currentRate = _getRate();\n', '        uint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\t\n', '\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) \n', '\t{\n', '        require(tAmount <= _totalSupply, "Amount must be less than supply");\n', '        uint256 currentRate = _getRate();\n', '        uint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '        uint256 fee = getTxBurn(TAmount);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        if (!deductTransferFee) {\n', '            return rAmount;\n', '        } else {\n', '            (uint256 rTransferAmount,,,) = _getRValues(TAmount, fee, currentRate);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\t\n', '\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) \n', '\t{\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\t\n', '\tfunction excludeAccount(address account) external onlyOwner() \n', '\t{\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _rOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\t\n', '\tfunction includeAccount(address account) external onlyOwner() \n', '\t{\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _rOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\t\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) private \n', '\t{\n', '        \n', '\t\trequire(sender != address(0), "Rise: cannot transfer from the zero address");\n', '        require(recipient != address(0), "Rise: cannot transfer to the zero address");\n', '        require(amount > 0, "Rise: Transfer amount must be greater than zero");\n', '\t\t\n', '\t\tif(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\n', '            require(amount <= _maxTxAmount, "Rise: Transfer amount exceeds the maxTxAmount.");\n', '            if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled)\n', '                require(false, "Rise: trading is disabled.");\n', '        }\n', '        \n', '        if(!inSwapAndLiquify) {\n', '            uint256 lockedBalanceForPool = balanceOf(address(this));\n', '            bool overMinTokenBalance = lockedBalanceForPool >= _minTokensBeforeSwap;\n', '\t\t\tcurrentPairTokenAddress == _uniswapV2Router.WETH();\n', '            if (\n', '                overMinTokenBalance &&\n', '                msg.sender != currentPoolAddress &&\n', '                swapAndLiquifyEnabled\n', '            ) {\n', '                swapAndLiquifyForEth(lockedBalanceForPool);\n', '            }\n', '        }\n', '\t\t\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\t\n', '\treceive() external payable {}\n', '    \n', '    function swapAndLiquifyForEth(uint256 lockedBalanceForPool) private lockTheSwap {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '\t\tuint256 forLiquidity = lockedForSwap.divRound(liquidityRewardRate);\n', '\t\tuint256 forLiquidityReward = lockedForSwap.sub(forLiquidity);\n', '        uint256 half = forLiquidity.div(2);\n', '        uint256 otherHalf = forLiquidity.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half);\n', '        \n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForEth(otherHalf, newBalance);\n', '        \n', '        emit SwapAndLiquify(_uniswapV2Router.WETH(), half, newBalance, otherHalf);\n', '        \n', '\t\t_transfer(address(this), uniswapETHPool, forLiquidityReward);\n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '    }\n', '    \n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = _uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '\t\n', '\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t    uint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t    else if (_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferStandardSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferStandardTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {           \n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferStandardSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);        \n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '    function _transferStandardTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{        \n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);                \n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t\tuint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t\telse if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '        _transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {\n', '                _tOwned[recipient] = _tOwned[recipient].add(TAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferToExcludedSell (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '    function _transferToExcludedTx (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{        \n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '         \n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t\tuint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t\telse if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferFromExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferFromExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '                \n', '            }\n', '            else\n', '            {\n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferFromExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '    \n', '    function _transferFromExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '    \n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t    uint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(RiseScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '        else if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '            _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '            _reflectFee(rFYFee, tFYFee);\n', '            _transferBothExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            \n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '           _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '            _reflectFee(rFYFee, tFYFee);\n', '            _transferBothExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {\n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(TAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferBothExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{   \n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '     function _transferBothExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t {\n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\t\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '     }\n', '\t \n', '\tfunction _scaling(uint256 amount) private view returns (uint256)\n', '\t\n', '\t{\n', '\t\tuint256 scaledAmount = amount.mul(RiseScalingFactor).div(internalDecimals);\n', '\t\treturn(scaledAmount);\n', '\t}\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private \n', '\t{\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getTValues(uint256 TAmount, uint256 fee) private view returns (uint256, uint256, uint256, uint256) \n', '\t{\n', '        uint256 tFYFee = TAmount.div(FYFee); \n', '\t\tuint256 tBurnFee = BURN_TOP*fee/BURN_BOTTOM;\n', '\t\tuint256 tRewardFee = fee.sub(tBurnFee);\n', '        uint256 tTransferAmount = TAmount.sub(tFYFee).sub(tBurnFee).sub(tRewardFee);\n', '        return (tTransferAmount, tFYFee, tBurnFee, tRewardFee);\n', '    }\n', '\t\n', '    function _getRValues(uint256 rAmount, uint256 fee, uint256 currentRate) private view returns (uint256, uint256, uint256, uint256) \n', '\t{\n', '        uint256 rFYFee = rAmount.div(FYFee);\n', '\t\tuint256 rBurnFee = (BURN_TOP*fee/BURN_BOTTOM).mul(currentRate);\n', '\t\tuint256 rRewardFee = fee.mul(currentRate).sub(rBurnFee);\n', '\t\tuint256 rTransferAmount = _getRValues2(rAmount, rFYFee, rBurnFee, rRewardFee);\n', '        return (rTransferAmount, rBurnFee, rFYFee, rRewardFee);\n', '    }\n', '\t\n', '\tfunction _getRValues2(uint256 rAmount, uint256 rFYFee, uint256 rBurnFee, uint256 rRewardFee) private pure returns (uint256) \n', '\t{\n', '        uint256 rTransferAmount = rAmount.sub(rFYFee).sub(rBurnFee).sub(rRewardFee);\n', '        return (rTransferAmount);\n', '    }\n', '\t\n', '\n', '    function _getRate() private view returns(uint256) \n', '\t{\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) \n', '\t{\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = initSupply;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, initSupply);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(initSupply)) return (_rTotal, initSupply);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _setRewardAddress(address rewards_) external onlyOwner\n', '    {\n', '        rewardAddress = rewards_;\n', '    }\n', '\n', '    /**\n', '    * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '    *\n', '    * @dev The supply adjustment equals (totalSupply * DeviationFromTargetRate) / rebaseLag\n', '    *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\n', '    *      and targetRate is CpiOracleRate / baseCpi\n', '    */\n', '    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external onlyRebaser returns (uint256)\n', '    {\n', '\t\tuint256 currentRate = _getRate();\n', '        if (!positive)\n', '        {\n', '\t\tuint256 newScalingFactor = RiseScalingFactor.mul(BASE.sub(indexDelta)).div(BASE);\n', '\t\tRiseScalingFactor = newScalingFactor;\n', '        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\n', '            .mul(RiseScalingFactor).div(internalDecimals)));\n', '        emit Rebase(epoch, RiseScalingFactor);\n', '\t\tIUniswapV2Pair(uniswapETHPool).sync();\n', '\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\n', '\t\t\taddress futurePoolAddress = futurePools[i];\n', '\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\n', '\t\t}\n', '        return _totalSupply;\n', '        }\n', '\t\t\n', '        else \n', '\t\t{\n', '        uint256 newScalingFactor = RiseScalingFactor.mul(BASE.add(indexDelta)).div(BASE);\n', '        if (newScalingFactor < _maxScalingFactor())\n', '        {\n', '            RiseScalingFactor = newScalingFactor;\n', '        }\n', '        else\n', '        {\n', '            RiseScalingFactor = _maxScalingFactor();\n', '        }\n', '\n', '        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\n', '            .mul(RiseScalingFactor).div(internalDecimals)));\n', '        emit Rebase(epoch, RiseScalingFactor);\n', '\t\tIUniswapV2Pair(uniswapETHPool).sync();\n', '\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\n', '\t\t\taddress futurePoolAddress = futurePools[i];\n', '\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\n', '\t\t}\n', '        return _totalSupply;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction getCurrentPoolAddress() public view returns(address) {\n', '        return currentPoolAddress;\n', '    }\n', '    \n', '    function getCurrentPairTokenAddress() public view returns(address) {\n', '        return currentPairTokenAddress;\n', '    }\n', '\t\n', '\tfunction _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', "        require(maxTxAmount >= 10**8 , 'Rise: maxTxAmount should be greater than 0.1 RISE');\n", '        _maxTxAmount = maxTxAmount;\n', '        emit MaxTxAmountUpdated(maxTxAmount);\n', '    }\n', '\t\n', '\tfunction _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {\n', "        require(minTokensBeforeSwap >= 1 * 10**9 && minTokensBeforeSwap <= 2000 * 10**9, 'Rise: minTokenBeforeSwap should be between 1 and 2000 RISE');\n", "        require(minTokensBeforeSwap > _autoSwapCallerFee , 'Rise: minTokenBeforeSwap should be greater than autoSwapCallerFee');\n", '        _minTokensBeforeSwap = minTokensBeforeSwap;\n', '        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\n', '    }\n', '\t\n', '\tfunction _setAutoSwapCallerFee(uint256 autoSwapCallerFee) external onlyOwner() {\n', "        require(autoSwapCallerFee >= 10**8, 'Rise: autoSwapCallerFee should be greater than 0.1 RISE');\n", '        _autoSwapCallerFee = autoSwapCallerFee;\n', '        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\n', '    }\n', '\t\n', '\tfunction updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '\t\n', '\tfunction _enableTrading() external onlyOwner() {\n', '        tradingEnabled = true;\n', '        TradingEnabled();\n', '    }\n', '}']