['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', '// File: contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: dxswap-core/contracts/interfaces/IDXswapPair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IDXswapPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '    function swapFee() external view returns (uint32);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '    function setSwapFee(uint32) external;\n', '}\n', '\n', '// File: contracts/libraries/FixedPoint.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/DXswapOracleLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library DXswapOracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IDXswapPair(pair).price0CumulativeLast();\n', '        price1Cumulative = IDXswapPair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IDXswapPair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '// File: contracts/libraries/DXswapLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', 'library DXswapLibrary {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'DXswapLibrary: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'DXswapLibrary: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "            hex'ff',\n", '            factory,\n', '            keccak256(abi.encodePacked(token0, token1)),\n', "            hex'd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776' // init code hash\n", '        ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IDXswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '    \n', '    // fetches and sorts the reserves for a pair\n', '    function getSwapFee(address factory, address tokenA, address tokenB) internal view returns (uint swapFee) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        swapFee = IDXswapPair(pairFor(factory, tokenA, tokenB)).swapFee();\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'DXswapLibrary: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'DXswapLibrary: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'DXswapLibrary: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'DXswapLibrary: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(uint(10000).sub(swapFee));\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'DXswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'DXswapLibrary: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(10000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(uint(10000).sub(swapFee));\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'DXswapLibrary: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i], path[i + 1]));\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'DXswapLibrary: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i - 1], path[i]));\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/examples/OracleCreator.sol\n', '\n', 'pragma solidity =0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'contract OracleCreator {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint256;\n', '\n', '    event OracleCreated(\n', '        uint256 indexed _oracleIndex,\n', '        address indexed _pair,\n', '        uint256 _windowTime\n', '    );\n', '\n', '    struct Oracle{\n', '        uint256 windowTime;\n', '        address token0;\n', '        address token1;\n', '        IDXswapPair pair;\n', '        uint32 blockTimestampLast;\n', '        uint256 price0CumulativeLast;\n', '        uint256 price1CumulativeLast;\n', '        FixedPoint.uq112x112 price0Average;\n', '        FixedPoint.uq112x112 price1Average;\n', '        uint256 observationsCount;\n', '        address owner;\n', '    }\n', '\n', '    mapping(uint256 => Oracle) public oracles;\n', '    uint256 public oraclesIndex;\n', '\n', '    function createOracle(\n', '        uint256 windowTime,\n', '        address pair\n', '    ) public returns (uint256 oracleId) {\n', '        IDXswapPair sourcePair = IDXswapPair(pair);\n', '        address token0 = sourcePair.token0();\n', '        address token1 = sourcePair.token1();\n', '        (,, uint32 blockTimestampLast) =  sourcePair.getReserves();\n', '\n', '        oracles[oraclesIndex] = Oracle({\n', '            windowTime: windowTime,\n', '            token0: token0,\n', '            token1: token1,\n', '            pair: sourcePair,\n', '            blockTimestampLast: blockTimestampLast,\n', '            price0CumulativeLast: sourcePair.price0CumulativeLast(),\n', '            price1CumulativeLast: sourcePair.price1CumulativeLast(),\n', '            price0Average: FixedPoint.uq112x112(0),\n', '            price1Average: FixedPoint.uq112x112(0),\n', '            observationsCount: 0,\n', '            owner: msg.sender\n', '        });\n', '        oracleId = oraclesIndex;\n', '        oraclesIndex++;\n', '        emit OracleCreated(oracleId, address(sourcePair), windowTime);\n', '    }\n', '\n', '    function update(uint256 oracleIndex) public {\n', '        Oracle storage oracle = oracles[oracleIndex];\n', "        require(msg.sender == oracle.owner, 'OracleCreator: CALLER_NOT_OWNER');\n", "        require(oracle.observationsCount < 2, 'OracleCreator: FINISHED_OBERSERVATION');\n", '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            DXswapOracleLibrary.currentCumulativePrices(address(oracle.pair));\n', '        uint32 timeElapsed = blockTimestamp - oracle.blockTimestampLast; // overflow is desired\n', '\n', '        // first update can be executed immediately. Ensure that at least one full period has passed since the first update \n', '        require(\n', '          oracle.observationsCount == 0 || timeElapsed >= oracle.windowTime, \n', "          'OracleCreator: PERIOD_NOT_ELAPSED'\n", '        );\n', '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        oracle.price0Average = FixedPoint.uq112x112(\n', '          uint224((price0Cumulative - oracle.price0CumulativeLast) / timeElapsed)\n', '        );\n', '        oracle.price1Average = FixedPoint.uq112x112(\n', '          uint224((price1Cumulative - oracle.price1CumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        oracle.price0CumulativeLast = price0Cumulative;\n', '        oracle.price1CumulativeLast = price1Cumulative;\n', '        oracle.blockTimestampLast = blockTimestamp;\n', '        oracle.observationsCount++;\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(uint256 oracleIndex, address token, uint256 amountIn) external view returns (uint256 amountOut) {\n', '        Oracle storage oracle = oracles[oracleIndex];\n', '        FixedPoint.uq112x112 memory avg;\n', '        if (token == oracle.token0) { \n', '          avg = oracle.price0Average;\n', '        } else {\n', "          require(token == oracle.token1, 'OracleCreator: INVALID_TOKEN'); \n", '          avg = oracle.price1Average;\n', '        }\n', '        amountOut = avg.mul(amountIn).decode144();\n', '    }\n', '\n', '    function isOracleFinalized(uint256 oracleIndex) external view returns (bool){\n', '        return oracles[oracleIndex].observationsCount == 2;\n', '    }\n', '\n', '    function getOracleDetails(uint256 oracleIndex) external view returns (Oracle memory) {\n', '      return oracles[oracleIndex];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/IDXswapFactory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IDXswapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\n', '    function feeTo() external view returns (address);\n', '    function protocolFeeDenominator() external view returns (uint8);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setProtocolFee(uint8 _protocolFee) external;\n', '    function setSwapFee(address pair, uint32 swapFee) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDXswapRouter.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IDXswapRouter {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '    function balanceOf(address guy) external returns (uint);\n', '    function approve(address guy, uint wad) external returns (bool);\n', '}\n', '\n', '// File: contracts/examples/DXswapRelayer.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DXswapRelayer {\n', '    using SafeMath for uint256;\n', '\n', '    event NewOrder(\n', '        uint256 indexed _orderIndex,\n', '        uint8 indexed _action\n', '    );\n', '\n', '    event ExecutedOrder(\n', '        uint256 indexed _orderIndex\n', '    );\n', '\n', '    event WithdrawnExpiredOrder(\n', '        uint256 indexed _orderIndex\n', '    );\n', '\n', '    event ChangedOwner(\n', '        address payable indexed _newOwner\n', '    );\n', '\n', '    struct Order {\n', '        uint8 action; // 1=provision; 2=removal\n', '        address tokenA;\n', '        address tokenB;\n', '        uint256 amountA;\n', '        uint256 amountB;\n', '        uint256 liquidity;\n', '        uint256 priceTolerance;\n', '        uint256 minReserveA;\n', '        uint256 minReserveB;\n', '        address oraclePair;\n', '        uint256 deadline;\n', '        uint256 maxWindowTime;\n', '        uint256 oracleId;\n', '        address factory;\n', '        bool executed;\n', '    }\n', '\n', '    uint256 public immutable GAS_ORACLE_UPDATE = 168364;\n', '    uint256 public immutable PARTS_PER_MILLION = 1000000;\n', '    uint256 public immutable BOUNTY = 0.01 ether;\n', '    uint8 public immutable PROVISION = 1;\n', '    uint8 public immutable REMOVAL = 2;\n', '    \n', '    address public immutable dxSwapFactory;\n', '    address public immutable dxSwapRouter;\n', '    address public immutable uniswapFactory;\n', '    address public immutable uniswapRouter;\n', '    address public immutable WETH;\n', '    address payable public owner;\n', '\n', '    OracleCreator public oracleCreator;\n', '    uint256 public orderCount;\n', '    mapping(uint256 => Order) orders;\n', '\n', '    constructor(\n', '        address payable _owner,\n', '        address _dxSwapFactory,\n', '        address _dxSwapRouter,\n', '        address _uniswapFactory,\n', '        address _uniswapRouter,\n', '        address _WETH,\n', '        OracleCreator _oracleCreater\n', '    ) public {\n', '        owner = _owner;\n', '        dxSwapFactory = _dxSwapFactory;\n', '        dxSwapRouter = _dxSwapRouter;\n', '        uniswapFactory = _uniswapFactory;\n', '        uniswapRouter = _uniswapRouter;\n', '        WETH = _WETH;\n', '        oracleCreator = _oracleCreater;\n', '    }\n', '\n', '    function orderLiquidityProvision(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountA,\n', '        uint256 amountB,\n', '        uint256 priceTolerance,\n', '        uint256 minReserveA,\n', '        uint256 minReserveB,\n', '        uint256 maxWindowTime,\n', '        uint256 deadline,\n', '        address factory\n', '    ) external payable returns (uint256 orderIndex) {\n', "        require(factory == dxSwapFactory || factory == uniswapFactory, 'DXswapRelayer: INVALID_FACTORY');\n", "        require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", "        require(tokenA != tokenB, 'DXswapRelayer: INVALID_PAIR');\n", "        require(tokenA < tokenB, 'DXswapRelayer: INVALID_TOKEN_ORDER');\n", "        require(amountA > 0 && amountB > 0, 'DXswapRelayer: INVALID_TOKEN_AMOUNT');\n", "        require(priceTolerance <= PARTS_PER_MILLION, 'DXswapRelayer: INVALID_TOLERANCE');\n", "        require(block.timestamp <= deadline, 'DXswapRelayer: DEADLINE_REACHED');\n", "        require(maxWindowTime > 30, 'DXswapRelayer: INVALID_WINDOWTIME');\n", "        require(tokenA != address(0), 'DXswapRelayer: ZERO_ADDRESS');\n", '\n', '        // Wrap native ETH if not already wrapped\n', '        if(tokenA == WETH && IERC20(tokenA).balanceOf(address(this)) < amountA){\n', '          IWETH(WETH).deposit{value: amountA}();\n', '        } else if (tokenB == WETH && IERC20(tokenB).balanceOf(address(this)) < amountB){\n', '          IWETH(WETH).deposit{value: amountB}();\n', '        }\n', '        \n', "        require(IERC20(tokenA).balanceOf(address(this)) >= amountA, 'DXswapRelayer: INSUFFICIENT_TOKEN_A');\n", "        require(IERC20(tokenB).balanceOf(address(this)) >= amountB, 'DXswapRelayer: INSUFFICIENT_TOKEN_B');\n", '\n', '        address pair = _pair(tokenA, tokenB, factory);\n', '        orderIndex = _OrderIndex();\n', '        orders[orderIndex] = Order({\n', '            action: PROVISION,\n', '            tokenA: tokenA,\n', '            tokenB: tokenB,\n', '            amountA: amountA,\n', '            amountB: amountB,\n', '            liquidity: 0,\n', '            priceTolerance: priceTolerance,\n', '            minReserveA: minReserveA,\n', '            minReserveB: minReserveB,\n', '            oraclePair: pair,\n', '            deadline: deadline,\n', '            maxWindowTime: maxWindowTime,\n', '            oracleId: 0,\n', '            factory: factory,\n', '            executed: false\n', '        });\n', '        emit NewOrder(orderIndex, PROVISION);\n', '\n', '        (uint reserveA, uint reserveB,) = IDXswapPair(pair).getReserves();\n', '        if (minReserveA == 0 && minReserveB == 0 && reserveA == 0 && reserveB == 0) {\n', '            /* Non-circulating tokens can be provisioned immediately if reserve thresholds are set to zero */\n', '            orders[orderIndex].executed = true;\n', '            _pool(tokenA, tokenB, amountA, amountB, orders[orderIndex].amountA, orders[orderIndex].amountA);\n', '            emit ExecutedOrder(orderIndex);\n', '        } else {\n', '            /* Create an oracle to calculate average price before providing liquidity */\n', '            uint256 windowTime = _consultOracleParameters(amountA, amountB, reserveA, reserveB, maxWindowTime);\n', '            orders[orderIndex].oracleId = oracleCreator.createOracle(windowTime, pair);\n', '        }\n', '    }\n', '\n', '    function orderLiquidityRemoval(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountA,\n', '        uint256 amountB,\n', '        uint256 priceTolerance,\n', '        uint256 minReserveA,\n', '        uint256 minReserveB,\n', '        uint256 maxWindowTime,\n', '        uint256 deadline,\n', '        address factory\n', '    ) external returns (uint256 orderIndex) {\n', "        require(factory == dxSwapFactory || factory == uniswapFactory, 'DXswapRelayer: INVALID_FACTORY');\n", "        require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", "        require(tokenA != tokenB, 'DXswapRelayer: INVALID_PAIR');\n", "        require(tokenA < tokenB, 'DXswapRelayer: INVALID_TOKEN_ORDER');\n", "        require(amountA > 0 && amountB > 0 && liquidity > 0, 'DXswapRelayer: INVALID_LIQUIDITY_AMOUNT');\n", "        require(priceTolerance <= PARTS_PER_MILLION, 'DXswapRelayer: INVALID_TOLERANCE');\n", "        require(block.timestamp <= deadline, 'DXswapRelayer: DEADLINE_REACHED');\n", "        require(maxWindowTime > 30, 'DXswapRelayer: INVALID_WINDOWTIME');\n", "        require(tokenA != address(0), 'DXswapRelayer: ZERO_ADDRESS');\n", '\n', '        address pair = _pair(tokenA, tokenB, factory);\n', '        orderIndex = _OrderIndex();\n', '        orders[orderIndex] = Order({\n', '            action: REMOVAL,\n', '            tokenA: tokenA,\n', '            tokenB: tokenB,\n', '            amountA: amountA,\n', '            amountB: amountB,\n', '            liquidity: liquidity,\n', '            priceTolerance: priceTolerance,\n', '            minReserveA: minReserveA,\n', '            minReserveB: minReserveB,\n', '            oraclePair: pair,\n', '            deadline: deadline,\n', '            maxWindowTime: maxWindowTime,\n', '            oracleId: 0,\n', '            factory: factory,\n', '            executed: false\n', '        });\n', '\n', '        address dxSwapPair = DXswapLibrary.pairFor(address(dxSwapFactory), tokenA, tokenB);\n', '        (uint reserveA, uint reserveB,) = IDXswapPair(dxSwapPair).getReserves();\n', '        uint256 windowTime = _consultOracleParameters(amountA, amountB, reserveA, reserveB, maxWindowTime);\n', '        orders[orderIndex].oracleId = oracleCreator.createOracle(windowTime, pair);\n', '        emit NewOrder(orderIndex, REMOVAL);\n', '    }\n', '\n', '    function executeOrder(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(orderIndex < orderCount, 'DXswapRelayer: INVALID_ORDER');\n", "        require(!order.executed, 'DXswapRelayer: ORDER_EXECUTED');\n", "        require(oracleCreator.isOracleFinalized(order.oracleId) , 'DXswapRelayer: OBSERVATION_RUNNING');\n", "        require(block.timestamp <= order.deadline, 'DXswapRelayer: DEADLINE_REACHED');\n", '\n', '        address tokenA = order.tokenA;\n', '        address tokenB = order.tokenB;\n', '        uint256 amountA = oracleCreator.consult(order.oracleId, tokenB, order.amountB);\n', '        uint256 amountB = oracleCreator.consult(order.oracleId, tokenA, order.amountA);\n', '        \n', '        /* Maximize token inputs */ \n', '        if(amountA <= order.amountA){\n', '            amountB = order.amountB;\n', '        } else {\n', '            amountA = order.amountA;\n', '        }\n', '        uint256 minA = amountA.sub(amountA.mul(order.priceTolerance) / PARTS_PER_MILLION);\n', '        uint256 minB = amountB.sub(amountB.mul(order.priceTolerance) / PARTS_PER_MILLION);\n', '\n', '        order.executed = true;\n', '        if(order.action == PROVISION){\n', '            _pool(tokenA, tokenB, amountA, amountB, minA, minB);\n', '        } else if (order.action == REMOVAL){\n', '            address pair = _pair(tokenA, tokenB, dxSwapFactory);\n', '            _unpool(\n', '              tokenA, \n', '              tokenB, \n', '              pair, \n', '              order.liquidity,\n', '              minA,\n', '              minB\n', '            );\n', '        }\n', '        emit ExecutedOrder(orderIndex);\n', '    }\n', '\n', '    // Updates a price oracle and sends a bounty to msg.sender\n', '    function updateOracle(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(block.timestamp <= order.deadline, 'DXswapRelayer: DEADLINE_REACHED');\n", "        require(!oracleCreator.isOracleFinalized(order.oracleId) , 'DXswapRelayer: OBSERVATION_ENDED');\n", '        uint256 amountBounty = GAS_ORACLE_UPDATE.mul(tx.gasprice).add(BOUNTY);\n', '        \n', '        (uint reserveA, uint reserveB,) = IDXswapPair(order.oraclePair).getReserves();\n', '        require(\n', '            reserveA >= order.minReserveA && reserveB >= order.minReserveB,\n', "            'DXswapRelayer: RESERVE_TO_LOW'\n", '        );\n', '        oracleCreator.update(order.oracleId);\n', '        if(address(this).balance >= amountBounty){\n', '            TransferHelper.safeTransferETH(msg.sender, amountBounty);\n', '        }\n', '    }\n', '\n', '    function withdrawExpiredOrder(uint256 orderIndex) external {\n', '        Order storage order = orders[orderIndex];\n', "        require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", "        require(block.timestamp > order.deadline, 'DXswapRelayer: DEADLINE_NOT_REACHED');\n", "        require(order.executed == false, 'DXswapRelayer: ORDER_EXECUTED');\n", '        address tokenA = order.tokenA;\n', '        address tokenB = order.tokenB;\n', '        uint256 amountA = order.amountA;\n', '        uint256 amountB = order.amountB;\n', '        order.executed = true;\n', '\n', '        if(tokenA == WETH){\n', '          IWETH(WETH).withdraw(amountA);\n', '          ETHWithdraw(amountA);\n', '        } else {\n', '          ERC20Withdraw(tokenA, amountA);\n', '        }\n', '        if (tokenB == WETH){\n', '          IWETH(WETH).withdraw(amountB);\n', '          ETHWithdraw(amountB);\n', '        } else {\n', '          ERC20Withdraw(tokenB, amountB);\n', '        }\n', '        emit WithdrawnExpiredOrder(orderIndex);\n', '    }\n', '    \n', '    function _pool(\n', '        address _tokenA,\n', '        address _tokenB,\n', '        uint256 _amountA,\n', '        uint256 _amountB,\n', '        uint256 _minA,\n', '        uint256 _minB\n', '    ) internal {\n', '        uint256 amountA;\n', '        uint256 amountB;\n', '        uint256 liquidity;\n', '        TransferHelper.safeApprove(_tokenA, dxSwapRouter, _amountA);\n', '        TransferHelper.safeApprove(_tokenB, dxSwapRouter, _amountB);\n', '        (amountA, amountB, liquidity) = IDXswapRouter(dxSwapRouter).addLiquidity(\n', '            _tokenA,\n', '            _tokenB,\n', '            _amountA,\n', '            _amountB,\n', '            _minA,\n', '            _minB,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '        TransferHelper.safeApprove(_tokenA, dxSwapRouter, 0);\n', '        TransferHelper.safeApprove(_tokenB, dxSwapRouter, 0);\n', '    }\n', '\n', '    function _unpool(\n', '        address _tokenA,\n', '        address _tokenB,\n', '        address _pair,\n', '        uint256 _liquidity,\n', '        uint256 _minA,\n', '        uint256 _minB\n', '    ) internal {\n', '        TransferHelper.safeApprove(_pair, dxSwapRouter, _liquidity);\n', '        (uint amountA, uint amountB) = IDXswapRouter(dxSwapRouter).removeLiquidity(\n', '            _tokenA,\n', '            _tokenB,\n', '            _liquidity,\n', '            _minA,\n', '            _minB,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '        TransferHelper.safeApprove(_pair, dxSwapRouter, 0);\n', '        if(_tokenA == WETH){\n', '          IWETH(WETH).withdraw(amountA);\n', '          ETHWithdraw(amountA);\n', '        } else {\n', '          ERC20Withdraw(_tokenA, amountA);\n', '        }\n', '        if (_tokenB == WETH){\n', '          IWETH(WETH).withdraw(amountB);\n', '          ETHWithdraw(amountB);\n', '        } else {\n', '          ERC20Withdraw(_tokenB, amountB);\n', '        }\n', '    }\n', '\n', '    // Internal function to calculate the optimal time window for price observation\n', '    function _consultOracleParameters(\n', '        uint256 amountA,\n', '        uint256 amountB,\n', '        uint256 reserveA,\n', '        uint256 reserveB,\n', '        uint256 maxWindowTime\n', '    ) internal view returns (uint256 windowTime) {\n', '        if(reserveA > 0 && reserveB > 0){\n', '            uint256 poolStake = (amountA.add(amountB)).mul(PARTS_PER_MILLION) / reserveA.add(reserveB);\n', '            // poolStake: 0.1% = 1000; 1=10000; 10% = 100000;\n', '            if(poolStake < 1000) {\n', '              windowTime = 30;\n', '            } else if (poolStake < 2500){\n', '              windowTime = 60;\n', '            } else if (poolStake < 5000){\n', '              windowTime = 90;\n', '            } else if (poolStake < 10000){\n', '              windowTime = 120;\n', '            } else {\n', '              windowTime = 150;\n', '            }\n', '            windowTime = windowTime <= maxWindowTime ? windowTime : maxWindowTime;\n', '        } else {\n', '            windowTime = maxWindowTime;\n', '        }\n', '    }\n', '\n', '    // Internal function to return the correct pair address on either DXswap or Uniswap\n', '    function _pair(address tokenA, address tokenB, address factory) internal view returns (address pair) {\n', "      require(factory == dxSwapFactory || factory == uniswapFactory, 'DXswapRelayer: INVALID_FACTORY');\n", '      pair = IDXswapFactory(factory).getPair(tokenA, tokenB);\n', '    }\n', '\n', '    // Returns an OrderIndex that is used to reference liquidity orders\n', '    function _OrderIndex() internal returns(uint256 orderIndex){\n', '        orderIndex = orderCount;\n', '        orderCount++;\n', '    }\n', '    \n', '    // Allows the owner to withdraw any ERC20 from the relayer\n', '    function ERC20Withdraw(address token, uint256 amount) public {\n', "        require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", '        TransferHelper.safeTransfer(token, owner, amount);\n', '    }\n', '\n', '    // Allows the owner to withdraw any ETH amount from the relayer\n', '    function ETHWithdraw(uint256 amount) public {\n', "        require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", '        TransferHelper.safeTransferETH(owner, amount);\n', '    }\n', '\n', '    // Returns the data of one specific order\n', '    function GetOrderDetails(uint256 orderIndex) external view returns (Order memory) {\n', '      return orders[orderIndex];\n', '    }\n', '\n', '    function changeOwner(address payable _newOwner) external {\n', "      require(msg.sender == owner, 'DXswapRelayer: CALLER_NOT_OWNER');\n", '      owner = _newOwner;\n', '      emit ChangedOwner(_newOwner);\n', '    }\n', '\n', '    receive() external payable {}\n', '}']