['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '}\n', '\n', 'contract Resolver {\n', '    struct TokenBalances {\n', '        uint[] userBalances;\n', '    }\n', '\n', '    function getBalances(address[] memory owners, address[] memory tknAddress) public view returns (TokenBalances[] memory) {\n', '        TokenBalances[] memory tokensBal = new TokenBalances[](tknAddress.length);\n', '        for (uint i = 0; i < tknAddress.length; i++) {\n', '            uint[] memory bals = new uint[](owners.length);\n', '            TokenInterface token = TokenInterface(tknAddress[i]);\n', '            if (tknAddress[i] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '                for (uint j = 0; j < owners.length; j++) {\n', '                    bals[j] = owners[j].balance;\n', '                }\n', '            } else {\n', '                for (uint j = 0; j < owners.length; j++) {\n', '                    bals[j] = token.balanceOf(owners[j]);\n', '                }\n', '            }\n', '           \n', '            tokensBal[i] = TokenBalances({\n', '                userBalances: bals\n', '            });\n', '        }\n', '        return tokensBal;\n', '    }\n', '}\n', '\n', '\n', 'contract InstaPowerERC20Resolver is Resolver {\n', '    string public constant name = "ERC20-Power-Resolver-v1";\n', '}']