['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface OracleSecurityModule {\n', '    function read() external view returns (uint256, bool);\n', '    function foresight() external view returns (uint256, bool);\n', '}\n', '\n', 'interface EACAggregatorProxy {\n', '    function decimals() external view returns (uint8);\n', '    function latestAnswer() external view returns (int256);\n', '}\n', '\n', 'contract OSMedianizer {\n', '    address public token;\n', '    OracleSecurityModule public OSM;\n', '    EACAggregatorProxy public MEDIANIZER;\n', '    \n', '    constructor() public {\n', '        token = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n', '        OSM = OracleSecurityModule(0x82c93333e4E295AA17a05B15092159597e823e8a);\n', '        MEDIANIZER = EACAggregatorProxy(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\n', '    }\n', '    \n', '    function read() external view returns (uint price, bool osm) {\n', '        (price, osm) = OSM.read();\n', '        if (!osm) {\n', '            osm = false;\n', '            uint ans = uint(MEDIANIZER.latestAnswer());\n', '            price = ans * 1e18 / 10**uint(MEDIANIZER.decimals());\n', '        }\n', '    }\n', '    \n', '    function foresight() external view returns (uint price, bool osm) {\n', '        (price, osm) = OSM.foresight();\n', '        if (!osm) {\n', '            osm = false;\n', '            uint ans = uint(MEDIANIZER.latestAnswer());\n', '            price = ans * 1e18 / 10**uint(MEDIANIZER.decimals());\n', '        }\n', '    }\n', '}']