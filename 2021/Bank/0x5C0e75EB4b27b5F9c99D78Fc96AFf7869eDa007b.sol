['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./IERC20.sol";\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', '// BaskBar is the coolest bar in town. You come in with some Bask, and leave with more! The longer you stay, the more Bask you get.\n', '//\n', "// This contract handles swapping to and from xBask, BaskSwap's staking token.\n", 'contract XBASK is ERC20("xBASK", "xBASK") {\n', '    using SafeMath for uint256;\n', '    IERC20 public bask = IERC20(0x44564d0bd94343f72E3C8a0D22308B7Fa71DB0Bb);\n', '\n', '    // Define the Bask token contract\n', '    constructor() {}\n', '\n', '    // xBASK/BASK ratio\n', '    function getRatio(uint256 _share) public view returns (uint256) {\n', '        // Gets the amount of xBask in existence\n', '        uint256 totalShares = totalSupply();\n', '        // Calculates the amount of Bask the xBask is worth\n', '        uint256 what = _share.mul(bask.balanceOf(address(this))).div(totalShares);\n', '\n', '        return what;\n', '    }\n', '\n', '    // Enter the bar. Pay some SUSHIs. Earn some shares.\n', '    // Locks Bask and mints xBask\n', '    function enter(uint256 _amount) public {\n', '        // Gets the amount of Bask locked in the contract\n', '        uint256 totalBask = bask.balanceOf(address(this));\n', '        // Gets the amount of xBask in existence\n', '        uint256 totalShares = totalSupply();\n', '        // If no xBask exists, mint it 1:1 to the amount put in\n', '        if (totalShares == 0 || totalBask == 0) {\n', '            _mint(msg.sender, _amount);\n', '        }\n', '        // Calculate and mint the amount of xBask the Bask is worth. The ratio will change overtime, as xBask is burned/minted and Bask deposited + gained from fees / withdrawn.\n', '        else {\n', '            uint256 what = _amount.mul(totalShares).div(totalBask);\n', '            _mint(msg.sender, what);\n', '        }\n', '        // Lock the Bask in the contract\n', '        bask.transferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    // Leave the bar. Claim back your SUSHIs.\n', '    // Unlocks the staked + gained Bask and burns xBask\n', '    function leave(uint256 _share) public {\n', '        // Gets the amount of xBask in existence\n', '        uint256 totalShares = totalSupply();\n', '        // Calculates the amount of Bask the xBask is worth\n', '        uint256 what = _share.mul(bask.balanceOf(address(this))).div(totalShares);\n', '        _burn(msg.sender, _share);\n', '        bask.transfer(msg.sender, what);\n', '    }\n', '}']