['// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.5;\n', '\n', '\n', 'import "LibSafeMath.sol";\n', 'import "LibIUSDPrice.sol";\n', '\n', 'interface IUniswapV2Router02 {\n', '    function WETH() external pure returns (address);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'contract USDPrice is IUSDPrice {\n', '    using SafeMath for uint256;\n', '\n', '    address private immutable VOKEN_TB = address(0x1234567a022acaa848E7D6bC351d075dBfa76Dd4);\n', '    address private immutable DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    IUniswapV2Router02 private immutable UniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '\n', '    function etherPrice()\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = UniswapV2Router02.WETH();\n', '        path[1] = DAI;\n', '\n', '        return UniswapV2Router02.getAmountsOut(1_000_000, path)[1];\n', '    }\n', '\n', '    function vokenPrice()\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = VOKEN_TB;\n', '        path[1] = DAI;\n', '        \n', '        return UniswapV2Router02.getAmountsOut(1_000_000, path)[1].mul(1_000_000_000).div(1 ether);\n', '    }\n', '}']