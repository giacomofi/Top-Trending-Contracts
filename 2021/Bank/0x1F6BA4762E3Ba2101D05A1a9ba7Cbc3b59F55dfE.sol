['pragma solidity = 0.5 .16;\n', '\n', "import './UnifiERC20.sol';\n", "import './interfaces.sol';\n", '\n', '\n', 'contract UnifiPair is IUnifiPair, UnifiERC20 {\n', '    using SafeMath\n', '    for uint;\n', '    using UQ112x112\n', '    for uint224;\n', '    struct pairData {\n', '        uint balance0;\n', '        uint balance1;\n', '        uint fees;\n', '        uint token0Fees;\n', '        uint token1Fees;\n', '        IUnifiController iUC;\n', '        uint upFees;\n', '\n', '    }\n', '\n', '    string public symbol;\n', '    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", "    bytes4 private constant APPROVE = bytes4(keccak256(bytes('approve(address,uint256)')));\n", '\n', '    address public factory;\n', '    address public token0;\n', '    address public token1;\n', '    address public WBNB;\n', '    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n', '    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n', '    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n', '\n', '    uint public price0CumulativeLast;\n', '    uint public price1CumulativeLast;\n', '    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n', '\n', '    uint private unlocked = 1;\n', '    modifier lock() {\n', "        require(unlocked == 1, 'Unifi: LOCKED');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    function getReserves() public view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Unifi: TRANSFER_FAILED');\n", '    }\n', '\n', '    function _safeApprove(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(APPROVE, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Unifi: APPROVE_FAILED');\n", '    }\n', '\n', '\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function() external payable {\n', '\n', '    }\n', '    constructor() public {\n', '        factory = msg.sender;\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(address _token0, address _token1, address _wbnb) external {\n', "        require(msg.sender == factory, 'Unifi: FORBIDDEN'); // sufficient check\n", '        token0 = _token0;\n', '        token1 = _token1;\n', '        WBNB = _wbnb;\n', '        if(_token0 == _wbnb && _token1 != _wbnb){\n', '            symbol =  string(abi.encodePacked("u",IERC20(token1).symbol()));\n', '        }else if (_token1 == _wbnb && _token0 != _wbnb){\n', '            symbol =  string(abi.encodePacked("u",IERC20(token0).symbol()));\n', '        }else{\n', '            symbol =  string(abi.encodePacked("u",IERC20(token1).symbol(), "_", IERC20(token0).symbol()));            \n', '        }\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n', "        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Unifi: OVERFLOW');\n", '        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '\n', '\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function mint(address to) external lock returns(uint liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint amount0 = balance0.sub(_reserve0);\n', '        uint amount1 = balance1.sub(_reserve1);\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n', '            IUnifiController(((IUnifiFactory(factory).feeController()))).claimUP(to, to, liquidity, true, false, false);\n', '\n', '        } else {\n', '            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n', '            IUnifiController(((IUnifiFactory(factory).feeController()))).claimUP(to, to, liquidity, true, false, false);\n', '\n', '        }\n', "        require(liquidity > 0, 'Unifi: INSUFFICIENT_LIQUIDITY_MINTED');\n", '        _mint(to, liquidity);\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        // \n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function burn(address to) external lock returns(uint amount0, uint amount1) {\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        address _token0 = token0; // gas savings\n', '        address _token1 = token1; // gas savings\n', '        uint balance0 = IERC20(_token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(_token1).balanceOf(address(this));\n', '        uint liquidity = balanceOf[address(this)];\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n', '        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n', "        require(amount0 > 0 && amount1 > 0, 'Unifi: INSUFFICIENT_LIQUIDITY_BURNED');\n", '        IUnifiController((IUnifiFactory(factory).feeController())).claimUP(to, to, liquidity, true, false, false);\n', '\n', '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = IERC20(_token0).balanceOf(address(this));\n', '        balance1 = IERC20(_token1).balanceOf(address(this));\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '\n', '    function claimUP(address _user) external lock returns(uint) {\n', '        IUnifiController(IUnifiFactory(factory).feeController()).claimUP(_user, _user, 0, false, false, true);\n', '    }\n', '\n', '    function getPairFee() external view returns(uint) {\n', '\n', '        address controllerAddress = (IUnifiFactory(factory).feeController());\n', '        uint fees = IUnifiController(controllerAddress).getPairFee(address(this));\n', '        return fees;\n', '\n', '    }\n', '\n', '    function transfer(address to, uint value) external returns(bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        this.claimUP(from);\n', '        this.claimUP(to);\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external returns(bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n', "        require(amount0Out > 0 || amount1Out > 0, 'Unifi: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', "        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Unifi: INSUFFICIENT_LIQUIDITY');\n", '\n', '        pairData memory pd;\n', '        pd.iUC = IUnifiController((IUnifiFactory(factory).feeController()));\n', "        require(pd.iUC.poolPaused(address(this)) == false, 'Unifi: Contract is on pause');\n", '        pd.fees = pd.iUC.getPairFee(address(this));\n', '\n', '\n', '        { // scope for _token{0,1}, avoids stack too deep errors\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require(to != _token0 && to != _token1, 'Unifi: INVALID_TO');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n', '            if (data.length > 0 && !pd.iUC.isDisableFlashLoan(address(this))) IUnifiCallee(to).unifiCall(msg.sender, amount0Out, amount1Out, data);\n', '            pd.balance0 = IERC20(_token0).balanceOf(address(this));\n', '            pd.balance1 = IERC20(_token1).balanceOf(address(this));\n', '        }\n', '        uint amount0In = pd.balance0 > _reserve0 - amount0Out ? pd.balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint amount1In = pd.balance1 > _reserve1 - amount1Out ? pd.balance1 - (_reserve1 - amount1Out) : 0;\n', "        require(amount0In > 0 || amount1In > 0, 'Unifi: INSUFFICIENT_INPUT_AMOUNT'); { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n", '        uint balance0Adjusted = pd.balance0.mul(1000).sub(amount0In.mul(pd.fees));\n', '        uint balance1Adjusted = pd.balance1.mul(1000).sub(amount1In.mul(pd.fees));\n', "        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'Unifi: K');\n", '\n', '\n', '        }\n', '        uint fees = 0;\n', '        if (pd.iUC.UPMintable(address(this))) {\n', '            pd.token0Fees = amount0In.mul(pd.fees).div(1000);\n', '            pd.token1Fees = amount1In.mul(pd.fees).div(1000);\n', '            if (token0 == WBNB || token1 ==WBNB) {\n', '                if (pd.token0Fees  > 0) {\n', '                    if (token0 != WBNB) {\n', '                        //perform a swap quote\n', '                        fees = quote(pd.token0Fees, pd.balance0, pd.balance1);\n', '                        pd.upFees = pd.upFees.add(fees);\n', '                        pd.balance1 = pd.balance1.sub(fees);\n', '                    } else {\n', '                        pd.upFees = pd.upFees.add(pd.token0Fees);\n', '                        pd.balance0 = pd.balance0.sub(pd.token0Fees);\n', '                    }\n', '                }\n', '                if (pd.token1Fees  > 0) {\n', '                    if (token1 != WBNB) {\n', '                        fees = quote(pd.token1Fees , pd.balance1, pd.balance0);\n', '                        pd.upFees = pd.upFees.add(fees);\n', '                        pd.balance0 = pd.balance0.sub(fees);\n', '                    } else {\n', '                        pd.upFees = pd.upFees.add(pd.token1Fees);\n', '                        pd.balance1 = pd.balance1.sub(pd.token1Fees);\n', '                    }\n', '\n', '                }\n', '                if (pd.upFees > 0) {\n', '\n', '                    IWETH(WBNB).withdraw(pd.upFees);\n', '                    pd.iUC.mintUP.value(address(this).balance)(address(this));\n', '\n', '                }\n', '\n', '            } else { //pair isnt WBNB\n', '\n', '                // get the path\n', '                // get the addres[0] to know which coin we need to change to\n', '                address[] memory pathToTrade = IUnifiController(address(pd.iUC)).pathToTrade(address(this));\n', '                if (pathToTrade.length > 0 && pathToTrade[pathToTrade.length - 1] == WBNB) {\n', '                    if (amount0In.mul(pd.fees) > 0) {\n', '                        if (token0 != pathToTrade[0] && pathToTrade[0] == token1) {\n', '                            //perform a swap quote\n', '                            fees = quote(pd.token0Fees, pd.balance0, pd.balance1);\n', '                            pd.upFees = pd.upFees.add(fees);\n', '                            pd.balance1 = pd.balance1.sub(fees);\n', '                        } else { //straight away perform trade\n', '                            pd.upFees = pd.upFees.add(pd.token0Fees);//when will this happen?\n', '                            pd.balance0 = pd.balance0.sub(pd.token0Fees);\n', '                        }\n', '                    }\n', '                    if (amount1In.mul(pd.fees) > 0) {\n', '                        if (token1 != pathToTrade[0] && pathToTrade[0] == token0) {\n', '                            fees = quote(pd.token1Fees, pd.balance1, pd.balance0);\n', '                            pd.upFees = pd.upFees.add(fees);\n', '                            pd.balance0 = pd.balance0.sub(fees);\n', '                        } else { //straight away perform trade\n', '                            pd.upFees = pd.upFees.add(pd.token1Fees);\n', '                            pd.balance1 = pd.balance1.sub(pd.token1Fees);\n', '                        }\n', '                    }\n', '                    if (pd.upFees > 0) {\n', '                        _safeApprove(pathToTrade[0], IUnifiFactory(factory).router(), pd.upFees);\n', '                        IUnifiRouter(IUnifiFactory(factory).router()).swapExactTokensForETH(pd.upFees, 1, pathToTrade, address(pd.iUC), (block.timestamp).add(18000)); //get the WBNB back\n', '                        pd.iUC.mintUP.value(0)(address(this));\n', '                    }\n', '                }\n', '            }\n', '\n', '        }\n', '        pd.balance0 = IERC20(token0).balanceOf(address(this));\n', '        pd.balance1 = IERC20(token1).balanceOf(address(this));\n', '        _update(pd.balance0, pd.balance1, _reserve0, _reserve1); //balance is wrong\n', '\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n', '    }\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external lock {\n', '         IUnifiController iUC = IUnifiController((IUnifiFactory(factory).feeController()));\n', '         if(iUC.admin(msg.sender)){\n', '            address _token0 = token0; // gas savings\n', '            address _token1 = token1; // gas savings\n', '            _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n', '            _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n', '         }\n', '    }\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns(uint amountB) {\n', "        require(amountA > 0, 'UnifiLibrary Pair: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UnifiLibrary: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '    // force reserves to match balances\n', '    function sync() external lock {\n', '        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n', '    }\n', '    // if fee is on, mint liquidity equivalent to 8/25 of the growth in sqrt(k)\n', '\n', '    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns(bool feeOn) {\n', '        address feeTo = IUnifiFactory(factory).feeTo();\n', '        feeOn = feeTo != address(0);\n', '        uint _kLast = kLast; // gas savings\n', '\n', '        IUnifiController ufc = IUnifiController((IUnifiFactory(factory).feeController()));\n', '\n', '        if (feeOn && ufc.UPMintable(address(this)) == false) {\n', '            (uint numeratorConfig, uint denominatorConfig) = ufc.getMintFeeConfig(address(this));\n', '            if (_kLast != 0) {\n', '                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n', '                uint rootKLast = Math.sqrt(_kLast);\n', '                if (rootK > rootKLast) {\n', '                    uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(numeratorConfig);\n', '                    uint denominator = rootK.mul(denominatorConfig).add(rootKLast.mul(numeratorConfig));\n', '                    uint liquidity = numerator / denominator;\n', '                    if (liquidity > 0) _mint(feeTo, liquidity);\n', '                }\n', '            }\n', '        } else if (_kLast != 0) {\n', '            kLast = 0;\n', '        }\n', '    }\n', '\n', '\n', '}']