['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./UniswapInterface.sol";\n', 'import "./Ownable.sol";\n', 'import "./IERC20.sol";\n', '\n', 'contract UniswapBought is Ownable {\n', '    // list of authorized address\n', '    mapping(address => bool) authorized;\n', '\n', '    // using this to add address who can call the contract\n', '    function addAuthorized(address _a) public onlyOwner {\n', '        authorized[_a] = true;\n', '    }\n', '\n', '    // using this to add address who can call the contract\n', '    function deleteAuthorized(address _a) public onlyOwner {\n', '        authorized[_a] = false;\n', '    }\n', '\n', '    function isAuthorized(address _a) public view onlyOwner returns (bool) {\n', '        if (owner() == _a) {\n', '            return true;\n', '        } else {\n', '            return authorized[_a];\n', '        }\n', '    }\n', '\n', '    modifier onlyAuth() {\n', '        require(isAuthorized(msg.sender));\n', '        _;\n', '    }\n', '\n', '    // =========================================================================================\n', '    // Settings uniswap\n', '    // =========================================================================================\n', '\n', '    address public constant UNIROUTER =\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address public WETHAddress = UniswapExchangeInterface(UNIROUTER).WETH();\n', '    UniswapExchangeInterface uniswap = UniswapExchangeInterface(UNIROUTER);\n', '\n', '    // =========================================================================================\n', '    // Buy and Sell Functions\n', '    // =========================================================================================\n', '\n', '    // using this to buy token , first arg is eth value (1 eth = 1*1E18), arg2 is token address\n', '    function buyToken(\n', '        uint256 _value,\n', '        address _token,\n', '        uint256 _mintoken,\n', '        uint256 _blockDeadLine\n', '    ) public onlyAuth returns (uint256) {\n', '        uint256 deadline = block.timestamp + _blockDeadLine; // deadline during 15 blocks\n', '        address[] memory path = new address[](2);\n', '        path[0] = WETHAddress;\n', '        path[1] = _token;\n', '        uint256[] memory amount =\n', '            uniswap.swapExactETHForTokens{value: _value}(\n', '                _mintoken,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            );\n', '        return amount[1];\n', '    }\n', '\n', '    // using this to allow uniswap to sell tokens of contract\n', '    function allowUniswapForToken(address _token) public onlyOwner {\n', '        uint256 _balance = IERC20(_token).balanceOf(address(this));\n', '        IERC20(_token).approve(UNIROUTER, _balance);\n', '    }\n', '\n', '    // using this to sell token , first arg is eth value (1 eth = 1*1E18), arg2 is token address\n', '    function sellToken(\n', '        uint256 _amountToSell,\n', '        uint256 _amountOutMin,\n', '        address _token,\n', '        uint256 _blockDeadLine\n', '    ) public onlyAuth returns (uint256) {\n', '        uint256 deadline = block.timestamp + _blockDeadLine; // deadline during 15 blocks\n', '        address[] memory path = new address[](2);\n', '        path[0] = _token;\n', '        path[1] = WETHAddress;\n', '        uint256[] memory amount =\n', '            uniswap.swapExactTokensForETH(\n', '                _amountToSell,\n', '                _amountOutMin,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            );\n', '        return amount[1];\n', '    }\n', '\n', '    // =========================================================================================\n', '    // Desposit and withdraw functions\n', '    // =========================================================================================\n', '\n', '    // using this to send Eth to contract\n', '    fallback() external payable {}\n', '\n', '    receive() external payable {}\n', '\n', '    // Using this to withdraw eth balance of contract => send to msg.sender\n', '    function withdrawEth() external onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    // using this to withdraw all tokens in the contract => send to msg.sender\n', '    function withdrawToken(address _token) public onlyOwner() {\n', '        uint256 _balance = IERC20(_token).balanceOf(address(this));\n', '        IERC20(_token).transfer(msg.sender, _balance);\n', '    }\n', '}']