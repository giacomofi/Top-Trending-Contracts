['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/AddLiquidity.sol\n', 'pragma solidity >=0.7.4 <0.8.0;\n', '\n', '////// src/AddLiquidity.sol\n', '// SPDX-License-Identifier: MIT\n', '/* pragma solidity ^0.7.4; */\n', '\n', 'interface ERC20_2 {\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function approve(address, uint256) external;\n', '}\n', '\n', 'interface UniswapV2Router02 {\n', '    function addLiquidity(address, address, uint256, uint256, uint256, uint256, address, uint256) external;\n', '}\n', '\n', 'contract AddLiquidity {\n', '    address constant public UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    uint256 public radLiquidity = 0;\n', '    uint256 public usdcLiquidity = 0;\n', '    uint256 public minRadLiquidity = 0;\n', '    uint256 public minUsdcLiquidity = 0;\n', '\n', '    address immutable public admin;\n', '\n', '    constructor(address _admin) {\n', '        admin = _admin;\n', '    }\n', '\n', '    function setLiquidity(\n', '        uint256 _radLiquidity,\n', '        uint256 _usdcLiquidity,\n', '        uint256 _minRadLiquidity,\n', '        uint256 _minUsdcLiquidity\n', '    ) public {\n', '        require(msg.sender == admin, "Sender must be admin");\n', '        require(_radLiquidity <= 500_000e18, "RAD liquidity must not exceed maximum");\n', '        require(_usdcLiquidity <= 5_000_000e6, "USDC liquidity must not exceed maximum");\n', '        require(_minRadLiquidity <= _radLiquidity);\n', '        require(_minUsdcLiquidity <= _usdcLiquidity);\n', '\n', '        radLiquidity = _radLiquidity;\n', '        usdcLiquidity = _usdcLiquidity;\n', '        minRadLiquidity = _minRadLiquidity;\n', '        minUsdcLiquidity = _minUsdcLiquidity;\n', '    }\n', '\n', '    function addLiquidity(address rad, address usdc) public {\n', '        require(\n', '            ERC20_2(rad).transferFrom(msg.sender, address(this), radLiquidity),\n', '            "Transfer of RAD must succeed"\n', '        );\n', '        require(\n', '            ERC20_2(usdc).transferFrom(msg.sender, address(this), usdcLiquidity),\n', '            "Transfer of USDC must succeed"\n', '        );\n', '        ERC20_2(rad).approve(UNISWAP_ROUTER, radLiquidity);\n', '        ERC20_2(usdc).approve(UNISWAP_ROUTER, usdcLiquidity);\n', '\n', '        UniswapV2Router02(UNISWAP_ROUTER).addLiquidity(\n', '            rad,\n', '            usdc,\n', '            radLiquidity,\n', '            usdcLiquidity,\n', '            minRadLiquidity,\n', '            minUsdcLiquidity,\n', '            msg.sender,\n', '            block.timestamp + 1 days\n', '        );\n', '    }\n', '}']