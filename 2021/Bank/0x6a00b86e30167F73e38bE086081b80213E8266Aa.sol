['/*\n', ' * Copyright Â© 2020 reflect.finance. ALL RIGHTS RESERVED.\n', ' */\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns(uint);\n', '\n', '  function balanceOf(address account) external view returns(uint);\n', '\n', '  function transfer(address recipient, uint amount) external returns(bool);\n', '\n', '  function allowance(address owner, address spender) external view returns(uint);\n', '\n', '  function approve(address spender, uint amount) external returns(bool);\n', '\n', '  function transferFrom(address sender, address recipient, uint amount) external returns(bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'library Address {\n', '  function isContract(address account) internal view returns(bool) {\n', '    bytes32 codehash;\n', '    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '    // solhint-disable-next-line no-inline-assembly\n', '    assembly { codehash:= extcodehash(account) }\n', '    return (codehash != 0x0 && codehash != accountHash);\n', '  }\n', '}\n', '\n', 'contract Context {\n', '  constructor() internal {}\n', '  // solhint-disable-previous-line no-empty-blocks\n', '  function _msgSender() internal view returns(address payable) {\n', '    return msg.sender;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns(uint) {\n', '    uint c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns(uint) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n', '    require(b <= a, errorMessage);\n', '    uint c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function mul(uint a, uint b) internal pure returns(uint) {\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns(uint) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint c = a / b;\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () public{\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Catoshi is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals = 18;\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _supply = 42 * 10**6 * 10**18; // total supply of the catoshi token\n', '    uint256 private _tTotal;\n', '    uint256 private _rTotal;\n', '    uint256 private _tFeeTotal;\n', '\n', '    // TODO: change this out with the final charity wallet address\n', '    address private _charityWallet = 0xf81ba5bc55840CC8C28B1978E8870a4eD4779d8D;\n', '\n', '    // Max transfer size per wallet\n', '    uint256 private  _MAX_TX_SIZE;\n', '\n', '    uint private curTime;\n', '\n', '    \n', '    constructor (string memory cats_name, string memory cats_symbol) public {\n', '        \n', '        uint256 burnSupply = _supply.div(100).mul(50);  // initial burn supply from total supply, 50%\n', '\n', '        // subtract burn supply from total supply\n', '        _tTotal = _supply.sub(burnSupply);\n', '\n', '        // reflection total from burnt total supply.\n', '        _rTotal = (MAX - (MAX % _tTotal));\n', '\n', '        _rOwned[_msgSender()] = _rTotal; // reflection token owned\n', '\n', '        _MAX_TX_SIZE = _tTotal.div(100).div(100).mul(25);  // 0.25 percent of totalsupply, max transfer per wallet\n', '\n', '        _name = cats_name; _symbol = cats_symbol;\n', '\n', '        curTime = now;\n', '\n', '        emit Transfer(address(0), _msgSender(), _supply); // total supply to contract creator\n', '        emit Transfer(_msgSender(), address(0), burnSupply); // initial burn 50% token from contract creator\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    // for another burn like 3.7 million or some more\n', '    function burnOf(uint256 tAmount) public {\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '\n', '        // subtract additional burn from total supply\n', '        _tTotal = _tTotal.sub(tAmount);\n', '\n', '        // subtract additional burn from reflection supply\n', '        _rTotal = _rTotal.sub(rAmount);\n', '\n', '        emit Transfer(_msgSender(), address(0), tAmount);\n', '    }\n', '\n', '    function reflect(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function getMinute(uint timestamp) public pure returns (uint8) {\n', '        return uint8((timestamp / 60) % 60);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        uint diffTime = now - curTime; \n', '        // bot protection max 0.25% of total supply per transaction\n', '        if(getMinute(diffTime) < 15 ){\n', '            if(sender != owner() && recipient != owner())\n', '                require(amount <= _MAX_TX_SIZE, "Transfer amount exceeds the mxTxAmount.");\n', '        }\n', '        \n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n', '        \n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\n', '        _reflectFee(rFee, tFee);\n', '\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rBurnFee = burnFee.mul(currentRate);\n', '        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n', '        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n', '\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '        emit Transfer(sender, _charityWallet, charityFee);\n', '        emit Transfer(_msgSender(), address(0), burnFee);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n', '\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);     \n', '\n', '        _reflectFee(rFee, tFee);\n', '\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rBurnFee = burnFee.mul(currentRate);\n', '        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n', '        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n', '\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '        emit Transfer(sender, _charityWallet, charityFee);\n', '        emit Transfer(_msgSender(), address(0), burnFee);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n', '\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \n', '\n', '        _reflectFee(rFee, tFee);\n', '\n', '        uint256 currentRate =  _getRate();\n', '        uint256 rBurnFee = burnFee.mul(currentRate);\n', '        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n', '        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n', '\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '        emit Transfer(sender, _charityWallet, charityFee);\n', '        emit Transfer(_msgSender(), address(0), burnFee);\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n', '\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \n', '\n', '        _reflectFee(rFee, tFee);\n', '\n', '        uint256 currentRate = _getRate();\n', '        uint256 rBurnFee = burnFee.mul(currentRate);\n', '        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n', '        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n', '\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '        emit Transfer(sender, _charityWallet, charityFee);\n', '        emit Transfer(_msgSender(), address(0), burnFee);\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 burnFee, uint256 charityFee) = _getTValues(tAmount);\n', '\n', '        uint256 currentRate =  _getRate();\n', '\n', '        uint256 amount = tAmount;\n', '\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(amount, tFee, currentRate);\n', '        \n', '        return (rAmount, rTransferAmount, rFee, burnFee, charityFee, tTransferAmount, tFee);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount.div(100).mul(3); // 3% reflection fee to token holders\n', '\n', '        uint256 burnFee = tAmount.div(100).mul(2); // 2% tax to burn\n', '\n', '        uint256 charityFee = tAmount.div(100).mul(1); // 1% to charity wallet address\n', '\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(burnFee).sub(charityFee);\n', '\n', '        return (tTransferAmount, tFee, burnFee, charityFee);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 9999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']