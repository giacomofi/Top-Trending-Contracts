['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-20\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'contract KYUBIWORLD is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    string private constant _name = unicode"Kyūbi World";\n', '    string private constant _symbol = unicode"Kyūbi";\n', '    uint8 private constant _decimals = 9;\n', '\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;    \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 33000000000000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 public _kyubiBurned;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '\n', '    mapping(address => uint256) private buycooldown;\n', '    mapping(address => uint256) private sellcooldown;\n', '    mapping(address => uint256) private firstsell;\n', '    mapping(address => uint256) private sellnumber;\n', '    \n', '    address private eViral = 0x7CeC018CEEF82339ee583Fd95446334f2685d24f; \n', '    address private burnAddress = 0x000000000000000000000000000000000000dEaD;\n', '    address payable private _teamAddress;\n', '    address payable private _marketingFunds;\n', '    address payable private _developmentFunds1;\n', '    address payable private _developmentFunds2;\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address public uniswapV2Pair;\n', '    \n', '    bool public tradeAllowed = false;\n', '    bool private liquidityAdded = false;\n', '    bool private inSwap = false;\n', '    bool public swapEnabled = false;\n', '    \n', '    uint256 private _maxTxAmount = _tTotal;     \n', '    uint256 private _reflection = 5;\n', '    uint256 private _teamFee = 7;\n', '    uint256 private _kyubiBurn = 5;\n', '\n', '    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n', '    modifier lockTheSwap {\n', '        inSwap = true;\n', '        _;\n', '        inSwap = false;\n', '    }\n', '    constructor(address payable addr1, address payable addr2, address payable addr3, address payable addr4) {\n', '        _teamAddress = addr1;\n', '        _marketingFunds = addr2;\n', '        _developmentFunds1 = addr3;\n', '        _developmentFunds2 = addr4;\n', '        _rOwned[_msgSender()] = _rTotal;\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _isExcludedFromFee[_teamAddress] = true;\n', '        _isExcludedFromFee[_marketingFunds] = true;\n', '        _isExcludedFromFee[_developmentFunds1] = true;\n', '        _isExcludedFromFee[_developmentFunds2] = true;\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '    \n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function releaseKyubi() public onlyOwner {\n', '        require(liquidityAdded);\n', '        tradeAllowed = true;\n', '    }\n', '    \n', '    \n', '    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n', '        require(maxTxPercent > 0, "Amount must be greater than 0");\n', '        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n', '        emit MaxTxAmountUpdated(_maxTxAmount);\n', '    }\n', '\n', '    function addLiquidity() external onlyOwner() {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _tTotal);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        swapEnabled = true;\n', '        liquidityAdded = true;\n', '        _maxTxAmount = 99000000000 * 10**9;\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n', '    }\n', '\n', '    function manualswap() external onlyOwner() {\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        swapTokensForEth(contractBalance);\n', '    }\n', '\n', '    function manualsend() external onlyOwner() {\n', '        uint256 contractETHBalance = address(this).balance;\n', '        sendETHToFee(contractETHBalance);\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\n', '        require(rAmount <= _rTotal,"Amount must be less than total reflections");\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        if (from != owner() && to != owner()) {\n', '            \n', '            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\n', '                require(tradeAllowed);\n', '                require(buycooldown[to] < block.timestamp);\n', '                uint walletBalance = balanceOf(address(to));\n', '                require(amount.add(walletBalance) <= _tTotal.div(100));\n', '                require(amount <= _maxTxAmount);\n', '                buycooldown[to] = block.timestamp + (45 seconds);\n', '                _teamFee = 7;\n', '                _reflection = 3;\n', '                _kyubiBurn = 0;\n', '                uint contractETHBalance = address(this).balance;\n', '                if (contractETHBalance > 0) {\n', '                    swapETHForEViral(address(this).balance);\n', '                }\n', '                \n', '            }\n', '            uint256 contractTokenBalance = balanceOf(address(this));\n', '            if (!inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[to] && !_isExcludedFromFee[from]) {\n', '                require(amount <= balanceOf(uniswapV2Pair).mul(33).div(1000));\n', '                require(sellcooldown[from] < block.timestamp);\n', '                if(firstsell[from] + (1 days) < block.timestamp){\n', '                    sellnumber[from] = 0;\n', '                }\n', '                if (sellnumber[from] == 0) {\n', '                    sellnumber[from]++;\n', '                    firstsell[from] = block.timestamp;\n', '                    sellcooldown[from] = block.timestamp + (1 hours);\n', '                }\n', '                else if (sellnumber[from] == 1) {\n', '                    sellnumber[from]++;\n', '                    sellcooldown[from] = block.timestamp + (3 hours);\n', '                }\n', '                else if (sellnumber[from] == 2) {\n', '                    sellnumber[from]++;\n', '                    sellcooldown[from] = firstsell[from] + (1 days);\n', '                }\n', '                uint initialBalance = address(this).balance;\n', '                swapTokensForEth(contractTokenBalance);\n', '                uint newBalance = address(this).balance;\n', '                uint distributeETHBalance = newBalance.sub(initialBalance);\n', '                if (distributeETHBalance > 0) {\n', '                    sendETHToFee(distributeETHBalance);\n', '                }\n', '                setFee(sellnumber[from]);\n', '            }\n', '        }\n', '        bool takeFee = true;\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '            if ( to != uniswapV2Pair && to!= address(uniswapV2Router)) {\n', '                takeFee = false;\n', '            }\n', '        }\n', '        _tokenTransfer(from, to, amount, takeFee);\n', '        restoreAllFee;\n', '    }\n', '    \n', '\n', '    function removeAllFee() private {\n', '        if (_reflection == 0 && _teamFee == 0 && _kyubiBurn == 0) return;\n', '        _reflection = 0;\n', '        _teamFee = 0;\n', '        _kyubiBurn = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _reflection = 5;\n', '        _teamFee = 7;\n', '        _kyubiBurn = 5;\n', '    }\n', '    \n', '    function setFee(uint256 multiplier) private {\n', '        _reflection = _reflection.mul(multiplier);\n', '        _kyubiBurn = _kyubiBurn.mul(multiplier);\n', '        _teamFee = _teamFee.add(multiplier);       \n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if (!takeFee) removeAllFee();\n', '        _transferStandard(sender, recipient, amount);\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '    function _transferStandard(address sender, address recipient, uint256 amount) private {\n', '        (uint256 tAmount, uint256 tBurn) = _kyubiTokenBurn(amount);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount, tBurn);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _takeTeam(tTeam);\n', '        _reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _takeTeam(uint256 tTeam) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rTeam = tTeam.mul(currentRate);\n', '        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n', '    }\n', '\n', '    function _kyubiTokenBurn(uint amount) private returns (uint, uint) {  \n', '        uint orgAmount = amount;\n', '        uint256 currentRate = _getRate();\n', '        uint256 tBurn = amount.mul(_kyubiBurn).div(100);\n', '        uint256 rBurn = tBurn.mul(currentRate);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '        _rTotal = _rTotal.sub(rBurn);\n', '        _kyubiBurned = _kyubiBurned.add(tBurn);\n', '        return (orgAmount, tBurn);\n', '    }\n', '    \n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount, uint256 tBurn) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _reflection, _teamFee, tBurn);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee, uint256 tBurn) private pure returns (uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount.mul(taxFee).div(100);\n', '        uint256 tTeam = tAmount.mul(teamFee).div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam).sub(tBurn);\n', '        return (tTransferAmount, tFee, tTeam);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rTeam = tTeam.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\n', '    }\n', '    \n', '     function swapETHForEViral(uint ethAmount) private {\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswapV2Router.WETH();\n', '        path[1] = address(eViral);\n', '\n', '        _approve(address(this), address(uniswapV2Router), ethAmount);\n', '        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(ethAmount,path,address(burnAddress),block.timestamp);\n', '    }\n', '\n', '    function sendETHToFee(uint256 amount) private {\n', '            uint oneEigth = amount.div(8);\n', '            _teamAddress.transfer(amount.div(16).mul(5));\n', '            _marketingFunds.transfer(oneEigth);\n', '            _developmentFunds1.transfer(oneEigth);\n', '            _developmentFunds2.transfer(oneEigth);\n', '    }\n', '\n', '    receive() external payable {}\n', '}']