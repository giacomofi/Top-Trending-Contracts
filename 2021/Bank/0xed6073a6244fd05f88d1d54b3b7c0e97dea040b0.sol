['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', ' *  Program Name    : DAppCluster\n', ' *  Website         : https://dappcluster.com/\n', ' *  Telegram        : https://t.me/dappcluster\n', ' *  Concept         : High Return On Investment Contract\n', ' *  Category        : Passive Income\n', ' *  Risk Category   : High Risk\n', ' **/\n', '\n', 'pragma solidity >=0.6.0 <0.8.1;\n', '\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract DAppCluster  is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //Custom datatype to store investment details\n', '    struct Investment {\n', '        uint256 investmentAmount;\n', '        uint256 interestEarned;\n', '        uint256 investmentDate;\n', '        uint256 referralBonus;\n', '        uint256 expiryDate;\n', '        bool isExpired;\n', '        \n', '        uint256 level1RefId;\n', '        uint256 level2RefId;\n', '        uint256 level3RefId;\n', '    }\n', '    \n', '    uint256 public constant DEVELOPER_FEES = 4;\n', '    uint256 public constant MARKETING_FEES = 4;\n', '    uint256 public constant REFERRAL_LEVEL1_RATE = 8;\n', '    uint256 public constant REFERRAL_LEVEL2_RATE = 4;\n', '    uint256 public constant REFERRAL_LEVEL3_RATE = 2;\n', '    uint256 public constant MINIMUM_INVESTMENT = 10000000000000000;\n', '    uint256 public constant DAILY_INTEREST = 2;\n', '    uint256 public constant HARD_LOCKPERIOD_DAYS = 50;\n', '    uint256 public constant SOFT_LOCKPERIOD_DAYS = 11;\n', '    uint256 private constant START_USERCODE = 1000;\n', '    \n', '    uint256 private latestUserCode;\n', '    uint256 private totalInvestment;\n', '    uint256 private totalWithdrawal;\n', '    uint256 private totalInterestPaid;\n', '    uint256 private totalReferralBonusPaid;\n', '    \n', '    address private developerAccount;\n', '    address private marketingAccount;\n', '    \n', '    // mapping to store UserId of address\n', '    mapping(address => uint256) private UID;\n', '    \n', '    // mapping to store investment details of UserId\n', '    mapping(uint256 => Investment) private investment;\n', '    \n', '    // events to log action\n', '    event onInvest(address investor, uint256 amount, uint256 referral_Level1, uint256 referral_Level2, uint256 referral_Level3);\n', '    event onWithdraw(address investor, uint256 amount, uint256 interest, uint256 referralBonus, uint256 totalAmount);\n', '    \n', '    // constructor to initiate variables\n', '    constructor() {\n', '        \n', '        latestUserCode = START_USERCODE;\n', '        \n', '    }\n', '    \n', '    // function to get UserID if address is already part of system and generate new UserId if address is new in system\n', '    function getUserID(address _addr) internal returns(uint256 UserId){\n', '        uint256 uid = UID[_addr];\n', '        \n', '        if (uid == 0){\n', '            latestUserCode = latestUserCode.add(1);\n', '            UID[_addr] = latestUserCode;\n', '            uid = latestUserCode;\n', '        }\n', '        \n', '        return uid;\n', '    }\n', '    \n', '    // function to change marketing account\n', '    function setMarketingAccount(address payable _newMarketingAccount) public onlyOwner returns(bool) {\n', '        require(_newMarketingAccount != address(0));\n', '        \n', '        // marketing account able to withdraw bonus without locking as this money needs to pay for advertising & enhancement\n', '        \n', '        uint256 uid = getUserID(_newMarketingAccount);\n', '        \n', "        // make sure marketing account has not invested because locking doesn't get applied on it and eligible only to get bonus\n", '        require(investment[uid].investmentAmount == 0);\n', '        \n', '        marketingAccount = _newMarketingAccount;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // function to get marketing account\n', '    function getMarketingAccount() public view returns (address) {\n', '        return marketingAccount;\n', '    }\n', '    \n', '    // function to change developer account\n', '    function setDeveloperAccount(address payable _newDeveloperAccount) public onlyOwner returns(bool) {\n', '        require(_newDeveloperAccount != address(0));\n', '        \n', '        // developer account able to withdraw bonus without locking as this money needs to pay for advertising & enhancement\n', '        uint256 uid = getUserID(_newDeveloperAccount);\n', '        \n', "        // make sure developer account has not invested because locking doesn't get applied on it and eligible only to get bonus\n", '        require(investment[uid].investmentAmount == 0);\n', '        \n', '        developerAccount = _newDeveloperAccount;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // function to get developer account\n', '    function getDeveloperAccount() public view returns (address) {\n', '        return developerAccount;\n', '    }\n', '    \n', '    // function to get contract balance\n', '    function getContractBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    // fallback function to handle accidently send investment\n', '    fallback() payable external{\n', '        _invest(msg.sender, 0, msg.value);\n', '    }\n', '    \n', '    // receive function to handle received coin\n', '    receive() payable external{\n', '        _invest(msg.sender, 0, msg.value);\n', '    }\n', '    \n', '    // invest function to handle investment using referral code\n', '    function invest(uint256 _referrerCode) public payable{\n', '        _invest(msg.sender, _referrerCode, msg.value);\n', '    }\n', '    \n', '    // _invest function to process received investment\n', '    function _invest(address _addr, uint256 _referrerCode, uint256 _amount) internal returns(bool){\n', '     \n', '        require(_amount >= MINIMUM_INVESTMENT, "Less than the minimum amount of deposit requirement");\n', '        \n', "        // Restricting marketing & developer account from investment as locking doesn't get applied on it and they can only earn bonus\n", '        require(_addr != marketingAccount && _addr != developerAccount, "Marketing & Developement Account Are Not Allowed To Invest");\n', '     \n', '        uint256 uid = getUserID(_addr);\n', '        \n', '        // assign development fees & marketing fees as bonus\n', '        investment[UID[developerAccount]].referralBonus = investment[UID[developerAccount]].referralBonus.add(_amount.mul(DEVELOPER_FEES).div(100));\n', '        investment[UID[marketingAccount]].referralBonus = investment[UID[marketingAccount]].referralBonus.add(_amount.mul(MARKETING_FEES).div(100));\n', '        \n', '        // assign referral level if user invested via referral link\n', '        if (_referrerCode != 0 && _referrerCode != uid && investment[uid].investmentAmount == 0){\n', '            \n', '            investment[uid].level1RefId = _referrerCode;\n', '            \n', '            if (investment[_referrerCode].level1RefId !=0){\n', '                investment[uid].level2RefId = investment[_referrerCode].level1RefId;\n', '                \n', '                if (investment[_referrerCode].level2RefId != 0){\n', '                    investment[uid].level3RefId = investment[_referrerCode].level2RefId;\n', '                }\n', '                else{\n', '                    investment[uid].level3RefId = 0;\n', '                }\n', '            }\n', '            else{\n', '                investment[uid].level2RefId = 0;\n', '                investment[uid].level3RefId = 0;\n', '            }\n', '        }\n', '        \n', '        // assign level1 referral bonus only if still invested in system\n', '        if (investment[uid].level1RefId != 0 && (investment[uid].level1RefId > START_USERCODE && investment[uid].level1RefId <= latestUserCode) && investment[investment[uid].level1RefId].isExpired != true){\n', '            investment[investment[uid].level1RefId].referralBonus = investment[investment[uid].level1RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL1_RATE).div(100));    \n', '                \n', '            // Assign Level2 Referral Bonus Only If Level1 & Level2 Still Invested In System\n', '            if (investment[uid].level2RefId != 0 && (investment[uid].level2RefId > START_USERCODE && investment[uid].level2RefId <= latestUserCode) && investment[investment[uid].level2RefId].isExpired != true){\n', '                investment[investment[uid].level2RefId].referralBonus = investment[investment[uid].level2RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL2_RATE).div(100));    \n', '                    \n', '                // Assign Level3 Referral Bonus Only If Level1, Level2 & Level3 Still Invested In System\n', '                if (investment[uid].level3RefId != 0 && (investment[uid].level3RefId > START_USERCODE && investment[uid].level3RefId <= latestUserCode) && investment[investment[uid].level3RefId].isExpired != true){\n', '                    investment[investment[uid].level3RefId].referralBonus = investment[investment[uid].level3RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL3_RATE).div(100));    \n', '                }\n', '            }\n', '        }\n', '        \n', '        // if user is already part of system & investing additional fund then calculate interest for previous investment and update balance with new fund \n', '        if (investment[uid].isExpired != true && investment[uid].investmentAmount != 0){\n', '            uint256 day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '            investment[uid].interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\n', '        }\n', '        \n', '        // if user is already part of system with endParticipation & investing additional fund then calculate interest for previous investment and update balance with new fund \n', '        if (investment[uid].isExpired == true && investment[uid].investmentAmount != 0){\n', '            uint256 day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '            investment[uid].interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\n', '        }\n', '            \n', '        investment[uid].investmentAmount = investment[uid].investmentAmount.add(_amount);\n', '        \n', '        // update investment date & activate participation\n', '        investment[uid].investmentDate = block.timestamp;\n', '        investment[uid].expiryDate = 0;\n', '        investment[uid].isExpired = false;\n', '        \n', '        totalInvestment = totalInvestment.add(_amount);\n', '        \n', '        emit onInvest(_addr, _amount, investment[uid].level1RefId, investment[uid].level2RefId, investment[uid].level3RefId);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // endParticipation function to apply for SOFT_LOCKPERIOD\n', '    function endParticipation() public returns(bool){\n', '        address _addr = msg.sender;\n', '        uint256 uid = UID[_addr];\n', '        uint256 day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '        \n', '        // user must be part of system\n', '        require(uid != 0);\n', '        \n', '        // check HARD_LOCKPERIOD if finished\n', '        require(day > HARD_LOCKPERIOD_DAYS, "Hard locking period is not finished");\n', '        \n', '        // enable SOFT_LOCKPERIOD and update time\n', '        investment[uid].isExpired = true;\n', '        investment[uid].expiryDate = block.timestamp;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // withdraw function to get investmentAmount, interest, referralBonus after SOFT_LOCKPERIOD completion\n', '    function withdraw() public returns(bool){\n', '        address _addr = msg.sender;\n', '        uint256 uid = UID[_addr];\n', '        uint256 day = 0 ;\n', '        \n', '        // user must be part of system\n', '        require(uid != 0);\n', '        \n', '        // locking is not applicable on marketing & developer account and they will be only eligible to withdraw bonus.\n', '        // Investement using Developement & marketing accounts are restricted via _invest function\n', '        \n', '        if (_addr != developerAccount && _addr != marketingAccount){\n', '            // check SOFT_LOCKPERIOD is enabled\n', '            require(investment[uid].isExpired == true, "End participation & wait for soft locking period before withdrawing");\n', '            require(investment[uid].expiryDate != 0, "End participation & wait for soft locking period before withdrawing");\n', '        \n', '            day = block.timestamp.sub(investment[uid].expiryDate).div(60).div(60).div(24);\n', '        \n', '            // check SOFT_LOCKPERIOD is completed\n', '            require(day > SOFT_LOCKPERIOD_DAYS,"Wait for soft locking period before withdrawing");\n', '        }\n', '        \n', '        uint256 amountToSend;\n', '        \n', '        // calculate days to pay interest\n', '        day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '        \n', '        //calculate amount to pay\n', '        uint256 interest = investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day);\n', '        amountToSend = investment[uid].investmentAmount.add(investment[uid].interestEarned).add(investment[uid].referralBonus).add(interest);\n', '        \n', '        // set global variables to keep record of totalWithdrawal, totalInterestPaid & totalReferralBonusPaid\n', '        totalWithdrawal = totalWithdrawal.add(investment[uid].investmentAmount);\n', '        totalInterestPaid = totalInterestPaid.add(investment[uid].interestEarned).add(interest);\n', '        totalReferralBonusPaid = totalReferralBonusPaid.add(investment[uid].referralBonus);\n', '        \n', '        // log event for withdrawal\n', '        emit onWithdraw(_addr, investment[uid].investmentAmount, interest.add(investment[uid].interestEarned), investment[uid].referralBonus, amountToSend);\n', '        \n', '        // update user balance details\n', '        investment[uid].investmentAmount = 0;\n', '        investment[uid].interestEarned = 0;\n', '        investment[uid].investmentDate = 0;\n', '        investment[uid].referralBonus = 0;\n', '        investment[uid].expiryDate = 0;\n', '        investment[uid].isExpired = false;\n', '        \n', '        // transfer fund to user wallet\n', '        payable(address(_addr)).transfer(amountToSend);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // function to get user balance ddetails\n', '    function getUserInformation(address _walletAddress) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool){\n', '        require(msg.sender == _walletAddress || msg.sender == owner(),"User can only check own balance");\n', '        \n', '        uint256 investmentAmount;\n', '        uint256 interestEarned;\n', '        uint256 referralBonus;\n', '        uint256 investmentDate;\n', '        uint256 expiryDate;\n', '        bool isExpired;\n', '        uint day;\n', '        \n', '        address _addr = _walletAddress;\n', '        \n', '        uint256 uid = UID[_addr];\n', '        \n', '        investmentAmount = investment[uid].investmentAmount;\n', '        \n', '        // calculate days invested\n', '        if (investment[uid].isExpired != true){\n', '            day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '        }\n', '        \n', '        if (investment[uid].isExpired == true){\n', '            day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\n', '        }\n', '        \n', '        // calculate interest earned\n', '        interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\n', '        referralBonus = investment[uid].referralBonus;\n', '        investmentDate = investment[uid].investmentDate;\n', '        expiryDate = investment[uid].expiryDate;\n', '        isExpired = investment[uid].isExpired;\n', '        \n', '        return (uid, investmentAmount, interestEarned, referralBonus, investmentDate, expiryDate, isExpired);\n', '    }\n', '    \n', '    // function to get contract holding details\n', '    function getContractInformation() public view returns(uint256, uint256, uint256, uint256, uint256, uint256){\n', '        uint256 contractBalance;\n', '        contractBalance = address(this).balance;\n', '        \n', '        return (contractBalance, totalInvestment, totalWithdrawal, totalInterestPaid, totalReferralBonusPaid, latestUserCode - START_USERCODE);\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']