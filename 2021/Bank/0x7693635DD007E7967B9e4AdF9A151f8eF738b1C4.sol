['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/lender/operator.sol\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity >=0.5.15 >=0.6.12;\n', '\n', '////// lib/tinlake-auth/src/auth.sol\n', '// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n', '/* pragma solidity >=0.5.15; */\n', '\n', 'contract Auth {\n', '    mapping (address => uint256) public wards;\n', '    \n', '    event Rely(address indexed usr);\n', '    event Deny(address indexed usr);\n', '\n', '    function rely(address usr) external auth {\n', '        wards[usr] = 1;\n', '        emit Rely(usr);\n', '    }\n', '    function deny(address usr) external auth {\n', '        wards[usr] = 0;\n', '        emit Deny(usr);\n', '    }\n', '\n', '    modifier auth {\n', '        require(wards[msg.sender] == 1, "not-authorized");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '////// src/lender/operator.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', '/* import "tinlake-auth/auth.sol"; */\n', '\n', 'interface TrancheLike_4 {\n', '    function supplyOrder(address usr, uint currencyAmount) external;\n', '    function redeemOrder(address usr, uint tokenAmount) external;\n', '    function disburse(address usr) external returns (uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken);\n', '    function disburse(address usr, uint endEpoch) external returns (uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken);\n', '    function currency() external view returns (address);\n', '}\n', '\n', 'interface RestrictedTokenLike {\n', '    function hasMember(address) external view returns (bool);\n', '}\n', '\n', 'interface EIP2612PermitLike {\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'interface DaiPermitLike {\n', '    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'contract Operator is Auth {\n', '    TrancheLike_4 public tranche;\n', '    RestrictedTokenLike public token;\n', '\n', '    // Events\n', '    event SupplyOrder(uint indexed amount);\n', '    event RedeemOrder(uint indexed amount);\n', '    event Depend(bytes32 indexed contractName, address addr);\n', '\n', '    constructor(address tranche_) {\n', '        tranche = TrancheLike_4(tranche_);\n', '        wards[msg.sender] = 1;\n', '        emit Rely(msg.sender);\n', '    }\n', '\n', '    // sets the dependency to another contract\n', '    function depend(bytes32 contractName, address addr) public auth {\n', '        if (contractName == "tranche") { tranche = TrancheLike_4(addr); }\n', '        else if (contractName == "token") { token = RestrictedTokenLike(addr); }\n', '        else revert();\n', '        emit Depend(contractName, addr);\n', '    }\n', '\n', '    // only investors that are on the memberlist can submit supplyOrders\n', '    function supplyOrder(uint amount) public {\n', '        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");\n', '        tranche.supplyOrder(msg.sender, amount);\n', '        emit SupplyOrder(amount);\n', '    }\n', '\n', '    // only investors that are on the memberlist can submit redeemOrders\n', '    function redeemOrder(uint amount) public {\n', '        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");\n', '        tranche.redeemOrder(msg.sender, amount);\n', '        emit RedeemOrder(amount);\n', '    }\n', '\n', '    // only investors that are on the memberlist can disburse\n', '    function disburse() external\n', '        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)\n', '    {\n', '        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");\n', '        return tranche.disburse(msg.sender);\n', '    }\n', '\n', '    function disburse(uint endEpoch) external\n', '        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)\n', '    {\n', '        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");\n', '        return tranche.disburse(msg.sender, endEpoch);\n', '    }\n', '\n', '    // --- Permit Support ---\n', '    function supplyOrderWithDaiPermit(uint amount, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n', '        DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s);\n', '        supplyOrder(amount);\n', '    }\n', '    function supplyOrderWithPermit(uint amount, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        EIP2612PermitLike(tranche.currency()).permit(msg.sender, address(tranche), value, deadline, v, r, s);\n', '        supplyOrder(amount);\n', '    }\n', '    function redeemOrderWithPermit(uint amount, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        EIP2612PermitLike(address(token)).permit(msg.sender, address(tranche), value, deadline, v, r, s);\n', '        redeemOrder(amount);\n', '    }\n', '}']