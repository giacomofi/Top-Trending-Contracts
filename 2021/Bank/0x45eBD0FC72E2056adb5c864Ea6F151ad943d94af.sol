['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', "import '@openzeppelin/contracts/access/Ownable.sol';\n", "import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n", "import '@openzeppelin/contracts/utils/EnumerableSet.sol';\n", "import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n", '\n', 'import "./interface/IERC20Extended.sol";\n', 'import "./interface/IPremiaOption.sol";\n', 'import "./interface/IFeeCalculator.sol";\n', 'import "./interface/IPremiaReferral.sol";\n', 'import "./interface/IPremiaUncutErc20.sol";\n', '\n', '/// @author Premia\n', '/// @title An option market contract\n', 'contract PremiaMarket is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    // The uPremia token\n', '    IPremiaUncutErc20 public uPremia;\n', '    // FeeCalculator contract\n', '    IFeeCalculator public feeCalculator;\n', '    // PremiaReferral contract\n', '    IPremiaReferral public premiaReferral;\n', '\n', '    // List of whitelisted option contracts for which users can create orders\n', '    EnumerableSet.AddressSet private _whitelistedOptionContracts;\n', '    // List of whitelisted payment tokens that users can use to buy / sell options\n', '    EnumerableSet.AddressSet private _whitelistedPaymentTokens;\n', '\n', '    mapping(address => uint8) public paymentTokenDecimals;\n', '\n', '    // Recipient of protocol fees\n', '    address public feeRecipient;\n', '\n', '    enum SaleSide {Buy, Sell}\n', '\n', '    uint256 private constant _inverseBasisPoint = 1e4;\n', '\n', '    // Salt to prevent duplicate hash\n', '    uint256 salt = 0;\n', '\n', '    // An order on the exchange\n', '    struct Order {\n', '        address maker;              // Order maker address\n', '        SaleSide side;              // Side (buy/sell)\n', '        bool isDelayedWriting;      // If true, option has not been written yet\n', '        address optionContract;     // Address of optionContract from which option is from\n', '        uint256 optionId;           // OptionId\n', '        address paymentToken;       // Address of token used for payment\n', '        uint256 pricePerUnit;       // Price per unit (in paymentToken) with 18 decimals\n', '        uint256 expirationTime;     // Expiration timestamp of option (Which is also expiration of order)\n', '        uint256 salt;               // To ensure unique hash\n', '        uint8 decimals;             // Option token decimals\n', '    }\n', '\n', '    struct Option {\n', '        address token;              // Token address\n', '        uint256 expiration;         // Expiration timestamp of the option (Must follow expirationIncrement)\n', '        uint256 strikePrice;        // Strike price (Must follow strikePriceIncrement of token)\n', '        bool isCall;                // If true : Call option | If false : Put option\n', '    }\n', '\n', '    // OrderId -> Amount of options left to purchase/sell\n', '    mapping(bytes32 => uint256) public amounts;\n', '\n', '    // Mapping of balances of uPremia to claim for each address\n', '    mapping(address => uint256) public uPremiaBalance;\n', '\n', '    // Whether delayed option writing is enabled or not\n', '    // This allow users to create a sell order for an option, without writing it, and delay the writing at the moment the order is filled\n', '    bool public isDelayedWritingEnabled = true;\n', '\n', '    ////////////\n', '    // Events //\n', '    ////////////\n', '\n', '    event OrderCreated(\n', '        bytes32 indexed hash,\n', '        address indexed maker,\n', '        address indexed optionContract,\n', '        SaleSide side,\n', '        bool isDelayedWriting,\n', '        uint256 optionId,\n', '        address paymentToken,\n', '        uint256 pricePerUnit,\n', '        uint256 expirationTime,\n', '        uint256 salt,\n', '        uint256 amount,\n', '        uint8 decimals\n', '    );\n', '\n', '    event OrderFilled(\n', '        bytes32 indexed hash,\n', '        address indexed taker,\n', '        address indexed optionContract,\n', '        address maker,\n', '        address paymentToken,\n', '        uint256 amount,\n', '        uint256 pricePerUnit\n', '    );\n', '\n', '    event OrderCancelled(\n', '        bytes32 indexed hash,\n', '        address indexed maker,\n', '        address indexed optionContract,\n', '        address paymentToken,\n', '        uint256 amount,\n', '        uint256 pricePerUnit\n', '    );\n', '\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '\n', '    /// @param _uPremia The uPremia token\n', '    /// @param _feeCalculator FeeCalculator contract\n', '    /// @param _feeRecipient Address receiving protocol fees (PremiaMaker)\n', '    constructor(IPremiaUncutErc20 _uPremia, IFeeCalculator _feeCalculator, address _feeRecipient, IPremiaReferral _premiaReferral) {\n', '        require(_feeRecipient != address(0), "FeeRecipient cannot be 0x0 address");\n', '        feeRecipient = _feeRecipient;\n', '        uPremia = _uPremia;\n', '        feeCalculator = _feeCalculator;\n', '        premiaReferral = _premiaReferral;\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '\n', '    ///////////\n', '    // Admin //\n', '    ///////////\n', '\n', '    /// @notice Change the protocol fee recipient\n', '    /// @param _feeRecipient New protocol fee recipient address\n', '    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n', '        require(_feeRecipient != address(0), "FeeRecipient cannot be 0x0 address");\n', '        feeRecipient = _feeRecipient;\n', '    }\n', '\n', '    /// @notice Set new PremiaUncut token address\n', '    /// @param _uPremia New uPremia contract\n', '    function setPremiaUncutErc20(IPremiaUncutErc20 _uPremia) external onlyOwner {\n', '        uPremia = _uPremia;\n', '    }\n', '\n', '    /// @notice Set new FeeCalculator contract\n', '    /// @param _feeCalculator New FeeCalculator contract\n', '    function setFeeCalculator(IFeeCalculator _feeCalculator) external onlyOwner {\n', '        feeCalculator = _feeCalculator;\n', '    }\n', '\n', '\n', '    /// @notice Add contract addresses to the list of whitelisted option contracts\n', '    /// @param _addr The list of addresses to add\n', '    function addWhitelistedOptionContracts(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            _whitelistedOptionContracts.add(_addr[i]);\n', '        }\n', '    }\n', '\n', '    /// @notice Remove contract addresses from the list of whitelisted option contracts\n', '    /// @param _addr The list of addresses to remove\n', '    function removeWhitelistedOptionContracts(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            _whitelistedOptionContracts.remove(_addr[i]);\n', '        }\n', '    }\n', '\n', '    /// @notice Add token addresses to the list of whitelisted payment tokens\n', '    /// @param _addr The list of addresses to add\n', '    function addWhitelistedPaymentTokens(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            uint8 decimals = IERC20Extended(_addr[i]).decimals();\n', '            require(decimals <= 18, "Too many decimals");\n', '            _whitelistedPaymentTokens.add(_addr[i]);\n', '            paymentTokenDecimals[_addr[i]] = decimals;\n', '        }\n', '    }\n', '    /// @notice Remove contract addresses from the list of whitelisted payment tokens\n', '    /// @param _addr The list of addresses to remove\n', '    function removeWhitelistedPaymentTokens(address[] memory _addr) external onlyOwner {\n', '        for (uint256 i=0; i < _addr.length; i++) {\n', '            _whitelistedPaymentTokens.remove(_addr[i]);\n', '        }\n', '    }\n', '\n', '    /// @notice Enable or disable delayed option writing which allow users to create option sell order without writing the option before the order is filled\n', '    /// @param _state New state (true = enabled / false = disabled)\n', '    function setDelayedWritingEnabled(bool _state) external onlyOwner {\n', '        isDelayedWritingEnabled = _state;\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '\n', '    //////////\n', '    // View //\n', '    //////////\n', '\n', '    /// @notice Get the amounts left to buy/sell for an order\n', '    /// @param _orderIds A list of order hashes\n', '    /// @return List of amounts left for each order\n', '    function getAmountsBatch(bytes32[] memory _orderIds) external view returns(uint256[] memory) {\n', '        uint256[] memory result = new uint256[](_orderIds.length);\n', '\n', '        for (uint256 i=0; i < _orderIds.length; i++) {\n', '            result[i] = amounts[_orderIds[i]];\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Get order hashes for a list of orders\n', '    /// @param _orders A list of orders\n', '    /// @return List of orders hashes\n', '    function getOrderHashBatch(Order[] memory _orders) external pure returns(bytes32[] memory) {\n', '        bytes32[] memory result = new bytes32[](_orders.length);\n', '\n', '        for (uint256 i=0; i < _orders.length; i++) {\n', '            result[i] = getOrderHash(_orders[i]);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Get the hash of an order\n', '    /// @param _order The order from which to calculate the hash\n', '    /// @return The order hash\n', '    function getOrderHash(Order memory _order) public pure returns(bytes32) {\n', '        return keccak256(abi.encode(_order));\n', '    }\n', '\n', '    /// @notice Get the list of whitelisted option contracts\n', '    /// @return The list of whitelisted option contracts\n', '    function getWhitelistedOptionContracts() external view returns(address[] memory) {\n', '        uint256 length = _whitelistedOptionContracts.length();\n', '        address[] memory result = new address[](length);\n', '\n', '        for (uint256 i=0; i < length; i++) {\n', '            result[i] = _whitelistedOptionContracts.at(i);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Get the list of whitelisted payment tokens\n', '    /// @return The list of whitelisted payment tokens\n', '    function getWhitelistedPaymentTokens() external view returns(address[] memory) {\n', '        uint256 length = _whitelistedPaymentTokens.length();\n', '        address[] memory result = new address[](length);\n', '\n', '        for (uint256 i=0; i < length; i++) {\n', '            result[i] = _whitelistedPaymentTokens.at(i);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Check the validity of an order (Make sure order make has sufficient balance + allowance for required tokens)\n', '    /// @param _order The order from which to check the validity\n', '    /// @return Whether the order is valid or not\n', '    function isOrderValid(Order memory _order) public view returns(bool) {\n', '        bytes32 hash = getOrderHash(_order);\n', '        uint256 amountLeft = amounts[hash];\n', '\n', '        if (amountLeft == 0) return false;\n', '\n', '        // Expired\n', '        if (_order.expirationTime == 0 || block.timestamp > _order.expirationTime) return false;\n', '\n', '        IERC20 token = IERC20(_order.paymentToken);\n', '\n', '        if (_order.side == SaleSide.Buy) {\n', '            uint8 decimals = _order.decimals;\n', '            uint256 basePrice = _order.pricePerUnit.mul(amountLeft).div(10**decimals);\n', '            uint256 makerFee = feeCalculator.getFee(_order.maker, false, IFeeCalculator.FeeType.Maker);\n', '            uint256 orderMakerFee = basePrice.mul(makerFee).div(_inverseBasisPoint);\n', '            uint256 totalPrice = basePrice.add(orderMakerFee);\n', '\n', '            uint256 userBalance = token.balanceOf(_order.maker);\n', '            uint256 allowance = token.allowance(_order.maker, address(this));\n', '\n', '            return userBalance >= totalPrice && allowance >= totalPrice;\n', '        } else if (_order.side == SaleSide.Sell) {\n', '            IPremiaOption premiaOption = IPremiaOption(_order.optionContract);\n', '            bool isApproved = premiaOption.isApprovedForAll(_order.maker, address(this));\n', '\n', '            if (_order.isDelayedWriting) {\n', '                IPremiaOption.OptionData memory data = premiaOption.optionData(_order.optionId);\n', '                IPremiaOption.OptionWriteArgs memory writeArgs = IPremiaOption.OptionWriteArgs({\n', '                    token: data.token,\n', '                    amount: amountLeft,\n', '                    strikePrice: data.strikePrice,\n', '                    expiration: data.expiration,\n', '                    isCall: data.isCall\n', '                });\n', '\n', '                IPremiaOption.QuoteWrite memory quote = premiaOption.getWriteQuote(_order.maker, writeArgs, address(0), _order.decimals);\n', '\n', '                uint256 userBalance = IERC20(quote.collateralToken).balanceOf(_order.maker);\n', '                uint256 allowance = IERC20(quote.collateralToken).allowance(_order.maker, _order.optionContract);\n', '                uint256 totalPrice = quote.collateral.add(quote.fee).add(quote.feeReferrer);\n', '\n', '                return isApproved && userBalance >= totalPrice && allowance >= totalPrice;\n', '\n', '            } else {\n', '                uint256 optionBalance = premiaOption.balanceOf(_order.maker, _order.optionId);\n', '                return isApproved && optionBalance >= amountLeft;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /// @notice Check the validity of a list of orders (Make sure order make has sufficient balance + allowance for required tokens)\n', '    /// @param _orders The orders from which to check the validity\n', '    /// @return Whether the orders are valid or not\n', '    function areOrdersValid(Order[] memory _orders) external view returns(bool[] memory) {\n', '        bool[] memory result = new bool[](_orders.length);\n', '\n', '        for (uint256 i=0; i < _orders.length; i++) {\n', '            result[i] = isOrderValid(_orders[i]);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    //////////////////////////////////////////////////\n', '\n', '    //////////\n', '    // Main //\n', '    //////////\n', '\n', '    /// @notice Claim pending uPremia rewards\n', '    function claimUPremia() external {\n', '        uint256 amount = uPremiaBalance[msg.sender];\n', '        uPremiaBalance[msg.sender] = 0;\n', '        IERC20(address(uPremia)).safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '    /// @notice Create a new order\n', '    /// @dev Maker, salt and expirationTime will be overridden by this function\n', '    /// @param _order Order to create\n', '    /// @param _amount Amount of options to buy / sell\n', '    /// @return The hash of the order\n', '    function createOrder(Order memory _order, uint256 _amount) public returns(bytes32) {\n', '        require(_whitelistedOptionContracts.contains(_order.optionContract), "Option contract not whitelisted");\n', '        require(_whitelistedPaymentTokens.contains(_order.paymentToken), "Payment token not whitelisted");\n', '\n', '        IPremiaOption.OptionData memory data = IPremiaOption(_order.optionContract).optionData(_order.optionId);\n', '        require(data.strikePrice > 0, "Option not found");\n', '        require(block.timestamp < data.expiration, "Option expired");\n', '\n', '        _order.maker = msg.sender;\n', '        _order.expirationTime = data.expiration;\n', '        _order.decimals = data.decimals;\n', '        _order.salt = salt;\n', '\n', '        require(_order.decimals <= 18, "Too many decimals");\n', '\n', '        if (_order.isDelayedWriting) {\n', '            require(isDelayedWritingEnabled, "Delayed writing disabled");\n', '        }\n', '\n', '        // If this is a buy order, isDelayedWriting is always false\n', '        if (_order.side == SaleSide.Buy) {\n', '            _order.isDelayedWriting = false;\n', '        }\n', '\n', '        salt = salt.add(1);\n', '\n', '        bytes32 hash = getOrderHash(_order);\n', '        amounts[hash] = _amount;\n', '        uint8 decimals = _order.decimals;\n', '\n', '        emit OrderCreated(\n', '            hash,\n', '            _order.maker,\n', '            _order.optionContract,\n', '            _order.side,\n', '            _order.isDelayedWriting,\n', '            _order.optionId,\n', '            _order.paymentToken,\n', '            _order.pricePerUnit,\n', '            _order.expirationTime,\n', '            _order.salt,\n', '            _amount,\n', '            decimals\n', '        );\n', '\n', '        return hash;\n', '    }\n', '\n', '    /// @notice Create an order for an option which has never been minted before (Will create a new optionId for this option)\n', '    /// @param _order Order to create\n', '    /// @param _amount Amount of options to buy / sell\n', '    /// @param _option Option to create\n', '    /// @return The hash of the order\n', '    /// @param _referrer Referrer\n', '    function createOrderForNewOption(Order memory _order, uint256 _amount, Option memory _option, address _referrer) external returns(bytes32) {\n', '        // If this is a delayed writing on a sell order, we need to set referrer now, so that it is used when writing is done\n', '        if (address(premiaReferral) != address(0) && _order.isDelayedWriting && _order.side == SaleSide.Sell) {\n', '            _referrer = premiaReferral.trySetReferrer(msg.sender, _referrer);\n', '        }\n', '\n', '        _order.optionId = IPremiaOption(_order.optionContract).getOptionIdOrCreate(_option.token, _option.expiration, _option.strikePrice, _option.isCall);\n', '        return createOrder(_order, _amount);\n', '    }\n', '\n', '    /// @notice Create a list of orders\n', '    /// @param _orders Orders to create\n', '    /// @param _amounts Amounts of options to buy / sell for each order\n', '    /// @return The hashes of the orders\n', '    function createOrders(Order[] memory _orders, uint256[] memory _amounts) external returns(bytes32[] memory) {\n', '        require(_orders.length == _amounts.length, "Arrays must have same length");\n', '\n', '        bytes32[] memory result = new bytes32[](_orders.length);\n', '\n', '        for (uint256 i=0; i < _orders.length; i++) {\n', '            result[i] = createOrder(_orders[i], _amounts[i]);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice Try to fill orders passed as candidates, and create order for remaining unfilled amount\n', '    /// @param _order Order to create\n', '    /// @param _amount Amount of options to buy / sell\n', '    /// @param _orderCandidates Accepted orders to be filled\n', '    /// @param _writeOnBuyFill Write option prior to filling order when a buy order is passed\n', '    /// @param _referrer Referrer\n', '    function createOrderAndTryToFill(Order memory _order, uint256 _amount, Order[] memory _orderCandidates, bool _writeOnBuyFill, address _referrer) external {\n', '        require(_amount > 0, "Amount must be > 0");\n', '\n', '        // Ensure candidate orders are valid\n', '        for (uint256 i=0; i < _orderCandidates.length; i++) {\n', '            require(_orderCandidates[i].side != _order.side, "Candidate order : Same order side");\n', '            require(_orderCandidates[i].optionContract == _order.optionContract, "Candidate order : Diff option contract");\n', '            require(_orderCandidates[i].optionId == _order.optionId, "Candidate order : Diff optionId");\n', '        }\n', '\n', '        uint256 totalFilled;\n', '        if (_orderCandidates.length == 1) {\n', '            totalFilled = fillOrder(_orderCandidates[0], _amount, _writeOnBuyFill, _referrer);\n', '        } else if (_orderCandidates.length > 1) {\n', '            totalFilled = fillOrders(_orderCandidates, _amount, _writeOnBuyFill, _referrer);\n', '        }\n', '\n', '        if (totalFilled < _amount) {\n', '            createOrder(_order, _amount.sub(totalFilled));\n', '        }\n', '    }\n', '\n', '    /// @notice Write an option and create a sell order\n', '    /// @dev OptionId will be filled automatically on the order object. Amount is defined in the option object.\n', '    ///      Approval on option contract is required\n', '    /// @param _order Order to create\n', '    /// @param _referrer Referrer\n', '    /// @return The hash of the order\n', '    function writeAndCreateOrder(IPremiaOption.OptionWriteArgs memory _option, Order memory _order, address _referrer) public returns(bytes32) {\n', '        require(_order.side == SaleSide.Sell, "Not a sell order");\n', '\n', '        // This cannot be a delayed writing as we are writing the option now\n', '        _order.isDelayedWriting = false;\n', '\n', '        IPremiaOption optionContract = IPremiaOption(_order.optionContract);\n', '        _order.optionId = optionContract.writeOptionFrom(msg.sender, _option, _referrer);\n', '\n', '        return createOrder(_order, _option.amount);\n', '    }\n', '\n', '    /// @notice Fill an existing order\n', '    /// @param _order The order to fill\n', '    /// @param _amount Max amount of options to buy or sell\n', '    /// @param _writeOnBuyFill Write option prior to filling order when a buy order is passed\n', '    /// @param _referrer Referrer\n', '    /// @return Amount of options bought or sold\n', '    function fillOrder(Order memory _order, uint256 _amount, bool _writeOnBuyFill, address _referrer) public nonReentrant returns(uint256) {\n', '        bytes32 hash = getOrderHash(_order);\n', '\n', '        require(_order.expirationTime != 0 && block.timestamp < _order.expirationTime, "Order expired");\n', '        require(amounts[hash] > 0, "Order not found");\n', '        require(_amount > 0, "Amount must be > 0");\n', '\n', '        if (amounts[hash] < _amount) {\n', '            _amount = amounts[hash];\n', '        }\n', '\n', '        amounts[hash] = amounts[hash].sub(_amount);\n', '\n', '        // If option has delayed minting on fill, we first need to mint it on behalf of order maker\n', '        if (_order.side == SaleSide.Sell && _order.isDelayedWriting) {\n', '            // We do not pass a referrer, cause referrer used is the one of the order maker\n', '            IPremiaOption(_order.optionContract).writeOptionWithIdFrom(_order.maker, _order.optionId, _amount, address(0));\n', '        } else if (_order.side == SaleSide.Buy && _writeOnBuyFill) {\n', '            IPremiaOption(_order.optionContract).writeOptionWithIdFrom(msg.sender, _order.optionId, _amount, _referrer);\n', '        }\n', '\n', '        uint256 basePrice = _order.pricePerUnit.mul(_amount).div(10**_order.decimals);\n', '\n', '        (uint256 orderMakerFee,) = feeCalculator.getFeeAmounts(_order.maker, false, basePrice, IFeeCalculator.FeeType.Maker);\n', '        (uint256 orderTakerFee,) = feeCalculator.getFeeAmounts(msg.sender, false, basePrice, IFeeCalculator.FeeType.Taker);\n', '\n', '        if (_order.side == SaleSide.Buy) {\n', '            IPremiaOption(_order.optionContract).safeTransferFrom(msg.sender, _order.maker, _order.optionId, _amount, "");\n', '\n', '            IERC20(_order.paymentToken).safeTransferFrom(_order.maker, feeRecipient, orderMakerFee.add(orderTakerFee));\n', '            IERC20(_order.paymentToken).safeTransferFrom(_order.maker, msg.sender, basePrice.sub(orderTakerFee));\n', '\n', '        } else {\n', '            IERC20(_order.paymentToken).safeTransferFrom(msg.sender, feeRecipient, orderMakerFee.add(orderTakerFee));\n', '            IERC20(_order.paymentToken).safeTransferFrom(msg.sender, _order.maker, basePrice.sub(orderMakerFee));\n', '\n', '            IPremiaOption(_order.optionContract).safeTransferFrom(_order.maker, msg.sender, _order.optionId, _amount, "");\n', '        }\n', '\n', '        // Mint uPremia\n', '        if (address(uPremia) != address(0)) {\n', '            uint256 paymentTokenPrice = uPremia.getTokenPrice(_order.paymentToken);\n', '\n', '            uPremiaBalance[_order.maker] = uPremiaBalance[_order.maker].add(orderMakerFee.mul(paymentTokenPrice).div(10**paymentTokenDecimals[_order.paymentToken]));\n', '            uPremiaBalance[msg.sender] = uPremiaBalance[msg.sender].add(orderTakerFee.mul(paymentTokenPrice).div(10**paymentTokenDecimals[_order.paymentToken]));\n', '\n', '            uPremia.mint(address(this), orderMakerFee.add(orderTakerFee).mul(paymentTokenPrice).div(10**paymentTokenDecimals[_order.paymentToken]));\n', '        }\n', '\n', '        emit OrderFilled(\n', '            hash,\n', '            msg.sender,\n', '            _order.optionContract,\n', '            _order.maker,\n', '            _order.paymentToken,\n', '            _amount,\n', '            _order.pricePerUnit\n', '        );\n', '\n', '        return _amount;\n', '    }\n', '\n', '\n', '    /// @notice Fill a list of existing orders\n', '    /// @dev All orders passed must :\n', '    ///         - Use same payment token\n', '    ///         - Be on the same order side\n', '    ///         - Be for the same option contract and optionId\n', '    /// @param _orders The list of orders to fill\n', '    /// @param _maxAmount Max amount of options to buy or sell\n', '    /// @param _writeOnBuyFill Write option prior to filling order when a buy order is passed\n', '    /// @param _referrer Referrer\n', '    /// @return Amount of options bought or sold\n', '    function fillOrders(Order[] memory _orders, uint256 _maxAmount, bool _writeOnBuyFill, address _referrer) public nonReentrant returns(uint256) {\n', '        if (_maxAmount == 0) return 0;\n', '\n', '        uint256 takerFee = feeCalculator.getFee(msg.sender, false, IFeeCalculator.FeeType.Taker);\n', '\n', '        // We make sure all orders are same side / payment token / option contract / option id\n', '        if (_orders.length > 1) {\n', '            for (uint256 i=0; i < _orders.length; i++) {\n', '                require(i == 0 || _orders[0].paymentToken == _orders[i].paymentToken, "Different payment tokens");\n', '                require(i == 0 || _orders[0].side == _orders[i].side, "Different order side");\n', '                require(i == 0 || _orders[0].optionContract == _orders[i].optionContract, "Different option contract");\n', '                require(i == 0 || _orders[0].optionId == _orders[i].optionId, "Different option id");\n', '            }\n', '        }\n', '\n', '        uint256 paymentTokenPrice;\n', '        if (address(uPremia) != address(0)) {\n', '            uPremia.getTokenPrice(_orders[0].paymentToken);\n', '        }\n', '\n', '        uint256 totalFee;\n', '        uint256 totalAmount;\n', '        uint256 amountFilled;\n', '\n', '        for (uint256 i=0; i < _orders.length; i++) {\n', '            if (amountFilled >= _maxAmount) break;\n', '\n', '            Order memory _order = _orders[i];\n', '            bytes32 hash = getOrderHash(_order);\n', '\n', '            // If nothing left to fill, continue\n', '            if (amounts[hash] == 0) continue;\n', '            // If expired, continue\n', '            if (block.timestamp >= _order.expirationTime) continue;\n', '\n', '            uint256 amount = amounts[hash];\n', '            if (amountFilled.add(amount) > _maxAmount) {\n', '                amount = _maxAmount.sub(amountFilled);\n', '            }\n', '\n', '            amounts[hash] = amounts[hash].sub(amount);\n', '            amountFilled = amountFilled.add(amount);\n', '\n', '            // If option has delayed minting on fill, we first need to mint it on behalf of order maker\n', '            if (_order.side == SaleSide.Sell && _order.isDelayedWriting) {\n', '                // We do not pass a referrer, cause referrer used is the one of the order maker\n', '                IPremiaOption(_order.optionContract).writeOptionWithIdFrom(_order.maker, _order.optionId, amount, address(0));\n', '            } else if (_order.side == SaleSide.Buy && _writeOnBuyFill) {\n', '                IPremiaOption(_order.optionContract).writeOptionWithIdFrom(msg.sender, _order.optionId, amount, _referrer);\n', '            }\n', '\n', '            uint256 basePrice = _order.pricePerUnit.mul(amount).div(10**_order.decimals);\n', '\n', '            (uint256 orderMakerFee,) = feeCalculator.getFeeAmounts(_order.maker, false, basePrice, IFeeCalculator.FeeType.Maker);\n', '            uint256 orderTakerFee = basePrice.mul(takerFee).div(_inverseBasisPoint);\n', '\n', '            totalFee = totalFee.add(orderMakerFee).add(orderTakerFee);\n', '\n', '            if (_order.side == SaleSide.Buy) {\n', '                IPremiaOption(_order.optionContract).safeTransferFrom(msg.sender, _order.maker, _order.optionId, amount, "");\n', '\n', '                // We transfer all to the contract, contract will pays fees, and send remainder to msg.sender\n', '                IERC20(_order.paymentToken).safeTransferFrom(_order.maker, address(this), basePrice.add(orderMakerFee));\n', '                totalAmount = totalAmount.add(basePrice.add(orderMakerFee));\n', '\n', '            } else {\n', '                // We pay order maker, fees will be all paid at once later\n', '                IERC20(_order.paymentToken).safeTransferFrom(msg.sender, _order.maker, basePrice.sub(orderMakerFee));\n', '                IPremiaOption(_order.optionContract).safeTransferFrom(_order.maker, msg.sender, _order.optionId, amount, "");\n', '            }\n', '\n', '            // Add uPremia reward to users balance\n', '            if (address(uPremia) != address(0)) {\n', '                uPremiaBalance[_order.maker] = uPremiaBalance[_order.maker].add(orderMakerFee.mul(paymentTokenPrice).div(10**paymentTokenDecimals[_order.paymentToken]));\n', '                uPremiaBalance[msg.sender] = uPremiaBalance[msg.sender].add(orderTakerFee.mul(paymentTokenPrice).div(10**paymentTokenDecimals[_order.paymentToken]));\n', '            }\n', '\n', '            emit OrderFilled(\n', '                hash,\n', '                msg.sender,\n', '                _order.optionContract,\n', '                _order.maker,\n', '                _order.paymentToken,\n', '                amount,\n', '                _order.pricePerUnit\n', '            );\n', '        }\n', '\n', '        if (_orders[0].side == SaleSide.Buy) {\n', '            // Batch payment of fees\n', '            IERC20(_orders[0].paymentToken).safeTransfer(feeRecipient, totalFee);\n', '            // Send remainder of tokens after fee payment, to msg.sender\n', '            IERC20(_orders[0].paymentToken).safeTransfer(msg.sender, totalAmount.sub(totalFee));\n', '        } else {\n', '            // Batch payment of fees\n', '            IERC20(_orders[0].paymentToken).safeTransferFrom(msg.sender, feeRecipient, totalFee);\n', '        }\n', '\n', '        // Mint uPremia\n', '        if (address(uPremia) != address(0)) {\n', '            uPremia.mint(address(this), totalFee.mul(paymentTokenPrice).div(10**paymentTokenDecimals[_orders[0].paymentToken]));\n', '        }\n', '\n', '        return amountFilled;\n', '    }\n', '\n', '    /// @notice Cancel an existing order\n', '    /// @param _order The order to cancel\n', '    function cancelOrder(Order memory _order) public {\n', '        bytes32 hash = getOrderHash(_order);\n', '        uint256 amountLeft = amounts[hash];\n', '\n', '        require(amountLeft > 0, "Order not found");\n', '        require(_order.maker == msg.sender, "Not order maker");\n', '        delete amounts[hash];\n', '\n', '        emit OrderCancelled(\n', '            hash,\n', '            _order.maker,\n', '            _order.optionContract,\n', '            _order.paymentToken,\n', '            amountLeft,\n', '            _order.pricePerUnit\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel a list of existing orders\n', '    /// @param _orders The list of orders to cancel\n', '    function cancelOrders(Order[] memory _orders) external {\n', '        for (uint256 i=0; i < _orders.length; i++) {\n', '            cancelOrder(_orders[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', 'import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', "import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n", "import '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n", '\n', 'interface IERC20Extended is IERC20 {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', "import '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\n", 'import "../interface/IFlashLoanReceiver.sol";\n', 'import "../uniswapV2/interfaces/IUniswapV2Router02.sol";\n', '\n', 'interface IPremiaOption is IERC1155 {\n', '    struct OptionWriteArgs {\n', '        address token;                  // Token address\n', '        uint256 amount;                 // Amount of tokens to write option for\n', '        uint256 strikePrice;            // Strike price (Must follow strikePriceIncrement of token)\n', '        uint256 expiration;             // Expiration timestamp of the option (Must follow expirationIncrement)\n', '        bool isCall;                    // If true : Call option | If false : Put option\n', '    }\n', '\n', '    struct OptionData {\n', '        address token;                  // Token address\n', '        uint256 strikePrice;            // Strike price (Must follow strikePriceIncrement of token)\n', '        uint256 expiration;             // Expiration timestamp of the option (Must follow expirationIncrement)\n', '        bool isCall;                    // If true : Call option | If false : Put option\n', '        uint256 claimsPreExp;           // Amount of options from which the funds have been withdrawn pre expiration\n', '        uint256 claimsPostExp;          // Amount of options from which the funds have been withdrawn post expiration\n', '        uint256 exercised;              // Amount of options which have been exercised\n', '        uint256 supply;                 // Total circulating supply\n', '        uint8 decimals;                 // Token decimals\n', '    }\n', '\n', '    // Total write cost = collateral + fee + feeReferrer\n', '    struct QuoteWrite {\n', '        address collateralToken;        // The token to deposit as collateral\n', '        uint256 collateral;             // The amount of collateral to deposit\n', '        uint8 collateralDecimals;       // Decimals of collateral token\n', '        uint256 fee;                    // The amount of collateralToken needed to be paid as protocol fee\n', '        uint256 feeReferrer;            // The amount of collateralToken which will be paid the referrer\n', '    }\n', '\n', '    // Total exercise cost = input + fee + feeReferrer\n', '    struct QuoteExercise {\n', '        address inputToken;             // Input token for exercise\n', '        uint256 input;                  // Amount of input token to pay to exercise\n', '        uint8 inputDecimals;            // Decimals of input token\n', '        address outputToken;            // Output token from the exercise\n', '        uint256 output;                 // Amount of output tokens which will be received on exercise\n', '        uint8 outputDecimals;           // Decimals of output token\n', '        uint256 fee;                    // The amount of inputToken needed to be paid as protocol fee\n', '        uint256 feeReferrer;            // The amount of inputToken which will be paid to the referrer\n', '    }\n', '\n', '    struct Pool {\n', '        uint256 tokenAmount;\n', '        uint256 denominatorAmount;\n', '    }\n', '\n', '    function denominatorDecimals() external view returns(uint8);\n', '\n', '    function maxExpiration() external view returns(uint256);\n', '    function optionData(uint256 _optionId) external view returns (OptionData memory);\n', '    function tokenStrikeIncrement(address _token) external view returns (uint256);\n', '    function nbWritten(address _writer, uint256 _optionId) external view returns (uint256);\n', '\n', '    function getOptionId(address _token, uint256 _expiration, uint256 _strikePrice, bool _isCall) external view returns(uint256);\n', '    function getOptionIdOrCreate(address _token, uint256 _expiration, uint256 _strikePrice, bool _isCall) external returns(uint256);\n', '\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '    //////////////////////////////////////////////////\n', '\n', '    function getWriteQuote(address _from, OptionWriteArgs memory _option, address _referrer, uint8 _decimals) external view returns(QuoteWrite memory);\n', '    function getExerciseQuote(address _from, OptionData memory _option, uint256 _amount, address _referrer, uint8 _decimals) external view returns(QuoteExercise memory);\n', '\n', '    function writeOptionWithIdFrom(address _from, uint256 _optionId, uint256 _amount, address _referrer) external returns(uint256);\n', '    function writeOption(address _token, OptionWriteArgs memory _option, address _referrer) external returns(uint256);\n', '    function writeOptionFrom(address _from, OptionWriteArgs memory _option, address _referrer) external returns(uint256);\n', '    function cancelOption(uint256 _optionId, uint256 _amount) external;\n', '    function cancelOptionFrom(address _from, uint256 _optionId, uint256 _amount) external;\n', '    function exerciseOption(uint256 _optionId, uint256 _amount) external;\n', '    function exerciseOptionFrom(address _from, uint256 _optionId, uint256 _amount, address _referrer) external;\n', '    function withdraw(uint256 _optionId) external;\n', '    function withdrawFrom(address _from, uint256 _optionId) external;\n', '    function withdrawPreExpiration(uint256 _optionId, uint256 _amount) external;\n', '    function withdrawPreExpirationFrom(address _from, uint256 _optionId, uint256 _amount) external;\n', '    function flashExerciseOption(uint256 _optionId, uint256 _amount, address _referrer, IUniswapV2Router02 _router, uint256 _amountInMax) external;\n', '    function flashExerciseOptionFrom(address _from, uint256 _optionId, uint256 _amount, address _referrer, IUniswapV2Router02 _router, uint256 _amountInMax) external;\n', '    function flashLoan(address _tokenAddress, uint256 _amount, IFlashLoanReceiver _receiver) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IFeeCalculator {\n', '    enum FeeType {Write, Exercise, Maker, Taker, FlashLoan}\n', '\n', '    function writeFee() external view returns(uint256);\n', '    function exerciseFee() external view returns(uint256);\n', '    function flashLoanFee() external view returns(uint256);\n', '\n', '    function referrerFee() external view returns(uint256);\n', '    function referredDiscount() external view returns(uint256);\n', '\n', '    function makerFee() external view returns(uint256);\n', '    function takerFee() external view returns(uint256);\n', '\n', '    function getFee(address _user, bool _hasReferrer, FeeType _feeType) external view returns(uint256);\n', '    function getFeeAmounts(address _user, bool _hasReferrer, uint256 _amount, FeeType _feeType) external view returns(uint256 _fee, uint256 _feeReferrer);\n', '    function getFeeAmountsWithDiscount(address _user, bool _hasReferrer, uint256 _baseFee) external view returns(uint256 _fee, uint256 _feeReferrer);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IPremiaReferral {\n', '    function referrals(address _referred) external view returns(address _referrer);\n', '    function trySetReferrer(address _referred, address _potentialReferrer) external returns(address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', "import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n", '\n', 'interface IPremiaUncutErc20 is IERC20 {\n', '    function getTokenPrice(address _token) external view returns(uint256);\n', '    function mint(address _account, uint256 _amount) external;\n', '    function mintReward(address _account, address _token, uint256 _feePaid, uint8 _decimals) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../../GSN/Context.sol";\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "../../introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IFlashLoanReceiver {\n', '    function execute(address _tokenAddress, uint256 _amount, uint256 _amountWithFee) external;\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}']