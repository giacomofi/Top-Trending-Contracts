['pragma solidity =0.5.16;\n', '\n', "import './IMateriaFactory.sol';\n", "import './MateriaPair.sol';\n", '\n', 'contract MateriaFactory is IMateriaFactory, MateriaOwnable {\n', '    address public feeTo;\n', '\n', '    uint256 public defaultMateriaFee;\n', '    uint256 public defaultSwapFee;\n', '\n', '    mapping(address => mapping(address => address)) public getPair;\n', '    address[] public allPairs;\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n', '\n', '    constructor(uint256 _defaultMateriaFee, uint256 _defaultSwapFee) public MateriaOwnable() {\n', '        defaultMateriaFee = _defaultMateriaFee; //Default value: 5\n', '        defaultSwapFee = _defaultSwapFee; //Default value: 3\n', '    }\n', '\n', '    function allPairsLength() external view returns (uint256) {\n', '        return allPairs.length;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB) external onlyOwner returns (address pair) {\n', "        require(tokenA != tokenB, 'Materia: identical addresses');\n", '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'Materia: zero address');\n", "        require(getPair[token0][token1] == address(0), 'Materia: pair already exists'); // single check is sufficient\n", '        bytes memory bytecode = type(MateriaPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        IMateriaPair(pair).initialize(token0, token1, defaultMateriaFee, defaultSwapFee);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '\n', '    function setFeeTo(address _feeTo) external onlyOwner {\n', '        feeTo = _feeTo;\n', '    }\n', '\n', '    function setDefaultMateriaFee(uint256 _defaultMateriaFee) external onlyOwner {\n', '        defaultMateriaFee = _defaultMateriaFee;\n', '    }\n', '\n', '    function setDefaultSwapFee(uint256 _defaultSwapFee) external onlyOwner {\n', '        defaultSwapFee = _defaultSwapFee;\n', '    }\n', '\n', '    function setFees(\n', '        address pair,\n', '        uint256 materiaFee,\n', '        uint256 swapFee\n', '    ) external onlyOwner {\n', '        IMateriaPair(pair).setSwapFee(swapFee);\n', '        IMateriaPair(pair).setMateriaFee(materiaFee);\n', '    }\n', '}']