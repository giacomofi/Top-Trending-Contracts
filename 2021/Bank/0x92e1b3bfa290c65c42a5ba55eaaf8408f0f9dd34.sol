['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Rebasable is Ownable {\n', '  address private _rebaser;\n', '\n', '  event TransferredRebasership(address indexed previousRebaser, address indexed newRebaser);\n', '\n', '  constructor() internal {\n', '    address msgSender = _msgSender();\n', '    _rebaser = msgSender;\n', '    emit TransferredRebasership(address(0), msgSender);\n', '  }\n', '\n', '  function Rebaser() public view returns(address) {\n', '    return _rebaser;\n', '  }\n', '\n', '  modifier onlyRebaser() {\n', '    require(_rebaser == _msgSender(), "caller is not rebaser");\n', '    _;\n', '  }\n', '\n', '  function transferRebasership(address newRebaser) public virtual onlyOwner {\n', '    require(newRebaser != address(0), "new rebaser is address zero");\n', '    emit TransferredRebasership(_rebaser, newRebaser);\n', '    _rebaser = newRebaser;\n', '  }\n', '}\n', '/* \n', '   SPDX-License-Identifier: MIT\n', '   Copyright 2021\n', '*/\n', '\n', '/// SWC-103:  Floating Pragma\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract SUPERBASE is Ownable, Rebasable\n', '{\n', '    using SBASESafeMath for uint256;\n', '\tusing Address for address;\n', '\t\n', '\tIUniswapV2Router02 public immutable _uniswapV2Router;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    event Rebase(uint256 indexed epoch, uint256 scalingFactor);\n', '\n', '    event WhitelistFrom(address _addr, bool _whitelisted);\n', '    event WhitelistTo(address _addr, bool _whitelisted);\n', '    event UniswapPairAddress(address _addr, bool _whitelisted);\n', '\n', '    string public name     = "SUPER BASE";\n', '    string public symbol   = "SBASE";\n', '    uint8  public decimals = 9;\n', '\n', '    address public BurnAddress = 0x000000000000000000000000000000000000dEaD;\n', '\t\n', '    address public rewardAddress;\n', '\n', '    /**\n', '     * @notice Internal decimals used to handle scaling factor\n', '     */\n', '    uint256 public constant internalDecimals = 10**9;\n', '\n', '    /**\n', '     * @notice Used for percentage maths\n', '     */\n', '    uint256 public constant BASE = 10**9;\n', '\n', '    /**\n', "     * @notice Scaling factor that adjusts everyone's balances\n", '     */\n', '    uint256 public SBASEScalingFactor  = BASE;\n', '\n', '\tmapping (address => uint256) private _rOwned;\n', '\tmapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) internal _allowedFragments;\n', '\t\n', '\tmapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\n', '    mapping(address => bool) public whitelistFrom;\n', '    mapping(address => bool) public whitelistTo;\n', '    mapping(address => bool) public uniswapPairAddress;\n', '\taddress private currentPoolAddress;\n', '\taddress private currentPairTokenAddress;\n', '\taddress public uniswapETHPool;\n', '\taddress[] public futurePools;\n', '\n', '\n', '    uint256 initSupply = 67 * 10**5 * 10**9;\n', '    uint256 _totalSupply = 67 * 10**5 * 10**9;\n', '    uint16 public SELL_FEE = 5;\n', '    uint16 public TX_FEE = 0;\n', '    uint16 public BURN_TOP = 1;\n', '\tuint16 public BURN_BOTTOM = 3;\n', '\tuint256 private _tFeeTotal;\n', '\tuint256 private constant MAX = ~uint256(0);\n', '    uint256 private _rTotal = (MAX - (MAX % _totalSupply));\n', '\tuint16 public FYFee = 20;\n', '\tuint256 public _maxTxAmount = 6700000 * 10**9;\n', '\tuint256 public _minTokensBeforeSwap = 100 * 10**9;\n', '\tuint256 public _autoSwapCallerFee = 2 * 10**9;\n', '\tuint256 public liquidityRewardRate = 2;\n', '\t\n', '\tbool private inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled;\n', '    bool public tradingEnabled;\n', '\t\n', '\tevent MaxTxAmountUpdated(uint256 maxTxAmount);\n', '\tevent TradingEnabled();\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        address indexed pairTokenAddress,\n', '        uint256 tokensSwapped,\n', '        uint256 pairTokenReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\n', '\t\n', '\tmodifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor(IUniswapV2Router02 uniswapV2Router)\n', '    public\n', '    Ownable()\n', '    Rebasable()\n', '    {\n', '\t\t_uniswapV2Router = uniswapV2Router;\n', '        \n', '        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\n', '            .createPair(address(this), uniswapV2Router.WETH());\n', '        currentPairTokenAddress = uniswapV2Router.WETH();\n', '        uniswapETHPool = currentPoolAddress;\n', '\t\trewardAddress = address(this);\n', '        \n', '        updateSwapAndLiquifyEnabled(false);\n', '        \n', '        _rOwned[_msgSender()] = reflectionFromToken(_totalSupply, false);\n', '        \n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function getSellBurn(uint256 value) public view returns (uint256)\n', '    {\n', '        uint256 nPercent = value.mul(SELL_FEE).divRound(100);\n', '        return nPercent;\n', '    }\n', '\n', '    function getTxBurn(uint256 value) public view returns (uint256)\n', '    {\n', '        uint256 nPercent = value.mul(TX_FEE).divRound(100);\n', '        return nPercent;\n', '    }\n', '\n', '    function _isWhitelisted(address _from, address _to) internal view returns (bool)\n', '    {\n', '        return whitelistFrom[_from]||whitelistTo[_to];\n', '    }\n', '\n', '    function _isUniswapPairAddress(address _addr) internal view returns (bool)\n', '    {\n', '        return uniswapPairAddress[_addr];\n', '    }\n', '\n', '    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner\n', '    {\n', '        emit WhitelistTo(_addr, _whitelisted);\n', '        whitelistTo[_addr] = _whitelisted;\n', '    }\n', '\n', '    function setTxFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee < 50, 'SBASE: Transaction fee should be less than 40%');\n", '        TX_FEE = fee;\n', '    }\n', '\t\n', '\tfunction setFYFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee > 2, 'SBASE: Frictionless yield fee should be less than 50%');\n", '        FYFee = fee;\n', '    }\n', '\n', '    function setSellFee(uint16 fee) external onlyOwner\n', '    {\n', "\t\trequire(fee < 50, 'SBASE: Sell fee should be less than 50%');\n", '        SELL_FEE = fee;\n', '    }\n', '\t\n', '    function setBurnTop(uint16 burntop) external onlyOwner\n', '    {\n', '        BURN_TOP = burntop;\n', '    }\n', '\t\n', '\tfunction setBurnBottom(uint16 burnbottom) external onlyOwner\n', '    {\n', '        BURN_BOTTOM = burnbottom;\n', '    }\n', '\t\n', '    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner\n', '    {\n', '        emit WhitelistFrom(_addr, _whitelisted);\n', '        whitelistFrom[_addr] = _whitelisted;\n', '    }\n', '\n', '    function setUniswapPairAddress(address _addr, bool _whitelisted) external onlyOwner \n', '\t{\n', '        emit UniswapPairAddress(_addr, _whitelisted);\n', '        uniswapPairAddress[_addr] = _whitelisted;\n', '    }\n', '\t\n', '\tfunction addfuturePool(address futurePool) external onlyOwner\n', '\t{\n', '\t\tIUniswapV2Pair(futurePool).sync();\n', '\t\tfuturePools.push(futurePool);\n', '\t}\n', '\n', '    function maxScalingFactor() external view returns (uint256)\n', '    {\n', '        return _maxScalingFactor();\n', '    }\n', '\n', '    function _maxScalingFactor() internal view returns (uint256)\n', '    {\n', '        // scaling factor can only go up to 2**256-1 = initSupply * SBASEScalingFactor\n', '        // this is used to check if SBASEScalingFactor will be too high to compute balances when rebasing.\n', '        return uint256(-1) / initSupply;\n', '    }\n', '\n', '   function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '\t\t_transfer(sender, recipient, amount);\n', '\t\t// decrease allowance\n', '        _approve(sender, _msgSender(), _allowedFragments[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '\tfunction balanceOf(address account) public view returns (uint256) {\n', '\t  \n', '        if (_isExcluded[account]) return _tOwned[account].mul(SBASEScalingFactor).div(internalDecimals);\n', '        uint256 tOwned = tokenFromReflection(_rOwned[account]);\n', '\t\treturn _scaling(tOwned);\n', '\t}\n', '\n', '    function balanceOfUnderlying(address account) external view returns (uint256)\n', '    {\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    \n', '    function allowance(address owner_, address spender) external view returns (uint256)\n', '    {\n', '        return _allowedFragments[owner_][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)\n', '    {\n', '        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)\n', '    {\n', '        uint256 oldValue = _allowedFragments[msg.sender][spender];\n', '        if (subtractedValue >= oldValue)\n', '        {\n', '            _allowedFragments[msg.sender][spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "SBASE: approve from the zero address");\n', '        require(spender != address(0), "SBASE: approve to the zero address");\n', '\n', '        _allowedFragments[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\t\n', '\tfunction isExcluded(address account) public view returns (bool) \n', '\t{\n', '        return _isExcluded[account];\n', '    }\n', '\t\n', '\tfunction totalFees() public view returns (uint256) \n', '\t{\n', '        return _tFeeTotal;\n', '    }\n', '\t\n', '\tfunction reflect(uint256 tAmount) public \n', '\t{\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        uint256 currentRate = _getRate();\n', '        uint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\t\n', '\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) \n', '\t{\n', '        require(tAmount <= _totalSupply, "Amount must be less than supply");\n', '        uint256 currentRate = _getRate();\n', '        uint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '        uint256 fee = getTxBurn(TAmount);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        if (!deductTransferFee) {\n', '            return rAmount;\n', '        } else {\n', '            (uint256 rTransferAmount,,,) = _getRValues(TAmount, fee, currentRate);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\t\n', '\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) \n', '\t{\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\t\n', '\tfunction excludeAccount(address account) external onlyOwner() \n', '\t{\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _rOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\t\n', '\tfunction includeAccount(address account) external onlyOwner() \n', '\t{\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _rOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\t\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) private \n', '\t{\n', '        \n', '\t\trequire(sender != address(0), "SBASE: cannot transfer from the zero address");\n', '        require(recipient != address(0), "SBASE: cannot transfer to the zero address");\n', '        require(amount > 0, "SBASE: Transfer amount must be greater than zero");\n', '\t\t\n', '\t\tif(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\n', '            require(amount <= _maxTxAmount, "SBASE: Transfer amount exceeds the maxTxAmount.");\n', '            if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled)\n', '                require(false, "SBASE: trading is disabled.");\n', '        }\n', '        \n', '        if(!inSwapAndLiquify) {\n', '            uint256 lockedBalanceForPool = balanceOf(address(this));\n', '            bool overMinTokenBalance = lockedBalanceForPool >= _minTokensBeforeSwap;\n', '\t\t\tcurrentPairTokenAddress == _uniswapV2Router.WETH();\n', '            if (\n', '                overMinTokenBalance &&\n', '                msg.sender != currentPoolAddress &&\n', '                swapAndLiquifyEnabled\n', '            ) {\n', '                swapAndLiquifyForEth(lockedBalanceForPool);\n', '            }\n', '        }\n', '\t\t\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\t\n', '\treceive() external payable {}\n', '    \n', '    function swapAndLiquifyForEth(uint256 lockedBalanceForPool) private lockTheSwap {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '\t\tuint256 forLiquidity = lockedForSwap.divRound(liquidityRewardRate);\n', '\t\tuint256 forLiquidityReward = lockedForSwap.sub(forLiquidity);\n', '        uint256 half = forLiquidity.div(2);\n', '        uint256 otherHalf = forLiquidity.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half);\n', '        \n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForEth(otherHalf, newBalance);\n', '        \n', '        emit SwapAndLiquify(_uniswapV2Router.WETH(), half, newBalance, otherHalf);\n', '        \n', '\t\t_transfer(address(this), uniswapETHPool, forLiquidityReward);\n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '    }\n', '    \n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = _uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '\t\n', '\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t    uint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t    else if (_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferStandardSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferStandardTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {           \n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferStandardSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);        \n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '    function _transferStandardTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{        \n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);                \n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t\tuint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t\telse if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '        _transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {\n', '                _tOwned[recipient] = _tOwned[recipient].add(TAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferToExcludedSell (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '    function _transferToExcludedTx (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{        \n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '         \n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t\tuint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '\t\telse if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferFromExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '\t\t_reflectFee(rFYFee, tFYFee);\n', '\t\t_transferFromExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '                \n', '            }\n', '            else\n', '            {\n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferFromExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '    \n', '    function _transferFromExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \n', '\t{\n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '    }\n', '    \n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private \n', '\t{\n', '\t    uint256 currentRate =  _getRate();\n', '\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SBASEScalingFactor);\n', '\t\tuint256 rAmount = TAmount.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '\t\t\n', '\t\tif(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '\t\t}\n', '\t\t\n', '        else if(_isUniswapPairAddress(recipient))\n', '        {\n', '\t\t uint256 fee = getSellBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '            _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '            _reflectFee(rFYFee, tFYFee);\n', '            _transferBothExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            \n', '        }\n', '        else\n', '        {\n', '            if(!_isWhitelisted(sender, recipient))\n', '            {\n', '\t     uint256 fee = getTxBurn(TAmount);\n', '\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\n', '\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\n', '           _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\n', '            _reflectFee(rFYFee, tFYFee);\n', '            _transferBothExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\n', '            }\n', '            else\n', '            {\n', '                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(TAmount);\n', '                emit Transfer(sender, recipient, tAmount);\n', '             }\n', '        }\n', '    }\n', '    \n', '    function _transferBothExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t{   \n', '            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\n', '            emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '        \n', '    }\n', '    \n', '     function _transferBothExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \n', '\t {\n', '                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\n', '                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\n', '\t\t\t\t\n', '                emit Transfer(sender, recipient, _scaling(tTransferAmount));\n', '                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\n', '                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\n', '     }\n', '\t \n', '\tfunction _scaling(uint256 amount) private view returns (uint256)\n', '\t\n', '\t{\n', '\t\tuint256 scaledAmount = amount.mul(SBASEScalingFactor).div(internalDecimals);\n', '\t\treturn(scaledAmount);\n', '\t}\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private \n', '\t{\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getTValues(uint256 TAmount, uint256 fee) private view returns (uint256, uint256, uint256, uint256) \n', '\t{\n', '        uint256 tFYFee = TAmount.div(FYFee); \n', '\t\tuint256 tBurnFee = BURN_TOP*fee/BURN_BOTTOM;\n', '\t\tuint256 tRewardFee = fee.sub(tBurnFee);\n', '        uint256 tTransferAmount = TAmount.sub(tFYFee).sub(tBurnFee).sub(tRewardFee);\n', '        return (tTransferAmount, tFYFee, tBurnFee, tRewardFee);\n', '    }\n', '\t\n', '    function _getRValues(uint256 rAmount, uint256 fee, uint256 currentRate) private view returns (uint256, uint256, uint256, uint256) \n', '\t{\n', '        uint256 rFYFee = rAmount.div(FYFee);\n', '\t\tuint256 rBurnFee = (BURN_TOP*fee/BURN_BOTTOM).mul(currentRate);\n', '\t\tuint256 rRewardFee = fee.mul(currentRate).sub(rBurnFee);\n', '\t\tuint256 rTransferAmount = _getRValues2(rAmount, rFYFee, rBurnFee, rRewardFee);\n', '        return (rTransferAmount, rBurnFee, rFYFee, rRewardFee);\n', '    }\n', '\t\n', '\tfunction _getRValues2(uint256 rAmount, uint256 rFYFee, uint256 rBurnFee, uint256 rRewardFee) private pure returns (uint256) \n', '\t{\n', '        uint256 rTransferAmount = rAmount.sub(rFYFee).sub(rBurnFee).sub(rRewardFee);\n', '        return (rTransferAmount);\n', '    }\n', '\t\n', '\n', '    function _getRate() private view returns(uint256) \n', '\t{\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns(uint256, uint256) \n', '\t{\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = initSupply;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, initSupply);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(initSupply)) return (_rTotal, initSupply);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _setRewardAddress(address rewards_) external onlyOwner\n', '    {\n', '        rewardAddress = rewards_;\n', '    }\n', '\n', '    /**\n', '    * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '    *\n', '    * @dev The supply adjustment equals (totalSupply * DeviationFromTargetRate) / rebaseLag\n', '    *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\n', '    *      and targetRate is CpiOracleRate / baseCpi\n', '    */\n', '    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external onlyRebaser returns (uint256)\n', '    {\n', '\t\tuint256 currentRate = _getRate();\n', '        if (!positive)\n', '        {\n', '\t\tuint256 newScalingFactor = SBASEScalingFactor.mul(BASE.sub(indexDelta)).div(BASE);\n', '\t\tSBASEScalingFactor = newScalingFactor;\n', '        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\n', '            .mul(SBASEScalingFactor).div(internalDecimals)));\n', '        emit Rebase(epoch, SBASEScalingFactor);\n', '\t\tIUniswapV2Pair(uniswapETHPool).sync();\n', '\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\n', '\t\t\taddress futurePoolAddress = futurePools[i];\n', '\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\n', '\t\t}\n', '        return _totalSupply;\n', '        }\n', '\t\t\n', '        else \n', '\t\t{\n', '        uint256 newScalingFactor = SBASEScalingFactor.mul(BASE.add(indexDelta)).div(BASE);\n', '        if (newScalingFactor < _maxScalingFactor())\n', '        {\n', '            SBASEScalingFactor = newScalingFactor;\n', '        }\n', '        else\n', '        {\n', '            SBASEScalingFactor = _maxScalingFactor();\n', '        }\n', '\n', '        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\n', '            .mul(SBASEScalingFactor).div(internalDecimals)));\n', '        emit Rebase(epoch, SBASEScalingFactor);\n', '\t\tIUniswapV2Pair(uniswapETHPool).sync();\n', '\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\n', '\t\t\taddress futurePoolAddress = futurePools[i];\n', '\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\n', '\t\t}\n', '        return _totalSupply;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction getCurrentPoolAddress() public view returns(address) {\n', '        return currentPoolAddress;\n', '    }\n', '    \n', '    function getCurrentPairTokenAddress() public view returns(address) {\n', '        return currentPairTokenAddress;\n', '    }\n', '\t\n', '\tfunction _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', "        require(maxTxAmount >= 10**8 , 'SBASE: maxTxAmount should be greater than 0.1 SBASE');\n", '        _maxTxAmount = maxTxAmount;\n', '        emit MaxTxAmountUpdated(maxTxAmount);\n', '    }\n', '\t\n', '\tfunction _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {\n', "        require(minTokensBeforeSwap >= 1 * 10**9 && minTokensBeforeSwap <= 2000 * 10**9, 'SBASE: minTokenBeforeSwap should be between 1 and 2000 SBASE');\n", "        require(minTokensBeforeSwap > _autoSwapCallerFee , 'SBASE: minTokenBeforeSwap should be greater than autoSwapCallerFee');\n", '        _minTokensBeforeSwap = minTokensBeforeSwap;\n', '        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\n', '    }\n', '\t\n', '\tfunction _setAutoSwapCallerFee(uint256 autoSwapCallerFee) external onlyOwner() {\n', "        require(autoSwapCallerFee >= 10**8, 'SBASE: autoSwapCallerFee should be greater than 0.1 SBASE');\n", '        _autoSwapCallerFee = autoSwapCallerFee;\n', '        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\n', '    }\n', '\t\n', '\tfunction updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '\t\n', '\tfunction _enableTrading() external onlyOwner() {\n', '        tradingEnabled = true;\n', '        TradingEnabled();\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SBASESafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256)\n', '    {\n', '        uint256 c = add(a,m);\n', '        uint256 d = sub(c,1);\n', '        return mul(div(d,m),m);\n', '    }\n', '\n', '    function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        require(y != 0, "Div by zero");\n', '        uint256 r = x / y;\n', '        if (x % y != 0) {\n', '            r = r + 1;\n', '        }\n', '\n', '        return r;\n', '    }\n', '}']