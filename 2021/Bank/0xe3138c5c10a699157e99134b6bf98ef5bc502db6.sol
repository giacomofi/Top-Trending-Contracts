['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '// SPDX-License-Identifier: MIT\n', '// Name: Akita Cakes\n', '// Symbol: ACakes\n', '// Decimals: 18\n', '// 20% TAX In Each Transaction\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IBEP20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) { return 0; }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor (address initialOwner) {\n', '        _owner = initialOwner;\n', '        emit OwnershipTransferred(address(0), initialOwner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function getUnlockTime() public view returns (uint256) {\n', '        return _lockTime;\n', '    }\n', '\n', '    function lock(uint256 time) public virtual onlyOwner {\n', '        _previousOwner = _owner;\n', '        _owner = address(0);\n', '        _lockTime = block.timestamp + time;\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '    \n', '    function unlock() public virtual {\n', '        require(_previousOwner == msg.sender, "You don\'t have permission to unlock");\n', '        require(block.timestamp > _lockTime , "Contract is still locked");\n', '        emit OwnershipTransferred(_owner, _previousOwner);\n', '        _owner = _previousOwner;\n', '    }\n', '}\n', '\n', 'contract ACakes is Context, IBEP20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => bool)    private _isExcludedFromFee;\n', '    mapping (address => bool)    private _isExcluded;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    address[] private _excluded;\n', '    address public _marketingWallet;\n', '    address public _charityWallet;\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 1000000000000 * 10**18;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '\n', '    string private constant _name     = "Akita Cakes";\n', '    string private constant _symbol   = "ACakes";\n', '    uint8  private constant _decimals = 18;\n', '    \n', '    uint256 private _taxFee       = 0; // Unused\n', '    uint256 public _marketingFee = 10; // 10% of every transaction is sent to marketing wallet\n', '    uint256 public _charityFee   = 10; // 10% of every transaction is sent to charity wallet\n', '\n', '    uint256 private _previousTaxFee       = _taxFee;\n', '    uint256 private _previousMarketingFee = _marketingFee;\n', '    uint256 private _previousCharityFee   = _charityFee;\n', '\n', '    uint256 public _maxTxAmount = _tTotal / 2;\n', '    \n', '    constructor (address cOwner, address marketingWallet, address charityWallet) Ownable(cOwner) {\n', '        _marketingWallet = marketingWallet;\n', '        _charityWallet   = charityWallet;\n', '\n', '        _rOwned[cOwner] = _rTotal;\n', '\n', '        // exclude system addresses from fee\n', '        _isExcludedFromFee[owner()]          = true;\n', '        _isExcludedFromFee[address(this)]    = true;\n', '        _isExcludedFromFee[_marketingWallet] = true;\n', '        _isExcludedFromFee[_charityWallet]   = true;\n', '        \n', '        emit Transfer(address(0), cOwner, _tTotal);\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    // BEP20\n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "BEP20: approve from the zero address");\n', '        require(spender != address(0), "BEP20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    // REFLECTION\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '\n', '        (, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount,,) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal         = _rTotal.sub(rAmount);\n', '        _tFeeTotal      = _tFeeTotal.add(tAmount);\n', '    }\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '\n', '        if (!deductTransferFee) {\n', '            (, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '            uint256 currentRate = _getRate();\n', '            (uint256 rAmount,,) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '            return rAmount;\n', '\n', '        } else {\n', '            (, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '            uint256 currentRate = _getRate();\n', '            (, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '    function excludeFromReward(address account) public onlyOwner {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '\n', '        if (_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '    function includeInReward(address account) external onlyOwner {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '    function excludeFromFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = true;\n', '    }\n', '    function includeInFee(address account) public onlyOwner {\n', '        _isExcludedFromFee[account] = false;\n', '    }\n', '    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\n', '        _taxFee         = taxFee;\n', '        _previousTaxFee = taxFee;\n', '    }\n', '    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner {\n', '        _marketingFee         = marketingFee;\n', '        _previousMarketingFee = marketingFee;\n', '    }\n', '    function setCharityFeePercent(uint256 charityFee) external onlyOwner {\n', '        _charityFee         = charityFee;\n', '        _previousCharityFee = charityFee;\n', '    }\n', '    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\n', '        _maxTxAmount = _tTotal.mul(maxTxPercent).div(100);\n', '    }\n', '    function isExcludedFromFee(address account) public view returns(bool) {\n', '        return _isExcludedFromFee[account];\n', '    }\n', '    function isExcludedFromReward(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '    function setMarketingWallet(address marketingWallet) external onlyOwner {\n', '        _marketingWallet = marketingWallet;\n', '    }\n', '    function setCharityWallet(address charityWallet) external onlyOwner {\n', '        _charityWallet = charityWallet;\n', '    }\n', '\n', '    // TRANSFER\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) private {\n', '        require(from != address(0), "BEP20: transfer from the zero address");\n', '        require(to != address(0), "BEP20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        if (from != owner() && to != owner()) {\n', '            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '        }\n', '        \n', '        bool takeFee = true;\n', '        // if sender or recipient is excluded from fees, remove fees\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '        }\n', '        \n', '        _tokenTransfer(from, to, amount, takeFee);\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if (!takeFee) {\n', '            removeAllFee();\n', '        }\n', '        \n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '        \n', '        if (!takeFee) {\n', '            restoreAllFee();\n', '        }\n', '    }\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '        _rOwned[sender]    = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\n', '        takeTransactionFee(address(_marketingWallet), tMarketing, currentRate);\n', '        takeTransactionFee(address(_charityWallet), tCharity, currentRate);\n', '        reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\n', '        takeTransactionFee(address(_marketingWallet), tMarketing, currentRate);\n', '        takeTransactionFee(address(_charityWallet), tCharity, currentRate);\n', '        reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\n', '        takeTransactionFee(address(_marketingWallet), tMarketing, currentRate);\n', '        takeTransactionFee(address(_charityWallet), tCharity, currentRate);\n', '        reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tCharity) = _getTValues(tAmount);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, tCharity, currentRate);\n', '\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '\n', '        takeTransactionFee(address(_marketingWallet), tMarketing, currentRate);\n', '        takeTransactionFee(address(_charityWallet), tCharity, currentRate);\n', '        reflectFee(rFee, tFee);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal    = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '    function removeAllFee() private {\n', '        if (_taxFee == 0 && _marketingFee == 0 && _charityFee == 0) return;\n', '        \n', '        _previousTaxFee       = _taxFee;\n', '        _previousMarketingFee = _marketingFee;\n', '        _previousCharityFee   = _charityFee;\n', '        \n', '        _taxFee       = 0;\n', '        _marketingFee = 0;\n', '        _charityFee   = 0;\n', '    }\n', '    function restoreAllFee() private {\n', '        _taxFee       = _previousTaxFee;\n', '        _marketingFee = _previousMarketingFee;\n', '        _charityFee   = _previousCharityFee;\n', '    }\n', '    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\n', '        uint256 tFee       = tAmount.mul(_taxFee).div(100);\n', '        uint256 tMarketing = tAmount.mul(_marketingFee).div(100);\n', '        uint256 tCharity   = tAmount.mul(_charityFee).div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tFee);\n', '        tTransferAmount = tTransferAmount.sub(tMarketing);\n', '        tTransferAmount = tTransferAmount.sub(tCharity);\n', '        return (tTransferAmount, tFee, tMarketing, tCharity);\n', '    }\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tMarketing, uint256 tCharity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount     = tAmount.mul(currentRate);\n', '        uint256 rFee        = tFee.mul(currentRate);\n', '        uint256 rMarketing  = tMarketing.mul(currentRate);\n', '        uint256 rCharity    = tCharity.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\n', '        rTransferAmount = rTransferAmount.sub(rMarketing);\n', '        rTransferAmount = rTransferAmount.sub(rCharity);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '    function takeTransactionFee(address to, uint256 tAmount, uint256 currentRate) private {\n', '        if (tAmount <= 0) { return; }\n', '\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        _rOwned[to] = _rOwned[to].add(rAmount);\n', '        if (_isExcluded[to]) {\n', '            _tOwned[to] = _tOwned[to].add(tAmount);\n', '        }\n', '    }\n', '}']