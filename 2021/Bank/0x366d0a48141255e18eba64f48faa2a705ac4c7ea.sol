['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', '/**\n', '\n', '\n', 'SPDX-License-Identifier: MIT\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'contract CAUTIONThisIsARugPull is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    string private constant _name = "CAUTIONThisIsARugPull";\n', '    string private constant _symbol = "RUGPULL";\n', '    uint8 private constant _decimals = 9;\n', '    mapping(address => bool) private bots;\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private  _tTotal = 1000000000000 * 10**9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 private _dynamicFee = 1;\n', '    mapping(address => uint256) private buycooldown;\n', '    address private _marketingAddress;\n', '    address private _charityAddress;\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address private uniswapV2Pair;\n', '    bool private tradingOpen = false;\n', '    bool private liquidityAdded = false;\n', '    bool private inSwap = false;\n', '    bool private swapEnabled = false;\n', '    uint256 private _coolDownSeconds = 30;\n', '    uint256 private _maxTxBasis = 300;\n', '    bool private _takeFee = true;\n', '\n', '    event MaxTxPercentUpdated(uint256 _maxTxPercent);\n', '    modifier lockTheSwap {\n', '        inSwap = true;\n', '        _;\n', '        inSwap = false;\n', '    }\n', '    \n', '    constructor () {\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _rOwned[_msgSender()] = _rTotal;\n', '        \n', '        \n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\n', '        require(rAmount <= _rTotal,"Amount must be less than total reflections");\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '    \n', '    function removeAllFee() private {\n', '        if (_dynamicFee == 0) return;\n', '        _dynamicFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _dynamicFee = 1;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        if (from != owner() && to != owner()) {\n', '            require(!bots[from] && !bots[to]);\n', '            uint256 maxAmount = _tTotal.mul(_maxTxBasis).div(10**5);\n', '            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\n', '                require(tradingOpen);\n', '                require(amount <= maxAmount);\n', '                require(buycooldown[to] < block.timestamp);\n', '                buycooldown[to] = block.timestamp + ( _coolDownSeconds * (1 seconds));\n', '            }\n', '            uint256 contractTokenBalance = balanceOf(address(this));\n', '            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n', '                require(amount <= balanceOf(uniswapV2Pair).mul(2).div(100));\n', '                if (from != address(this) && to != address(this) && contractTokenBalance > 0) {\n', '                    if (_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair) {\n', '                        swapTokensForEth(contractTokenBalance);\n', '                    }\n', '                }\n', '            }\n', '        }\n', '        bool takeFee = true;\n', '\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '        }\n', '        \n', '        _takeFee = takeFee;\n', '        \n', '        _tokenTransfer(from, to, amount, takeFee);\n', '        restoreAllFee;\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\n', '    }\n', '    \n', '    function openTrading() public onlyOwner {\n', '        require(liquidityAdded);\n', '        tradingOpen = true;\n', '    }\n', '    \n', '    function maxTxAmount() public view returns (uint256) {\n', '       return _tTotal.mul(_maxTxBasis).div(10**5);\n', '    }\n', '    \n', '    function isMarketing(address account) public view returns (bool) {\n', '        return account == _marketingAddress;\n', '    }\n', '    \n', '    function isTakeFee() public view returns (bool) {\n', '        return _takeFee;\n', '    }\n', '    \n', '    function isCharity(address account) public view returns (bool) {\n', '        return account == _charityAddress;\n', '    }\n', '    \n', '    function setBotAddress(address account) external onlyOwner() {\n', '        require(!bots[account], "Account is already identified as a bot");\n', '        bots[account] = true;\n', '    }\n', '    function revertSetBotAddress(address account) external onlyOwner() {\n', '        require(bots[account], "Account is not identified as a bot");\n', '        bots[account] = false;\n', '    }\n', '    \n', '    function setCharityAddress(address charityAddress) external onlyOwner {\n', '        _isExcludedFromFee[_charityAddress] = false;\n', '        _charityAddress = charityAddress;\n', '        _isExcludedFromFee[_charityAddress] = true;\n', '    }\n', '\n', '    function setMarketingAddress(address marketingAddress) external onlyOwner {\n', '        _isExcludedFromFee[_marketingAddress] = false;\n', '        _marketingAddress = marketingAddress;\n', '        _isExcludedFromFee[_marketingAddress] = true;\n', '    }\n', '    \n', '    function addLiquidity() external onlyOwner() {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _tTotal);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n', '        swapEnabled = true;\n', '        liquidityAdded = true;\n', '        _maxTxBasis = 300;\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n', '    }\n', '\n', '    function manualswap() external {\n', '        require(_msgSender() == owner());\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        swapTokensForEth(contractBalance);\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if (!takeFee) removeAllFee();\n', '        _transferStandard(sender, recipient, amount);\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tDynamic) = _getValues(tAmount);\n', '        \n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _transferFees(sender, tDynamic);\n', '        _reflectFee(rFee, tDynamic);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFees(address sender, uint256 tDynamic) private {\n', '        uint256 currentRate = _getRate();\n', '        \n', '        if (tDynamic == 0) return;\n', '        \n', '        uint256 tMarketing = tDynamic.mul(36).div(90); //0.4% Marketing Fee\n', '        uint256 tCharity = tDynamic.mul(30).div(300); //0.1% Charity Fee\n', '        \n', '        uint256 rMarketing = tMarketing.mul(currentRate);\n', '        _tOwned[_marketingAddress] = _tOwned[_marketingAddress].add(tMarketing);\n', '        _rOwned[_marketingAddress] = _rOwned[_marketingAddress].add(rMarketing);\n', '        emit Transfer(sender, _marketingAddress, tMarketing);\n', '        \n', '        uint256 rCharity = tCharity.mul(currentRate);\n', '        _tOwned[_charityAddress] = _tOwned[_charityAddress].add(tCharity);\n', '        _rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\n', '        emit Transfer(sender, _charityAddress, tCharity);\n', '        \n', '    }\n', '    \n', '    function _reflectFee(uint256 rFee, uint256 tDynamic) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        if (tDynamic != 0)\n', '            _tFeeTotal = _tFeeTotal.add(tDynamic.mul(10).div(4)); //2.5% Rewards Fee\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tDynamic) = _getTValues(tAmount, _dynamicFee);\n', '        uint256 currentRate = _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rDynamic) = _getRValues(tAmount, tDynamic, currentRate);\n', '        return (rAmount, rTransferAmount, rDynamic, tTransferAmount, tDynamic);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 dynamicFee) private pure returns (uint256, uint256) {\n', '        if (dynamicFee == 0)\n', '            return (tAmount, dynamicFee);\n', '        uint256 tDynamic = tAmount.mul(dynamicFee).div(100);\n', '        uint256 tTransferAmount = tAmount\n', '        .sub(tDynamic.mul(3));\n', '        return (tTransferAmount, tDynamic);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tDynamic, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        if (tDynamic == 0)\n', '        return (rAmount, rAmount, tDynamic);\n', '        uint256 rDynamic = tDynamic.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount\n', '        .sub(rDynamic.mul(3));\n', '        return (rAmount, rTransferAmount, rDynamic);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function setCoolDownSeconds(uint256 coolDownSeconds) external onlyOwner() {\n', '        _coolDownSeconds = coolDownSeconds;\n', '    }\n', '    \n', '    function getCoolDownSeconds() public view returns (uint256) {\n', '        return _coolDownSeconds;\n', '    }\n', '    \n', '    function setMaxTxBasis(uint256 maxTxBasis) external onlyOwner() {\n', '        require(maxTxBasis > 0, "Amount must be greater than 0");\n', '        _maxTxBasis = maxTxBasis;\n', '        emit MaxTxPercentUpdated(_maxTxBasis.div(100));\n', '    }\n', '}']