['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IDMMFactory.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IDMMFactory {\n', '    function createPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps\n', '    ) external returns (address pool);\n', '\n', '    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function getFeeConfiguration() external view returns (address feeTo, uint16 governmentFeeBps);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function allPools(uint256) external view returns (address pool);\n', '\n', '    function allPoolsLength() external view returns (uint256);\n', '\n', '    function getUnamplifiedPool(IERC20 token0, IERC20 token1) external view returns (address);\n', '\n', '    function getPools(IERC20 token0, IERC20 token1)\n', '        external\n', '        view\n', '        returns (address[] memory _tokenPools);\n', '\n', '    function isPool(\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        address pool\n', '    ) external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDMMExchangeRouter.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @dev an simple interface for integration dApp to swap\n', 'interface IDMMExchangeRouter {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(\n', '        uint256 amountIn,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path\n', '    ) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(\n', '        uint256 amountOut,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path\n', '    ) external view returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/IDMMLiquidityRouter.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @dev an simple interface for integration dApp to contribute liquidity\n', 'interface IDMMLiquidityRouter {\n', '    function addLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityNewPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityNewPoolETH(\n', '        IERC20 token,\n', '        uint32 ampBps,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityWithPermit(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '}\n', '\n', '// File: contracts/interfaces/IDMMRouter01.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '/// @dev full interface for router\n', 'interface IDMMRouter01 is IDMMExchangeRouter, IDMMLiquidityRouter {\n', '    function factory() external pure returns (address);\n', '\n', '    function weth() external pure returns (IWETH);\n', '}\n', '\n', '// File: contracts/interfaces/IDMMRouter02.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IDMMRouter02 is IDMMRouter01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC20Permit.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IERC20Permit is IERC20 {\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDMMPool.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'interface IDMMPool {\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function sync() external;\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\n', '\n', '    function getTradeInfo()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 _vReserve0,\n', '            uint112 _vReserve1,\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint256 feeInPrecision\n', '        );\n', '\n', '    function token0() external view returns (IERC20);\n', '\n', '    function token1() external view returns (IERC20);\n', '\n', '    function ampBps() external view returns (uint32);\n', '\n', '    function factory() external view returns (IDMMFactory);\n', '\n', '    function kLast() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/libraries/DMMLibrary.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'library DMMLibrary {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant PRECISION = 1e18;\n', '\n', '    // returns sorted token addresses, used to handle return values from pools sorted in this order\n', '    function sortTokens(IERC20 tokenA, IERC20 tokenB)\n', '        internal\n', '        pure\n', '        returns (IERC20 token0, IERC20 token1)\n', '    {\n', '        require(tokenA != tokenB, "DMMLibrary: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(address(token0) != address(0), "DMMLibrary: ZERO_ADDRESS");\n', '    }\n', '\n', '    /// @dev fetch the reserves and fee for a pool, used for trading purposes\n', '    function getTradeInfo(\n', '        address pool,\n', '        IERC20 tokenA,\n', '        IERC20 tokenB\n', '    )\n', '        internal\n', '        view\n', '        returns (\n', '            uint256 reserveA,\n', '            uint256 reserveB,\n', '            uint256 vReserveA,\n', '            uint256 vReserveB,\n', '            uint256 feeInPrecision\n', '        )\n', '    {\n', '        (IERC20 token0, ) = sortTokens(tokenA, tokenB);\n', '        uint256 reserve0;\n', '        uint256 reserve1;\n', '        uint256 vReserve0;\n', '        uint256 vReserve1;\n', '        (reserve0, reserve1, vReserve0, vReserve1, feeInPrecision) = IDMMPool(pool).getTradeInfo();\n', '        (reserveA, reserveB, vReserveA, vReserveB) = tokenA == token0\n', '            ? (reserve0, reserve1, vReserve0, vReserve1)\n', '            : (reserve1, reserve0, vReserve1, vReserve0);\n', '    }\n', '\n', '    /// @dev fetches the reserves for a pool, used for liquidity adding\n', '    function getReserves(\n', '        address pool,\n', '        IERC20 tokenA,\n', '        IERC20 tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (IERC20 token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1) = IDMMPool(pool).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pool reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "DMMLibrary: INSUFFICIENT_AMOUNT");\n', '        require(reserveA > 0 && reserveB > 0, "DMMLibrary: INSUFFICIENT_LIQUIDITY");\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pool reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 vReserveIn,\n', '        uint256 vReserveOut,\n', '        uint256 feeInPrecision\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "DMMLibrary: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > 0, "DMMLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 amountInWithFee = amountIn.mul(PRECISION.sub(feeInPrecision)).div(PRECISION);\n', '        uint256 numerator = amountInWithFee.mul(vReserveOut);\n', '        uint256 denominator = vReserveIn.add(amountInWithFee);\n', '        amountOut = numerator.div(denominator);\n', '        require(reserveOut > amountOut, "DMMLibrary: INSUFFICIENT_LIQUIDITY");\n', '    }\n', '\n', '    // given an output amount of an asset and pool reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 vReserveIn,\n', '        uint256 vReserveOut,\n', '        uint256 feeInPrecision\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "DMMLibrary: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > amountOut, "DMMLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 numerator = vReserveIn.mul(amountOut);\n', '        uint256 denominator = vReserveOut.sub(amountOut);\n', '        amountIn = numerator.div(denominator).add(1);\n', '        // amountIn = floor(amountIN *PRECISION / (PRECISION - feeInPrecision));\n', '        numerator = amountIn.mul(PRECISION);\n', '        denominator = PRECISION.sub(feeInPrecision);\n', '        amountIn = numerator.add(denominator - 1).div(denominator);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pools\n', '    function getAmountsOut(\n', '        uint256 amountIn,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (\n', '                uint256 reserveIn,\n', '                uint256 reserveOut,\n', '                uint256 vReserveIn,\n', '                uint256 vReserveOut,\n', '                uint256 feeInPrecision\n', '            ) = getTradeInfo(poolsPath[i], path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(\n', '                amounts[i],\n', '                reserveIn,\n', '                reserveOut,\n', '                vReserveIn,\n', '                vReserveOut,\n', '                feeInPrecision\n', '            );\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pools\n', '    function getAmountsIn(\n', '        uint256 amountOut,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (\n', '                uint256 reserveIn,\n', '                uint256 reserveOut,\n', '                uint256 vReserveIn,\n', '                uint256 vReserveOut,\n', '                uint256 feeInPrecision\n', '            ) = getTradeInfo(poolsPath[i - 1], path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(\n', '                amounts[i],\n', '                reserveIn,\n', '                reserveOut,\n', '                vReserveIn,\n', '                vReserveOut,\n', '                feeInPrecision\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/periphery/DMMRouter02.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DMMRouter02 is IDMMRouter02 {\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for IWETH;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant BPS = 10000;\n', '\n', '    address public immutable override factory;\n', '    IWETH public immutable override weth;\n', '\n', '    modifier ensure(uint256 deadline) {\n', '        require(deadline >= block.timestamp, "DMMRouter: EXPIRED");\n', '        _;\n', '    }\n', '\n', '    constructor(address _factory, IWETH _weth) public {\n', '        factory = _factory;\n', '        weth = _weth;\n', '    }\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '    // **** ADD LIQUIDITY ****\n', '    function _addLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin\n', '    ) internal virtual view returns (uint256 amountA, uint256 amountB) {\n', '        (uint256 reserveA, uint256 reserveB) = DMMLibrary.getReserves(pool, tokenA, tokenB);\n', '        if (reserveA == 0 && reserveB == 0) {\n', '            (amountA, amountB) = (amountADesired, amountBDesired);\n', '        } else {\n', '            uint256 amountBOptimal = DMMLibrary.quote(amountADesired, reserveA, reserveB);\n', '            if (amountBOptimal <= amountBDesired) {\n', '                require(amountBOptimal >= amountBMin, "DMMRouter: INSUFFICIENT_B_AMOUNT");\n', '                (amountA, amountB) = (amountADesired, amountBOptimal);\n', '            } else {\n', '                uint256 amountAOptimal = DMMLibrary.quote(amountBDesired, reserveB, reserveA);\n', '                assert(amountAOptimal <= amountADesired);\n', '                require(amountAOptimal >= amountAMin, "DMMRouter: INSUFFICIENT_A_AMOUNT");\n', '                (amountA, amountB) = (amountAOptimal, amountBDesired);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '        ensure(deadline)\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        verifyPoolAddress(tokenA, tokenB, pool);\n', '        (amountA, amountB) = _addLiquidity(\n', '            tokenA,\n', '            tokenB,\n', '            pool,\n', '            amountADesired,\n', '            amountBDesired,\n', '            amountAMin,\n', '            amountBMin\n', '        );\n', '        // using tokenA.safeTransferFrom will get "Stack too deep"\n', '        SafeERC20.safeTransferFrom(tokenA, msg.sender, pool, amountA);\n', '        SafeERC20.safeTransferFrom(tokenB, msg.sender, pool, amountB);\n', '        liquidity = IDMMPool(pool).mint(to);\n', '    }\n', '\n', '    function addLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        public\n', '        override\n', '        payable\n', '        ensure(deadline)\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        verifyPoolAddress(token, weth, pool);\n', '        (amountToken, amountETH) = _addLiquidity(\n', '            token,\n', '            weth,\n', '            pool,\n', '            amountTokenDesired,\n', '            msg.value,\n', '            amountTokenMin,\n', '            amountETHMin\n', '        );\n', '        token.safeTransferFrom(msg.sender, pool, amountToken);\n', '        weth.deposit{value: amountETH}();\n', '        weth.safeTransfer(pool, amountETH);\n', '        liquidity = IDMMPool(pool).mint(to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amountETH) {\n', '            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n', '        }\n', '    }\n', '\n', '    function addLiquidityNewPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        override\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        address pool;\n', '        if (ampBps == BPS) {\n', '            pool = IDMMFactory(factory).getUnamplifiedPool(tokenA, tokenB);\n', '        }\n', '        if (pool == address(0)) {\n', '            pool = IDMMFactory(factory).createPool(tokenA, tokenB, ampBps);\n', '        }\n', '        (amountA, amountB, liquidity) = addLiquidity(\n', '            tokenA,\n', '            tokenB,\n', '            pool,\n', '            amountADesired,\n', '            amountBDesired,\n', '            amountAMin,\n', '            amountBMin,\n', '            to,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    function addLiquidityNewPoolETH(\n', '        IERC20 token,\n', '        uint32 ampBps,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        address pool;\n', '        if (ampBps == BPS) {\n', '            pool = IDMMFactory(factory).getUnamplifiedPool(token, weth);\n', '        }\n', '        if (pool == address(0)) {\n', '            pool = IDMMFactory(factory).createPool(token, weth, ampBps);\n', '        }\n', '        (amountToken, amountETH, liquidity) = addLiquidityETH(\n', '            token,\n', '            pool,\n', '            amountTokenDesired,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            to,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY ****\n', '    function removeLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) public override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n', '        verifyPoolAddress(tokenA, tokenB, pool);\n', '        IERC20(pool).safeTransferFrom(msg.sender, pool, liquidity); // send liquidity to pool\n', '        (uint256 amount0, uint256 amount1) = IDMMPool(pool).burn(to);\n', '        (IERC20 token0, ) = DMMLibrary.sortTokens(tokenA, tokenB);\n', '        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n', '        require(amountA >= amountAMin, "DMMRouter: INSUFFICIENT_A_AMOUNT");\n', '        require(amountB >= amountBMin, "DMMRouter: INSUFFICIENT_B_AMOUNT");\n', '    }\n', '\n', '    function removeLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) public override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\n', '        (amountToken, amountETH) = removeLiquidity(\n', '            token,\n', '            weth,\n', '            pool,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        token.safeTransfer(to, amountToken);\n', '        IWETH(weth).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '\n', '    function removeLiquidityWithPermit(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external virtual override returns (uint256 amountA, uint256 amountB) {\n', '        uint256 value = approveMax ? uint256(-1) : liquidity;\n', '        IERC20Permit(pool).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        (amountA, amountB) = removeLiquidity(\n', '            tokenA,\n', '            tokenB,\n', '            pool,\n', '            liquidity,\n', '            amountAMin,\n', '            amountBMin,\n', '            to,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external override returns (uint256 amountToken, uint256 amountETH) {\n', '        uint256 value = approveMax ? uint256(-1) : liquidity;\n', '        IERC20Permit(pool).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        (amountToken, amountETH) = removeLiquidityETH(\n', '            token,\n', '            pool,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            to,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) public override ensure(deadline) returns (uint256 amountETH) {\n', '        (, amountETH) = removeLiquidity(\n', '            token,\n', '            weth,\n', '            pool,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '        token.safeTransfer(to, IERC20(token).balanceOf(address(this)));\n', '        IWETH(weth).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external override returns (uint256 amountETH) {\n', '        uint256 value = approveMax ? uint256(-1) : liquidity;\n', '        IERC20Permit(pool).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n', '            token,\n', '            pool,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            to,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    // **** SWAP ****\n', '    // requires the initial amount to have already been sent to the first pool\n', '    function _swap(\n', '        uint256[] memory amounts,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path,\n', '        address _to\n', '    ) private {\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (IERC20 input, IERC20 output) = (path[i], path[i + 1]);\n', '            (IERC20 token0, ) = DMMLibrary.sortTokens(input, output);\n', '            uint256 amountOut = amounts[i + 1];\n', '            (uint256 amount0Out, uint256 amount1Out) = input == token0\n', '                ? (uint256(0), amountOut)\n', '                : (amountOut, uint256(0));\n', '            address to = i < path.length - 2 ? poolsPath[i + 1] : _to;\n', '            IDMMPool(poolsPath[i]).swap(amount0Out, amount1Out, to, new bytes(0));\n', '        }\n', '    }\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path,\n', '        address to,\n', '        uint256 deadline\n', '    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsOut(amountIn, poolsPath, path);\n', '        require(\n', '            amounts[amounts.length - 1] >= amountOutMin,\n', '            "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '        IERC20(path[0]).safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, to);\n', '    }\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path,\n', '        address to,\n', '        uint256 deadline\n', '    ) public override ensure(deadline) returns (uint256[] memory amounts) {\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n', '        require(amounts[0] <= amountInMax, "DMMRouter: EXCESSIVE_INPUT_AMOUNT");\n', '        path[0].safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, to);\n', '    }\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\n', '        require(path[0] == weth, "DMMRouter: INVALID_PATH");\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsOut(msg.value, poolsPath, path);\n', '        require(\n', '            amounts[amounts.length - 1] >= amountOutMin,\n', '            "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '        IWETH(weth).deposit{value: amounts[0]}();\n', '        weth.safeTransfer(poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, to);\n', '    }\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n', '        require(path[path.length - 1] == weth, "DMMRouter: INVALID_PATH");\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n', '        require(amounts[0] <= amountInMax, "DMMRouter: EXCESSIVE_INPUT_AMOUNT");\n', '        path[0].safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, address(this));\n', '        IWETH(weth).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n', '        require(path[path.length - 1] == weth, "DMMRouter: INVALID_PATH");\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsOut(amountIn, poolsPath, path);\n', '        require(\n', '            amounts[amounts.length - 1] >= amountOutMin,\n', '            "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '        path[0].safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, address(this));\n', '        IWETH(weth).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override payable ensure(deadline) returns (uint256[] memory amounts) {\n', '        require(path[0] == weth, "DMMRouter: INVALID_PATH");\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        amounts = DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n', '        require(amounts[0] <= msg.value, "DMMRouter: EXCESSIVE_INPUT_AMOUNT");\n', '        IWETH(weth).deposit{value: amounts[0]}();\n', '        weth.safeTransfer(poolsPath[0], amounts[0]);\n', '        _swap(amounts, poolsPath, path, to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amounts[0]) {\n', '            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n', '        }\n', '    }\n', '\n', '    // **** SWAP (supporting fee-on-transfer tokens) ****\n', '    // requires the initial amount to have already been sent to the first pool\n', '    function _swapSupportingFeeOnTransferTokens(\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path,\n', '        address _to\n', '    ) internal {\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (IERC20 input, IERC20 output) = (path[i], path[i + 1]);\n', '            (IERC20 token0, ) = DMMLibrary.sortTokens(input, output);\n', '            IDMMPool pool = IDMMPool(poolsPath[i]);\n', '            uint256 amountOutput;\n', '            {\n', '                // scope to avoid stack too deep errors\n', '                (\n', '                    uint256 reserveIn,\n', '                    uint256 reserveOut,\n', '                    uint256 vReserveIn,\n', '                    uint256 vReserveOut,\n', '                    uint256 feeInPrecision\n', '                ) = DMMLibrary.getTradeInfo(poolsPath[i], input, output);\n', '                uint256 amountInput = IERC20(input).balanceOf(address(pool)).sub(reserveIn);\n', '                amountOutput = DMMLibrary.getAmountOut(\n', '                    amountInput,\n', '                    reserveIn,\n', '                    reserveOut,\n', '                    vReserveIn,\n', '                    vReserveOut,\n', '                    feeInPrecision\n', '                );\n', '            }\n', '            (uint256 amount0Out, uint256 amount1Out) = input == token0\n', '                ? (uint256(0), amountOutput)\n', '                : (amountOutput, uint256(0));\n', '            address to = i < path.length - 2 ? poolsPath[i + 1] : _to;\n', '            pool.swap(amount0Out, amount1Out, to, new bytes(0));\n', '        }\n', '    }\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] memory poolsPath,\n', '        IERC20[] memory path,\n', '        address to,\n', '        uint256 deadline\n', '    ) public override ensure(deadline) {\n', '        path[0].safeTransferFrom(msg.sender, poolsPath[0], amountIn);\n', '        uint256 balanceBefore = path[path.length - 1].balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(poolsPath, path, to);\n', '        uint256 balanceAfter = path[path.length - 1].balanceOf(to);\n', '        require(\n', '            balanceAfter >= balanceBefore.add(amountOutMin),\n', '            "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '    }\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override payable ensure(deadline) {\n', '        require(path[0] == weth, "DMMRouter: INVALID_PATH");\n', '        uint256 amountIn = msg.value;\n', '        IWETH(weth).deposit{value: amountIn}();\n', '        weth.safeTransfer(poolsPath[0], amountIn);\n', '        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(poolsPath, path, to);\n', '        require(\n', '            path[path.length - 1].balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', '            "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '    }\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external override ensure(deadline) {\n', '        require(path[path.length - 1] == weth, "DMMRouter: INVALID_PATH");\n', '        path[0].safeTransferFrom(msg.sender, poolsPath[0], amountIn);\n', '        _swapSupportingFeeOnTransferTokens(poolsPath, path, address(this));\n', '        uint256 amountOut = IWETH(weth).balanceOf(address(this));\n', '        require(amountOut >= amountOutMin, "DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        IWETH(weth).withdraw(amountOut);\n', '        TransferHelper.safeTransferETH(to, amountOut);\n', '    }\n', '\n', '    // **** LIBRARY FUNCTIONS ****\n', '\n', '    /// @dev get the amount of tokenB for adding liquidity with given amount of token A and the amount of tokens in the pool\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external override pure returns (uint256 amountB) {\n', '        return DMMLibrary.quote(amountA, reserveA, reserveB);\n', '    }\n', '\n', '    function getAmountsOut(\n', '        uint256 amountIn,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path\n', '    ) external override view returns (uint256[] memory amounts) {\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        return DMMLibrary.getAmountsOut(amountIn, poolsPath, path);\n', '    }\n', '\n', '    function getAmountsIn(\n', '        uint256 amountOut,\n', '        address[] calldata poolsPath,\n', '        IERC20[] calldata path\n', '    ) external override view returns (uint256[] memory amounts) {\n', '        verifyPoolsPathSwap(poolsPath, path);\n', '        return DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n', '    }\n', '\n', '    function verifyPoolsPathSwap(address[] memory poolsPath, IERC20[] memory path) internal view {\n', '        require(path.length >= 2, "DMMRouter: INVALID_PATH");\n', '        require(poolsPath.length == path.length - 1, "DMMRouter: INVALID_POOLS_PATH");\n', '        for (uint256 i = 0; i < poolsPath.length; i++) {\n', '            verifyPoolAddress(path[i], path[i + 1], poolsPath[i]);\n', '        }\n', '    }\n', '\n', '    function verifyPoolAddress(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool\n', '    ) internal view {\n', '        require(IDMMFactory(factory).isPool(tokenA, tokenB, pool), "DMMRouter: INVALID_POOL");\n', '    }\n', '}']