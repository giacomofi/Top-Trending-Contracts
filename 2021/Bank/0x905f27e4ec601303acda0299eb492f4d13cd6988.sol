['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-23\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface Oracle {\n', '    function usdgToBc() external view returns (uint);\n', '}\n', '\n', 'interface ERC20 {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external;\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external;\n', '}\n', 'interface ERC20_Returns {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'contract bcMarket is Ownable{\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public bc;\n', '    ERC20 public usdg;\n', '    ERC20 public usdt;\n', '    ERC20_Returns public usdc;\n', '    ERC20_Returns public dai;\n', '    Oracle public oracle;\n', '\n', '    uint  usdgDecimals = 9;\n', '    uint  usdtDecimals = 6;\n', '    uint  usdcDecimals = 6;\n', '    uint  daiDecimals = 18;\n', '\n', '    event SaleToken(address indexed token, address indexed from,uint inValue, uint outValue);\n', '    event GovWithdrawToken(address indexed token, address indexed to, uint256 value);\n', '\n', '    constructor(address _oracle, address _usdg, address _usdt,address _usdc, address _dai,address _bc)public {\n', '        oracle = Oracle(_oracle);\n', '        usdg = ERC20(_usdg);\n', '        usdt = ERC20(_usdt);\n', '        usdc = ERC20_Returns(_usdc);\n', '        dai = ERC20_Returns(_dai);\n', '        bc = ERC20(_bc);\n', '    }\n', '\n', '    function getPrice() public view returns (uint){\n', '        return oracle.usdgToBc();\n', '    }\n', '\n', '    function swapUsdg(uint256 _value) public {\n', '        ERC20 token = usdg;\n', '        uint decimals = usdgDecimals;\n', '        require(_value > 0, "!value");\n', '\n', '        uint allowed = token.allowance(msg.sender,address(this));\n', '        uint balanced = token.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        token.transferFrom( msg.sender,address(this), _value);\n', '\n', '        uint price = getPrice();\n', '        uint amount = _value.mul(price).mul(11).div(10).div(10 ** decimals);\n', '        bc.transfer( msg.sender, amount);\n', '\n', '        SaleToken(address(token),msg.sender,_value, amount);\n', '    }\n', '    function swapUsdt(uint256 _value) public {\n', '        ERC20 token = usdt;\n', '        uint decimals = usdtDecimals;\n', '        require(_value > 0, "!value");\n', '\n', '        uint allowed = token.allowance(msg.sender,address(this));\n', '        uint balanced = token.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        token.transferFrom( msg.sender,address(this), _value);\n', '\n', '        uint price = getPrice();\n', '        uint amount = _value.mul(price).div(10 ** decimals);\n', '        bc.transfer( msg.sender, amount);\n', '\n', '        SaleToken(address(token),msg.sender,_value, amount);\n', '    }\n', '    function swapUsdc(uint256 _value) public {\n', '        ERC20_Returns token = usdc;\n', '        uint decimals = usdcDecimals;\n', '        require(_value > 0, "!value");\n', '\n', '        uint allowed = token.allowance(msg.sender,address(this));\n', '        uint balanced = token.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        token.transferFrom( msg.sender,address(this), _value);\n', '\n', '        uint price = getPrice();\n', '        uint amount = _value.mul(price).div(10 ** decimals);\n', '        bc.transfer( msg.sender, amount);\n', '\n', '        SaleToken(address(token),msg.sender,_value, amount);\n', '    }\n', '    function swapDai(uint256 _value) public {\n', '        ERC20_Returns token = dai;\n', '        uint decimals = daiDecimals;\n', '        require(_value > 0, "!value");\n', '\n', '        uint allowed = token.allowance(msg.sender,address(this));\n', '        uint balanced = token.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        token.transferFrom( msg.sender,address(this), _value);\n', '\n', '        uint price = getPrice();\n', '        uint amount = _value.mul(price).div(10 ** decimals);\n', '        bc.transfer( msg.sender, amount);\n', '\n', '        SaleToken(address(token),msg.sender,_value, amount);\n', '    }\n', '\n', '    function govWithdraUsdt(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        usdt.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(usdt), msg.sender, _amount);\n', '    }\n', '    function govWithdraUsdg(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        usdg.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(usdg), msg.sender, _amount);\n', '    }\n', '    function govWithdraUsdc(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        usdc.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(usdc), msg.sender, _amount);\n', '    }\n', '    function govWithdraDai(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        dai.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(dai), msg.sender, _amount);\n', '    }\n', '\n', '    function govWithdraBc(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        bc.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(bc), msg.sender, _amount);\n', '    }\n', '\n', '    function setOracle(address _oracle)onlyOwner public {\n', '        oracle = Oracle(_oracle);\n', '    }\n', '}']