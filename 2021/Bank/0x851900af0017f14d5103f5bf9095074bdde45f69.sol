['pragma solidity =0.5.16;\n', '\n', "import './IMateriaPair.sol';\n", "import './MateriaERC20.sol';\n", "import './Math.sol';\n", "import './UQ112x112.sol';\n", "import './IERC20.sol';\n", "import './IMateriaFactory.sol';\n", "import './IMateriaCallee.sol';\n", "import './MateriaOwnable.sol';\n", '\n', 'contract MateriaPair is IMateriaPair, MateriaERC20, MateriaOwnable {\n', '    using SafeMath for uint256;\n', '    using UQ112x112 for uint224;\n', '\n', '    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '    address public factory;\n', '    address public token0;\n', '    address public token1;\n', '\n', '    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n', '    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n', '    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n', '\n', '    uint256 public price0CumulativeLast;\n', '    uint256 public price1CumulativeLast;\n', '    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n', '\n', '    uint256 public materiaFee;\n', '    uint256 public swapFee;\n', '\n', '    uint256 private unlocked = 1;\n', '    modifier lock() {\n', "        require(unlocked == 1, 'Materia: LOCKED');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    function getReserves()\n', '        public\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint32 _blockTimestampLast\n', '        )\n', '    {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    function _safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Materia: TRANSFER_FAILED');\n", '    }\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    constructor() public MateriaOwnable() {\n', '        factory = msg.sender;\n', '    }\n', '\n', '    // called once by the owner at time of deployment\n', '    function initialize(\n', '        address _token0,\n', '        address _token1,\n', '        uint256 _materiaFee,\n', '        uint256 _swapFee\n', '    ) external onlyOwner {\n', '        token0 = _token0;\n', '        token1 = _token1;\n', '        materiaFee = _materiaFee;\n', '        swapFee = _swapFee;\n', '    }\n', '\n', '    function setMateriaFee(uint256 _materiaFee) external onlyOwner {\n', '        materiaFee = _materiaFee;\n', '    }\n', '\n', '    function setSwapFee(uint256 _swapFee) external onlyOwner {\n', '        swapFee = _swapFee;\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(\n', '        uint256 balance0,\n', '        uint256 balance1,\n', '        uint112 _reserve0,\n', '        uint112 _reserve1\n', '    ) private {\n', "        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Materia: OVERFLOW');\n", '        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '\n', '    // if fee is on, mint liquidity equivalent to chosen percentage of the growth in sqrt(k)\n', '    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n', '        address feeTo = IMateriaFactory(factory).feeTo();\n', '        feeOn = feeTo != address(0);\n', '        uint256 _kLast = kLast; // gas savings\n', '        if (feeOn) {\n', '            if (_kLast != 0) {\n', '                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\n', '                uint256 rootKLast = Math.sqrt(_kLast);\n', '                if (rootK > rootKLast) {\n', '                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n', '                    uint256 denominator = rootK.mul(materiaFee).add(rootKLast);\n', '                    uint256 liquidity = numerator / denominator;\n', '                    if (liquidity > 0) _mint(feeTo, liquidity);\n', '                }\n', '            }\n', '        } else if (_kLast != 0) {\n', '            kLast = 0;\n', '        }\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function mint(address to) external lock returns (uint256 liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint256 amount0 = balance0.sub(_reserve0);\n', '        uint256 amount1 = balance1.sub(_reserve1);\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n', '        } else {\n', '            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n', '        }\n', "        require(liquidity > 0, 'Materia: INSUFFICIENT_LIQUIDITY_MINTED');\n", '        _mint(to, liquidity);\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\n', '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', '        address _token0 = token0; // gas savings\n', '        address _token1 = token1; // gas savings\n', '        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n', '        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n', '        uint256 liquidity = balanceOf[address(this)];\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n', '        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n', "        require(amount0 > 0 && amount1 > 0, 'Materia: INSUFFICIENT_LIQUIDITY_BURNED');\n", '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = IERC20(_token0).balanceOf(address(this));\n', '        balance1 = IERC20(_token1).balanceOf(address(this));\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external lock {\n', "        require(amount0Out > 0 || amount1Out > 0, 'Materia: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n', "        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Materia: INSUFFICIENT_LIQUIDITY');\n", '\n', '        uint256 balance0;\n', '        uint256 balance1;\n', '        {\n', '            // scope for _token{0,1}, avoids stack too deep errors\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require(to != _token0 && to != _token1, 'Materia: INVALID_TO');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n', '            if (data.length > 0) IMateriaCallee(to).materiaCall(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = IERC20(_token0).balanceOf(address(this));\n', '            balance1 = IERC20(_token1).balanceOf(address(this));\n', '        }\n', '        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n', "        require(amount0In > 0 || amount1In > 0, 'Materia: INSUFFICIENT_INPUT_AMOUNT');\n", '        {\n', '            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n', '            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(swapFee));\n', '            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(swapFee));\n', '            require(\n', '                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\n', "                'Materia: K'\n", '            );\n', '        }\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n', '    }\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external lock {\n', '        address _token0 = token0; // gas savings\n', '        address _token1 = token1; // gas savings\n', '        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n', '        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n', '    }\n', '\n', '    // force reserves to match balances\n', '    function sync() external lock {\n', '        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n', '    }\n', '}']