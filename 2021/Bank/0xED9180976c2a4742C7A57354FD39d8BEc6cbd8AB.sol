['// SPDX-License-Identifier: UNLICENSED\n', '// ALL RIGHTS RESERVED\n', '\n', '// Forked from Uniswap Ethereum mainnet for Sushiswap on Ethereum Mainnet\n', '\n', '// This contract locks Sushiswap v2 liquidity tokens. Used to give investors peace of mind a token team has locked liquidity\n', '// and that the univ2 tokens cannot be removed from Sushiswap until the specified unlock date has been reached.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./TransferHelper.sol";\n', 'import "./EnumerableSet.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', 'interface IUniswapV2Pair {\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '}\n', '\n', 'interface IERCBurn {\n', '    function burn(uint256 _amount) external;\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IUniFactory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address);\n', '}\n', '\n', 'interface IMigrator {\n', '    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\n', '}\n', '\n', 'contract UniswapV2Locker is Ownable, ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '  IUniFactory public uniswapFactory;\n', '\n', '  struct UserInfo {\n', '    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\n', '    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\n', '  }\n', '\n', '  struct TokenLock {\n', '    uint256 lockDate; // the date the token was locked\n', '    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\n', '    uint256 initialAmount; // the initial lock amount\n', '    uint256 unlockDate; // the date the token can be withdrawn\n', '    uint256 lockID; // lockID nonce per uni pair\n', '    address owner;\n', '  }\n', '\n', '  mapping(address => UserInfo) private users;\n', '\n', '  EnumerableSet.AddressSet private lockedTokens;\n', '  mapping(address => TokenLock[]) public tokenLocks; //map univ2 pair to all its locks\n', '  \n', '  struct FeeStruct {\n', '    uint256 ethFee; // Small eth fee to prevent spam on the platform\n', '    IERCBurn secondaryFeeToken; // UNCX or UNCL\n', '    uint256 secondaryTokenFee; // optional, UNCX or UNCL\n', '    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\n', '    uint256 liquidityFee; // fee on univ2 liquidity tokens\n', '    uint256 referralPercent; // fee for referrals\n', '    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\n', '    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\n', '    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\n', '  }\n', '    \n', '  FeeStruct public gFees;\n', '  EnumerableSet.AddressSet private feeWhitelist;\n', '  \n', '  address payable devaddr;\n', '  \n', '  IMigrator migrator;\n', '\n', '  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\n', '  event onWithdraw(address lpToken, uint256 amount);\n', '\n', '  constructor(IUniFactory _uniswapFactory) public {\n', '    devaddr = msg.sender;\n', '    gFees.referralPercent = 250; // 25%\n', '    gFees.ethFee = 1e18;\n', '    gFees.secondaryTokenFee = 100e18;\n', '    gFees.secondaryTokenDiscount = 200; // 20%\n', '    gFees.liquidityFee = 10; // 1%\n', '    gFees.referralHold = 10e18;\n', '    gFees.referralDiscount = 100; // 10%\n', '    uniswapFactory = _uniswapFactory;\n', '  }\n', '  \n', '  function setDev(address payable _devaddr) public onlyOwner {\n', '    devaddr = _devaddr;\n', '  }\n', '  \n', '  /**\n', '   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\n', '   */\n', '  function setMigrator(IMigrator _migrator) public onlyOwner {\n', '    migrator = _migrator;\n', '  }\n', '  \n', '  function setSecondaryFeeToken(address _secondaryFeeToken) public onlyOwner {\n', '    gFees.secondaryFeeToken = IERCBurn(_secondaryFeeToken);\n', '  }\n', '  \n', '  /**\n', '   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\n', '   */\n', '  function setReferralTokenAndHold(IERCBurn _referralToken, uint256 _hold) public onlyOwner {\n', '    gFees.referralToken = _referralToken;\n', '    gFees.referralHold = _hold;\n', '  }\n', '  \n', '  function setFees(uint256 _referralPercent, uint256 _referralDiscount, uint256 _ethFee, uint256 _secondaryTokenFee, uint256 _secondaryTokenDiscount, uint256 _liquidityFee) public onlyOwner {\n', '    gFees.referralPercent = _referralPercent;\n', '    gFees.referralDiscount = _referralDiscount;\n', '    gFees.ethFee = _ethFee;\n', '    gFees.secondaryTokenFee = _secondaryTokenFee;\n', '    gFees.secondaryTokenDiscount = _secondaryTokenDiscount;\n', '    gFees.liquidityFee = _liquidityFee;\n', '  }\n', '  \n', '  /**\n', '   * @notice whitelisted accounts dont pay flatrate fees on locking\n', '   */\n', '  function whitelistFeeAccount(address _user, bool _add) public onlyOwner {\n', '    if (_add) {\n', '      feeWhitelist.add(_user);\n', '    } else {\n', '      feeWhitelist.remove(_user);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Creates a new lock\n', '   * @param _lpToken the univ2 token address\n', '   * @param _amount amount of LP tokens to lock\n', '   * @param _unlock_date the unix timestamp (in seconds) until unlock\n', '   * @param _referral the referrer address if any or address(0) for none\n', '   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\n', '   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\n', '   */\n', '  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", "    require(_amount > 0, 'INSUFFICIENT');\n", '\n', '    // ensure this pair is a univ2 pair by querying the factory\n', '    IUniswapV2Pair lpair = IUniswapV2Pair(address(_lpToken));\n', '    address factoryPairAddress = uniswapFactory.getPair(lpair.token0(), lpair.token1());\n', "    require(factoryPairAddress == address(_lpToken), 'NOT UNIV2');\n", '\n', '    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n', '    \n', '    if (_referral != address(0) && address(gFees.referralToken) != address(0)) {\n', "      require(gFees.referralToken.balanceOf(_referral) >= gFees.referralHold, 'INADEQUATE BALANCE');\n", '    }\n', '    \n', '    // flatrate fees\n', '    if (!feeWhitelist.contains(msg.sender)) {\n', '      if (_fee_in_eth) { // charge fee in eth\n', '        uint256 ethFee = gFees.ethFee;\n', '        if (_referral != address(0)) {\n', '          ethFee = ethFee.mul(1000 - gFees.referralDiscount).div(1000);\n', '        }\n', "        require(msg.value == ethFee, 'FEE NOT MET');\n", '        uint256 devFee = ethFee;\n', '        if (ethFee != 0 && _referral != address(0)) { // referral fee\n', '          uint256 referralFee = devFee.mul(gFees.referralPercent).div(1000);\n', '          _referral.transfer(referralFee);\n', '          devFee = devFee.sub(referralFee);\n', '        }\n', '        devaddr.transfer(devFee);\n', '      } else { // charge fee in token\n', '        uint256 burnFee = gFees.secondaryTokenFee;\n', '        if (_referral != address(0)) {\n', '          burnFee = burnFee.mul(1000 - gFees.referralDiscount).div(1000);\n', '        }\n', '        TransferHelper.safeTransferFrom(address(gFees.secondaryFeeToken), address(msg.sender), address(this), burnFee);\n', '        if (gFees.referralPercent != 0 && _referral != address(0)) { // referral fee\n', '          uint256 referralFee = burnFee.mul(gFees.referralPercent).div(1000);\n', '          TransferHelper.safeApprove(address(gFees.secondaryFeeToken), _referral, referralFee);\n', '          TransferHelper.safeTransfer(address(gFees.secondaryFeeToken), _referral, referralFee);\n', '          burnFee = burnFee.sub(referralFee);\n', '        }\n', '        gFees.secondaryFeeToken.burn(burnFee);\n', '      }\n', '    } else if (msg.value > 0){\n', '      // refund eth if a whitelisted member sent it by mistake\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '    \n', '    // percent fee\n', '    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n', '    if (!_fee_in_eth && !feeWhitelist.contains(msg.sender)) { // fee discount for large lockers using secondary token\n', '      liquidityFee = liquidityFee.mul(1000 - gFees.secondaryTokenDiscount).div(1000);\n', '    }\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '    uint256 amountLocked = _amount.sub(liquidityFee);\n', '\n', '    TokenLock memory token_lock;\n', '    token_lock.lockDate = block.timestamp;\n', '    token_lock.amount = amountLocked;\n', '    token_lock.initialAmount = amountLocked;\n', '    token_lock.unlockDate = _unlock_date;\n', '    token_lock.lockID = tokenLocks[_lpToken].length;\n', '    token_lock.owner = _withdrawer;\n', '\n', '    // record the lock for the univ2pair\n', '    tokenLocks[_lpToken].push(token_lock);\n', '    lockedTokens.add(_lpToken);\n', '\n', '    // record the lock for the user\n', '    UserInfo storage user = users[_withdrawer];\n', '    user.lockedTokens.add(_lpToken);\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(token_lock.lockID);\n', '    \n', '    emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\n', '  }\n', '  \n', '  /**\n', '   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\n', '   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n', '   */\n', '  function relock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _unlock_date) external nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\n", '    \n', '    uint256 liquidityFee = userLock.amount.mul(gFees.liquidityFee).div(1000);\n', '    uint256 amountLocked = userLock.amount.sub(liquidityFee);\n', '    \n', '    userLock.amount = amountLocked;\n', '    userLock.unlockDate = _unlock_date;\n', '\n', '    // send univ2 fee to dev address\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '  }\n', '  \n', '  /**\n', '   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\n', '   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n', '   */\n', '  function withdraw (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', "    require(_amount > 0, 'ZERO WITHDRAWL');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < block.timestamp, 'NOT YET');\n", '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    // clean user storage\n', '    if (userLock.amount == 0) {\n', '      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '      userLocks[_index] = userLocks[userLocks.length-1];\n', '      userLocks.pop();\n', '      if (userLocks.length == 0) {\n', '        users[msg.sender].lockedTokens.remove(_lpToken);\n', '      }\n', '    }\n', '    \n', '    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\n', '    emit onWithdraw(_lpToken, _amount);\n', '  }\n', '  \n', '  /**\n', '   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\n', '   */\n', '  function incrementLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', "    require(_amount > 0, 'ZERO AMOUNT');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', '    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n', '    \n', '    // send univ2 fee to dev address\n', '    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '    uint256 amountLocked = _amount.sub(liquidityFee);\n', '    \n', '    userLock.amount = userLock.amount.add(amountLocked);\n', '    \n', '    emit onDeposit(_lpToken, msg.sender, amountLocked, userLock.lockDate, userLock.unlockDate);\n', '  }\n', '  \n', '  /**\n', '   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\n', '   * and withdraw a smaller portion\n', '   */\n', '  function splitLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external payable nonReentrant {\n', "    require(_amount > 0, 'ZERO AMOUNT');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', "    require(msg.value == gFees.ethFee, 'FEE NOT MET');\n", '    devaddr.transfer(gFees.ethFee);\n', '    \n', '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    TokenLock memory token_lock;\n', '    token_lock.lockDate = userLock.lockDate;\n', '    token_lock.amount = _amount;\n', '    token_lock.initialAmount = _amount;\n', '    token_lock.unlockDate = userLock.unlockDate;\n', '    token_lock.lockID = tokenLocks[_lpToken].length;\n', '    token_lock.owner = msg.sender;\n', '\n', '    // record the lock for the univ2pair\n', '    tokenLocks[_lpToken].push(token_lock);\n', '\n', '    // record the lock for the user\n', '    UserInfo storage user = users[msg.sender];\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(token_lock.lockID);\n', '  }\n', '  \n', '  /**\n', '   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\n', '   */\n', '  function transferLockOwnership (address _lpToken, uint256 _index, uint256 _lockID, address payable _newOwner) external {\n', "    require(msg.sender != _newOwner, 'OWNER');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', '    // record the lock for the new Owner\n', '    UserInfo storage user = users[_newOwner];\n', '    user.lockedTokens.add(_lpToken);\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(transferredLock.lockID);\n', '    \n', '    // remove the lock from the old owner\n', '    uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '    userLocks[_index] = userLocks[userLocks.length-1];\n', '    userLocks.pop();\n', '    if (userLocks.length == 0) {\n', '      users[msg.sender].lockedTokens.remove(_lpToken);\n', '    }\n', '    transferredLock.owner = _newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @notice migrates liquidity to uniswap v3\n', '   */\n', '  function migrate (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', '    require(address(migrator) != address(0), "NOT SET");\n', "    require(_amount > 0, 'ZERO MIGRATION');\n", '    \n', '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    // clean user storage\n', '    if (userLock.amount == 0) {\n', '      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '      userLocks[_index] = userLocks[userLocks.length-1];\n', '      userLocks.pop();\n', '      if (userLocks.length == 0) {\n', '        users[msg.sender].lockedTokens.remove(_lpToken);\n', '      }\n', '    }\n', '    \n', '    TransferHelper.safeApprove(_lpToken, address(migrator), _amount);\n', '    migrator.migrate(_lpToken, _amount, userLock.unlockDate, msg.sender);\n', '  }\n', '  \n', '  function getNumLocksForToken (address _lpToken) external view returns (uint256) {\n', '    return tokenLocks[_lpToken].length;\n', '  }\n', '  \n', '  function getNumLockedTokens () external view returns (uint256) {\n', '    return lockedTokens.length();\n', '  }\n', '  \n', '  function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\n', '    return lockedTokens.at(_index);\n', '  }\n', '  \n', '  // user functions\n', '  function getUserNumLockedTokens (address _user) external view returns (uint256) {\n', '    UserInfo storage user = users[_user];\n', '    return user.lockedTokens.length();\n', '  }\n', '  \n', '  function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\n', '    UserInfo storage user = users[_user];\n', '    return user.lockedTokens.at(_index);\n', '  }\n', '  \n', '  function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\n', '    UserInfo storage user = users[_user];\n', '    return user.locksForToken[_lpToken].length;\n', '  }\n', '  \n', '  function getUserLockForTokenAtIndex (address _user, address _lpToken, uint256 _index) external view \n', '  returns (uint256, uint256, uint256, uint256, uint256, address) {\n', '    uint256 lockID = users[_user].locksForToken[_lpToken][_index];\n', '    TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\n', '    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\n', '  }\n', '  \n', '  // whitelist\n', '  function getWhitelistedUsersLength () external view returns (uint256) {\n', '    return feeWhitelist.length();\n', '  }\n', '  \n', '  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\n', '    return feeWhitelist.at(_index);\n', '  }\n', '  \n', '  function getUserWhitelistStatus (address _user) external view returns (bool) {\n', '    return feeWhitelist.contains(_user);\n', '  }\n', '}']