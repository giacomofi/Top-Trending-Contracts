['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '/*\n', '\n', '- ✔️ Supply Name: Pearl of the Orient Seas - Creating a better life for everyone\n', '- ✔️ Symbol: PEARL\n', '- ✔️ Anti-Whale System (3% Sell Price Impact)\n', '- ✔️ Anti-Serial Selling System (Anti-Dump)\n', '- ✔️ Manual Burning and Buyback capability\n', '- ✔️ Send to Buyback Wallet per transaction: 2% (Sent on ETH)\n', '- ✔️ Send to Marketing Wallet per transaction: 1% (Sent on ETH)\n', '- ✔️ Send to Team Wallet per transaction: 5% (Sent on ETH)\n', '- ✔️ Send to Charity Wallet per transaction: 2% (Sent on ETH)\n', '- ✔️ Implemented Dynamic Sell Logic (Anti-Bot)\n', '\n', '       \n', '    Developed by Yiannos Christou     \n', '    Debugged, and Tested by Jay Pingul   \n', '    Team: Angelica Tresvalles, Leonard Bangco, Kriz Resurreccion, Edward Nguyen, and the one and only TITA MORIN  \n', '    \n', '*/\n', '\n', '\n', '\n', 'pragma solidity ^0.8.4;\n', '// SPDX-License-Identifier: MIT\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', " * It also provides the functionality to store the contract in VøidSwap's Cosmic Vault\n", ' * using {storeInCosmicVault}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', '\n', 'contract CVOwnable is Context {\n', '    address private _owner;\n', '    uint256 private _unlockTime;\n', '    address private _previousOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "CVOwnable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        _setOwner(address(0));\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the address of the previous owner.\n', '     */\n', '    function previousOwner() public view returns(address) {\n', '        return _previousOwner;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the unlock time of the contracted stored in the Cosmic Vault.\n', '     */\n', '    function getUnlockTime() public view returns(uint256){\n', '        return _unlockTime;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to the Cosmic Vault (`cosmicVault`) and\n', '     * sets the time (`unlockTime`) at which the now stored contract can be transferred back to\n', '     * the previous owner.\n', '\n', '     * NOTE Can only be called by the current owner.\n', '     */\n', '    function storeInCosmicVault(address cosmicVault, uint256 unlockTime) public virtual onlyOwner {\n', '        require(cosmicVault != address(0), "CVOwnable: new owner is the zero address");\n', '        _previousOwner = _owner;\n', '        _unlockTime = unlockTime;\n', '        emit OwnershipTransferred(_previousOwner, cosmicVault);\n', '        _owner = cosmicVault;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\n', '     * NOTE Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "CVOwnable: new owner is the zero address");\n', '        _setOwner(newOwner);\n', '    }\n', '\n', '    function _setOwner(address newOwner) private {\n', '        _previousOwner = _owner;\n', '        _owner = newOwner;\n', '        emit OwnershipTransferred(_previousOwner, newOwner);\n', '    }\n', '\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n', '}\n', '\n', 'contract PEARL is Context, IERC20, CVOwnable { // Nominal name\n', '    using SafeMath for uint256;\n', '\n', '    string private constant _name = "Pearl of the Orient Seas"; // Token Name\n', '    string private constant _symbol = "PEARL";   // Token symbol\n', '    uint8 private constant _decimals = 9;\n', '\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) private _isExcludedFromFee;\n', '\n', '    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n', '\n', '    uint256 private constant _tTotal = 100000000000 * 10**9; // Total supply\n', '    uint256 public _teamFee = 10;\n', '    uint256 public _storedTeamFee = _teamFee;\n', '\n', '    uint256 public _teamCutPct = 5; // 5% cut to team\n', '    uint256 public _marketingCutPct = 1; //  1% cut to marketing funds\n', '    uint256 public _charityCutPct = 2; // 2% cut to Project Pearls\n', '    uint256 public _liquidityCutPct = 2; // 2% Buyback cut\n', '\n', '    mapping(address => uint256) private sellCooldown;\n', '    mapping(address => uint256) private firstSell;\n', '    mapping(address => uint256) private sellNumber;\n', '\n', '    address payable private _teamAddress;\n', '    address payable private _marketingAddress;\n', '    address payable private _charityAddress;\n', '    address payable private _liquidityAddress;\n', '    uint256 public minimumContractTokenBalanceToSwap = 10000000 * 10**9;   // 0.06% of total supply for both LQ and ETH distribution\n', '    uint256 public minimumContractEthBalanceToSwap = 3 * 10**16;\n', '    mapping(address => bool) private _isAdmin;\n', '\n', '    IUniswapV2Router02 private uniswapV2Router;\n', '    address private uniswapV2Pair;\n', '    bool private tradingOpen = false;\n', '    bool private liquidityAdded = false;\n', '    bool private inSwap = false;\n', '    bool private swapEnabled = false;\n', '    uint256 private _maxTxAmount = _tTotal;\n', '\n', '    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n', '    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\n', '    event SwapTokensForETH(uint256 amountIn, address[] path);\n', '    \n', '    modifier lockTheSwap {\n', '        inSwap = true;\n', '        _;\n', '        inSwap = false;\n', '    }\n', '\n', '    constructor(address payable teamFunds, address payable marketingFunds, address payable charityFunds, address payable liquidityFunds) {\n', '        _teamAddress = teamFunds;\n', '        _marketingAddress = marketingFunds;\n', '        _charityAddress = charityFunds;\n', '        _liquidityAddress = liquidityFunds;\n', '        _balances[_msgSender()] = _tTotal;\n', '\n', '        _isExcludedFromFee[owner()] = true;\n', '        _isAdmin[owner()] = true;\n', '        _isExcludedFromFee[address(this)] = true;\n', '        _isAdmin[address(this)] = true;\n', '        _isExcludedFromFee[_teamAddress] = true;\n', '        _isAdmin[_teamAddress] = true;\n', '        _isExcludedFromFee[_marketingAddress] = true;\n', '        _isAdmin[_marketingAddress] = true;\n', '        _isExcludedFromFee[_charityAddress] = true;\n', '        _isAdmin[_charityAddress] = true;\n', '        _isExcludedFromFee[_liquidityAddress] = true;\n', '        _isAdmin[_liquidityAddress] = true;\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() external pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public pure override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    function removeAllFee() private {\n', '        if (_teamFee == 0) return;\n', '        _teamFee = 0;\n', '    }\n', '\n', '    function restoreAllFee() private {\n', '        _teamFee = _storedTeamFee;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) private {\n', '        require(from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '\n', '        uint256 contractTokenBalance = balanceOf(address(this)); // Get Token contract balance\n', '        bool overMinTokenBalance = contractTokenBalance >= minimumContractTokenBalanceToSwap;\n', '        uint256 contractETHBalance = address(this).balance; // Get ETH contract balance\n', '        bool overMinEthBalance = contractETHBalance >= minimumContractEthBalanceToSwap;\n', '\n', '        if (!_isAdmin[from] && !_isAdmin[from]) {\n', '            \n', '            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) { // Buying\n', '                require(tradingOpen);\n', '                _teamFee = 10; // BUYING 2% Charity, 2% Liquidity Fee, 1% Marketing, 5% Team Fee = 10\n', '            }\n', '\n', '            if (!inSwap && swapEnabled && to == uniswapV2Pair) { // Dynamic Selling Logic\n', '                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount);\n', '                require(sellCooldown[from] < block.timestamp);\n', '                if(firstSell[from] + (4 hours) < block.timestamp) {\n', '                    sellNumber[from] = 0;\n', '                }\n', '                if (sellNumber[from] == 0) { // Cooldown Timings\n', '                    _teamFee = 10; // BUYING 2% Charity, 2% Liquidity Fee, 1% Marketing, 5% Team Fee = 10\n', '                    sellNumber[from]++;\n', '                    firstSell[from] = block.timestamp;\n', '                    sellCooldown[from] = block.timestamp + (60 seconds); //from initial buy 60 seconds\n', '                }\n', '                else if (sellNumber[from] == 1) {\n', '                    _teamFee = 13; // BUYING 2% Charity, 4% Liquidity Fee, 1% Marketing, 6% Team Fee = 13\n', '                    sellNumber[from]++;\n', '                    sellCooldown[from] = block.timestamp + (30 minutes); //from 1st buy 30 minutes\n', '                }\n', '                else if (sellNumber[from] == 2) {\n', '                    _teamFee = 16; // BUYING 2% Charity, 6% Liquidity Fee, 1% Marketing, 7% Team Fee = 16\n', '                    sellNumber[from]++;\n', '                    sellCooldown[from] = block.timestamp + (2 hours); //from 2nd buy 2 hours\n', '                }\n', '                else if (sellNumber[from] == 3) {\n', '                    _teamFee = 19; // BUYING 2% Charity, 8% Liquidity Fee, 1% Marketing, 8% Team Fee = 19\n', '                    sellNumber[from]++;\n', '                    sellCooldown[from] = firstSell[from] + (4 hours); //from initial buy, 4 hours then resets to 60 seconds\n', '                }\n', '            }\n', '\n', '            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n', '                if (overMinTokenBalance) {\n', '                    swapTokensForEth(contractTokenBalance);\n', '                }\n', '\n', '                if (overMinEthBalance) {\n', '                    sendETHToFee(contractETHBalance);\n', '                } \n', '            }\n', '\n', '        }\n', '\n', '        bool takeFee = true;\n', '\n', '        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n', '            takeFee = false;\n', '        }\n', '\n', '        _tokenTransfer(from, to, amount, takeFee);\n', '        restoreAllFee;\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\n', '        emit SwapTokensForETH(tokenAmount, path);\n', '    }\n', '    \n', '    function sendETHToFee(uint256 beforeSplit) private {\n', '        uint256 teamCut = beforeSplit.mul(50).div(100);\n', '        uint256 marketingCut = beforeSplit.mul(10).div(100);\n', '        uint256 charityCut = beforeSplit.mul(20).div(100);\n', '        uint256 liquidityCut = beforeSplit.mul(20).div(100);\n', '        _teamAddress.transfer(teamCut);\n', '        _marketingAddress.transfer(marketingCut);\n', '        _charityAddress.transfer(charityCut);\n', '        _liquidityAddress.transfer(liquidityCut);\n', '    }\n', '    \n', '    function openTrading() public onlyOwner {\n', '        require(liquidityAdded);\n', '        tradingOpen = true;\n', '    }\n', '\n', '    function addInitialLiquidity() external onlyOwner() {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Nominal router.\n', '        uniswapV2Router = _uniswapV2Router;\n', '        _approve(address(this), address(uniswapV2Router), _tTotal);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, address(this), block.timestamp);\n', '        swapEnabled = true;\n', '        liquidityAdded = true;\n', '        _maxTxAmount = 30000000 * 10**9; // 0.3%\n', '        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n', '    }\n', '\n', '    function manualTokenSwap() external {\n', '        require(_msgSender() == owner());\n', '        uint256 contractBalance = balanceOf(address(this));\n', '        swapTokensForEth(contractBalance);\n', '    }\n', '\n', '    function recoverEthFromContract() external {\n', '        require(_msgSender() == owner());\n', '        uint256 contractETHBalance = address(this).balance;\n', '        sendETHToFee(contractETHBalance);\n', '    }\n', '\n', '    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n', '        if (!takeFee) removeAllFee();\n', '        _transferStandard(sender, recipient, amount);\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        ( uint256 tTransferAmount, uint256 tTeam) = _getValues(tAmount);\n', '        _balances[sender] = _balances[sender].sub(tAmount);\n', '        _balances[recipient] = _balances[recipient].add(tTransferAmount);\n', '        _takeTeam(tTeam);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _takeTeam(uint256 tTeam) private {\n', '        _balances[address(this)] = _balances[address(this)].add(tTeam);\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(tAmount, _teamFee);\n', '        return (tTransferAmount, tTeam);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 teamFee) private pure returns (uint256, uint256) {\n', '        uint256 tTeam = tAmount.mul(teamFee).div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tTeam);\n', '        return (tTransferAmount, tTeam);\n', '    }\n', '\n', '    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n', '        require(maxTxPercent > 0, "Amount must be greater than 0");\n', '        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n', '        emit MaxTxAmountUpdated(_maxTxAmount);\n', '    }\n', '\n', '    function manualBurn (uint256 amount) external onlyOwner() {\n', '        require(amount <= balanceOf(owner()), "Amount exceeds available tokens.");\n', '        _tokenTransfer(msg.sender, deadAddress, amount, false);\n', '    }\n', '\n', '    function setRouterAddress(address newRouter) public onlyOwner() {\n', '        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\n', '        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\n', '        uniswapV2Router = _newPancakeRouter;\n', '    }\n', '\n', '    function setTeamCutFee (uint256 _teamCut) external onlyOwner() {\n', '        _teamCutPct = _teamCut;\n', '        _teamFee = _teamCut.add(_marketingCutPct).add(_charityCutPct).add(_liquidityCutPct);\n', '        _storedTeamFee = _teamFee;\n', '    }\n', '\n', '    function setMarketingCutFee (uint256 _marketingCut) external onlyOwner() {\n', '        _marketingCutPct = _marketingCut;\n', '        _teamFee = _teamCutPct.add(_marketingCut).add(_charityCutPct).add(_liquidityCutPct);\n', '        _storedTeamFee = _teamFee;\n', '    }\n', '    function setCharityCutFee (uint256 _charityCut) external onlyOwner() {\n', '        _charityCutPct = _charityCut;\n', '        _teamFee = _teamCutPct.add(_marketingCutPct).add(_charityCut).add(_liquidityCutPct);\n', '        _storedTeamFee = _teamFee;\n', '    }\n', '    function setLiquidityCutFee (uint256 _liquidityCut) external onlyOwner() {\n', '        _liquidityCutPct = _liquidityCut;\n', '        _teamFee = _teamCutPct.add(_marketingCutPct).add(_charityCutPct).add(_liquidityCut);\n', '        _storedTeamFee = _teamFee;\n', '    }\n', '}']