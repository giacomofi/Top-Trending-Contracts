['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'contract FreedomDividendSwap {\n', '\n', '  constructor()\n', '  public\n', '  {\n', '    uniswapRouter = IUniswapV2Router02(UniswapV2Router2);\n', '    owner = msg.sender;\n', '  }\n', '\n', '  string private version = "v1";\n', '\n', '  address private UniswapV2Router2=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '  IUniswapV2Router02 private uniswapRouter;\n', '  \n', '  uint private swapFeeModifier = 500;\n', '  \n', '  address private owner;\n', '  \n', '  uint private swapReward = 277778;\n', '  \n', '  address private FDCContract=0x311C6769461e1d2173481F8d789AF00B39DF6d75;\n', '\n', '  function Swap(string memory swapFunction, uint amountIn, uint amountOutMin, address[] memory path, uint deadline) public payable returns (bool) {\n', '    \n', '    if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked(("swapExactETHForTokens")))) {\n', '        uint swapFee = msg.value / swapFeeModifier;\n', '        require(swapFee > 0, "Swap Fee needs to be higher than 0");\n', '        uint finalValue = msg.value - swapFee;\n', '        require(finalValue > 0, "finalValue needs to be higher than 0");\n', '        \n', '        uniswapRouter.swapExactETHForTokens{value:finalValue}(amountOutMin, path, msg.sender, deadline);\n', '        \n', '        giveReward();\n', '        \n', '        return true;\n', '    } else if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked(("swapExactTokensForETH")))) {\n', '        require(msg.value > 0, "Swap Fee needs to be higher than 0");\n', '        \n', '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, address(this), amountIn\n', '        );\n', '        \n', '        TransferHelper.safeApprove(\n', '            path[0], UniswapV2Router2, amountIn\n', '        );\n', '        \n', '        uniswapRouter.swapExactTokensForETH(amountIn, amountOutMin, path, msg.sender, deadline);\n', '        \n', '        giveReward();\n', '        \n', '        return true;\n', '    } else if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked(("swapExactTokensForTokens")))) {\n', '        require(msg.value > 0, "Swap Fee needs to be higher than 0");\n', '        \n', '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, address(this), amountIn\n', '        );\n', '        \n', '        TransferHelper.safeApprove(\n', '            path[0], UniswapV2Router2, amountIn\n', '        );\n', '        \n', '        uniswapRouter.swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, deadline);\n', '        \n', '        giveReward();\n', '        \n', '        return true;\n', '    } else {\n', '        return false;\n', '    }\n', '  }\n', '  \n', '  function giveReward() internal {\n', "    (bool successBalance, bytes memory dataBalance) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), address(this)));\n", '    require(successBalance, "Freedom Dividend Coin swap reward balanceOf failed.");\n', '    uint rewardLeft = abi.decode(dataBalance, (uint));\n', '\n', '    if (rewardLeft >= swapReward) {\n', "        (bool successTransfer, bytes memory dataTransfer) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), msg.sender, swapReward));\n", '        require(successTransfer, "Freedom Dividend Coin swap reward failed.");\n', '    }\n', '  }\n', '\n', '  function getVersion() public view returns (string memory) {\n', '    return version;\n', '  }\n', '  \n', '  function withdraw(uint value) public returns (bool) {\n', '    require(msg.sender == owner, "Only owner can use");\n', '    TransferHelper.safeTransferETH(\n', '          owner, value\n', '    );\n', '    return true;\n', '  }\n', '  \n', '  function setReward(uint value) public returns (bool) {\n', '    require(msg.sender == owner, "Only owner can use");\n', '    swapReward = value;\n', '    return true;\n', '  }\n', '  \n', '  function getReward() public view returns (uint) {\n', '    return swapReward;\n', '  }\n', '\n', '}\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}']