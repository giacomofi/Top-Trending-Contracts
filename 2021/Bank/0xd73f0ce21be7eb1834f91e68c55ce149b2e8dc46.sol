['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface IOracle {\n', '    function getPriceUsdcRecommended(address tokenAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract PricesHelper {\n', '    IOracle public oracle;\n', '    address public owner;\n', '    \n', '    struct TokenPrice {\n', '        address tokenId;\n', '        uint256 priceUsdc;\n', '    }\n', '\n', '    constructor(address oracleAddress) {\n', '        require(oracleAddress != address(0), "Missing oracle address");\n', '        oracle = IOracle(oracleAddress);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function tokensPrices(address[] memory tokensAddresses)\n', '        external\n', '        view\n', '        returns (TokenPrice[] memory)\n', '    {\n', '        TokenPrice[] memory _tokensPrices =\n', '            new TokenPrice[](tokensAddresses.length);\n', '        for (\n', '            uint256 tokenIdx = 0;\n', '            tokenIdx < tokensAddresses.length;\n', '            tokenIdx++\n', '        ) {\n', '            address tokenAddress = tokensAddresses[tokenIdx];\n', '            _tokensPrices[tokenIdx] = TokenPrice({\n', '                tokenId: tokenAddress,\n', '                priceUsdc: oracle.getPriceUsdcRecommended(tokenAddress)\n', '            });\n', '        }\n', '        return _tokensPrices;\n', '    }\n', '    \n', '    function updateSlot(bytes32 slot, bytes32 value) external {\n', '        require(msg.sender == owner);\n', '        assembly {\n', '            sstore(slot, value)\n', '        }\n', '    }\n', '}']