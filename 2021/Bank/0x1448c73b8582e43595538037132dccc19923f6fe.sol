['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface IReferralFeeReceiver {\n', '    function freezeEpoch(address mooniswap) external;\n', '    function trade(address mooniswap, address[] memory path) external;\n', '}\n', '\n', 'contract RewardsClaimer {\n', '\n', '    struct FeeItem {\n', '        address mooniswap;\n', '        address[] pathToken0;\n', '        address[] pathToken1;\n', '    }\n', '\n', '    IReferralFeeReceiver private constant referralFeeReceiver = IReferralFeeReceiver(0x29BC86Ad68bB3BD3d54841a8522e0020C1882C22);\n', '\n', '    function unwrapReferralFeeReceiverNoFreeze(FeeItem[] memory items) external {\n', '        for (uint i = 0; i < items.length; i++) {\n', '            try referralFeeReceiver.trade(items[i].mooniswap, items[i].pathToken0) {\n', '            } catch {}\n', '            try referralFeeReceiver.trade(items[i].mooniswap, items[i].pathToken1) {\n', '            } catch {}\n', '        }\n', '    }\n', '\n', '    function unwrapReferralFeeReceiver(FeeItem[] memory items) external {\n', '        for (uint i = 0; i < items.length; i++) {\n', '            referralFeeReceiver.freezeEpoch(items[i].mooniswap);\n', '            try referralFeeReceiver.trade(items[i].mooniswap, items[i].pathToken0) {\n', '            } catch {}\n', '            try referralFeeReceiver.trade(items[i].mooniswap, items[i].pathToken1) {\n', '            } catch {}\n', '        }\n', '    }\n', '\n', '    function freezeEpoch(address[] memory mooniswaps) external {\n', '        for (uint i = 0; i < mooniswaps.length; i++) {\n', '            referralFeeReceiver.freezeEpoch(mooniswaps[i]);\n', '        }\n', '    }\n', '\n', '}']