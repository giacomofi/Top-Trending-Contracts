['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', 'interface IUnifiFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '    function feeTo() external returns(address);\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    \n', '    function feeController() external view returns (address);\n', '    function router() external view returns (address);\n', '}\n', '\n', '// File: openzeppelin-contracts-2.5.1/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'pragma solidity ^0.5.0;\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '    \n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '}\n', '// File: openzeppelin-contracts-2.5.1/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-contracts-2.5.1/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: openzeppelin-contracts-2.5.1/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface UnifiRouter {\n', '  function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '  function addLiquidity(\n', '      address tokenA,\n', '      address tokenB,\n', '      uint amountADesired,\n', '      uint amountBDesired,\n', '      uint amountAMin,\n', '      uint amountBMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '     function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);   \n', '  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'contract SingleAsssetAddLiquidity {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    using Math for uint256;\n', '    address  public  owner ;\n', '    address public  router ;\n', '    address public wETH ;\n', '    address payable owners;\n', '    address public pancakeRouter ;\n', '    address public unifiRouter;\n', '    IUnifiFactory public otherFactory;\n', '\n', '    constructor(address _pancakeRouter,address _unifiRouter,address _routerAdd, address _weth, address _otherFactory) public {\n', '        owner = msg.sender;\n', '        router = _routerAdd;\n', '        pancakeRouter = _pancakeRouter;\n', '        unifiRouter = _unifiRouter;\n', '        wETH = _weth;\n', '  \n', '        otherFactory = IUnifiFactory(_otherFactory);\n', '    }\n', '    function updateRouter (address _newRouter) public {\n', '        require(msg.sender == owner);\n', '        router = _newRouter;\n', '    }\n', '    \n', '    function updatePancakeRouter (address _tradeRouter) public {\n', '        require(msg.sender == owner);\n', '        pancakeRouter = _tradeRouter;\n', '    }\n', '\n', '    function updateOtherFactory (address _factory) public {\n', '        require(msg.sender == owner);\n', '        otherFactory = IUnifiFactory(_factory);\n', '    }\n', '    function updateUnifiRouter (address _tradeRouter) public {\n', '        require(msg.sender == owner);\n', '        unifiRouter = _tradeRouter;\n', '    }\n', '    function updateWETH (address _newWETH) public {\n', '        require(msg.sender ==  owner);\n', '        wETH = _newWETH;\n', '    }\n', '    function getName() external pure returns (string memory) {\n', '        return "singleAssetDepositor";\n', '    }\n', '    \n', ' function withdrawSupplyAsSingleAsset( address receiveToken , address liquidityToken ,address tokenA,address tokenB, address payable to,uint amount, bool toReceiveWNative,uint minOut) external {\n', '      IERC20(liquidityToken).safeTransferFrom(msg.sender,address(this), amount);\n', '      IERC20(liquidityToken).safeApprove(router, 0);    \n', '      IERC20(liquidityToken).safeApprove(router, amount);      \n', '      UnifiRouter(router).removeLiquidity(\n', '          tokenA, \n', '          tokenB, \n', '          amount, \n', '          1, \n', '          1, \n', '          address(this), \n', '          now.add(1800)\n', '        );\n', '        if(address(tokenA) == address(receiveToken)){\n', '            //sell tokenB to wETH\n', '            uint tokenBBalance = IERC20(tokenB).balanceOf(address(this));\n', '             _convertToken(tokenBBalance, tokenB, receiveToken, minOut) ;\n', '        }else if (address(tokenB) == address(receiveToken)){\n', '            uint tokenABalance = IERC20(tokenA).balanceOf(address(this));\n', '             _convertToken(tokenABalance, tokenA,receiveToken , minOut) ;\n', '        }\n', '        uint receivingTokenBalance = IERC20(receiveToken).balanceOf(address(this));\n', '        if(toReceiveWNative){\n', '            IERC20(wETH).safeApprove(router, 0); \n', '            IERC20(wETH).safeApprove(router,receivingTokenBalance );\n', '            IWETH(wETH).withdraw(receivingTokenBalance);\n', '            address(to).transfer(receivingTokenBalance);                  \n', '        }else{\n', '            IERC20(receiveToken).safeTransfer(to,receivingTokenBalance);\n', '        }\n', '     \n', '     \n', '    }\n', '\n', '\n', 'function withdrawSupplyAsOtherSingleAsset( address receiveToken , address liquidityToken ,address tokenA,address tokenB, address payable to,uint amount, address[] calldata path1, address[] calldata path2, bool toReceiveWNative,uint minOut) external {\n', "      require(path1[path1.length - 1] == path2[path2.length -1] , 'Needs to be same token ');\n", '      IERC20(liquidityToken).safeTransferFrom(msg.sender,address(this), amount);\n', '      IERC20(liquidityToken).safeApprove(router, 0);  \n', '      IERC20(liquidityToken).safeApprove(router, amount);      \n', '      UnifiRouter(router).removeLiquidity(\n', '          tokenA, \n', '          tokenB, \n', '          amount, \n', '          1, \n', '          1, \n', '          address(this), \n', '          now.add(1800)\n', '        );\n', '        _convertOtherToken(IERC20(tokenA).balanceOf(address(this)),path1, minOut);\n', '        _convertOtherToken(IERC20(tokenB).balanceOf(address(this)),path2, minOut);           \n', '\n', '        uint receivingTokenBalance = IERC20(receiveToken).balanceOf(address(this));\n', '        if(address(receiveToken) == address(wETH) && toReceiveWNative == true){\n', '            IERC20(wETH).safeApprove(router,0 );\n', '            IERC20(wETH).safeApprove(router,receivingTokenBalance );\n', '              IWETH(wETH).withdraw(receivingTokenBalance);\n', '                address(to).transfer(receivingTokenBalance);              \n', '        }else{\n', '            \n', '        }\n', '        IERC20(receiveToken).safeTransfer(address(to),receivingTokenBalance);       \n', '     \n', '    }\n', '  function convertSingleAssetToLiquidityEth( address requireToken , address to,uint minOut)payable external {\n', '      require(msg.value > 0);\n', '      IWETH(wETH).deposit.value( msg.value)();\n', '      uint256 tokenABalance = IERC20(wETH).balanceOf(address(this));\n', '      if(tokenABalance > 0 ) {\n', '        _convertToken(tokenABalance.div(2),wETH,requireToken,minOut);\n', '        \n', '        uint256 tokenBBalance = IERC20(requireToken).balanceOf(address(this));\n', '\n', '        tokenABalance = IERC20(wETH).balanceOf(address(this));\n', '        IERC20(wETH).safeApprove(router,0 );\n', '        IERC20(wETH).safeApprove(router,tokenABalance );\n', '        IERC20(requireToken).safeApprove(router, 0);\n', '        IERC20(requireToken).safeApprove(router, tokenBBalance);\n', '\n', '        UnifiRouter(router).addLiquidity(\n', '          wETH, \n', '          requireToken, \n', '          tokenABalance, \n', '          tokenBBalance, \n', '          0, \n', '          0, \n', '          to, \n', '          now.add(1800)\n', '        );\n', '      }\n', '      \n', '        tokenABalance = IERC20(wETH).balanceOf(address(this));\n', '       uint256 requireTokenBalance = IERC20(requireToken).balanceOf(address(this));\n', '\n', '      if(tokenABalance > 0 ){\n', '        IERC20(wETH).safeTransfer(to,tokenABalance);\n', '      }\n', '      if(requireTokenBalance > 0 ){\n', '        IERC20(requireToken).safeTransfer(to,requireTokenBalance);\n', '      }\n', '    }\n', '\n', '    function convertSingleAssetToLiquidity(address tokenA, address requireToken , uint amount , address to,uint minOut) external {\n', '      IERC20(tokenA).safeTransferFrom(msg.sender,address(this), amount);\n', '      uint256 tokenABalance = IERC20(tokenA).balanceOf(address(this));\n', '      if(tokenABalance > 0 ) {\n', '        _convertToken(tokenABalance.div(2),tokenA,requireToken,minOut);\n', '        \n', '        uint256 tokenBBalance = IERC20(requireToken).balanceOf(address(this));\n', '\n', '        tokenABalance = IERC20(tokenA).balanceOf(address(this));\n', '\n', '        IERC20(tokenA).safeApprove(router,0 );\n', '        IERC20(requireToken).safeApprove(router, 0);\n', '\n', '        IERC20(tokenA).safeApprove(router,tokenABalance );\n', '        IERC20(requireToken).safeApprove(router, tokenBBalance);\n', '\n', '        UnifiRouter(router).addLiquidity(\n', '          tokenA, \n', '          requireToken,\n', '          tokenABalance,\n', '          tokenBBalance, \n', '          0, \n', '          0, \n', '          to, \n', '          now.add(1800)\n', '        );\n', '      }\n', '       tokenABalance = IERC20(tokenA).balanceOf(address(this));\n', '       uint256 requireTokenBalance = IERC20(requireToken).balanceOf(address(this));\n', '\n', '      if(tokenABalance > 0 ){\n', '        IERC20(tokenA).safeTransfer(to,tokenABalance);\n', '      }\n', '      if(requireTokenBalance > 0 ){\n', '        IERC20(requireToken).safeTransfer(to,requireTokenBalance);\n', '      }\n', '\n', '    }\n', '\n', '    function convertSingleAssetToOtherLiquidity(address depositToken, address requireTokenA,address requireTokenB , uint amount , address to, address[] calldata path1, address[] calldata path2,uint minOut) external {\n', '      IERC20(depositToken).safeTransferFrom(msg.sender,address(this), amount);\n', '           uint256 tokenABalance = 0 ;\n', '           uint256 tokenBBalance = 0 ;\n', '      if(amount > 0 ) {\n', '        _convertOtherToken(amount.div(2),path1,minOut);\n', '        _convertOtherToken(amount.div(2),path2,minOut);    \n', '         tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\n', '         tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\n', '\n', '        IERC20(requireTokenA).safeApprove(router,0 );\n', '        IERC20(requireTokenB).safeApprove(router,0 );\n', '        IERC20(requireTokenA).safeApprove(router,tokenABalance );\n', '        IERC20(requireTokenB).safeApprove(router,tokenBBalance );\n', '        UnifiRouter(router).addLiquidity(\n', '          requireTokenA, \n', '          requireTokenB, \n', '          tokenABalance, \n', '          tokenBBalance, \n', '          0, \n', '          0, \n', '          to, \n', '          now.add(1800)\n', '        );\n', '      }\n', '        tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\n', '        tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\n', '       uint256 baseBalance = IERC20(depositToken).balanceOf(address(this));  \n', '      if(tokenABalance > 0 ){\n', '        IERC20(requireTokenA).safeTransfer(to,tokenABalance);\n', '      }\n', '      if(tokenBBalance > 0 ){\n', '        IERC20(requireTokenB).safeTransfer(to,tokenBBalance);\n', '      }\n', '      if(baseBalance > 0 ){\n', '        IERC20(depositToken).safeTransfer(to,baseBalance);\n', '      }\n', '    }\n', '\n', '   \n', '    function convertSingleAssetToOtherLiquidityETH( address requireTokenA,address requireTokenB  , address to, address[] calldata path1, address[] calldata path2,uint minOut) payable external {\n', '      require(msg.value > 0);\n', '      IWETH(wETH).deposit.value( msg.value)();\n', '       uint256 tokenABalance = 0;\n', '       uint256 tokenBBalance = 0;\n', '      if( msg.value > 0 ) {\n', '        _convertOtherToken( msg.value.div(2),path1,minOut);\n', '        _convertOtherToken( msg.value.div(2),path2,minOut);    \n', '         tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\n', '         tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\n', '\n', '        IERC20(requireTokenA).safeApprove(router,0 );\n', '        IERC20(requireTokenB).safeApprove(router,0 );\n', '        IERC20(requireTokenA).safeApprove(router,tokenABalance );\n', '        IERC20(requireTokenB).safeApprove(router,tokenBBalance );\n', '        UnifiRouter(router).addLiquidity(\n', '          requireTokenA, \n', '          requireTokenB,\n', '          tokenABalance,\n', '          tokenBBalance, \n', '          0,\n', '          0, \n', '          to, \n', '          now.add(10000)\n', '        );\n', '      }\n', '        tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\n', '        tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\n', '       uint256 baseBalance = IERC20(wETH).balanceOf(address(this));  \n', '      if(tokenABalance > 0 ){\n', '        IERC20(requireTokenA).safeTransfer(to,tokenABalance);\n', '      }\n', '      if(tokenBBalance > 0 ){\n', '        IERC20(requireTokenB).safeTransfer(to,tokenBBalance);\n', '      }\n', '      if(baseBalance > 0 ){\n', '        IERC20(wETH).safeTransfer(to,baseBalance);\n', '      }\n', '    }\n', '    function _convertToken(uint _amount, address _tokenIn, address _tokenOut,uint minOut) internal {\n', '        \n', '        address[] memory path = new address[](2);\n', '        path[0] = _tokenIn;\n', '        path[1] = _tokenOut;\n', '        if(otherFactory.getPair(_tokenIn,_tokenOut) == address(0)){\n', '                IERC20(_tokenIn).safeApprove(unifiRouter, 0);\n', '                IERC20(_tokenIn).safeApprove(unifiRouter, _amount);\n', '                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));                      \n', '        }else{\n', '            uint[] memory  pancakeOutput = UnifiRouter(pancakeRouter).getAmountsOut(_amount, path);\n', '            uint[] memory  unifiOutput = UnifiRouter(unifiRouter).getAmountsOut(_amount, path);\n', '            if(pancakeOutput[pancakeOutput.length -1 ] > unifiOutput[unifiOutput.length - 1] ){\n', '       \n', '                IERC20(_tokenIn).safeApprove(pancakeRouter, 0);\n', '                IERC20(_tokenIn).safeApprove(pancakeRouter, _amount);\n', '                UnifiRouter(pancakeRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));         \n', '            }else{\n', '          \n', '                IERC20(_tokenIn).safeApprove(unifiRouter, 0);\n', '                IERC20(_tokenIn).safeApprove(unifiRouter, _amount);\n', '                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \n', '            }\n', '        }\n', '\n', '\n', '    }\n', '\n', '    function _convertOtherToken(uint _amount, address [] memory path,uint minOut) internal {\n', '         uint[]memory pancakeOutput = UnifiRouter(pancakeRouter).getAmountsOut(_amount, path);\n', '         uint[]memory unifiOutput = UnifiRouter(unifiRouter).getAmountsOut(_amount, path);\n', '         \n', '        if(otherFactory.getPair(path[0],path[1]) == address(0)){\n', '            IERC20(path[0]).safeApprove(unifiRouter, 0);\n', '            IERC20(path[0]).safeApprove(unifiRouter, _amount);\n', '            UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \n', '        }else{\n', '         if(pancakeOutput[pancakeOutput.length -1 ] > unifiOutput[unifiOutput.length - 1] ){\n', '                IERC20(path[0]).safeApprove(pancakeRouter, 0);\n', '                IERC20(path[0]).safeApprove(pancakeRouter, _amount);\n', '                UnifiRouter(pancakeRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));         \n', '            }else{\n', '                IERC20(path[0]).safeApprove(unifiRouter, 0);\n', '                IERC20(path[0]).safeApprove(unifiRouter, _amount);\n', '                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \n', '            }           \n', '        }\n', '\n', '    }\n', '    \n', '    function pancakeOutput(uint _amount, address[] memory path) public view returns (uint){\n', '        uint[] memory estimated =    UnifiRouter(pancakeRouter).getAmountsOut(_amount, path) ;\n', '              return estimated[estimated.length-1];\n', '        \n', '    }\n', '    \n', '    function unifiOutput(uint _amount, address[] memory path) public view returns (uint){\n', '        uint[] memory estimated =    UnifiRouter(unifiRouter).getAmountsOut(_amount, path) ;\n', '        return estimated[estimated.length-1];\n', '    }\n', '\n', '\n', '    \n', '    function transferAccidentalTokens(IERC20 token ) external {\n', '\n', '        require(owner != address(0),"UnifiRouter: Not found");\n', '        uint balance = IERC20(token).balanceOf(address(this));\n', '        if(balance > 0 ){\n', '            IERC20(token).transfer(owner ,balance);\n', '        }\n', '    }\n', '\n', '}']