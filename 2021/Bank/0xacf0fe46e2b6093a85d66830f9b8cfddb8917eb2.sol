['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// The following contract is a simplified version of https://github.com/rstormsf/multisender.\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', 'contract Multisend {\n', '    event Multisended(address indexed _from, address[] _to, uint256[] _value);\n', '    event FeeChanged(uint256 _fee);\n', '    event AuthorizedAddrChanged(address _newAuthorizedAddr);\n', '    event Withdrawn(address indexed receiver, uint256 amount);\n', '\n', '    uint256 internal contractFee = 0 ether; // A contract-caller has to pay this fee to get service\n', '    address internal authorizedAddr;\n', '\n', '    constructor() public {\n', '        authorizedAddr = msg.sender;\n', '    }\n', '\n', '    function changeFee(uint256 fee) public {\n', '        require(msg.sender == authorizedAddr, "You are not authorized.");\n', '        contractFee = fee;\n', '        emit FeeChanged(fee);\n', '    }\n', '\n', '    function changeAuthorizedAddr(address newAuthorizedAddr) public {\n', '        require(msg.sender == authorizedAddr, "You are not authorized.");\n', '        authorizedAddr = newAuthorizedAddr;\n', '        emit AuthorizedAddrChanged(newAuthorizedAddr);\n', '    }\n', '\n', '    function withdraw(address payable receiver) public {\n', '        require(msg.sender == authorizedAddr, "You are not authorized.");\n', '        uint256 amount = address(this).balance;\n', '        emit Withdrawn(receiver, amount);\n', '        receiver.transfer(amount);\n', '    }\n', '\n', '    function multisendEther(address[] memory receivers, uint256[] memory amounts) public payable {\n', '        uint256 total = msg.value;\n', '        require(total >= contractFee, "Do not have enough tokens to pay the contract fee.");\n', '        total = total - contractFee;\n', '        uint256 i = 0;\n', '\n', '        for (i; i < receivers.length; i++) {\n', '            require(total >= amounts[i], "Do not have enough tokens to send.");\n', '            total = total - amounts[i];\n', '            address payable receiver = address(uint160(receivers[i]));\n', '            receiver.transfer(amounts[i]);\n', '        }\n', '        emit Multisended(msg.sender, receivers, amounts);\n', '    }\n', '\n', '    function checkContractFee() public view returns(uint){\n', '        return contractFee;\n', '    }\n', '\n', '    function checkAuthorizedAddr() public view returns(address){\n', '        return authorizedAddr;\n', '    }\n', '}']