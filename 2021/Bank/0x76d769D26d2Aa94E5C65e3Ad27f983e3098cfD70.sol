['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.8 https://hardhat.org\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// File @sushiswap/core/contracts/uniswapv2/libraries/[email\xa0protected]\n', '\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '\n', '// File @sushiswap/core/contracts/uniswapv2/libraries/[email\xa0protected]\n', '\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '// File @sushiswap/core/contracts/uniswapv2/interfaces/[email\xa0protected]\n', '\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// File @sushiswap/core/contracts/uniswapv2/libraries/[email\xa0protected]\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @sushiswap/core/contracts/uniswapv2/interfaces/[email\xa0protected]\n', '\n', '\n', 'interface IERC20Uniswap {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/libraries/Orders.sol\n', '\n', '\n', '\n', 'library Orders {\n', '    // keccak256("Order(address maker,address fromToken,address toToken,uint256 amountIn,uint256 amountOutMin,address recipient,uint256 deadline)")\n', '    bytes32 public constant ORDER_TYPEHASH = 0x7c228c78bd055996a44b5046fb56fa7c28c66bce92d9dc584f742b2cd76a140f;\n', '\n', '    struct Order {\n', '        address maker;\n', '        address fromToken;\n', '        address toToken;\n', '        uint256 amountIn;\n', '        uint256 amountOutMin;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    function hash(Order memory order) internal pure returns (bytes32) {\n', '        return\n', '            keccak256(\n', '                abi.encode(\n', '                    ORDER_TYPEHASH,\n', '                    order.maker,\n', '                    order.fromToken,\n', '                    order.toToken,\n', '                    order.amountIn,\n', '                    order.amountOutMin,\n', '                    order.recipient,\n', '                    order.deadline\n', '                )\n', '            );\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/ISettlement.sol\n', '\n', '\n', '\n', 'interface ISettlement {\n', '    event OrderFilled(bytes32 indexed hash, uint256 amountIn, uint256 amountOut);\n', '    event OrderCanceled(bytes32 indexed hash);\n', '    event FeeTransferred(bytes32 indexed hash, address indexed recipient, uint256 amount);\n', '    event FeeSplitTransferred(bytes32 indexed hash, address indexed recipient, uint256 amount);\n', '\n', '    struct FillOrderArgs {\n', '        Orders.Order order;\n', '        uint256 amountToFillIn;\n', '        address[] path;\n', '    }\n', '\n', '    function fillOrder(FillOrderArgs calldata args) external returns (uint256 amountOut);\n', '\n', '    function fillOrders(FillOrderArgs[] calldata args) external returns (uint256[] memory amountsOut);\n', '\n', '    function cancelOrder(Orders.Order calldata order) external;\n', '}\n', '\n', '\n', '// File contracts/libraries/EIP712.sol\n', '\n', '\n', '\n', 'library EIP712 {\n', '    function recover(\n', '        // solhint-disable-next-line var-name-mixedcase\n', '        bytes32 DOMAIN_SEPARATOR,\n', '        bytes32 hash,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal pure returns (address) {\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, hash));\n', '        return ecrecover(digest, v, r, s);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libraries/Bytes32Pagination.sol\n', '\n', '\n', '\n', 'library Bytes32Pagination {\n', '    function paginate(\n', '        bytes32[] memory hashes,\n', '        uint256 page,\n', '        uint256 limit\n', '    ) internal pure returns (bytes32[] memory result) {\n', '        result = new bytes32[](limit);\n', '        for (uint256 i = 0; i < limit; i++) {\n', '            if (page * limit + i >= hashes.length) {\n', '                result[i] = bytes32(0);\n', '            } else {\n', '                result[i] = hashes[page * limit + i];\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/mixins/Ownable.sol\n', '\n', '// solhint-disable-next-line max-line-length\n', '// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n', '\n', '\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner {\n', '        require(_owner == msg.sender, "msg-sender-not-owner");\n', '        _;\n', '    }\n', '\n', '    function _initialize(address owner) internal {\n', '        _owner = owner;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid-address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Settlement.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Settlement is Ownable, ISettlement {\n', '    using SafeMathUniswap for uint256;\n', '    using Orders for Orders.Order;\n', '    using Bytes32Pagination for bytes32[];\n', '\n', '    // Maximum fee= 1%\n', '    uint256 public constant MAX_FEE_NUMERATOR = 100;\n', '    // Maximum fee split = 50%\n', '    uint256 public constant MAX_FEE_SPLIT_NUMERATOR = 5000;\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    bytes32 public immutable DOMAIN_SEPARATOR;\n', '\n', '    // Hash of an order => if canceled\n', '    mapping(bytes32 => bool) public canceledOfHash;\n', '    // Hash of an order => filledAmountIn\n', '    mapping(bytes32 => uint256) public filledAmountInOfHash;\n', '\n', '    address public immutable factory;\n', '\n', '    address public immutable weth;\n', '\n', '    // Address of the Sushi token\n', '    address public immutable sushi;\n', '\n', '    // This address receives (feeSplitNumerator / 10000) of fee for every order filling\n', '    address public immutable feeSplitRecipient;\n', '\n', '    // Used to calculate the total fee of an order\n', '    // Denominator is 10000\n', '    uint256 public feeNumerator;\n', '\n', '    // Used to calculate how big the share going to the relayer is\n', '    // Out of fee, denominator is 10000\n', '    uint256 public feeSplitNumerator;\n', '\n', '    constructor(\n', '        uint256 orderBookChainId,\n', '        address orderBookAddress,\n', '        address owner,\n', '        address _factory,\n', '        address _weth,\n', '        address _sushi,\n', '        address _feeSplitRecipient,\n', '        uint256 _feeNumerator,\n', '        uint256 _feeSplitNumerator\n', '    ) public {\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256("OrderBook"),\n', '                keccak256("1"),\n', '                orderBookChainId,\n', '                orderBookAddress\n', '            )\n', '        );\n', '\n', '        Ownable._initialize(owner);\n', '\n', '        factory = _factory;\n', '        weth = _weth;\n', '        sushi = _sushi;\n', '        feeSplitRecipient = _feeSplitRecipient;\n', '        feeNumerator = _feeNumerator;\n', '        feeSplitNumerator = _feeSplitNumerator;\n', '    }\n', '\n', '    // Updates the fee amount\n', '    function updateFee(uint256 _feeNumerator) public onlyOwner {\n', '        require(_feeNumerator < MAX_FEE_NUMERATOR, "fee-too-high");\n', '        feeNumerator = _feeNumerator;\n', '    }\n', '\n', "    // Updates the fee's split ratio between the relayer and feeSplitRecipient\n", '    function updateFeeSplit(uint256 _feeSplitNumerator) public onlyOwner {\n', '        require(_feeSplitNumerator < MAX_FEE_SPLIT_NUMERATOR, "fee-split-too-high");\n', '        feeSplitNumerator = _feeSplitNumerator;\n', '    }\n', '\n', '    // Fills an order\n', '    function fillOrder(FillOrderArgs memory args) public override returns (uint256 amountOut) {\n', '        // solhint-disable-next-line avoid-tx-origin\n', '        require(msg.sender == tx.origin, "called-by-contract");\n', '        // voids flashloan attack vectors\n', '\n', '        bytes32 hash = args.order.hash();\n', '        // Check if the order is valid\n', '        if (!_validateArgs(args)) {\n', '            return 0;\n', '        }\n', '        // Check if the order is canceled / already fully filled\n', '        if (!_validateStatus(args, hash)) {\n', '            return 0;\n', '        }\n', '        // Check if the signature is valid\n', '        address signer = EIP712.recover(DOMAIN_SEPARATOR, hash, args.order.v, args.order.r, args.order.s);\n', '        if (signer == address(0) || signer != args.order.maker) {\n', '            return 0;\n', '        }\n', '\n', '        // Check the approved amount from maker\n', '        uint256 allowance = IERC20Uniswap(args.order.fromToken).allowance(args.order.maker, address(this));\n', '        if (allowance < args.amountToFillIn) {\n', '            return 0;\n', '        }\n', '        // Calculates fee deducted amountIn and amountOutMin\n', '        (uint256 amountIn, uint256 amountOutMin) = (\n', '            args.amountToFillIn,\n', '            args.order.amountOutMin.mul(args.amountToFillIn) / args.order.amountIn\n', '        );\n', '        uint256 _feeNumerator = feeNumerator;\n', '        uint256 fee = amountIn.mul(_feeNumerator) / 10000;\n', '        if (fee > 0) {\n', '            amountIn = amountIn.sub(fee);\n', '            amountOutMin = amountOutMin.sub(amountOutMin.mul(_feeNumerator) / 10000);\n', '        }\n', '\n', '        // Requires args.amountToFillIn to have already been approved to this\n', '        amountOut = _swapExactTokensForTokens(\n', '            args.order.maker,\n', '            amountIn,\n', '            amountOutMin,\n', '            args.path,\n', '            args.order.recipient\n', '        );\n', '\n', '        if (amountOut > 0) {\n', '            if (fee > 0) {\n', '                _transferFees(args.order.fromToken, args.order.maker, fee, hash);\n', '            }\n', '\n', '            // This line is free from reentrancy issues since UniswapV2Pair prevents from them\n', '            filledAmountInOfHash[hash] = filledAmountInOfHash[hash].add(args.amountToFillIn);\n', '\n', '            emit OrderFilled(hash, args.amountToFillIn, amountOut);\n', '        }\n', '    }\n', '\n', '    // Checks if an order is valid - if it contains all the information required\n', '    function _validateArgs(FillOrderArgs memory args) internal view returns (bool) {\n', '        return\n', '            args.order.maker != address(0) &&\n', '            args.order.fromToken != address(0) &&\n', '            args.order.toToken != address(0) &&\n', '            args.order.fromToken != args.order.toToken &&\n', '            args.order.amountIn != uint256(0) &&\n', '            args.order.amountOutMin != uint256(0) &&\n', '            args.order.recipient != address(0) &&\n', '            args.order.deadline != uint256(0) &&\n', '            args.order.deadline >= block.timestamp &&\n', '            args.amountToFillIn > 0 &&\n', '            args.path.length >= 2 &&\n', '            args.order.fromToken == args.path[0] &&\n', '            args.order.toToken == args.path[args.path.length - 1];\n', '    }\n', '\n', '    // Checks if an order is canceled / already fully filled\n', '    function _validateStatus(FillOrderArgs memory args, bytes32 hash) internal view returns (bool) {\n', '        if (canceledOfHash[hash]) {\n', '            return false;\n', '        }\n', '        if (filledAmountInOfHash[hash].add(args.amountToFillIn) > args.order.amountIn) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // Transfers the fees to the feeSplitRecipient and the relayer\n', '    function _transferFees(\n', '        address fromToken,\n', '        address maker,\n', '        uint256 amount,\n', '        bytes32 hash\n', '    ) internal {\n', '        // If fromToken is weth then path is [fromToken, sushi], otherwise [fromToken, weth, sushi]\n', '        address _weth = weth;\n', '        address[] memory path = new address[](fromToken == _weth ? 2 : 3);\n', '        path[path.length - 1] = sushi;\n', '        path[path.length - 2] = _weth;\n', '        if (fromToken != _weth) {\n', '            path[0] = fromToken;\n', '        }\n', '        uint256 amountOfSushi = _swapExactTokensForTokens(maker, amount, 0, path, address(this));\n', '        require(amountOfSushi > 0, "swap-to-sushi-failure");\n', '\n', '        uint256 feeSplit = amountOfSushi.mul(feeSplitNumerator) / 10000;\n', '        if (feeSplit > 0) {\n', '            address _recipient = feeSplitRecipient;\n', '            TransferHelper.safeTransfer(sushi, _recipient, feeSplit);\n', '            emit FeeSplitTransferred(hash, _recipient, feeSplit);\n', '        }\n', '        uint256 remainder = amountOfSushi.sub(feeSplit);\n', '        TransferHelper.safeTransfer(sushi, msg.sender, remainder);\n', '        emit FeeTransferred(hash, msg.sender, remainder);\n', '    }\n', '\n', '    // Swaps an exact amount of tokens for another token through the path passed as an argument\n', '    // Returns the amount of the final token\n', '    function _swapExactTokensForTokens(\n', '        address from,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] memory path,\n', '        address to\n', '    ) internal returns (uint256 amountOut) {\n', '        uint256[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '        if (amounts[amounts.length - 1] < amountOutMin) {\n', '            return 0;\n', '        }\n', '        TransferHelper.safeTransferFrom(path[0], from, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn);\n', '        _swap(amounts, path, to);\n', '        amountOut = amounts[amounts.length - 1];\n', '    }\n', '\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swap(\n', '        uint256[] memory amounts,\n', '        address[] memory path,\n', '        address _to\n', '    ) internal virtual {\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n', '            uint256 amountOut = amounts[i + 1];\n', '            (uint256 amount0Out, uint256 amount1Out) = input == token0\n', '                ? (uint256(0), amountOut)\n', '                : (amountOut, uint256(0));\n', '            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n', '            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n', '                amount0Out,\n', '                amount1Out,\n', '                to,\n', '                new bytes(0)\n', '            );\n', '        }\n', '    }\n', '\n', '    // Fills multiple orders passed as an array\n', '    function fillOrders(FillOrderArgs[] memory args) public override returns (uint256[] memory amountsOut) {\n', '        bool filled = false;\n', '        amountsOut = new uint256[](args.length);\n', '        for (uint256 i = 0; i < args.length; i++) {\n', "            // Returns zero of the order wasn't filled\n", '            amountsOut[i] = fillOrder(args[i]);\n', '            if (amountsOut[i] > 0) {\n', '                // At least one order was filled\n', '                filled = true;\n', '            }\n', '        }\n', '        require(filled, "no-order-filled");\n', '    }\n', '\n', '    // Cancels an order, has to been called by order maker\n', '    function cancelOrder(Orders.Order memory order) public override {\n', '        bytes32 hash = order.hash();\n', '        address signer = EIP712.recover(DOMAIN_SEPARATOR, hash, order.v, order.r, order.s);\n', '        require(signer != address(0) && signer == order.maker, "invalid-signature");\n', '        require(msg.sender == order.maker, "not-called-by-maker");\n', '        require(!canceledOfHash[hash], "already-canceled");\n', '        canceledOfHash[hash] = true;\n', '\n', '        emit OrderCanceled(hash);\n', '    }\n', '}']