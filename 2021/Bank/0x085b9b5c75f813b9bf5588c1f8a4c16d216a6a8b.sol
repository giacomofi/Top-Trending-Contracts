['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', ' \n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IBEP20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', ' \n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', ' \n', 'contract SHIBCHU is Context, IBEP20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping (address => bool) private _isExcluded;\n', '    mapping (address => bool) private _isDev;\n', '     mapping (address => bool) private _isBurn;\n', '    address[] private _excluded;\n', '    address[] private _dev;\n', '    address[] private _burn;\n', "    string  private constant _NAME = 'Shiba Chulo';\n", "    string  private constant _SYMBOL = 'SHIBCHU';\n", '    uint8   private constant _DECIMALS = 9;\n', '    uint256 private constant _MAX = ~uint256(0);\n', '    uint256 private constant _DECIMALFACTOR = 10 ** uint256(_DECIMALS);\n', '    uint256 private constant _GRANULARITY = 100;\n', '    uint256 private _tTotal = 1000000000000 * _DECIMALFACTOR;\n', '    uint256 private _rTotal = (_MAX - (_MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '    uint256 private _tBurnTotal;\n', '    uint256 private _tDevTotal;\n', '    uint256 private _TAX_FEE = 150; // 1.5% BACK TO HOLDERS\n', '    uint256 private _BURN_FEE = 200; // 2% BURNED\n', '    uint256 private _DEV_FEE = 150; // 1.5% TO DEV/MARKETING WALLET\n', '    uint256 private constant _MAX_TX_SIZE = 10000000000 * _DECIMALFACTOR;\n', '    uint256 private ORIG_TAX_FEE = _TAX_FEE;\n', '    uint256 private ORIG_BURN_FEE = _BURN_FEE;\n', '    uint256 private ORIG_DEV_FEE = _DEV_FEE;\n', ' \n', '    constructor () {\n', '        _rOwned[_msgSender()] = _rTotal;\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', ' \n', '    function name() public pure returns (string memory) {\n', '        return _NAME;\n', '    }\n', '    function symbol() public pure returns (string memory) {\n', '        return _SYMBOL;\n', '    }\n', '    function decimals() public pure returns (uint8) {\n', '        return _DECIMALS;\n', '    }\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '    function isDev(address account) public view returns (bool) {\n', '        return _isDev[account];\n', '    }\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '    function totalBurn() public view returns (uint256) {\n', '        return _tBurnTotal;\n', '    }\n', '    function totalDev() public view returns (uint256) {\n', '        return _tDevTotal;\n', '    }\n', '    function deliver(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,,,) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '    function excludeAccount(address account) external onlyOwner() {\n', "        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude DEX router.');\n", '        require(!_isExcluded[account], "Account is already excluded");\n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already excluded");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    function setAsDevAccount(address account) external onlyOwner() {\n', '        require(!_isDev[account], "Account is already dev account");\n', '        _isDev[account] = true;\n', '        _dev.push(account);\n', '    }\n', '    function setAsBurnAccount(address account) external onlyOwner() {\n', '        require(!_isBurn[account], "Account is already burning account");\n', '        _isBurn[account] = true;\n', '        _burn.push(account);\n', '    }\n', '    function _setTaxFee(uint256 taxFee) external onlyOwner() {\n', '        _TAX_FEE = taxFee* 100;\n', '    }\n', '    function _setBurnFee(uint256 burnFee) external onlyOwner() {\n', '        _BURN_FEE = burnFee* 100;\n', '    }\n', '    function _setDevFee(uint256 devFee) external onlyOwner() {\n', '        _DEV_FEE = devFee* 100;\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "BEP20: approve from the zero address");\n', '        require(spender != address(0), "BEP20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "BEP20: transfer from the zero address");\n', '        require(recipient != address(0), "BEP20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        bool takeFee = true;\n', '        if (_isDev[sender] || _isDev[recipient] || _isExcluded[recipient]) {\n', '            takeFee = false;\n', '        }\n', '        if (!takeFee) removeAllFee();\n', '        if (sender != owner() && recipient != owner())\n', '            require(amount <= _MAX_TX_SIZE, "Transfer amount exceeds the maxTxAmount.");\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '        if (!takeFee) restoreAllFee();\n', '    }\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tDev) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        _standardTransferContent(sender, recipient, rAmount, rTransferAmount);\n', '        _sendToDev(tDev, sender);\n', '        _sendToBurn(tBurn, sender);\n', '        _reflectFee(rFee, rBurn, rDev, tFee, tBurn, tDev);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _standardTransferContent(address sender, address recipient, uint256 rAmount, uint256 rTransferAmount) private {\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '    }\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tDev) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        _excludedFromTransferContent(sender, recipient, tTransferAmount, rAmount, rTransferAmount);\n', '        _sendToDev(tDev, sender);\n', '        _sendToBurn(tBurn, sender);\n', '        _reflectFee(rFee, rBurn, rDev, tFee, tBurn, tDev);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _excludedFromTransferContent(address sender, address recipient, uint256 tTransferAmount, uint256 rAmount, uint256 rTransferAmount) private {\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '    }\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tDev) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        _excludedToTransferContent(sender, recipient, tAmount, rAmount, rTransferAmount);\n', '        _sendToDev(tDev, sender);\n', '        _sendToBurn(tBurn, sender);\n', '        _reflectFee(rFee, rBurn, rDev, tFee, tBurn, tDev);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _excludedToTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 rTransferAmount) private {\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '    }\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tDev) = _getValues(tAmount);\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        _bothTransferContent(sender, recipient, tAmount, rAmount, tTransferAmount, rTransferAmount);\n', '        _sendToDev(tDev, sender);\n', '        _sendToBurn(tBurn, sender);\n', '        _reflectFee(rFee, rBurn, rDev, tFee, tBurn, tDev);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    function _bothTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '    }\n', '    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 rDev, uint256 tFee, uint256 tBurn, uint256 tDev) private {\n', '        _rTotal = _rTotal.sub(rFee).sub(rBurn).sub(rDev);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '        _tBurnTotal = _tBurnTotal.add(tBurn);\n', '        _tDevTotal = _tDevTotal.add(tDev);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '    }\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tFee, uint256 tBurn, uint256 tDev) = _getTBasics(tAmount, _TAX_FEE, _BURN_FEE, _DEV_FEE);\n', '        uint256 tTransferAmount = getTTransferAmount(tAmount, tFee, tBurn, tDev);\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rFee) = _getRBasics(tAmount, tFee, currentRate);\n', '        uint256 rTransferAmount = _getRTransferAmount(rAmount, rFee, tBurn, tDev, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn, tDev);\n', '    }\n', '    function _getTBasics(uint256 tAmount, uint256 taxFee, uint256 burnFee, uint256 devFee) private pure returns (uint256, uint256, uint256) {\n', '        uint256 tFee = ((tAmount.mul(taxFee)).div(_GRANULARITY)).div(100);\n', '        uint256 tBurn = ((tAmount.mul(burnFee)).div(_GRANULARITY)).div(100);\n', '        uint256 tDev = ((tAmount.mul(devFee)).div(_GRANULARITY)).div(100);\n', '        return (tFee, tBurn, tDev);\n', '    }\n', '    function getTTransferAmount(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tDev) private pure returns (uint256) {\n', '        return tAmount.sub(tFee).sub(tBurn).sub(tDev);\n', '    }\n', '    function _getRBasics(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        return (rAmount, rFee);\n', '    }\n', '    function _getRTransferAmount(uint256 rAmount, uint256 rFee, uint256 tBurn, uint256 tDev, uint256 currentRate) private pure returns (uint256) {\n', '        uint256 rBurn = tBurn.mul(currentRate);\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rDev);\n', '        return rTransferAmount;\n', '    }\n', '    function _getRate() private view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '    function _getCurrentSupply() private view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '    function _sendToDev(uint256 tDev, address sender) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rDev = tDev.mul(currentRate);\n', '        address currentDev = _dev[0];\n', '        _rOwned[currentDev] = _rOwned[currentDev].add(rDev);\n', '        _tOwned[currentDev] = _tOwned[currentDev].add(tDev);\n', '        emit Transfer(sender, currentDev, tDev);\n', '    }\n', '    function _sendToBurn(uint256 tBurn, address sender) private {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rBurn = tBurn.mul(currentRate);\n', '        address currentBurn = _burn[0];\n', '        _rOwned[currentBurn] = _rOwned[currentBurn].add(rBurn);\n', '        _tOwned[currentBurn] = _tOwned[currentBurn].add(tBurn);\n', '        emit Transfer(sender, currentBurn, tBurn);\n', '    }\n', '    function removeAllFee() private {\n', '        if(_TAX_FEE == 0 && _BURN_FEE == 0 && _DEV_FEE == 0) return;\n', '        ORIG_TAX_FEE = _TAX_FEE;\n', '        ORIG_BURN_FEE = _BURN_FEE;\n', '        ORIG_DEV_FEE = _DEV_FEE;\n', '        _TAX_FEE = 0;\n', '        _BURN_FEE = 0;\n', '        _DEV_FEE = 0;\n', '    }\n', '    function restoreAllFee() private {\n', '        _TAX_FEE = ORIG_TAX_FEE;\n', '        _BURN_FEE = ORIG_BURN_FEE;\n', '        _DEV_FEE = ORIG_DEV_FEE;\n', '    }\n', '    function _getTaxFee() private view returns(uint256) {\n', '        return _TAX_FEE;\n', '    }\n', '    function _getMaxTxAmount() private pure returns(uint256) {\n', '        return _MAX_TX_SIZE;\n', '    }\n', '}']