['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '// File: contracts/SmartRoute/intf/IDODOAdapter.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IDODOAdapter {\n', '    \n', '    function sellBase(address to, address pool, bytes memory data) external;\n', '\n', '    function sellQuote(address to, address pool, bytes memory data) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IUniswapV3SwapCallback.sol\n', '\n', '\n', '\n', '/// @title Callback for IUniswapV3PoolActions#swap\n', '/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\n', 'interface IUniswapV3SwapCallback {\n', '    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n', '    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n', '    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n', '    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n', '    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n', '    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n', '    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n', '    function uniswapV3SwapCallback(\n', '        int256 amount0Delta,\n', '        int256 amount1Delta,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IUniV3.sol\n', '\n', '\n', '\n', 'interface IUniV3 {\n', '    function swap(\n', '        address recipient,\n', '        bool zeroForOne,\n', '        int256 amountSpecified,\n', '        uint160 sqrtPriceLimitX96,\n', '        bytes calldata data\n', '    ) external returns (int256 amount0, int256 amount1);\n', '\n', '}\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/SmartRoute/lib/UniversalERC20.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library UniversalERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(\n', '        IERC20 token,\n', '        address payable to,\n', '        uint256 amount\n', '    ) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                token.safeTransfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function universalApproveMax(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        uint256 allowance = token.allowance(address(this), to);\n', '        if (allowance < amount) {\n', '            if (allowance > 0) {\n', '                token.safeApprove(to, 0);\n', '            }\n', '            token.safeApprove(to, uint256(-1));\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '\n', '    function tokenBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n', '        return token.balanceOf(who);\n', '    }\n', '\n', '    function isETH(IERC20 token) internal pure returns (bool) {\n', '        return token == ETH_ADDRESS;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/TickMath.sol\n', '\n', '\n', '\n', '/// @title Math library for computing sqrt prices from ticks and vice versa\n', '/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n', '/// prices between 2**-128 and 2**128\n', 'library TickMath {\n', '    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n', '    int24 internal constant MIN_TICK = -887272;\n', '    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n', '    int24 internal constant MAX_TICK = -MIN_TICK;\n', '\n', '    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n', '    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n', '    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n', '    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n', '\n', '    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n', '    /// @dev Throws if |tick| > max tick\n', '    /// @param tick The input tick for the above formula\n', '    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n', '    /// at the given tick\n', '    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n', '        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n', "        require(absTick <= uint256(MAX_TICK), 'T');\n", '\n', '        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n', '        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n', '        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n', '        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n', '        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n', '        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n', '        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n', '        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n', '        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n', '        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n', '        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n', '        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n', '        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n', '        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n', '        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n', '        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n', '        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n', '        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n', '        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n', '        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n', '\n', '        if (tick > 0) ratio = type(uint256).max / ratio;\n', '\n', '        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n', '        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n', '        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n', '        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n', '    }\n', '\n', '    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n', '    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n', '    /// ever return.\n', '    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n', '    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n', '    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n', '        // second inequality must be < because the price can never reach the price at the max tick\n', "        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n", '        uint256 ratio = uint256(sqrtPriceX96) << 32;\n', '\n', '        uint256 r = ratio;\n', '        uint256 msb = 0;\n', '\n', '        assembly {\n', '            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(5, gt(r, 0xFFFFFFFF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(4, gt(r, 0xFFFF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(3, gt(r, 0xFF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(2, gt(r, 0xF))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := shl(1, gt(r, 0x3))\n', '            msb := or(msb, f)\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            let f := gt(r, 0x1)\n', '            msb := or(msb, f)\n', '        }\n', '\n', '        if (msb >= 128) r = ratio >> (msb - 127);\n', '        else r = ratio << (127 - msb);\n', '\n', '        int256 log_2 = (int256(msb) - 128) << 64;\n', '\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(63, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(62, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(61, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(60, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(59, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(58, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(57, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(56, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(55, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(54, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(53, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(52, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(51, f))\n', '            r := shr(f, r)\n', '        }\n', '        assembly {\n', '            r := shr(127, mul(r, r))\n', '            let f := shr(128, r)\n', '            log_2 := or(log_2, shl(50, f))\n', '        }\n', '\n', '        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n', '\n', '        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n', '        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n', '\n', '        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IWETH.sol\n', '\n', '\n', '\n', 'interface IWETH {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 wad\n', '    ) external returns (bool);\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/adapter/UniV3Adapter.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', "//import {TickMath} from '@uniswap/v3-core/contracts/libraries/TickMath.sol';\n", '\n', '// to adapter like dodo V1\n', 'contract UniV3Adapter is IDODOAdapter, IUniswapV3SwapCallback {\n', '    using SafeMath for uint;\n', '\n', '    // ============ Storage ============\n', '\n', '    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public immutable _WETH_;\n', '\n', '    constructor (\n', '        address payable weth\n', '    ) public {\n', '        _WETH_ = weth;\n', '    }\n', '\n', '    function _uniV3Swap(address to, address pool, uint160 sqrtX96, bytes memory data) internal {\n', '        (address fromToken, address toToken, uint24 fee) = abi.decode(data, (address, address, uint24));\n', '        \n', '        uint256 sellAmount = IERC20(fromToken).balanceOf(address(this));\n', '        bool zeroForOne = fromToken < toToken;\n', '\n', '        // transfer\n', '        //IERC20(fromToken).transfer(pool, sellAmount);\n', '        // swap\n', '        IUniV3(pool).swap(\n', '            to, \n', '            zeroForOne, \n', '            int256(sellAmount), \n', '            sqrtX96 == 0\n', '                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n', '                : sqrtX96,\n', '            data\n', '        );\n', '    }\n', '\n', '    function sellBase(address to, address pool, bytes memory moreInfo) external override {\n', '        (uint160 sqrtX96, bytes memory data) = abi.decode(moreInfo, (uint160, bytes));\n', '        _uniV3Swap(to, pool, sqrtX96, data);\n', '    }\n', '\n', '    function sellQuote(address to, address pool, bytes memory moreInfo) external override {\n', '        (uint160 sqrtX96, bytes memory data) = abi.decode(moreInfo, (uint160, bytes));\n', '        _uniV3Swap(to, pool, sqrtX96, data);\n', '    }\n', '\n', '\n', '    // for uniV3 callback\n', '\n', '    function uniswapV3SwapCallback(\n', '        int256 amount0Delta,\n', '        int256 amount1Delta,\n', '        bytes calldata _data\n', '    ) external override {\n', '        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n', '        (address tokenIn, address tokenOut, uint24 fee) = abi.decode(_data, (address, address, uint24));\n', '\n', '        (bool isExactInput, uint256 amountToPay) =\n', '            amount0Delta > 0\n', '                ? (tokenIn < tokenOut, uint256(amount0Delta))\n', '                : (tokenOut < tokenIn, uint256(amount1Delta));\n', '        if (isExactInput) {\n', '            pay(tokenIn, address(this), msg.sender, amountToPay);\n', '        } else {           \n', '            tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\n', '            pay(tokenIn, address(this), msg.sender, amountToPay);\n', '        }\n', '    }\n', '\n', '    /// @param token The token to pay\n', '    /// @param payer The entity that must pay\n', '    /// @param recipient The entity that will receive payment\n', '    /// @param value The amount to pay\n', '    function pay(\n', '        address token,\n', '        address payer,\n', '        address recipient,\n', '        uint256 value\n', '    ) internal {\n', '        if (token == _WETH_ && address(this).balance >= value) {\n', '            // pay with WETH9\n', '            IWETH(_WETH_).deposit{value: value}(); // wrap only what is needed to pay\n', '            IWETH(_WETH_).transfer(recipient, value);\n', '        } else if (payer == address(this)) {\n', '            // pay with tokens already in the contract (for the exact input multihop case)\n', '            SafeERC20.safeTransfer(IERC20(token), recipient, value);\n', '        } else {\n', '            // pull payment\n', '            SafeERC20.safeTransferFrom(IERC20(token), payer, recipient, value);\n', '        }\n', '    }\n', '\n', '}']