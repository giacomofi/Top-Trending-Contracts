['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', '                "Address: low-level static call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    //     unchecked {\n', '    //         uint256 oldAllowance = token.allowance(address(this), spender);\n', '    //         require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '    //         uint256 newAllowance = oldAllowance - value;\n', '    //         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    //     }\n', '    // }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    address private _dev;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        _dev = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function dev() public view returns (address) {\n', '        return _dev;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyDev() {\n', '        require(_dev == _msgSender(), "Ownable: caller is not the dev");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function transferDevship(address newDev) public virtual onlyDev {\n', '        require(newDev != address(0), "Ownable: new dev is the zero address");\n', '        _dev = newDev;\n', '    }\n', '}\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) =\n', '            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0\n', '            ? (reserve0, reserve1)\n', '            : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");\n', '        require(\n', '            reserveA > 0 && reserveB > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) =\n', '                getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) =\n', '                getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// Token interface\n', 'interface TokenInterface is IERC20 {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'contract SwapBot is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for TokenInterface;\n', '\n', '    uint256 private _ownerAmount;\n', '    uint256 private _devAmount;\n', '    // States\n', '    uint16 private _devFee;\n', '\n', '    TokenInterface private _weth;\n', '\n', '    address[] public _routers;\n', '    address[] private _runners;\n', '\n', '    struct Root {\n', '        uint8[] routerIds;\n', '        address[] inTokens;\n', '        uint256 startAmount;\n', '    }\n', '\n', '    modifier onlyRunner() {\n', '        (bool exist, ) = checkRunner(_msgSender());\n', '        require(exist, "caller is not the runner");\n', '        _;\n', '    }\n', '\n', '    event BadRoots(uint256 startAmount);\n', '    event BadRoot(\n', '        address indexed startToken,\n', '        address indexed endToken,\n', '        uint256 startAmount\n', '    );\n', '    event GoldRoot(\n', '        address indexed startToken,\n', '        address indexed endToken,\n', '        uint256 startAmount\n', '    );\n', '    event TestRun(\n', '        uint8 routerId,\n', '        address inToken,\n', '        address outToken,\n', '        uint256 expectedOutAmount,\n', '        uint256 realAmountOut\n', '    );\n', '\n', '    constructor() {\n', '        _weth = TokenInterface(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '        _routers.push(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n', '        _routers.push(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\n', '\n', '        _runners.push(_msgSender());\n', '\n', '        _ownerAmount = 0;\n', '        _devAmount = 0;\n', '        _devFee = 3000; // dev fee is 10%, must be divided by 10,000 when calculating\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function routerLength() public view returns (uint8) {\n', '        return uint8(_routers.length);\n', '    }\n', '\n', '    function checkRouter(address routerAddress)\n', '        public\n', '        view\n', '        returns (bool exist, uint8 index)\n', '    {\n', '        uint8 length = routerLength();\n', '        exist = false;\n', '        for (uint8 i = 0; i < length; i++) {\n', '            if (_routers[i] == routerAddress) {\n', '                exist = true;\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addRouter(address routerAddress) external onlyDev {\n', '        (bool exist, ) = checkRouter(routerAddress);\n', '        require(!exist, "This router address already exists.");\n', '        require(routerAddress != address(0), "Invalid router address.");\n', '\n', '        _routers.push(address(routerAddress));\n', '    }\n', '\n', '    function setRouter(uint8 index, address routerAddress) external onlyDev {\n', '        uint8 length = routerLength();\n', '        require(index < length, "Invalid index of router");\n', '        require(routerAddress != address(0), "Invalid router address.");\n', '\n', '        _routers[index] = routerAddress;\n', '    }\n', '\n', '    function removeRouter(address routerAddress) external onlyDev {\n', '        require(routerAddress != address(0), "Invalid router address.");\n', '\n', '        uint8 length = routerLength();\n', '        for (uint8 i = 0; i < length; i++) {\n', '            if (_routers[i] == routerAddress) {\n', '                _routers[i] = address(0);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function runnerLength() public view returns (uint8) {\n', '        return uint8(_runners.length);\n', '    }\n', '\n', '    function checkRunner(address runner)\n', '        public\n', '        view\n', '        returns (bool exist, uint8 index)\n', '    {\n', '        uint8 length = runnerLength();\n', '        exist = false;\n', '        for (uint8 i = 0; i < length; i++) {\n', '            if (_runners[i] == runner) {\n', '                exist = true;\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addRunner(address runner) external onlyDev {\n', '        (bool exist, ) = checkRunner(runner);\n', '        require(!exist, "This runner address already exists.");\n', '        require(runner != address(0), "Invalid runner address.");\n', '\n', '        _runners.push(address(runner));\n', '    }\n', '\n', '    function setRunner(uint8 index, address runner) external onlyDev {\n', '        uint8 length = runnerLength();\n', '        require(index < length, "Invalid index of runner");\n', '        require(runner != address(0), "Invalid runner address.");\n', '\n', '        _runners[index] = runner;\n', '    }\n', '\n', '    function removeRunner(address runner) external onlyDev {\n', '        require(runner != address(0), "Invalid runner address.");\n', '\n', '        uint8 length = runnerLength();\n', '        for (uint8 i = 0; i < length; i++) {\n', '            if (_runners[i] == runner) {\n', '                _runners[i] = address(0);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getDevFee() public view returns (uint16) {\n', '        return _devFee;\n', '    }\n', '\n', '    function setDevFee(uint16 fee) external onlyOwner {\n', '        _devFee = fee;\n', '    }\n', '\n', '    function ownerProfit() public view returns (uint256) {\n', '        return _ownerAmount;\n', '    }\n', '\n', '    function withdrawProfitOwner(address owner)\n', '        external\n', '        onlyOwner\n', '        returns (bool sent)\n', '    {\n', '        require(_ownerAmount > 0, "Withdraw amount should be more than zero.");\n', '\n', '        if (owner != address(0)) {\n', '            (sent, ) = owner.call{value: _ownerAmount}("");\n', '            require(sent, "Failed to send Ether");\n', '            _ownerAmount = 0;\n', '        }\n', '    }\n', '\n', '    function devProfit() public view returns (uint256) {\n', '        return _devAmount;\n', '    }\n', '\n', '    function withdrawProfitDev(address dev)\n', '        external\n', '        onlyDev\n', '        returns (bool sent)\n', '    {\n', '        require(_devAmount > 0, "Withdraw amount should be more than zero.");\n', '        if (dev != address(0)) {\n', '            (sent, ) = dev.call{value: _devAmount}("");\n', '            require(sent, "Failed to send Ether");\n', '            _devAmount = 0;\n', '        }\n', '    }\n', '\n', '    function emergencyWithdraw() external onlyDev {\n', '        require(_msgSender() != address(0), "Invalid dev");\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function removeOddTokens(address[] memory tokens, address to)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(to != address(0), "Invalid address to send odd tokens");\n', '        uint256 len = tokens.length;\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            uint256 balance =\n', '                TokenInterface(tokens[i]).balanceOf(address(this));\n', '            if (balance > 0) {\n', '                if (tokens[i] == address(_weth)) {\n', '                    _weth.withdraw(balance);\n', '                    (bool sent, ) = to.call{value: balance}("");\n', '                    require(sent, "Failed to send ether");\n', '                } else {\n', '                    TokenInterface(tokens[i]).transfer(to, balance);\n', '                }\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function checkEstimatedProfit(\n', '        uint8[] memory routerIds,\n', '        uint256 startAmount,\n', '        address[] memory inTokens\n', '    ) public view returns (uint256 profit, uint256 endAmount) {\n', '        require(routerIds.length > 1, "Est: Invalid router id array.");\n', '        require(inTokens.length > 1, "Est: Invalid token array.");\n', '        require(\n', '            routerIds.length + 1 == inTokens.length,\n', '            "Est: Rotuers and tokens must have same length."\n', '        );\n', '\n', '        uint256 len = inTokens.length;\n', '        uint256 amountIn = startAmount;\n', '\n', '        for (uint256 i = 0; i < len - 1; i++) {\n', '            IUniswapV2Router02 router =\n', '                IUniswapV2Router02(_routers[routerIds[i]]);\n', '            IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n', '\n', '            address inToken = inTokens[i];\n', '            address outToken = inTokens[i + 1];\n', '\n', '            IUniswapV2Pair pair =\n', '                IUniswapV2Pair(factory.getPair(inToken, outToken));\n', '\n', '            amountIn = getAmountOutFor(pair, amountIn, inToken);\n', '        }\n', '\n', '        profit = amountIn <= startAmount ? 0 : amountIn.sub(startAmount);\n', '        endAmount = amountIn;\n', '    }\n', '\n', '    function testCheckEstimatedOutPut(\n', '        uint8 routerId,\n', '        uint256 amountIn,\n', '        address inToken,\n', '        address outToken\n', '    ) public view returns (uint256 outAmount) {\n', '        IUniswapV2Router02 router = IUniswapV2Router02(_routers[routerId]);\n', '        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n', '        IUniswapV2Pair pair =\n', '            IUniswapV2Pair(factory.getPair(inToken, outToken));\n', '\n', '        outAmount = getAmountOutFor(pair, amountIn, inToken);\n', '    }\n', '\n', '    function getAmountOutFor(\n', '        IUniswapV2Pair pair,\n', '        uint256 amountIn,\n', '        address inToken\n', '    ) internal view returns (uint256 outAmount) {\n', '        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '\n', '        if (pair.token0() == inToken) {\n', '            outAmount = UniswapV2Library.getAmountOut(\n', '                amountIn,\n', '                reserve0,\n', '                reserve1\n', '            );\n', '        } else {\n', '            outAmount = UniswapV2Library.getAmountOut(\n', '                amountIn,\n', '                reserve1,\n', '                reserve0\n', '            );\n', '        }\n', '    }\n', '\n', '    function run(\n', '        uint8[] memory routerIds,\n', '        address[] memory inTokens,\n', '        uint256 startAmount\n', '    ) public onlyRunner returns (uint256) {\n', '        TokenInterface startToken = TokenInterface(inTokens[0]);\n', '        uint256 balanceForStartToken;\n', '        uint256 newBalanceForStartToken;\n', '\n', '        if (address(startToken) != address(_weth)) {\n', '            balanceForStartToken = startToken.balanceOf(address(this));\n', '        } else {\n', '            balanceForStartToken = address(this).balance;\n', '        }\n', '\n', '        require(\n', '            balanceForStartToken > 0 && balanceForStartToken >= startAmount,\n', '            "run: Invalid swap amount"\n', '        );\n', '\n', '        uint256 len = inTokens.length;\n', '        uint256 amountIn = startAmount;\n', '\n', '        for (uint256 i = 0; i < len - 1; i++) {\n', '            IUniswapV2Router02 iRouter =\n', '                IUniswapV2Router02(_routers[routerIds[i]]);\n', '            address inToken = inTokens[i];\n', '            address outToken = inTokens[i + 1];\n', '\n', '            if (inToken == address(_weth)) {\n', '                amountIn = _swapEthToToken(iRouter, amountIn, outToken);\n', '            } else if (outToken == address(_weth)) {\n', '                amountIn = _swapTokenToEth(iRouter, amountIn, inToken);\n', '            } else {\n', '                amountIn = _swapTokenToToken(\n', '                    iRouter,\n', '                    amountIn,\n', '                    inToken,\n', '                    outToken\n', '                );\n', '            }\n', '        }\n', '\n', '        if (address(startToken) != address(_weth)) {\n', '            newBalanceForStartToken = startToken.balanceOf(address(this));\n', '        } else {\n', '            newBalanceForStartToken = address(this).balance;\n', '        }\n', '\n', '        uint256 profit = newBalanceForStartToken.sub(balanceForStartToken);\n', '\n', '        return profit;\n', '    }\n', '\n', '    function bulkRun(Root[] memory roots)\n', '        external\n', '        onlyRunner\n', '        returns (bool)\n', '    {\n', '        uint256 length = roots.length;\n', '        require(length > 0, "Invalid root data");\n', '\n', '        uint256 maxProfit = 0;\n', '        uint256 goalRoot = 0;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            Root memory root = roots[i];\n', '\n', '            (uint256 profit, ) =\n', '                checkEstimatedProfit(\n', '                    root.routerIds,\n', '                    root.startAmount,\n', '                    root.inTokens\n', '                );\n', '\n', '            uint256 len = root.inTokens.length;\n', '\n', '            if (profit > 0) {\n', '                emit GoldRoot(\n', '                    root.inTokens[0],\n', '                    root.inTokens[len - 1],\n', '                    root.startAmount\n', '                );\n', '            } else {\n', '                emit BadRoot(\n', '                    root.inTokens[0],\n', '                    root.inTokens[len - 1],\n', '                    root.startAmount\n', '                );\n', '            }\n', '\n', '            if (profit > maxProfit) {\n', '                maxProfit = profit;\n', '                goalRoot = i;\n', '            }\n', '        }\n', '\n', '        if (maxProfit > 0) {\n', '            Root memory root = roots[goalRoot];\n', '            uint256 len = root.inTokens.length;\n', '            run(root.routerIds, root.inTokens, root.startAmount);\n', '            emit GoldRoot(\n', '                root.inTokens[0],\n', '                root.inTokens[len - 1],\n', '                root.startAmount\n', '            );\n', '        } else {\n', '            emit BadRoots(roots[0].startAmount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function swapEthToToken(\n', '        uint8 routerId,\n', '        uint256 ethAmount,\n', '        address token\n', '    ) external onlyRunner {\n', '        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\n', '\n', '        _swapEthToToken(iRouter, ethAmount, token);\n', '    }\n', '\n', '    function swapTokenToETH(\n', '        uint8 routerId,\n', '        uint256 tokenAmount,\n', '        address tokenAddress\n', '    ) external onlyRunner {\n', '        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\n', '\n', '        _swapTokenToEth(iRouter, tokenAmount, tokenAddress);\n', '    }\n', '\n', '    function swapTokenToToken(\n', '        uint8 routerId,\n', '        uint256 tokenInAmount,\n', '        address tokenIn,\n', '        address tokenOut\n', '    ) external onlyRunner {\n', '        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\n', '\n', '        _swapTokenToToken(iRouter, tokenInAmount, tokenIn, tokenOut);\n', '    }\n', '\n', '    function _swapEthToToken(\n', '        IUniswapV2Router02 router,\n', '        uint256 ethAmount,\n', '        address token\n', '    ) private returns (uint256 amountOut) {\n', '        uint256 oldBalance = TokenInterface(token).balanceOf(address(this));\n', '\n', '        _swapETHForTokenOut(router, ethAmount, token);\n', '\n', '        amountOut = TokenInterface(token).balanceOf(address(this)).sub(\n', '            oldBalance\n', '        );\n', '    }\n', '\n', '    function _swapTokenToEth(\n', '        IUniswapV2Router02 router,\n', '        uint256 tokenAmount,\n', '        address token\n', '    ) private returns (uint256 amountOut) {\n', '        uint256 oldEthAmount = address(this).balance;\n', '\n', '        uint256 oldWEthAmount = _weth.balanceOf(address(this));\n', '        _swapTokenToETHOut(router, tokenAmount, token);\n', '        uint256 newWEthAmount = _weth.balanceOf(address(this));\n', '        _weth.withdraw(newWEthAmount.sub(oldWEthAmount));\n', '\n', '        uint256 newEthAmount = address(this).balance;\n', '        amountOut = newEthAmount.sub(oldEthAmount);\n', '    }\n', '\n', '    function _swapTokenToToken(\n', '        IUniswapV2Router02 router,\n', '        uint256 tokenInAmount,\n', '        address tokenIn,\n', '        address tokenOut\n', '    ) private returns (uint256 amountOut) {\n', '        uint256 oldTokenOutAmount =\n', '            TokenInterface(tokenOut).balanceOf(address(this));\n', '\n', '        _swapTokenForTokenOut(router, tokenInAmount, tokenIn, tokenOut);\n', '\n', '        uint256 newTokenOutAmount =\n', '            TokenInterface(tokenOut).balanceOf(address(this));\n', '        amountOut = newTokenOutAmount.sub(oldTokenOutAmount);\n', '    }\n', '\n', '    function _swapSupportingFeeOnTransferTokens(\n', '        IUniswapV2Pair pair,\n', '        address input,\n', '        address output,\n', '        address _to\n', '    ) internal virtual {\n', '        (address token0, ) = UniswapV2Library.sortTokens(input, output);\n', '\n', '        uint256 amountInput;\n', '        uint256 amountOutput;\n', '        {\n', '            // scope to avoid stack too deep errors\n', '            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '            (uint256 reserveInput, uint256 reserveOutput) =\n', '                input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '            amountInput = TokenInterface(input).balanceOf(address(pair)).sub(\n', '                reserveInput\n', '            );\n', '            amountOutput = UniswapV2Library.getAmountOut(\n', '                amountInput,\n', '                reserveInput,\n', '                reserveOutput\n', '            );\n', '        }\n', '        (uint256 amount0Out, uint256 amount1Out) =\n', '            input == token0\n', '                ? (uint256(0), amountOutput)\n', '                : (amountOutput, uint256(0));\n', '        pair.swap(amount0Out, amount1Out, _to, new bytes(0));\n', '    }\n', '\n', '    function _swapETHForTokenOut(\n', '        IUniswapV2Router02 router,\n', '        uint256 ethAmount,\n', '        address token\n', '    ) internal {\n', '        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n', '        IUniswapV2Pair pair =\n', '            IUniswapV2Pair(factory.getPair(router.WETH(), token));\n', '\n', '        _weth.deposit{value: ethAmount}();\n', '\n', '        _weth.safeTransfer(address(pair), ethAmount);\n', '        _swapSupportingFeeOnTransferTokens(\n', '            pair,\n', '            router.WETH(),\n', '            token,\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    function _swapTokenToETHOut(\n', '        IUniswapV2Router02 router,\n', '        uint256 tokenAmount,\n', '        address token\n', '    ) internal {\n', '        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n', '        IUniswapV2Pair pair =\n', '            IUniswapV2Pair(factory.getPair(token, router.WETH()));\n', '\n', '        TokenInterface(token).safeTransfer(address(pair), tokenAmount);\n', '\n', '        _swapSupportingFeeOnTransferTokens(\n', '            pair,\n', '            token,\n', '            router.WETH(),\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    function _swapTokenForTokenOut(\n', '        IUniswapV2Router02 router,\n', '        uint256 amountIn,\n', '        address tokenIn,\n', '        address tokenOut\n', '    ) internal {\n', '        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n', '        IUniswapV2Pair pair =\n', '            IUniswapV2Pair(factory.getPair(tokenIn, tokenOut));\n', '\n', '        TokenInterface(tokenIn).safeTransfer(address(pair), amountIn);\n', '        _swapSupportingFeeOnTransferTokens(\n', '            pair,\n', '            tokenIn,\n', '            tokenOut,\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    function sendProfit(uint256 amount) external onlyDev {\n', '        _sendProfit(_weth, amount);\n', '    }\n', '\n', '    function _sendProfit(TokenInterface token, uint256 amount)\n', '        private\n', '        returns (bool sent)\n', '    {\n', '        uint256 devAmount = amount.mul(_devFee).div(10000);\n', '\n', '        if (address(token) == address(_weth)) {\n', '            (sent, ) = dev().call{value: devAmount}("");\n', '            require(sent, "Failed to send Ether");\n', '            (sent, ) = owner().call{value: amount.sub(devAmount)}("");\n', '            require(sent, "Failed to send Ether");\n', '        } else {\n', '            token.transfer(dev(), devAmount);\n', '            token.transfer(owner(), amount.sub(devAmount));\n', '        }\n', '    }\n', '}']