['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', 'pragma solidity ^0.5.2;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // benefit is lost if 'b' is also tested.\n", '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.2;\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.2;\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface IVault {\n', '    function transfer(address token, address from, address to, uint256 amount, uint256 fromFeeRate, uint256 toFeeRate) external;\n', '\n', '    function calculateFee(uint256 amount, uint256 feeRate) external pure returns (uint256);\n', '\n', '    function balanceOf(address token, address client) external view returns (uint256);\n', '\n', '    event Transfer(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 fromFee, uint256 toFee);\n', '}\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract ExchangeV1 is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event VaultChanged(address indexed account);\n', '    event MarketPermissionChanged(address indexed base, address indexed quote, bool permission);\n', '    event BlacklistChanged(address indexed client, bool tradeBlacklist);\n', '    event MarketFeeRateChanged(address indexed base, address indexed quote, uint256 makeFeeRate, uint256 takeFeeRate);\n', '    event Trade(bytes32 indexed orderHash, uint256 amount, uint256 price, address indexed take, uint256 makeFee, uint256 takeFee);\n', '    event Cancel(bytes32 indexed orderHash);\n', '\n', '    address private _vault;\n', '    mapping (address => mapping (address => bool)) private _marketPermissions;\n', '    mapping (address => bool) private _tradeBlacklist;\n', '    mapping (address => mapping (address => uint256)) private _makeFeeRates;\n', '    mapping (address => mapping (address => uint256)) private _takeFeeRates;\n', '    mapping (bytes32 => uint256) private _orderFills;\n', '\n', '    constructor () public {\n', '    } \n', '    \n', '    function renounceOwnership() public onlyOwner {\n', '        revert();\n', '    }\n', '\n', '    function setVault(address account) public onlyOwner {\n', '        if (_vault != account) {\n', '            _vault = account;\n', '            emit VaultChanged(account);\n', '        }\n', '    }\n', '\n', '    function vault() public view returns (address) {\n', '        return _vault;\n', '    }\n', '\n', '    function setMarketPermission(address base, address quote, bool permission) public onlyOwner {\n', '        if (isMarketPermitted(base, quote) != permission) {\n', '            _marketPermissions[base][quote] = permission;\n', '            emit MarketPermissionChanged(base, quote, permission);\n', '        }\n', '    }\n', '\n', '    function multiSetMarketPermission(address[] memory bases, address[] memory quotes, bool[] memory permissions) public onlyOwner {\n', '        require(bases.length == quotes.length && bases.length == permissions.length);\n', '        for (uint256 i = 0; i < bases.length; i++) {\n', '            setMarketPermission(bases[i], quotes[i], permissions[i]);\n', '        }\n', '    }\n', '\n', '    function isMarketPermitted(address base, address quote) public view returns (bool) {\n', '        return _marketPermissions[base][quote];\n', '    }\n', '\n', '    function isTradeBlacklisted(address client) public view returns (bool) {\n', '        return _tradeBlacklist[client];\n', '    }\n', '\n', '    function setBlacklist(address client, bool tradeBlacklist) public onlyOwner {\n', '        if (isTradeBlacklisted(client) != tradeBlacklist) {\n', '            _tradeBlacklist[client] = tradeBlacklist;\n', '            emit BlacklistChanged(client, isTradeBlacklisted(client));\n', '        }\n', '    }\n', '    \n', '    function multiSetBlacklist(address[] memory clients, bool[] memory tradeBlacklists) public onlyOwner {\n', '        require(clients.length == tradeBlacklists.length);\n', '        for (uint256 i = 0; i < clients.length; i++) {\n', '            setBlacklist(clients[i], tradeBlacklists[i]);\n', '        }\n', '    }\n', '\n', '    function setMarketFeeRate(address base, address quote, uint256 makeFeeRate, uint256 takeFeeRate) public onlyOwner {\n', '        if (makeFeeRateOf(base, quote) != makeFeeRate || takeFeeRateOf(base, quote) != takeFeeRate) {\n', '            _makeFeeRates[base][quote] = makeFeeRate;\n', '            _takeFeeRates[base][quote] = takeFeeRate;\n', '            emit MarketFeeRateChanged(base, quote, makeFeeRate, takeFeeRate);\n', '        }\n', '    }\n', '\n', '    function multiSetMarketFeeRate(address[] memory bases, address[] memory quotes, uint256[] memory makeFeeRates, uint256[] memory takeFeeRates) public onlyOwner {\n', '        require(bases.length == quotes.length && bases.length == makeFeeRates.length && bases.length == takeFeeRates.length);\n', '        for (uint256 i = 0; i < bases.length; i++) {\n', '            setMarketFeeRate(bases[i], quotes[i], makeFeeRates[i], takeFeeRates[i]);\n', '        }\n', '    }\n', '\n', '    function makeFeeRateOf(address base, address quote) public view returns (uint256) {\n', '        return _makeFeeRates[base][quote];\n', '    }\n', '\n', '    function takeFeeRateOf(address base, address quote) public view returns (uint256) {\n', '        return _takeFeeRates[base][quote];\n', '    }\n', '\n', '    function orderFillOf(bytes32 orderHash) public view returns (uint256) {\n', '        return _orderFills[orderHash];\n', '    }\n', '\n', '    function trade(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, address make, uint256 amount, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\n', '        require(block.timestamp < expire && isMarketPermitted(base, quote) && !isTradeBlacklisted(msg.sender) && orderFillOf(orderHash).add(amount) <= baseAmount && _checkOrderHash(orderHash, make, v, r, s));\n', '        _trade(orderHash, base, quote, baseAmount, quoteAmount, isBuy, make, amount);\n', '    }\n', '\n', '    function _trade(bytes32 orderHash, address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, address make, uint256 amount) private {\n', '        uint256 price = amount.mul(quoteAmount).div(baseAmount);\n', '        uint256 makeFeeRate = makeFeeRateOf(base, quote);\n', '        uint256 takeFeeRate = takeFeeRateOf(base, quote);\n', '        if (isBuy) {\n', '            _transfer(base, msg.sender, make, amount, 0, 0);\n', '            _transfer(quote, make, msg.sender, price, makeFeeRate, takeFeeRate);\n', '        }\n', '        else {\n', '            _transfer(base, make, msg.sender, amount, 0, 0);\n', '            _transfer(quote, msg.sender, make, price, takeFeeRate, makeFeeRate);\n', '        }\n', '        _orderFills[orderHash] = orderFillOf(orderHash).add(amount);\n', '        emit Trade(orderHash, amount, price, msg.sender, _calculateFee(price, makeFeeRate), _calculateFee(price, takeFeeRate));\n', '    }\n', '\n', '    function multiTrade(address[] memory bases, address[] memory quotes, uint256[] memory baseAmounts, uint256[] memory quoteAmounts, bool[] memory isBuys, uint256[] memory expires, uint256[] memory nonces, address[] memory makes, uint256[] memory amounts, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public {\n', '        require(bases.length == quotes.length && bases.length == baseAmounts.length && bases.length == quoteAmounts.length && bases.length == isBuys.length && bases.length == expires.length && bases.length == nonces.length && bases.length == makes.length && bases.length == amounts.length && bases.length == vs.length && bases.length == rs.length && bases.length == ss.length);\n', '        for (uint256 i = 0; i < bases.length; i++) {\n', '            trade(bases[i], quotes[i], baseAmounts[i], quoteAmounts[i], isBuys[i], expires[i], nonces[i], makes[i], amounts[i], vs[i], rs[i], ss[i]);\n', '        }\n', '    }\n', '\n', '    function availableAmountOf(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, address make, uint8 v, bytes32 r, bytes32 s) public view returns (uint256) {\n', '        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\n', '        return block.timestamp >= expire || !_checkOrderHash(orderHash, make, v, r, s) ? 0 : _availableAmountOf(orderHash, base, quote, baseAmount, quoteAmount, isBuy, make);\n', '    }\n', '\n', '    function _availableAmountOf(bytes32 orderHash, address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, address make) private view returns (uint256) {\n', '        uint256 availableByFill = baseAmount.sub(orderFillOf(orderHash));\n', '        uint256 availableByBalance = isBuy ? _balanceOf(quote, make).mul(baseAmount).div(quoteAmount) : _balanceOf(base, make);\n', '        return availableByFill < availableByBalance ? availableByFill : availableByBalance;\n', '    }\n', '\n', '    function cancel(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\n', '        require(_checkOrderHash(orderHash, msg.sender, v, r, s));\n', '        _orderFills[orderHash] = baseAmount;\n', '        emit Cancel(orderHash);\n', '    }\n', '\n', '    function multiCancel(address[] memory bases, address[] memory quotes, uint256[] memory baseAmounts, uint256[] memory quoteAmounts, bool[] memory isBuys, uint256[] memory expires, uint256[] memory nonces, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public {\n', '        require(bases.length == quotes.length && bases.length == baseAmounts.length && bases.length == quoteAmounts.length && bases.length == isBuys.length && bases.length == expires.length && bases.length == nonces.length && bases.length == vs.length && bases.length == rs.length && bases.length == ss.length);\n', '        for (uint256 i = 0; i < bases.length; i++) {\n', '            cancel(bases[i], quotes[i], baseAmounts[i], quoteAmounts[i], isBuys[i], expires[i], nonces[i], vs[i], rs[i], ss[i]);\n', '        }\n', '    }\n', '\n', '    function _transfer(address token, address from, address to, uint256 amount, uint256 fromFeeRate, uint256 toFeeRate) private {\n', '        IVault(vault()).transfer(token, from, to, amount, fromFeeRate, toFeeRate);\n', '    }\n', '\n', '    function _calculateFee(uint256 amount, uint256 feeRate) private view returns (uint256) {\n', '        return IVault(vault()).calculateFee(amount, feeRate);\n', '    }\n', '\n', '    function _balanceOf(address token, address client) private view returns (uint256) {\n', '        return IVault(vault()).balanceOf(token, client);\n', '    }\n', '\n', '   function _buildOrderHash(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce) private view returns (bytes32) {\n', '        return sha256(abi.encodePacked(address(this), base, quote, baseAmount, quoteAmount, isBuy, expire, nonce));\n', '    }\n', '\n', '    function _checkOrderHash(bytes32 orderHash, address make, uint8 v, bytes32 r, bytes32 s) private pure returns (bool) {\n', '        return ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", orderHash)), v, r, s) == make;\n', '    }\n', '}']