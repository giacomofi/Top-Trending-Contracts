['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.3;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./IERC20.sol";\n', 'import "./Context.sol";\n', 'import "./ReentrancyGuard.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract PrivateSale is ReentrancyGuard, Context, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  constructor (address _gasToken , address payable _holdingAddress, uint256 _price) {\n', '    GAS_TOKEN = IERC20(_gasToken);\n', '    holdingAddress = _holdingAddress;\n', '    isFrozen = false;\n', '    price = _price;\n', '  }\n', '\n', '  IERC20 private GAS_TOKEN;\n', '  bool private isFrozen;\n', '  uint256 public price;\n', '  address payable private holdingAddress;\n', '\n', '  function buy(uint256 amount) public payable nonReentrant { // replaced total with msg.value\n', '    require(amount > 0, "Must buy an amount of tokens");\n', '    require(msg.value >= amount.mul(price), "insufficient payment");\n', '    require(!isFrozen, "contract is frozen");\n', '  \n', '    GAS_TOKEN.transferFrom(holdingAddress, _msgSender(), amount.mul(1e18));\n', '    _safeTransfer(holdingAddress, msg.value);\n', '  }\n', '\n', '  function getIsFrozen() public view returns(bool) {\n', '    return isFrozen;\n', '  }\n', '\n', '  function setIsFrozen(bool _isFrozen) public onlyOwner {\n', '    isFrozen = _isFrozen;\n', '  }\n', '\n', '  function getPrice() public view returns(uint256) {\n', '    return price;\n', '  }\n', '\n', '  function setPrice(uint256 _price) public onlyOwner {\n', '    price = _price;\n', '  }\n', '\n', '  function _safeTransfer(address payable to, uint256 amount) internal {\n', '    uint256 balance;\n', '    balance = address(this).balance;\n', '    if (amount > balance) {\n', '        amount = balance;\n', '    }\n', '    Address.sendValue(to, amount);\n', '  }\n', '\n', '}']