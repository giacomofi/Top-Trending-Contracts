['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// File: ../triton/crypto/Triton.sol\n', '\n', '//                      ▄▄                            \n', '// ███▀▀██▀▀███         ██   ██                       \n', '// █▀   ██   ▀█              ██                       \n', '//      ██    ▀███▄███▀███ ██████  ▄██▀██▄▀████████▄  \n', '//      ██      ██▀ ▀▀  ██   ██   ██▀   ▀██ ██    ██  \n', '//      ██      ██      ██   ██   ██     ██ ██    ██  \n', '//      ██      ██      ██   ██   ██▄   ▄██ ██    ██  \n', '//    ▄████▄  ▄████▄  ▄████▄ ▀████ ▀█████▀▄████  ████▄\n', '                                                   \n', '                                                   \n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() virtual {\n', '        require(_owner == _msgSender(), "Ownable: caller is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract LockWallet {\n', '    constructor() public {\n', '    }\n', '}\n', '\n', 'contract Balancer {\n', '    using SafeMath for uint256;\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '    TRITON private _tokenContract;\n', '    \n', '    constructor(TRITON tokenContract, IUniswapV2Router02 uniswapV2Router) public {\n', '        _tokenContract =tokenContract;\n', '        _uniswapV2Router = uniswapV2Router;\n', '    }\n', '    \n', '    receive() external payable {}\n', '    \n', '    function rebalance() external returns (uint256) { \n', '        swapEthForTokens(address(this).balance);\n', '    }\n', '\n', '    function swapEthForTokens(uint256 EthAmount) private {\n', '        address[] memory uniswapPairPath = new address[](2);\n', '        uniswapPairPath[0] = _uniswapV2Router.WETH();\n', '        uniswapPairPath[1] = address(_tokenContract);\n', '\n', '        _uniswapV2Router\n', '            .swapExactETHForTokensSupportingFeeOnTransferTokens{value: EthAmount}(\n', '                0,\n', '                uniswapPairPath,\n', '                address(this),\n', '                block.timestamp\n', '            );\n', '    }\n', '}\n', '\n', 'contract Swaper {\n', '    using SafeMath for uint256;\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '    TRITON private _tokenContract;\n', '    \n', '    constructor(TRITON tokenContract, IUniswapV2Router02 uniswapV2Router) public {\n', '        _tokenContract = tokenContract;\n', '        _uniswapV2Router = uniswapV2Router;\n', '    }\n', '    \n', '    function swapTokens(address pairTokenAddress, uint256 tokenAmount) external {\n', '        uint256 initialPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this));\n', '        swapTokensForTokens(pairTokenAddress, tokenAmount);\n', '        uint256 newPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this)).sub(initialPairTokenBalance);\n', '        IERC20(pairTokenAddress).transfer(address(_tokenContract), newPairTokenBalance);\n', '    }\n', '    \n', '    function swapTokensForTokens(address pairTokenAddress, uint256 tokenAmount) private {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(_tokenContract);\n', '        path[1] = pairTokenAddress;\n', '\n', '        _tokenContract.approve(address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of pair token\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '}\n', '\n', 'contract TRITON is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    IUniswapV2Router02 public immutable _uniswapV2Router;\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '    address public _lockWallet;\n', '    uint256 public _initialLockAmount;\n', '    address public _uniswapETHPool;\n', '\n', '    \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 1000e9;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 public _tFeeTotal;\n', '    uint256 public _tBurnTotal;\n', '\n', "    string private _name = 'Triton Governance';\n", "    string private _symbol = 'TRITON';\n", '    uint8 private _decimals = 9;\n', '    \n', '    uint256 public _feeDecimals = 1;\n', '    uint256 public _taxFee = 0;\n', '    uint256 public _lockFee = 0;\n', '    uint256 public _maxTxAmount = 100e9;\n', '    uint256 public _minTokensBeforeSwap = 1e9;\n', '    uint256 public _minInterestForReward = 1e6;\n', '    uint256 private _autoSwapCallerFee = 2e7;\n', '    \n', '    bool private inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled;\n', '    bool public tradingEnabled;\n', '    bool public tritonActivated; \n', '    \n', '    address private currentPairTokenAddress;\n', '    address private currentPoolAddress;\n', '    \n', '    uint256 private _liquidityRemoveFee = 0;\n', '    uint256 private _conchCallerFee = 0;\n', '    uint256 private _minTokenForConch = 10e9;\n', '    uint256 private _lastConch;\n', '    uint256 private _conchInterval = 60 seconds;\n', '    uint256 private _randNonce = 0;\n', '    \n', '\n', '    event FeeDecimalsUpdated(uint256 taxFeeDecimals);\n', '    event TaxFeeUpdated(uint256 taxFee);\n', '    event LockFeeUpdated(uint256 lockFee);\n', '    event MaxTxAmountUpdated(uint256 maxTxAmount);\n', '    event WhitelistUpdated(address indexed pairTokenAddress);\n', '    event TradingEnabled();\n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(\n', '        address indexed pairTokenAddress,\n', '        uint256 tokensSwapped,\n', '        uint256 pairTokenReceived,\n', '        uint256 tokensIntoLiqudity\n', '    );\n', '    event Rebalance(uint256 tokenBurnt);\n', '    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n', '    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\n', '    event MinInterestForRewardUpdated(uint256 minInterestForReward);\n', '    event LiquidityRemoveFeeUpdated(uint256 liquidityRemoveFee);\n', '    event ConchCallerFeeUpdated(uint256 rebalnaceCallerFee);\n', '    event MinTokenForConchUpdated(uint256 minRebalanceAmount);\n', '    event ConchIntervalUpdated(uint256 rebalanceInterval);\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '    \n', '    Balancer public balancer;\n', '    Swaper public swaper;\n', '\n', '    constructor (IUniswapV2Router02 uniswapV2Router, uint256 initialLockAmount) public {\n', '        _lastConch = now;\n', '        \n', '        _uniswapV2Router = uniswapV2Router;\n', '        _lockWallet = address(new LockWallet());\n', '        _initialLockAmount = initialLockAmount;\n', '        \n', '        balancer = new Balancer(this, uniswapV2Router);\n', '        swaper = new Swaper(this, uniswapV2Router);\n', '        \n', '        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\n', '            .createPair(address(this), uniswapV2Router.WETH());\n', '        currentPairTokenAddress = uniswapV2Router.WETH();\n', '        _uniswapETHPool = currentPoolAddress;\n', '        \n', '        updateSwapAndLiquifyEnabled(false);\n', '        \n', '        _rOwned[_msgSender()] = reflectionFromToken(_tTotal.sub(_initialLockAmount), false);\n', '        _rOwned[_lockWallet] = reflectionFromToken(_initialLockAmount, false);\n', '        \n', '        emit Transfer(address(0), _msgSender(), _tTotal.sub(_initialLockAmount));\n', '        emit Transfer(address(0), _lockWallet, _initialLockAmount);\n', '    }\n', '    \n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    \n', '    function reflect(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Triton: Excluded addresses cannot call this function");\n', '        (uint256 rAmount,,,,,) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount,,,,,) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        require(rAmount <= _rTotal, "Triton: Amount must be less than total reflections");\n', '        uint256 currentRate =  _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', "        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'Triton: We can not exclude Uniswap router.');\n", "        require(account != address(this), 'Triton: We can not exclude contract self.');\n", "        require(account != _lockWallet, 'Triton: We can not exclude reweard wallet.');\n", '        require(!_isExcluded[account], "Triton: Account is already excluded");\n', '        \n', '        if(_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Triton: Account is already included");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "Triton: approve from the zero address");\n', '        require(spender != address(0), "Triton: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "Triton: transfer from the zero address");\n', '        require(recipient != address(0), "Triton: transfer to the zero address");\n', '        require(amount > 0, "Triton: Transfer amount must be greater than zero");\n', '        \n', '        if(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\n', '            require(amount <= _maxTxAmount, "Triton: Transfer amount exceeds the maxTxAmount.");\n', '            if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled)\n', '                require(false, "Triton: trading is disabled.");\n', '        }\n', '        \n', '        if(!inSwapAndLiquify) {\n', '            uint256 lockedBalanceForPool = balanceOf(address(this));\n', '            bool overMinTokenBalance = lockedBalanceForPool >= _minTokensBeforeSwap;\n', '            if (\n', '                overMinTokenBalance &&\n', '                msg.sender != currentPoolAddress &&\n', '                swapAndLiquifyEnabled\n', '            ) {\n', '                if(currentPairTokenAddress == _uniswapV2Router.WETH())\n', '                    swapAndLiquifyForEth(lockedBalanceForPool);\n', '                else\n', '                    swapAndLiquifyForTokens(currentPairTokenAddress, lockedBalanceForPool);\n', '            }\n', '        }\n', '        \n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '\n', '    }\n', '    \n', '    receive() external payable {}\n', '    \n', '    function swapAndLiquifyForEth(uint256 lockedBalanceForPool) private lockTheSwap {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '        uint256 half = lockedForSwap.div(2);\n', '        uint256 otherHalf = lockedForSwap.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half);\n', '        \n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForEth(otherHalf, newBalance);\n', '        \n', '        emit SwapAndLiquify(_uniswapV2Router.WETH(), half, newBalance, otherHalf);\n', '        \n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '        \n', '        _sendRewardInterestToPool();\n', '    }\n', '    \n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = _uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function swapAndLiquifyForTokens(address pairTokenAddress, uint256 lockedBalanceForPool) private lockTheSwap {\n', '        // split the contract balance except swapCallerFee into halves\n', '        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\n', '        uint256 half = lockedForSwap.div(2);\n', '        uint256 otherHalf = lockedForSwap.sub(half);\n', '        \n', '        _transfer(address(this), address(swaper), half);\n', '        \n', '        uint256 initialPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this));\n', '        \n', '        // swap tokens for pairToken\n', '        swaper.swapTokens(pairTokenAddress, half);\n', '        \n', '        uint256 newPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this)).sub(initialPairTokenBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidityForTokens(pairTokenAddress, otherHalf, newPairTokenBalance);\n', '        \n', '        emit SwapAndLiquify(pairTokenAddress, half, newPairTokenBalance, otherHalf);\n', '        \n', '        _transfer(address(this), tx.origin, _autoSwapCallerFee);\n', '        \n', '        _sendRewardInterestToPool();\n', '    }\n', '\n', '    function addLiquidityForTokens(address pairTokenAddress, uint256 tokenAmount, uint256 pairTokenAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n', '        IERC20(pairTokenAddress).approve(address(_uniswapV2Router), pairTokenAmount);\n', '\n', '        // add the liquidity\n', '        _uniswapV2Router.addLiquidity(\n', '            address(this),\n', '            pairTokenAddress,\n', '            tokenAmount,\n', '            pairTokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function conch() public lockTheSwap {\n', '        require(balanceOf(_msgSender()) >= _minTokenForConch, "Triton: You have not enough Triton to ");\n', "        require(now > _lastConch + _conchInterval, 'Triton: Too Soon.');\n", '        \n', '        _lastConch = now;\n', '\n', '        uint256 amountToRemove = IERC20(_uniswapETHPool).balanceOf(address(this)).mul(_liquidityRemoveFee).div(100);\n', '\n', '        removeLiquidityETH(amountToRemove);\n', '        balancer.rebalance();\n', '\n', '        uint256 tNewTokenBalance = balanceOf(address(balancer));\n', '        uint256 tRewardForCaller = tNewTokenBalance.mul(_conchCallerFee).div(100);\n', '        uint256 tBurn = tNewTokenBalance.sub(tRewardForCaller);\n', '        \n', '        uint256 currentRate =  _getRate();\n', '        uint256 rBurn =  tBurn.mul(currentRate);\n', '        \n', '        _rOwned[_msgSender()] = _rOwned[_msgSender()].add(tRewardForCaller.mul(currentRate));\n', '        _rOwned[address(balancer)] = 0;\n', '        \n', '        _tBurnTotal = _tBurnTotal.add(tBurn);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '        _rTotal = _rTotal.sub(rBurn);\n', '\n', '        emit Transfer(address(balancer), _msgSender(), tRewardForCaller);\n', '        emit Transfer(address(balancer), address(0), tBurn);\n', '        emit Rebalance(tBurn);\n', '    }\n', '    \n', '    function removeLiquidityETH(uint256 lpAmount) private returns(uint ETHAmount) {\n', '        IERC20(_uniswapETHPool).approve(address(_uniswapV2Router), lpAmount);\n', '        (ETHAmount) = _uniswapV2Router\n', '            .removeLiquidityETHSupportingFeeOnTransferTokens(\n', '                address(this),\n', '                lpAmount,\n', '                0,\n', '                0,\n', '                address(balancer),\n', '                block.timestamp\n', '            );\n', '    }\n', '\n', '    function _sendRewardInterestToPool() private {\n', '        uint256 tRewardInterest = balanceOf(_lockWallet).sub(_initialLockAmount);\n', '        if(tRewardInterest > _minInterestForReward) {\n', '            uint256 rRewardInterest = reflectionFromToken(tRewardInterest, false);\n', '            _rOwned[currentPoolAddress] = _rOwned[currentPoolAddress].add(rRewardInterest);\n', '            _rOwned[_lockWallet] = _rOwned[_lockWallet].sub(rRewardInterest);\n', '            emit Transfer(_lockWallet, currentPoolAddress, tRewardInterest);\n', '            IUniswapV2Pair(currentPoolAddress).sync();\n', '        }\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock) = _getValues(tAmount);\n', '        uint256 rLock =  tLock.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '        \n', '        if(tritonActivated) {\n', '            _setTaxFee(randMod(50));\n', '            _setLockFee(randMod(25));\n', '            _setConchCallerFee(randMod(10));\n', '            _setLiquidityRemoveFee(randMod(10));\n', '            _setConchInterval(randMod(3600));\n', '        }\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock) = _getValues(tAmount);\n', '        uint256 rLock =  tLock.mul(currentRate);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if(inSwapAndLiquify) {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock) = _getValues(tAmount);\n', '        uint256 rLock =  tLock.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if(inSwapAndLiquify) {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        } else {\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock) = _getValues(tAmount);\n', '        uint256 rLock =  tLock.mul(currentRate);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        if(inSwapAndLiquify) {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n', '            emit Transfer(sender, recipient, tAmount);\n', '        }\n', '        else {\n', '            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n', '            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\n', '            _reflectFee(rFee, tFee);\n', '            emit Transfer(sender, address(this), tLock);\n', '            emit Transfer(sender, recipient, tTransferAmount);\n', '        }\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tLock) = _getTValues(tAmount, _taxFee, _lockFee, _feeDecimals);\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLock, currentRate);\n', '        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLock);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 lockFee, uint256 feeDecimals) private pure returns (uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount.mul(taxFee).div(10**(feeDecimals + 2));\n', '        uint256 tLockFee = tAmount.mul(lockFee).div(10**(feeDecimals + 2));\n', '        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLockFee);\n', '        return (tTransferAmount, tFee, tLockFee);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLock, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rLock = tLock.mul(currentRate);\n', '        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLock);\n', '        return (rAmount, rTransferAmount, rFee);\n', '    }\n', '\n', '    function _getRate() public view returns(uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() public view returns(uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;      \n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '    \n', '    function getCurrentPoolAddress() public view returns(address) {\n', '        return currentPoolAddress;\n', '    }\n', '    \n', '    function getCurrentPairTokenAddress() public view returns(address) {\n', '        return currentPairTokenAddress;\n', '    }\n', '\n', '    function getLiquidityRemoveFee() public view returns(uint256) {\n', '        return _liquidityRemoveFee;\n', '    }\n', '    \n', '    function getConchCallerFee() public view returns(uint256) {\n', '        return _conchCallerFee;\n', '    }\n', '    \n', '    function getMinTokenForConch() public view returns(uint256) {\n', '        return _minTokenForConch;\n', '    }\n', '    \n', '    function getLastConch() public view returns(uint256) {\n', '        return _lastConch;\n', '    }\n', '    \n', '    function getConchInterval() public view returns(uint256) {\n', '        return _conchInterval;\n', '    }\n', '    \n', '    function _setFeeDecimals(uint256 feeDecimals) external onlyOwner() {\n', "        require(feeDecimals >= 0 && feeDecimals <= 2, 'Triton: fee decimals should be in 0 - 2');\n", '        _feeDecimals = feeDecimals;\n', '        emit FeeDecimalsUpdated(feeDecimals);\n', '    }\n', '    \n', '    function _setTaxFee(uint256 taxFee) private {\n', "        require(taxFee >= 1  && taxFee <= 5 * 10 ** _feeDecimals, 'Triton: taxFee should be in 1 - 50');\n", '        _taxFee = taxFee;\n', '        emit TaxFeeUpdated(taxFee);\n', '    }\n', '    \n', '    function _setLockFee(uint256 lockFee) private {\n', "        require(lockFee >= 1 && lockFee <= 5 * 10 ** _feeDecimals, 'Triton: lockFee should be in 1 - 25');\n", '        _lockFee = lockFee;\n', '        emit LockFeeUpdated(lockFee);\n', '    }\n', '    \n', '    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n', "        require(maxTxAmount >= 500e9 , 'Triton: maxTxAmount should be greater than 500e9');\n", '        _maxTxAmount = maxTxAmount;\n', '        emit MaxTxAmountUpdated(maxTxAmount);\n', '    }\n', '    \n', '    function _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {\n', "        require(minTokensBeforeSwap >= 5e7 && minTokensBeforeSwap <= 25e9 , 'Triton: minTokenBeforeSwap should be in 5e7 - 25e9');\n", "        require(minTokensBeforeSwap > _autoSwapCallerFee , 'Triton: minTokenBeforeSwap should be greater than autoSwapCallerFee');\n", '        _minTokensBeforeSwap = minTokensBeforeSwap;\n', '        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\n', '    }\n', '    \n', '    function _setAutoSwapCallerFee(uint256 autoSwapCallerFee) external onlyOwner() {\n', "        require(autoSwapCallerFee >= 1e6, 'Triton: autoSwapCallerFee should be greater than 1e6');\n", '        _autoSwapCallerFee = autoSwapCallerFee;\n', '        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\n', '    }\n', '    \n', '    function _setMinInterestForReward(uint256 minInterestForReward) external onlyOwner() {\n', '        _minInterestForReward = minInterestForReward;\n', '        emit MinInterestForRewardUpdated(minInterestForReward);\n', '    }\n', '    \n', '    function _setLiquidityRemoveFee(uint256 liquidityRemoveFee) private {\n', "        require(liquidityRemoveFee >= 1 && liquidityRemoveFee <= 10 , 'Triton: liquidityRemoveFee should be in 1 - 10');\n", '        _liquidityRemoveFee = liquidityRemoveFee;\n', '        emit LiquidityRemoveFeeUpdated(liquidityRemoveFee);\n', '    }\n', '    \n', '    function _setConchCallerFee(uint256 conchCallerFee) private {\n', "        require(conchCallerFee >= 1 && conchCallerFee <= 20 , 'Triton: conchCallerFee should be in 1 - 20');\n", '        _conchCallerFee = conchCallerFee;\n', '        emit ConchCallerFeeUpdated(conchCallerFee);\n', '    }\n', '    \n', '    function _setMinTokenForConch(uint256 minTokenForConch) public onlyOwner() {\n', '        _minTokenForConch = minTokenForConch;\n', '        emit MinTokenForConchUpdated(minTokenForConch);\n', '    }\n', '    \n', '    function _setConchInterval(uint256 conchInterval) private {\n', "        require(conchInterval >= 1 && conchInterval <= 3600 , 'Triton: conchInterval should be between 1 second and 1 hour');\n", '        _conchInterval = conchInterval;\n', '        emit ConchIntervalUpdated(conchInterval);\n', '    }\n', '    \n', '    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner() {\n', '        swapAndLiquifyEnabled = _enabled;\n', '        emit SwapAndLiquifyEnabledUpdated(_enabled);\n', '    }\n', '    \n', '    function _updateWhitelist(address poolAddress, address pairTokenAddress) public onlyOwner() {\n', '        require(poolAddress != address(0), "Triton: Pool address is zero.");\n', '        require(pairTokenAddress != address(0), "Triton: Pair token address is zero.");\n', '        require(pairTokenAddress != address(this), "Triton: Pair token address self address.");\n', '        require(pairTokenAddress != currentPairTokenAddress, "Triton: Pair token address is same as current one.");\n', '        \n', '        currentPoolAddress = poolAddress;\n', '        currentPairTokenAddress = pairTokenAddress;\n', '        \n', '        emit WhitelistUpdated(pairTokenAddress);\n', '    }\n', '\n', '    function _enableTrading() external onlyOwner() {\n', '        tradingEnabled = true;\n', '        TradingEnabled();\n', '    }\n', '\n', '    //once Triton is activated it can not be deactivated \n', '    function activateTriton() external onlyOwner() {\n', '        tritonActivated = true;\n', '    }\n', '\n', '   function randMod(uint _modulus) private returns(uint) { \n', '        _randNonce++;\n', '        uint256 randOutputBetweenZeroAndModulus = uint(keccak256(abi.encodePacked(now, msg.sender, _randNonce)))% _modulus;\n', '        randOutputBetweenZeroAndModulus++;\n', '        return randOutputBetweenZeroAndModulus; \n', '    }\n', '\n', '    \n', '}']