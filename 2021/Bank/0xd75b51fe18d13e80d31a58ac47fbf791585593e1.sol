['pragma solidity >=0.5.0;\n', '\n', 'import "./PriceOracle.sol";\n', 'import "./SafeMath.sol";\n', 'import "./StringUtils.sol";\n', 'import "./Ownable.sol";\n', '\n', 'interface AggregatorInterface {\n', '  function latestAnswer() external view returns (int256);\n', '}\n', '\n', '\n', '// StablePriceOracle sets a price in USD, based on an oracle.\n', 'contract StablePriceOracle is Ownable, PriceOracle {\n', '    using SafeMath for *;\n', '    using StringUtils for *;\n', '\n', '    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\n', '    uint[] public rentPrices;\n', '\n', '    // Oracle address\n', '    AggregatorInterface public usdOracle;\n', '\n', '    event OracleChanged(address oracle);\n', '\n', '    event RentPriceChanged(uint[] prices);\n', '\n', '    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256("supportsInterface(bytes4)"));\n', '    bytes4 constant private ORACLE_ID = bytes4(keccak256("price(string,uint256,uint256)") ^ keccak256("premium(string,uint256,uint256)"));\n', '\n', '    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices) public {\n', '        usdOracle = _usdOracle;\n', '        setPrices(_rentPrices);\n', '    }\n', '\n', '    function price(string calldata name, uint expires, uint duration) external view returns(uint) {\n', '        uint len = name.strlen();\n', '        if(len > rentPrices.length) {\n', '            len = rentPrices.length;\n', '        }\n', '        require(len > 0);\n', '        \n', '        uint basePrice = rentPrices[len - 1].mul(duration);\n', '        basePrice = basePrice.add(_premium(name, expires, duration));\n', '\n', '        return attoUSDToWei(basePrice);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets rent prices.\n', '     * @param _rentPrices The price array. Each element corresponds to a specific\n', '     *                    name length; names longer than the length of the array\n', '     *                    default to the price of the last element. Values are\n', '     *                    in base price units, equal to one attodollar (1e-18\n', '     *                    dollar) each.\n', '     */\n', '    function setPrices(uint[] memory _rentPrices) public onlyOwner {\n', '        rentPrices = _rentPrices;\n', '        emit RentPriceChanged(_rentPrices);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the price oracle address\n', '     * @param _usdOracle The address of the price oracle to use.\n', '     */\n', '    function setOracle(AggregatorInterface _usdOracle) public onlyOwner {\n', '        usdOracle = _usdOracle;\n', '        emit OracleChanged(address(_usdOracle));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the pricing premium in wei.\n', '     */\n', '    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\n', '        return attoUSDToWei(_premium(name, expires, duration));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the pricing premium in internal base units.\n', '     */\n', '    function _premium(string memory name, uint expires, uint duration) internal view returns(uint) {\n', '        return 0;\n', '    }\n', '\n', '    function attoUSDToWei(uint amount) internal view returns(uint) {\n', '        uint ethPrice = uint(usdOracle.latestAnswer());\n', '        return amount.mul(1e8).div(ethPrice);\n', '    }\n', '\n', '    function weiToAttoUSD(uint amount) internal view returns(uint) {\n', '        uint ethPrice = uint(usdOracle.latestAnswer());\n', '        return amount.mul(ethPrice).div(1e8);\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceID) public view returns (bool) {\n', '        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\n', '    }\n', '}']