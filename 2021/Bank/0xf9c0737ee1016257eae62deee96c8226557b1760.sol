['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library SafeMath {\n', '    function tryAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    function trySub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    function tryMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    function tryDiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    function tryMod(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library PresaleHelper {\n', '    using SafeMath for uint256;\n', '\n', '    function calculateAmountRequired(\n', '        uint256 _amount,\n', '        uint256 _tokenPrice,\n', '        uint256 _listingRate,\n', '        uint256 _liquidityPercent,\n', '        uint256 _tokenFee\n', '    ) public pure returns (uint256) {\n', '        uint256 listingRatePercent = _listingRate.mul(1000).div(_tokenPrice);\n', '        uint256 DAOLaunchTokenFee = _amount.mul(_tokenFee).div(1000);\n', '        uint256 amountMinusFee = _amount.sub(DAOLaunchTokenFee);\n', '        uint256 liquidityRequired = amountMinusFee\n', '            .mul(_liquidityPercent)\n', '            .mul(listingRatePercent)\n', '            .div(1000000);\n', '        uint256 tokensRequiredForPresale = _amount.add(liquidityRequired);\n', '        return tokensRequiredForPresale;\n', '    }\n', '}']