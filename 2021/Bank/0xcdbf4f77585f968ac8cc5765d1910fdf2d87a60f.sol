['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @dev brief interface for sushi swapping ETH //// based on Uniswap v2\n', 'interface ISushiSwapETH {\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    \n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '}\n', '\n', '/// @dev contract that sushi swaps ETH into SUSHI for sender.\n', 'contract ShwapETH {\n', '    address constant sushiToken = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2; // SUSHI token contract \n', '    address constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Wrapped ETH token contract\n', '    ISushiSwapETH constant sushiETHpair = ISushiSwapETH(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0); // SUSHI/ETH pair for SushiSwap\n', '    ISushiSwapETH constant sushiSwapRouter = ISushiSwapETH(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // SushiSwap router contract\n', '    \n', '    /// @dev sushi swap ETH into SUSHI for sender.\n', '    receive() external payable {\n', '        (uint256 reserve0, uint256 reserve1, ) = sushiETHpair.getReserves(); // get `sushiETHpair` reserve balances for rate calculation\n', '        uint256 sushiOutMin = msg.value * (reserve0 / reserve1) \n', '        - msg.value * ((reserve0 / reserve1) / 200); // calculate minimum SUSHI return with 0.5% slippage threshold based on `msg.value` ETH\n', '        address[] memory path = new address[](2); // load SUSHI/ETH `path` for router\n', '        path[0] = address(wETH);\n', '        path[1] = address(sushiToken);\n', '        sushiSwapRouter.swapExactETHForTokens{value: msg.value}\n', '        (sushiOutMin, path, msg.sender, block.timestamp + 1200); // stage swap tx in router with 20 minute deadline\n', '    }\n', '}']