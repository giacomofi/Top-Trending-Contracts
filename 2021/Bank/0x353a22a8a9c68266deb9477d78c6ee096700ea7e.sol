['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-29\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface Gastoken {\n', '    function free(uint256 value) external returns (bool success);\n', '    function freeUpTo(uint256 value) external returns (uint256 freed);\n', '    function freeFrom(address from, uint256 value) external returns (bool success);\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '    function mint(uint256 value) external;\n', '}\n', '\n', 'contract Sandwich {\n', '\n', '    address owner = address(0x8C14877fe86b23FCF669350d056cDc3F2fC27029);\n', '\n', '    constructor() {}\n', '    receive() external payable {}\n', '    fallback() external payable {}\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function mintGastoken(address gasTokenAddress, uint _amount) external {\n', '        Gastoken(gasTokenAddress).mint(_amount);\n', '    }\n', '\n', '    function retrieveERC20(address _token, uint _amount) external onlyOwner {\n', '        IERC20(_token).transfer(msg.sender, _amount);\n', '    }\n', '\n', '    function swapExactETHForTokens(\n', '        address gasTokenAddress,\n', '        uint amountToFree,\n', '        address router,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        uint deadline\n', '    ) external payable onlyOwner {\n', '        require(Gastoken(gasTokenAddress).free(amountToFree));\n', '        IUniswapV2Router02(router).swapExactETHForTokens{value: msg.value}(\n', '            amountOutMin,\n', '            path,\n', '            address(this),\n', '            deadline\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Requires that tokens be in the smart contract\n', '     * Requires that Uniswap returns amountOutMin + bribe. Pay the user and miner.\n', '     * Swaps, pays bribe, returns amountOutMin to user.\n', '     * Pass either bribe or bribePercentage. bribePercentage is out of 100\n', '     */\n', '    function swapExactTokensForETH(\n', '        address gasTokenAddress,\n', '        uint amountToFree,\n', '        address router,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        uint deadline,\n', '        uint bribeAmount,\n', '        uint bribePercentage\n', '    ) external onlyOwner {\n', '        require(Gastoken(gasTokenAddress).free(amountToFree));\n', '        uint amountIn = IERC20(path[0]).balanceOf(address(this));\n', '        IERC20(path[0]).approve(address(router), amountIn);\n', '        IUniswapV2Router02(router).swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            amountIn,\n', '            amountOutMin,\n', '            path,\n', '            address(this),\n', '            deadline\n', '        );\n', '        uint balance = address(this).balance;\n', '        uint profit = balance - amountOutMin; // because of amountOutMin, always positive if we get here\n', '        uint bribe = (bribeAmount > 0) ? bribeAmount : (profit * bribePercentage / 100);\n', '\n', '        require(balance - bribe > amountOutMin, "Not enough money to pay bribe"); // however, we may not have enough for the bribe\n', '        block.coinbase.call{value: bribe}(new bytes(0));\n', '        msg.sender.call{value: balance-bribe}(new bytes(0));\n', '    }\n', '\n', '}']