['pragma solidity ^0.5.0;\n', '\n', 'import "./Token.sol";\n', 'import "openzeppelin-solidity/contracts/math/SafeMath.sol";\n', '\n', 'contract Exchange {\n', '  using SafeMath for uint;\n', '\n', '  // Variables\n', '  address public feeAccount; // the account that receives exchange fees\n', '  uint256 public feePercent; // the fee percentage\n', '  address constant ETHER = address(0); // store Ether in tokens mapping with blank address\n', '  mapping(address => mapping(address => uint256)) public tokens;\n', '  mapping(uint256 => _Order) public orders;\n', '  uint256 public orderCount;\n', '  mapping(uint256 => bool) public orderCancelled;\n', '  mapping(uint256 => bool) public orderFilled;\n', '\n', '  // Events\n', '  event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '  event Order(\n', '    uint256 id,\n', '    address user,\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 timestamp\n', '  );\n', '  event Cancel(\n', '    uint256 id,\n', '    address user,\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 timestamp\n', '  );\n', '  event Trade(\n', '    uint256 id,\n', '    address user,\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    address userFill,\n', '    uint256 timestamp\n', '  );\n', '\n', '  // Structs\n', '  struct _Order {\n', '    uint256 id;\n', '    address user;\n', '    address tokenGet;\n', '    uint256 amountGet;\n', '    address tokenGive;\n', '    uint256 amountGive;\n', '    uint256 timestamp;\n', '  }\n', '\n', '  constructor (address _feeAccount, uint256 _feePercent) public {\n', '    feeAccount = _feeAccount;\n', '    feePercent = _feePercent;\n', '  }\n', '\n', '  // Fallback: reverts if Ether is sent to this smart contract by mistake\n', '  function() external {\n', '    revert();\n', '  }\n', '\n', '  function depositEther() payable public {\n', '    tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].add(msg.value);\n', '    emit Deposit(ETHER, msg.sender, msg.value, tokens[ETHER][msg.sender]);\n', '  }\n', '\n', '  function withdrawEther(uint _amount) public {\n', '    require(tokens[ETHER][msg.sender] >= _amount);\n', '    tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].sub(_amount);\n', '    msg.sender.transfer(_amount);\n', '    emit Withdraw(ETHER, msg.sender, _amount, tokens[ETHER][msg.sender]);\n', '  }\n', '\n', '  function depositToken(address _token, uint _amount) public {\n', '    require(_token != ETHER);\n', '    require(Token(_token).transferFrom(msg.sender, address(this), _amount));\n', '    tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\n', '    emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '  }\n', '\n', '  function withdrawToken(address _token, uint256 _amount) public {\n', '    require(_token != ETHER);\n', '    require(tokens[_token][msg.sender] >= _amount);\n', '    tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\n', '    require(Token(_token).transfer(msg.sender, _amount));\n', '    emit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '  }\n', '\n', '  function balanceOf(address _token, address _user) public view returns (uint256) {\n', '  return tokens[_token][_user];\n', '  }\n', '\n', '  function makeOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) public {\n', '    orderCount = orderCount.add(1);\n', '    orders[orderCount] = _Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\n', '    emit Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\n', '  }\n', '\n', '  function cancelOrder(uint256 _id) public {\n', '    _Order storage _order = orders[_id];\n', '    require(address(_order.user) == msg.sender);\n', '    require(_order.id == _id); // The order must exist\n', '    orderCancelled[_id] = true;\n', '    emit Cancel(_order.id, msg.sender, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive, now);\n', '  }\n', '\n', '  function fillOrder(uint256 _id) public {\n', '    require(_id > 0 && _id <= orderCount);\n', '    require(!orderFilled[_id]);\n', '    require(!orderCancelled[_id]);\n', '    _Order storage _order = orders[_id];\n', '    _trade(_order.id, _order.user, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive);\n', '    orderFilled[_order.id] = true;\n', '  }\n', '\n', '  function _trade(uint256 _orderId, address _user, address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) internal {\n', '    // Fee paid by the user that fills the order, a.k.a. msg.sender.\n', '    uint256 _feeAmount = _amountGet.mul(feePercent).div(1000);\n', '\n', '    tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountGet.add(_feeAmount));\n', '    tokens[_tokenGet][_user] = tokens[_tokenGet][_user].add(_amountGet);\n', '    tokens[_tokenGet][feeAccount] = tokens[_tokenGet][feeAccount].add(_feeAmount);\n', '    tokens[_tokenGive][_user] = tokens[_tokenGive][_user].sub(_amountGive);\n', '    tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive);\n', '\n', '    emit Trade(_orderId, _user, _tokenGet, _amountGet, _tokenGive, _amountGive, msg.sender, now);\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "openzeppelin-solidity/contracts/math/SafeMath.sol";\n', '\n', 'contract Token {\n', '  using SafeMath for uint;\n', '\n', '  // Variables\n', '  string public name = "Sayvland Index";\n', '  string public symbol = "SLI";\n', '  uint256 public decimals = 18;\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) public balanceOf;\n', '  mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '  // Events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  constructor() public {\n', '    totalSupply = 5000000000 * (10 ** decimals);\n', '    balanceOf[msg.sender] = totalSupply;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    require(balanceOf[msg.sender] >= _value);\n', '    _transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function _transfer(address _from, address _to, uint256 _value) internal {\n', '    require(_to != address(0));\n', '    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '    balanceOf[_to] = balanceOf[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '    _transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']