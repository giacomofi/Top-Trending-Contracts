['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-06\n', '*/\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/TROPStaking.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '// TROPVault distributes fees equally amongst staked pools\n', "// Have fun reading it. Hopefully it's bug-free. God bless.\n", '\n', 'contract TimeLockLPTokenStaking {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many  tokens the user currently has.\n', '        uint256 rewardAllocPoint; //this is used for computing user rewards, depending on the staked amount and locked time\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        uint256 rewardLocked;\n', '        uint256 releaseTime;\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of TROPs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accTROPPerRAP) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws  tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accTROPPerRAP` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '\n', '        uint256 lpReleaseTime;\n', '        uint256 lockedPeriod;\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. TROPs to distribute per block.\n', '        uint256 accTROPPerRAP; // Accumulated TROPs per rewardAllocPoint RAP, times 1e18. See below.\n', '        uint256 totalRewardAllocPoint;\n', '        mapping(address => mapping(address => uint256)) allowance;\n', '        bool emergencyWithdrawable;\n', '        uint256 rewardsInThisEpoch;\n', '        uint256 cumulativeRewardsSinceStart;\n', '        uint256 startBlock;\n', '        uint256 startTime;\n', '        uint256 totalStake;\n', '        // For easy graphing historical epoch rewards\n', '        mapping(uint256 => uint256) epochRewards;\n', '        uint256 epochCalculationStartBlock;\n', '    }\n', '\n', '    // Info of each pool.\n', '    PoolInfo public poolInfo;\n', '    // Info of each user that stakes  tokens.\n', '    mapping(address => UserInfo) public userInfo;\n', '\n', '    // The TROP TOKEN!\n', '    IERC20 public trop;\n', '\n', '    function computeReleasableLP(address _addr) public view returns (uint256) {\n', '        if (block.timestamp < userInfo[_addr].lpReleaseTime) {\n', '            return 0;\n', '        }\n', '\n', '        return userInfo[_addr].amount;\n', '    }\n', '}\n', '\n', 'contract TROPStaking is OwnableUpgradeSafe, TimeLockLPTokenStaking {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Dev address.\n', '    address public devaddr;\n', '\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint;\n', '\n', '    //// pending rewards awaiting anyone to massUpdate\n', '    uint256 public pendingRewards;\n', '\n', '    uint256 public epoch;\n', '\n', '    uint256 public constant REWARD_LOCKED_PERIOD = 14 days;\n', '    uint256 public constant REWARD_RELEASE_PERCENTAGE = 40;\n', '    uint256 public contractStartBlock;\n', '\n', '    uint256 private tropBalance;\n', '\n', '    // Sets the dev fee for this contract\n', '    // defaults at 7.24%\n', '    // Note contract owner is meant to be a governance contract allowing TROP governance consensus\n', '    uint16 DEV_FEE;\n', '\n', '    uint256 public pending_DEV_rewards;\n', '\n', '    // Returns fees generated since start of this contract\n', '    function averageFeesPerBlockSinceStart()\n', '        external\n', '        view\n', '        returns (uint256 averagePerBlock)\n', '    {\n', '        averagePerBlock = poolInfo\n', '            .cumulativeRewardsSinceStart\n', '            .add(poolInfo.rewardsInThisEpoch)\n', '            .add(pendingRewards)\n', '            .div(block.number.sub(poolInfo.startBlock));\n', '    }\n', '\n', '    // Returns averge fees in this epoch\n', '    function averageFeesPerBlockEpoch()\n', '        external\n', '        view\n', '        returns (uint256 averagePerBlock)\n', '    {\n', '        averagePerBlock = poolInfo.rewardsInThisEpoch.add(pendingRewards).div(\n', '            block.number.sub(poolInfo.epochCalculationStartBlock)\n', '        );\n', '    }\n', '\n', '    function getEpochReward(uint256 _epoch) public view returns (uint256) {\n', '        return poolInfo.epochRewards[_epoch];\n', '    }\n', '\n', '    //Starts a new calculation epoch\n', '    // Because averge since start will not be accurate\n', '    function startNewEpoch() public {\n', '        require(\n', '            poolInfo.epochCalculationStartBlock + 50000 < block.number,\n', '            "New epoch not ready yet"\n', '        ); // About a week\n', '        poolInfo.epochRewards[epoch] = poolInfo.rewardsInThisEpoch;\n', '        poolInfo.cumulativeRewardsSinceStart = poolInfo\n', '            .cumulativeRewardsSinceStart\n', '            .add(poolInfo.rewardsInThisEpoch);\n', '        poolInfo.rewardsInThisEpoch = 0;\n', '        poolInfo.epochCalculationStartBlock = block.number;\n', '        ++epoch;\n', '    }\n', '\n', '    event Deposit(address indexed user, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 amount);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    function initialize(address _devFundAddress) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        DEV_FEE = 1000; //10%\n', '        trop = IERC20(0x2eC75589856562646afE393455986CaD26c4Cc5f);\n', '        devaddr = _devFundAddress;\n', '        contractStartBlock = block.number;\n', '        poolInfo.startBlock = block.number;\n', '        poolInfo.startTime = block.timestamp;\n', '        poolInfo.epochCalculationStartBlock = block.number;\n', '    }\n', '\n', '    modifier validLockTime(uint256 _time) {\n', '        require(\n', '            _time == 10 days ||\n', '                _time == 20 days ||\n', '                _time == 25 days ||\n', '                _time == 50 days ||\n', '                _time == 75 days ||\n', '                _time == 100 days,\n', '            "Lock time is not valid"\n', '        );\n', '        _;\n', '    }\n', '\n', '    //to avoid exploit in time lock\n', '    function checkLockTiming(address _user, uint256 _time) internal {\n', '        uint256 lpReleaseTime = userInfo[_user].lpReleaseTime;\n', '        require(lpReleaseTime <= block.timestamp.add(_time), "timing invalid");\n', '    }\n', '\n', '    function setEmergencyWithdrawable(bool _withdrawable) public onlyOwner {\n', '        poolInfo.emergencyWithdrawable = _withdrawable;\n', '    }\n', '\n', '    function setDevFee(uint16 _DEV_FEE) public onlyOwner {\n', '        require(_DEV_FEE <= 1000, "Dev fee clamped at 10%");\n', '        DEV_FEE = _DEV_FEE;\n', '    }\n', '\n', '    // View function to see pending TROPs on frontend.\n', '    function pendingTROP(address _user) public view returns (uint256) {\n', '        UserInfo storage user = userInfo[_user];\n', '        uint256 accTROPPerRAP = poolInfo.accTROPPerRAP;\n', '        uint256 rewardAllocPoint = user.rewardAllocPoint;\n', '\n', '        uint256 totalRAP = poolInfo.totalRewardAllocPoint;\n', '\n', '        if (totalRAP == 0) return 0;\n', '\n', '        uint256 rewardWhole = pendingRewards;\n', '        uint256 rewardFee = rewardWhole.mul(DEV_FEE).div(10000);\n', '        uint256 rewardToDistribute = rewardWhole.sub(rewardFee);\n', '        uint256 inc = rewardToDistribute.mul(1e18).div(totalRAP);\n', '        accTROPPerRAP = accTROPPerRAP.add(inc);\n', '\n', '        return\n', '            rewardAllocPoint.mul(accTROPPerRAP).div(1e18).sub(user.rewardDebt);\n', '    }\n', '\n', '    function getLockedReward(address _user) public view returns (uint256) {\n', '        return userInfo[_user].rewardLocked;\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        updatePool();\n', '\n', '        pendingRewards = 0;\n', '    }\n', '\n', '    // ----\n', '    // Function that adds pending rewards, called by the TROP token.\n', '    // ----\n', '    function updatePendingRewards() public {\n', '        uint256 newRewards = trop.balanceOf(address(this)).sub(tropBalance).sub(\n', '            poolInfo.totalStake\n', '        );\n', '\n', '        if (newRewards > 0) {\n', '            tropBalance = trop.balanceOf(address(this)).sub(\n', '                poolInfo.totalStake\n', "            ); // If there is no change the balance didn't change\n", '            pendingRewards = pendingRewards.add(newRewards);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool() internal returns (uint256 tropRewardWhole) {\n', '        uint256 totalRAP = poolInfo.totalRewardAllocPoint;\n', '\n', '        if (totalRAP == 0) {\n', '            // avoids division by 0 errors\n', '            return 0;\n', '        }\n', '        tropRewardWhole = pendingRewards;\n', '\n', '        uint256 rewardFee = tropRewardWhole.mul(DEV_FEE).div(10000);\n', '        uint256 rewardToDistribute = tropRewardWhole.sub(rewardFee);\n', '\n', '        uint256 inc = rewardToDistribute.mul(1e18).div(totalRAP);\n', '        pending_DEV_rewards = pending_DEV_rewards.add(rewardFee);\n', '\n', '        poolInfo.accTROPPerRAP = poolInfo.accTROPPerRAP.add(inc);\n', '        poolInfo.rewardsInThisEpoch = poolInfo.rewardsInThisEpoch.add(\n', '            rewardToDistribute\n', '        );\n', '    }\n', '\n', '    function withdrawReward() public {\n', '        withdraw(0);\n', '    }\n', '\n', '    // Deposit  tokens to TROPVault for TROP allocation.\n', '    function deposit(uint256 _amount, uint256 _lockTime)\n', '        public\n', '        validLockTime(_lockTime)\n', '    {\n', '        checkLockTiming(msg.sender, _lockTime);\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        massUpdatePools();\n', '\n', '        // Transfer pending tokens\n', '        // to user\n', '        updateAndPayOutPending(msg.sender);\n', '\n', '        //Transfer in the amounts from user\n', '        // save gas\n', '        if (_amount > 0) {\n', '            uint256 balBefore = trop.balanceOf(address(this));\n', '            trop.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            require(\n', '                trop.balanceOf(address(this)).sub(balBefore) == _amount,\n', '                "stake should not have fee"\n', '            );\n', '            updateRewardAllocPoint(msg.sender, _amount, _lockTime);\n', '            user.amount = user.amount.add(_amount);\n', '            poolInfo.totalStake += _amount;\n', '        }\n', '\n', '        user.rewardDebt = user.rewardAllocPoint.mul(poolInfo.accTROPPerRAP).div(\n', '            1e18\n', '        );\n', '        emit Deposit(msg.sender, _amount);\n', '    }\n', '\n', '    function updateRewardAllocPoint(\n', '        address _addr,\n', '        uint256 _depositAmount,\n', '        uint256 _lockTime\n', '    ) internal {\n', '        UserInfo storage user = userInfo[_addr];\n', '        PoolInfo storage pool = poolInfo;\n', '        if (user.amount == 0) {\n', '            user.rewardAllocPoint = _depositAmount.mul(_lockTime);\n', '            pool.totalRewardAllocPoint = pool.totalRewardAllocPoint.add(\n', '                user.rewardAllocPoint\n', '            );\n', '            user.lockedPeriod = _lockTime;\n', '            user.lpReleaseTime = block.timestamp.add(_lockTime);\n', '        } else {\n', '            user.lockedPeriod = _lockTime;\n', '            user.lpReleaseTime = block.timestamp.add(_lockTime);\n', '\n', '            uint256 pointMinus = user.rewardAllocPoint;\n', '            uint256 amountAfterDeposit = user.amount.add(_depositAmount);\n', '            user.rewardAllocPoint = amountAfterDeposit.mul(_lockTime);\n', '            pool.totalRewardAllocPoint = pool\n', '                .totalRewardAllocPoint\n', '                .add(user.rewardAllocPoint)\n', '                .sub(pointMinus);\n', '        }\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does user get the deposited amounts?\n', '    // [x] Does user that its deposited for update correcty?\n', '    // [x] Does the depositor get their tokens decreased\n', '    function depositFor(\n', '        address _depositFor,\n', '        uint256 _amount,\n', '        uint256 _lockTime\n', '    ) public validLockTime(_lockTime) {\n', '        checkLockTiming(_depositFor, _lockTime);\n', '        // requires no allowances\n', '        PoolInfo storage pool = poolInfo;\n', '        UserInfo storage user = userInfo[_depositFor];\n', '\n', '        massUpdatePools();\n', '\n', '        // Transfer pending tokens\n', '        // to user\n', '        updateAndPayOutPending(_depositFor); // Update the balances of person that amount is being deposited for\n', '\n', '        if (_amount > 0) {\n', '            uint256 balBefore = trop.balanceOf(address(this));\n', '            trop.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            require(\n', '                trop.balanceOf(address(this)).sub(balBefore) == _amount,\n', '                "stake should not have fee"\n', '            );\n', '            updateRewardAllocPoint(_depositFor, _amount, _lockTime);\n', '            user.amount = user.amount.add(_amount); // This is depositedFor address\n', '            poolInfo.totalStake += _amount;\n', '        }\n', '\n', '        user.rewardDebt = user.rewardAllocPoint.mul(pool.accTROPPerRAP).div(\n', '            1e18\n', '        ); /// This is deposited for address\n', '        emit Deposit(_depositFor, _amount);\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does allowance update correctly?\n', '    function setAllowanceForPoolToken(address spender, uint256 value) public {\n', '        PoolInfo storage pool = poolInfo;\n', '        pool.allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '    }\n', '\n', '    function quitPool() public {\n', '        require(\n', '            block.timestamp > userInfo[msg.sender].lpReleaseTime,\n', '            "cannot withdraw all lp tokens before"\n', '        );\n', '\n', '        uint256 withdrawnableAmount = computeReleasableLP(msg.sender);\n', '        withdraw(withdrawnableAmount);\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does allowance decrease?\n', '    // [x] Do oyu need allowance\n', '    // [x] Withdraws to correct address\n', '    function withdrawFrom(address owner, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo;\n', '        require(\n', '            pool.allowance[owner][msg.sender] >= _amount,\n', '            "withdraw: insufficient allowance"\n', '        );\n', '        pool.allowance[owner][msg.sender] = pool.allowance[owner][msg.sender]\n', '            .sub(_amount);\n', '        _withdraw(_amount, owner, msg.sender);\n', '    }\n', '\n', '    // Withdraw  tokens from TROPVault.\n', '    function withdraw(uint256 _amount) public {\n', '        _withdraw(_amount, msg.sender, msg.sender);\n', '    }\n', '\n', '    // Low level withdraw function\n', '    function _withdraw(\n', '        uint256 _amount,\n', '        address from,\n', '        address to\n', '    ) internal {\n', '        PoolInfo storage pool = poolInfo;\n', '        //require(pool.withdrawable, "Withdrawing from this pool is disabled");\n', '        UserInfo storage user = userInfo[from];\n', '\n', '        uint256 withdrawnableAmount = computeReleasableLP(from);\n', '        require(withdrawnableAmount >= _amount, "withdraw: not good");\n', '\n', '        massUpdatePools();\n', '        updateAndPayOutPending(from); // Update balances of from this is not withdrawal but claiming TROP farmed\n', '\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            user.rewardAllocPoint = user.amount.mul(user.lockedPeriod);\n', '            pool.totalRewardAllocPoint = pool.totalRewardAllocPoint.sub(\n', '                _amount.mul(user.lockedPeriod)\n', '            );\n', '            trop.safeTransfer(address(to), _amount);\n', '            if (user.amount == 0) {\n', '                user.lockedPeriod = 0;\n', '                user.lpReleaseTime = 0;\n', '            }\n', '        }\n', '        user.rewardDebt = user.rewardAllocPoint.mul(pool.accTROPPerRAP).div(\n', '            1e18\n', '        );\n', '        emit Withdraw(to, _amount);\n', '    }\n', '\n', '    function updateAndPayOutPending(address from) internal {\n', '        UserInfo storage user = userInfo[from];\n', '        if (user.releaseTime == 0) {\n', '            user.releaseTime = block.timestamp.add(REWARD_LOCKED_PERIOD);\n', '        }\n', '        if (block.timestamp > user.releaseTime) {\n', '            //compute withdrawnable amount\n', '            uint256 lockedAmount = user.rewardLocked;\n', '            user.rewardLocked = 0;\n', '            safeTROPTransfer(from, lockedAmount);\n', '            user.releaseTime = block.timestamp.add(REWARD_LOCKED_PERIOD);\n', '        }\n', '\n', '        uint256 pending = pendingTROP(from);\n', '        uint256 paid = pending.mul(REWARD_RELEASE_PERCENTAGE).div(100);\n', '        uint256 _lockedReward = pending.sub(paid);\n', '        if (_lockedReward > 0) {\n', '            user.rewardLocked = user.rewardLocked.add(_lockedReward);\n', '        }\n', '\n', '        if (paid > 0) {\n', '            safeTROPTransfer(from, paid);\n', '        }\n', '    }\n', '\n', '    function emergencyWithdraw() public {\n', '        PoolInfo storage pool = poolInfo;\n', '        require(\n', '            pool.emergencyWithdrawable,\n', '            "Withdrawing from this pool is disabled"\n', '        );\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        trop.safeTransfer(address(msg.sender), user.amount);\n', '        emit EmergencyWithdraw(msg.sender, user.amount);\n', '        if (\n', '            user.amount.mul(user.rewardAllocPoint) <= pool.totalRewardAllocPoint\n', '        ) {\n', '            pool.totalRewardAllocPoint = pool.totalRewardAllocPoint.sub(\n', '                user.amount.mul(user.rewardAllocPoint)\n', '            );\n', '        }\n', '        user.rewardAllocPoint = 0;\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    function safeTROPTransfer(address _to, uint256 _amount) internal {\n', '        uint256 tropBal = trop.balanceOf(address(this));\n', '\n', '        if (_amount > tropBal) {\n', '            trop.transfer(_to, tropBal);\n', '            tropBalance = trop.balanceOf(address(this)).sub(\n', '                poolInfo.totalStake\n', '            );\n', '        } else {\n', '            trop.transfer(_to, _amount);\n', '            tropBalance = trop.balanceOf(address(this)).sub(\n', '                poolInfo.totalStake\n', '            );\n', '        }\n', '        transferDevFee();\n', '    }\n', '\n', '    function transferDevFee() public {\n', '        if (pending_DEV_rewards == 0) return;\n', '\n', '        uint256 tropBal = trop.balanceOf(address(this));\n', '        if (pending_DEV_rewards > tropBal) {\n', '            trop.transfer(devaddr, tropBal);\n', '            tropBalance = trop.balanceOf(address(this)).sub(\n', '                poolInfo.totalStake\n', '            );\n', '        } else {\n', '            trop.transfer(devaddr, pending_DEV_rewards);\n', '            tropBalance = trop.balanceOf(address(this)).sub(\n', '                poolInfo.totalStake\n', '            );\n', '        }\n', '\n', '        pending_DEV_rewards = 0;\n', '    }\n', '\n', '    function setDevFeeReciever(address _devaddr) public {\n', '        require(devaddr == msg.sender, "only dev can change");\n', '        devaddr = _devaddr;\n', '    }\n', '\n', '    event Restake(address indexed user, uint256 amount);\n', '\n', '    function claimAndRestake() public {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require(user.amount > 0);\n', '        massUpdatePools();\n', '\n', '        if (user.releaseTime == 0) {\n', '            user.releaseTime = block.timestamp.add(REWARD_LOCKED_PERIOD);\n', '        }\n', '        uint256 _rewards = 0;\n', '        if (block.timestamp > user.releaseTime) {\n', '            //compute withdrawnable amount\n', '            uint256 lockedAmount = user.rewardLocked;\n', '            user.rewardLocked = 0;\n', '            user.releaseTime = block.timestamp.add(REWARD_LOCKED_PERIOD);\n', '            _rewards = _rewards.add(lockedAmount);\n', '        }\n', '\n', '        uint256 pending = pendingTROP(msg.sender);\n', '        uint256 paid = pending.mul(REWARD_RELEASE_PERCENTAGE).div(100);\n', '        uint256 _lockedReward = pending.sub(paid);\n', '        if (_lockedReward > 0) {\n', '            user.rewardLocked = user.rewardLocked.add(_lockedReward);\n', '        }\n', '\n', '        _rewards = _rewards.add(paid);\n', '\n', '        user.lpReleaseTime = user.lpReleaseTime.add(1 days);\n', '\n', '        uint256 pointMinus = user.rewardAllocPoint;\n', '        uint256 amountAfterDeposit = user.amount.add(_rewards);\n', '        user.rewardAllocPoint = amountAfterDeposit.mul(user.lockedPeriod);\n', '        poolInfo.totalRewardAllocPoint = poolInfo\n', '            .totalRewardAllocPoint\n', '            .add(user.rewardAllocPoint)\n', '            .sub(pointMinus);\n', '        user.amount = amountAfterDeposit; // This is depositedFor address\n', '        user.rewardDebt = user.rewardAllocPoint.mul(poolInfo.accTROPPerRAP).div(\n', '            1e18\n', '        );\n', '        poolInfo.totalStake += _rewards;\n', '        transferDevFee();\n', '        emit Restake(msg.sender, _rewards);\n', '    }\n', '}']