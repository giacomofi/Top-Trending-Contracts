['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {\n', '        if (exponent == 0) {\n', '            return 1;\n', '        }\n', '        else if (exponent == 1) {\n', '            return base;\n', '        }\n', '        else if (base == 0 && exponent != 0) {\n', '            return 0;\n', '        }\n', '        else {\n', '            uint256 z = base;\n', '            for (uint256 i = 1; i < exponent; i++)\n', '                z = mul(z, base);\n', '            return z;\n', '        }\n', '    }\n', '}\n', '\n', 'library FixedPointMath {\n', '  uint256 public constant DECIMALS = 18;\n', '  uint256 public constant SCALAR = 10**DECIMALS;\n', '\n', '  struct FixedDecimal {\n', '    uint256 x;\n', '  }\n', '\n', '  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\n', '    uint256 x;\n', '    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\n', '    return FixedDecimal(x);\n', '  }\n', '\n', '  function maximumValue() internal pure returns (FixedDecimal memory) {\n', '    return FixedDecimal(uint256(-1));\n', '  }\n', '\n', '  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\n', '    uint256 x;\n', '    require((x = self.x + value.x) >= self.x);\n', '    return FixedDecimal(x);\n', '  }\n', '\n', '  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\n', '    return add(self, fromU256(value));\n', '  }\n', '\n', '  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\n', '    uint256 x;\n', '    require((x = self.x - value.x) <= self.x);\n', '    return FixedDecimal(x);\n', '  }\n', '\n', '  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\n', '    return sub(self, fromU256(value));\n', '  }\n', '\n', '  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\n', '    uint256 x;\n', '    require(value == 0 || (x = self.x * value) / value == self.x);\n', '    return FixedDecimal(x);\n', '  }\n', '\n', '  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\n', '    require(value != 0);\n', '    return FixedDecimal(self.x / value);\n', '  }\n', '\n', '  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\n', '    if (self.x < value.x) {\n', '      return -1;\n', '    }\n', '\n', '    if (self.x > value.x) {\n', '      return 1;\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  function decode(FixedDecimal memory self) internal pure returns (uint256) {\n', '    return self.x / SCALAR;\n', '  }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Accessible is Ownable {\n', '    mapping(address => bool) private access;\n', '    \n', '    constructor() {\n', '        access[msg.sender] = true;\n', '    }\n', '    \n', '     modifier hasAccess() {\n', '        require(checkAccess(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    function checkAccess(address sender) public view returns (bool) {\n', '        if (access[sender] == true) \n', '            return true;\n', '        return false;\n', '    }\n', '    \n', '    function removeAccess(address addr) public hasAccess returns (bool success) {\n', '        access[addr] = false;\n', '        return true;\n', '    }\n', '    \n', '    function addAccess(address addr) public hasAccess returns (bool) {\n', '        access[addr] = true;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ExternalAccessible {\n', '    \n', '    address public accessContract;\n', '\n', '    function checkAccess(address sender) public returns (bool) {\n', '        bool result = Accessible(accessContract).checkAccess(sender);\n', '        require(result == true);\n', '        return true;\n', '    }\n', '\n', '    modifier hasAccess() {\n', '        require(checkAccess(msg.sender));\n', '        _;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract ERC20 is Context, IERC20, ExternalAccessible {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string public _name;\n', '    string public _symbol;\n', '    uint8 public _decimals;\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) external virtual hasAccess {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) external virtual hasAccess {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract wXEQ is ERC20 {\n', '    \n', '    constructor(address _accessContract) {\n', '        _name = "Wrapped Equilibria v2";\n', '        _symbol = "wXEQ";\n', '        _decimals = 18;\n', '        accessContract = _accessContract;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <[email\xa0protected]π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'library Pool {\n', '  using FixedPointMath for FixedPointMath.FixedDecimal;\n', '  using Pool for Pool.Data;\n', '  using Pool for Pool.List;\n', '  using SafeMath for uint256;\n', '\n', '  struct Context {\n', '    uint256 rewardRate;\n', '    uint256 totalRewardWeight;\n', '  }\n', '\n', '  struct Data {\n', '    IERC20 token;\n', '    uint256 totalDeposited;\n', '    uint256 rewardWeight;\n', '    FixedPointMath.FixedDecimal accumulatedRewardWeight;\n', '    uint256 lastUpdatedBlock;\n', '  }\n', '\n', '  struct List {\n', '    Data[] elements;\n', '  }\n', '\n', '  /// @dev Updates the pool.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  function update(Data storage _data, Context storage _ctx) internal {\n', '    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\n', '    _data.lastUpdatedBlock = block.number;\n', '  }\n', '\n', '  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  ///\n', '  /// @return the reward rate of the pool in tokens per block.\n', '  function getRewardRate(Data storage _data, Context storage _ctx)\n', '    internal view\n', '    returns (uint256)\n', '  {\n', '    // console.log("get reward rate");\n', '    // console.log(uint(_data.rewardWeight));\n', '    // console.log(uint(_ctx.totalRewardWeight));\n', '    // console.log(uint(_ctx.rewardRate));\n', '    return _ctx.rewardRate.mul(_data.rewardWeight).div(_ctx.totalRewardWeight);\n', '  }\n', '\n', '  /// @dev Gets the accumulated reward weight of a pool.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  ///\n', '  /// @return the accumulated reward weight.\n', '  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\n', '    internal view\n', '    returns (FixedPointMath.FixedDecimal memory)\n', '  {\n', '    if (_data.totalDeposited == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\n', '    if (_elapsedTime == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    uint256 _rewardRate = _data.getRewardRate(_ctx);\n', '    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\n', '\n', '    if (_distributeAmount == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    FixedPointMath.FixedDecimal memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDeposited);\n', '    return _data.accumulatedRewardWeight.add(_rewardWeight);\n', '  }\n', '\n', '  /// @dev Adds an element to the list.\n', '  ///\n', '  /// @param _element the element to add.\n', '  function push(List storage _self, Data memory _element) internal {\n', '    _self.elements.push(_element);\n', '  }\n', '\n', '  /// @dev Gets an element from the list.\n', '  ///\n', '  /// @param _index the index in the list.\n', '  ///\n', '  /// @return the element at the specified index.\n', '  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\n', '    return _self.elements[_index];\n', '  }\n', '\n', '  /// @dev Gets the last element in the list.\n', '  ///\n', '  /// This function will revert if there are no elements in the list.\n', '  ///ck\n', '  /// @return the last element in the list.\n', '  function last(List storage _self) internal view returns (Data storage) {\n', '    return _self.elements[_self.lastIndex()];\n', '  }\n', '\n', '  /// @dev Gets the index of the last element in the list.\n', '  ///\n', '  /// This function will revert if there are no elements in the list.\n', '  ///\n', '  /// @return the index of the last element.\n', '  function lastIndex(List storage _self) internal view returns (uint256) {\n', '    uint256 _length = _self.length();\n', '    return _length.sub(1, "Pool.List: list is empty");\n', '  }\n', '\n', '  /// @dev Gets the number of elements in the list.\n', '  ///\n', '  /// @return the number of elements.\n', '  function length(List storage _self) internal view returns (uint256) {\n', '    return _self.elements.length;\n', '  }\n', '}\n', '\n', '/// @title Stake\n', '///\n', '/// @dev A library which provides the Stake data struct and associated functions.\n', 'library Stake {\n', '  using FixedPointMath for FixedPointMath.FixedDecimal;\n', '  using Pool for Pool.Data;\n', '  using SafeMath for uint256;\n', '  using Stake for Stake.Data;\n', '\n', '  struct Data {\n', '    uint256 totalDeposited;\n', '    uint256 totalUnclaimed;\n', '    FixedPointMath.FixedDecimal lastAccumulatedWeight;\n', '  }\n', '\n', '  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\n', '    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\n', '    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n', '  }\n', '\n', '  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\n', '    internal view\n', '    returns (uint256)\n', '  {\n', '    FixedPointMath.FixedDecimal memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n', '    FixedPointMath.FixedDecimal memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\n', '\n', '    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\n', '      return _self.totalUnclaimed;\n', '    }\n', '\n', '    uint256 _distributedAmount = _currentAccumulatedWeight\n', '      .sub(_lastAccumulatedWeight)\n', '      .mul(_self.totalDeposited)\n', '      .decode();\n', '\n', '    return _self.totalUnclaimed.add(_distributedAmount);\n', '  }\n', '}\n', '\n', 'interface IDetailedERC20 is IERC20 {\n', '  function name() external returns (string memory);\n', '  function symbol() external returns (string memory);\n', '  function decimals() external returns (uint8);\n', '}\n', '\n', 'interface IMintableERC20 is IDetailedERC20{\n', '  function _mint(address _recipient, uint256 _amount) external;\n', '  function _burn(address account, uint256 amount) external;\n', '}\n', '\n', 'contract StakingPools is ReentrancyGuard {\n', '  using FixedPointMath for FixedPointMath.FixedDecimal;\n', '  using Pool for Pool.Data;\n', '  using Pool for Pool.List;\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '  using Stake for Stake.Data;\n', '\n', '  event PendingGovernanceUpdated(\n', '    address pendingGovernance\n', '  );\n', '\n', '  event GovernanceUpdated(\n', '    address governance\n', '  );\n', '\n', '  event RewardRateUpdated(\n', '    uint256 rewardRate\n', '  );\n', '\n', '  event PoolRewardWeightUpdated(\n', '    uint256 indexed poolId,\n', '    uint256 rewardWeight\n', '  );\n', '\n', '  event PoolCreated(\n', '    uint256 indexed poolId,\n', '    IERC20 indexed token\n', '  );\n', '\n', '  event TokensDeposited(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  event TokensWithdrawn(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  event TokensClaimed(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  /// @dev The token which will be minted as a reward for staking.\n', '  IMintableERC20 public reward;\n', '\n', '  /// @dev The address of the account which currently has administrative capabilities over this contract.\n', '  address public governance;\n', '\n', '  address public pendingGovernance;\n', '\n', '  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\n', '  /// will return an identifier of zero.\n', '  mapping(IERC20 => uint256) public tokenPoolIds;\n', '\n', '  /// @dev The context shared between the pools.\n', '  Pool.Context private _ctx;\n', '\n', '  /// @dev A list of all of the pools.\n', '  Pool.List private _pools;\n', '\n', '  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\n', '  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\n', '  \n', '  /// @dev Tracks the total amount of tokens claimed as rewards.\n', '  uint256 public totalTokensClaimed;\n', '\n', '  constructor(\n', '    IMintableERC20 _reward,\n', '    address _governance\n', '  ) public {\n', '    require(_governance != address(0), "StakingPools: governance address cannot be 0x0");\n', '\n', '    reward = _reward;\n', '    governance = _governance;\n', '    // 2083333300000000\n', '  }\n', '\n', '  /// @dev A modifier which reverts when the caller is not the governance.\n', '  modifier onlyGovernance() {\n', '    require(msg.sender == governance, "StakingPools: only governance");\n', '    _;\n', '  }\n', '\n', '  /// @dev Sets the governance.\n', '  ///\n', '  /// This function can only called by the current governance.\n', '  ///\n', '  /// @param _pendingGovernance the new pending governance.\n', '  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\n', '    require(_pendingGovernance != address(0), "StakingPools: pending governance address cannot be 0x0");\n', '    pendingGovernance = _pendingGovernance;\n', '\n', '    emit PendingGovernanceUpdated(_pendingGovernance);\n', '  }\n', '\n', '  function acceptGovernance() external {\n', '    require(msg.sender == pendingGovernance, "StakingPools: only pending governance");\n', '\n', '    address _pendingGovernance = pendingGovernance;\n', '    governance = _pendingGovernance;\n', '\n', '    emit GovernanceUpdated(_pendingGovernance);\n', '  }\n', '\n', '  /// @dev Sets the distribution reward rate.\n', '  ///\n', '  /// This will update all of the pools.\n', '  ///\n', '  /// @param _rewardRate The number of tokens to distribute per second.\n', '  function setRewardRate(uint256 _rewardRate) external onlyGovernance {\n', '    _updatePools(); // 951293760000000\n', '\n', '    _ctx.rewardRate = _rewardRate;\n', '\n', '    emit RewardRateUpdated(_rewardRate);\n', '  }\n', '\n', '  /// @dev Creates a new pool.\n', '  ///\n', '  /// The created pool will need to have its reward weight initialized before it begins generating rewards.\n', '  ///\n', '  /// @param _token The token the pool will accept for staking.\n', '  ///\n', '  /// @return the identifier for the newly created pool.\n', '  function createPool(IERC20 _token) external onlyGovernance returns (uint256) {\n', '    require(tokenPoolIds[_token] == 0, "StakingPools: token already has a pool");\n', '\n', '    uint256 _poolId = _pools.length();\n', '\n', '    _pools.push(Pool.Data({\n', '      token: _token,\n', '      totalDeposited: 0,\n', '      rewardWeight: 0,\n', '      accumulatedRewardWeight: FixedPointMath.FixedDecimal(0),\n', '      lastUpdatedBlock: block.number\n', '    }));\n', '\n', '    tokenPoolIds[_token] = _poolId + 1;\n', '\n', '    emit PoolCreated(_poolId, _token);\n', '\n', '    return _poolId;\n', '  }\n', '\n', '  /// @dev Sets the reward weights of all of the pools.\n', '  ///\n', '  /// @param _rewardWeights The reward weights of all of the pools.\n', '  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\n', '    require(_rewardWeights.length == _pools.length(), "StakingPools: weights length mismatch");\n', '\n', '    _updatePools();\n', '\n', '    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\n', '    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '\n', '      uint256 _currentRewardWeight = _pool.rewardWeight;\n', '      if (_currentRewardWeight == _rewardWeights[_poolId]) {\n', '        continue;\n', '      }\n', '\n', '      // FIXME\n', '      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeights[_poolId]);\n', '      _pool.rewardWeight = _rewardWeights[_poolId];\n', '\n', '      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\n', '    }\n', '\n', '    _ctx.totalRewardWeight = _totalRewardWeight;\n', '  }\n', '\n', '  /// @dev Stakes tokens into a pool.\n', '  ///\n', '  /// @param _poolId        the pool to deposit tokens into.\n', '  /// @param _depositAmount the amount of tokens to deposit.\n', '  function deposit(uint256 _poolId, uint256 _depositAmount) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    _deposit(_poolId, _depositAmount);\n', '  }\n', '\n', '  /// @dev Withdraws staked tokens from a pool.\n', '  ///\n', '  /// @param _poolId          The pool to withdraw staked tokens from.\n', '  /// @param _withdrawAmount  The number of tokens to withdraw.\n', '  function withdraw(uint256 _poolId, uint256 _withdrawAmount) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '    \n', '    _claim(_poolId);\n', '    _withdraw(_poolId, _withdrawAmount);\n', '  }\n', '\n', '  /// @dev Claims all rewarded tokens from a pool.\n', '  ///\n', '  /// @param _poolId The pool to claim rewards from.\n', '  ///\n', '  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n', '  function claim(uint256 _poolId) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    _claim(_poolId);\n', '  }\n', '\n', '  /// @dev Claims all rewards from a pool and then withdraws all staked tokens.\n', '  ///\n', '  /// @param _poolId the pool to exit from.\n', '  function exit(uint256 _poolId) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    _claim(_poolId);\n', '    _withdraw(_poolId, _stake.totalDeposited);\n', '  }\n', '\n', '  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\n', '  ///\n', '  /// @return the reward rate.\n', '  function rewardRate() external view returns (uint256) {\n', '    return _ctx.rewardRate;\n', '  }\n', '\n', '  /// @dev Gets the total reward weight between all the pools.\n', '  ///\n', '  /// @return the total reward weight.\n', '  function totalRewardWeight() external view returns (uint256) {\n', '    return _ctx.totalRewardWeight;\n', '  }\n', '\n', '  /// @dev Gets the number of pools that exist.\n', '  ///\n', '  /// @return the pool count.\n', '  function poolCount() external view returns (uint256) {\n', '    return _pools.length();\n', '  }\n', '\n', '  /// @dev Gets the token a pool accepts.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the token.\n', '  function getPoolToken(uint256 _poolId) external view returns (IERC20) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.token;\n', '  }\n', '\n', '  /// @dev Gets the total amount of funds staked in a pool.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the total amount of staked or deposited tokens.\n', '  function getPoolTotalDeposited(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.totalDeposited;\n', '  }\n', '\n', '  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the pool reward weight.\n', '  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.rewardWeight;\n', '  }\n', '\n', '  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the pool reward rate.\n', '  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.getRewardRate(_ctx);\n', '  }\n', '\n', '  /// @dev Gets the number of tokens a user has staked into a pool.\n', '  ///\n', '  /// @param _account The account to query.\n', '  /// @param _poolId  the identifier of the pool.\n', '  ///\n', '  /// @return the amount of deposited tokens.\n', '  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\n', '    Stake.Data storage _stake = _stakes[_account][_poolId];\n', '    return _stake.totalDeposited;\n', '  }\n', '\n', '  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\n', '  ///\n', '  /// @param _account The account to get the unclaimed balance of.\n', '  /// @param _poolId  The pool to check for unclaimed rewards.\n', '  ///\n', '  /// @return the amount of unclaimed reward tokens a user has in a pool.\n', '  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\n', '    Stake.Data storage _stake = _stakes[_account][_poolId];\n', '    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\n', '  }\n', '\n', '  /// @dev Updates all of the pools.\n', '  function _updatePools() internal {\n', '    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '      _pool.update(_ctx);\n', '    }\n', '  }\n', '\n', '  /// @dev Stakes tokens into a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId        the pool to deposit tokens into.\n', '  /// @param _depositAmount the amount of tokens to deposit.\n', '  function _deposit(uint256 _poolId, uint256 _depositAmount) internal {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\n', '    _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\n', '\n', '    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\n', '\n', '    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\n', '  }\n', '\n', '  /// @dev Withdraws staked tokens from a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId          The pool to withdraw staked tokens from.\n', '  /// @param _withdrawAmount  The number of tokens to withdraw.\n', '  function _withdraw(uint256 _poolId, uint256 _withdrawAmount) internal {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\n', '    _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\n', '\n', '    _pool.token.safeTransfer(msg.sender, _withdrawAmount);\n', '\n', '    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\n', '  }\n', '\n', '  /// @dev Claims all rewarded tokens from a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId The pool to claim rewards from.\n', '  ///\n', '  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n', '  function _claim(uint256 _poolId) internal {\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    uint256 _claimAmount = _stake.totalUnclaimed;\n', '    _stake.totalUnclaimed = 0;\n', '    \n', '    reward._mint(msg.sender, _claimAmount);\n', '    totalTokensClaimed = totalTokensClaimed.add(_claimAmount);\n', '\n', '    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\n', '  }\n', '}\n', '\n', 'contract Snapshot is Ownable {\n', '    \n', '    address[] public addressList;\n', '    address public oldContract;\n', '    address public newContract;\n', '    \n', '    mapping(address => bool) public hasClaimed;\n', '    \n', '    constructor(address _oldContract, address _newContract) {\n', '        oldContract = _oldContract;\n', '        newContract = _newContract;\n', '    }\n', '    \n', '    function swapTokens(uint loops) public onlyOwner {\n', '\n', '        for (uint x = 0; x < loops; x++) {\n', '            if (hasClaimed[addressList[x]] == false) {\n', '                uint256 bal = ERC20(oldContract).balanceOf(addressList[x]);\n', '                if (bal > 0)\n', '                    ERC20(newContract)._mint(addressList[x], bal);\n', '                hasClaimed[addressList[x]] = true;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function numberOfAddresses() public view returns (uint256) {\n', '        return addressList.length;\n', '    }\n', '    \n', '    function addAddresses(address[] calldata _addressList) public onlyOwner {\n', '        for (uint i = 0; i < _addressList.length; i++) {\n', '            addressList.push(_addressList[i]);\n', '        }\n', '    }\n', '}\n', '\n', 'contract XEQSwaps is ExternalAccessible, Ownable {\n', '    using SafeMath for *;\n', '    \n', '    wXEQ wXEQContract;\n', '\n', '    uint256 public wXEQMinted;\n', '    uint256 public wXEQBurned;\n', '    uint256 public teamFees;\n', '\n', '    uint256 teamAmount;\n', '    uint256 burntAmount;\n', '    uint256 devFeePercent;\n', '\n', '    //txHash -> eth address of tx mint\n', '    \n', '    mapping(string => bool) xeq_complete;\n', '    mapping(string => uint256) xeq_amounts;\n', '    mapping(string => address) eth_addresses;\n', '\n', '    \n', '    constructor(address _wxeq, address _accessContract) {\n', '        accessContract = _accessContract;\n', '        wXEQContract = wXEQ(_wxeq);\n', '        wXEQMinted = 0;\n', '        transferOwnership(msg.sender);\n', '        teamAmount = 4000;\n', '        burntAmount = 6000;\n', '        devFeePercent = 100;\n', '        \n', '    }\n', '    \n', '    event NewMint(address indexed account, uint256 amount, uint256 devFee, uint256 amountBurnt);\n', '    \n', '    function devFee(uint256 _value, uint256 devFeeVal1) public pure returns (uint256) {\n', '        return ((_value.mul(devFeeVal1)).div(10000));\n', '    }\n', '    \n', '    function claim_wxeq(string memory tx_hash) public returns (bool) {\n', '        require(xeq_amounts[tx_hash] != 0);\n', '        require(eth_addresses[tx_hash] != address(0));\n', '        require(!xeq_complete[tx_hash]);\n', '        require(eth_addresses[tx_hash] == msg.sender);\n', '        xeq_complete[tx_hash] = true;\n', '        uint256 fee = devFee(xeq_amounts[tx_hash], devFeePercent);\n', '        uint256 teamFee = devFee(fee, teamAmount);\n', '        uint256 burnt = devFee(fee, burntAmount);\n', '        wXEQContract._mint(eth_addresses[tx_hash], xeq_amounts[tx_hash]);\n', '        wXEQContract._mint(owner(), teamFee);\n', '        wXEQBurned = wXEQBurned.add(burnt);\n', '        wXEQMinted = wXEQMinted.add(xeq_amounts[tx_hash]);\n', '        teamFees = teamFees.add(teamFee);\n', '        emit NewMint(eth_addresses[tx_hash], xeq_amounts[tx_hash], teamFee, burnt);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function register_transaction(address account, string memory tx_hash, uint256 amount) public hasAccess returns (bool) {\n', '        require(!xeq_complete[tx_hash]);\n', '        require(xeq_amounts[tx_hash] == 0);\n', '        require(eth_addresses[tx_hash] == address(0));\n', '        \n', '        eth_addresses[tx_hash] = account;\n', '        xeq_amounts[tx_hash] = amount;\n', '        return true;\n', '    }\n', '    \n', '    function isSwapRegistered(string memory tx_hash) public view returns (bool) {\n', '        if(xeq_amounts[tx_hash] == 0) \n', '        {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function testDevFeeVals(uint256 _value, uint256 val1, uint256 val2) public pure returns (uint256) {\n', '        return (_value.mul(val1)).div(val2);\n', '    }\n', '    \n', '    function setDevFee(uint256 val) public hasAccess returns (bool) {\n', '        devFeePercent = val;\n', '        assert(devFeePercent == val);\n', '        return true;\n', '    }\n', '\n', '     function setBurntAmount(uint256 val) public hasAccess returns (bool) {\n', '        burntAmount = val;\n', '        assert(burntAmount == val);\n', '        return true;\n', '    }\n', '\n', '    function setTeamAmount(uint256 val) public hasAccess returns (bool) {\n', '        teamAmount = val;\n', '        assert(teamAmount == val);\n', '        return true;\n', '    }\n', '\n', '    function devFee(uint _value) public view returns (uint256) {\n', '        return ((_value.mul(devFeePercent)).div(10000));\n', '    }\n', '}']