['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', "import './Create2.sol';\n", "import './AccessControl.sol';\n", 'import "./IERC20.sol";\n', '\n', '/// @title The DepositWalletFactory allows withdrawing ERC20 tokens from a temporary DepositWallet\n', '/// @author davy42\n', '/// @notice The DepositWalletFactory can compute the address for deposit and withdraw funds\n', '/// @dev The DepositWalletFactory use the bytecode of the DepositWallet contract with dynamic token and receiver addresses\n', 'contract DepositWalletFactory is AccessControl {\n', '\n', '    // 0x44554d504552\n', '    bytes32 public constant DUMPER = keccak256("DUMPER");\n', '\n', '    event Withdraw(address target);\n', '\n', '    constructor() {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '    }\n', '\n', '    /// @notice Witdraws erc20 tokens from the deposit wallet and send to the receiver\n', '    /// @param salt The unique salt\n', '    /// @param token The address of the erc20 token which will be withdrawed\n', '    /// @param receiver The address which will get tokens\n', '    /// @return wallet the address of the wallet\n', '    function withdraw(uint256 salt, address token, address receiver) external returns (address wallet) {\n', '        require(hasRole(DUMPER, msg.sender));\n', '        emit Withdraw(receiver);\n', '        return Create2.deploy(0, bytes32(salt), getByteCode(token, receiver));\n', '    }\n', '\n', '    /// @notice  Returns the address of the wallet\n', '    /// @dev Compute address for depositing funds using salt, token and receivers\n', '    /// @param salt The unique salt\n', '    /// @param token The address of the erc20 token which will be deposited\n', '    /// @param receiver The address which will get tokens when withdraw\n', '    /// @return wallet the address of the wallet\n', '    function computeAddress(uint256 salt, address token, address receiver) external view returns (address) {\n', '        return Create2.computeAddress(bytes32(salt), keccak256(getByteCode(token, receiver)));\n', '    }\n', '\n', '    /// @notice Generate the bytecode of wallet contract with token and receiver\n', '    /// @dev Explain to a developer any extra details\n', '    /// @param token The address of the erc20 token which will be deposited\n', '    /// @param receiver The address which will get tokens when withdraw\n', '    /// @return bytecode the bytecode of the wallet contract\n', '    function getByteCode(address token, address receiver) public pure returns (bytes memory bytecode) {\n', '        bytecode = abi.encodePacked(\n', '            hex"608060405234801561001057600080fd5b50604080516370a0823160e01b8152306004820152905173",\n', '            token,\n', '            hex"9173",\n', '            receiver,\n', '            hex"91839163a9059cbb91849184916370a0823191602480820192602092909190829003018186803b15801561008557600080fd5b505afa158015610099573d6000803e3d6000fd5b505050506040513d60208110156100af57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561010057600080fd5b505af1158015610114573d6000803e3d6000fd5b505050506040513d602081101561012a57600080fd5b505161013557600080fd5b806001600160a01b0316fffe"\n', '        );\n', '    }\n', '\n', '}']