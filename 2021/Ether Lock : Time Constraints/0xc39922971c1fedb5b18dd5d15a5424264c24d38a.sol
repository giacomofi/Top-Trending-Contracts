['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/*\n', 'YYYYYYY       YYYYYYYFFFFFFFFFFFFFFFFFFFFFF   SSSSSSSSSSSSSSS TTTTTTTTTTTTTTTTTTTTTTT         AAA               BBBBBBBBBBBBBBBBB   LLLLLLLLLLL             EEEEEEEEEEEEEEEEEEEEEE\n', 'Y:::::Y       Y:::::YF::::::::::::::::::::F SS:::::::::::::::ST:::::::::::::::::::::T        A:::A              B::::::::::::::::B  L:::::::::L             E::::::::::::::::::::E\n', 'Y:::::Y       Y:::::YF::::::::::::::::::::FS:::::SSSSSS::::::ST:::::::::::::::::::::T       A:::::A             B::::::BBBBBB:::::B L:::::::::L             E::::::::::::::::::::E\n', 'Y::::::Y     Y::::::YFF::::::FFFFFFFFF::::FS:::::S     SSSSSSST:::::TT:::::::TT:::::T      A:::::::A            BB:::::B     B:::::BLL:::::::LL             EE::::::EEEEEEEEE::::E\n', 'YYY:::::Y   Y:::::YYY  F:::::F       FFFFFFS:::::S            TTTTTT  T:::::T  TTTTTT     A:::::::::A             B::::B     B:::::B  L:::::L                 E:::::E       EEEEEE\n', '   Y:::::Y Y:::::Y     F:::::F             S:::::S                    T:::::T            A:::::A:::::A            B::::B     B:::::B  L:::::L                 E:::::E             \n', '    Y:::::Y:::::Y      F::::::FFFFFFFFFF    S::::SSSS                 T:::::T           A:::::A A:::::A           B::::BBBBBB:::::B   L:::::L                 E::::::EEEEEEEEEE   \n', '     Y:::::::::Y       F:::::::::::::::F     SS::::::SSSSS            T:::::T          A:::::A   A:::::A          B:::::::::::::BB    L:::::L                 E:::::::::::::::E   \n', '      Y:::::::Y        F:::::::::::::::F       SSS::::::::SS          T:::::T         A:::::A     A:::::A         B::::BBBBBB:::::B   L:::::L                 E:::::::::::::::E   \n', '       Y:::::Y         F::::::FFFFFFFFFF          SSSSSS::::S         T:::::T        A:::::AAAAAAAAA:::::A        B::::B     B:::::B  L:::::L                 E::::::EEEEEEEEEE   \n', '       Y:::::Y         F:::::F                         S:::::S        T:::::T       A:::::::::::::::::::::A       B::::B     B:::::B  L:::::L                 E:::::E             \n', '       Y:::::Y         F:::::F                         S:::::S        T:::::T      A:::::AAAAAAAAAAAAA:::::A      B::::B     B:::::B  L:::::L         LLLLLL  E:::::E       EEEEEE\n', '       Y:::::Y       FF:::::::FF           SSSSSSS     S:::::S      TT:::::::TT   A:::::A             A:::::A   BB:::::BBBBBB::::::BLL:::::::LLLLLLLLL:::::LEE::::::EEEEEEEE:::::E\n', '    YYYY:::::YYYY    F::::::::FF           S::::::SSSSSS:::::S      T:::::::::T  A:::::A               A:::::A  B:::::::::::::::::B L::::::::::::::::::::::LE::::::::::::::::::::E\n', '    Y:::::::::::Y    F::::::::FF           S:::::::::::::::SS       T:::::::::T A:::::A                 A:::::A B::::::::::::::::B  L::::::::::::::::::::::LE::::::::::::::::::::E\n', '    YYYYYYYYYYYYY    FFFFFFFFFFF            SSSSSSSSSSSSSSS         TTTTTTTTTTTAAAAAAA                   AAAAAAABBBBBBBBBBBBBBBBB   LLLLLLLLLLLLLLLLLLLLLLLLEEEEEEEEEEEEEEEEEEEEEE\n', '                                                                                                                                                                                  \n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library Constants {\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _launchSupply = 60450 * 10**9;\n', '    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\n', '\n', '    uint256 private constant _baseExpansionFactor = 100;\n', '    uint256 private constant _baseContractionFactor = 100;\n', '    uint256 private constant _baseUtilityFee = 50;\n', '    uint256 private constant _baseContractionCap = 1000;\n', '\n', '    uint256 private constant _stabilizerFee = 250;\n', '    uint256 private constant _stabilizationLowerBound = 50;\n', '    uint256 private constant _stabilizationLowerReset = 75;\n', '    uint256 private constant _stabilizationUpperBound = 150;\n', '    uint256 private constant _stabilizationUpperReset = 125;\n', '    uint256 private constant _stabilizePercent = 10;\n', '\n', '    uint256 private constant _treasuryFee = 250;\n', '\n', '    uint256 private constant _presaleMinIndividualCap = 1 ether;\n', '    uint256 private constant _presaleMaxIndividualCap = 4 ether;\n', '    uint256 private constant _presaleCap = 37200 * 10**9; \n', '    uint256 private constant _maxPresaleGas = 200000000000;\n', '\n', '    uint256 private constant _epochLength = 4 hours;\n', '\n', '    uint256 private constant _liquidityReward = 2 * 10**9;\n', '    uint256 private constant _minForLiquidity = 10 * 10**9;\n', '    uint256 private constant _minForCallerLiquidity = 10 * 10**9;\n', '\n', '    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address payable private constant _deployerAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\n', '    address private constant _treasuryAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\n', '\n', '    uint256 private constant _presaleRate = 31000;\n', '    uint256 private constant _listingRate = 29063;\n', '\n', '    string private constant _name = "YFStable";\n', '    string private constant _symbol = "YFST";\n', '    uint8 private constant _decimals = 9;\n', '\n', '    /****** Getters *******/\n', '    function getPresaleRate() internal pure returns (uint256) {\n', '        return _presaleRate;\n', '    }\n', '     function getListingRate() internal pure returns (uint256) {\n', '        return _listingRate;\n', '    }\n', '    function getLaunchSupply() internal pure returns (uint256) {\n', '        return _launchSupply;\n', '    }\n', '    function getLargeTotal() internal pure returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getPresaleCap() internal pure returns (uint256) {\n', '        return _presaleCap;\n', '    }\n', '    function getPresaleMinIndividualCap() internal pure returns (uint256) {\n', '        return _presaleMinIndividualCap;\n', '    }\n', '    function getPresaleMaxIndividualCap() internal pure returns (uint256) {\n', '        return _presaleMaxIndividualCap;\n', '    }\n', '    function getMaxPresaleGas() internal pure returns (uint256) {\n', '        return _maxPresaleGas;\n', '    }\n', '    function getBaseExpansionFactor() internal pure returns (uint256) {\n', '        return _baseExpansionFactor;\n', '    }\n', '    function getBaseContractionFactor() internal pure returns (uint256) {\n', '        return _baseContractionFactor;\n', '    }\n', '    function getBaseContractionCap() internal pure returns (uint256) {\n', '        return _baseContractionCap;\n', '    }\n', '    function getBaseUtilityFee() internal pure returns (uint256) {\n', '        return _baseUtilityFee;\n', '    }\n', '    function getStabilizerFee() internal pure returns (uint256) {\n', '        return _stabilizerFee;\n', '    }\n', '    function getStabilizationLowerBound() internal pure returns (uint256) {\n', '        return _stabilizationLowerBound;\n', '    }\n', '    function getStabilizationLowerReset() internal pure returns (uint256) {\n', '        return _stabilizationLowerReset;\n', '    }\n', '    function getStabilizationUpperBound() internal pure returns (uint256) {\n', '        return _stabilizationUpperBound;\n', '    }\n', '    function getStabilizationUpperReset() internal pure returns (uint256) {\n', '        return _stabilizationUpperReset;\n', '    }\n', '    function getStabilizePercent() internal pure returns (uint256) {\n', '        return _stabilizePercent;\n', '    }\n', '    function getTreasuryFee() internal pure returns (uint256) {\n', '        return _treasuryFee;\n', '    }\n', '    function getEpochLength() internal pure returns (uint256) {\n', '        return _epochLength;\n', '    }\n', '    function getLiquidityReward() internal pure returns (uint256) {\n', '        return _liquidityReward;\n', '    }\n', '    function getMinForLiquidity() internal pure returns (uint256) {\n', '        return _minForLiquidity;\n', '    }\n', '    function getMinForCallerLiquidity() internal pure returns (uint256) {\n', '        return _minForCallerLiquidity;\n', '    }\n', '    function getRouterAdd() internal pure returns (address) {\n', '        return _routerAddress;\n', '    }\n', '    function getFactoryAdd() internal pure returns (address) {\n', '        return _factoryAddress;\n', '    }\n', '    function getDeployerAdd() internal pure returns (address payable) {\n', '        return _deployerAddress;\n', '    }\n', '    function getTreasuryAdd() internal pure returns (address) {\n', '        return _treasuryAddress;\n', '    }\n', '    function getName() internal pure returns (string memory)  {\n', '        return _name;\n', '    }\n', '    function getSymbol() internal pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function getDecimals() internal pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', 'contract State {\n', '\n', '    mapping (address => uint256) _largeBalances;\n', '    mapping (address => mapping (address => uint256)) _allowances;\n', '\n', '    // Supported pools and data for measuring mint & burn factors\n', '    struct PoolCounter {\n', '        address pairToken;\n', '        uint256 tokenBalance;\n', '        uint256 pairTokenBalance;\n', '        uint256 lpBalance;\n', '        uint256 startTokenBalance;\n', '        uint256 startPairTokenBalance;\n', '    }\n', '    address[] _supportedPools;\n', '    mapping (address => PoolCounter) _poolCounters;\n', '    mapping (address => bool) _isSupportedPool;\n', '    address _mainPool;\n', '\n', '    uint256 _currentEpoch;\n', '    \n', '    //Creating locked balances\n', '    struct LockBox {\n', '        address beneficiary;\n', '        uint256 lockedBalance;\n', '        uint256 unlockTime;\n', '        bool locked;\n', '    }\n', '    LockBox[] _lockBoxes;\n', '    mapping(address => uint256) _lockedBalance;\n', '    mapping(address => bool) _hasLockedBalance;\n', '    uint256 _totalLockedBalance;\n', ' \n', '    uint256 _largeTotal;\n', '    uint256 _totalSupply;\n', '\n', '    address _liquidityReserve;\n', '    address _stabilizer;\n', '\n', '    bool _presaleDone;\n', '    address _presaleCon;\n', '    \n', '    bool _paused;\n', '    \n', '    bool _taxLess;\n', '    mapping(address=>bool) _isTaxlessSetter;\n', '}\n', 'contract Getters is State {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function getLargeBalances(address account) public view returns (uint256) {\n', '        return _largeBalances[account];\n', '    }\n', '    function getAllowances(address account, address spender) public view returns (uint256) {\n', '        return _allowances[account][spender];\n', '    } \n', '    function getSupportedPools(uint256 index) public view returns (address) {\n', '        return _supportedPools[index];\n', '    }\n', '    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\n', '        PoolCounter memory pc = _poolCounters[pool];\n', '        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\n', '    }\n', '    function isSupportedPool(address pool) public view returns (bool) {\n', '        return _isSupportedPool[pool];\n', '    }\n', '    function mainPool() public view returns (address) {\n', '        return _mainPool;\n', '    }\n', '    function getCurrentEpoch() public view returns (uint256) {\n', '        return _currentEpoch;\n', '    }\n', '    function getLockBoxes(uint256 box) public view returns (address, uint256, uint256, bool) {\n', '        LockBox memory lb = _lockBoxes[box];\n', '        return (lb.beneficiary, lb.lockedBalance, lb.unlockTime, lb.locked);\n', '    }\n', '    function getLockedBalance(address account) public view returns (uint256) {\n', '        return _lockedBalance[account];\n', '    }\n', '    function hasLockedBalance(address account) public view returns (bool) {\n', '        return _hasLockedBalance[account];\n', '    }\n', '    function getTotalLockedBalance() public view returns (uint256) {\n', '        return _totalLockedBalance;\n', '    }\n', '    function getLargeTotal() public view returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getTotalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function getLiquidityReserve() public view returns (address) {\n', '        return _liquidityReserve;\n', '    }\n', '    function getStabilizer() public view returns (address) {\n', '        return _stabilizer;\n', '    }\n', '    function isPresaleDone() public view returns (bool) {\n', '        return _presaleDone;\n', '    }\n', '    function getPresaleAddress() public view returns (address) {\n', '        return _presaleCon;\n', '    }\n', '    function isPaused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '    function isTaxLess() public view returns (bool) {\n', '        return _taxLess;\n', '    }\n', '    function isTaxlessSetter(address account) public view returns (bool) {\n', '        return _isTaxlessSetter[account];\n', '    }\n', '    function getUniswapRouter() public view returns (IUniswapV2Router02) {\n', '        return IUniswapV2Router02(Constants.getRouterAdd());\n', '    }\n', '    function getUniswapFactory() public view returns (IUniswapV2Factory) {\n', '        return IUniswapV2Factory(Constants.getFactoryAdd());\n', '    }\n', '    function getFactor() public view returns(uint256) {\n', '        if (_presaleDone) {\n', '            return _largeTotal.div(_totalSupply);\n', '        } else {\n', '            return _largeTotal.div(Constants.getLaunchSupply());\n', '        }\n', '    }\n', '    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\n', '        uint256 lpBalance = IERC20(pool).totalSupply();\n', '        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\n', '        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\n', '        return (tokenBalance, pairTokenBalance, lpBalance);\n', '    }\n', '    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256, uint256) {\n', '        uint256 expansionR = (_poolCounters[sender].pairTokenBalance).mul(_poolCounters[sender].startTokenBalance).mul(100).div(_poolCounters[sender].startPairTokenBalance).div(_poolCounters[sender].tokenBalance);\n', '        uint256 mintAmount;\n', '        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\n', '            uint256 mintFactor = expansionR.mul(expansionR);\n', '            mintAmount = amount.mul(mintFactor.sub(10000)).div(10000);\n', '        } else {\n', '            mintAmount = amount.mul(Constants.getBaseExpansionFactor()).div(10000);\n', '        }\n', '        return (mintAmount.mul(Constants.getStabilizerFee()).div(10000),mintAmount.mul(Constants.getTreasuryFee()).div(10000),mintAmount);\n', '    }\n', '\n', '    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 contractionR;\n', '        if (isSupportedPool(recipient)) {\n', '            contractionR = (_poolCounters[recipient].tokenBalance).mul(_poolCounters[recipient].startPairTokenBalance).mul(100).div(_poolCounters[recipient].pairTokenBalance).div(_poolCounters[recipient].startTokenBalance);\n', '        } else {\n', '            contractionR = (_poolCounters[_mainPool].tokenBalance).mul(_poolCounters[_mainPool].startPairTokenBalance).mul(100).div(_poolCounters[_mainPool].pairTokenBalance).div(_poolCounters[_mainPool].startTokenBalance);\n', '        }\n', '        uint256 burnAmount;\n', '        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\n', '            uint256 burnFactor = contractionR.mul(contractionR);\n', '            burnAmount = amount.mul(burnFactor.sub(10000)).div(10000);\n', '            if (burnAmount > amount.mul(Constants.getBaseContractionCap()).div(10000)) burnAmount = amount.mul(Constants.getBaseContractionCap()).div(10000);\n', '        } else {\n', '            burnAmount = amount.mul(Constants.getBaseContractionFactor()).div(10000);\n', '        }\n', '        return (burnAmount, burnAmount.mul(currentFactor));\n', '    }\n', '\n', '    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 utilityFee = amount.mul(Constants.getBaseUtilityFee()).div(10000);\n', '        return (utilityFee, utilityFee.mul(currentFactor));\n', '    }\n', '    function getMintRate(address pool) external view returns (uint256) {\n', '        uint256 expansionR = (_poolCounters[pool].pairTokenBalance).mul(_poolCounters[pool].startTokenBalance).mul(100).div(_poolCounters[pool].startPairTokenBalance).div(_poolCounters[pool].tokenBalance);\n', '        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\n', '            uint256 mintFactor = expansionR.mul(expansionR);\n', '            return mintFactor.sub(10000);\n', '        } else {\n', '            return Constants.getBaseExpansionFactor();\n', '        }\n', '    }\n', '    function getBurnRate(address pool) external view returns (uint256) {\n', '        uint256 contractionR = (_poolCounters[pool].tokenBalance).mul(_poolCounters[pool].startPairTokenBalance).mul(100).div(_poolCounters[pool].pairTokenBalance).div(_poolCounters[pool].startTokenBalance);\n', '        uint256 burnRate;\n', '        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\n', '            uint256 burnFactor = contractionR.mul(contractionR);\n', '            burnRate = burnFactor.sub(10000);\n', '            if (burnRate > Constants.getBaseContractionCap()) {\n', '                return Constants.getBaseContractionCap();\n', '            }\n', '            return burnRate;\n', '\n', '        } else {\n', '            return Constants.getBaseContractionFactor();\n', '        }\n', '    }\n', '}\n', 'contract Setters is State, Getters {\n', '    function updatePresaleAddress(address presaleAddress) internal {\n', '        _presaleCon = presaleAddress;\n', '    }\n', '    function setAllowances(address owner, address spender, uint256 amount) internal {\n', '        _allowances[owner][spender] = amount;\n', '    }\n', '    function addToAccount(address account, uint256 amount) internal {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        _largeBalances[account] = _largeBalances[account].add(largeAmount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function addToAll(uint256 amount) internal {\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function initializeEpoch() internal {\n', '        _currentEpoch = now;\n', '    }\n', '    function updateEpoch() internal {\n', '        initializeEpoch();\n', '        for (uint256 i=0; i<_supportedPools.length; i++) {\n', '            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\n', '            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\n', '        }\n', '    }\n', '    function initializeLargeTotal() internal {\n', '        _largeTotal = Constants.getLargeTotal();\n', '    }\n', '    function syncPair(address pool) internal returns(bool) {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '        return (lpBurn);\n', '    }\n', '    function silentSyncPair(address pool) public {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '    }\n', '    function addSupportedPool(address pool, address pairToken) internal {\n', '        require(!isSupportedPool(pool),"This pool is already supported");\n', '        _isSupportedPool[pool] = true;\n', '        _supportedPools.push(pool);\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\n', '        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\n', '    }\n', '    function removeSupportedPool(address pool) internal {\n', '        require(isSupportedPool(pool), "This pool is currently not supported");\n', '        for (uint256 i = 0; i < _supportedPools.length; i++) {\n', '            if (_supportedPools[i] == pool) {\n', '                _supportedPools[i] = _supportedPools[_supportedPools.length - 1];\n', '                _isSupportedPool[pool] = false;\n', '                delete _poolCounters[pool];\n', '                _supportedPools.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Stabilizer {\n', '    constructor() public {\n', '\n', '    }\n', '}\n', 'contract YFStable is Setters, Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    modifier onlyTaxless {\n', '        require(isTaxlessSetter(_msgSender()),"not taxless");\n', '        _;\n', '    }\n', '    modifier onlyPresale {\n', '        require(_msgSender()==getPresaleAddress(),"not presale");\n', '        require(!isPresaleDone(), "Presale over");\n', '        _;\n', '    }\n', '    modifier pausable {\n', '        require(!isPaused(), "Paused");\n', '        _;\n', '    }\n', '    modifier taxlessTx {\n', '        _taxLess = true;\n', '        _;\n', '        _taxLess = false;\n', '    }\n', '\n', '    constructor() public {\n', '        updateEpoch();\n', '        initializeLargeTotal();\n', '        setStabilizer(address(new Stabilizer()));\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return Constants.getName();\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return Constants.getSymbol();\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return Constants.getDecimals();\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return getTotalSupply();\n', '    }\n', '    \n', '    function circulatingSupply() public view returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        return getTotalSupply().sub(getTotalLockedBalance().div(currentFactor)).sub(balanceOf(address(this))).sub(balanceOf(getStabilizer()));\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        if (hasLockedBalance(account)) return (getLargeBalances(account).add(getLockedBalance(account)).div(currentFactor));\n', '        return getLargeBalances(account).div(currentFactor);\n', '    }\n', '    \n', '    function unlockedBalanceOf(address account) public view returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        return getLargeBalances(account).div(currentFactor); \n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return getAllowances(owner,spender);\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), getAllowances(sender,_msgSender()).sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public onlyPresale {\n', '        addToAccount(to,amount);\n', '        emit Transfer(address(0),to,amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        setAllowances(owner, spender, amount);\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private pausable {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Amount must be greater than zero");\n', '        require(amount <= balanceOf(sender),"Amount exceeds balance");\n', '        require(amount <= unlockedBalanceOf(sender),"Amount exceeds unlocked balance");\n', '        require(isPresaleDone(),"Presale yet to close");\n', '        if (now > getCurrentEpoch().add(Constants.getEpochLength())) updateEpoch();\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        uint256 txType;\n', '        if (isTaxLess()) {\n', '            txType = 3;\n', '        } else {\n', '            bool lpBurn;\n', '            if (isSupportedPool(sender)) {\n', '                lpBurn = syncPair(sender);\n', '            } else if (isSupportedPool(recipient)){\n', '                silentSyncPair(recipient);\n', '            } else {\n', '                silentSyncPair(_mainPool);\n', '            }\n', '            txType = _getTxType(sender, recipient, lpBurn);\n', '        }\n', '        // Buy Transaction from supported pools - requires mint, no utility fee\n', '        if (txType == 1) {\n', '            (uint256 stabilizerMint, uint256 treasuryMint, uint256 totalMint) = getMintValue(sender, amount);\n', '            // uint256 mintSize = amount.div(100);\n', '            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\n', '            _largeBalances[getStabilizer()] = _largeBalances[getStabilizer()].add(stabilizerMint.mul(currentFactor));\n', '            _largeBalances[Constants.getTreasuryAdd()] = _largeBalances[Constants.getTreasuryAdd()].add(treasuryMint.mul(currentFactor));\n', '            _totalSupply = _totalSupply.add(totalMint);\n', '            emit Transfer(sender, recipient, amount);\n', '            emit Transfer(address(0),getStabilizer(),stabilizerMint);\n', '            emit Transfer(address(0),Constants.getTreasuryAdd(),treasuryMint);\n', '        }\n', '        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\n', '        else if (txType == 2) {\n', '            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\n', '            (uint256 utilityFee, uint256 largeUtilityFee) = getUtilityFee(amount);\n', '            uint256 actualTransferAmount = amount.sub(burnSize).sub(utilityFee);\n', '            uint256 largeTransferAmount = actualTransferAmount.mul(currentFactor);\n', '            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '            _largeBalances[recipient] = _largeBalances[recipient].add(largeTransferAmount);\n', '            _largeBalances[_liquidityReserve] = _largeBalances[_liquidityReserve].add(largeUtilityFee);\n', '            _totalSupply = _totalSupply.sub(burnSize);\n', '            _largeTotal = _largeTotal.sub(largeBurnSize);\n', '            emit Transfer(sender, recipient, actualTransferAmount);\n', '            emit Transfer(sender, address(0), burnSize);\n', '            emit Transfer(sender, _liquidityReserve, utilityFee);\n', '        } \n', '        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\n', '        else if (txType == 3) {\n', '            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\n', '            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\n', '        uint256 txType = 2;\n', '        if (isSupportedPool(sender)) {\n', '            if (lpBurn) {\n', '                txType = 3;\n', '            } else {\n', '                txType = 1;\n', '            }\n', '        } else if (sender == Constants.getRouterAdd()) {\n', '            txType = 3;\n', '        }\n', '        return txType;\n', '    }\n', '\n', '    function setPresale(address presaleAdd) external onlyOwner() {\n', '        require(!isPresaleDone(), "Presale is already completed");\n', '        updatePresaleAddress(presaleAdd);\n', '    }\n', '\n', '    function setPresaleDone() public payable onlyPresale {\n', '        require(totalSupply() <= Constants.getLaunchSupply(), "Total supply is already minted");\n', '        _mintRemaining();\n', '        _presaleDone = true;\n', '        _createEthPool();\n', '    }\n', '\n', '    function _mintRemaining() private {\n', '        require(!isPresaleDone(), "Cannot mint post presale");\n', '        Constants.getDeployerAdd().transfer(address(this).balance.div(3));\n', '        uint256 toMint = Constants.getLaunchSupply().sub(totalSupply());\n', '        uint256 tokensToAdd = address(this).balance.div(10**11).mul(Constants.getListingRate());\n', '        if(toMint > tokensToAdd) {\n', '            addToAccount(address(0),toMint.sub(tokensToAdd));\n', '            emit Transfer(address(0),address(0),toMint.sub(tokensToAdd));\n', '        }\n', '        addToAccount(address(this), tokensToAdd);\n', '        emit Transfer(address(0),address(this),tokensToAdd);\n', '    }\n', '\n', '    function mintLockedTranche(address account, uint256 unlockTime, uint256 amount) external onlyOwner() {\n', '        require(!isPresaleDone(), "Cannot mint post presale");\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        _lockBoxes.push(LockBox(account, largeAmount, unlockTime, true));\n', '        _lockedBalance[account] = _lockedBalance[account].add(largeAmount);\n', '        _hasLockedBalance[account] = true;\n', '        _totalLockedBalance = _totalLockedBalance.add(largeAmount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit Transfer(address(0),account,amount);\n', '    }\n', '    \n', '    function mintUnlockedTranche(address account, uint256 amount) external onlyOwner() {\n', '        require(!isPresaleDone(), "Cannot mint post presale");\n', '        addToAccount(account, amount);\n', '        emit Transfer(address(0),account,amount);\n', '    }\n', '\n', '    function unlockTranche(uint256 tranche) external {\n', '        require(hasLockedBalance(_msgSender()),"Caller has no locked balance");\n', '        (address beneficiary, uint256 balance, uint256 unlockTime, bool locked) = getLockBoxes(tranche);\n', '        require(unlockTime <= now,"This tranche cannot be unlocked yet");\n', '        require(beneficiary == _msgSender(),"You are not the owner of this tranche");\n', '        require(locked ==  true, "This tranche has already been unlocked");\n', '        _totalLockedBalance = _totalLockedBalance.sub(balance);\n', '        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(balance);\n', '        _lockedBalance[_msgSender()] = _lockedBalance[_msgSender()].sub(balance);\n', '        if (_lockedBalance[_msgSender()] <= 0) _hasLockedBalance[_msgSender()] = false;\n', '        _lockBoxes[tranche].lockedBalance = 0;\n', '        _lockBoxes[tranche].locked = false;\n', '    }\n', '\n', '    function reassignTranche(uint256 tranche, address beneficiary) external onlyOwner() {\n', '        (address oldBeneficiary, uint256 balance, uint256 unlockTime, bool locked) = getLockBoxes(tranche);\n', '        require(locked == true, "This tranche has already been unlocked");\n', '        require(unlockTime > now,"This tranche has already been vested");\n', '        _lockedBalance[oldBeneficiary] = _lockedBalance[oldBeneficiary].sub(balance);\n', '        _lockedBalance[beneficiary] = _lockedBalance[beneficiary].add(balance);\n', '        if (_lockedBalance[oldBeneficiary] == 0) _hasLockedBalance[oldBeneficiary] = false;\n', '        _hasLockedBalance[beneficiary] = true; \n', '        _lockBoxes[tranche].beneficiary = beneficiary;\n', '        uint256 currentFactor = getFactor();\n', '        emit Transfer(oldBeneficiary,beneficiary,balance.div(currentFactor));\n', '    }\n', '\n', '    function _createEthPool() private taxlessTx {\n', '        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\n', '        IUniswapV2Factory uniswapFactory = getUniswapFactory();\n', '        address tokenUniswapPair;\n', '        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\n', '            tokenUniswapPair = uniswapFactory.createPair(\n', '            address(uniswapRouterV2.WETH()), address(this));\n', '        } else {\n', '            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\n', '        }\n', '        uint256 tokensToAdd = balanceOf(address(this));        \n', '        _approve(address(this), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokensToAdd);\n', '        uniswapRouterV2.addLiquidityETH{value: address(this).balance}(address(this),\n', '           tokensToAdd, 0, 0, Constants.getDeployerAdd(), block.timestamp);\n', '        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\n', '        _mainPool = tokenUniswapPair;\n', '    }\n', '\n', '    function createTokenPool(address pairToken, uint256 amount) external onlyOwner() taxlessTx {\n', '        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\n', '        IUniswapV2Factory uniswapFactory = getUniswapFactory();\n', '        address tokenUniswapPair;\n', '        if (uniswapFactory.getPair(pairToken, address(this)) == address(0)) {\n', '            tokenUniswapPair = uniswapFactory.createPair(\n', '            pairToken, address(this));\n', '        } else {\n', '            tokenUniswapPair = uniswapFactory.getPair(pairToken,address(this));\n', '        }\n', '        require(uniswapFactory.getPair(pairToken,address(uniswapRouterV2.WETH())) != address(0), "Eth pairing does not exist");\n', '        require(balanceOf(address(this)) >= amount, "Amount exceeds the token balance");\n', '        uint256 toConvert = amount.div(2);\n', '        uint256 toAdd = amount.sub(toConvert);\n', '        uint256 initialBalance = IERC20(pairToken).balanceOf(address(this));\n', '        address[] memory path = new address[](3);\n', '        path[0] = address(this);\n', '        path[1] = uniswapRouterV2.WETH();\n', '        path[2] = pairToken;\n', '        _approve(address(this), address(uniswapRouterV2), toConvert);\n', '        uniswapRouterV2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '            toConvert, 0, path, address(this), block.timestamp);\n', '        uint256 newBalance = IERC20(pairToken).balanceOf(address(this)).sub(initialBalance);\n', '        _approve(address(this), address(uniswapRouterV2), toAdd);\n', '        IERC20(pairToken).approve(address(uniswapRouterV2), newBalance);\n', '        uniswapRouterV2.addLiquidity(address(this),pairToken,toAdd,newBalance,0,0,address(this),block.timestamp);\n', '        addSupportedPool(tokenUniswapPair, pairToken);\n', '    }\n', '\n', '    function addNewSupportedPool(address pool, address pairToken) external onlyOwner() {\n', '        addSupportedPool(pool, pairToken);\n', '    }\n', '\n', '    function removeOldSupportedPool(address pool) external onlyOwner() {\n', '        removeSupportedPool(pool);\n', '    }\n', '\n', '    function setTaxlessSetter(address cont) external onlyOwner() {\n', '        require(!isTaxlessSetter(cont),"already setter");\n', '        _isTaxlessSetter[cont] = true;\n', '    }\n', '\n', '    function setTaxless(bool flag) public onlyTaxless {\n', '        _taxLess = flag;\n', '    }\n', '\n', '    function removeTaxlessSetter(address cont) external onlyOwner() {\n', '        require(isTaxlessSetter(cont),"not setter");\n', '        _isTaxlessSetter[cont] = false;\n', '    }\n', '\n', '    function setLiquidityReserve(address reserve) external onlyOwner() {\n', '        require(Address.isContract(reserve),"Need a contract");\n', '        _isTaxlessSetter[_liquidityReserve] = false;\n', '        uint256 oldBalance = balanceOf(_liquidityReserve);\n', '        if (oldBalance > 0) {\n', '            _transfer(_liquidityReserve, reserve, oldBalance);\n', '            emit Transfer(_liquidityReserve, reserve, oldBalance);\n', '        }\n', '        _liquidityReserve = reserve;\n', '        _isTaxlessSetter[reserve] = true;\n', '    }\n', '\n', '    function setStabilizer(address reserve) public onlyOwner() taxlessTx {\n', '        require(Address.isContract(reserve),"Need a contract");\n', '        _isTaxlessSetter[_stabilizer] = false;\n', '        uint256 oldBalance = balanceOf(_stabilizer);\n', '        if (oldBalance > 0) {\n', '            _transfer(_stabilizer, reserve, oldBalance);\n', '            emit Transfer(_stabilizer, reserve, oldBalance);\n', '        }\n', '        _stabilizer = reserve;\n', '        _isTaxlessSetter[reserve] = true;\n', '    }\n', '    \n', '    function pauseContract(bool flag) external onlyOwner() {\n', '        _paused = flag;\n', '    }\n', '\n', '}']