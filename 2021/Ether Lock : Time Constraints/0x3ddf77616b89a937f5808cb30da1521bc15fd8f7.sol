['pragma solidity ^0.4.26;\n', '\n', 'import "./liqnetCoin.sol";\n', '\n', '/**\n', ' * @title exchangeRate\n', ' * @dev base for crowdsale to apply rate changing\n', ' */\n', 'contract exchangeRate is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    address public trader;\n', '    uint public rate;\n', '    //decimal by default = 18 or 1 ether\n', '    \n', '    event rateChanged(uint newRate, uint time);\n', '    \n', '    modifier isTrader() {\n', '       require(msg.sender == owner || msg.sender == trader);\n', '       _;\n', '    }\n', '    \n', '    /**\n', '    * @dev set new Trader address\n', '    * @param newAddr - new trader address.\n', '    */\n', '    function setTrader(address newAddr) public isTrader {\n', '        trader = newAddr;\n', '    }\n', '    \n', '    /**\n', '     * @dev set new rate in ether format\n', '     * @param newRate - new exchange rate of ETH to Coin. for 2510.69 is 2510690000000000000000\n', '     */\n', '    function setRate(uint newRate) public isTrader {\n', '        rate = newRate;\n', '        emit rateChanged(newRate, now);\n', '    }\n', '    \n', '    /**\n', '     * @dev set only integer part of rate.\n', '     * @param newRate - only interger for 2510.69 is 2511\n', '     */\n', '    function setRateInt(uint newRate) public isTrader {\n', '        rate = newRate.mul(1 ether);\n', '    }\n', '    \n', '    /**\n', '     * @dev set new rate with 2 decimals.\n', '     * @param newRate - new rate. for 2510.6912 is 251069\n', '     */\n', '    function setRate2Decimals(uint newRate) public isTrader {\n', '        rate = newRate.mul(1 ether).div(100);\n', '    }\n', '    \n', '    /**\n', '     * @dev convert ETH to Coins\n', '     * @param value - amount of ETH\n', '     * @return amount of Coins\n', '     */\n', '    function convert(uint value) public constant returns (uint usd) {\n', '        return rate.mul(value).div(1 ether);\n', '    }\n', '}\n', '\n', 'contract crowdsaleBase is ERC223Receiver, exchangeRate {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address multisig;\n', '    \n', '    uint public hardcap;\n', '    uint public currentETH = 0;\n', '    uint public currentLEN = 0;\n', '    \n', '    uint start = 1623024000;//07 jun 2012\n', '    \n', '    uint period = 90;\n', '    \n', '    modifier salesIsOn() {\n', '        require(now > start && now < start + period * 1 days);\n', '        _;\n', '    }\n', '    \n', '    modifier isUnderHardcap() {\n', '        require(currentLEN < hardcap);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev calculation of bonus tokens\n', '     * @param tokens - base amount of tokens\n', '     * @return amount of bonus Tokens\n', '     */\n', '    function calcBonusTokens(uint tokens) internal constant returns (uint bonusTokens) {\n', '        bonusTokens = 0;\n', '        /*if (now < start + (24 hours)) {\n', '            bonusTokens = tokens.div(5);\n', '        } else */\n', '        if (now < start + (30 days)) {\n', '            bonusTokens = tokens.div(100).mul(15);\n', '        } else if (now < start + (60 days)) {\n', '            bonusTokens = tokens.div(1000).mul(75);\n', '        }\n', '        return bonusTokens;\n', '    }\n', '    \n', '    /**\n', '     * @dev calculation oftokens\n', '     */\n', '    function createTokensBase(uint _amount) internal isUnderHardcap salesIsOn returns (uint tokens) {\n', '        tokens = convert(_amount);\n', '        tokens = tokens.add(calcBonusTokens(tokens));\n', '        \n', '        currentLEN = currentLEN.add(tokens);\n', '        currentETH = currentETH.add(_amount);\n', '        \n', '        return tokens;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale LEN tokens. This contract is saleAgent for LEN_ERC20 compatible.\n', ' */\n', 'contract LiqnetCrowdsale is crowdsaleBase {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    LiqnetCoin token = LiqnetCoin(0xf569E6bDfAC9ca4AD2814C7Af393B27B4A03bE0B);// paste real address & setSaleAgent for iteraction.\n', '    \n', '    constructor () public {\n', '        hardcap = 3500000 * (1 ether);\n', '        rate = 2241060000000000000000;//2241.06\n', '        multisig = 0x806b5968FD6E67caC021f6354443434d99AEcA20;//address to transfer all income Ethers\n', '        start = 1623628800;//test //1624320000;//22 jun 2021\n', '        period = 90;\n', '    }\n', '    \n', '    function createTokens() public isUnderHardcap salesIsOn payable {\n', '        uint tokens = createTokensBase(msg.value);\n', '        multisig.transfer(msg.value);//comment this to hold eth in contract address.\n', '        \n', '        //Mintable\n', '        token.mint(msg.sender, tokens);//send tokens to investor. 1eth=1token\n', '    }\n', '    \n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '}']