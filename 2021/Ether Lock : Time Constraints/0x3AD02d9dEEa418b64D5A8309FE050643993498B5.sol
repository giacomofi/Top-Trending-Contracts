['pragma solidity 0.8.1;\n', '\n', 'import "./AccessControl.sol";\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '}\n', '\n', '/**\n', '  ETH/BCUG price oracle designed for TokenRegistry and presale system.\n', '  Function ETHPrice returns how many BCUG token can be bought by 1 ETH\n', '  1 ETH = X BCUG\n', '**/\n', 'contract BCUGPriceOracle is AccessControl {\n', '\n', '    address public bcug;\n', '    IUniswapV2Pair public pool;\n', '\n', '    uint8 private slot;\n', '\n', '    constructor(address _bcug, IUniswapV2Pair _pool) {\n', '        bcug = _bcug;\n', '        setPool(_pool);\n', '    }\n', '\n', '    function setPool(IUniswapV2Pair _pool) public onlyOwner {\n', '        require(_pool.token0() == bcug || _pool.token1() == bcug, "Wrong pool for BCUG provided");\n', '        pool = _pool;\n', '        slot = _pool.token0() == bcug ? 0 : 1;\n', '    }\n', '\n', '    // @dev returns amount of token0 needed to buy token1\n', '    function ETHPrice() external view returns (uint) {\n', '        (uint Res0, uint Res1) = getReserves();\n', '        uint res0 = Res0 * 1 ether; // * 10 ^ 18\n', '        return res0 / Res1;\n', '    }\n', '\n', '    function getReserves() private view returns (uint Res0, uint Res1) {\n', '        if (slot == 0) {\n', '            (Res0, Res1,) = pool.getReserves();\n', '        } else {\n', '            (Res1, Res0,) = pool.getReserves();\n', '        }\n', '    }\n', '}']