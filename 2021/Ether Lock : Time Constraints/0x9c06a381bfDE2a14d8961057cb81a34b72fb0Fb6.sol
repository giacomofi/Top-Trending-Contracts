['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface marketSIHandlerDataStorageInterface  {\n', '\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\n', '\n', '\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) external returns (bool);\n', '\n', '\tfunction getRewardInfo(address userAddr) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\n', '\n', '\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\n', '\n', '\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) external returns (bool);\n', '\n', '\tfunction getUserRewardInfo(address userAddr) external view returns (uint256, uint256, uint256);\n', '\n', '\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) external returns (bool);\n', '\n', '\tfunction getBetaRate() external view returns (uint256);\n', '\n', '\tfunction setBetaRate(uint256 _betaRate) external returns (bool);\n', '}\n', '\n', 'contract marketSIHandlerDataStorage is marketSIHandlerDataStorageInterface {\n', '\tbool emergency;\n', '\n', '\taddress owner;\n', '\n', '\taddress SIHandlerAddr;\n', '\n', '\tMarketRewardInfo marketRewardInfo;\n', '\n', '\tmapping(address => UserRewardInfo) userRewardInfo;\n', '\n', '\tstruct MarketRewardInfo {\n', '\t\tuint256 rewardLane;\n', '\t\tuint256 rewardLaneUpdateAt;\n', '\t\tuint256 rewardPerBlock;\n', '\t}\n', '\n', '\tstruct UserRewardInfo {\n', '\t\tuint256 rewardLane;\n', '\t\tuint256 rewardLaneUpdateAt;\n', '\t\tuint256 rewardAmount;\n', '\t}\n', '\n', '\tuint256 betaRate;\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner, "onlyOwner function");\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlySIHandler {\n', '\t\taddress msgSender = msg.sender;\n', '\t\trequire((msgSender == SIHandlerAddr) || (msgSender == owner), "onlySIHandler function");\n', '\t\t_;\n', '\t}\n', '\n', '\tconstructor (address _SIHandlerAddr) public \n', '\t{\n', '\t\towner = msg.sender;\n', '\t\tSIHandlerAddr = _SIHandlerAddr;\n', '\t\tbetaRate = 5 * (10 ** 17);\n', '\t\tmarketRewardInfo.rewardLaneUpdateAt = block.number;\n', '\t}\n', '\n', '\tfunction ownershipTransfer(address _owner) onlyOwner external returns (bool)\n', '\t{\n', '\t\towner = _owner;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setCircuitBreaker(bool _emergency) onlySIHandler external override returns (bool)\n', '\t{\n', '\t\temergency = _emergency;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setSIHandlerAddr(address _SIHandlerAddr) onlyOwner public returns (bool)\n', '\t{\n', '\t\tSIHandlerAddr = _SIHandlerAddr;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) onlySIHandler external override returns (bool)\n', '\t{\n', '\t\tmarketRewardInfo.rewardPerBlock = _rewardPerBlock;\n', '\t}\n', '\n', '\tfunction getSIHandlerAddr() public view returns (address)\n', '\t{\n', '\t\treturn SIHandlerAddr;\n', '\t}\n', '\n', '\tfunction getRewardInfo(address userAddr) external view override returns (uint256, uint256, uint256, uint256, uint256, uint256)\n', '\t{\n', '\t\tMarketRewardInfo memory market = marketRewardInfo;\n', '\t\tUserRewardInfo memory user = userRewardInfo[userAddr];\n', '\t\treturn (market.rewardLane, market.rewardLaneUpdateAt, market.rewardPerBlock, user.rewardLane, user.rewardLaneUpdateAt, user.rewardAmount);\n', '\t}\n', '\n', '\tfunction getMarketRewardInfo() external view override returns (uint256, uint256, uint256)\n', '\t{\n', '\t\tMarketRewardInfo memory vars = marketRewardInfo;\n', '\t\treturn (vars.rewardLane, vars.rewardLaneUpdateAt, vars.rewardPerBlock);\n', '\t}\n', '\n', '\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) onlySIHandler external override returns (bool)\n', '\t{\n', '\t\tMarketRewardInfo memory vars;\n', '\t\tvars.rewardLane = _rewardLane;\n', '\t\tvars.rewardLaneUpdateAt = _rewardLaneUpdateAt;\n', '\t\tvars.rewardPerBlock = _rewardPerBlock;\n', '\t\tmarketRewardInfo = vars;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getUserRewardInfo(address userAddr) external view override returns (uint256, uint256, uint256)\n', '\t{\n', '\t\tUserRewardInfo memory vars = userRewardInfo[userAddr];\n', '\t\treturn (vars.rewardLane, vars.rewardLaneUpdateAt, vars.rewardAmount);\n', '\t}\n', '\n', '\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) onlySIHandler external override returns (bool)\n', '\t{\n', '\t\tUserRewardInfo memory vars;\n', '\t\tvars.rewardLane = _rewardLane;\n', '\t\tvars.rewardLaneUpdateAt = _rewardLaneUpdateAt;\n', '\t\tvars.rewardAmount = _rewardAmount;\n', '\t\tuserRewardInfo[userAddr] = vars;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getBetaRate() external view override returns (uint256)\n', '\t{\n', '\t\treturn betaRate;\n', '\t}\n', '\n', '\tfunction setBetaRate(uint256 _betaRate) onlyOwner external override returns (bool)\n', '\t{\n', '\t\tbetaRate = _betaRate;\n', '\t\treturn true;\n', '\t}\n', '}']