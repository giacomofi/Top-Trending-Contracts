['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// File: contracts/interfaces/interestModelInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface interestModelInterface {\n', '\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) external view returns (bool, uint256, uint256, bool, uint256, uint256);\n', '\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) external view returns (bool, uint256, uint256, bool, uint256, uint256);\n', '\tfunction getSIRandBIR(uint256 depositTotalAmount, uint256 borrowTotalAmount) external view returns (uint256, uint256);\n', '}\n', '\n', '// File: contracts/interfaces/marketHandlerDataStorageInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface marketHandlerDataStorageInterface  {\n', '\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\n', '\n', '\tfunction setNewCustomer(address payable userAddr) external returns (bool);\n', '\n', '\tfunction getUserAccessed(address payable userAddr) external view returns (bool);\n', '\tfunction setUserAccessed(address payable userAddr, bool _accessed) external returns (bool);\n', '\n', '\tfunction getReservedAddr() external view returns (address payable);\n', '\tfunction setReservedAddr(address payable reservedAddress) external returns (bool);\n', '\n', '\tfunction getReservedAmount() external view returns (int256);\n', '\tfunction addReservedAmount(uint256 amount) external returns (int256);\n', '\tfunction subReservedAmount(uint256 amount) external returns (int256);\n', '\tfunction updateSignedReservedAmount(int256 amount) external returns (int256);\n', '\n', '\tfunction setTokenHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\n', '\tfunction setCoinHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\n', '\n', '\tfunction getDepositTotalAmount() external view returns (uint256);\n', '\tfunction addDepositTotalAmount(uint256 amount) external returns (uint256);\n', '\tfunction subDepositTotalAmount(uint256 amount) external returns (uint256);\n', '\n', '\tfunction getBorrowTotalAmount() external view returns (uint256);\n', '\tfunction addBorrowTotalAmount(uint256 amount) external returns (uint256);\n', '\tfunction subBorrowTotalAmount(uint256 amount) external returns (uint256);\n', '\n', '\tfunction getUserIntraDepositAmount(address payable userAddr) external view returns (uint256);\n', '\tfunction addUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\n', '\tfunction subUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\n', '\n', '\tfunction getUserIntraBorrowAmount(address payable userAddr) external view returns (uint256);\n', '\tfunction addUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\n', '\tfunction subUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\n', '\n', '\tfunction addDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\n', '\tfunction subDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\n', '\n', '\tfunction addBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\n', '\tfunction subBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\n', '\n', '\tfunction getUserAmount(address payable userAddr) external view returns (uint256, uint256);\n', '\tfunction getHandlerAmount() external view returns (uint256, uint256);\n', '\n', '\tfunction getAmount(address payable userAddr) external view returns (uint256, uint256, uint256, uint256);\n', '\tfunction setAmount(address payable userAddr, uint256 depositTotalAmount, uint256 borrowTotalAmount, uint256 depositAmount, uint256 borrowAmount) external returns (uint256);\n', '\n', '\tfunction setBlocks(uint256 lastUpdatedBlock, uint256 inactiveActionDelta) external returns (bool);\n', '\n', '\tfunction getLastUpdatedBlock() external view returns (uint256);\n', '\tfunction setLastUpdatedBlock(uint256 _lastUpdatedBlock) external returns (bool);\n', '\n', '\tfunction getInactiveActionDelta() external view returns (uint256);\n', '\tfunction setInactiveActionDelta(uint256 inactiveActionDelta) external returns (bool);\n', '\n', '\tfunction syncActionEXR() external returns (bool);\n', '\n', '\tfunction getActionEXR() external view returns (uint256, uint256);\n', '\tfunction setActionEXR(uint256 actionDepositExRate, uint256 actionBorrowExRate) external returns (bool);\n', '\n', '\tfunction getGlobalDepositEXR() external view returns (uint256);\n', '\tfunction getGlobalBorrowEXR() external view returns (uint256);\n', '\n', '\tfunction setEXR(address payable userAddr, uint256 globalDepositEXR, uint256 globalBorrowEXR) external returns (bool);\n', '\n', '\tfunction getUserEXR(address payable userAddr) external view returns (uint256, uint256);\n', '\tfunction setUserEXR(address payable userAddr, uint256 depositEXR, uint256 borrowEXR) external returns (bool);\n', '\n', '\tfunction getGlobalEXR() external view returns (uint256, uint256);\n', '\n', '\tfunction getMarketHandlerAddr() external view returns (address);\n', '\tfunction setMarketHandlerAddr(address marketHandlerAddr) external returns (bool);\n', '\n', '\tfunction getInterestModelAddr() external view returns (address);\n', '\tfunction setInterestModelAddr(address interestModelAddr) external returns (bool);\n', '\n', '\n', '\tfunction getMinimumInterestRate() external view returns (uint256);\n', '\tfunction setMinimumInterestRate(uint256 _minimumInterestRate) external returns (bool);\n', '\n', '\tfunction getLiquiditySensitivity() external view returns (uint256);\n', '\tfunction setLiquiditySensitivity(uint256 _liquiditySensitivity) external returns (bool);\n', '\n', '\tfunction getLimit() external view returns (uint256, uint256);\n', '\n', '\tfunction getBorrowLimit() external view returns (uint256);\n', '\tfunction setBorrowLimit(uint256 _borrowLimit) external returns (bool);\n', '\n', '\tfunction getMarginCallLimit() external view returns (uint256);\n', '\tfunction setMarginCallLimit(uint256 _marginCallLimit) external returns (bool);\n', '\n', '\tfunction getLimitOfAction() external view returns (uint256);\n', '\tfunction setLimitOfAction(uint256 limitOfAction) external returns (bool);\n', '\n', '\tfunction getLiquidityLimit() external view returns (uint256);\n', '\tfunction setLiquidityLimit(uint256 liquidityLimit) external returns (bool);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '// from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library SafeMath {\n', '    uint256 internal constant unifiedPoint = 10 ** 18;\n', '\t/******************** Safe Math********************/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "a");\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn _sub(a, b, "s");\n', '\t}\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn _mul(a, b);\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn _div(a, b, "d");\n', '\t}\n', '\n', '\tfunction _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '\t{\n', '\t\trequire(b <= a, errorMessage);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction _mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tif (a == 0)\n', '\t\t{\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a* b;\n', '\t\trequire((c / a) == b, "m");\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction _div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '\t{\n', '\t\trequire(b > 0, errorMessage);\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\tfunction unifiedDiv(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn _div(_mul(a, unifiedPoint), b, "d");\n', '\t}\n', '\n', '\tfunction unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn _div(_mul(a, b), unifiedPoint, "m");\n', '\t}\n', '}\n', '\n', '// File: contracts/Errors.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract Modifier {\n', '    string internal constant ONLY_OWNER = "O";\n', '    string internal constant ONLY_MANAGER = "M";\n', '    string internal constant CIRCUIT_BREAKER = "emergency";\n', '}\n', '\n', 'contract ManagerModifier is Modifier {\n', '    string internal constant ONLY_HANDLER = "H";\n', '    string internal constant ONLY_LIQUIDATION_MANAGER = "LM";\n', '    string internal constant ONLY_BREAKER = "B";\n', '}\n', '\n', 'contract HandlerDataStorageModifier is Modifier {\n', '    string internal constant ONLY_BIFI_CONTRACT = "BF";\n', '}\n', '\n', 'contract SIDataStorageModifier is Modifier {\n', '    string internal constant ONLY_SI_HANDLER = "SI";\n', '}\n', '\n', 'contract HandlerErrors is Modifier {\n', '    string internal constant USE_VAULE = "use value";\n', '    string internal constant USE_ARG = "use arg";\n', '    string internal constant EXCEED_LIMIT = "exceed limit";\n', '    string internal constant NO_LIQUIDATION = "no liquidation";\n', '    string internal constant NO_LIQUIDATION_REWARD = "no enough reward";\n', '    string internal constant NO_EFFECTIVE_BALANCE = "not enough balance";\n', '    string internal constant TRANSFER = "err transfer";\n', '}\n', '\n', 'contract SIErrors is Modifier { }\n', '\n', 'contract InterestErrors is Modifier { }\n', '\n', 'contract LiquidationManagerErrors is Modifier {\n', '    string internal constant NO_DELINQUENT = "not delinquent";\n', '}\n', '\n', 'contract ManagerErrors is ManagerModifier {\n', '    string internal constant REWARD_TRANSFER = "RT";\n', '    string internal constant UNSUPPORTED_TOKEN = "UT";\n', '}\n', '\n', 'contract OracleProxyErrors is Modifier {\n', '    string internal constant ZERO_PRICE = "price zero";\n', '}\n', '\n', 'contract RequestProxyErrors is Modifier { }\n', '\n', 'contract ManagerDataStorageErrors is ManagerModifier {\n', '    string internal constant NULL_ADDRESS = "err addr null";\n', '}\n', '\n', '// File: contracts/interestModel/interestModel.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', ' /**\n', '  * @title Bifi interestModel Contract\n', '  * @notice Contract for interestModel\n', '  * @author Bifi\n', '  */\n', 'contract interestModel is interestModelInterface, InterestErrors {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress owner;\n', '\tmapping(address => bool) public operators;\n', '\n', '\tuint256 constant blocksPerYear = 2102400;\n', '\tuint256 constant unifiedPoint = 10 ** 18;\n', '\n', '\tuint256 minRate;\n', '\tuint256 basicSensitivity;\n', '\n', '\t/* jump rate model prams */\n', '\tuint256 jumpPoint;\n', '\tuint256 jumpSensitivity;\n', '\n', '\tuint256 spreadRate;\n', '\n', '\tstruct InterestUpdateModel {\n', '\t\tuint256 SIR;\n', '\t\tuint256 BIR;\n', '\t\tuint256 depositTotalAmount;\n', '\t\tuint256 borrowTotalAmount;\n', '\t\tuint256 userDepositAmount;\n', '\t\tuint256 userBorrowAmount;\n', '\t\tuint256 deltaDepositAmount;\n', '\t\tuint256 deltaBorrowAmount;\n', '\t\tuint256 globalDepositEXR;\n', '\t\tuint256 globalBorrowEXR;\n', '\t\tuint256 userDepositEXR;\n', '\t\tuint256 userBorrowEXR;\n', '\t\tuint256 actionDepositEXR;\n', '\t\tuint256 actionBorrowEXR;\n', '\t\tuint256 deltaDepositEXR;\n', '\t\tuint256 deltaBorrowEXR;\n', '\t\tbool depositNegativeFlag;\n', '\t\tbool borrowNegativeFlag;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner, ONLY_OWNER);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyOperator {\n', '\t\taddress sender = msg.sender;\n', '\t\trequire(operators[sender] || sender == owner, "Only Operators");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Construct a new interestModel contract\n', '\t* @param _minRate minimum interest rate\n', '\t* @param _jumpPoint Threshold of utilizationRate to which normal interest model\n', '\t* @param _basicSensitivity liquidity basicSensitivity\n', '\t* @param _jumpSensitivity The value used to calculate the BIR if the utilizationRate is greater than the jumpPoint.\n', '\t* @param _spreadRate spread rate\n', '\t*/\n', '\tconstructor (uint256 _minRate, uint256 _jumpPoint, uint256 _basicSensitivity, uint256 _jumpSensitivity, uint256 _spreadRate) public\n', '\t{\n', '\t\taddress sender = msg.sender;\n', '\t\towner = sender;\n', '\t\toperators[owner] = true;\n', '\n', '\t\tminRate = _minRate;\n', '\t\tbasicSensitivity = _basicSensitivity;\n', '\n', '\t\tjumpPoint = _jumpPoint;\n', '\t\tjumpSensitivity = _jumpSensitivity;\n', '\n', '\t\tspreadRate = _spreadRate;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Replace the owner of the handler\n', '\t* @param _owner the address of the new owner\n', '\t* @return true (TODO: validate results)\n', '\t*/\n', '\tfunction ownershipTransfer(address payable _owner) onlyOwner external returns (bool)\n', '\t{\n', '\t\towner = _owner;\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Get the address of owner\n', '\t* @return the address of owner\n', '\t*/\n', '\tfunction getOwner() public view returns (address)\n', '\t{\n', '\t\treturn owner;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev set Operator or not\n', '\t* @param _operator the address of the operator\n', '\t* @param flag operator permission\n', '\t* @return true (TODO: validate results)\n', '\t*/\n', '\tfunction setOperators(address payable _operator, bool flag) onlyOwner external returns (bool) {\n', '\t\toperators[_operator] = flag;\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates interest amount for a user\n', '\t * @param handlerDataStorageAddr The address of handlerDataStorage contract\n', '\t * @param userAddr The address of user\n', '\t * @param isView Select _view (before action) or _get (after action) function for calculation\n', '\t * @return (bool, uint256, uint256, bool, uint256, uint256)\n', '\t */\n', '\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) external view override returns (bool, uint256, uint256, bool, uint256, uint256)\n', '\t{\n', '\t\tif (isView)\n', '\t\t{\n', '\t\t\treturn _viewInterestAmount(handlerDataStorageAddr, userAddr);\n', '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t\treturn _getInterestAmount(handlerDataStorageAddr, userAddr);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates interest amount for a user (before user action)\n', '\t * @param handlerDataStorageAddr The address of handlerDataStorage contract\n', '\t * @param userAddr The address of user\n', '\t * @return (bool, uint256, uint256, bool, uint256, uint256)\n', '\t */\n', '\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) external view override returns (bool, uint256, uint256, bool, uint256, uint256)\n', '\t{\n', '\t\treturn _viewInterestAmount(handlerDataStorageAddr, userAddr);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Get Supply Interest Rate (SIR) and Borrow Interest Rate (BIR) (external)\n', '\t * @param totalDepositAmount The amount of total deposit\n', '\t * @param totalBorrowAmount The amount of total borrow\n', '\t * @return (uint256, uin256)\n', '\t */\n', '\tfunction getSIRandBIR(uint256 totalDepositAmount, uint256 totalBorrowAmount) external view override returns (uint256, uint256)\n', '\t{\n', '\t\treturn _getSIRandBIR(totalDepositAmount, totalBorrowAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates interest amount for a user (after user action)\n', '\t * @param handlerDataStorageAddr The address of handlerDataStorage contract\n', '\t * @param userAddr The address of user\n', '\t * @return (bool, uint256, uint256, bool, uint256, uint256)\n', '\t */\n', '\tfunction _getInterestAmount(address handlerDataStorageAddr, address payable userAddr) internal view returns (bool, uint256, uint256, bool, uint256, uint256)\n', '\t{\n', '\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n', '\t\tuint256 delta = handlerDataStorage.getInactiveActionDelta();\n', '\t\tuint256 actionDepositEXR;\n', '\t\tuint256 actionBorrowEXR;\n', '\t\t(actionDepositEXR, actionBorrowEXR) = handlerDataStorage.getActionEXR();\n', '\t\treturn _calcInterestAmount(handlerDataStorageAddr, userAddr, delta, actionDepositEXR, actionBorrowEXR);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates interest amount for a user (before user action)\n', '\t * @param handlerDataStorageAddr The address of handlerDataStorage contract\n', '\t * @param userAddr The address of user\n', '\t * @return (bool, uint256, uint256, bool, uint256, uint256)\n', '\t */\n', '\tfunction _viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) internal view returns (bool, uint256, uint256, bool, uint256, uint256)\n', '\t{\n', '\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n', '\t\tuint256 blockDelta = block.number.sub(handlerDataStorage.getLastUpdatedBlock());\n', '\t\t/* check action in block */\n', '\t\tuint256 globalDepositEXR;\n', '\t\tuint256 globalBorrowEXR;\n', '\t\t(globalDepositEXR, globalBorrowEXR) = handlerDataStorage.getGlobalEXR();\n', '\t\treturn _calcInterestAmount(handlerDataStorageAddr, userAddr, blockDelta, globalDepositEXR, globalBorrowEXR);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculate interest amount for a user with BIR and SIR (interal)\n', '\t * @param handlerDataStorageAddr The address of handlerDataStorage contract\n', '\t * @param userAddr The address of user\n', '\t * @return (bool, uint256, uint256, bool, uint256, uint256)\n', '\t */\n', '\tfunction _calcInterestAmount(address handlerDataStorageAddr, address payable userAddr, uint256 delta, uint256 actionDepositEXR, uint256 actionBorrowEXR) internal view returns (bool, uint256, uint256, bool, uint256, uint256)\n', '\t{\n', '\t\tInterestUpdateModel memory interestUpdateModel;\n', '\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n', '\t\t(interestUpdateModel.depositTotalAmount, interestUpdateModel.borrowTotalAmount, interestUpdateModel.userDepositAmount, interestUpdateModel.userBorrowAmount) = handlerDataStorage.getAmount(userAddr);\n', '\t\t(interestUpdateModel.SIR, interestUpdateModel.BIR) = _getSIRandBIRonBlock(interestUpdateModel.depositTotalAmount, interestUpdateModel.borrowTotalAmount);\n', '\t\t(interestUpdateModel.userDepositEXR, interestUpdateModel.userBorrowEXR) = handlerDataStorage.getUserEXR(userAddr);\n', '\n', '\t\t/* deposit start */\n', '\t\tinterestUpdateModel.globalDepositEXR = _getNewGlobalEXR(actionDepositEXR, interestUpdateModel.SIR, delta);\n', '\t\t(interestUpdateModel.depositNegativeFlag, interestUpdateModel.deltaDepositAmount) = _getDeltaAmount(interestUpdateModel.userDepositAmount, interestUpdateModel.globalDepositEXR, interestUpdateModel.userDepositEXR);\n', '\t\t/* deposit done */\n', '\n', '\t\t/* borrow start */\n', '\t\tinterestUpdateModel.globalBorrowEXR = _getNewGlobalEXR(actionBorrowEXR, interestUpdateModel.BIR, delta);\n', '\t\t(interestUpdateModel.borrowNegativeFlag, interestUpdateModel.deltaBorrowAmount) = _getDeltaAmount(interestUpdateModel.userBorrowAmount, interestUpdateModel.globalBorrowEXR, interestUpdateModel.userBorrowEXR);\n', '\t\t/* borrow done */\n', '\n', '\t\treturn (interestUpdateModel.depositNegativeFlag, interestUpdateModel.deltaDepositAmount, interestUpdateModel.globalDepositEXR, interestUpdateModel.borrowNegativeFlag, interestUpdateModel.deltaBorrowAmount, interestUpdateModel.globalBorrowEXR);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates the utilization rate of market\n', '\t * @param depositTotalAmount The total amount of deposit\n', '\t * @param borrowTotalAmount The total amount of borrow\n', '\t * @return The utilitization rate of market\n', '\t */\n', '\tfunction _getUtilizationRate(uint256 depositTotalAmount, uint256 borrowTotalAmount) internal pure returns (uint256)\n', '\t{\n', '\t\tif ((depositTotalAmount == 0) && (borrowTotalAmount == 0))\n', '\t\t{\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\treturn borrowTotalAmount.unifiedDiv(depositTotalAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Get SIR and BIR (internal)\n', '\t * @param depositTotalAmount The amount of total deposit\n', '\t * @param borrowTotalAmount The amount of total borrow\n', '\t * @return (uint256, uin256)\n', '\t */\n', '\tfunction _getSIRandBIR(uint256 depositTotalAmount, uint256 borrowTotalAmount) internal view returns (uint256, uint256)\n', '\t// TODO: update comment(jump rate)\n', '\t{\n', '\t\t/* UtilRate = TotalBorrow / (TotalDeposit + TotalBorrow) */\n', '\t\tuint256 utilRate = _getUtilizationRate(depositTotalAmount, borrowTotalAmount);\n', '\t\tuint256 BIR;\n', '\t\tuint256 _jmpPoint = jumpPoint;\n', '\t\t/* BIR = minimumRate + (UtilRate * liquiditySensitivity) */\n', '\t\tif(utilRate < _jmpPoint) {\n', '\t\t\tBIR = utilRate.unifiedMul(basicSensitivity).add(minRate);\n', '\t\t} else {\n', '      /*\n', '      Formula : BIR = minRate + jumpPoint * basicSensitivity + (utilRate - jumpPoint) * jumpSensitivity\n', '\n', '\t\t\tuint256 _baseBIR = _jmpPoint.unifiedMul(basicSensitivity);\n', '\t\t\tuint256 _jumpBIR = utilRate.sub(_jmpPoint).unifiedMul(jumpSensitivity);\n', '\t\t\tBIR = minRate.add(_baseBIR).add(_jumpBIR);\n', '      */\n', '      BIR = minRate\n', '      .add( _jmpPoint.unifiedMul(basicSensitivity) )\n', '      .add( utilRate.sub(_jmpPoint).unifiedMul(jumpSensitivity) );\n', '\t\t}\n', '\n', '\t\t/* SIR = UtilRate * BIR */\n', '\t\tuint256 SIR = utilRate.unifiedMul(BIR).unifiedMul(spreadRate);\n', '\t\treturn (SIR, BIR);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Get SIR and BIR per block (internal)\n', '\t * @param depositTotalAmount The amount of total deposit\n', '\t * @param borrowTotalAmount The amount of total borrow\n', '\t * @return (uint256, uin256)\n', '\t */\n', '\tfunction _getSIRandBIRonBlock(uint256 depositTotalAmount, uint256 borrowTotalAmount) internal view returns (uint256, uint256)\n', '\t{\n', '\t\tuint256 SIR;\n', '\t\tuint256 BIR;\n', '\t\t(SIR, BIR) = _getSIRandBIR(depositTotalAmount, borrowTotalAmount);\n', '\t\treturn ( SIR.div(blocksPerYear), BIR.div(blocksPerYear) );\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates the rate of globalEXR (for borrowEXR or depositEXR)\n', '\t * @param actionEXR The rate of actionEXR\n', '\t * @param interestRate The rate of interest\n', '\t * @param delta The interval between user actions (in block)\n', '\t * @return The amount of newGlobalEXR\n', '\t */\n', '\tfunction _getNewGlobalEXR(uint256 actionEXR, uint256 interestRate, uint256 delta) internal pure returns (uint256)\n', '\t{\n', '\t\treturn interestRate.mul(delta).add(unifiedPoint).unifiedMul(actionEXR);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates difference between globalEXR and userEXR\n', '\t * @param unifiedAmount The unifiedAmount (for fixed decimal number)\n', '\t * @param globalEXR The amount of globalEXR\n', '\t * @param userEXR The amount of userEXR\n', '\t * @return (bool, uint256)\n', '\t */\n', '\tfunction _getDeltaAmount(uint256 unifiedAmount, uint256 globalEXR, uint256 userEXR) internal pure returns (bool, uint256)\n', '\t{\n', '\t\tuint256 deltaEXR;\n', '\t\tbool negativeFlag;\n', '\t\tuint256 deltaAmount;\n', '\t\tif (unifiedAmount != 0)\n', '\t\t{\n', '\t\t\t(negativeFlag, deltaEXR) = _getDeltaEXR(globalEXR, userEXR);\n', '\t\t\tdeltaAmount = unifiedAmount.unifiedMul(deltaEXR);\n', '\t\t}\n', '\n', '\t\treturn (negativeFlag, deltaAmount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Calculates the delta EXR between globalEXR and userEXR\n', '\t * @param newGlobalEXR The new globalEXR\n', '\t * @param lastUserEXR The last userEXR\n', '\t * @return (bool, uint256)\n', '\t */\n', '\tfunction _getDeltaEXR(uint256 newGlobalEXR, uint256 lastUserEXR) internal pure returns (bool, uint256)\n', '\t{\n', '\t\tuint256 EXR = newGlobalEXR.unifiedDiv(lastUserEXR);\n', '\t\tif (EXR >= unifiedPoint)\n', '\t\t{\n', '\t\t\treturn ( false, EXR.sub(unifiedPoint) );\n', '\t\t}\n', '\n', '\t\treturn ( true, unifiedPoint.sub(EXR) );\n', '\t}\n', '\t//TODO: Need comment\n', '\tfunction getMinRate() external view returns (uint256) {\n', '\t\treturn minRate;\n', '\t}\n', '\n', '\tfunction setMinRate(uint256 _minRate) external onlyOperator returns (bool) {\n', '\t\tminRate = _minRate;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getBasicSensitivity() external view returns (uint256) {\n', '\t\treturn basicSensitivity;\n', '\t}\n', '\n', '\tfunction setBasicSensitivity(uint256 _sensitivity) external onlyOperator returns (bool) {\n', '\t\tbasicSensitivity = _sensitivity;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getJumpPoint() external view returns (uint256) {\n', '\t\treturn jumpPoint;\n', '\t}\n', '\n', '\tfunction setJumpPoint(uint256 _jumpPoint) external onlyOperator returns (bool) {\n', '\t\tjumpPoint = _jumpPoint;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getJumpSensitivity() external view returns (uint256) {\n', '\t\treturn jumpSensitivity;\n', '\t}\n', '\n', '\tfunction setJumpSensitivity(uint256 _sensitivity) external onlyOperator returns (bool) {\n', '\t\tjumpSensitivity = _sensitivity;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getSpreadRate() external view returns (uint256) {\n', '\t\treturn spreadRate;\n', '\t}\n', '\n', '\tfunction setSpreadRate(uint256 _spreadRate) external onlyOperator returns (bool) {\n', '\t\tspreadRate = _spreadRate;\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '// File: contracts/truffleKit/InterestModel.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract UsdtInterestModel is interestModel {\n', '    constructor(\n', '        uint256 _minRate,\n', '        uint256 _jumpPoint,\n', '        uint256 _basicSensitivity,\n', '        uint256 _jumpSensitivity,\n', '        uint256 _spreadRate\n', '    )\n', '    interestModel(\n', '        _minRate,\n', '        _jumpPoint,\n', '        _basicSensitivity,\n', '        _jumpSensitivity,\n', '        _spreadRate\n', '    ) public {}\n', '}']