['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./Address.sol";\n', 'import "./OwnableUpgradeSafe.sol";\n', 'import "./IERC20.sol";\n', '\n', '// Vault distributing fixed per-block reward of ERC20 token equally amongst staked pools\n', 'contract VaultAdu is OwnableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many  tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of ADUs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws  tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 token; // Address of LP token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. ADUs to distribute per block.\n', '        uint256 accRewardPerShare; // Accumulated token underlying units per share, times 1e12. See below.\n', '        uint256 lastRewardBlock;\n', '    }\n', '\n', '    // A reward token\n', '    IERC20 public rewardToken;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes  tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint;\n', '\n', '    uint256 public contractStartBlock;\n', '    uint256 public epochCalculationStartBlock;\n', '    uint256 public cumulativeRewardsSinceStart;\n', '    uint256 public rewardsInThisEpoch;\n', '    uint public epoch;\n', '\n', '    uint256 public rewardPerBlock;\n', '\n', '    // Returns average rewards generated since start of this contract\n', '    function averageRewardPerBlockSinceStart() external view returns (uint averagePerBlock) {\n', '        averagePerBlock = cumulativeRewardsSinceStart.add(rewardsInThisEpoch).div(block.number.sub(contractStartBlock));\n', '    }        \n', '\n', '    // Returns averge reward in this epoch\n', '    function averageRewardPerBlockEpoch() external view returns (uint256 averagePerBlock) {\n', '        averagePerBlock = rewardsInThisEpoch.div(block.number.sub(epochCalculationStartBlock));\n', '    }\n', '\n', '    // For easy graphing historical epoch rewards\n', '    mapping(uint => uint256) public epochRewards;\n', '\n', '    // Starts a new calculation epoch\n', '    // Because averge since start will not be accurate\n', '    function startNewEpoch() public {\n', '        require(epochCalculationStartBlock + 50000 < block.number, "New epoch not ready yet"); // About a week\n', '        epochRewards[epoch] = rewardsInThisEpoch;\n', '        cumulativeRewardsSinceStart = cumulativeRewardsSinceStart.add(rewardsInThisEpoch);\n', '        rewardsInThisEpoch = 0;\n', '        epochCalculationStartBlock = block.number;\n', '        ++epoch;\n', '    }\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accRewardPerShare);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '    event MigrationWithdraw(address indexed user, address indexed newVault, uint256 amount);\n', '    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    function initialize(\n', '        IERC20 _rewardToken,\n', '        uint256 _rewardPerBlock\n', '    ) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        rewardToken = _rewardToken;\n', '        contractStartBlock = block.number;\n', '        epochCalculationStartBlock = block.number;\n', '        rewardPerBlock = _rewardPerBlock;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new token pool. Can only be called by the owner. \n', '    // Note contract owner is meant to be a governance contract allowing ADU governance consensus\n', '    function add(uint256 _allocPoint, IERC20 _token) public onlyOwner {\n', '        uint256 length = poolInfo.length;\n', '        uint256 lastRewardBlock = block.number;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            require(poolInfo[pid].token != _token,"Error pool already added");\n', '        }\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                token: _token,\n', '                allocPoint: _allocPoint,\n', '                accRewardPerShare: 0,\n', '                lastRewardBlock : lastRewardBlock\n', '            })\n', '        );\n', '    }\n', '\n', "    // Update the given pool's ADUs allocation point. Can only be called by the owner.\n", '    // Note contract owner is meant to be a governance contract allowing ADU governance consensus\n', '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // View function to see pending reward tokens on frontend.\n', '    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accRewardPerShare = pool.accRewardPerShare;\n', '        pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt); // return calculated pending reward\n', '    }\n', '\n', '    // View function to see pending reward tokens on frontend.\n', '    function pendingTokenActual(uint256 _pid, address _user) public view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accRewardPerShare = pool.accRewardPerShare;\n', '        if (block.number > pool.lastRewardBlock) {\n', '            uint256 lpSupply = pool.token.balanceOf(address(this));\n', '            if (lpSupply > 0) { // avoids division by 0 errors\n', '                uint256 blocks = block.number.sub(pool.lastRewardBlock);\n', '                uint256 aduReward = blocks.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint); // eg. 4blocks * 1e20 * 100allocPoint / 100totalAllocPoint\n', '                //add only diff from last calculation\n', '                accRewardPerShare = pool.accRewardPerShare.add((aduReward.mul(1e12).div(lpSupply)));\n', '            }\n', '        }\n', '\n', '        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt); // return calculated pending reward\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n', '        pool = poolInfo[_pid];\n', '\n', '        if (block.number > pool.lastRewardBlock) {\n', '            uint256 lpSupply = pool.token.balanceOf(address(this));\n', '            if (lpSupply > 0) { // avoids division by 0 errors\n', '                uint256 blocks = block.number.sub(pool.lastRewardBlock);\n', '                uint256 aduReward = blocks.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint); // eg. 4blocks * 1e20 * 100allocPoint / 100totalAllocPoint\n', '                pool.accRewardPerShare = pool.accRewardPerShare.add((aduReward.mul(1e12).div(lpSupply)));\n', '            }\n', '            pool.lastRewardBlock = block.number;\n', '            poolInfo[_pid] = pool;\n', '            emit LogUpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accRewardPerShare);\n', '        }\n', '    }\n', '\n', '    // Deposit LP tokens to Vault for ADU allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        depositFor(_pid, _amount, msg.sender);\n', '    }\n', '\n', '    // Deposit LP tokens to Vault for ADU allocation.\n', '    function depositFor(uint256 _pid, uint256 _amount, address _to) public {\n', '        // requires no allowances\n', '        PoolInfo memory pool = updatePool(_pid);\n', '        UserInfo storage user = userInfo[_pid][_to];\n', '\n', '        massUpdatePools();\n', '        updateAndPayOutPending(_pid, _to);\n', '\n', '        if (_amount > 0) {\n', '            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount, _to);\n', '    }\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        withdrawTo(_pid, _amount, msg.sender);\n', '    }\n', '\n', '    function withdrawTo(uint256 _pid, uint256 _amount, address _to) public {\n', '        PoolInfo memory pool = updatePool(_pid);\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '\n', '        massUpdatePools();\n', '        updateAndPayOutPending(_pid, msg.sender);\n', '\n', '        if (_amount > 0) {\n', '            pool.token.safeTransfer(_to, _amount);\n', '            user.amount = user.amount.sub(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount, _to);\n', '    }\n', '\n', '    function updateAndPayOutPending(uint256 _pid, address _to) internal {\n', '        uint256 pending = pendingToken(_pid, _to);\n', '        if (pending > 0) {\n', '            safeRewardTokenTransfer(_to, pending);\n', '        }\n', '    }\n', '\n', '    function harvest(uint256 _pid) public returns (bool success) {\n', '        return harvestTo(_pid, msg.sender);\n', '    }\n', '\n', '    /// @notice Harvest proceeds for transaction sender to `to`.\n', '    /// @param _pid The index of the pool. See `poolInfo`.\n', '    /// @param _to Receiver of ADU rewards.\n', '    /// @return success Returns bool indicating success of rewarder delegate call.\n', '    function harvestTo(uint256 _pid, address _to) public returns (bool success) {\n', '        uint256 _pendingToken = pendingToken(_pid, _to);\n', '        withdrawTo(_pid, 0, _to);\n', '        emit Harvest(msg.sender, _pid, _pendingToken);\n', '        return true;\n', '    }\n', '\n', '     // Safe ADU transfer function, just in case if there is no more ADU left.\n', '    function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\n', '        uint256 aduBalance = rewardToken.balanceOf(address(this));\n', '        if (aduBalance > 0){\n', '            if (_amount > aduBalance) {\n', '                rewardToken.transfer(_to, aduBalance);\n', '            } else {\n', '                rewardToken.transfer(_to, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function migrateTokensToNewVault(address _newVault) public virtual onlyOwner {\n', '        require(_newVault != address(0), "Vault: new vault is the zero address");\n', '        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));\n', '        safeRewardTokenTransfer(_newVault, rewardTokenBalErc);\n', '        emit MigrationWithdraw(msg.sender, _newVault, rewardTokenBalErc);\n', '    }\n', '\n', '    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    /// @param _pid The index of the pool. See `poolInfo`.\n', '    /// @param _to Receiver of the LP tokens.\n', '    function emergencyWithdraw(uint256 _pid, address _to) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 amount = user.amount;\n', '        // Note: transfer can fail or succeed if `amount` is zero.\n', '        if (amount > 0) {\n', '            pool.token.safeTransfer(_to, amount);\n', '            user.amount = 0;\n', '            user.rewardDebt = 0;\n', '        }\n', '        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\n', '    }\n', '\n', '    // Function that lets owner/governance contract approve\n', '    // allowance for any 3rd party token inside this contract.\n', '    // This means all future UNI like airdrops are covered.\n', '    // And at the same time allows us to give allowance to strategy contracts.\n', '    function setStrategyContractOrDistributionContractAllowance(address tokenAddress, uint256 _amount, address contractAddress) public onlyOwner {\n', '        require(isContract(contractAddress), "Recipent is not a smart contract");\n', '        require(tokenAddress != address(rewardToken), "Vault token allowance not allowed");\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; pid++) {\n', '            require(tokenAddress != address(poolInfo[pid].token), "Vault pool token allowance not allowed");\n', '        }\n', '\n', '        IERC20(tokenAddress).approve(contractAddress, _amount);\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}']