['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/XDEX.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', 'contract XDEX is ERC20, ERC20Detailed {\n', '    address public core;\n', '\n', '    event SET_CORE(address indexed core, address indexed _core);\n', '\n', '    constructor() public ERC20Detailed("XDEFI Governance Token", "XDEX", 18) {\n', '        core = msg.sender;\n', '    }\n', '\n', '    modifier onlyCore() {\n', '        require(msg.sender == core, "Not Authorized");\n', '        _;\n', '    }\n', '\n', '    function setCore(address _core) public onlyCore {\n', '        emit SET_CORE(core, _core);\n', '        core = _core;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public onlyCore {\n', '        _mint(account, amount);\n', '    }\n', '\n', '    function burnForSelf(uint256 amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IXHalfLife.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'interface IXHalfLife {\n', '    function createStream(\n', '        address token,\n', '        address recipient,\n', '        uint256 depositAmount,\n', '        uint256 startBlock,\n', '        uint256 kBlock,\n', '        uint256 unlockRatio,\n', '        bool cancelable\n', '    ) external returns (uint256);\n', '\n', '    function createEtherStream(\n', '        address recipient,\n', '        uint256 startBlock,\n', '        uint256 kBlock,\n', '        uint256 unlockRatio,\n', '        bool cancelable\n', '    ) external payable returns (uint256);\n', '\n', '    function hasStream(uint256 streamId) external view returns (bool);\n', '\n', '    function getStream(uint256 streamId)\n', '        external\n', '        view\n', '        returns (\n', '            address sender,\n', '            address recipient,\n', '            address token,\n', '            uint256 depositAmount,\n', '            uint256 startBlock,\n', '            uint256 kBlock,\n', '            uint256 remaining,\n', '            uint256 withdrawable,\n', '            uint256 unlockRatio,\n', '            uint256 lastRewardBlock,\n', '            bool cancelable\n', '        );\n', '\n', '    function balanceOf(uint256 streamId)\n', '        external\n', '        view\n', '        returns (uint256 withdrawable, uint256 remaining);\n', '\n', '    function withdrawFromStream(uint256 streamId, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function cancelStream(uint256 streamId) external returns (bool);\n', '\n', '    function singleFundStream(uint256 streamId, uint256 amount)\n', '        external\n', '        payable\n', '        returns (bool);\n', '\n', '    function lazyFundStream(\n', '        uint256 streamId,\n', '        uint256 amount,\n', '        uint256 blockHeightDiff\n', '    ) external payable returns (bool);\n', '\n', '    function getVersion() external pure returns (bytes32);\n', '}\n', '\n', '// File: contracts/XdexStream.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', 'contract XdexStream is ReentrancyGuard {\n', '    uint256 constant ONE = 10**18;\n', '\n', '    //The XDEX Token!\n', '    address public xdex;\n', '    address public xdexFarmMaster;\n', '\n', '    /**\n', '     * @notice An interface of XHalfLife, the contract responsible for creating, funding and withdrawing from streams.\n', '     * No one could cancle the xdex resward stream except the recipient, because the stream sender is this contract.\n', '     */\n', '    IXHalfLife public halflife;\n', '\n', '    struct LockStream {\n', '        address depositor;\n', '        bool isEntity;\n', '        uint256 streamId;\n', '    }\n', '\n', '    //unlock ratio is 0.1% for both Voting and Normal Pool\n', '    uint256 private constant unlockRatio = 1;\n', '\n', '    //unlock k block for Voting Pool\n', '    uint256 private constant unlockKBlocksV = 540;\n', '    // key: recipient, value: Locked Stream\n', '    mapping(address => LockStream) private votingStreams;\n', '\n', '    //funds for Normal Pool\n', '    uint256 private constant unlockKBlocksN = 60;\n', '    // key: recipient, value: Locked Stream\n', '    mapping(address => LockStream) private normalStreams;\n', '\n', '    // non cancelable farm streams\n', '    bool private constant cancelable = false;\n', '\n', '    /**\n', '     * @notice User can have at most one votingStream and one normalStream.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    modifier lockStreamExists(address who, uint256 streamType) {\n', '        bool found = false;\n', '        if (streamType == 0) {\n', '            //voting stream\n', '            found = votingStreams[who].isEntity;\n', '        } else if (streamType == 1) {\n', '            //normal stream\n', '            found = normalStreams[who].isEntity;\n', '        }\n', '\n', '        require(found, "the lock stream does not exist");\n', '        _;\n', '    }\n', '\n', '    modifier validStreamType(uint256 streamType) {\n', '        require(\n', '            streamType == 0 || streamType == 1,\n', '            "invalid stream type: 0 or 1"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _xdex,\n', '        address _halfLife,\n', '        address _farmMaster\n', '    ) public {\n', '        xdex = _xdex;\n', '        halflife = IXHalfLife(_halfLife);\n', '        xdexFarmMaster = _farmMaster;\n', '    }\n', '\n', '    /**\n', '     * If the user has VotingStream or has NormalStream.\n', '     */\n', '    function hasStream(address who)\n', '        public\n', '        view\n', '        returns (bool hasVotingStream, bool hasNormalStream)\n', '    {\n', '        hasVotingStream = votingStreams[who].isEntity;\n', '        hasNormalStream = normalStreams[who].isEntity;\n', '    }\n', '\n', '    /**\n', "     * @notice Get a user's voting or normal stream id.\n", '     * @dev stream id must > 0.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    function getStreamId(address who, uint256 streamType)\n', '        public\n', '        view\n', '        lockStreamExists(who, streamType)\n', '        returns (uint256 streamId)\n', '    {\n', '        if (streamType == 0) {\n', '            return votingStreams[who].streamId;\n', '        } else if (streamType == 1) {\n', '            return normalStreams[who].streamId;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a new stream funded by `msg.sender` and paid towards to `recipient`.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    function createStream(\n', '        address recipient,\n', '        uint256 depositAmount,\n', '        uint256 streamType,\n', '        uint256 startBlock\n', '    )\n', '        external\n', '        nonReentrant\n', '        validStreamType(streamType)\n', '        returns (uint256 streamId)\n', '    {\n', '        require(msg.sender == xdexFarmMaster, "only farmMaster could create");\n', '        require(recipient != address(0), "stream to the zero address");\n', '        require(recipient != address(this), "stream to the contract itself");\n', '        require(recipient != msg.sender, "stream to the caller");\n', '        require(depositAmount > 0, "depositAmount is zero");\n', '        require(startBlock >= block.number, "start block before block.number");\n', '\n', '        if (streamType == 0) {\n', '            require(\n', '                !(votingStreams[recipient].isEntity),\n', '                "voting stream exists"\n', '            );\n', '        }\n', '        if (streamType == 1) {\n', '            require(\n', '                !(normalStreams[recipient].isEntity),\n', '                "normal stream exists"\n', '            );\n', '        }\n', '\n', '        uint256 unlockKBlocks = unlockKBlocksN;\n', '        if (streamType == 0) {\n', '            unlockKBlocks = unlockKBlocksV;\n', '        }\n', '\n', '        /* Approve the XHalflife contract to spend. */\n', '        IERC20(xdex).approve(address(halflife), depositAmount);\n', '\n', '        /* Transfer the tokens to this contract. */\n', '        IERC20(xdex).transferFrom(msg.sender, address(this), depositAmount);\n', '\n', '        streamId = halflife.createStream(\n', '            xdex,\n', '            recipient,\n', '            depositAmount,\n', '            startBlock,\n', '            unlockKBlocks,\n', '            unlockRatio,\n', '            cancelable\n', '        );\n', '\n', '        if (streamType == 0) {\n', '            votingStreams[recipient] = LockStream({\n', '                depositor: msg.sender,\n', '                isEntity: true,\n', '                streamId: streamId\n', '            });\n', '        } else if (streamType == 1) {\n', '            normalStreams[recipient] = LockStream({\n', '                depositor: msg.sender,\n', '                isEntity: true,\n', '                streamId: streamId\n', '            });\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Send funds to the stream\n', '     * @param streamId The given stream id;\n', '     * @param amount New amount fund to add;\n', "     * @param blockHeightDiff diff of block.number and farmPool's lastRewardBlock;\n", '     */\n', '    function fundsToStream(\n', '        uint256 streamId,\n', '        uint256 amount,\n', '        uint256 blockHeightDiff\n', '    ) public returns (bool result) {\n', '        require(amount > 0, "amount is zero");\n', '\n', '        /* Approve the XHalflife contract to spend. */\n', '        IERC20(xdex).approve(address(halflife), amount);\n', '\n', '        /* Transfer the tokens to this contract. */\n', '        IERC20(xdex).transferFrom(msg.sender, address(this), amount);\n', '\n', '        result = halflife.lazyFundStream(streamId, amount, blockHeightDiff);\n', '    }\n', '}\n', '\n', '// File: contracts/FarmMaster.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// FarmMaster is the master of xDefi Farms.\n', 'contract FarmMaster is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 private constant ONE = 10**18;\n', '    uint256 private constant StreamTypeVoting = 0;\n', '    uint256 private constant StreamTypeNormal = 1;\n', '\n', '    //min and max lpToken count in one pool\n', '    uint256 private constant LpTokenMinCount = 1;\n', '    uint256 private constant LpTokenMaxCount = 8;\n', '\n', '    uint256 private constant LpRewardFixDec = 1e12;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt.\n', '    }\n', '\n', '    struct LpTokenInfo {\n', '        IERC20 lpToken; // Address of LP token contract.\n', '        // lpTokenType, Type of LP token\n', '        //      Type0: XPT;\n', '        //      Type1: UNI-LP;\n', '        //      Type2: BPT;\n', '        //      Type3: XLP;\n', '        uint256 lpTokenType;\n', '        uint256 lpFactor;\n', '        uint256 lpAccPerShare; // Accumulated XDEX per share, times 1e12. See below.\n', '        mapping(address => UserInfo) userInfo; // Info of each user that stakes LP tokens.\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        LpTokenInfo[] LpTokenInfos;\n', '        uint256 poolFactor; // How many allocation factor assigned to this pool. XDEX to distribute per block.\n', '        uint256 lastRewardBlock; // Last block number that XDEX distribution occurs.\n', '    }\n', '\n', '    //key: hash(pid + lp address), value: index\n', '    mapping(bytes32 => uint256) private lpIndexInPool;\n', '\n', '    /*\n', '     * In [0, 60000) blocks, 160 XDEX per block, 9600000 XDEX distributed;\n', '     * In [60000, 180000) blocks, 80 XDEX per block, 9600000 XDEX distributed;\n', '     * In [180000, 420000) blocks, 40 XDEX per block, 9600000 XDEX distributed;\n', '     * In [420000, 900000) blocks, 20 XDEX per block, 9600000 XDEX distributed;\n', '     * After 900000 blocks, 8 XDEX distributed per block.\n', '     */\n', '    uint256[4] public bonusEndBlocks = [60000, 180000, 420000, 900000];\n', '\n', '    // 160, 80, 40, 20, 8 XDEX per block\n', '    uint256[5] public tokensPerBlock = [\n', '        uint256(160 * ONE),\n', '        uint256(80 * ONE),\n', '        uint256(40 * ONE),\n', '        uint256(20 * ONE),\n', '        uint256(8 * ONE)\n', '    ];\n', '\n', '    // First deposit incentive (once for each new user): 10 XDEX\n', '    uint256 public constant bonusFirstDeposit = 10 * ONE;\n', '\n', '    address public core;\n', '    // The XDEX TOKEN\n', '    XDEX public xdex;\n', '\n', '    // Secure Asset Fund for Users(SAFU) address, same as SAFU in xdefi-base/contracts/XConfig.sol\n', '    address public safu;\n', '\n', '    // whitelist of claimable airdrop tokens\n', '    mapping(address => bool) public claimableTokens;\n', '\n', '    // The Halflife Proxy Contract\n', '    XdexStream public stream;\n', '\n', '    // The main voting pool id\n', '    uint256 public votingPoolId;\n', '\n', '    // The block number when Token farming starts.\n', '    uint256 public startBlock;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '\n', '    // Total allocation factors. Must be the sum of all allocation factors in all pools.\n', '    uint256 public totalXFactor = 0;\n', '\n', '    event AddPool(\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 indexed lpType,\n', '        uint256 lpFactor\n', '    );\n', '\n', '    event AddLP(\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 indexed lpType,\n', '        uint256 lpFactor\n', '    );\n', '\n', '    event UpdateFactor(\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 lpFactor\n', '    );\n', '\n', '    event Deposit(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 amount\n', '    );\n', '\n', '    event Withdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 amount\n', '    );\n', '\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        address indexed lpToken,\n', '        uint256 amount\n', '    );\n', '\n', '    event Claim(\n', '        address indexed to,\n', '        address indexed token,\n', '        uint256 indexed amount\n', '    );\n', '\n', '    event SetCore(address indexed _core, address indexed _coreNew);\n', '    event SetStream(address indexed _stream, address indexed _streamNew);\n', '    event SetVotingPool(uint256 indexed _pid);\n', '    event SetSafu(address indexed safu, address indexed _safu);\n', '\n', '    /**\n', '     * @dev Throws if the msg.sender unauthorized.\n', '     */\n', '    modifier onlyCore() {\n', '        require(msg.sender == core, "Not authorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if the pid does not point to a valid pool.\n', '     */\n', '    modifier poolExists(uint256 _pid) {\n', '        require(_pid < poolInfo.length, "pool not exist");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        XDEX _xdex,\n', '        uint256 _startBlock,\n', '        address _safu\n', '    ) public {\n', '        require(_safu != address(0), "ERR_ZERO_ADDRESS");\n', '\n', '        xdex = _xdex;\n', '        startBlock = _startBlock;\n', '        core = msg.sender;\n', '        safu = _safu;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Set the voting pool id.\n', '    function setVotingPool(uint256 _pid) external onlyCore {\n', '        votingPoolId = _pid;\n', '        emit SetVotingPool(_pid);\n', '    }\n', '\n', '    // Set the xdex stream proxy.\n', '    function setStream(address _stream) external onlyCore {\n', '        require(_stream != address(0), "ERR_ZERO_ADDRESS");\n', '        emit SetStream(address(stream), _stream);\n', '        stream = XdexStream(_stream);\n', '    }\n', '\n', '    // Set new core\n', '    function setCore(address _core) external onlyCore {\n', '        require(_core != address(0), "ERR_ZERO_ADDRESS");\n', '        emit SetCore(core, _core);\n', '        core = _core;\n', '    }\n', '\n', '    // Set new SAFU\n', '    function setSafu(address _safu) external onlyCore {\n', '        require(_safu != address(0), "ERR_ZERO_ADDRESS");\n', '        emit SetSafu(safu, _safu);\n', '        safu = _safu;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the core.\n', '    // DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function addPool(\n', '        IERC20 _lpToken,\n', '        uint256 _lpTokenType,\n', '        uint256 _lpFactor,\n', '        bool _withUpdate\n', '    ) external onlyCore {\n', '        require(_lpFactor > 0, "Lp Token Factor is zero");\n', '\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 _lastRewardBlock =\n', '            block.number > startBlock ? block.number : startBlock;\n', '\n', '        totalXFactor = totalXFactor.add(_lpFactor);\n', '\n', '        uint256 poolinfos_id = poolInfo.length++;\n', '        poolInfo[poolinfos_id].poolFactor = _lpFactor;\n', '        poolInfo[poolinfos_id].lastRewardBlock = _lastRewardBlock;\n', '        poolInfo[poolinfos_id].LpTokenInfos.push(\n', '            LpTokenInfo({\n', '                lpToken: _lpToken,\n', '                lpTokenType: _lpTokenType,\n', '                lpFactor: _lpFactor,\n', '                lpAccPerShare: 0\n', '            })\n', '        );\n', '        //The index in storage starts with 1, then need sub(1)\n', '        lpIndexInPool[keccak256(abi.encodePacked(poolinfos_id, _lpToken))] = 1;\n', '        emit AddPool(poolinfos_id, address(_lpToken), _lpTokenType, _lpFactor);\n', '    }\n', '\n', '    function addLpTokenToPool(\n', '        uint256 _pid,\n', '        IERC20 _lpToken,\n', '        uint256 _lpTokenType,\n', '        uint256 _lpFactor\n', '    ) public onlyCore poolExists(_pid) {\n', '        require(_lpFactor > 0, "Lp Token Factor is zero");\n', '\n', '        massUpdatePools();\n', '\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        require(\n', '            lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))] == 0,\n', '            "lp token already added"\n', '        );\n', '\n', '        //check lpToken count\n', '        uint256 count = pool.LpTokenInfos.length;\n', '        require(\n', '            count >= LpTokenMinCount && count < LpTokenMaxCount,\n', '            "pool lpToken length is bad"\n', '        );\n', '\n', '        totalXFactor = totalXFactor.add(_lpFactor);\n', '\n', '        LpTokenInfo memory lpTokenInfo =\n', '            LpTokenInfo({\n', '                lpToken: _lpToken,\n', '                lpTokenType: _lpTokenType,\n', '                lpFactor: _lpFactor,\n', '                lpAccPerShare: 0\n', '            });\n', '        poolInfo[_pid].poolFactor = pool.poolFactor.add(_lpFactor);\n', '        poolInfo[_pid].LpTokenInfos.push(lpTokenInfo);\n', '\n', '        //save lpToken index\n', '        //The index in storage starts with 1, then need sub(1)\n', '        lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))] = count + 1;\n', '\n', '        emit AddLP(_pid, address(_lpToken), _lpTokenType, _lpFactor);\n', '    }\n', '\n', '    function getLpTokenInfosByPoolId(uint256 _pid)\n', '        external\n', '        view\n', '        poolExists(_pid)\n', '        returns (\n', '            address[] memory lpTokens,\n', '            uint256[] memory lpTokenTypes,\n', '            uint256[] memory lpFactors,\n', '            uint256[] memory lpAccPerShares\n', '        )\n', '    {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        uint256 length = pool.LpTokenInfos.length;\n', '        lpTokens = new address[](length);\n', '        lpTokenTypes = new uint256[](length);\n', '        lpFactors = new uint256[](length);\n', '        lpAccPerShares = new uint256[](length);\n', '        for (uint8 i = 0; i < length; i++) {\n', '            lpTokens[i] = address(pool.LpTokenInfos[i].lpToken);\n', '            lpTokenTypes[i] = pool.LpTokenInfos[i].lpTokenType;\n', '            lpFactors[i] = pool.LpTokenInfos[i].lpFactor;\n', '            lpAccPerShares[i] = pool.LpTokenInfos[i].lpAccPerShare;\n', '        }\n', '    }\n', '\n', "    // Update the given lpToken's lpFactor in the given pool. Can only be called by the owner.\n", '    // `_lpFactor` is 0, means the LpToken is soft deleted from pool.\n', '    function setLpFactor(\n', '        uint256 _pid,\n', '        IERC20 _lpToken,\n', '        uint256 _lpFactor,\n', '        bool _withUpdate\n', '    ) public onlyCore poolExists(_pid) {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 index = _getLpIndexInPool(_pid, _lpToken);\n', '        //update poolFactor and totalXFactor\n', '        uint256 poolFactorNew =\n', '            pool.poolFactor.sub(pool.LpTokenInfos[index].lpFactor).add(\n', '                _lpFactor\n', '            );\n', '        pool.LpTokenInfos[index].lpFactor = _lpFactor;\n', '\n', '        totalXFactor = totalXFactor.sub(poolInfo[_pid].poolFactor).add(\n', '            poolFactorNew\n', '        );\n', '        poolInfo[_pid].poolFactor = poolFactorNew;\n', '\n', '        emit UpdateFactor(_pid, address(_lpToken), _lpFactor);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint8 pid = 0; pid < length; ++pid) {\n', '            if (poolInfo[pid].poolFactor > 0) {\n', '                updatePool(pid);\n', '            }\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public poolExists(_pid) {\n', '        if (block.number <= poolInfo[_pid].lastRewardBlock) {\n', '            return;\n', '        }\n', '\n', '        if (poolInfo[_pid].poolFactor == 0 || totalXFactor == 0) {\n', '            return;\n', '        }\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        (uint256 poolReward, , ) =\n', '            getXCountToReward(pool.lastRewardBlock, block.number);\n', '        poolReward = poolReward.mul(pool.poolFactor).div(totalXFactor);\n', '\n', '        uint256 totalLpSupply = 0;\n', '        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\n', '            LpTokenInfo memory lpInfo = pool.LpTokenInfos[i];\n', '            uint256 lpSupply = lpInfo.lpToken.balanceOf(address(this));\n', '            if (lpSupply == 0) {\n', '                continue;\n', '            }\n', '            totalLpSupply = totalLpSupply.add(lpSupply);\n', '            uint256 lpReward =\n', '                poolReward.mul(lpInfo.lpFactor).div(pool.poolFactor);\n', '            pool.LpTokenInfos[i].lpAccPerShare = lpInfo.lpAccPerShare.add(\n', '                lpReward.mul(LpRewardFixDec).div(lpSupply)\n', '            );\n', '        }\n', '\n', '        if (totalLpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        xdex.mint(address(this), poolReward);\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // View function to see pending XDEX on frontend.\n', '    function pendingXDEX(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        poolExists(_pid)\n', '        returns (uint256)\n', '    {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '\n', '        uint256 totalPending = 0;\n', '        if (totalXFactor == 0 || pool.poolFactor == 0) {\n', '            for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\n', '                UserInfo memory user =\n', '                    poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\n', '                totalPending = totalPending.add(\n', '                    user\n', '                        .amount\n', '                        .mul(pool.LpTokenInfos[i].lpAccPerShare)\n', '                        .div(LpRewardFixDec)\n', '                        .sub(user.rewardDebt)\n', '                );\n', '            }\n', '\n', '            return totalPending;\n', '        }\n', '\n', '        (uint256 xdexReward, , ) =\n', '            getXCountToReward(pool.lastRewardBlock, block.number);\n', '\n', '        uint256 poolReward = xdexReward.mul(pool.poolFactor).div(totalXFactor);\n', '\n', '        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\n', '            LpTokenInfo memory lpInfo = pool.LpTokenInfos[i];\n', '            uint256 lpSupply = lpInfo.lpToken.balanceOf(address(this));\n', '            if (lpSupply == 0) {\n', '                continue;\n', '            }\n', '            if (block.number > pool.lastRewardBlock) {\n', '                uint256 lpReward =\n', '                    poolReward.mul(lpInfo.lpFactor).div(pool.poolFactor);\n', '                lpInfo.lpAccPerShare = lpInfo.lpAccPerShare.add(\n', '                    lpReward.mul(LpRewardFixDec).div(lpSupply)\n', '                );\n', '            }\n', '            UserInfo memory user =\n', '                poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\n', '            totalPending = totalPending.add(\n', '                user.amount.mul(lpInfo.lpAccPerShare).div(LpRewardFixDec).sub(\n', '                    user.rewardDebt\n', '                )\n', '            );\n', '        }\n', '\n', '        return totalPending;\n', '    }\n', '\n', '    // Deposit LP tokens to FarmMaster for XDEX allocation.\n', '    function deposit(\n', '        uint256 _pid,\n', '        IERC20 _lpToken,\n', '        uint256 _amount\n', '    ) external poolExists(_pid) {\n', '        require(_amount > 0, "not valid amount");\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 index = _getLpIndexInPool(_pid, _lpToken);\n', '        uint256 blockHeightDiff = block.number.sub(pool.lastRewardBlock);\n', '\n', '        require(index < poolInfo[_pid].LpTokenInfos.length, "not valid index");\n', '\n', '        updatePool(_pid);\n', '\n', '        UserInfo storage user =\n', '            poolInfo[_pid].LpTokenInfos[index].userInfo[msg.sender];\n', '\n', '        if (user.amount > 0) {\n', '            uint256 pending =\n', '                user\n', '                    .amount\n', '                    .mul(pool.LpTokenInfos[index].lpAccPerShare)\n', '                    .div(LpRewardFixDec)\n', '                    .sub(user.rewardDebt);\n', '\n', '            if (pending > 0) {\n', '                //create the stream or add funds to stream\n', '                (bool hasVotingStream, bool hasNormalStream) =\n', '                    stream.hasStream(msg.sender);\n', '\n', '                if (_pid == votingPoolId) {\n', '                    if (hasVotingStream) {\n', '                        //add funds\n', '                        uint256 streamId =\n', '                            stream.getStreamId(msg.sender, StreamTypeVoting);\n', '                        require(streamId > 0, "not valid stream id");\n', '\n', '                        xdex.approve(address(stream), pending);\n', '                        stream.fundsToStream(\n', '                            streamId,\n', '                            pending,\n', '                            blockHeightDiff\n', '                        );\n', '                    }\n', '                } else {\n', '                    if (hasNormalStream) {\n', '                        //add funds\n', '                        uint256 streamId =\n', '                            stream.getStreamId(msg.sender, StreamTypeNormal);\n', '                        require(streamId > 0, "not valid stream id");\n', '\n', '                        xdex.approve(address(stream), pending);\n', '                        stream.fundsToStream(\n', '                            streamId,\n', '                            pending,\n', '                            blockHeightDiff\n', '                        );\n', '                    }\n', '                }\n', '            }\n', '        } else {\n', '            uint256 streamStart = block.number + 1;\n', '            if (block.number < startBlock) {\n', '                streamStart = startBlock;\n', '            }\n', '\n', '            //if it is the first deposit\n', '            (bool hasVotingStream, bool hasNormalStream) =\n', '                stream.hasStream(msg.sender);\n', '\n', '            //create the stream for First Deposit Bonus\n', '            if (_pid == votingPoolId) {\n', '                if (!hasVotingStream) {\n', '                    xdex.mint(address(this), bonusFirstDeposit);\n', '                    xdex.approve(address(stream), bonusFirstDeposit);\n', '                    stream.createStream(\n', '                        msg.sender,\n', '                        bonusFirstDeposit,\n', '                        StreamTypeVoting,\n', '                        streamStart\n', '                    );\n', '                }\n', '            } else {\n', '                if (!hasNormalStream) {\n', '                    xdex.mint(address(this), bonusFirstDeposit);\n', '                    xdex.approve(address(stream), bonusFirstDeposit);\n', '                    stream.createStream(\n', '                        msg.sender,\n', '                        bonusFirstDeposit,\n', '                        StreamTypeNormal,\n', '                        streamStart\n', '                    );\n', '                }\n', '            }\n', '        }\n', '\n', '        pool.LpTokenInfos[index].lpToken.safeTransferFrom(\n', '            address(msg.sender),\n', '            address(this),\n', '            _amount\n', '        );\n', '        user.amount = user.amount.add(_amount);\n', '\n', '        user.rewardDebt = user\n', '            .amount\n', '            .mul(pool.LpTokenInfos[index].lpAccPerShare)\n', '            .div(LpRewardFixDec);\n', '\n', '        emit Deposit(msg.sender, _pid, address(_lpToken), _amount);\n', '    }\n', '\n', '    function withdraw(\n', '        uint256 _pid,\n', '        IERC20 _lpToken,\n', '        uint256 _amount\n', '    ) public poolExists(_pid) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 index = _getLpIndexInPool(_pid, _lpToken);\n', '        require(index < poolInfo[_pid].LpTokenInfos.length, "not valid index");\n', '        uint256 blockHeightDiff = block.number.sub(pool.lastRewardBlock);\n', '\n', '        updatePool(_pid);\n', '\n', '        UserInfo storage user =\n', '            poolInfo[_pid].LpTokenInfos[index].userInfo[msg.sender];\n', '        require(user.amount >= _amount, "withdraw: _amount not good");\n', '\n', '        uint256 pending =\n', '            user\n', '                .amount\n', '                .mul(pool.LpTokenInfos[index].lpAccPerShare)\n', '                .div(LpRewardFixDec)\n', '                .sub(user.rewardDebt);\n', '\n', '        if (pending > 0) {\n', '            //create the stream or add funds to stream\n', '            (bool hasVotingStream, bool hasNormalStream) =\n', '                stream.hasStream(msg.sender);\n', '\n', '            /* Approve the Stream contract to spend. */\n', '            xdex.approve(address(stream), pending);\n', '\n', '            if (_pid == votingPoolId) {\n', '                if (hasVotingStream) {\n', '                    //add fund\n', '                    uint256 streamId =\n', '                        stream.getStreamId(msg.sender, StreamTypeVoting);\n', '                    require(streamId > 0, "not valid stream id");\n', '\n', '                    xdex.approve(address(stream), pending);\n', '                    stream.fundsToStream(streamId, pending, blockHeightDiff);\n', '                }\n', '            } else {\n', '                if (hasNormalStream) {\n', '                    //add fund\n', '                    uint256 streamId =\n', '                        stream.getStreamId(msg.sender, StreamTypeNormal);\n', '                    require(streamId > 0, "not valid stream id");\n', '\n', '                    xdex.approve(address(stream), pending);\n', '                    stream.fundsToStream(streamId, pending, blockHeightDiff);\n', '                }\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.LpTokenInfos[index].lpToken.safeTransfer(\n', '                address(msg.sender),\n', '                _amount\n', '            );\n', '        }\n', '        user.rewardDebt = user\n', '            .amount\n', '            .mul(pool.LpTokenInfos[index].lpAccPerShare)\n', '            .div(LpRewardFixDec);\n', '\n', '        emit Withdraw(msg.sender, _pid, address(_lpToken), _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid)\n', '        external\n', '        nonReentrant\n', '        poolExists(_pid)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\n', '            LpTokenInfo storage lpInfo = pool.LpTokenInfos[i];\n', '            UserInfo storage user = lpInfo.userInfo[msg.sender];\n', '\n', '            if (user.amount > 0) {\n', '                lpInfo.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '\n', '                emit EmergencyWithdraw(\n', '                    msg.sender,\n', '                    _pid,\n', '                    address(lpInfo.lpToken),\n', '                    user.amount\n', '                );\n', '                user.amount = 0;\n', '                user.rewardDebt = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    // Batch collect function in pool on frontend\n', '    function batchCollectReward(uint256 _pid) external poolExists(_pid) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 length = pool.LpTokenInfos.length;\n', '\n', '        for (uint8 i = 0; i < length; i++) {\n', '            IERC20 lpToken = pool.LpTokenInfos[i].lpToken;\n', '            UserInfo storage user = pool.LpTokenInfos[i].userInfo[msg.sender];\n', '            if (user.amount > 0) {\n', '                //collect\n', '                withdraw(_pid, lpToken, 0);\n', '            }\n', '        }\n', '    }\n', '\n', '    // View function to see user lpToken amount in pool on frontend.\n', '    function getUserLpAmounts(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        poolExists(_pid)\n', '        returns (address[] memory lpTokens, uint256[] memory amounts)\n', '    {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        uint256 length = pool.LpTokenInfos.length;\n', '        lpTokens = new address[](length);\n', '        amounts = new uint256[](length);\n', '        for (uint256 i = 0; i < length; i++) {\n', '            lpTokens[i] = address(pool.LpTokenInfos[i].lpToken);\n', '            UserInfo memory user =\n', '                poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\n', '            amounts[i] = user.amount;\n', '        }\n', '    }\n', '\n', '    function getXCountToReward(uint256 _from, uint256 _to)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 _totalReward,\n', '            uint256 _stageFrom,\n', '            uint256 _stageTo\n', '        )\n', '    {\n', '        require(_from <= _to, "_from must <= _to");\n', '\n', '        uint256 stageFrom = 0;\n', '        uint256 stageTo = 0;\n', '\n', '        if (_to < startBlock) {\n', '            return (0, stageFrom, stageTo);\n', '        }\n', '\n', '        if (\n', '            _from >= startBlock.add(bonusEndBlocks[bonusEndBlocks.length - 1])\n', '        ) {\n', '            return (\n', '                _to.sub(_from).mul(tokensPerBlock[tokensPerBlock.length - 1]),\n', '                bonusEndBlocks.length + 1,\n', '                bonusEndBlocks.length + 1\n', '            );\n', '        }\n', '\n', '        uint256 total = 0;\n', '\n', '        for (uint256 i = 0; i < bonusEndBlocks.length; i++) {\n', '            uint256 actualEndBlock = startBlock.add(bonusEndBlocks[i]);\n', '            if (_from > actualEndBlock) {\n', '                stageFrom = stageFrom.add(1);\n', '            }\n', '            if (_to > actualEndBlock) {\n', '                stageTo = stageTo.add(1);\n', '            }\n', '        }\n', '\n', '        uint256 tStageFrom = stageFrom;\n', '        while (_from < _to) {\n', '            if (_from < startBlock) {\n', '                _from = startBlock;\n', '            }\n', '            uint256 indexDiff = stageTo.sub(tStageFrom);\n', '            if (indexDiff == 0) {\n', '                total += (_to - _from) * tokensPerBlock[tStageFrom];\n', '                _from = _to;\n', '                break;\n', '            } else if (indexDiff > 0) {\n', '                uint256 actualRes = startBlock.add(bonusEndBlocks[tStageFrom]);\n', '                total += (actualRes - _from) * tokensPerBlock[tStageFrom];\n', '                _from = actualRes;\n', '                tStageFrom = tStageFrom.add(1);\n', '            } else {\n', '                //this never happen\n', '                break;\n', '            }\n', '        }\n', '\n', '        return (total, stageFrom, stageTo);\n', '    }\n', '\n', '    function getCurRewardPerBlock() external view returns (uint256) {\n', '        uint256 bnum = block.number;\n', '        if (bnum < startBlock) {\n', '            return 0;\n', '        }\n', '        if (bnum >= startBlock.add(bonusEndBlocks[bonusEndBlocks.length - 1])) {\n', '            return tokensPerBlock[tokensPerBlock.length - 1];\n', '        }\n', '        uint256 stage = 0;\n', '        for (uint256 i = 0; i < bonusEndBlocks.length; i++) {\n', '            uint256 actualEndBlock = startBlock.add(bonusEndBlocks[i]);\n', '            if (bnum >= actualEndBlock) {\n', '                stage = stage.add(1);\n', '            }\n', '        }\n', '\n', '        require(\n', '            stage >= 0 && stage < tokensPerBlock.length,\n', '            "tokensPerBlock length not good"\n', '        );\n', '        return tokensPerBlock[stage];\n', '    }\n', '\n', '    // Any airdrop tokens (in whitelist) sent to this contract, should transfer to safu\n', '    function claimRewards(address token, uint256 amount) external onlyCore {\n', '        require(claimableTokens[token], "not claimable token");\n', '\n', '        IERC20(token).safeTransfer(safu, amount);\n', '        emit Claim(core, token, amount);\n', '    }\n', '\n', '    function updateClaimableTokens(address token, bool claimable)\n', '        external\n', '        onlyCore\n', '    {\n', '        claimableTokens[token] = claimable;\n', '    }\n', '\n', '    // The index in storage starts with 1, then need sub(1)\n', '    function _getLpIndexInPool(uint256 _pid, IERC20 _lpToken)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 index =\n', '            lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))];\n', '        require(index > 0, "deposit the lp token which not exist");\n', '        return --index;\n', '    }\n', '}']