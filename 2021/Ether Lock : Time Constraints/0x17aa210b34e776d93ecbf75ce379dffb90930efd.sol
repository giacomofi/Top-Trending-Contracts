['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ITroveManager {\n', '    function redeemCollateral(\n', '        uint _LUSDAmount,\n', '        address _firstRedemptionHint,\n', '        address _upperPartialRedemptionHint,\n', '        address _lowerPartialRedemptionHint,\n', '        uint _partialRedemptionHintNICR,\n', '        uint _maxIterations,\n', '        uint _maxFee\n', '    ) external; \n', '}\n', '\n', 'interface Curve {\n', '    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n', '    function get_dy_underlying(int128 i, int128 j, uint256 dx) view external returns (uint256);\n', '}\n', '\n', 'interface IStabilityPool {\n', '\n', '    // --- Events ---\n', '    \n', '    event StabilityPoolETHBalanceUpdated(uint _newBalance);\n', '    event StabilityPoolLUSDBalanceUpdated(uint _newBalance);\n', '\n', '    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n', '    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n', '    event ActivePoolAddressChanged(address _newActivePoolAddress);\n', '    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\n', '    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\n', '    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\n', '    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n', '    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\n', '\n', '    event P_Updated(uint _P);\n', '    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\n', '    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\n', '    event EpochUpdated(uint128 _currentEpoch);\n', '    event ScaleUpdated(uint128 _currentScale);\n', '\n', '    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\n', '    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\n', '\n', '    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\n', '    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\n', '    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\n', '    event FrontEndStakeChanged(address indexed _frontEnd, uint _newFrontEndStake, address _depositor);\n', '\n', '    event ETHGainWithdrawn(address indexed _depositor, uint _ETH, uint _LUSDLoss);\n', '    event LQTYPaidToDepositor(address indexed _depositor, uint _LQTY);\n', '    event LQTYPaidToFrontEnd(address indexed _frontEnd, uint _LQTY);\n', '    event EtherSent(address _to, uint _amount);\n', '\n', '    // --- Functions ---\n', '\n', '    /*\n', '     * Called only once on init, to set addresses of other Liquity contracts\n', '     * Callable only by owner, renounces ownership at the end\n', '     */\n', '    function setAddresses(\n', '        address _borrowerOperationsAddress,\n', '        address _troveManagerAddress,\n', '        address _activePoolAddress,\n', '        address _lusdTokenAddress,\n', '        address _sortedTrovesAddress,\n', '        address _priceFeedAddress,\n', '        address _communityIssuanceAddress\n', '    ) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Frontend is registered or zero address\n', '     * - Sender is not a registered frontend\n', '     * - _amount is not zero\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Tags the deposit with the provided front end tag param, if it's a new deposit\n", "     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\n", "     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\n", "     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\n", '     */\n', '    function provideToSP(uint _amount, address _frontEndTag) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - _amount is zero or there are no under collateralized troves left in the system\n', '     * - User has a non zero deposit\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Removes the deposit's front end tag if it is a full withdrawal\n", "     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\n", "     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\n", "     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\n", '     *\n', '     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\n', '     */\n', '    function withdrawFromSP(uint _amount) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - User has a non zero deposit\n', '     * - User has an open trove\n', '     * - User has some ETH gain\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Sends all depositor's LQTY gain to  depositor\n", "     * - Sends all tagged front end's LQTY gain to the tagged front end\n", "     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\n", '     * - Leaves their compounded deposit in the Stability Pool\n', '     * - Updates snapshots for deposit and tagged front end stake\n', '     */\n', '    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Frontend (sender) not already registered\n', '     * - User (sender) has no deposit\n', '     * - _kickbackRate is in the range [0, 100%]\n', '     * ---\n', '     * Front end makes a one-time selection of kickback rate upon registering\n', '     */\n', '    function registerFrontEnd(uint _kickbackRate) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Caller is TroveManager\n', '     * ---\n', '     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\n', "     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\n", '     * Only called by liquidation functions in the TroveManager.\n', '     */\n', '    function offset(uint _debt, uint _coll) external;\n', '\n', '    /*\n', '     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\n', '     * to exclude edge cases like ETH received from a self-destruct.\n', '     */\n', '    function getETH() external view returns (uint);\n', '\n', '    /*\n', '     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\n', '     */\n', '    function getTotalLUSDDeposits() external view returns (uint);\n', '\n', '    /*\n', '     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\n', '     */\n', '    function getDepositorETHGain(address _depositor) external view returns (uint);\n', '\n', '    /*\n', '     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\n', '     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\n', "     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\n", '     * which they made their deposit.\n', '     */\n', '    function getDepositorLQTYGain(address _depositor) external view returns (uint);\n', '\n', '    /*\n', '     * Return the LQTY gain earned by the front end.\n', '     */\n', '    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint);\n', '\n', '    /*\n', "     * Return the user's compounded deposit.\n", '     */\n', '    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint);\n', '\n', '    /*\n', "     * Return the front end's compounded stake.\n", '     *\n', "     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\n", '     */\n', '    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\n', '\n', '    /*\n', '     * Fallback function\n', '     * Only callable by Active Pool, it just accounts for ETH received\n', '     * receive() external payable;\n', '     */\n', '}\n', '\n', 'contract Redeem {\n', '    address public lusd_trove_mgr = address(0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2);\n', '    address public lusd_curve_pool = address(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\n', '    address public lusd_token = address(0x5f98805A4E8be255a32880FDeC7F6728C6568bA0);\n', '    address public usdc_token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    address public stability_pool = address(0x66017D22b0f8556afDd19FC67041899Eb65a21bb);\n', '\n', '    function fund() public payable returns(bool success) {\n', '        return true;\n', '    }\n', '\n', '    function _exchange_underlying(uint256 dx, uint256 dy) internal {\n', '        IERC20(usdc_token).transferFrom(msg.sender, address(this), dx);\n', '        require(IERC20(usdc_token).balanceOf(address(this)) == dx);\n', '        Curve(lusd_curve_pool).exchange_underlying(2, 0 , dx,  dy, msg.sender);\n', '    }\n', '\n', '\n', '    function redeem_all_lusd(\n', '        uint256 dx, uint256 dy,\n', '        address _firstRedemptionHint,\n', '        address _upperPartialRedemptionHint,\n', '        address _lowerPartialRedemptionHint,\n', '        uint _partialRedemptionHintNICR,\n', '        uint _maxIterations,\n', '        uint _maxFee\n', '        ) external payable {\n', '        _exchange_underlying(dx, dy);\n', '        uint lusd_balance = IERC20(lusd_token).balanceOf(msg.sender);\n', '        IERC20(lusd_token).transferFrom(msg.sender, address(this), lusd_balance);\n', '        ITroveManager(lusd_trove_mgr).redeemCollateral(\n', '            lusd_balance,\n', '            _firstRedemptionHint,\n', '            _upperPartialRedemptionHint,\n', '            _lowerPartialRedemptionHint,\n', '            _partialRedemptionHintNICR,\n', '            _maxFee,\n', '            _maxFee\n', '        );\n', '\n', '        msg.sender.transfer(address(this).balance);\n', '\n', '    }\n', '}']