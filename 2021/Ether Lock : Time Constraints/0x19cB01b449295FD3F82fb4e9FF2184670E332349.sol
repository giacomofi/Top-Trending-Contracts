['pragma solidity >=0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/// @title Multicall - Aggregate results from multiple read-only function calls\n', '///        this is a fork of the original that supports reverts\n', '/// @author Trevor Aron <[email\xa0protected]>\n', '/// @author Michael Elliot <[email\xa0protected]>\n', '/// @author Joshua Levine <[email\xa0protected]>\n', '/// @author Nick Johnson <[email\xa0protected]>\n', '\n', 'contract Multicall {\n', '    struct Call {\n', '        address target;\n', '        bytes callData;\n', '    }\n', '\n', '    function aggregate(Call[] memory calls, uint256 gasLimit)\n', '        external\n', '        view\n', '        returns (uint256 blockNumber, bytes[] memory returnData)\n', '    {\n', '        blockNumber = block.number;\n', '        returnData = new bytes[](calls.length);\n', '        for (uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory ret) =\n', '                calls[i].target.staticcall{ gas: gasLimit }(calls[i].callData);\n', '            if (success) {\n', '                returnData[i] = ret;\n', '            }\n', '        }\n', '    }\n', '\n', '    // Helper functions\n', '    function getEthBalance(address addr)\n', '        external\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        balance = addr.balance;\n', '    }\n', '\n', '    function getBlockHash(uint256 blockNumber)\n', '        external\n', '        view\n', '        returns (bytes32 blockHash)\n', '    {\n', '        blockHash = blockhash(blockNumber);\n', '    }\n', '\n', '    function getLastBlockHash() external view returns (bytes32 blockHash) {\n', '        blockHash = blockhash(block.number - 1);\n', '    }\n', '\n', '    function getCurrentBlockTimestamp()\n', '        external\n', '        view\n', '        returns (uint256 timestamp)\n', '    {\n', '        timestamp = block.timestamp;\n', '    }\n', '\n', '    function getCurrentBlockDifficulty()\n', '        external\n', '        view\n', '        returns (uint256 difficulty)\n', '    {\n', '        difficulty = block.difficulty;\n', '    }\n', '\n', '    function getCurrentBlockGasLimit()\n', '        external\n', '        view\n', '        returns (uint256 gaslimit)\n', '    {\n', '        gaslimit = block.gaslimit;\n', '    }\n', '\n', '    function getCurrentBlockCoinbase()\n', '        external\n', '        view\n', '        returns (address coinbase)\n', '    {\n', '        coinbase = block.coinbase;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']