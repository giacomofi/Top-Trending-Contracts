['// SPDX-License-Identifier: UNLICENCED\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'pragma abicoder v2;\n', '\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./InlineInterface.sol";\n', '\n', '\n', 'contract InlineMain is Ownable{\n', '    \n', '  using SafeMath for uint256;\n', '    address[] tempArray;\n', '    \n', '    address public databaseContractAddress=0x790E5E60a5B751A30d9210a2B9CE01De17D039A8;\n', '    \n', '    InlineDatabaseLib.IndexCoin[] tempObjectArray;\n', '    \n', '    function stakeTokens(uint256 amount) external{\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        Token tokenObj = Token(dContract.getXIVTokenContractAddress());\n', '        require(amount>=dContract.getMinLPvalue(),"Please enter more amount.");\n', '        //check if user has balance\n', '        require(tokenObj.balanceOf(msg.sender) >= amount, "You don\'t have enough XIV balance");\n', '        //check if user has provided allowance\n', '        require(tokenObj.allowance(msg.sender,databaseContractAddress) >= amount, \n', '        "Please allow smart contract to spend on your behalf");\n', '        dContract.transferFromTokens(dContract.getXIVTokenContractAddress(),msg.sender,databaseContractAddress,amount);\n', '        \n', '        uint256 currentTimeStamp=block.timestamp;\n', '        InlineDatabaseLib.StakingInfo memory sInfo= InlineDatabaseLib.StakingInfo({\n', '            investmentId:dContract.getInvestmentId(),\n', '            stakeAmount:amount\n', '        });\n', '        dContract.updateStakingInfoMapping(msg.sender,sInfo);\n', '        dContract.updateInvestmentId(dContract.getInvestmentId().add(1));\n', '        if(!dContract.getIsStakeMapping(msg.sender)){\n', '            dContract.updateUserStakedAddress(msg.sender);\n', '            dContract.updateIsStakeMapping(msg.sender,true);\n', '        }\n', '        dContract.updateTokensStaked(msg.sender,dContract.getTokensStaked(msg.sender).add(amount));\n', '        dContract.updateActualAmountStakedByUser(msg.sender,dContract.getActualAmountStakedByUser(msg.sender).add(amount));\n', '        dContract.updateTokenStakedAmount(dContract.getTokenStakedAmount().add(amount));\n', '        dContract.updateTotalTransactions(dContract.getTotalTransactions().add(amount));\n', '        if(dContract.getLockingPeriodForLPMapping(msg.sender).lockedTimeStamp>currentTimeStamp){\n', '            dContract.updateLockingPeriodForLPMapping(msg.sender,(dContract.getLockingPeriodForLPMapping(msg.sender).amountLocked).add(amount),\n', '                                                        dContract.getLockingPeriodForLPMapping(msg.sender).lockedTimeStamp);\n', '        }else{\n', '            dContract.updateLockingPeriodForLPMapping(msg.sender,amount,currentTimeStamp.add(30 days));\n', '        }\n', '        dContract.emitLPEvent(0,msg.sender,amount,currentTimeStamp);\n', '    }\n', '     function unStakeTokens(uint256 amount) external{\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 currentTimeStamp=block.timestamp;\n', '        if(dContract.getLockingPeriodForLPMapping(msg.sender).lockedTimeStamp>currentTimeStamp){\n', '            require(dContract.getTokensStaked(msg.sender).sub(dContract.getLockingPeriodForLPMapping(msg.sender).amountLocked) >= amount, "You can not retrive LP token with this amount");\n', '        }else{\n', '            require(dContract.getTokensStaked(msg.sender)>=amount, "You can not retrive LP token with this amount");\n', '        }\n', '        dContract.transferTokens(dContract.getXIVTokenContractAddress(),msg.sender,amount);\n', '        dContract.updateTokensStaked(msg.sender,dContract.getTokensStaked(msg.sender).sub(amount));\n', '        if(amount>dContract.getActualAmountStakedByUser(msg.sender)){\n', '            dContract.updateActualAmountStakedByUser(msg.sender,0);\n', '        }else{\n', '            dContract.updateActualAmountStakedByUser(msg.sender,dContract.getActualAmountStakedByUser(msg.sender).sub(amount));\n', '        }\n', '        dContract.updateTokenStakedAmount(dContract.getTokenStakedAmount().sub(amount));\n', '        dContract.emitLPEvent(1,msg.sender,amount,currentTimeStamp);\n', '    }\n', '    \n', '    function updateDatabaseAddress(address _databaseContractAddress) external onlyOwner{\n', '        databaseContractAddress=_databaseContractAddress;\n', '    }\n', '    \n', '}']