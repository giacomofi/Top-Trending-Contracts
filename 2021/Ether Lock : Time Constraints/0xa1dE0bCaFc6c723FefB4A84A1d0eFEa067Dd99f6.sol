['// SPDX-License-Identifier: UNLICENSED\n', '// ALL RIGHTS RESERVED\n', '\n', '// Forked from Uniswap Ethereum mainnet for Sushiswap on Ethereum Mainnet\n', '\n', '// This contract generates Presale01 contracts and registers them in the PresaleFactory.\n', '// Ideally you should not interact with this contract directly, and use the Unicrypt presale app instead so warnings can be shown where necessary.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./Presale01.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./IERC20.sol";\n', 'import "./TransferHelper.sol";\n', 'import "./PresaleHelper.sol";\n', '\n', 'interface IPresaleFactory {\n', '    function registerPresale (address _presaleAddress) external;\n', '    function presaleIsRegistered(address _presaleAddress) external view returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Locker {\n', '    function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable;\n', '}\n', '\n', 'contract PresaleGenerator01 is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    IPresaleFactory public PRESALE_FACTORY;\n', '    IPresaleSettings public PRESALE_SETTINGS;\n', '    \n', '    struct PresaleParams {\n', '        uint256 amount;\n', '        uint256 tokenPrice;\n', '        uint256 maxSpendPerBuyer;\n', '        uint256 hardcap;\n', '        uint256 softcap;\n', '        uint256 liquidityPercent;\n', '        uint256 listingRate; // sale token listing price on uniswap\n', '        uint256 startblock;\n', '        uint256 endblock;\n', '        uint256 lockPeriod;\n', '    }\n', '    \n', '    constructor() public {\n', '        PRESALE_FACTORY = IPresaleFactory(0xcEE32dA23A4Ea61F6217B19d84fe63E077AF5990);\n', '        PRESALE_SETTINGS = IPresaleSettings(0x2A8977E2A829BE0dD8c94fC7886b15937a376C41);\n', '    }\n', '    \n', '    /**\n', '     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\n', '     */\n', '    function createPresale (\n', '      address payable _presaleOwner,\n', '      IERC20 _presaleToken,\n', '      IERC20 _baseToken,\n', '      address payable _referralAddress,\n', '      uint256[10] memory uint_params\n', '      ) public payable {\n', '        \n', '        PresaleParams memory params;\n', '        params.amount = uint_params[0];\n', '        params.tokenPrice = uint_params[1];\n', '        params.maxSpendPerBuyer = uint_params[2];\n', '        params.hardcap = uint_params[3];\n', '        params.softcap = uint_params[4];\n', '        params.liquidityPercent = uint_params[5];\n', '        params.listingRate = uint_params[6];\n', '        params.startblock = uint_params[7];\n', '        params.endblock = uint_params[8];\n', '        params.lockPeriod = uint_params[9];\n', '        \n', '        if (params.lockPeriod < 4 weeks) {\n', '            params.lockPeriod = 4 weeks;\n', '        }\n', '        \n', '        // Charge ETH fee for contract creation\n', "        require(msg.value == PRESALE_SETTINGS.getEthCreationFee(), 'FEE NOT MET');\n", '        PRESALE_SETTINGS.getEthAddress().transfer(PRESALE_SETTINGS.getEthCreationFee());\n', '        \n', '        if (_referralAddress != address(0)) {\n', "            require(PRESALE_SETTINGS.referrerIsValid(_referralAddress), 'INVALID REFERRAL');\n", '        }\n', '        \n', "        require(params.amount >= 10000, 'MIN DIVIS'); // minimum divisibility\n", '        require(params.endblock.sub(params.startblock) <= PRESALE_SETTINGS.getMaxPresaleLength());\n', "        require(params.tokenPrice.mul(params.hardcap) > 0, 'INVALID PARAMS'); // ensure no overflow for future calculations\n", "        require(params.liquidityPercent >= 300 && params.liquidityPercent <= 1000, 'MIN LIQUIDITY'); // 30% minimum liquidity lock\n", '        \n', '        uint256 tokensRequiredForPresale = PresaleHelper.calculateAmountRequired(params.amount, params.tokenPrice, params.listingRate, params.liquidityPercent, PRESALE_SETTINGS.getTokenFee());\n', '      \n', '        Presale01 newPresale = new Presale01(address(this));\n', '        TransferHelper.safeTransferFrom(address(_presaleToken), address(msg.sender), address(newPresale), tokensRequiredForPresale);\n', '        newPresale.init1(_presaleOwner, params.amount, params.tokenPrice, params.maxSpendPerBuyer, params.hardcap, params.softcap, \n', '        params.liquidityPercent, params.listingRate, params.startblock, params.endblock, params.lockPeriod);\n', '        newPresale.init2(_baseToken, _presaleToken, PRESALE_SETTINGS.getBaseFee(), PRESALE_SETTINGS.getTokenFee(), PRESALE_SETTINGS.getReferralFee(), PRESALE_SETTINGS.getEthAddress(), PRESALE_SETTINGS.getTokenAddress(), _referralAddress);\n', '        PRESALE_FACTORY.registerPresale(address(newPresale));\n', '    }\n', '    \n', '}']