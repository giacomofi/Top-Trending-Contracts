['//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.5;\n', '\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./IAntiBotBlacklist.sol";\n', '\n', 'contract AntiBotBlacklist is Ownable, IAntiBotBlacklist {\n', '   \n', '      \n', '    using SafeMath for uint256;\n', '    uint256 public blacklistLength;\n', '     /**\n', '     * @dev mapping store blacklist. address=>ExpirationTime \n', '     */\n', '    mapping(address=>uint256) blacklist;\n', '    \n', '    /**\n', '     * @dev check if the address is in the blacklist or not or expired\n', '     */\n', '    function blacklistCheck(address suspect) external override view returns(bool){\n', '        return blacklist[suspect] < block.timestamp;\n', '    }\n', '    /**\n', '     * @dev check if the address is in the blacklist or not\n', '     */\n', '    function blacklistCheckExpirationTime(address suspect) external override view returns(uint256){\n', '        return blacklist[suspect];\n', '    }\n', '    /**\n', '     * @dev Add an address to the blacklist. Only the owner can add. Owner is the address of the Governance contract.\n', '     */\n', '    function addSuspect(address _suspect,uint256 _expirationTime) external override onlyOwner {\n', '        _addSuspectToBlackList(_suspect,_expirationTime);\n', '    }\n', '    /**\n', '     * @dev Remove an address from the blacklist. Only the owner can remove. Owner is the address of the Governance contract.\n', '     */\n', '    function removeSuspect(address suspect) external override onlyOwner{\n', '        _removeSuspectToBlackList(suspect);\n', '    }\n', '    /**\n', '     * @dev Add multi address to the blacklist. Only the owner can add. Owner is the address of the Governance contract.\n', '     */\n', '    function dddSuspectBatch(address[] memory _addresses,uint256 _expirationTime) external override onlyOwner{\n', '        require(_addresses.length>0,"addresses is empty");\n', '        for(uint i=0;i<_addresses.length;i++){\n', '            _addSuspectToBlackList(_addresses[i],_expirationTime);\n', '        }\n', '    }\n', '    /**\n', '     * @dev Remove multi address from the blacklist. Only the owner can remove. Owner is the address of the Governance contract.\n', '     */\n', '    function removeSuspectBatch(address[] memory _addresses) external override onlyOwner{\n', '        require(_addresses.length>0,"addresses is empty");\n', '        for(uint i=0;i<_addresses.length;i++){\n', '            _removeSuspectToBlackList(_addresses[i]);\n', '        }\n', '    }\n', '    /**\n', '     * @dev internal function to add address to blacklist.\n', '     */\n', '    function _addSuspectToBlackList(address _suspect,uint256 _expirationTime) internal{\n', '        require(_suspect != owner(),"the suspect cannot be owner");\n', '        require(blacklist[_suspect]==0,"the suspect already exist");\n', '        blacklist[_suspect] = _expirationTime;\n', '        blacklistLength = blacklistLength.add(1);\n', '        emit AddSuspect(_suspect);\n', '    }\n', '    /**\n', '     * @dev internal function to remove address from blacklist.\n', '     */\n', '    function _removeSuspectToBlackList(address _suspect) internal{\n', '        require(blacklist[_suspect]>0,"suspect is not in blacklist");\n', '        delete blacklist[_suspect];\n', '        blacklistLength = blacklistLength.sub(1);\n', '        emit RemoveSuspect(_suspect);\n', '    }\n', '}']