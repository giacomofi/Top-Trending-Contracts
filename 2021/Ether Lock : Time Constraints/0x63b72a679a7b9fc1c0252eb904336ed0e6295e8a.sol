['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-20\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.4;\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract CORXLPFarm {\n', '    address public owner;\n', '    IERC20 public TKN;\n', '\n', '    struct Stake {\n', '        uint256 amount;\n', '        uint256 debt;\n', '        uint32 started;\n', '    }\n', '\n', '    struct Program {\n', '        IERC20 LPTKN; // LP Token address\n', '        uint256 M; // Multiplier. Default is 10 == 100% APY\n', '        uint256 B; // LP Token wei amount per 1.00 CORX token in that LP\n', '        uint32 start; // program starts since\n', '        uint32 finish; // program finishes at\n', '    }\n', '    uint256 public constant k = 3171; // 10% (base APY unit) APY == x0.000,274 per day = x0.000,000,003,171 per second\n', '\n', '    Program[] public programs;\n', '    mapping(uint256 => mapping(address => Stake)) public stakeOf;\n', '\n', '    event Deposit(address indexed sender, uint256 indexed pid, uint256 amount, uint256 debt);\n', '    event Withdraw(address indexed sender, uint256 indexed pid, uint256 amount, uint256 debt);\n', '    event Harvest(address indexed sender, uint256 indexed pid, uint256 amount);\n', '\n', '    modifier restricted {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function addProgram(IERC20 _LPTKN, uint256 _multiplier, uint256 _baseratio, uint32 _start, uint32 _finish) public restricted {\n', '        programs.push(Program({LPTKN: _LPTKN, M: _multiplier, B: _baseratio, start: _start, finish: _finish}));\n', '    }\n', '\n', '    function getPending(uint256 _pid, address _user, uint32 _to) public view returns (uint256) {\n', '        Program storage _p = programs[_pid];\n', '        Stake storage _s = stakeOf[_pid][_user];\n', '        if (_to > _p.finish) _to = _p.finish;\n', '        return _s.debt + ((_p.M * k * (_to - _s.started) * _s.amount * 2) / (_p.B * 1e4));\n', '    }\n', '\n', '    function getPending(uint256 _pid, address _user) public view returns (uint256) {\n', '        return getPending(_pid, _user, uint32(block.timestamp));\n', '    }\n', '\n', '    function getPending(uint256 _pid) public view returns (uint256) {\n', '        return getPending(_pid, msg.sender);\n', '    }\n', '\n', '    function pLength() public view returns (uint256) {\n', '        return programs.length;\n', '    }\n', '\n', '    function stake(uint256 _pid, uint256 _amount) public {\n', '        Program storage _p = programs[_pid];\n', '        Stake storage _s = stakeOf[_pid][msg.sender];\n', '        require(_s.amount == 0 && _amount > 0 && block.timestamp >=_p.start  && block.timestamp < _p.finish);\n', '        require(_p.LPTKN.transferFrom(msg.sender, address(this), _amount));\n', '        _s.amount = _amount;\n', '        _s.started = uint32(block.timestamp);\n', '        emit Deposit(msg.sender, _pid, _amount, 0);\n', '    }\n', '\n', '    function unstake(uint256 _pid) public {\n', '        Stake storage _s = stakeOf[_pid][msg.sender];\n', '        require(_s.amount > 0);\n', '        programs[_pid].LPTKN.transfer(msg.sender, _s.amount);\n', '        uint256 _toSend = getPending(_pid);\n', '        if (_toSend > 0) {\n', '            TKN.transfer(msg.sender, _toSend);\n', '            emit Harvest(msg.sender, _pid, _toSend);\n', '        }\n', '        emit Withdraw(msg.sender, _pid, _s.amount, 0);\n', '        delete stakeOf[_pid][msg.sender];\n', '    }\n', '\n', '    function increase(uint256 _pid, uint256 _amount) public {\n', '        Program storage _p = programs[_pid];\n', '        Stake storage _s = stakeOf[_pid][msg.sender];\n', '        require(_s.amount > 0 && _amount > 0 && block.timestamp < _p.finish);\n', '        require(_p.LPTKN.transferFrom(msg.sender, address(this), _amount));\n', '        _s.debt = getPending(_pid);\n', '        _s.amount += _amount;\n', '        _s.started = uint32(block.timestamp);\n', '        emit Deposit(msg.sender, _pid, _amount, _s.debt);\n', '    }\n', '\n', '    function decrease(uint256 _pid, uint256 _amount) public {\n', '        Program storage _p = programs[_pid];\n', '        Stake storage _s = stakeOf[_pid][msg.sender];\n', '        require(_s.amount > _amount && _amount > 0 && block.timestamp < _p.finish);\n', '        _p.LPTKN.transfer(msg.sender, _amount);\n', '        _s.debt = getPending(_pid);\n', '        _s.amount -= _amount;\n', '        _s.started = uint32(block.timestamp);\n', '        emit Withdraw(msg.sender, _pid, _amount, _s.debt);\n', '    }\n', '\n', '    function harvest(uint256 _pid) public {\n', '        Stake storage _s = stakeOf[_pid][msg.sender];\n', '        uint256 _toSend = getPending(_pid);\n', '        require(_toSend > 0);\n', '        TKN.transfer(msg.sender, _toSend);\n', '        _s.debt = 0;\n', '        uint32 _f = programs[_pid].finish;\n', '        _s.started = uint32(block.timestamp < _f ? block.timestamp : _f);\n', '        emit Harvest(msg.sender, _pid, _toSend);\n', '    }\n', '\n', '    function harvestAll() public {\n', '        for (uint256 i = 0; i < pLength(); i++) if (getPending(i) > 0) harvest(i);\n', '    }\n', '\n', '    function infoBundle(address _user) public view returns (Program[] memory pp, Stake[] memory ss, uint256[] memory all, uint256[] memory bal) {\n', '        pp = programs;\n', '        uint256 _l = pp.length;\n', '        ss = new Stake[](_l);\n', '        all = new uint256[](_l);\n', '        bal = new uint256[](_l);\n', '        for (uint256 i = 0; i < _l; i++) {\n', '            ss[i] = stakeOf[i][_user];\n', '            all[i] = pp[i].LPTKN.allowance(_user, address(this));\n', '            bal[i] = pp[i].LPTKN.balanceOf(_user);\n', '        }\n', '    }\n', '\n', '    function take(IERC20 _TKN, uint256 _amount) public restricted {\n', '        _TKN.transfer(msg.sender, _amount > 0 ? _amount : _TKN.balanceOf(address(this)));\n', '    }\n', '\n', '    function transferOwnership(address _owner) public restricted {\n', '        owner = _owner;\n', '    }\n', '\n', '    constructor(IERC20 _TKN) {\n', '        owner = msg.sender;\n', '        TKN = _TKN;\n', '    }\n', '}']