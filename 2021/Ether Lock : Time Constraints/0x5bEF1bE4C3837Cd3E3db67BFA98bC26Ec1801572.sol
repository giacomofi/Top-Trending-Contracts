['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/// @title Multicall - Aggregate results from multiple read-only function calls\n', '/// @author Michael Elliot <[email\xa0protected]>\n', '/// @author Joshua Levine <[email\xa0protected]>\n', '/// @author Nick Johnson <[email\xa0protected]>\n', '\n', 'contract Multicall {\n', '    struct Call {\n', '        address target;\n', '        bytes callData;\n', '    }\n', '    struct PayableCall {\n', '        address target;\n', '        bytes callData;\n', '        uint256 value;\n', '    }\n', '\n', '    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n', '        blockNumber = block.number;\n', '        returnData = new bytes[](calls.length);\n', '        for(uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n', '            require(success);\n', '            returnData[i] = ret;\n', '        }\n', '    }\n', '\n', '    function aggregatePayable(PayableCall[] memory calls) payable public returns (uint256 blockNumber, bytes[] memory returnData) {\n', '        uint256 valueLeft = msg.value;\n', '        blockNumber = block.number;\n', '        returnData = new bytes[](calls.length);\n', '        for(uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory ret) = calls[i].target.call{ value: calls[i].value }(calls[i].callData);\n', '            require(success);\n', '            returnData[i] = ret;\n', '            valueLeft -= calls[i].value;\n', '        }\n', '        msg.sender.transfer(valueLeft);\n', '    }\n', '\n', '    // Helper functions\n', '    function getEthBalance(address addr) public view returns (uint256 balance) {\n', '        balance = addr.balance;\n', '    }\n', '    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n', '        blockHash = blockhash(blockNumber);\n', '    }\n', '    function getLastBlockHash() public view returns (bytes32 blockHash) {\n', '        blockHash = blockhash(block.number - 1);\n', '    }\n', '    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n', '        timestamp = block.timestamp;\n', '    }\n', '    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n', '        difficulty = block.difficulty;\n', '    }\n', '    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n', '        gaslimit = block.gaslimit;\n', '    }\n', '    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n', '        coinbase = block.coinbase;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']