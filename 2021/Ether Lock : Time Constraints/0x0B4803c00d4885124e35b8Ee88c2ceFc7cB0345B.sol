['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IStaking.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IStaking {\n', '    function incomeRateChanged() external;\n', '    function rewardRateChanged() external;\n', '    function hashRateToken() external view returns(address);\n', '    function totalSupply() external view returns(uint256);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IMineParam.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IMineParam {\n', '    function minePrice() external view returns (uint256);\n', '    function getMinePrice() external view returns (uint256);\n', '    function mineIncomePerTPerSecInWei() external view returns(uint256);\n', '    function incomePerTPerSecInWei() external view returns(uint256);\n', '    function setIncomePerTPerSecInWeiAndUpdateMinePrice(uint256 _incomePerTPerSecInWei) external;\n', '    function updateMinePrice() external;\n', '    function paramSetter() external view returns(address);\n', '    function addListener(address _listener) external;\n', '    function removeListener(address _listener) external returns(bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/ILpStaking.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface ILpStaking {\n', '    function stakingLpToken() external view returns (address);\n', '    function totalSupply() external view returns(uint256);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/ITokenTreasury.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface ITokenTreasury {\n', '    function claim(address _token, uint _amount) external;\n', '}\n', '\n', '// Dependency file: contracts/modules/Pausable.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'contract Pausable {\n', '\n', '    event Paused();\n', '\n', '    event Unpaused();\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function _pause() internal {\n', '        _paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function _unpause() internal {\n', '        _paused = false;\n', '        emit Unpaused();\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/modules/POWERC20.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', "// import 'contracts/modules/Pausable.sol';\n", '\n', 'contract POWERC20 is Pausable{\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public constant decimals = 18;\n', '    uint  public totalSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public nonces;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function initializeToken(string memory tokenName, string memory tokenSymbol) internal {\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external whenNotPaused returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) whenNotPaused external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', "        require(deadline >= block.timestamp, 'HashRateERC20: EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'HashRateERC20: INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/modules/Ownable.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'Ownable: FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0), "new owner is the zero address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '// Dependency file: contracts/modules/Paramable.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', "// import 'contracts/modules/Ownable.sol';\n", '\n', 'contract Paramable is Ownable {\n', '    address public paramSetter;\n', '\n', '    event ParamSetterChanged(address indexed previousSetter, address indexed newSetter);\n', '\n', '    constructor() public {\n', '        paramSetter = msg.sender;\n', '    }\n', '\n', '    modifier onlyParamSetter() {\n', '        require(msg.sender == owner || msg.sender == paramSetter, "!paramSetter");\n', '        _;\n', '    }\n', '\n', '    function setParamSetter(address _paramSetter) external onlyOwner {\n', '        require(_paramSetter != address(0), "param setter is the zero address");\n', '        emit ParamSetterChanged(paramSetter, _paramSetter);\n', '        paramSetter = _paramSetter;\n', '    }\n', '\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IERC20Detail.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IERC20Detail {\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/ISwapPair.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface ISwapPair {\n', '    function totalSupply() external view returns(uint256);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '}\n', '\n', '// Root file: contracts/POWToken.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', "// import '/Users/tercel/work/bmining/bmining-protocol/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\n", "// import '/Users/tercel/work/bmining/bmining-protocol/node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n", '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', "// import 'contracts/interfaces/IStaking.sol';\n", "// import 'contracts/interfaces/IMineParam.sol';\n", "// import 'contracts/interfaces/ILpStaking.sol';\n", "// import 'contracts/interfaces/ITokenTreasury.sol';\n", "// import 'contracts/modules/POWERC20.sol';\n", "// import 'contracts/modules/Paramable.sol';\n", '// import "contracts/interfaces/IERC20Detail.sol";\n', "// import 'contracts/interfaces/ISwapPair.sol';\n", '\n', 'contract POWToken is Paramable, POWERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    bool internal initialized;\n', '    address public minter;\n', '    address public stakingPool;\n', '    address public mineParam;\n', '    address public treasury;\n', '\n', '    uint256 public elecPowerPerTHSec;\n', '    uint256 public startMiningTime;\n', '\n', '    uint256 public electricCharge;\n', '    uint256 public minerPoolFeeNumerator;\n', '    uint256 public depreciationNumerator;\n', '    uint256 public workingRateNumerator;\n', '    uint256 public workingHashRate;\n', '    uint256 public totalHashRate;\n', '    uint256 public workerNumLastUpdateTime;\n', '\n', '    address public incomeToken;\n', '    uint256 public incomeRate;\n', '    address public rewardsToken;\n', '    uint256 public rewardRate;\n', '    uint256 public rewardsDuration;\n', '    uint256 public rewardPeriodFinish;\n', '  \n', '    address[] public stakings;\n', '    mapping(address => uint256) public stakingRewardWeight;\n', '    uint256 public stakingRewardWeightTotal;\n', '    mapping(address => uint256) public lpStakingIncomeWeight;\n', '    uint256 public lpStakingIncomeWeightTotal;\n', '\n', '    mapping(address => uint256) public stakingType;  // 0: unknown, 1: normal erc20 token, 2: LP token\n', '\n', '    function initialize(string memory name, string memory symbol, address _stakingPool, address _lpStakingPool, address _lpStakingPool2, address _minter, address _mineParam, address _incomeToken, address _rewardsToken, address _treasury, uint256 _elecPowerPerTHSec, uint256 _electricCharge, uint256 _minerPoolFeeNumerator, uint256 _totalHashRate) public {\n', '        require(!initialized, "Token already initialized");\n', '        require(_minerPoolFeeNumerator < 1000000, "nonlegal minerPoolFeeNumerator.");\n', '\n', '        initialized = true;\n', '        initializeToken(name, symbol);\n', '\n', '        stakingPool = _stakingPool; // POWStaking address\n', '        _setStakingPool(stakingPool, 1);\n', '        _setStakingPool(_lpStakingPool, 2);\n', '        _setStakingPool(_lpStakingPool2, 2);\n', '\n', '        minter = _minter; // TokenExchange address\n', '        mineParam = _mineParam;\n', '        incomeToken = _incomeToken;\n', '        rewardsToken = _rewardsToken;\n', '        treasury = _treasury;\n', '        elecPowerPerTHSec = _elecPowerPerTHSec;\n', '        startMiningTime =  block.timestamp;\n', '        electricCharge = _electricCharge;\n', '        minerPoolFeeNumerator = _minerPoolFeeNumerator;\n', '        totalHashRate = _totalHashRate;\n', '\n', '        rewardsDuration = 30 days;\n', '        depreciationNumerator = 1000000;\n', '        workingHashRate = _totalHashRate;\n', '        workerNumLastUpdateTime = startMiningTime;\n', '\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function isStakingPool(address _pool) public view  returns (bool) {\n', '        return stakingType[_pool] != 0;\n', '    }\n', '\n', '    function setStakingPools(address[] calldata _pools, uint256[] calldata _values) external onlyOwner {\n', "        require(_pools.length == _values.length, 'invalid parameters');\n", '        for(uint256 i; i< _pools.length; i++) {\n', '            _setStakingPool(_pools[i], _values[i]);\n', '        }\n', '        updateStakingPoolsIncome();\n', '        updateStakingPoolsReward();\n', '    }\n', '\n', '    function setStakingPool(address _pool, uint256 _value) external onlyOwner {\n', '        _setStakingPool(_pool, _value);\n', '        updateStakingPoolsIncome();\n', '        updateStakingPoolsReward();\n', '    }\n', '\n', '    function _setStakingPool(address _pool, uint256 _value) internal {\n', '        if(_pool != address(0)) {\n', '            stakingType[_pool] = _value;\n', '            if(foundStaking(_pool) == false) {\n', '                stakings.push(_pool);\n', '            } \n', '        }\n', '    }\n', '\n', '    function foundStaking(address _pool) public view returns (bool) {\n', '        for(uint256 i; i< stakings.length; i++) {\n', '            if(stakings[i] == _pool) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function countStaking() public view  returns (uint256) {\n', '        return stakings.length;\n', '    }\n', '\n', '    function setStakingRewardWeights(address[] calldata _pools, uint256[] calldata _values) external onlyParamSetter {\n', '        require(_pools.length == _values.length, "illegal parameters");\n', '        updateStakingPoolsReward();\n', '        for(uint256 i; i<_pools.length; i++) {\n', '            _setStakingRewardWeight(_pools[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    function setStakingRewardWeight(address _pool, uint256 _value) external onlyParamSetter {\n', '        updateStakingPoolsReward();\n', '        _setStakingRewardWeight(_pool, _value);\n', '    }\n', '\n', '    function _setStakingRewardWeight(address _pool, uint256 _value) internal {\n', '        require(isStakingPool(_pool), "illegal pool");\n', '        stakingRewardWeightTotal = stakingRewardWeightTotal.sub(stakingRewardWeight[_pool]).add(_value);\n', '        stakingRewardWeight[_pool] = _value;\n', '    }\n', '\n', '    function getStakingRewardRate(address _pool) public view returns(uint256) {\n', '        if(stakingRewardWeightTotal == 0) {\n', '            return 0;\n', '        }\n', '        return rewardRate.mul(stakingRewardWeight[_pool]).div(stakingRewardWeightTotal);\n', '    }\n', '\n', '    function setLpStakingIncomeWeights(address[] calldata _pools, uint256[] calldata _values) external onlyParamSetter {\n', '        require(_pools.length == _values.length, "illegal parameters");\n', '        updateStakingPoolsIncome();\n', '        for(uint256 i; i<_pools.length; i++) {\n', '            _setLpStakingIncomeWeight(_pools[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    function setLpStakingIncomeWeight(address _pool, uint256 _value) external onlyParamSetter {\n', '        updateStakingPoolsIncome();\n', '        _setLpStakingIncomeWeight(_pool, _value);\n', '    }\n', '        \n', '    function _setLpStakingIncomeWeight(address _pool, uint256 _value) internal {\n', '        require(stakingType[_pool] == 2, "illegal pool");\n', '        lpStakingIncomeWeightTotal = lpStakingIncomeWeightTotal.sub(lpStakingIncomeWeight[_pool]).add(_value);\n', '        lpStakingIncomeWeight[_pool] = _value;\n', '    }\n', '\n', '    function getLpStakingSupply(address _pool) public view returns(uint256) {\n', '        if(totalSupply == 0 || stakingType[_pool] != 2 || lpStakingIncomeWeightTotal == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 poolAmount;\n', '        uint256 windfallAmount;\n', '        {\n', '            uint256 stakingPoolSupply;\n', '            if (stakingPool != address(0)) {\n', '                stakingPoolSupply = IStaking(stakingPool).totalSupply();\n', '            }\n', '            uint256 poolsTotal;\n', '            uint256 unknown;\n', '            (poolAmount, poolsTotal) = getLpStakingsReserve(_pool);\n', '            if(totalSupply > stakingPoolSupply.add(poolsTotal)) {\n', '                unknown = totalSupply.sub(stakingPoolSupply).sub(poolsTotal);\n', '            }\n', '            windfallAmount = unknown.mul(lpStakingIncomeWeight[_pool]).div(lpStakingIncomeWeightTotal);\n', '        }\n', '       \n', '        return poolAmount.add(windfallAmount);\n', '    }\n', '\n', '    function getLpStakingsReserve(address _pool) public view returns (uint256, uint256) {\n', '        uint256 total;\n', '        uint256 amount;\n', '        for (uint256 i; i<stakings.length; i++) {\n', '            if(stakingType[stakings[i]] == 2) {\n', '                uint256 _amount = getLpStakingReserve(stakings[i]);\n', '                total = total.add(_amount);\n', '                if(_pool == stakings[i]) {\n', '                    amount = _amount;\n', '                }\n', '            }\n', '        }\n', '        return (amount, total);\n', '    }\n', '\n', '    function getLpStakingReserve(address _pool) public view returns (uint256) {\n', '        address pair = ILpStaking(_pool).stakingLpToken();\n', '        if(pair == address(0)) {\n', '            return 0;\n', '        }\n', '        uint256 reserve = getReserveFromLp(pair);\n', '        if(reserve == 0) {\n', '            return 0;\n', '        }\n', '        uint256 stakingAmount = ILpStaking(_pool).totalSupply();\n', '        uint256 pairTotal = ISwapPair(pair).totalSupply();\n', '        if(pairTotal > 0 && reserve.mul(stakingAmount) > pairTotal) {\n', '            return reserve.mul(stakingAmount).div(pairTotal);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getReserveFromLp(address _pair) public view returns (uint256) {\n', '        address token0 = ISwapPair(_pair).token0();\n', '        address token1 = ISwapPair(_pair).token1();\n', '        (uint256 reserve0, uint256 reserve1, ) = ISwapPair(_pair).getReserves();\n', '        if (token0 == address(this)) {\n', '            return reserve0;\n', '        } else if (token1 == address(this)) {\n', '            return reserve1;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function setTreasury(address _treasury) external onlyOwner {\n', '        treasury = _treasury;\n', '    }\n', '\n', '    function pause() onlyOwner external {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() onlyOwner external {\n', '        _unpause();\n', '    }\n', '\n', '    function weiToIncomeTokenValue(uint256 amount) public view returns (uint256) {\n', '        uint256 decimals = 18;\n', '        if(incomeToken != address(0)) {\n', '            decimals = uint256(IERC20Detail(incomeToken).decimals());\n', '        }\n', '        if(decimals < 18) {\n', '            uint diff = 18 - decimals;\n', '            amount = amount.div(10**diff);\n', '        } else if(decimals > 18) {\n', '            uint diff = decimals - 18;\n', '            amount = amount.mul(10**diff);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function remainingAmount() public view returns(uint256) {\n', '        return totalHashRate.mul(1e18).sub(totalSupply);\n', '    }\n', '\n', '    function mint(address to, uint value) external whenNotPaused {\n', '        require(msg.sender == minter, "!minter");\n', '        require(value <= remainingAmount(), "not sufficient supply.");\n', '        _mint(to, value);\n', '        updateStakingPoolsIncome();\n', '    }\n', '\n', '    function setMinter(address _minter) external onlyParamSetter {\n', '        require(minter != _minter, "same minter.");\n', '        minter = _minter;\n', '    }\n', '\n', '    function addHashRate(uint256 hashRate) external onlyParamSetter {\n', '        require(hashRate > 0, "hashRate cannot be 0");\n', '\n', '        // should keep current workingRate and incomeRate unchanged.\n', '        totalHashRate = totalHashRate.add(hashRate.mul(totalHashRate).div(workingHashRate));\n', '        workingHashRate = workingHashRate.add(hashRate);\n', '    }\n', '\n', '    function setMineParam(address _mineParam) external onlyParamSetter {\n', '        require(mineParam != _mineParam, "same mineParam.");\n', '        mineParam = _mineParam;\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function setStartMiningTime(uint256 _startMiningTime) external onlyParamSetter {\n', '        require(startMiningTime != _startMiningTime, "same startMiningTime.");\n', '        require(startMiningTime > block.timestamp, "already start mining.");\n', '        require(_startMiningTime > block.timestamp, "nonlegal startMiningTime.");\n', '        startMiningTime = _startMiningTime;\n', '        workerNumLastUpdateTime = _startMiningTime;\n', '    }\n', '\n', '    function setElectricCharge(uint256 _electricCharge) external onlyParamSetter {\n', '        require(electricCharge != _electricCharge, "same electricCharge.");\n', '        electricCharge = _electricCharge;\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function setMinerPoolFeeNumerator(uint256 _minerPoolFeeNumerator) external onlyParamSetter {\n', '        require(minerPoolFeeNumerator != _minerPoolFeeNumerator, "same minerPoolFee.");\n', '        require(_minerPoolFeeNumerator < 1000000, "nonlegal minerPoolFee.");\n', '        minerPoolFeeNumerator = _minerPoolFeeNumerator;\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function setDepreciationNumerator(uint256 _depreciationNumerator) external onlyParamSetter {\n', '        require(depreciationNumerator != _depreciationNumerator, "same depreciationNumerator.");\n', '        require(_depreciationNumerator <= 1000000, "nonlegal depreciation.");\n', '        depreciationNumerator = _depreciationNumerator;\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function setWorkingHashRate(uint256 _workingHashRate) external onlyParamSetter {\n', '        require(workingHashRate != _workingHashRate, "same workingHashRate.");\n', '        //require(totalHashRate >= _workingHashRate, "param workingHashRate not legal.");\n', '\n', '        if (block.timestamp > startMiningTime) {\n', '            workingRateNumerator = getHistoryWorkingRate();\n', '            workerNumLastUpdateTime = block.timestamp;\n', '        }\n', '\n', '        workingHashRate = _workingHashRate;\n', '        updateIncomeRate();\n', '    }\n', '\n', '    function getHistoryWorkingRate() public view returns (uint256) {\n', '        if (block.timestamp > startMiningTime) {\n', '            uint256 time_interval = block.timestamp.sub(workerNumLastUpdateTime);\n', '            uint256 totalRate = workerNumLastUpdateTime.sub(startMiningTime).mul(workingRateNumerator).add(time_interval.mul(getCurWorkingRate()));\n', '            uint256 totalTime = block.timestamp.sub(startMiningTime);\n', '\n', '            return totalRate.div(totalTime);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    function getCurWorkingRate() public view  returns (uint256) {\n', '        return 1000000 * workingHashRate / totalHashRate;\n', '    }\n', '\n', '    function getPowerConsumptionMineInWeiPerSec() public view returns(uint256){\n', '        uint256 minePrice = IMineParam(mineParam).minePrice();\n', '        if (minePrice != 0) {\n', '            uint256 Base = 1e18;\n', '            uint256 elecPowerPerTHSecAmplifier = 1000;\n', '            uint256 powerConsumptionPerHour = elecPowerPerTHSec.mul(Base).div(elecPowerPerTHSecAmplifier).div(1000);\n', '            uint256 powerConsumptionMineInWeiPerHour = powerConsumptionPerHour.mul(electricCharge).div(1000000).div(minePrice);\n', '            return powerConsumptionMineInWeiPerHour.div(3600);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getIncomeMineInWeiPerSec() public view returns(uint256){\n', '        uint256 paramDenominator = 1000000;\n', '        uint256 afterMinerPoolFee = 0;\n', '        {\n', '            uint256 mineIncomePerTPerSecInWei = IMineParam(mineParam).mineIncomePerTPerSecInWei();\n', '            afterMinerPoolFee = mineIncomePerTPerSecInWei.mul(paramDenominator.sub(minerPoolFeeNumerator)).div(paramDenominator);\n', '        }\n', '\n', '        uint256 afterDepreciation = 0;\n', '        {\n', '            afterDepreciation = afterMinerPoolFee.mul(depreciationNumerator).div(paramDenominator);\n', '        }\n', '\n', '        return afterDepreciation;\n', '    }\n', '\n', '    function updateIncomeRate() public {\n', '        //not start mining yet.\n', '        if (block.timestamp > startMiningTime) {\n', '            // update income first.\n', '            updateStakingPoolsIncome();\n', '        }\n', '\n', '        uint256 oldValue = incomeRate;\n', '\n', '        //compute electric charge.\n', '        uint256 powerConsumptionMineInWeiPerSec = getPowerConsumptionMineInWeiPerSec();\n', '\n', '        //compute mine income\n', '        uint256 incomeMineInWeiPerSec = getIncomeMineInWeiPerSec();\n', '\n', '        if (incomeMineInWeiPerSec > powerConsumptionMineInWeiPerSec) {\n', '            uint256 targetRate = incomeMineInWeiPerSec.sub(powerConsumptionMineInWeiPerSec);\n', '            incomeRate = targetRate.mul(workingHashRate).div(totalHashRate);\n', '        }\n', '        //miner close down.\n', '        else {\n', '            incomeRate = 0;\n', '        }\n', '\n', '        emit IncomeRateChanged(oldValue, incomeRate);\n', '    }\n', '\n', '    function updateStakingPoolsIncome() public {\n', '        for (uint256 i; i<stakings.length; i++) {\n', '            if(msg.sender != stakings[i] && isStakingPool(stakings[i]) && address(this) == IStaking(stakings[i]).hashRateToken()) {\n', '                IStaking(stakings[i]).incomeRateChanged();\n', '            }\n', '        }\n', '    }\n', '\n', '    function updateStakingPoolsReward() public {\n', '        for (uint256 i; i<stakings.length; i++) {\n', '            if(msg.sender != stakings[i] && isStakingPool(stakings[i]) && address(this) == IStaking(stakings[i]).hashRateToken()) {\n', '                IStaking(stakings[i]).rewardRateChanged();\n', '            }\n', '        }\n', '    }\n', '\n', '    function _setRewardRate(uint256 _rewardRate) internal {\n', '        updateStakingPoolsReward();\n', '        emit RewardRateChanged(rewardRate, _rewardRate);\n', '        rewardRate = _rewardRate;\n', '        rewardPeriodFinish = block.timestamp.add(rewardsDuration);\n', '    }\n', '\n', '    function setRewardRate(uint256 _rewardRate)  external onlyParamSetter {\n', '        _setRewardRate(_rewardRate);\n', '    }\n', '\n', '    function getRewardRateByReward(uint256 reward) public view returns (uint256) {\n', '        if (block.timestamp >= rewardPeriodFinish) {\n', '            return reward.div(rewardsDuration);\n', '        } else {\n', '            // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n', '            uint256 remaining = rewardPeriodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            return reward.add(leftover).div(rewardsDuration);\n', '        }\n', '    }\n', '\n', '    function notifyRewardAmount(uint256 reward) external onlyParamSetter {\n', '        uint _rewardRate = getRewardRateByReward(reward);\n', '        _setRewardRate(_rewardRate);\n', '\n', '        // Ensure the provided reward amount is not more than the balance in the contract.\n', '        // This keeps the reward rate in the right range, preventing overflows due to\n', '        // very high values of rewardRate in the earned and rewardsPerToken functions;\n', '        uint balance = IERC20(rewardsToken).balanceOf(address(this));\n', '        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");\n', '\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    function takeFromTreasury(address token, uint256 amount) internal {\n', '        if(treasury == address(0)) {\n', '            return;\n', '        }\n', '\n', '        uint256 balance;\n', '        if (token == address(0)) {\n', '            balance = address(this).balance;\n', '        } else {\n', '            balance = IERC20(token).balanceOf(address(this));\n', '        }\n', '        if(amount > balance) {\n', '            ITokenTreasury(treasury).claim(token, amount.sub(balance));\n', '        }\n', '    }\n', '\n', '    function claimIncome(address to, uint256 amount) external payable {\n', '        require(to != address(0), "to is the zero address");\n', '        require(isStakingPool(msg.sender), "No permissions");\n', '        \n', '        takeFromTreasury(incomeToken, amount);\n', '        if (incomeToken == address(0)) {\n', '            safeTransferETH(to, amount);\n', '        } else {\n', '            IERC20(incomeToken).safeTransfer(to, amount);\n', '        }\n', '\n', '    }\n', '\n', '    function claimReward(address to, uint256 amount) external {\n', '        require(to != address(0), "to is the zero address");\n', '        require(isStakingPool(msg.sender), "No permissions");\n', '        \n', '        takeFromTreasury(rewardsToken, amount);\n', '        if (rewardsToken == address(0)) {\n', '            safeTransferETH(to, amount);\n', '        } else {\n', '            IERC20(rewardsToken).safeTransfer(to, amount);\n', '        }\n', '    }\n', '\n', '    function inCaseTokensGetStuck(address _token, uint256 _amount) external onlyOwner {\n', '        if (_token == address(0)) {\n', '            safeTransferETH(msg.sender, _amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(msg.sender, _amount);\n', '        }\n', '    }\n', '\n', '    function depositeETH() external payable {\n', '        emit DepositedETH(msg.sender, msg.value);\n', '    }\n', '\n', '    function safeTransferETH(address to, uint amount) internal {\n', '        address(uint160(to)).transfer(amount);\n', '    }\n', '        \n', '    function () external payable {\n', '    }\n', '\n', '    event IncomeRateChanged(uint256 oldValue, uint256 newValue);\n', '    event RewardAdded(uint256 reward);\n', '    event RewardRateChanged(uint256 oldValue, uint256 newValue);\n', '    event DepositedETH(address indexed _user, uint256 _amount);\n', '}']