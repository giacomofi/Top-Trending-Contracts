['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-16\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', 'interface PauseLike {\n', '    function delay() external returns (uint);\n', '    function exec(address, bytes32, bytes calldata, uint256) external;\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '}\n', '\n', '\n', '\n', 'interface JugLike {\n', '    function drip(bytes32 ilk) external returns (uint rate);\n', '    function file(bytes32 ilk, bytes32 what, uint data) external;\n', '}\n', '\n', '\n', 'interface ChainlogAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function keys() external view returns (bytes32[] memory);\n', '    function version() external view returns (string memory);\n', '    function ipfs() external view returns (string memory);\n', '    function setVersion(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setAddress(bytes32,address) external;\n', '    function removeAddress(bytes32) external;\n', '    function count() external view returns (uint256);\n', '    function get(uint256) external view returns (bytes32,address);\n', '    function list() external view returns (bytes32[] memory);\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', '\n', '\n', '\n', 'contract SpellActionCommon {\n', '\n', '    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\n', '    uint256 constant ONE_PERCENT_RATE             = 1000000000315522921573372069;\n', '    uint256 constant TWO_PERCENT_RATE             = 1000000000627937192491029810;\n', '    uint256 constant TWO_POINT_FIVE_PERCENT_RATE  = 1000000000782997609082909351;\n', '    uint256 constant THREE_PERCENT_RATE           = 1000000000937303470807876289;\n', '    uint256 constant FOUR_POINT_FIVE_PERCENT_RATE = 1000000001395766281313196627;\n', '    uint256 constant FIVE_PERCENT_RATE            = 1000000001547125957863212448;\n', '    uint256 constant SIX_PERCENT_RATE             = 1000000001847694957439350562;\n', '    uint256 constant EIGHT_PERCENT_RATE           = 1000000002440418608258400030;\n', '    uint256 constant NINE_PERCENT_RATE            = 1000000002732676825177582095;\n', '    uint256 constant TEN_PERCENT_RATE             = 1000000003022265980097387650;\n', '\n', '    function setupDuty(bytes32 ilk, address jug) internal {\n', '\n', '        JugLike(jug).drip(ilk);\n', '\n', '        JugLike(jug).file(ilk, "duty", ONE_PERCENT_RATE);\n', '    }\n', '\n', '    function executeCommon(address changeLogAddr) internal {\n', '\n', '        address MCD_JUG = ChainlogAbstract(changeLogAddr).getAddress("MCD_JUG");\n', '\n', '        setupDuty("USDTUSDC-A", MCD_JUG);\n', '        setupDuty("USDTDAI-A", MCD_JUG);\n', '        setupDuty("USDTUSDN-A", MCD_JUG);\n', '\n', '        setupDuty("USDCDAI-A", MCD_JUG);\n', '        setupDuty("CRV_3POOL-A", MCD_JUG);\n', '        setupDuty("CRV_3POOL-B", MCD_JUG);\n', '\n', '\n', '        ChainlogAbstract(changeLogAddr).setVersion("1.4.0");\n', '    }\n', '}\n', '\n', 'contract SpellActionMainnet is SpellActionCommon {\n', '    function execute() external {\n', '        executeCommon(0xE0fb0a1B0F1db37D803bad3F6d55158291Bb7bAc);\n', '    }\n', '}\n', '    \n', '\n', '\n', 'contract SpellActionKovan is SpellActionCommon {\n', '    function execute() external {\n', '        executeCommon(0x873396d69b017e3Ed499406892E1cd2f3EE1CFA7);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ActionSpell {\n', '    bool      public done;\n', '    address   public pause;\n', '    uint256   public expiration;\n', '\n', '\n', '    address   public action;\n', '    bytes32   public tag;\n', '    uint256   public eta;\n', '    bytes     public sig;\n', '\n', '\n', '    function setup(address deployer) internal {\n', '        expiration = block.timestamp + 30 days;\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag; assembly { _tag := extcodehash(deployer) }\n', '        action = deployer;\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() external {\n', '        require(block.timestamp <= expiration, "DSSSpell/spell-has-expired");\n', '        require(eta == 0, "spell-already-scheduled");\n', '        eta = now + PauseLike(pause).delay();\n', '        PauseLike(pause).plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        PauseLike(pause).exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '\n', 'contract ActionSpellMainnet is ActionSpell {\n', '    constructor() public {\n', '        pause = 0x146921eF7A94C50b96cb53Eb9C2CA4EB25D4Bfa8;\n', '        setup(address(new SpellActionMainnet()));\n', '    }\n', '}\n', '\n', '\n', 'contract ActionSpellKovan is ActionSpell {\n', '    constructor() public {\n', '        pause = 0x95D6fBdD8bE0FfBEB62b3B3eB2A7dFD19cFae8F5;\n', '        setup(address(new SpellActionKovan()));\n', '    }\n', '}']