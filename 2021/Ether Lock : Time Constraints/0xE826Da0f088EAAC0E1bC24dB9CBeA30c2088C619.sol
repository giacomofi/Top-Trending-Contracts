['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', 'contract SHIBADOUBLER {\n', '    using SafeMath for uint;\n', '\n', '    IERC20 public token;\n', '\n', '    uint constant public DEPOSITS_MAX = 100;\n', '    uint constant public INVEST_MIN_AMOUNT = 1000000 * (10 ** 18); // 1m\n', '    uint constant public BASE_PERCENT = 1000; // 10%\n', '    uint public REFERRAL_PERCENTS = 1000;\n', '    uint constant public MARKETING_FEE = 800;\n', '    uint constant public PLATFORM_FEE = 200;\n', '    uint constant public MAX_CONTRACT_PERCENT = 5000;\n', '    uint constant public MAX_HOLD_PERCENT = 1000;\n', '    uint constant public PERCENTS_DIVIDER = 10000;\n', '    uint constant public CONTRACT_BALANCE_STEP = 88000000 * (10 ** 18); // 88m\n', '    uint constant public TIME_STEP = 1 days;\n', '\n', '    uint public totalDeposits;\n', '    uint public totalInvested;\n', '    uint public totalWithdrawn;\n', '\n', '    uint public contractPercent;\n', '\n', '    address public marketingAddress;\n', '    address public platformAddress;\n', '\n', '    struct Deposit {\n', '        uint128 amount;\n', '        uint128 withdrawn;\n', '        uint128 refback;\n', '        uint32 start;\n', '    }\n', '\n', '    struct User {\n', '        Deposit[] deposits;\n', '        uint32 checkpoint;\n', '        address referrer;\n', '        uint16 rbackPercent;\n', '        uint256 bonus;\n', '        uint256 availableBonus;\n', '        uint24 refs;\n', '    }\n', '\n', '    uint256 public marketingAvailable;\n', '    uint256 public platformAvailable;\n', '\n', '    mapping (address => User) internal users;\n', '\n', '    event Newbie(address user);\n', '    event NewDeposit(address indexed user, uint amount);\n', '    event Withdrawn(address indexed user, uint amount);\n', '    event RefBonus(address indexed referrer, address indexed referral, uint amount);\n', '    event RefBack(address indexed referrer, address indexed referral, uint amount);\n', '    event FeePayed(address indexed user, uint totalAmount);\n', '\n', '    constructor(address marketingAddr, address platformAddr, IERC20 tokenAddr) public {\n', '        require(!isContract(marketingAddr) && !isContract(platformAddr));\n', '\n', '        token = tokenAddr;\n', '\n', '        marketingAddress = marketingAddr;\n', '        platformAddress = platformAddr;\n', '\n', '        contractPercent = getContractBalanceRate();\n', '    }\n', '\n', '    function invest(uint depAmount, address referrer) public {\n', '        require(!isContract(msg.sender) && msg.sender == tx.origin);\n', '\n', '        require(depAmount >= INVEST_MIN_AMOUNT, "Minimum deposit amount 1000000 SHIBA");\n', '\n', '        User storage user = users[msg.sender];\n', '\n', '        require(user.deposits.length < DEPOSITS_MAX, "Maximum 100 deposits from address");\n', '\n', '        token.transferFrom(msg.sender, address(this), depAmount);\n', '\n', '        uint marketingFee = depAmount.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\n', '        uint platformFee = depAmount.mul(PLATFORM_FEE).div(PERCENTS_DIVIDER);\n', '\n', '        marketingAvailable = marketingAvailable.add(marketingFee);\n', '        platformAvailable = platformAvailable.add(platformFee);\n', '\n', '        if (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\n', '            user.referrer = referrer;\n', '        }\n', '\n', '        uint refbackAmount;\n', '        if (user.referrer != address(0)) {\n', '            address upline = user.referrer;\n', '\n', '            uint amount = depAmount.mul(REFERRAL_PERCENTS).div(PERCENTS_DIVIDER);\n', '\n', '            if (users[upline].rbackPercent > 0) {\n', '                refbackAmount = amount.mul(uint(users[upline].rbackPercent)).div(PERCENTS_DIVIDER);\n', '                users[msg.sender].availableBonus = users[msg.sender].availableBonus.add(refbackAmount);\n', '\n', '                emit RefBack(upline, msg.sender, refbackAmount);\n', '\n', '                amount = amount.sub(refbackAmount);\n', '            }\n', '\n', '            if (amount > 0) {\n', '                users[upline].bonus = users[upline].bonus.add(amount);\n', '                users[upline].availableBonus = users[upline].availableBonus.add(amount);\n', '                emit RefBonus(upline, msg.sender, amount);\n', '            }\n', '\n', '            users[upline].refs++;\n', '        }\n', '\n', '        if (user.deposits.length == 0) {\n', '            user.checkpoint = uint32(block.timestamp);\n', '            emit Newbie(msg.sender);\n', '        }\n', '\n', '        user.deposits.push(Deposit(uint128(depAmount), 0, uint128(refbackAmount), uint32(block.timestamp)));\n', '\n', '        totalInvested = totalInvested.add(depAmount);\n', '        totalDeposits++;\n', '\n', '        if (contractPercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\n', '            uint contractPercentNew = getContractBalanceRate();\n', '            if (contractPercentNew > contractPercent) {\n', '                contractPercent = contractPercentNew;\n', '            }\n', '        }\n', '\n', '        emit NewDeposit(msg.sender, depAmount);\n', '    }\n', '\n', '    function withdraw() public {\n', '        User storage user = users[msg.sender];\n', '\n', '        uint userPercentRate = getUserPercentRate(msg.sender);\n', '\n', '        uint totalAmount;\n', '        uint dividends;\n', '\n', '        for (uint i = 0; i < user.deposits.length; i++) {\n', '\n', '            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\n', '\n', '                if (user.deposits[i].start > user.checkpoint) {\n', '\n', '                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\n', '                        .div(TIME_STEP);\n', '\n', '                } else {\n', '\n', '                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '                        .mul(block.timestamp.sub(uint(user.checkpoint)))\n', '                        .div(TIME_STEP);\n', '\n', '                }\n', '\n', '                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\n', '                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\n', '                }\n', '\n', '                user.deposits[i].withdrawn = uint128(uint(user.deposits[i].withdrawn).add(dividends)); /// changing of storage data\n', '                totalAmount = totalAmount.add(dividends);\n', '\n', '            }\n', '        }\n', '        \n', '        totalAmount = totalAmount.add(user.availableBonus);\n', '\n', '        require(totalAmount > 0, "User has no dividends");\n', '\n', '        uint contractBalance = token.balanceOf(address(this));\n', '        if (contractBalance < totalAmount) {\n', '            totalAmount = contractBalance;\n', '        }\n', '\n', '        user.checkpoint = uint32(block.timestamp);\n', '        user.availableBonus = 0;\n', '\n', '        token.transfer(msg.sender, totalAmount);\n', '\n', '        totalWithdrawn = totalWithdrawn.add(totalAmount);\n', '\n', '        emit Withdrawn(msg.sender, totalAmount);\n', '    }\n', '\n', '    function setRefback(uint16 rbackPercent) public {\n', '        require(rbackPercent <= 10000);\n', '\n', '        User storage user = users[msg.sender];\n', '\n', '        if (user.deposits.length > 0) {\n', '            user.rbackPercent = rbackPercent;\n', '        }\n', '    }\n', '\n', '    function getContractBalance() public view returns (uint) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function getContractBalanceRate() internal view returns (uint) {\n', '        uint contractBalance = token.balanceOf(address(this));\n', '        uint contractBalancePercent = BASE_PERCENT.add(contractBalance.div(CONTRACT_BALANCE_STEP).mul(2)); // +0.02% per 88m coins\n', '\n', '        if (contractBalancePercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\n', '            return contractBalancePercent;\n', '        } else {\n', '            return BASE_PERCENT.add(MAX_CONTRACT_PERCENT);\n', '        }\n', '    }\n', '\n', '    function getUserPercentRate(address userAddress) public view returns (uint) {\n', '        User storage user = users[userAddress];\n', '\n', '        if (isActive(userAddress)) {\n', '            uint timeMultiplier = (block.timestamp.sub(uint(user.checkpoint))).div(TIME_STEP).mul(100); // +1% per day\n', '            if (timeMultiplier > MAX_HOLD_PERCENT) {\n', '                timeMultiplier = MAX_HOLD_PERCENT;\n', '            }\n', '            return contractPercent.add(timeMultiplier);\n', '        } else {\n', '            return contractPercent;\n', '        }\n', '    }\n', '\n', '    function getUserAvailable(address userAddress) public view returns (uint) {\n', '        User storage user = users[userAddress];\n', '\n', '        uint userPercentRate = getUserPercentRate(userAddress);\n', '\n', '        uint totalDividends;\n', '        uint dividends;\n', '\n', '        for (uint i = 0; i < user.deposits.length; i++) {\n', '\n', '            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\n', '\n', '                if (user.deposits[i].start > user.checkpoint) {\n', '\n', '                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\n', '                        .div(TIME_STEP);\n', '\n', '                } else {\n', '\n', '                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\n', '                        .mul(block.timestamp.sub(uint(user.checkpoint)))\n', '                        .div(TIME_STEP);\n', '\n', '                }\n', '\n', '                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\n', '                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\n', '                }\n', '\n', '                totalDividends = totalDividends.add(dividends);\n', '\n', '                /// no update of withdrawn because that is view function\n', '\n', '            }\n', '\n', '        }\n', '\n', '        return totalDividends.add(user.availableBonus);\n', '    }\n', '\n', '    function isActive(address userAddress) public view returns (bool) {\n', '        User storage user = users[userAddress];\n', '\n', '        return (user.deposits.length > 0) && uint(user.deposits[user.deposits.length-1].withdrawn) < uint(user.deposits[user.deposits.length-1].amount).mul(2);\n', '    }\n', '\n', '    function getUserAmountOfDeposits(address userAddress) public view returns (uint) {\n', '        return users[userAddress].deposits.length;\n', '    }\n', '\n', '    function getUserTotalDeposits(address userAddress) public view returns (uint) {\n', '        User storage user = users[userAddress];\n', '\n', '        uint amount;\n', '\n', '        for (uint i = 0; i < user.deposits.length; i++) {\n', '            amount = amount.add(uint(user.deposits[i].amount));\n', '        }\n', '\n', '        return amount;\n', '    }\n', '\n', '    function getUserTotalWithdrawn(address userAddress) public view returns (uint) {\n', '        User storage user = users[userAddress];\n', '\n', '        uint amount = user.bonus;\n', '\n', '        for (uint i = 0; i < user.deposits.length; i++) {\n', '            amount = amount.add(uint(user.deposits[i].withdrawn)).add(uint(user.deposits[i].refback));\n', '        }\n', '\n', '        return amount;\n', '    }\n', '\n', '    function getUserDeposits(address userAddress, uint last, uint first) public view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory) {\n', '        User storage user = users[userAddress];\n', '\n', '        uint count = first.sub(last);\n', '        if (count > user.deposits.length) {\n', '            count = user.deposits.length;\n', '        }\n', '\n', '        uint[] memory amount = new uint[](count);\n', '        uint[] memory withdrawn = new uint[](count);\n', '        uint[] memory refback = new uint[](count);\n', '        uint[] memory start = new uint[](count);\n', '\n', '        uint index = 0;\n', '        for (uint i = first; i > last; i--) {\n', '            amount[index] = uint(user.deposits[i-1].amount);\n', '            withdrawn[index] = uint(user.deposits[i-1].withdrawn);\n', '            refback[index] = uint(user.deposits[i-1].refback);\n', '            start[index] = uint(user.deposits[i-1].start);\n', '            index++;\n', '        }\n', '\n', '        return (amount, withdrawn, refback, start);\n', '    }\n', '\n', '    function getSiteStats() public view returns (uint, uint, uint, uint) {\n', '        return (totalInvested, totalDeposits, getContractBalance(), contractPercent);\n', '    }\n', '\n', '    function getUserStats(address userAddress) public view returns (uint, uint, uint, uint, uint) {\n', '        uint userPerc = getUserPercentRate(userAddress);\n', '        uint userAvailable = getUserAvailable(userAddress);\n', '        uint userDepsTotal = getUserTotalDeposits(userAddress);\n', '        uint userDeposits = getUserAmountOfDeposits(userAddress);\n', '        uint userWithdrawn = getUserTotalWithdrawn(userAddress);\n', '\n', '        return (userPerc, userAvailable, userDepsTotal, userDeposits, userWithdrawn);\n', '    }\n', '\n', '    function getUserReferralsStats(address userAddress) public view returns (address, uint16, uint16, uint256, uint256, uint24) {\n', '        User storage user = users[userAddress];\n', '\n', '        return (user.referrer, user.rbackPercent, users[user.referrer].rbackPercent, user.bonus, user.availableBonus, user.refs);\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function recieveMarketing() public payable {\n', '        require(marketingAvailable > 0, "nothing to recieve");\n', '\n', '        uint value = marketingAvailable;\n', '        marketingAvailable = 0;\n', '\n', '        token.transfer(marketingAddress, value);\n', '\n', '        emit FeePayed(marketingAddress, value);\n', '    }\n', '\n', '    function recievePlatform() public payable {\n', '        require(platformAvailable > 0, "nothing to recieve");\n', '\n', '        uint value = platformAvailable;\n', '        platformAvailable = 0;\n', '\n', '        token.transfer(platformAddress, value);\n', '\n', '        emit FeePayed(platformAddress, value);\n', '    }\n', '\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '}']