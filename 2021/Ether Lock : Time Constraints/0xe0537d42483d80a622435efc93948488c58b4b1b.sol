['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract RegisterManager {\n', '    uint public roomFee = 0.01 ether;\n', '    uint public systemFee = 0.05 ether;\n', '    address public admin;\n', '    mapping(address => bool) public isSystemRegistered;\n', '    mapping(uint => mapping(address => bool)) private _isRoomRegistered;\n', '\n', '    event SystemRegistered(address registrant);\n', '    event SystemUnregistered(address registrant);\n', '    event RoomRegistered(address registrant, uint room_id);\n', '    event RoomUnregistered(address registrant, uint room_id);\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "Not admin");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', '        admin = msg.sender;\n', '    }\n', '\n', '   function systemRegister() external payable {\n', '        require(msg.value == systemFee, "Wrong ETH value!");\n', '        require(!isSystemRegistered[msg.sender], "Already Registered!");\n', '        isSystemRegistered[msg.sender] = true;\n', '        emit SystemRegistered(msg.sender);\n', '    }\n', '\n', '    function roomRegister(uint roomId) external payable {\n', '        require(msg.value == roomFee, "Wrong ETH value!");\n', '        require(isSystemRegistered[msg.sender], "Unregistered in System!");\n', '        require(!_isRoomRegistered[roomId][msg.sender], "Already Registered!");\n', '        _isRoomRegistered[roomId][msg.sender] = true;\n', '        emit RoomRegistered(msg.sender, roomId);\n', '    }\n', '\n', '    function isRoomRegistered(uint roomId, address registrant) external view returns(bool) {\n', '        if (!isSystemRegistered[registrant]) return false;\n', '        return _isRoomRegistered[roomId][registrant];\n', '    }\n', '\n', '    // Admin functions\n', '    function setSystemFee(uint _systemFee) external onlyAdmin {\n', '        systemFee = _systemFee;\n', '    }\n', '\n', '    function setRoomFee(uint _roomFee) external onlyAdmin {\n', '        roomFee = _roomFee;\n', '    }\n', '\n', '    function setAdmin(address newAdmin) external onlyAdmin {\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function roomUnregister(uint roomId, address registrant) external onlyAdmin {\n', '        require(!isSystemRegistered[registrant], "Unexist registrant!");\n', '        require(_isRoomRegistered[roomId][registrant], "Unexist registrant in the room!");\n', '        _isRoomRegistered[roomId][registrant] = false;\n', '        emit RoomUnregistered(msg.sender, roomId);\n', '    }\n', '\n', '    function systemUnregister(address registrant) external onlyAdmin {\n', '        require(isSystemRegistered[registrant], "Unexist registrant!");\n', '        isSystemRegistered[registrant] = false;\n', '        emit SystemUnregistered(registrant);\n', '    }\n', '\n', '    function withdraw() external onlyAdmin {\n', '        uint balance = address(this).balance;\n', '        require(balance > 0, "Insufficient balance");\n', '        if (!payable(msg.sender).send(balance)) {\n', '            payable(msg.sender).transfer(balance);\n', '        }\n', '    }\n', '}']