['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// File: contracts/interfaces/managerDataStorageInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface managerDataStorageInterface  {\n', '\tfunction getGlobalRewardPerBlock() external view returns (uint256);\n', '\tfunction setGlobalRewardPerBlock(uint256 _globalRewardPerBlock) external returns (bool);\n', '\n', '\tfunction getGlobalRewardDecrement() external view returns (uint256);\n', '\tfunction setGlobalRewardDecrement(uint256 _globalRewardDecrement) external returns (bool);\n', '\n', '\tfunction getGlobalRewardTotalAmount() external view returns (uint256);\n', '\tfunction setGlobalRewardTotalAmount(uint256 _globalRewardTotalAmount) external returns (bool);\n', '\n', '\tfunction getAlphaRate() external view returns (uint256);\n', '\tfunction setAlphaRate(uint256 _alphaRate) external returns (bool);\n', '\n', '\tfunction getAlphaLastUpdated() external view returns (uint256);\n', '\tfunction setAlphaLastUpdated(uint256 _alphaLastUpdated) external returns (bool);\n', '\n', '\tfunction getRewardParamUpdateRewardPerBlock() external view returns (uint256);\n', '\tfunction setRewardParamUpdateRewardPerBlock(uint256 _rewardParamUpdateRewardPerBlock) external returns (bool);\n', '\n', '\tfunction getRewardParamUpdated() external view returns (uint256);\n', '\tfunction setRewardParamUpdated(uint256 _rewardParamUpdated) external returns (bool);\n', '\n', '\tfunction getInterestUpdateRewardPerblock() external view returns (uint256);\n', '\tfunction setInterestUpdateRewardPerblock(uint256 _interestUpdateRewardPerblock) external returns (bool);\n', '\n', '\tfunction getInterestRewardUpdated() external view returns (uint256);\n', '\tfunction setInterestRewardUpdated(uint256 _interestRewardLastUpdated) external returns (bool);\n', '\n', '\tfunction setTokenHandler(uint256 handlerID, address handlerAddr) external returns (bool);\n', '\n', '\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address);\n', '\n', '\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\n', '\n', '\tfunction getTokenHandlerAddr(uint256 handlerID) external view returns (address);\n', '\tfunction setTokenHandlerAddr(uint256 handlerID, address handlerAddr) external returns (bool);\n', '\n', '\tfunction getTokenHandlerExist(uint256 handlerID) external view returns (bool);\n', '\tfunction setTokenHandlerExist(uint256 handlerID, bool exist) external returns (bool);\n', '\n', '\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\n', '\tfunction setTokenHandlerSupport(uint256 handlerID, bool support) external returns (bool);\n', '\n', '\tfunction setLiquidationManagerAddr(address _liquidationManagerAddr) external returns (bool);\n', '\tfunction getLiquidationManagerAddr() external view returns (address);\n', '\n', '\tfunction setManagerAddr(address _managerAddr) external returns (bool);\n', '}\n', '\n', '// File: contracts/marketManager/managerDataStorage/managerDataStorage.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract managerDataStorage is managerDataStorageInterface {\n', '\taddress payable owner;\n', '\n', '\taddress managerAddr;\n', '\n', '\taddress liquidationManagerAddr;\n', '\n', '\tstruct TokenHandler {\n', '\t\taddress addr;\n', '\t\tbool support;\n', '\t\tbool exist;\n', '\t}\n', '\n', '\tuint256 globalRewardPerBlock;\n', '\n', '\tuint256 globalRewardDecrement;\n', '\n', '\tuint256 globalRewardTotalAmount;\n', '\n', '\tuint256 alphaRate;\n', '\n', '\tuint256 alphaLastUpdated;\n', '\n', '\tuint256 rewardParamUpdateRewardPerBlock;\n', '\n', '\tuint256 rewardParamUpdated;\n', '\n', '\tuint256 interestUpdateRewardPerblock;\n', '\n', '\tuint256 interestRewardLastUpdated;\n', '\n', '\tmapping(uint256 => TokenHandler) tokenHandlers;\n', '\n', '\t/* handler Array */\n', '\tuint256[] private tokenHandlerList;\n', '\n', '\tmodifier onlyManager {\n', '\t\taddress msgSender = msg.sender;\n', '\t\trequire((msgSender == managerAddr) || (msgSender == owner), "onlyManager function");\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner, "onlyOwner function");\n', '\t\t_;\n', '\t}\n', '\n', '\tconstructor () public\n', '\t{\n', '\t\towner = msg.sender;\n', '\t\tglobalRewardPerBlock = 0x478291c1a0e982c98;\n', '\t\tglobalRewardDecrement = 0x7ba42eb3bfc;\n', '\t\tglobalRewardTotalAmount = (4 * 100000000) * (10 ** 18);\n', '\t\talphaRate = 2 * (10 ** 17);\n', '\t\talphaLastUpdated = block.number;\n', '\t\t/*\n', '\t\t            rewardParamUpdateRewardPerBlock = 1u * (10u ** 17u); // == 0.1\n', '\t\t            rewardParamUpdated = block.getNumber();\n', '\n', '\t\t            interestUpdateRewardPerblock = 5u * (10u ** 16u); // == 0.05\n', '\t\t            interestRewardLastUpdated = block.getNumber();\n', '\t\t            */\n', '\t}\n', '\n', '\tfunction ownershipTransfer(address payable _owner) onlyOwner public returns (bool)\n', '\t{\n', '\t\towner = _owner;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getGlobalRewardPerBlock() external view override returns (uint256)\n', '\t{\n', '\t\treturn globalRewardPerBlock;\n', '\t}\n', '\n', '\tfunction setGlobalRewardPerBlock(uint256 _globalRewardPerBlock) onlyManager external override returns (bool)\n', '\t{\n', '\t\tglobalRewardPerBlock = _globalRewardPerBlock;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getGlobalRewardDecrement() external view override returns (uint256)\n', '\t{\n', '\t\treturn globalRewardDecrement;\n', '\t}\n', '\n', '\tfunction setGlobalRewardDecrement(uint256 _globalRewardDecrement) onlyManager external override returns (bool)\n', '\t{\n', '\t\tglobalRewardDecrement = _globalRewardDecrement;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getGlobalRewardTotalAmount() external view override returns (uint256)\n', '\t{\n', '\t\treturn globalRewardTotalAmount;\n', '\t}\n', '\n', '\tfunction setGlobalRewardTotalAmount(uint256 _globalRewardTotalAmount) onlyManager external override returns (bool)\n', '\t{\n', '\t\tglobalRewardTotalAmount = _globalRewardTotalAmount;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getAlphaRate() external view override returns (uint256)\n', '\t{\n', '\t\treturn alphaRate;\n', '\t}\n', '\n', '\tfunction setAlphaRate(uint256 _alphaRate) onlyOwner external override returns (bool)\n', '\t{\n', '\t\talphaRate = _alphaRate;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getAlphaLastUpdated() external view override returns (uint256)\n', '\t{\n', '\t\treturn alphaLastUpdated;\n', '\t}\n', '\n', '\tfunction setAlphaLastUpdated(uint256 _alphaLastUpdated) onlyOwner external override returns (bool)\n', '\t{\n', '\t\talphaLastUpdated = _alphaLastUpdated;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getRewardParamUpdateRewardPerBlock() external view override returns (uint256)\n', '\t{\n', '\t\treturn rewardParamUpdateRewardPerBlock;\n', '\t}\n', '\n', '\tfunction setRewardParamUpdateRewardPerBlock(uint256 _rewardParamUpdateRewardPerBlock) onlyOwner external override returns (bool)\n', '\t{\n', '\t\trewardParamUpdateRewardPerBlock = _rewardParamUpdateRewardPerBlock;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getRewardParamUpdated() external view override returns (uint256)\n', '\t{\n', '\t\treturn rewardParamUpdated;\n', '\t}\n', '\n', '\tfunction setRewardParamUpdated(uint256 _rewardParamUpdated) onlyManager external override returns (bool)\n', '\t{\n', '\t\trewardParamUpdated = _rewardParamUpdated;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getInterestUpdateRewardPerblock() external view override returns (uint256)\n', '\t{\n', '\t\treturn interestUpdateRewardPerblock;\n', '\t}\n', '\n', '\tfunction setInterestUpdateRewardPerblock(uint256 _interestUpdateRewardPerblock) onlyOwner external override returns (bool)\n', '\t{\n', '\t\tinterestUpdateRewardPerblock = _interestUpdateRewardPerblock;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getInterestRewardUpdated() external view override returns (uint256)\n', '\t{\n', '\t\treturn interestRewardLastUpdated;\n', '\t}\n', '\n', '\tfunction setInterestRewardUpdated(uint256 _interestRewardLastUpdated) onlyManager external override returns (bool)\n', '\t{\n', '\t\tinterestRewardLastUpdated = _interestRewardLastUpdated;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setManagerAddr(address _managerAddr) onlyOwner external override returns (bool)\n', '\t{\n', '\t\t_setManagerAddr(_managerAddr);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction _setManagerAddr(address _managerAddr) internal returns (bool)\n', '\t{\n', '\t\trequire(_managerAddr != address(0), "error: manager address null");\n', '\t\tmanagerAddr = _managerAddr;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setLiquidationManagerAddr(address _liquidationManagerAddr) onlyManager external override returns (bool)\n', '\t{\n', '\t\tliquidationManagerAddr = _liquidationManagerAddr;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getLiquidationManagerAddr() external view override returns (address)\n', '\t{\n', '\t\treturn liquidationManagerAddr;\n', '\t}\n', '\n', '\tfunction setTokenHandler(uint256 handlerID, address handlerAddr) onlyManager external override returns (bool)\n', '\t{\n', '\t\tTokenHandler memory handler;\n', '\t\thandler.addr = handlerAddr;\n', '\t\thandler.exist = true;\n', '\t\thandler.support = true;\n', '\t\t/* regist Storage*/\n', '\t\ttokenHandlers[handlerID] = handler;\n', '\t\ttokenHandlerList.push(handlerID);\n', '\t}\n', '\n', '\tfunction setTokenHandlerAddr(uint256 handlerID, address handlerAddr) onlyOwner external override returns (bool)\n', '\t{\n', '\t\ttokenHandlers[handlerID].addr = handlerAddr;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setTokenHandlerExist(uint256 handlerID, bool exist) onlyOwner external override returns (bool)\n', '\t{\n', '\t\ttokenHandlers[handlerID].exist = exist;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction setTokenHandlerSupport(uint256 handlerID, bool support) onlyManager external override returns (bool)\n', '\t{\n', '\t\ttokenHandlers[handlerID].support = support;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getTokenHandlerInfo(uint256 handlerID) external view override returns (bool, address)\n', '\t{\n', '\t\treturn (tokenHandlers[handlerID].support, tokenHandlers[handlerID].addr);\n', '\t}\n', '\n', '\tfunction getTokenHandlerAddr(uint256 handlerID) external view override returns (address)\n', '\t{\n', '\t\treturn tokenHandlers[handlerID].addr;\n', '\t}\n', '\n', '\tfunction getTokenHandlerExist(uint256 handlerID) external view override returns (bool)\n', '\t{\n', '\t\treturn tokenHandlers[handlerID].exist;\n', '\t}\n', '\n', '\tfunction getTokenHandlerSupport(uint256 handlerID) external view override returns (bool)\n', '\t{\n', '\t\treturn tokenHandlers[handlerID].support;\n', '\t}\n', '\n', '\tfunction getTokenHandlerID(uint256 index) external view override returns (uint256)\n', '\t{\n', '\t\treturn tokenHandlerList[index];\n', '\t}\n', '\n', '\tfunction getOwner() public view returns (address)\n', '\t{\n', '\t\treturn owner;\n', '\t}\n', '}']