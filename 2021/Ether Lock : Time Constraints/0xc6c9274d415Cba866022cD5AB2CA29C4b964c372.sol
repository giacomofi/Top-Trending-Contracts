['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface DaiPartialToken {\n', '    function allowance(\n', '        address holder,\n', '        address spender\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '\n', '    function permit(\n', '        address holder,\n', '        address spender,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        bool allowed,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '        external;\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '}\n', '\n', 'interface DaiPartialBridge {\n', '    function relayTokens(\n', '        address from,\n', '        address receiver,\n', '        uint256 amount\n', '    )\n', '        external;\n', '}\n', '\n', 'contract DaiBridgeProxy {\n', '    uint256 constant private DAI_TOKEN_MAX_ALLOWANCE = uint(-1);\n', '\n', '    DaiPartialToken public daiToken;\n', '    DaiPartialBridge public daiBridge;\n', '\n', '    constructor(address daiToken_, address daiBridge_) public {\n', '        daiToken = DaiPartialToken(daiToken_);\n', '        daiBridge = DaiPartialBridge(daiBridge_);\n', '    }\n', '\n', '    function depositWithPermit(\n', '        uint amount,\n', '        address recipient,\n', '        uint256 permitNonce,\n', '        uint256 permitExpiry,\n', '        uint8 permitV,\n', '        bytes32 permitR,\n', '        bytes32 permitS\n', '    ) external {\n', '        if (daiToken.allowance(msg.sender, address(this)) < amount) {\n', '            daiToken.permit(\n', '                msg.sender,\n', '                address(this),\n', '                permitNonce,\n', '                permitExpiry,\n', '                true,\n', '                permitV,\n', '                permitR,\n', '                permitS\n', '            );\n', '        }\n', '        depositFor(amount, recipient);\n', '    }\n', '\n', '    function depositFor(uint amount, address recipient) public {\n', '        daiToken.transferFrom(msg.sender, address(this), amount);\n', '        if (daiToken.allowance(address(this), address(daiBridge)) < amount) {\n', '            daiToken.approve(address(daiBridge), DAI_TOKEN_MAX_ALLOWANCE);\n', '        }\n', '        daiBridge.relayTokens(address(this), recipient, amount);\n', '    }\n', '}']