['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: browser/NyanManager.sol\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', '\n', 'contract Proxiable {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '\n', '    function updateCodeAddress(address newAddress) internal {\n', '        require(\n', '            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\n', '            "Not compatible"\n', '        );\n', '        assembly { // solium-disable-line\n', '            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\n', '        }\n', '    }\n', '    function proxiableUUID() public pure returns (bytes32) {\n', '        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\n', '    }\n', '}\n', '\n', 'contract LibraryLockDataLayout {\n', '  bool public initialized = false;\n', '}\n', '\n', 'contract LibraryLock is LibraryLockDataLayout {\n', '    // Ensures no one can manipulate the Logic Contract once it is deployed.\n', '    // PARITY WALLET HACK PREVENTION\n', '\n', '    modifier delegatedOnly() {\n', '        require(initialized == true, "The library is locked. No direct \'call\' is allowed");\n', '        _;\n', '    }\n', '    function initialize() internal {\n', '        initialized = true;\n', '    }\n', '}\n', '\n', 'contract ManagerDataLayout is LibraryLock {\n', '    address public owner;\n', '    address public nyanVoting;\n', '    address[] public managers;\n', '    struct eachManager {\n', '        uint256 allowance;\n', '        uint256 totalAllowanceReturned;\n', '        uint256 profits;\n', '        uint32 ROI;\n', '        uint256 lastCheckInBlock;\n', '        bool isManager;\n', '        address[] usedContracts;\n', '        string name;\n', '        uint256[] profitHistory;\n', '        uint256[] holdingsHistory;\n', '        uint256 collateral;\n', '    }\n', '    mapping(address => eachManager) public managerStruct;\n', '    \n', '    uint256 public initialAllowance;\n', '    uint256 public nextVotingPeriod;\n', '    uint256 public votingBuffer;\n', '    bool public canBeginVoting;\n', '    \n', '    \n', '    struct eachCandidate {\n', '        uint256 votes;\n', '        uint256 lastVotingBlock;\n', '        string name;\n', '    }\n', '    mapping(address => eachCandidate) public managerCandidates;\n', '    address public topCandidate;\n', '    uint256 public topCandidateVotes;\n', '    address[] public allCandidates;\n', '    bool public isSelfManager;\n', '    uint32 public managerLimit;\n', '    \n', '    using SafeMath for uint32;\n', '    using SafeMath for uint256;\n', '    \n', '    address public fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\n', '    address public connectorContract = 0x60d70dF1c783b1E5489721c443465684e2756555;\n', '    address public rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\n', '    address public devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\n', '    address public registry = 0x66BFd3ed6618D9C62DcF1eF706D9Aacd5FdBCCD6;\n', '    address public contractManager;\n', '    address public selfManager;\n', '}\n', '\n', 'interface usedContract {\n', '    function liquidateHoldings(address _manager) external returns(bool);\n', '    function sendETH(address _manager) external payable;\n', '    function isSelfManager(address _manager) external view returns(bool);\n', '}\n', '\n', 'contract connector {\n', '    function fundLog(address manager, string calldata reason, address recipient) public payable {}\n', '}\n', '\n', 'contract NyanManager is Proxiable, ManagerDataLayout {\n', '    \n', '    modifier _onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '    \n', '    constructor() public {\n', '        \n', '    }\n', '    \n', '    function initConstructor(uint32 _managerLimit, uint256 _votingBuffer, uint256 _initialAllowance) public {\n', '        require(!initialized);\n', '        owner = msg.sender;\n', '        managerLimit = _managerLimit;\n', '        votingBuffer = _votingBuffer;\n', '        initialAllowance = _initialAllowance;\n', '        nextVotingPeriod = block.number;\n', '        initialize();\n', '    }\n', '    \n', '    function updateCode(address newCode) public delegatedOnly  {\n', '        if (owner == address(0)) {\n', '            require(msg.sender == contractManager);\n', '        } else {\n', '            require(msg.sender == owner);\n', '        }\n', '        updateCodeAddress(newCode);\n', '    }\n', '    \n', '    function relinquishOwnership()public _onlyOwner delegatedOnly {\n', '        owner = address(0);\n', '    } \n', '    \n', '    function setContracts(address _contractManager, address _selfManager) public _onlyOwner delegatedOnly {\n', '        contractManager = _contractManager;\n', '        selfManager = _selfManager;\n', '    }\n', '    \n', '    function registerCandidate(string memory name) public payable delegatedOnly {\n', '        require(!usedContract(selfManager).isSelfManager(msg.sender), "This address is self managing");\n', '        if (managers.length == managerLimit) {\n', '            require(block.number > nextVotingPeriod, "Voting period has not started");\n', '        }\n', '        require(msg.value >= .05 ether);\n', '        bool isCandidate;\n', '        for(uint32 i; i < allCandidates.length; i++) {\n', '            if (allCandidates[i] == msg.sender) {\n', '                isCandidate = true;\n', '            }\n', '        }\n', '        if (!isCandidate) {\n', '            managerCandidates[msg.sender].name = name;\n', '            managerCandidates[msg.sender].votes = msg.value;\n', '            allCandidates.push(msg.sender);\n', '        }\n', '        connector(connectorContract).fundLog(msg.sender, "manager application", fundContract);\n', '        rewardsContract.call{value: msg.value.div(2).sub(5)}("");\n', '    }\n', '    \n', '    \n', '    function setManagerLimit(uint32 limit) public _onlyOwner delegatedOnly {\n', '        managerLimit = limit;\n', '    }\n', '    \n', '    function replaceManager(address newManager, uint256 index) public payable delegatedOnly {\n', '        require(canBeginVoting);\n', '        require(block.number > nextVotingPeriod, "Voting period has not started");\n', '        if (managerLimit == managers.length) {\n', '            require(block.number < nextVotingPeriod.add(votingBuffer), "Voting period has ended");\n', '        } else {\n', '            require(block.number < nextVotingPeriod.add(13000), "Voting period has ended");\n', '        }\n', '        \n', '        require(allCandidates[index] == newManager);\n', '        if (managerCandidates[newManager].lastVotingBlock < nextVotingPeriod) {\n', '            managerCandidates[newManager].votes = 0;\n', '        }\n', '        managerCandidates[newManager].votes = managerCandidates[newManager].votes.add(msg.value);\n', '        //if candidate total votes are higher than topCandidate,\n', '        //candidate is the new top candidate\n', '        if (managerCandidates[newManager].votes > topCandidateVotes) {\n', '            topCandidate = newManager;\n', '        }\n', '        managerCandidates[newManager].lastVotingBlock = block.number;\n', '        connector(connectorContract).fundLog(newManager, "manager vote", fundContract);\n', '        rewardsContract.call{value: msg.value.div(2).sub(5)}("");\n', '    }\n', '    \n', '    function finalizeNewManager() public delegatedOnly {\n', '        if (managers.length == managerLimit) {\n', '            require(block.number > nextVotingPeriod.add(votingBuffer), "Voting period has not entered finalize period");\n', '        }\n', '        require(topCandidate != address(0));\n', '        address[] memory emptyArr;\n', '        \n', '        if (managerLimit == managers.length) {\n', '            //remove lowest profiting manager from array and reset struct\n', '            address lowestManager = managers[0];\n', '            uint256 lowestManagerProfits = managerStruct[managers[0]].profits;\n', '            uint index;\n', '            for(uint32 i; i < managers.length; i++) {\n', '                if (managerStruct[managers[i]].profits < lowestManagerProfits) {\n', '                    address lowestManager = managers[i];\n', '                    uint256 lowestManagerProfits = managerStruct[managers[i]].profits;\n', '                    index = i;\n', '                }\n', '            }\n', '            //remove manager from array\n', '            removeManager(index);\n', '            //liquidate old manager\n', '            liquidateOldManager(lowestManager);\n', '            //reset lowestManager\n', '            managerStruct[lowestManager].allowance = 0;\n', '            managerStruct[lowestManager].lastCheckInBlock = block.number;\n', '            managerStruct[lowestManager].isManager = false;\n', '            managerStruct[lowestManager].collateral = 0;\n', '            managerStruct[lowestManager].usedContracts = emptyArr;\n', '            //add topCandidate to array and set up struct\n', '        }\n', '        \n', '        managers.push(topCandidate);\n', '        managerStruct[topCandidate].isManager = true;\n', '        //reset topCandidate\n', '        topCandidate = address(0);\n', '        topCandidateVotes = 0;\n', '        \n', '        if (managerLimit > managers.length) {\n', '            nextVotingPeriod = block.number.add(13000);\n', '        } else {\n', '            nextVotingPeriod = block.number.add(votingBuffer);\n', '            allCandidates = emptyArr;\n', '        }\n', '    }\n', '    \n', '    function removeManager(uint index) internal {\n', '        managers[index] = managers[managers.length-1];\n', '        delete managers[managers.length-1];\n', '        managers.pop();\n', '    }\n', '    \n', '    function liquidateOldManager(address manager) internal {\n', "        //loop through manager's used contracts and call liquidate function\n", '        for (uint32 i; i < managerStruct[manager].usedContracts.length; i++) {\n', '            bool liquidated = usedContract(managerStruct[manager].usedContracts[i]).liquidateHoldings(manager);\n', '        }\n', '    }\n', '    \n', '    function getManagerLimit() public returns(uint32) {\n', '        return managerLimit;\n', '    }\n', '    \n', '    function beginVoting() public delegatedOnly {\n', '        require(msg.sender == owner);\n', '        canBeginVoting = true;\n', '        nextVotingPeriod = block.number;\n', '    }\n', '    \n', '    function checkFundManagerAllowance(address _manager, uint256 ETH) public delegatedOnly returns(bool) {\n', '        require(msg.sender == registry);\n', '        require(managerStruct[_manager].allowance >= ETH, "Fund Manager: Insufficient allowance");\n', '        managerStruct[_manager].allowance = managerStruct[_manager].allowance.sub(ETH);\n', '        managerStruct[_manager].holdingsHistory.push(managerStruct[_manager].allowance);\n', '        return true;\n', '    }\n', '    \n', '    function adjustFundManagerAllowance(address _manager, uint256 ETH, uint256 profit) public delegatedOnly {\n', '        require(msg.sender == registry);\n', '        //increase holdings by ETH\n', '        managerStruct[_manager].allowance = managerStruct[_manager].allowance.add(ETH);\n', '        //update holdings history\n', '        managerStruct[_manager].holdingsHistory.push(managerStruct[_manager].allowance);\n', '        //increase profits by profit amount\n', '        managerStruct[_manager].profits = managerStruct[_manager].profits.add(profit);\n', '        //update profit history\n', '        managerStruct[_manager].profitHistory.push(managerStruct[_manager].profits);\n', '    }\n', '    \n', '    function isFundManager(address manager) public view returns(bool) {\n', '        return managerStruct[manager].isManager;\n', '    }\n', '    \n', '    function updateROI() internal {\n', '       \n', '    }\n', '    \n', '    function checkIn(address _manager) internal delegatedOnly {\n', '        if(block.number.sub(managerStruct[_manager].lastCheckInBlock) > 6500) {\n', '            managerStruct[_manager].lastCheckInBlock = block.number;\n', '        }\n', '    }\n', '    \n', '    function manualCheckIn() public delegatedOnly {\n', '        managerStruct[msg.sender].lastCheckInBlock = block.number;\n', '    }\n', '    \n', '    \n', '    receive() external payable {\n', '        \n', '    }\n', '}']