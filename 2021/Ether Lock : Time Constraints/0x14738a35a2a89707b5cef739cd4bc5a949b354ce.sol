['// SPDX-License-Identifier: LGPL-3.0-or-later\n', 'pragma solidity 0.5.17;\n', '\n', 'import "./Math.sol";\n', 'import "./SafeMath.sol";\n', 'import "./DextokenPoolInflation.sol";\n', '\n', '\n', 'contract DextokenFactoryInflation {\n', '    using SafeMath for uint;\n', '\n', '    event PoolCreated(address indexed token0, address indexed pair, address indexed creator, uint);\n', '\n', '    address public owner;\n', '    address public feePool;\n', '    address public WETH;\n', '\n', '    mapping(address => mapping(address => address)) private _allPools;\n', '    address [] public allPoolsAddress;\n', '\n', '    constructor(address token1) public {\n', '        owner = msg.sender;\n', '        feePool = address(0);\n', '        WETH = token1;\n', '    }\n', '\n', '    function createPool(address token0, uint Ct, uint Pt) external returns (address pool) {\n', "        require(token0 != address(0), 'createPool: zero address');\n", "        require(feePool != address(0), 'createPool: feePool not set');\n", "        require(_allPools[token0][msg.sender] == address(0), 'createPool: user pool exists');\n", '        bytes memory bytecode = type(DextokenPoolInflation).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, WETH, msg.sender));\n', '        /// precompute the address where a contract will be deployed\n', '        assembly {\n', '            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        IDextokenPool(pool).initialize(token0, WETH, Ct, Pt);\n', '        _allPools[token0][msg.sender] = pool;\n', '        allPoolsAddress.push(pool);\n', '        emit PoolCreated(token0, pool, msg.sender, allPoolsAddress.length);\n', '        return pool;\n', '    }\n', '\n', '    function getFeePool() external view returns (address) {\n', '        return feePool;\n', '    }\n', '\n', '    function setFeePool(address _feePool) external {\n', '        require(msg.sender == owner, "setFeePool: Forbidden");\n', '        feePool = _feePool;\n', '    }\n', '\n', '    function getAllPools() external view returns (address [] memory) {\n', '        return allPoolsAddress;\n', '    }   \n', '}']