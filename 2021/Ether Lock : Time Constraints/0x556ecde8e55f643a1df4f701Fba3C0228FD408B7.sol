['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./IATokenV1.sol";\n', 'import "./ICToken.sol";\n', 'import "./IComptroller.sol";\n', 'import "./ISushiBar.sol";\n', 'import "./ILendingPoolV1.sol";\n', 'import "./ICompoundLens.sol";\n', 'import "./IUniswapV2.sol";\n', 'import "./IBasicIssuanceModule.sol";\n', 'import "./IOneInch.sol";\n', '\n', 'import "./SafeMath.sol";\n', 'import "./ERC20.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', 'import "./BMIBurner.sol";\n', 'import "./SocialZapperBase.sol";\n', '\n', '// Basket Weaver is a way to socialize gas costs related to minting baskets tokens\n', 'contract SocialBMIBurner is SocialZapperBase {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public bmiBurner;\n', '    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '\n', '    constructor(\n', '        address _governance,\n', '        address _bmi,\n', '        address _bmiBurner\n', '    ) SocialZapperBase(_governance, _bmi) {\n', '        bmiBurner = _bmiBurner;\n', '    }\n', '\n', '    function socialBurn(\n', '        uint256 _minRecv,\n', '        uint256 deadline\n', '    ) public onlyWeavers returns (uint256) {\n', '        require(block.timestamp <= deadline, "expired");\n', '\n', '        address _from = bmi;\n', '        uint256 _fromAmount = IERC20(_from).balanceOf(address(this));\n', '\n', '        IERC20(_from).safeApprove(bmiBurner, 0);\n', '        IERC20(_from).safeApprove(bmiBurner, _fromAmount);\n', '\n', '        uint256 bmiBurned = BMIBurner(bmiBurner).burnBMIToUSDC(_fromAmount, _minRecv);\n', '\n', '        zapped[_from][curId[_from]] = bmiBurned;\n', '\n', '        curId[_from]++;\n', '\n', '        return bmiBurned;\n', '    }\n', '\n', '    /// @notice User withdraws converted Basket token\n', '    function withdrawUSDC(address _token, uint256 _id) public {\n', '        _withdrawZapped(USDC, _token, _id);\n', '    }\n', '\n', '    /// @notice User withdraws converted Basket token\n', '    function withdrawUSDCMany(address[] memory _tokens, uint256[] memory _ids) public {\n', '        _withdrawZappedMany(USDC, _tokens, _ids);\n', '    }\n', '}']