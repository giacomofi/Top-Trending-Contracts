['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '//Team Token Locking Contract\n', 'pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * token contract functions\n', '*/\n', 'contract Token {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal constant returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract owned {\n', '        address public owner;\n', '\n', '        function owned() public {\n', '            owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '}\n', '\n', 'contract lockToken is owned{\n', '    using SafeMath for uint256;\n', '    \n', '    /*\n', '     * deposit vars\n', '    */\n', '    struct Items {\n', '        address tokenAddress;\n', '        address withdrawalAddress;\n', '        uint256 tokenAmount;\n', '        uint256 unlockTime;\n', '        bool withdrawn;\n', '    }\n', '    \n', '    uint256 public depositId;\n', '    uint256[] public allDepositIds;\n', '    mapping (address => uint256[]) public depositsByWithdrawalAddress;\n', '    mapping (uint256 => Items) public lockedToken;\n', '    mapping (address => mapping(address => uint256)) public walletTokenBalance;\n', '    \n', '    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\n', '    \n', '    /**\n', '     *lock tokens\n', '    */\n', '    function lockTokens(address _tokenAddress, address _withdrawalAddress, uint256 _amount, uint256 _unlockTime) public returns (uint256 _id) {\n', '        require(_amount > 0);\n', '        require(_unlockTime < 10000000000);\n', '        \n', '        //update balance in address\n', '        walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(_amount);\n', '        \n', '        _id = ++depositId;\n', '        lockedToken[_id].tokenAddress = _tokenAddress;\n', '        lockedToken[_id].withdrawalAddress = _withdrawalAddress;\n', '        lockedToken[_id].tokenAmount = _amount;\n', '        lockedToken[_id].unlockTime = _unlockTime;\n', '        lockedToken[_id].withdrawn = false;\n', '        \n', '        allDepositIds.push(_id);\n', '        depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\n', '        \n', '        // transfer tokens into contract\n', '        require(Token(_tokenAddress).transferFrom(msg.sender, this, _amount));\n', '    }\n', '    \n', '    /**\n', '     *Create multiple locks\n', '    */\n', '    function createMultipleLocks(address _tokenAddress, address _withdrawalAddress, uint256[] _amounts, uint256[] _unlockTimes) public returns (uint256 _id) {\n', '        require(_amounts.length > 0);\n', '        require(_amounts.length == _unlockTimes.length);\n', '        \n', '        uint256 i;\n', '        for(i=0; i<_amounts.length; i++){\n', '            require(_amounts[i] > 0);\n', '            require(_unlockTimes[i] < 10000000000);\n', '            \n', '            //update balance in address\n', '            walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(_amounts[i]);\n', '            \n', '            _id = ++depositId;\n', '            lockedToken[_id].tokenAddress = _tokenAddress;\n', '            lockedToken[_id].withdrawalAddress = _withdrawalAddress;\n', '            lockedToken[_id].tokenAmount = _amounts[i];\n', '            lockedToken[_id].unlockTime = _unlockTimes[i];\n', '            lockedToken[_id].withdrawn = false;\n', '            \n', '            allDepositIds.push(_id);\n', '            depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\n', '            \n', '            //transfer tokens into contract\n', '            require(Token(_tokenAddress).transferFrom(msg.sender, this, _amounts[i]));\n', '        }\n', '    }\n', '    \n', '    /**\n', '     *Extend lock Duration\n', '    */\n', '    function extendLockDuration(uint256 _id, uint256 _unlockTime) public {\n', '        require(_unlockTime < 10000000000);\n', '        require(_unlockTime > lockedToken[_id].unlockTime);\n', '        require(!lockedToken[_id].withdrawn);\n', '        require(msg.sender == lockedToken[_id].withdrawalAddress);\n', '        \n', '        //set new unlock time\n', '        lockedToken[_id].unlockTime = _unlockTime;\n', '    }\n', '    \n', '    /**\n', '     *transfer locked tokens\n', '    */\n', '    function transferLocks(uint256 _id, address _receiverAddress) public {\n', '        require(!lockedToken[_id].withdrawn);\n', '        require(msg.sender == lockedToken[_id].withdrawalAddress);\n', '        \n', "        //decrease sender's token balance\n", '        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\n', '        \n', "        //increase receiver's token balance\n", '        walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress] = walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress].add(lockedToken[_id].tokenAmount);\n', '        \n', '        //remove this id from sender address\n', '        uint256 j;\n', '        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\n', '        for (j=0; j<arrLength; j++) {\n', '            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\n', '                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\n', '                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\n', '                break;\n', '            }\n', '        }\n', '        \n', '        //Assign this id to receiver address\n', '        lockedToken[_id].withdrawalAddress = _receiverAddress;\n', '        depositsByWithdrawalAddress[_receiverAddress].push(_id);\n', '    }\n', '    \n', '    /**\n', '     *withdraw tokens\n', '    */\n', '    function withdrawTokens(uint256 _id) public {\n', '        require(block.timestamp >= lockedToken[_id].unlockTime);\n', '        require(msg.sender == lockedToken[_id].withdrawalAddress);\n', '        require(!lockedToken[_id].withdrawn);\n', '        \n', '        \n', '        lockedToken[_id].withdrawn = true;\n', '        \n', '        //update balance in address\n', '        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\n', '        \n', '        //remove this id from this address\n', '        uint256 j;\n', '        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\n', '        for (j=0; j<arrLength; j++) {\n', '            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\n', '                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\n', '                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\n', '                break;\n', '            }\n', '        }\n', '        \n', '        // transfer tokens to wallet address\n', '        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount));\n', '        LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\n', '    }\n', '\n', '     /*get total token balance in contract*/\n', '    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\n', '    {\n', '       return Token(_tokenAddress).balanceOf(this);\n', '    }\n', '    \n', '    /*get total token balance by address*/\n', '    function getTokenBalanceByAddress(address _tokenAddress, address _walletAddress) view public returns (uint256)\n', '    {\n', '       return walletTokenBalance[_tokenAddress][_walletAddress];\n', '    }\n', '    \n', '    /*get allDepositIds*/\n', '    function getAllDepositIds() view public returns (uint256[])\n', '    {\n', '        return allDepositIds;\n', '    }\n', '    \n', '    /*get getDepositDetails*/\n', '    function getDepositDetails(uint256 _id) view public returns (address _tokenAddress, address _withdrawalAddress, uint256 _tokenAmount, uint256 _unlockTime, bool _withdrawn)\n', '    {\n', '        return(lockedToken[_id].tokenAddress,lockedToken[_id].withdrawalAddress,lockedToken[_id].tokenAmount,\n', '        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\n', '    }\n', '    \n', '    /*get DepositsByWithdrawalAddress*/\n', '    function getDepositsByWithdrawalAddress(address _withdrawalAddress) view public returns (uint256[])\n', '    {\n', '        return depositsByWithdrawalAddress[_withdrawalAddress];\n', '    }\n', '    \n', '}']