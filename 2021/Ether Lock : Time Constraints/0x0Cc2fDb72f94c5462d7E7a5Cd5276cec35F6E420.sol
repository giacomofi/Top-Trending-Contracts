['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./OwnableUpgradeSafe.sol";\n', 'import "./IXAUToken.sol";\n', 'import "./IERC20.sol";\n', '\n', '// Vault distributing incoming elastic token rewards equally amongst staked pools\n', 'contract Vault is OwnableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many  tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below. // elastic, in token underlying units\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of reward tokens\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws  tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 token; // Address of  token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per block.\n', '        uint256 accRewardPerShare; // Accumulated token underlying units per share, times 1e12. See below.\n', '        bool withdrawable; // Is this pool withdrawable?\n', '        mapping(address => mapping(address => uint256)) allowance;\n', '\n', '    }\n', '\n', '    // A reward token\n', '    IXAUToken public rewardToken;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes  tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint;\n', '\n', '    //// pending rewards awaiting anyone to massUpdate\n', '    uint256 public pendingRewards;  // elastic, in token underlying units\n', '\n', '    uint256 public contractStartBlock;\n', '    uint256 public epochCalculationStartBlock;\n', '    uint256 public cumulativeRewardsSinceStart;  // elastic, in token underlying units\n', '    uint256 public rewardsInThisEpoch;           // elastic, in token underlying units\n', '    uint public epoch;\n', '\n', '    // Dev address.\n', '    address public devFeeReceiver;\n', '    uint16 public devFeePercentX100;\n', '    uint256 public pendingDevRewards;  // elastic, in token underlying units\n', '\n', '    // Returns average rewards generated since start of this contract\n', '    function averageRewardPerBlockSinceStart() external view returns (uint averagePerBlock) {\n', '        averagePerBlock = cumulativeRewardsSinceStart.add(rewardsInThisEpoch).div(block.number.sub(contractStartBlock));\n', '    }        \n', '\n', '    // Returns averge reward in this epoch\n', '    function averageRewardPerBlockEpoch() external view returns (uint256 averagePerBlock) {\n', '        averagePerBlock = rewardsInThisEpoch.div(block.number.sub(epochCalculationStartBlock));\n', '    }\n', '\n', '    // For easy graphing historical epoch rewards\n', '    mapping(uint => uint256) public epochRewards;\n', '\n', '    // Starts a new calculation epoch\n', '    // Because averge since start will not be accurate\n', '    function startNewEpoch() public {\n', '        require(epochCalculationStartBlock + 50000 < block.number, "New epoch not ready yet"); // About a week\n', '        epochRewards[epoch] = rewardsInThisEpoch;\n', '        cumulativeRewardsSinceStart = cumulativeRewardsSinceStart.add(rewardsInThisEpoch);\n', '        rewardsInThisEpoch = 0;\n', '        epochCalculationStartBlock = block.number;\n', '        ++epoch;\n', '    }\n', '\n', '    event NewDevFeeReceiver(address oldDevFeeReceiver, address newDevFeeReceiver);\n', '    event NewDevFeePercentX100(uint256 oldDevFeePercentX100, uint256 newDevFeePercentX100);\n', '    \n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '    event MigrationWithdraw(\n', '        address indexed user,\n', '        address indexed newVault,\n', '        uint256 amount\n', '    );\n', '    event Approval(address indexed owner, address indexed spender, uint256 _pid, uint256 value);\n', '\n', '    function initialize(\n', '        IXAUToken _rewardToken,\n', '        address _devFeeReceiver, \n', '        uint16 _devFeePercentX100\n', '    ) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        devFeePercentX100 = _devFeePercentX100;\n', '        rewardToken = _rewardToken;\n', '        devFeeReceiver = _devFeeReceiver;\n', '        contractStartBlock = block.number;\n', '        epochCalculationStartBlock = block.number;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new token pool. Can only be called by the owner. \n', '    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _token,\n', '        bool _withUpdate,\n', '        bool _withdrawable\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            require(poolInfo[pid].token != _token, "Error pool already added");\n', '        }\n', '\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                token: _token,\n', '                allocPoint: _allocPoint,\n', '                accRewardPerShare: 0,\n', '                withdrawable: _withdrawable\n', '            })\n', '        );\n', '    }\n', '\n', "    // Update the given pool's reward tokens allocation point. Can only be called by the owner.\n", '    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\n', '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        \n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', "    // Update the given pool's ability to withdraw tokens\n", '    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\n', '    function setPoolWithdrawable(\n', '        uint256 _pid,\n', '        bool _withdrawable\n', '    ) public onlyOwner {\n', '        poolInfo[_pid].withdrawable = _withdrawable;\n', '    }\n', '\n', '    // Sets the dev fee for this contract\n', '    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\n', '    function setDevFeePercentX100(uint16 _devFeePercentX100) public onlyOwner {\n', "        require(_devFeePercentX100 <= 1000, 'Dev fee clamped at 10%');\n", '        uint256 oldDevFeePercentX100 = devFeePercentX100;\n', '        devFeePercentX100 = _devFeePercentX100;\n', '        emit NewDevFeePercentX100(oldDevFeePercentX100, _devFeePercentX100);\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    // Note onlyOwner functions are meant for the governance contract\n', '    // allowing reward token governance token holders to do this functions.\n', '    function setDevFeeReceiver(address _devFeeReceiver) public onlyOwner {\n', '        address oldDevFeeReceiver = devFeeReceiver;\n', '        devFeeReceiver = _devFeeReceiver;\n', '        emit NewDevFeeReceiver(oldDevFeeReceiver, _devFeeReceiver);\n', '    }\n', '\n', '    // View function to see pending reward tokens on frontend.\n', '    function pendingToken(uint256 _pid, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accRewardPerShare = pool.accRewardPerShare;\n', '        \n', '        return rewardToken.fromUnderlying(user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt));\n', '    }\n', '\n', '    // View function to see pending reward tokens on frontend.\n', '    function pendingTokenActual(uint256 _pid, address _user) public view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 tokenSupply = pool.token.balanceOf(address(this));\n', '        if (tokenSupply == 0) { // avoids division by 0 errors\n', '            return 0;\n', '        }\n', '        uint256 rewardWhole = pendingRewards // Multiplies pending rewards by allocation point of this pool and then total allocation\n', '            .mul(pool.allocPoint)        // getting the percent of total pending rewards this pool should get\n', '            .div(totalAllocPoint);       // we can do this because pools are only mass updated\n', '        uint256 rewardFee = rewardWhole.mul(devFeePercentX100).div(10000);\n', '        uint256 rewardToDistribute = rewardWhole.sub(rewardFee);\n', '        uint256 accRewardPerShare = pool.accRewardPerShare.add(rewardToDistribute.mul(1e12).div(tokenSupply));\n', '\n', '        return rewardToken.fromUnderlying(user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt));\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        uint allRewards;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            allRewards = allRewards.add(updatePool(pid));\n', '        }\n', '\n', '        pendingRewards = pendingRewards.sub(allRewards);\n', '    }\n', '\n', '    // Function that adds pending rewards, called by the reward token.\n', '    uint256 private rewardTokenBalance;\n', '    function addPendingRewards(uint256 /* _ */) public {\n', '        uint256 newRewards = rewardToken.balanceOfUnderlying(address(this)).sub(rewardTokenBalance);  // elastic\n', '        \n', '        if (newRewards > 0) {\n', "            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this)); // If there is no change the balance didn't change  // elastic\n", '            pendingRewards = pendingRewards.add(newRewards);\n', '            rewardsInThisEpoch = rewardsInThisEpoch.add(newRewards);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) internal returns (uint256 rewardWhole) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        uint256 tokenSupply = pool.token.balanceOf(address(this));\n', '        if (tokenSupply == 0) { // avoids division by 0 errors\n', '            return 0;\n', '        }\n', '        rewardWhole = pendingRewards // Multiplies pending rewards by allocation point of this pool and then total allocation\n', '            .mul(pool.allocPoint)        // getting the percent of total pending rewards this pool should get\n', '            .div(totalAllocPoint);       // we can do this because pools are only mass updated\n', '        uint256 rewardFee = rewardWhole.mul(devFeePercentX100).div(10000);\n', '        uint256 rewardToDistribute = rewardWhole.sub(rewardFee);\n', '\n', '        pendingDevRewards = pendingDevRewards.add(rewardFee);\n', '\n', '        pool.accRewardPerShare = pool.accRewardPerShare.add(\n', '            rewardToDistribute.mul(1e12).div(tokenSupply)\n', '        );\n', '    }\n', '\n', '    // Deposit user tokens to vault for reward token allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '\n', '        massUpdatePools();\n', '        \n', '        // Transfer pending tokens\n', '        // to user\n', '        updateAndPayOutPending(_pid, msg.sender); // https://kovan.etherscan.io/tx/0xbd6a42d7ca389be178a2e825b7a242d60189abcfbea3e4276598c0bb28c143c9 // TODO: INVESTIGATE\n', '\n', '\n', '\n', '        // Transfer in the amounts from user\n', '        // save gas\n', '        if (_amount > 0) {\n', '            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does user get the deposited amounts?\n', '    // [x] Does user that its deposited for update correcty?\n', '    // [x] Does the depositor get their tokens decreased\n', '    function depositFor(address _depositFor, uint256 _pid, uint256 _amount) public {\n', '        // requires no allowances\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_depositFor];\n', '\n', '        massUpdatePools();\n', '        \n', '        // Transfer pending tokens\n', '        // to user\n', '        updateAndPayOutPending(_pid, _depositFor);  // Update the balances of person that amount is being deposited for\n', '\n', '        if (_amount > 0) {\n', '            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);  // This is depositedFor address\n', '        }\n', '\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);  /// This is deposited for address\n', '        emit Deposit(_depositFor, _pid, _amount);\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does allowance update correctly?\n', '    function setAllowanceForPoolToken(address spender, uint256 _pid, uint256 value) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, _pid, value);\n', '    }\n', '\n', '    // Test coverage\n', '    // [x] Does allowance decrease?\n', '    // [x] Do oyu need allowance\n', '    // [x] Withdraws to correct address\n', '    function withdrawFrom(address owner, uint256 _pid, uint256 _amount) public {\n', '        \n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.allowance[owner][msg.sender] >= _amount, "withdraw: insufficient allowance");\n', '        pool.allowance[owner][msg.sender] = pool.allowance[owner][msg.sender].sub(_amount);\n', '        _withdraw(_pid, _amount, owner, msg.sender);\n', '\n', '    }\n', '    \n', '    // Withdraw user tokens from vault\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '\n', '        _withdraw(_pid, _amount, msg.sender, msg.sender);\n', '\n', '    }\n', '    \n', '    // Low level withdraw function\n', '    function _withdraw(uint256 _pid, uint256 _amount, address from, address to) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.withdrawable, "Withdrawing from this pool is disabled");\n', '        UserInfo storage user = userInfo[_pid][from];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '\n', '        massUpdatePools();\n', '        updateAndPayOutPending(_pid, from); // Update balances of from this is not withdrawal but claiming rewards farmed\n', '\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.token.safeTransfer(address(to), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n', '\n', '        emit Withdraw(to, _pid, _amount);\n', '    }\n', '\n', '    function updateAndPayOutPending(uint256 _pid, address from) internal {\n', '\n', '        uint256 pending = pendingToken(_pid, from);\n', '\n', '        if (pending > 0) {\n', '            safeRewardTokenTransfer(from, pending);\n', '        }\n', '    }\n', '\n', '    // Function that lets owner/governance contract approve\n', '    // allowance for any 3rd party token inside this contract.\n', '    // This means all future UNI like airdrops are covered.\n', '    // And at the same time allows us to give allowance to strategy contracts.\n', '    function setStrategyContractOrDistributionContractAllowance(address tokenAddress, uint256 _amount, address contractAddress) public onlyOwner {\n', '        require(isContract(contractAddress), "Recipent is not a smart contract");\n', '        require(tokenAddress != address(rewardToken), "Reward token allowance not allowed");\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; pid++) {\n', '            require(tokenAddress != address(poolInfo[pid].token), "Pool token allowance not allowed");\n', '        }\n', '\n', '        IERC20(tokenAddress).approve(contractAddress, _amount);\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function migrateTokensToNewVault(address _newVault) public virtual onlyOwner {\n', '        require(_newVault != address(0), "Vault: new vault is the zero address");\n', '        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\n', '        safeRewardTokenTransfer(_newVault, rewardTokenBalErc);\n', '        emit MigrationWithdraw(msg.sender, _newVault, rewardTokenBalErc);\n', '        rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    // !Caution this will remove all your pending rewards!\n', '    function emergencyWithdraw(uint256 _pid, address _to) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.withdrawable, "Withdrawing from this pool is disabled");\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 amount = user.amount;\n', '        // Note: transfer can fail or succeed if `amount` is zero.\n', '        if (amount > 0) {\n', '            pool.token.safeTransfer(_to, amount);\n', '            user.amount = 0;\n', '            user.rewardDebt = 0;\n', '        }\n', '        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\n', '    }\n', '\n', '    // Safe reward token transfer function, just in case if rounding error causes pool to not have enough reward tokens.\n', '    function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\n', '\n', '        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\n', '        \n', '        if (_amount > rewardTokenBalErc) {\n', '            rewardToken.transfer(_to, rewardTokenBalErc);  // elastic\n', '            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\n', '\n', '        } else {\n', '            rewardToken.transfer(_to, _amount);  // elastic\n', '            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\n', '\n', '        }\n', '        //Avoids possible recursion loop\n', '        // proxy?\n', '        transferDevFee();\n', '\n', '    }\n', '\n', '    function transferDevFee() public {\n', '        if (pendingDevRewards == 0) return;\n', '\n', '        uint256 pendingDevRewardsErc = rewardToken.fromUnderlying(pendingDevRewards);\n', '        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\n', '        \n', '        if (pendingDevRewardsErc > rewardTokenBalErc) {\n', '\n', '            rewardToken.transfer(devFeeReceiver, rewardTokenBalErc);  // elastic\n', '            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\n', '\n', '        } else {\n', '\n', '            rewardToken.transfer(devFeeReceiver, pendingDevRewardsErc);  // elastic\n', '            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\n', '\n', '        }\n', '\n', '        pendingDevRewards = 0;\n', '    }\n', '\n', '}']