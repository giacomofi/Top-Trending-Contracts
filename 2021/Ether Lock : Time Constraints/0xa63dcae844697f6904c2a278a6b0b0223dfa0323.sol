['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', '// File: contracts/Ownable.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Halt.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract Halt is Ownable {\n', '    \n', '    bool private halted = false; \n', '    \n', '    modifier notHalted() {\n', '        require(!halted,"This contract is halted");\n', '        _;\n', '    }\n', '\n', '    modifier isHalted() {\n', '        require(halted,"This contract is not halted");\n', '        _;\n', '    }\n', '    \n', '    /// @notice function Emergency situation that requires \n', '    /// @notice contribution period to stop or not.\n', '    function setHalt(bool halt) \n', '        public \n', '        onlyOwner\n', '    {\n', '        halted = halt;\n', '    }\n', '}\n', '\n', '// File: contracts/whiteList.sol\n', '\n', 'pragma solidity >=0.5.16;\n', '/**\n', ' * SPDX-License-Identifier: GPL-3.0-or-later\n', ' * FinNexus\n', ' * Copyright (C) 2020 FinNexus Options Protocol\n', ' */\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint32.\n', '     */\n', 'library whiteListUint32 {\n', '    /**\n', '     * @dev add uint32 into white list.\n', '     * @param whiteList the storage whiteList.\n', '     * @param temp input value\n', '     */\n', '\n', '    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\n', '        if (!isEligibleUint32(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    /**\n', '     * @dev remove uint32 from whitelist.\n', '     */\n', '    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint256.\n', '     */\n', 'library whiteListUint256 {\n', '    // add whiteList\n', '    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\n', '        if (!isEligibleUint256(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible address.\n', '     */\n', 'library whiteListAddress {\n', '    // add whiteList\n', '    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\n', '        if (!isEligibleAddress(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '\n', '// File: contracts/Operator.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * each operator can be granted exclusive access to specific functions.\n', ' *\n', ' */\n', 'contract Operator is Ownable {\n', '    mapping(uint256=>address) private _operators;\n', '    /**\n', '     * @dev modifier, Only indexed operator can be granted exclusive access to specific functions. \n', '     *\n', '     */\n', '    modifier onlyOperator(uint256 index) {\n', '        require(_operators[index] == msg.sender,"Operator: caller is not the eligible Operator");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev modify indexed operator by owner. \n', '     *\n', '     */\n', '    function setOperator(uint256 index,address addAddress)public onlyOwner{\n', '        _operators[index] = addAddress;\n', '    }\n', '    function getOperator(uint256 index)public view returns (address) {\n', '        return _operators[index];\n', '    }\n', '}\n', '\n', '// File: contracts/multiSignatureClient.sol\n', '\n', 'pragma solidity =0.5.16;\n', 'interface IMultiSignature{\n', '    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256);\n', '}\n', 'contract multiSignatureClient{\n', '    bytes32 private constant multiSignaturePositon = keccak256("org.Finnexus.multiSignature.storage");\n', '    constructor(address multiSignature) public {\n', '        require(multiSignature != address(0),"multiSignatureClient : Multiple signature contract address is zero!");\n', '        saveValue(multiSignaturePositon,uint256(multiSignature));\n', '    }    \n', '    function getMultiSignatureAddress()public view returns (address){\n', '        return address(getValue(multiSignaturePositon));\n', '    }\n', '    modifier validCall(){\n', '        checkMultiSignature();\n', '        _;\n', '    }\n', '    function checkMultiSignature() internal {\n', '        uint256 value;\n', '        assembly {\n', '            value := callvalue()\n', '        }\n', '        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));\n', '        address multiSign = getMultiSignatureAddress();\n', '        uint256 index = getValue(msgHash);\n', '        uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);\n', '        require(newIndex > 0, "multiSignatureClient : This tx is not aprroved");\n', '        saveValue(msgHash,newIndex);\n', '    }\n', '    function saveValue(bytes32 position,uint256 value) internal \n', '    {\n', '        assembly {\n', '            sstore(position, value)\n', '        }\n', '    }\n', '    function getValue(bytes32 position) internal view returns (uint256 value) {\n', '        assembly {\n', '            value := sload(position)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/TokenUnlockData.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', 'contract TokenUnlockData is multiSignatureClient,Operator,Halt {\n', '    //the locjed reward info\n', '\n', '    struct lockedItem {\n', '        uint256 startTime; //this tx startTime for locking\n', '        uint256 endTime;   //record input amount in each lock tx\n', '        uint256 amount;\n', '    }\n', '\n', '    struct lockedInfo {\n', '        uint256 wholeAmount;\n', '        uint256 pendingAmount;     //record input amount in each lock tx\n', '        uint256 totalItem;\n', '        bool    disable;\n', '        mapping (uint256 => lockedItem) alloc;//the allocation table\n', '    }\n', '\n', '    address public phxAddress;  //fnx token address\n', '\n', '    mapping (address => lockedInfo) public allLockedPhx;//converting tx record for each user\n', '\n', '    event SetUserPhxAlloc(address indexed owner, uint256 indexed amount,uint256 indexed worth);\n', '\n', '    event ClaimPhx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\n', '\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/IERC20.sol\n', '\n', 'pragma solidity =0.5.16;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/TokenUnlock.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\n', ' * @dev ERC20 token. Its inside value is collatral pool net worth.\n', ' *\n', ' */\n', 'contract TokenUnlock is TokenUnlockData {\n', '    using SafeMath for uint256;\n', '    modifier inited (){\n', '    \t  require(phxAddress !=address(0));\n', '    \t  _;\n', '    }\n', '\n', '    constructor(address _phxAddress,address _multiSignature)\n', '        multiSignatureClient(_multiSignature)\n', '        public\n', '    {\n', '        phxAddress = _phxAddress;\n', '    }\n', '\n', '\n', '\n', '    function update() public onlyOperator(0) {\n', '    }\n', '\n', '    /**\n', '     * @dev getting back the left mine token\n', '     * @param reciever the reciever for getting back mine token\n', '     */\n', '    function getbackLeftPhx(address reciever)  public onlyOperator(0) validCall {\n', '        uint256 bal =  IERC20(phxAddress).balanceOf(address(this));\n', '        IERC20(phxAddress).transfer(reciever,bal);\n', '    }  \n', '\n', '    function lockedBalanceOf(address user) public view returns (uint256) {\n', '        lockedInfo storage lr = allLockedPhx[user];\n', '        return lr.pendingAmount;\n', '    }\n', '\n', '    function getUserLockedItemInfo(address user,uint256 alloxidx) public view returns (uint256,uint256,uint256,bool) {\n', '        lockedItem storage lralloc = allLockedPhx[user].alloc[alloxidx];\n', '        return (lralloc.startTime,lralloc.endTime,lralloc.amount,allLockedPhx[user].disable);\n', '    }\n', '\n', '    function setMultiUsersPhxUnlockInfo( address[] memory users,\n', '                                      uint256[] memory amounts,\n', '                                      uint256[] memory startTimes,\n', '                                      uint256[] memory timeIntervals,\n', '                                      uint256[] memory allocTimes)\n', '        public\n', '        inited\n', '        onlyOperator(0)\n', '    {\n', '        require(users.length==amounts.length);\n', '        require(users.length==startTimes.length);\n', '        require(users.length==timeIntervals.length);\n', '        require(users.length==allocTimes.length);\n', '        uint256 i=0;\n', '        for(;i<users.length;i++){\n', '            _setUserPhxUnlockInfo(users[i],amounts[i],startTimes[i],timeIntervals[i],allocTimes[i]);\n', '        }\n', '    }\n', '\n', '\n', '    function setUserPhxUnlockInfo(address user,uint256 amount,uint256 startTime,uint256 timeInterval,uint256 allocTimes)\n', '        public\n', '        inited\n', '        onlyOperator(0)\n', '    {\n', '        _setUserPhxUnlockInfo(user,amount,startTime,timeInterval,allocTimes);\n', '    }\n', '\n', '    function _setUserPhxUnlockInfo(address user,uint256 amount,uint256 startTime,uint256 timeInterval,uint256 allocTimes)\n', '        internal\n', '    {\n', '        require(user!=address(0),"user address is 0");\n', '        require(amount>0,"amount should be bigger than 0");\n', '        require(timeInterval>0,"time interval is 0");\n', '        require(allocTimes>0,"alloc times is 0");\n', '        require(!allLockedPhx[user].disable,"user is diabled already");\n', '\n', '        uint256 lastIndex = allLockedPhx[user].totalItem;\n', '        if(lastIndex>0) {\n', '            require(startTime>= allLockedPhx[user].alloc[lastIndex-1].endTime,"starttime is earlier than last set");\n', '        }\n', '\n', '        uint256 divAmount = amount.div(allocTimes);\n', '        uint256 startIdx = allLockedPhx[user].totalItem;\n', '        uint256 i;\n', '        for (i=0;i<allocTimes;i++) {\n', '            allLockedPhx[user].alloc[startIdx+i] = lockedItem( startTime.add(i*timeInterval),\n', '                startTime.add((i+1)*timeInterval),\n', '                divAmount);\n', '        }\n', '\n', '        allLockedPhx[user].wholeAmount = allLockedPhx[user].wholeAmount.add(amount);\n', '        allLockedPhx[user].pendingAmount = allLockedPhx[user].pendingAmount.add(amount);\n', '        allLockedPhx[user].totalItem = allLockedPhx[user].totalItem.add(allocTimes);\n', '\n', '        emit SetUserPhxAlloc(user,amount,divAmount);\n', '    }\n', '\n', '\n', '    function resetUserPhxUnlockInfo(address user,uint256 roundidx,uint256 amount,uint256 startTime,uint256 endTime)\n', '            public\n', '            inited\n', '            onlyOperator(0)\n', '            \n', '    {\n', '        require(startTime<endTime,"startTime is later than endTime");\n', '        require(now< allLockedPhx[user].alloc[roundidx].endTime,"this alloc is expired already");\n', '        //reset do not need to check because, possible enabled after reset\n', '       // require(!allLockedPhx[user].disable,"user is diabled already");\n', '\n', '        allLockedPhx[user].alloc[roundidx].startTime = startTime;\n', '        allLockedPhx[user].alloc[roundidx].startTime = endTime;\n', '\n', '        //sub alloc amount\n', '        allLockedPhx[user].pendingAmount =  allLockedPhx[user].pendingAmount.sub(allLockedPhx[user].alloc[roundidx].amount);\n', '        allLockedPhx[user].wholeAmount =  allLockedPhx[user].wholeAmount.sub(allLockedPhx[user].alloc[roundidx].amount);\n', '\n', '        allLockedPhx[user].alloc[roundidx].amount = amount;\n', '\n', '        allLockedPhx[user].pendingAmount =  allLockedPhx[user].pendingAmount.add(amount);\n', '        allLockedPhx[user].wholeAmount =  allLockedPhx[user].wholeAmount.add(amount);\n', '    }\n', '\n', '    function claimExpiredPhx() public inited notHalted {\n', '        require(!allLockedPhx[msg.sender].disable,"user is diabled already");\n', '        uint256 i = 0;\n', '        uint256 endIdx = allLockedPhx[msg.sender].totalItem ;\n', '        uint256 totalRet=0;\n', '        for(;i<endIdx;i++) {\n', '           //only count the rewards over at least one timeSpan\n', '           if (now >= allLockedPhx[msg.sender].alloc[i].endTime) {\n', '               if (allLockedPhx[msg.sender].alloc[i].amount > 0) {\n', '                   totalRet = totalRet.add(allLockedPhx[msg.sender].alloc[i].amount);\n', '                   allLockedPhx[msg.sender].alloc[i].amount = 0;\n', '               }\n', '           }\n', '        }\n', '        allLockedPhx[msg.sender].pendingAmount = allLockedPhx[msg.sender].pendingAmount.sub(totalRet);\n', '\n', '        //transfer back to user\n', '        uint256 balbefore = IERC20(phxAddress).balanceOf(msg.sender);\n', '        IERC20(phxAddress).transfer(msg.sender,totalRet);\n', '        uint256 balafter = IERC20(phxAddress).balanceOf(msg.sender);\n', '        require((balafter-balbefore)==totalRet,"error transfer phx,balance check failed");\n', '        \n', '        emit ClaimPhx(msg.sender,totalRet, allLockedPhx[msg.sender].pendingAmount);\n', '    }\n', '    \n', '    function getClaimAbleBalance(address user) public view returns (uint256) {\n', '        uint256 i = 0;\n', '        uint256 endIdx = allLockedPhx[user].totalItem ;\n', '        uint256 totalRet=0;\n', '        for(;i<endIdx;i++) {\n', '            //only count the rewards over at least one timeSpan\n', '            if (now >= allLockedPhx[user].alloc[i].endTime) {\n', '                if (allLockedPhx[user].alloc[i].amount > 0) {\n', '                    totalRet = totalRet.add(allLockedPhx[user].alloc[i].amount);\n', '                }\n', '            }\n', '        }\n', '        return totalRet;\n', '    }\n', '\n', '    function setUserStatus(address user,bool disable)\n', '        public\n', '        inited\n', '        onlyOperator(0)\n', '        validCall\n', '    {\n', '        require(user != address(0));\n', '        allLockedPhx[user].disable = disable;\n', '    }\n', '    \n', '}']