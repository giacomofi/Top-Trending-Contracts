['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-26\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.8 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File contracts/interfaces/IGLY.sol\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'interface IGLY is IERC20 {\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '// File contracts/Staking.sol\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'contract Staking is Context {\n', '    using SafeMath for uint256;\n', '\n', '    struct StakingInfo {\n', '        uint256 amount;\n', '        uint256 lastUpdateTime;\n', '        uint256 rewardRate;\n', '    }\n', '\n', '    IGLY stakingToken;\n', '\n', '    uint256[] rewardRates = [75, 75, 75, 50, 50, 50, 35, 35, 35, 20, 20, 20, 7];\n', '    uint256 public stakingStart;\n', '\n', '    uint256 _totalStakes;\n', '    mapping(address => StakingInfo[]) internal stakes;\n', '\n', '    constructor(IGLY _stakingToken, uint256 _stakingStart) {\n', '        stakingToken = _stakingToken;\n', '        stakingStart = _stakingStart;\n', '    }\n', '\n', '    event Staked(address staker, uint256 amount);\n', '    event Unstaked(address staker, uint256 amount);\n', '    event ClaimedReward(address staker, uint256 amount);\n', '\n', '    function getStakingStart() public view returns (uint256) {\n', '        return stakingStart;\n', '    }\n', '\n', '    function totalStakes() public view returns (uint256) {\n', '        return _totalStakes;\n', '    }\n', '\n', '    function isStakeHolder(address _address) public view returns (bool) {\n', '        return stakes[_address].length > 0;\n', '    }\n', '\n', '    function totalStakeOf(address _stakeHolder) public view returns (uint256) {\n', '        uint256 _total = 0;\n', '        for (uint256 j = 0; j < stakes[_stakeHolder].length; j += 1) {\n', '            uint256 amount = stakes[_stakeHolder][j].amount;\n', '            _total = _total.add(amount);\n', '        }\n', '\n', '        return _total;\n', '    }\n', '\n', '    function getRewardRate(uint256 _updateTime)\n', '        public\n', '        view\n', '        returns (uint256 _rewardRate)\n', '    {\n', '        _rewardRate = _updateTime.sub(stakingStart).div(30 days);\n', '        if (_rewardRate > 13) _rewardRate = 12;\n', '    }\n', '\n', '    function stake(uint256 _amount) public {\n', '        require(stakingStart <= block.timestamp, "Staking is not started");\n', '        require(\n', '            stakingToken.transferFrom(_msgSender(), address(this), _amount),\n', '            "Stake required!"\n', '        );\n', '\n', '        uint256 lastUpdateTime = block.timestamp;\n', '\n', '        stakes[_msgSender()].push(\n', '            StakingInfo(_amount, lastUpdateTime, getRewardRate(lastUpdateTime))\n', '        );\n', '        _totalStakes = _totalStakes.add(_amount);\n', '        emit Staked(_msgSender(), _amount);\n', '    }\n', '\n', '    function unstake() public {\n', '        uint256 withdrawAmount = 0;\n', '        uint256 _staked = totalStakeOf(_msgSender());\n', '        uint256 _reward = rewardOf(_msgSender());\n', '\n', '        stakingToken.transfer(_msgSender(), _staked);\n', '        stakingToken.mint(_msgSender(), _reward);\n', '        _totalStakes = _totalStakes.sub(_staked);\n', '        delete stakes[_msgSender()];\n', '        emit Unstaked(_msgSender(), withdrawAmount);\n', '    }\n', '\n', '    function calculateReward(\n', '        uint256 _lastUpdateTime,\n', '        uint256 _rewardRate,\n', '        uint256 _amount\n', '    ) internal view returns (uint256) {\n', '        uint256 rewardAmount;\n', '        uint256 currentTime = block.timestamp;\n', '        uint256 updateTime = _lastUpdateTime;\n', '        uint256 rate = _rewardRate;\n', '\n', '        uint256 mod =\n', '            updateTime.sub(stakingStart).mod(30 days).div(1 days).mul(1 days);\n', '\n', '        if (updateTime + 30 days - mod <= currentTime) {\n', '            rewardAmount = rewardAmount.add(\n', '                _amount\n', '                    .mul(rewardRates[rate])\n', '                    .mul(30 days - mod)\n', '                    .div(365 days)\n', '                    .div(100)\n', '            );\n', '\n', '            updateTime = updateTime + 30 days - mod;\n', '            if (rate < 12) rate = rate.add(1);\n', '        }\n', '\n', '        while (updateTime + 30 days <= currentTime) {\n', '            rewardAmount = rewardAmount.add(\n', '                _amount.mul(rewardRates[rate]).mul(30 days).div(365 days).div(\n', '                    100\n', '                )\n', '            );\n', '            updateTime = updateTime + 30 days;\n', '            if (rate < 12) rate = rate.add(1);\n', '        }\n', '\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice A method to allow a stakeholder to check his rewards.\n', '     * @param _stakeholder The stakeholder to check rewards for.\n', '     */\n', '    function rewardOf(address _stakeholder) public view returns (uint256) {\n', '        uint256 rewardAmount = 0;\n', '        for (uint256 j = 0; j < stakes[_stakeholder].length; j += 1) {\n', '            uint256 amount = stakes[_stakeholder][j].amount;\n', '            uint256 rate = stakes[_stakeholder][j].rewardRate;\n', '            uint256 reward =\n', '                calculateReward(\n', '                    stakes[_stakeholder][j].lastUpdateTime,\n', '                    rate,\n', '                    amount\n', '                );\n', '            rewardAmount = rewardAmount.add(reward);\n', '        }\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice A method to check if the holder can claim rewards\n', '     */\n', '    function isClaimable() public view returns (bool, uint256) {\n', '        uint256 reward = rewardOf(_msgSender());\n', '\n', '        return (reward > 0, 0);\n', '    }\n', '\n', '    /**\n', '     * @notice A method to allow a stakeholder to withdraw his rewards.\n', '     */\n', '    function claimReward() public {\n', '        address stakeholder = _msgSender();\n', '\n', '        uint256 rewardAmount = rewardOf(stakeholder);\n', '\n', '        require(rewardAmount > 0, "Reward is empty!");\n', '\n', '        stakingToken.mint(_msgSender(), rewardAmount);\n', '\n', '        for (uint256 j = 0; j < stakes[stakeholder].length; j += 1) {\n', '            uint256 currentTime = block.timestamp;\n', '            uint256 _lastUpdateTime =\n', '                currentTime -\n', '                    currentTime.sub(stakingStart).mod(30 days).div(1 days).mul(\n', '                        1 days\n', '                    );\n', '            stakes[stakeholder][j].lastUpdateTime = _lastUpdateTime;\n', '            stakes[stakeholder][j].rewardRate = getRewardRate(_lastUpdateTime);\n', '        }\n', '\n', '        emit ClaimedReward(_msgSender(), rewardAmount);\n', '    }\n', '}']