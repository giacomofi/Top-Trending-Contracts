['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./lib/@openzeppelin/token/ERC20/IERC20.sol";\n', '\n', '/* Defiat 2021\n', '* \n', '* This is the contract locking the UNISWAP liquidity.\n', '* Notes 24th Feb 2021: This contract adds a functionality to prolong the lock period if required.\n', '* This will avoid having to wait for the maturity to reach to reload the UNIv2 tokens into a new lock-contract.\n', '*\n', '* Information:\n', '* UNISWAP liquidity token: 0xb4c36b752b706836ab90ed4e78b058150ae9ed59\n', '* Constructor has been initialized with 180 day of locking (see: timeLockDays in the code below)\n', '* You can interact with the contract on Etherscan to check the _release time (linux timestamp)\n', '* _releaseTime = 1640995199\n', '* You can use an epoch converter to verify the release date is :\n', '* Friday, December 31, 2021 11:59:59 PM (GMT)\n', '* \n', '* How does this contract work?\n', '* look at  the function release():\n', "* it's the only function that has the _token.transfer method, thus that can send tokens.\n", '* it requires the condiction require(block.timestamp >= _releaseTime)\n', '* this ensures that this function, hence the token transfer can only be activated \n', '* after the _releaseTime.\n', '* \n', '* As usual, any question feel free to reach out to us.\n', '*/\n', 'contract DeFiatTimelock {\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 private _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 private _releaseTime;\n', '\n', '    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _releaseTime = releaseTime;\n', '        require(_releaseTime > block.timestamp + 600, "ERROR: please add at least 10min of lock");\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the time when the tokens are released.\n', '     */\n', '    function releaseTime() public view returns (uint256) {\n', '        return _releaseTime;\n', '    }\n', '    \n', '    function canRelease() public view returns (bool) {\n', '        if(_releaseTime < block.timestamp){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public virtual {\n', '        require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");\n', '\n', '        uint256 amount = _token.balanceOf(address(this));\n', '        require(amount > 0, "TokenTimelock: no tokens to release");\n', '\n', '        _token.transfer(_beneficiary, amount);\n', '    }\n', '    \n', '    function extend(uint256 _newReleaseTime) public returns(bool){\n', '        require(msg.sender == _beneficiary, "only the beneficiary can extend timelock");\n', '\t    require(_newReleaseTime > _releaseTime, "can only extend timeLock");\n', '        \n', '        _releaseTime = _newReleaseTime;\n', '        return true;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']