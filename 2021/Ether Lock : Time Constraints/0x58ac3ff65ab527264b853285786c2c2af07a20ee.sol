['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// "SPDX-License-Identifier: MIT"\n', 'pragma solidity >=0.7.0 <0.9.0;\n', '\n', 'contract pwTreasury {\n', '    address _host;\n', '    address public thisAddress;\n', '\n', '    bool blocked;\n', '\n', '    uint nonce;\n', '    \n', '    struct transactionHistory{\n', '        address sender;\n', '        uint amount;\n', '        uint date;\n', '    }\n', '    \n', '    struct transactionHistoryUsers{\n', '        uint[] amount;\n', '        uint[] date;\n', '    }\n', '\n', '    mapping(uint => transactionHistory) transactions;\n', '    mapping(address => transactionHistoryUsers) userTransactions;\n', '    \n', '    constructor(){\n', '         nonce = 0;\n', '        _host = msg.sender;\n', '        thisAddress = address(this);\n', '        blocked = false;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public isHost{\n', '        _host = newOwner;\n', '    }\n', '    \n', '   modifier isHost() {\n', '        require(msg.sender == _host, "Only host can invoke this function");\n', '        _;\n', '    }\n', '\n', '    modifier isBlocked() {\n', '        require(blocked == false, "Smart contract has been temporary blocked");\n', '        _;\n', '    }\n', '    \n', '    function withdraw(address to, uint256 amount, address contractAddress) public isHost isBlocked {\n', '        USDC coin = USDC(contractAddress);\n', '        coin.transfer(to, amount);\n', '        transactions[nonce].sender = msg.sender;\n', '        transactions[nonce].amount = amount;\n', '        transactions[nonce].date = block.timestamp;\n', '        userTransactions[msg.sender].amount.push(amount);\n', '        userTransactions[msg.sender].date.push(block.timestamp);\n', '        nonce++;\n', '    }\n', '\n', '    function lockContract() public isHost {\n', '        blocked = true;\n', '    }\n', '\n', '    function unlockContract() public isHost {\n', '        blocked = false;\n', '    }\n', '\n', '    function getUserAmounts(address user) public view returns(uint[] memory){\n', '        return userTransactions[user].amount;\n', '    }\n', '    \n', '    function getUserDates(address user) public view returns(uint[] memory){\n', '        return userTransactions[user].date;\n', '    }\n', '    \n', '    function getSender(uint nounce) public view returns(address){\n', '        return transactions[nounce].sender;\n', '    }\n', '    \n', '    function getAmount(uint nounce) public view returns(uint){\n', '        return transactions[nounce].amount;\n', '    }\n', '    \n', '    function getDate(uint nounce) public view returns(uint){\n', '        return transactions[nounce].date;\n', '    }\n', '}\n', '\n', 'abstract contract USDC {\n', '    function transfer(address recipient, uint256 amount) virtual public returns (bool);\n', '}']