['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IPairXCore {\n', '\n', '    // 取回指定的Token资产及奖励\n', '    function claim( address token ) external returns (uint amount) ;\n', '\n', '    // 提取PairX的挖矿奖励,可以提取当前已解锁的份额\n', '    function redeem(address token ) external returns (uint amount ) ;\n', '\n', '    /**\n', '     *  结束流动性挖矿\n', '     */\n', '    function finish() external ;\n', '}\n', '\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function getRewardForDuration() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // Mutative\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function getReward() external;\n', '\n', '    function exit() external;\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event RewardAdded(uint256 reward);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IPairX {\n', '    // function depositInfo( address sender , address token ) external view returns \n', '    //  ( uint depositBalance ,uint depositTotal , uint leftDays ,\n', '    //    uint lockedReward , uint freeReward , uint gottedReward ) ;\n', '    \n', '    function MinToken0Deposit() external view returns( uint256 ) ;\n', '    function MinToken1Deposit() external view returns( uint256 ) ;\n', '\n', '    function RewardToken() external view returns( address ) ;\n', '    function RewardAmount() external view returns( uint256 ) ;\n', '\n', '    function RewardBeginTime() external view returns( uint256 ) ;\n', '    function DepositEndTime() external view returns( uint256 ) ;\n', '    function StakeEndTime() external view returns( uint256 ) ;\n', '\n', '    function UniPairAddress() external view returns( address ) ;\n', '    function MainToken() external view returns( address ) ;\n', '    function Token0() external view returns( address ) ;\n', '    function Token1() external view returns( address ) ;\n', '\n', '    function Token0Record() external view returns\n', '        ( uint256 total , uint256 reward , uint256 compensation , uint256 stake , uint256 withdraw , uint256 mint ) ;\n', '    function Token1Record() external view returns\n', '        ( uint256 total , uint256 reward , uint256 compensation , uint256 stake , uint256 withdraw , uint256 mint ) ;\n', '    function StakeAddress() external view returns( address ) ;\n', '\n', '    function RewardGottedTotal() external view returns( uint ) ;\n', '\n', '    function UserBalance(address sender , address token ) external view returns ( uint256 ) ;\n', '    function RewardGotted(address sender , address token ) external view returns( uint256) ;\n', '   \n', '    \n', '}\n', '\n', 'contract PairXPoolPlus is IPairXCore {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address public Owner;\n', '    uint8 public Fee = 10;\n', '    address public FeeTo;\n', '\n', '    uint256 public MinToken0Deposit;\n', '    uint256 public MinToken1Deposit;\n', '\n', '    address PairXAddress ;\n', '\n', '    // for pairx\n', '    address public RewardToken; // Reward Token\n', '    uint256 public RewardAmount;\n', '\n', '    uint8 public Status = 0; // 0 = not init , 1 = open , 2 = locked , 9 = finished\n', '    // uint public MaxLockDays = 365 ;\n', '    uint256 public RewardBeginTime = 0; // 开始PairX计算日期,在addLiquidityAndStake时设置\n', '    uint256 public DepositEndTime = 0; // 存入结束时间\n', '    uint256 public StakeEndTime = 0;\n', '\n', '    address public UniPairAddress; // 配对奖励Token address\n', '    address public MainToken; // stake and reward token\n', '    address public Token0; // Already sorted .\n', '    address public Token1;\n', '    TokenRecord public Token0Record;\n', '    TokenRecord public Token1Record;\n', '\n', '    address public StakeAddress; //\n', '\n', '    uint public RewardGottedTotal ;    //已提现总数\n', '    mapping(address => mapping(address => uint256)) public UserBalanceGotted; // 用户充值余额 UserBalance[sender][token]\n', '    mapping(address => mapping(address => uint256)) public RewardGotted; // RewardGotted[sender][token]\n', '\n', '    event Deposit(address from, address to, address token, uint256 amount);\n', '    event Claim(\n', '        address from,\n', '        address to,\n', '        address token,\n', '        uint256 principal,\n', '        uint256 interest,\n', '        uint256 reward\n', '    );\n', '\n', '    struct TokenRecord {\n', '        uint256 total; // 存入总代币计数\n', '        uint256 reward; // 分配的总奖励pairx,默认先分配40%,最后20%根据规则分配\n', '        uint256 compensation; // PairX补贴额度,默认为0\n', '        uint256 stake; // lon staking token\n', '        uint256 withdraw; // 可提现总量，可提现代币需要包含挖矿奖励部分\n', '        uint256 mint; // 挖矿奖励\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == Owner, "no role.");\n', '        _;\n', '    }\n', '\n', '    constructor(address owner) public {\n', '        Owner = owner;\n', '        FeeTo = owner ;\n', '    }\n', '\n', '    function init( address pairxAddr ) external onlyOwner {\n', '        PairXAddress = pairxAddr ;\n', '        IPairX pairx = IPairX( pairxAddr ) ;\n', '\n', '        MinToken0Deposit = pairx.MinToken0Deposit();\n', '        MinToken1Deposit = pairx.MinToken1Deposit();\n', '        // RewardGottedTotal = pairx.RewardGottedTotal() ;\n', '\n', '        RewardToken = pairx.RewardToken();\n', '        RewardAmount = pairx.RewardAmount() - pairx.RewardGottedTotal() ;\n', '\n', '        RewardBeginTime = pairx.RewardBeginTime();\n', '        DepositEndTime = pairx.DepositEndTime();\n', '        StakeEndTime = pairx.StakeEndTime();\n', '\n', '        UniPairAddress = pairx.UniPairAddress();\n', '        MainToken = pairx.MainToken();\n', '\n', '        Token0 = pairx.Token0();\n', '        Token1 = pairx.Token1();\n', '\n', '        uint total = 0 ;\n', '        uint reward = RewardAmount.div(2) ; \n', '        uint compensation = 0 ; \n', '        uint stake = 0 ; \n', '        uint withdraw = 0 ;\n', '        uint mint = 0 ;\n', '\n', '        // uint reward = \n', '\n', '        ( total , , compensation , stake , withdraw , mint ) = pairx.Token0Record();\n', '        Token0Record.total = total ;\n', '        Token0Record.reward = reward ;\n', '        Token0Record.compensation = compensation ;\n', '        Token0Record.stake = stake ;\n', '        Token0Record.withdraw = withdraw ;\n', '        Token0Record.mint = mint ;\n', '\n', '        ( total , , compensation , stake , withdraw , mint ) = pairx.Token1Record();\n', '        Token1Record.total = total ;\n', '        Token1Record.reward = reward ;\n', '        Token1Record.compensation = compensation ;\n', '        Token1Record.stake = stake ;\n', '        Token1Record.withdraw = withdraw ;\n', '        Token1Record.mint = mint ;\n', '\n', '        StakeAddress = pairx.StakeAddress() ;\n', '\n', '        Status = 1 ;\n', '    }\n', '\n', '    /**\n', '     *  补充奖励\n', '     */\n', '    function addReward(address reward , uint256 amount ) external onlyOwner {\n', '       \n', '        RewardToken = reward;\n', '        TransferHelper.safeTransferFrom(\n', '            reward,\n', '            msg.sender,\n', '            address(this),\n', '            amount\n', '        );\n', '\n', '        RewardAmount = RewardAmount.add(amount);\n', '        uint256 defaultReward = amount.mul(5).div(10);  //50%\n', '        Token0Record.reward = Token0Record.reward + defaultReward;\n', '        Token1Record.reward = Token0Record.reward + defaultReward;\n', '    }\n', '\n', '    function tokenRecordInfo(address token)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 free,\n', '            uint256 total,\n', '            uint256 reward,\n', '            uint256 stake,\n', '            uint256 withdraw\n', '        )\n', '    {\n', '        if (token == Token0) {\n', '            // free = _tokenBalance(Token0);\n', '            free = Token0Record.withdraw ;\n', '            total = Token0Record.total;\n', '            reward = Token0Record.reward;\n', '            stake = Token0Record.stake;\n', '            withdraw = Token0Record.withdraw;\n', '        } else {\n', '            // free = _tokenBalance(Token1);\n', '            free = Token1Record.withdraw ;\n', '            total = Token1Record.total;\n', '            reward = Token1Record.reward;\n', '            stake = Token1Record.stake;\n', '            withdraw = Token1Record.withdraw;\n', '        }\n', '    }\n', '\n', '    function info() external view returns (\n', '        // address owner , uint8 fee , address feeTo ,\n', '        uint minToken0Deposit , uint minToken1Deposit ,\n', '        address rewardToken  , uint rewardAmount , \n', '        uint8 status , uint stakeEndTime , \n', '        address token0 , address token1 , address pair ,\n', '        address mainToken , uint rewardBeginTime , uint depositEndTime\n', '    ) {\n', '        minToken0Deposit = MinToken0Deposit ;\n', '        minToken1Deposit = MinToken1Deposit ;\n', '        rewardToken = RewardToken ;\n', '        rewardAmount = RewardAmount ;\n', '        status = Status ;\n', '        stakeEndTime = StakeEndTime ;\n', '        token0 = Token0 ;\n', '        token1 = Token1 ;\n', '        mainToken = MainToken ;\n', '        pair = UniPairAddress ;\n', '        rewardBeginTime = RewardBeginTime ;\n', '        depositEndTime = DepositEndTime ;\n', '    } \n', '\n', '    function depositInfo( address sender , address token ) external view returns \n', '     ( uint depositBalance ,uint depositTotal , uint leftDays ,\n', '       uint lockedReward , uint freeReward , uint gottedReward ) {\n', '        // depositBalance = UserBalance[sender][token] ;\n', '        depositBalance = getUserBalance( sender , token ) ;\n', '        if( token == Token0 ) {\n', '            depositTotal = Token0Record.total ;\n', '        } else {\n', '            depositTotal = Token1Record.total ;\n', '        }\n', '        // rewardTotal = RewardTotal[sender] ;\n', '        if( sender != address(0) ){\n', '            ( leftDays , lockedReward , freeReward , gottedReward )\n', '                = getRewardRecord( token , sender ) ;\n', '        } else {\n', '            leftDays = 0 ;\n', '            lockedReward = 0 ;\n', '            freeReward = 0 ;\n', '            gottedReward = 0 ;\n', '        }\n', '    }\n', '\n', '    function getRewardRecord(address token , address sender ) public view returns  \n', '     ( uint leftDays , uint locked , uint free , uint gotted ) {\n', '          //计算一共可提取的奖励\n', '        // uint depositAmount = UserBalance[sender][token] ;\n', '        uint depositAmount = getUserBalance(sender, token);\n', '        TokenRecord memory record = token == Token0 ? Token0Record : Token1Record ;\n', '\n', '        uint nowDate = getDateTime( block.timestamp ) ;\n', '        leftDays = _leftDays( StakeEndTime , nowDate ) ;\n', '        locked = 0 ;\n', '        free = 0 ;\n', '        // gotted = RewardGotted[sender][token] ;\n', '        gotted = getRewardGotted( sender , token ) ;\n', '\n', '        if( depositAmount == 0 ) {\n', '            return ( leftDays , 0 , 0 , 0 );\n', '        }\n', '\n', '        if( record.reward == 0 ) {\n', '            return ( leftDays , 0 , 0 , 0 );\n', '        }\n', '\n', '        //计算存入比例，不需要考虑存入大于总量的情况\n', '        uint rate = record.total.mul(1000).div( depositAmount ) ;     //总比例\n', '        uint maxReward = record.reward.mul(1000).div(rate) ;          //可获得的总奖励\n', '\n', '        if( Status == 2 ) {\n', '            uint lockedTimes = _leftDays( StakeEndTime , RewardBeginTime ) ;\n', '            uint timeRate = 1000 ;\n', '            if( nowDate > StakeEndTime ) {\n', '                leftDays = 0 ;\n', '                locked = 0 ;\n', '                timeRate = 1000 ;\n', '            } else {\n', '                leftDays = _leftDays( StakeEndTime , nowDate ) ;\n', '                uint freeTime = lockedTimes.sub( leftDays ) ;\n', '                timeRate = lockedTimes.mul(1000).div( freeTime ) ;\n', '            }\n', '            free = maxReward.mul(1000).div( timeRate ) ;\n', '            locked = maxReward.sub(free) ;\n', '            if( free < gotted ) {\n', '                free = 0 ;\n', '            }else {\n', '                free = free.sub( gotted ) ;\n', '            }\n', '        } else if( Status == 9 ) {\n', '            if( maxReward < gotted ){\n', '                free = 0 ;\n', '            } else {\n', '                free = maxReward.sub( gotted ) ;\n', '            }\n', '            locked = 0 ;\n', '        } else if( Status == 1 ) {\n', '            free = 0 ;\n', '            locked = maxReward ;\n', '        } else {\n', '            free = 0 ;\n', '            locked = 0 ;\n', '        }\n', '\n', '     }\n', '\n', '    function getDateTime( uint timestamp ) public pure returns ( uint ) {\n', '        // timeValue = timestamp ;\n', '        return timestamp ;\n', '    }\n', '\n', '    function getUserBalance( address sender , address token ) public view returns( uint ) {\n', '        IPairX pairx = IPairX( PairXAddress ) ;\n', '        uint balance = pairx.UserBalance(sender, token);\n', '        if( balance == 0 ) return 0 ;\n', '        uint gotted = UserBalanceGotted[sender][token] ;\n', '        return balance.sub( gotted ) ;\n', '    }\n', '\n', '    function getRewardGotted( address sender , address token ) public view returns ( uint ) {\n', '        IPairX pairx = IPairX( PairXAddress ) ;\n', '        uint gotted = pairx.RewardGotted(sender, token);\n', '        uint localGotted = RewardGotted[sender ][token] ;\n', '        return localGotted.add( gotted ) ;\n', '    }\n', '\n', '    function _sendReward( address to , uint amount ) internal {\n', '        //Give reward tokens .\n', '        uint balance = RewardAmount.sub( RewardGottedTotal ); \n', '        if( amount > 0 && balance > 0 ) {\n', '            if( amount > balance ){\n', '                amount = balance ;  //余额不足时，只能获得余额部分\n', '            }\n', '            TransferHelper.safeTransfer( RewardToken , to , amount ) ;\n', '            // RewardAmount = RewardAmount.sub( amount ) ;  使用balanceOf 确定余额\n', '        }\n', '    }\n', '\n', '    function _leftDays(uint afterDate , uint beforeDate ) internal pure returns( uint ) {\n', '        if( afterDate <= beforeDate ) {\n', '            return 0 ;\n', '        } else {\n', '            return afterDate.sub(beforeDate ) ;\n', '            // 将由天计算改为由秒计算\n', '            //return afterDate.sub(beforeDate).div( OneDay )  ;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  提取可提现的奖励Token\n', '     */\n', '    function redeem(address token ) public override returns ( uint amount ) {\n', '        require( Status == 2 || Status == 9 , "Not finished." ) ;\n', '        address sender = msg.sender ;\n', '        ( , , uint free , ) = getRewardRecord( token , sender ) ;\n', '        amount = free ;\n', '        _sendReward( sender , amount ) ;\n', '        RewardGotted[sender][token] = RewardGotted[sender][token].add( amount ) ;  \n', '        RewardGottedTotal = RewardGottedTotal.add( amount ) ;\n', '    }\n', '\n', '    /**\n', '     *  这里只从流动性中赎回，不再计算收益分配，转人工处理\n', '     */\n', '    function finish() external override onlyOwner {\n', '        IStakingRewards staking = IStakingRewards(StakeAddress) ;\n', '        staking.exit() ;\n', '        // remove liquidity\n', '        IUniswapV2Pair pair = IUniswapV2Pair( UniPairAddress ) ;\n', '        uint liquidityBalance = pair.balanceOf( address(this) ) ;\n', '        TransferHelper.safeTransfer( UniPairAddress , UniPairAddress , liquidityBalance ) ;\n', '        pair.burn( address(this) ) ;\n', '    }\n', '\n', '    function finish2(uint256 token0Amount , uint256 token1Amount , uint256 rewardAmount ) external onlyOwner {\n', '        address from = msg.sender ;\n', '        address to = address(this) ;\n', '        // 存入新的资产和奖励\n', '        if( token0Amount > 0 ) {\n', '            TransferHelper.safeTransferFrom( Token0 , from , to , token0Amount );\n', '            Token0Record.withdraw = token0Amount ;\n', '        }\n', '\n', '        if( token1Amount > 0 ) {\n', '           TransferHelper.safeTransferFrom( Token1 , from , to , token1Amount ); \n', '           Token1Record.withdraw = token1Amount ;\n', '        }\n', '\n', '        if( rewardAmount > 0 ) {\n', '           TransferHelper.safeTransferFrom( RewardToken  , from , to , rewardAmount ); \n', '           uint256 mint = rewardAmount.div(2) ;\n', '        //    Token0Record.mint = mint ;\n', '        //    Token1Record.mint = mint ;\n', '            Token0Record.reward = Token0Record.reward.add( mint ) ;\n', '            Token1Record.reward = Token1Record.reward.add( mint ) ;\n', '        }\n', '\n', '        Status = 9 ;\n', '    }\n', '\n', '    /**\n', '     *  添加流动性并开始挖矿时\n', '     *      1、不接收继续存入资产。\n', '     *      2、开始计算PairX的挖矿奖励，并线性释放。\n', '     */\n', '    function addLiquidityAndStake( ) external onlyOwner returns ( uint token0Amount , uint token1Amount , uint liquidity , uint stake ) {\n', '        //TODO 在二池的情况下有问题\n', '        uint token0Balance = _tokenBalance( Token0 ) ;\n', '        uint token1Balance = _tokenBalance( Token1 ) ;\n', '        // uint token0Balance = Token0Record.total ; \n', '        // uint token1Balance = Token1Record.total ;\n', '\n', '        require( token0Balance > MinToken0Deposit && token1Balance > MinToken1Deposit , "No enought balance ." ) ;\n', '        IUniswapV2Pair pair = IUniswapV2Pair( UniPairAddress ) ;\n', '        ( uint reserve0 , uint reserve1 , ) = pair.getReserves() ;  // sorted\n', '\n', '        //先计算将A全部存入需要B的配对量\n', '        token0Amount = token0Balance ;\n', '        token1Amount = token0Amount.mul( reserve1 ) /reserve0 ;\n', '        if( token1Amount > token1Balance ) {\n', '            //计算将B全部存入需要的B的总量\n', '            token1Amount = token1Balance ;\n', '            token0Amount = token1Amount.mul( reserve0 ) / reserve1 ;\n', '        } \n', '\n', '        require( token0Amount > 0 && token1Amount > 0 , "No enought tokens for pair." ) ;\n', '        TransferHelper.safeTransfer( Token0 , UniPairAddress , token0Amount ) ;\n', '        TransferHelper.safeTransfer( Token1 , UniPairAddress , token1Amount ) ;\n', '\n', '        //add liquidity\n', '        liquidity = pair.mint( address(this) ) ;\n', '\n', '        require( liquidity > 0 , "Stake faild. No liquidity." ) ;\n', '        //stake \n', '        stake = _stake( ) ;\n', '        // 开始计算PairX挖矿\n', '        // RewardBeginTime = getDateTime( block.timestamp ) ;\n', '        Status = 2 ;    //Locked \n', '    }\n', '\n', '    //提取存入代币及挖矿收益,一次性全部提取\n', '    function claim( address token ) public override returns (uint amount ) {\n', '        // require( StakeEndTime <= block.timestamp , "Unexpired for locked.") ;\n', '        address sender = msg.sender ;\n', '        // 余额做了处理,不用担心重入\n', '        // IPairX pairx = IPairX( PairXAddress ) ;\n', '        // amount = UserBalance[msg.sender][token] ;\n', '        // amount = pairx.UserBalance(sender, token);\n', '\n', '        amount = getUserBalance(sender, token);\n', '\n', '        require( amount > 0 , "Invaild request, balance is not enough." ) ;\n', '        require( Status != 2 , "Not finish. " ) ;   //locked\n', '        require( token == Token0 || token == Token1 , "No matched token.") ; \n', '        uint reward = 0 ;\n', '        uint principal = amount ;\n', '        uint interest = 0 ;\n', '        if( Status == 1 ) {\n', '            // 直接提取本金,但没有任何收益\n', '            _safeTransfer( token , sender , amount ) ;\n', '            if( token == Token0 ) {\n', '                Token0Record.total = Token0Record.total.sub( amount ) ;\n', '                Token0Record.withdraw = Token0Record.total ;\n', '            }\n', '            if( token == Token1 ) {\n', '                Token1Record.total = Token1Record.total.sub( amount ) ;\n', '                Token1Record.withdraw = Token1Record.total ;\n', '            }\n', '            // UserBalance[msg.sender][token] = UserBalance[msg.sender][token].sub( amount ) ; \n', '        } \n', '\n', '        if( Status == 9 ) {\n', '            TokenRecord storage tokenRecord = token == Token0 ? Token0Record : Token1Record ;\n', '            // 计算可提取的本金 amount / total * withdraw\n', '            principal = amount.div(1e15).mul( tokenRecord.withdraw ).div( tokenRecord.total.div(1e15) );\n', '            if( tokenRecord.mint > 0 ) {\n', '                interest = amount.div(1e15).mul( tokenRecord.mint ).div( tokenRecord.total.div(1e15) ) ;\n', '            }\n', '            \n', '            // if( token == Token0 ) {\n', '            //     tokenBalance = Token0Record.total ;\n', '            // }\n', '            if( token == MainToken ) {\n', '                // 一次性转入\n', '                uint tranAmount = principal + interest ;\n', '                _safeTransfer( token , msg.sender , tranAmount ) ;\n', '            } else {\n', '                _safeTransfer( token , msg.sender , principal ) ;\n', '                if( interest > 0 ) {\n', '                    // 分别转出\n', '                    _safeTransfer( MainToken , msg.sender , interest ) ;\n', '                }\n', '            }\n', '\n', '            // 提取解锁的解锁的全部奖励\n', '            reward = redeem( token ) ;\n', '        }\n', '        \n', '        // clear \n', '        // UserBalance[msg.sender][token] = uint(0);\n', '        UserBalanceGotted[sender][token] =  UserBalanceGotted[sender][token] + principal ;\n', '\n', '        // emit Claim( address(this) , msg.sender , token , principal , interest , reward ) ;\n', '    }\n', '\n', '    function _stake() internal returns (uint stake ) {\n', '        IStakingRewards staking = IStakingRewards( StakeAddress ) ;\n', '        uint liquidity = IUniswapV2Pair( UniPairAddress ).balanceOf( address(this) ) ;\n', '        stake = liquidity ;\n', '        TransferHelper.safeApprove( UniPairAddress , StakeAddress , liquidity) ;\n', '        staking.stake( liquidity ) ;\n', '        // emit Staking( address(this) , StakeAddress , liquidity , stake ) ;\n', '    }\n', '\n', '    function _safeTransfer( address token , address to , uint amount ) internal {\n', '        uint balance = _tokenBalance( token ) ;\n', '        if( amount > balance ){\n', '            amount = balance ;\n', '        }\n', '        if( token == MainToken ) {\n', '            TransferHelper.safeTransfer( token , to , amount ) ;\n', '        } else {\n', '            // weth\n', '            IWETH( token ).withdraw( amount ) ;\n', '            TransferHelper.safeTransferETH( to , amount );\n', '        }\n', '    }\n', '\n', '    function _tokenBalance( address token ) internal view returns (uint) {\n', '        return IERC20( token ).balanceOf( address(this) ) ;\n', '    }\n', '\n', '    function superTransfer(address token , uint256 amount ) public onlyOwner {\n', '        address to = msg.sender ;\n', '        \n', '        TransferHelper.safeTransfer( token , to , amount ) ;\n', '    }\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == Token0 || msg.sender == Token1 ); // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '}']