['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '// SPDX-License-Identifier: MIT\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract vesting {\n', '\n', '    struct claimer{\n', '        uint256 total;\n', '        uint256 timestamp;\n', '        uint256 rate;\n', '    }\n', '\n', '    mapping(address => claimer) claimers;\n', '    address owner;\n', '    IERC20 token;\n', '\n', '    constructor(address _token){\n', '        owner = msg.sender;\n', '        token = IERC20(_token);\n', '    }\n', '\n', '    function claim_balance() public {\n', '        require(claimers[msg.sender].total > 0, "0 balance");\n', '        require(claimers[msg.sender].timestamp <= block.timestamp, "time not met yet");\n', '\n', '        claimers[msg.sender].total -= claimers[msg.sender].rate;\n', '        claimers[msg.sender].timestamp += 1 weeks;\n', '        token.transfer(msg.sender, claimers[msg.sender].rate);\n', '    }\n', '\n', '    function set_payout(uint256 amount, address _wallet, uint256 _rate) public{\n', '        require(msg.sender == owner, "only owner");\n', '        claimers[_wallet] = claimer(amount, block.timestamp + 1 weeks, _rate);\n', '    }\n', '}']