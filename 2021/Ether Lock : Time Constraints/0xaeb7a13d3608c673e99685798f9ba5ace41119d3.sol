['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-06\n', '*/\n', '\n', 'pragma solidity ^0.4.24;/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'contract GovManager is Pausable {\n', '    address public GovernerContract;\n', '\n', '    modifier onlyOwnerOrGov() {\n', '        require(msg.sender == owner || msg.sender == GovernerContract, "Authorization Error");\n', '        _;\n', '    }\n', '\n', '    function setGovernerContract(address _address) external onlyOwnerOrGov{\n', '        GovernerContract = _address;\n', '    }\n', '\n', '    constructor() public {\n', '        GovernerContract = address(0);\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Helper is GovManager {\n', '    event TransferOut(uint256 Amount, address To, address Token);\n', '    event TransferIn(uint256 Amount, address From, address Token);\n', '    modifier TestAllownce(\n', '        address _token,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) {\n', '        require(\n', '            ERC20(_token).allowance(_owner, address(this)) >= _amount,\n', '            "no allowance"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function TransferToken(\n', '        address _Token,\n', '        address _Reciver,\n', '        uint256 _Amount\n', '    ) internal {\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        emit TransferOut(_Amount, _Reciver, _Token);\n', '        ERC20(_Token).transfer(_Reciver, _Amount);\n', '        require(\n', '            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\n', '                ,\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '\n', '    function CheckBalance(address _Token, address _Subject)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ERC20(_Token).balanceOf(_Subject);\n', '    }\n', '\n', '    function TransferInToken(\n', '        address _Token,\n', '        address _Subject,\n', '        uint256 _Amount\n', '    ) internal TestAllownce(_Token, _Subject, _Amount) {\n', '        require(_Amount > 0);\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\n', '        emit TransferIn(_Amount, _Subject, _Token);\n', '        require(\n', '            (SafeMath.add(OldBalance, _Amount)) ==\n', '                CheckBalance(_Token, address(this)),\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '//True POZ Token will have this, \n', 'interface IPOZBenefit {\n', '    function IsPOZHolder(address _Subject) external view returns(bool);\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PozBenefit is ERC20Helper {\n', '    constructor() public {\n', '        PozFee = 15; // *10000\n', '        PozTimer = 1000; // *10000\n', '    \n', '       // POZ_Address = address(0x0);\n', '       // POZBenefit_Address = address(0x0);\n', '    }\n', '\n', '    uint256 public PozFee; // the fee for the first part of the pool\n', '    uint256 public PozTimer; //the timer for the first part fo the pool\n', '    \n', '    modifier PercentCheckOk(uint256 _percent) {\n', '        if (_percent < 10000) _;\n', '        else revert("Not in range");\n', '    }\n', '    modifier LeftIsBigger(uint256 _left, uint256 _right) {\n', '        if (_left > _right) _;\n', '        else revert("Not bigger");\n', '    }\n', '\n', '    function SetPozTimer(uint256 _pozTimer)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_pozTimer)\n', '    {\n', '        PozTimer = _pozTimer;\n', '    }\n', '\n', '    \n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'contract ETHHelper is PozBenefit {\n', '    constructor() public {\n', '        IsPayble = false;\n', '    }\n', '\n', '    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\n', '        require(msgValue >= _MinETHInvest, "Send ETH to invest");\n', '        emit TransferInETH(msgValue, msgSender);\n', '        _;\n', '    }\n', '\n', '    //@dev not/allow contract to receive funds\n', '    function() public payable {\n', '        if (!IsPayble) revert();\n', '    }\n', '\n', '    event TransferOutETH(uint256 Amount, address To);\n', '    event TransferInETH(uint256 Amount, address From);\n', '\n', '    bool public IsPayble;\n', ' \n', '    function SwitchIsPayble() public onlyOwner {\n', '        IsPayble = !IsPayble;\n', '    }\n', '\n', '    function TransferETH(address _Reciver, uint256 _ammount) internal {\n', '        emit TransferOutETH(_ammount, _Reciver);\n', '        uint256 beforeBalance = address(_Reciver).balance;\n', '        _Reciver.transfer(_ammount);\n', '        require(\n', '            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\n', '            "The transfer did not complite"\n', '        );\n', '    }\n', ' \n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '//For whitelist, \n', 'interface IWhiteList {\n', '    function Check(address _Subject, uint256 _Id) external view returns(uint);\n', '    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\n', '    function IsNeedRegister(uint256 _Id) external view returns(bool);\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Manageable is ETHHelper {\n', '    constructor() public {\n', '        Fee = 20; // *10000\n', '        //MinDuration = 0; //need to set\n', '        //PoolPrice = 0; // Price for create a pool\n', '        MaxDuration = 60 * 60 * 24 * 30 * 6; // half year\n', '        MinETHInvest = 10000; // for percent calc\n', '        MaxETHInvest = 100 * 10**18; // 100 eth per wallet\n', '        //WhiteList_Address = address(0x0);\n', '    }\n', '\n', '    mapping(address => uint256) FeeMap;\n', '    //@dev for percent use uint16\n', '    uint256 public Fee; //the fee for the pool\n', '    uint256 public MinDuration; //the minimum duration of a pool, in seconds\n', '    uint256 public MaxDuration; //the maximum duration of a pool from the creation, in seconds\n', '    uint256 public PoolPrice;\n', '    uint256 public MinETHInvest;\n', '    uint256 public MaxETHInvest;\n', '    address public WhiteList_Address; //The address of the Whitelist contract\n', '\n', '    bool public IsTokenFilterOn;\n', '    uint256 public TokenWhitelistId;\n', '    uint256 public MCWhitelistId; // Main Coin WhiteList ID\n', '\n', '    function SwapTokenFilter() public onlyOwner {\n', '        IsTokenFilterOn = !IsTokenFilterOn;\n', '    }\n', '\n', '    function setTokenWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\n', '        TokenWhitelistId = _whiteListId;\n', '    }\n', '\n', '    function setMCWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\n', '        MCWhitelistId = _whiteListId;\n', '    }\n', '\n', '    function IsValidToken(address _address) public view returns (bool) {\n', '        return !IsTokenFilterOn || (IWhiteList(WhiteList_Address).Check(_address, TokenWhitelistId) > 0);\n', '    }\n', '\n', '    function IsERC20Maincoin(address _address) public view returns (bool) {\n', '        return !IsTokenFilterOn || IWhiteList(WhiteList_Address).Check(_address, MCWhitelistId) > 0;\n', '    }\n', '    \n', '    function SetWhiteList_Address(address _WhiteList_Address) public onlyOwnerOrGov {\n', '        WhiteList_Address = _WhiteList_Address;\n', '    }\n', '\n', '    function SetMinMaxETHInvest(uint256 _MinETHInvest, uint256 _MaxETHInvest)\n', '        public\n', '        onlyOwnerOrGov\n', '    {\n', '        MinETHInvest = _MinETHInvest;\n', '        MaxETHInvest = _MaxETHInvest;\n', '    }\n', '\n', '    function SetMinMaxDuration(uint256 _minDuration, uint256 _maxDuration)\n', '        public\n', '        onlyOwnerOrGov\n', '    {\n', '        MinDuration = _minDuration;\n', '        MaxDuration = _maxDuration;\n', '    }\n', '\n', '    function SetPoolPrice(uint256 _PoolPrice) public onlyOwnerOrGov {\n', '        PoolPrice = _PoolPrice;\n', '    }\n', '\n', '    function SetFee(uint256 _fee)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger(_fee, PozFee)\n', '    {\n', '        Fee = _fee;\n', '    }\n', '\n', '    function SetPOZFee(uint256 _fee)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger(Fee, _fee)\n', '    {\n', '        PozFee = _fee;\n', '    }\n', '\n', '    \n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Pools is Manageable {\n', '    event NewPool(address token, uint256 id);\n', '    event FinishPool(uint256 id);\n', '    event PoolUpdate(uint256 id);\n', '\n', '    constructor() public {\n', '        //  poolsCount = 0; //Start with 0\n', '    }\n', '\n', '    uint256 public poolsCount; // the ids of the pool\n', '    mapping(uint256 => Pool) public pools; //the id of the pool with the data\n', "    mapping(address => uint256[]) public poolsMap; //the address and all of the pools id's\n", '    struct Pool {\n', '        PoolBaseData BaseData;\n', '        PoolMoreData MoreData;\n', '    }\n', '    struct PoolBaseData {\n', '        address Token; //the address of the erc20 toke for sale\n', '        address Creator; //the project owner\n', '        uint256 FinishTime; //Until what time the pool is active\n', '        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\n', '        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\n', '        address Maincoin; // on adress.zero = ETH\n', '        uint256 StartAmount; //The total amount of the tokens for sale\n', '    }\n', '    struct PoolMoreData {\n', '        uint64 LockedUntil; // true - the investors getting the tokens after the FinishTime. false - intant deal\n', '        uint256 Lefttokens; // the ammount of tokens left for sale\n', '        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\n', '        uint256 OpenForAll; // The Time that all investors can invest\n', '        uint256 UnlockedTokens; //for locked pools\n', '        uint256 WhiteListId; // 0 is turn off, the Id of the whitelist from the contract.\n', '        bool TookLeftOvers; //The Creator took the left overs after the pool finished\n', '        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\n', '    }\n', '\n', '    function isPoolLocked(uint256 _id) public view returns(bool){\n', '        return pools[_id].MoreData.LockedUntil > now;\n', '    }\n', '\n', '    //create a new pool\n', '    function CreatePool(\n', '        address _Token, //token to sell address\n', '        uint256 _FinishTime, //Until what time the pool will work\n', '        uint256 _Rate, //the rate of the trade\n', '        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\n', '        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n', '        uint64 _LockedUntil, //False = DSP or True = TLP\n', '        address _MainCoin, // address(0x0) = ETH, address of main token\n', '        bool _Is21Decimal, //focus the for smaller tokens.\n', '        uint256 _Now, //Start Time - can be 0 to not change current flow\n', '        uint256 _WhiteListId // the Id of the Whitelist contract, 0 For turn-off\n', '    ) public payable whenNotPaused {\n', '        require(msg.value >= PoolPrice, "Need to pay for the pool");\n', '        require(IsValidToken(_Token), "Need Valid ERC20 Token"); //check if _Token is ERC20\n', '        require(\n', '            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\n', '            "Main coin not in list"\n', '        );\n', '        require(_FinishTime  < SafeMath.add(MaxDuration, now), "Pool duration can\'t be that long");\n', '        require(_LockedUntil < SafeMath.add(MaxDuration, now) , "Locked value can\'t be that long");\n', '        require(\n', '            _Rate <= _POZRate,\n', '            "POZ holders need to have better price (or the same)"\n', '        );\n', '        require(_POZRate > 0, "It will not work");\n', '        if (_Now < now) _Now = now;\n', '        require(\n', '            SafeMath.add(now, MinDuration) <= _FinishTime,\n', '            "Need more then MinDuration"\n', '        ); // check if the time is OK\n', '        TransferInToken(_Token, msg.sender, _StartAmount);\n', '        uint256 Openforall =\n', '            (_WhiteListId == 0) \n', '                ? _Now //and this\n', '                : SafeMath.add(\n', '                    SafeMath.div(\n', '                        SafeMath.mul(SafeMath.sub(_FinishTime, _Now), PozTimer),\n', '                        10000\n', '                    ),\n', '                    _Now\n', '                );\n', '        //register the pool\n', '        pools[poolsCount] = Pool(\n', '            PoolBaseData(\n', '                _Token,\n', '                msg.sender,\n', '                _FinishTime,\n', '                _Rate,\n', '                _POZRate,\n', '                _MainCoin,\n', '                _StartAmount\n', '            ),\n', '            PoolMoreData(\n', '                _LockedUntil,\n', '                _StartAmount,\n', '                _Now,\n', '                Openforall,\n', '                0,\n', '                _WhiteListId,\n', '                false,\n', '                _Is21Decimal\n', '            )\n', '        );\n', '        poolsMap[msg.sender].push(poolsCount);\n', '        emit NewPool(_Token, poolsCount);\n', '        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', 'contract PoolsData is Pools {\n', '    enum PoolStatus {Created, Open, PreMade, OutOfstock, Finished, Close} //the status of the pools\n', '\n', '    modifier PoolId(uint256 _id) {\n', '        require(_id < poolsCount, "Wrong pool id, Can\'t get Status");\n', '        _;\n', '    }\n', '\n', '    function GetMyPoolsId() public view returns (uint256[]) {\n', '        return poolsMap[msg.sender];\n', '    }\n', '\n', '    function GetPoolBaseData(uint256 _Id)\n', '        public\n', '        view\n', '        PoolId(_Id)\n', '        returns (\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].BaseData.Token,\n', '            pools[_Id].BaseData.Creator,\n', '            pools[_Id].BaseData.FinishTime,\n', '            pools[_Id].BaseData.Rate,\n', '            pools[_Id].BaseData.POZRate,\n', '            pools[_Id].BaseData.StartAmount\n', '        );\n', '    }\n', '\n', '    function GetPoolMoreData(uint256 _Id)\n', '        public\n', '        view\n', '        PoolId(_Id)\n', '        returns (\n', '            uint64,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            bool\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].MoreData.LockedUntil,\n', '            pools[_Id].MoreData.Lefttokens,\n', '            pools[_Id].MoreData.StartTime,\n', '            pools[_Id].MoreData.OpenForAll,\n', '            pools[_Id].MoreData.UnlockedTokens,\n', '            pools[_Id].MoreData.Is21DecimalRate\n', '        );\n', '    }\n', '\n', '    function GetPoolExtraData(uint256 _Id)\n', '        public\n', '        view\n', '        PoolId(_Id)\n', '        returns (\n', '            bool,\n', '            uint256,\n', '            address\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].MoreData.TookLeftOvers,\n', '            pools[_Id].MoreData.WhiteListId,\n', '            pools[_Id].BaseData.Maincoin\n', '        );\n', '    }\n', '\n', '    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\n', '        public\n', '        view\n', '        PoolId(_PoolId)\n', '        returns (bool)\n', '    {\n', '        return\n', '            pools[_PoolId].BaseData.FinishTime <= now &&\n', '            pools[_PoolId].MoreData.Lefttokens > 0 &&\n', '            !pools[_PoolId].MoreData.TookLeftOvers;\n', '    }\n', '\n', '    //@dev no use of revert to make sure the loop will work\n', '    function WithdrawLeftOvers(uint256 _PoolId) public PoolId(_PoolId) returns (bool) {\n', '        //pool is finished + got left overs + did not took them\n', '        if (IsReadyWithdrawLeftOvers(_PoolId)) {\n', '            pools[_PoolId].MoreData.TookLeftOvers = true;\n', '            TransferToken(\n', '                pools[_PoolId].BaseData.Token,\n', '                pools[_PoolId].BaseData.Creator,\n', '                pools[_PoolId].MoreData.Lefttokens\n', '            );\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    //calculate the status of a pool\n', '    function GetPoolStatus(uint256 _id)\n', '        public\n', '        view\n', '        PoolId(_id)\n', '        returns (PoolStatus)\n', '    {\n', "        //Don't like the logic here - ToDo Boolean checks (truth table)\n", '        if (now < pools[_id].MoreData.StartTime) return PoolStatus.PreMade;\n', '        if (\n', '            now < pools[_id].MoreData.OpenForAll &&\n', '            pools[_id].MoreData.Lefttokens > 0\n', '        ) {\n', '            //got tokens + only poz investors\n', '            return (PoolStatus.Created);\n', '        }\n', '        if (\n', '            now >= pools[_id].MoreData.OpenForAll &&\n', '            pools[_id].MoreData.Lefttokens > 0 &&\n', '            now < pools[_id].BaseData.FinishTime\n', '        ) {\n', '            //got tokens + all investors\n', '            return (PoolStatus.Open);\n', '        }\n', '        if (\n', '            pools[_id].MoreData.Lefttokens == 0 &&\n', '            isPoolLocked(_id) &&\n', '            now < pools[_id].BaseData.FinishTime\n', '        ) //no tokens on locked pool, got time\n', '        {\n', '            return (PoolStatus.OutOfstock);\n', '        }\n', '        if (\n', '            pools[_id].MoreData.Lefttokens == 0 && !isPoolLocked(_id)\n', '        ) //no tokens on direct pool\n', '        {\n', '            return (PoolStatus.Close);\n', '        }\n', '        if (\n', '            now >= pools[_id].BaseData.FinishTime &&\n', '            !isPoolLocked(_id)\n', '        ) {\n', '            // After finish time - not locked\n', '            if (pools[_id].MoreData.TookLeftOvers) return (PoolStatus.Close);\n', '            return (PoolStatus.Finished);\n', '        }\n', '        if (\n', '            (pools[_id].MoreData.TookLeftOvers ||\n', '                pools[_id].MoreData.Lefttokens == 0) &&\n', '            (pools[_id].MoreData.UnlockedTokens +\n', '                pools[_id].MoreData.Lefttokens ==\n', '                pools[_id].BaseData.StartAmount)\n', '        ) return (PoolStatus.Close);\n', '        return (PoolStatus.Finished);\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'contract Invest is PoolsData {\n', '    event NewInvestorEvent(uint256 Investor_ID, address Investor_Address);\n', '\n', '    modifier CheckTime(uint256 _Time) {\n', '        require(now >= _Time, "Pool not open yet");\n', '        _;\n', '    }\n', '\n', '    //using SafeMath for uint256;\n', '    constructor() public {\n', '        //TotalInvestors = 0;\n', '    }\n', '\n', '    //Investorsr Data\n', '    uint256 internal TotalInvestors;\n', '    mapping(uint256 => Investor) Investors;\n', '    mapping(address => uint256[]) InvestorsMap;\n', '    struct Investor {\n', '        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\n', '        address InvestorAddress; //\n', '        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\n', '        uint256 TokensOwn; //the amount of Tokens the investor needto get from the contract\n', '        uint256 InvestTime; //the time that investment made\n', '    }\n', '\n', '    function getTotalInvestor() external view returns(uint256){\n', '        return TotalInvestors;\n', '    }\n', '    \n', '    //@dev Send in wei\n', '    function InvestETH(uint256 _PoolId)\n', '        external\n', '        payable\n', '        ReceivETH(msg.value, msg.sender, MinETHInvest)\n', '        whenNotPaused\n', '        CheckTime(pools[_PoolId].MoreData.StartTime)\n', '    {\n', '        require(_PoolId < poolsCount, "Wrong pool id, InvestETH fail");\n', '        require(pools[_PoolId].BaseData.Maincoin == address(0x0), "Pool is not for ETH");\n', '        require(\n', '            msg.value >= MinETHInvest && msg.value <= MaxETHInvest,\n', '            "Investment amount not valid"\n', '        );\n', '        require(\n', '            msg.sender == tx.origin && !isContract(msg.sender),\n', '            "Some thing wrong with the msgSender"\n', '        );\n', '        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\n', '        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\n', '        \n', '        TokenAllocate(_PoolId, ThisInvestor, Tokens);\n', '\n', '        uint256 EthMinusFee =\n', '            SafeMath.div(\n', '                SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\n', '                10000\n', '            );\n', '        // send money to project owner - the fee stays on contract\n', '        TransferETH(pools[_PoolId].BaseData.Creator, EthMinusFee); \n', '        RegisterInvest(_PoolId, Tokens);\n', '    }\n', '\n', '    function InvestERC20(uint256 _PoolId, uint256 _Amount)\n', '        external\n', '        whenNotPaused\n', '        CheckTime(pools[_PoolId].MoreData.StartTime)\n', '    {\n', '        require(_PoolId < poolsCount, "Wrong pool id, InvestERC20 fail");\n', '        require(\n', '            pools[_PoolId].BaseData.Maincoin != address(0x0),\n', '            "Pool is for ETH, use InvetETH"\n', '        );\n', '        require(_Amount > 10000, "Need invest more then 10000");\n', '        require(\n', '            msg.sender == tx.origin && !isContract(msg.sender),\n', '            "Some thing wrong with the msgSender"\n', '        );\n', '        TransferInToken(pools[_PoolId].BaseData.Maincoin, msg.sender, _Amount);\n', '        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\n', '        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\n', '\n', '        TokenAllocate(_PoolId, ThisInvestor, Tokens);\n', '\n', '        uint256 RegularFeePay =\n', '            SafeMath.div(SafeMath.mul(_Amount, CalcFee(_PoolId)), 10000);\n', '\n', '        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\n', '        FeeMap[pools[_PoolId].BaseData.Maincoin] = SafeMath.add(\n', '            FeeMap[pools[_PoolId].BaseData.Maincoin],\n', '            RegularFeePay\n', '        );\n', '        TransferToken(\n', '            pools[_PoolId].BaseData.Maincoin,\n', '            pools[_PoolId].BaseData.Creator,\n', '            RegularPaymentMinusFee\n', '        ); // send money to project owner - the fee stays on contract\n', '        RegisterInvest(_PoolId, Tokens);\n', '    }\n', '\n', '    function TokenAllocate(uint256 _PoolId, uint256 _ThisInvestor, uint256 _Tokens) internal {\n', '        if (isPoolLocked(_PoolId)) {\n', '            Investors[_ThisInvestor].TokensOwn = SafeMath.add(\n', '                Investors[_ThisInvestor].TokensOwn,\n', '                _Tokens\n', '            );\n', '        } else {\n', '            // not locked, will transfer the tokens\n', '            TransferToken(pools[_PoolId].BaseData.Token, Investors[_ThisInvestor].InvestorAddress, _Tokens);\n', '        }\n', '    }\n', '\n', '    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\n', '        require(\n', '            _Tokens <= pools[_PoolId].MoreData.Lefttokens,\n', '            "Not enough tokens in the pool"\n', '        );\n', '        pools[_PoolId].MoreData.Lefttokens = SafeMath.sub(\n', '            pools[_PoolId].MoreData.Lefttokens,\n', '            _Tokens\n', '        );\n', '        if (pools[_PoolId].MoreData.Lefttokens == 0) emit FinishPool(_PoolId);\n', '        else emit PoolUpdate(_PoolId);\n', '    }\n', '\n', '    function NewInvestor(\n', '        address _Sender,\n', '        uint256 _Amount,\n', '        uint256 _Pid\n', '    ) internal returns (uint256) {\n', '        Investors[TotalInvestors] = Investor(\n', '            _Pid,\n', '            _Sender,\n', '            _Amount,\n', '            0,\n', '            block.timestamp\n', '        );\n', '        InvestorsMap[msg.sender].push(TotalInvestors);\n', '        emit NewInvestorEvent(TotalInvestors, _Sender);\n', '        TotalInvestors = SafeMath.add(TotalInvestors, 1);\n', '        return SafeMath.sub(TotalInvestors, 1);\n', '    }\n', '\n', '    function CalcTokens(\n', '        uint256 _Pid,\n', '        uint256 _Amount,\n', '        address _Sender\n', '    ) internal returns (uint256) {\n', '        uint256 msgValue = _Amount;\n', '        uint256 result = 0;\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n', '            IsWhiteList(_Sender, pools[_Pid].MoreData.WhiteListId, _Amount);\n', '            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.POZRate);\n', '        }\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n', '            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.Rate);\n', '        }\n', '        if (result >= 10**21) {\n', '            if (pools[_Pid].MoreData.Is21DecimalRate) {\n', '                result = SafeMath.div(result, 10**21);\n', '            }\n', '            return result;\n', '        }\n', '        revert("Wrong pool status to CalcTokens");\n', '    }\n', '\n', '    function CalcFee(uint256 _Pid) internal view returns (uint256) {\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n', '            return PozFee;\n', '        }\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n', '            return Fee;\n', '        }\n', '        //will not get here, will fail on CalcTokens\n', '    }\n', '\n', '    //@dev use it with  require(msg.sender == tx.origin)\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    //  no need register - will return true or false base on Check\n', '    //  if need register - revert or true\n', '    function IsWhiteList(\n', '        address _Investor,\n', '        uint256 _Id,\n', '        uint256 _Amount\n', '    ) internal returns (bool) {\n', '        if (_Id == 0) return true; //turn-off\n', '        IWhiteList(WhiteList_Address).Register(_Investor, _Id, _Amount); //will revert if fail\n', '        return true;\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'contract InvestorData is Invest {\n', '    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\n', '        return\n', '            _id <= TotalInvestors &&\n', '            Investors[_id].TokensOwn > 0 &&\n', '            pools[Investors[_id].Poolid].BaseData.FinishTime <= now;\n', '    }\n', '\n', '    function WithdrawInvestment(uint256 _id) public returns (bool) {\n', '        if (IsReadyWithdrawInvestment(_id)) {\n', '            uint256 temp = Investors[_id].TokensOwn;\n', '            Investors[_id].TokensOwn = 0;\n', '            TransferToken(\n', '                pools[Investors[_id].Poolid].BaseData.Token,\n', '                Investors[_id].InvestorAddress,\n', '                temp\n', '            );\n', '            pools[Investors[_id].Poolid].MoreData.UnlockedTokens = SafeMath.add(\n', '                pools[Investors[_id].Poolid].MoreData.UnlockedTokens,\n', '                temp\n', '            );\n', '\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', "    //Give all the id's of the investment  by sender address\n", '    function GetMyInvestmentIds() public view returns (uint256[]) {\n', '        return InvestorsMap[msg.sender];\n', '    }\n', '\n', '    function GetInvestmentData(uint256 _id)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            Investors[_id].Poolid,\n', '            Investors[_id].InvestorAddress,\n', '            Investors[_id].MainCoin,\n', '            Investors[_id].TokensOwn,\n', '            Investors[_id].InvestTime\n', '        );\n', '    }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', 'contract ThePoolz is InvestorData {\n', '    constructor() public {    }\n', '\n', '    function WithdrawETHFee(address _to) public onlyOwner {\n', '        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n', '    }\n', '\n', '    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\n', '        uint256 temp = FeeMap[_Token];\n', '        FeeMap[_Token] = 0;\n', '        TransferToken(_Token, _to, temp);\n', '    }\n', '    \n', '}']