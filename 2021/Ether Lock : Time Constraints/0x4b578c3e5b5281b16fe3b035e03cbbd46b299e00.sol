['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', '// This governance contract calculcates total STBZ held by a particular address\n', '// It first gets the STBZ tokens held in wallet\n', '// Then STBZ held in staking pool\n', '// Then LP tokens held in wallet to calculate STBZ held by user\n', '// Then LP tokens held in operator contract pool\n', '// Then STBZ as unclaimed rewards\n', '// Finally STBZ in stabinol staker\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'interface Operator {\n', '    function poolBalance(uint256, address) external view returns (uint256);\n', '    function poolLength() external view returns (uint256);\n', '    function rewardEarned(uint256, address) external view returns (uint256);\n', '}\n', '\n', 'interface StakingPool {\n', '    function poolBalance(address) external view returns (uint256);\n', '}\n', '\n', 'interface StabinolStaker{\n', '    function getSTBZBalance(address _user) external view returns (uint256);\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'contract StabilizeGovernanceCalculator {\n', '    \n', '    address constant OPERATOR_ADDRESS = address(0xEe9156C93ebB836513968F92B4A67721f3cEa08a);\n', '    address constant STBZ_ADDRESS = address(0xB987D48Ed8f2C468D52D6405624EADBa5e76d723);\n', '    address constant UNILP_ADDRESS = address(0xDB28312a8d26D59978D9B86cA185707B1A26725b);\n', '    address constant STAKING_ADDRESS = address(0x8c17bE13e034f7fa2a6496bC83B6010be6305204);\n', '    address constant STABINOL_ADDRESS = address(0x4d44545cB6AE1f0Efb972be59379c5ae406E676C);\n', '    \n', '    function calculateTotalSTBZ(address _address) external view returns (uint256) {\n', '        IERC20 stbz = IERC20(STBZ_ADDRESS);\n', '        uint256 mySTBZ = stbz.balanceOf(_address); // First get the token balance of STBZ in the wallet\n', '        mySTBZ = mySTBZ + StakingPool(STAKING_ADDRESS).poolBalance(_address); // Get STBZ being staked\n', '        IERC20 lp = IERC20(UNILP_ADDRESS);\n', '        uint256 myLP = lp.balanceOf(_address); // Get amount of LP in wallet\n', '        myLP = myLP + Operator(OPERATOR_ADDRESS).poolBalance(0, _address);\n', '        // Now we have our LP balance and must calculate how much STBZ we have in it\n', '        uint256 stbzInLP = stbz.balanceOf(UNILP_ADDRESS);\n', '        stbzInLP = stbzInLP * myLP / lp.totalSupply();\n', '        mySTBZ = mySTBZ + stbzInLP;\n', '        // Now calculate the unclaimed rewards in all the pools\n', '        uint256 _poolLength = Operator(OPERATOR_ADDRESS).poolLength();\n', '        for(uint256 i = 0; i < _poolLength; i++){\n', '            mySTBZ = mySTBZ + Operator(OPERATOR_ADDRESS).rewardEarned(i, _address);\n', '        }\n', '        // Now calculate the STBZ in the stabinol staker\n', '        mySTBZ = mySTBZ + StabinolStaker(STABINOL_ADDRESS).getSTBZBalance(_address);\n', '        return mySTBZ;\n', '    }\n', '\n', '}']