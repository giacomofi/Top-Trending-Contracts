['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./MasterChef.sol";\n', '\n', 'contract MasterChefPendingBaskets {\n', '    using SafeMath for uint256;\n', '\n', '    MasterChef public immutable masterchef;\n', '\n', '    constructor(address _masterchef) {\n', '        masterchef = MasterChef(_masterchef);\n', '    }\n', '\n', '    // Fixed helper function to calculate pending baskets\n', '    function pendingBasket(uint256 _pid, address _user) external view returns (uint256) {\n', '        if (_pid >= masterchef.poolLength()) {\n', '            return 0;\n', '        }\n', '\n', '        (IERC20 lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accBasketPerShare) =\n', '            masterchef.poolInfo(_pid);\n', '        (uint256 amount, uint256 rewardDebt) = masterchef.userInfo(_pid, _user);\n', '\n', '        uint256 lpSupply = lpToken.balanceOf(address(masterchef));\n', '\n', '        if (block.number > lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = masterchef.getMultiplier(lastRewardBlock, block.number);\n', '            uint256 basketReward =\n', '                multiplier.mul(masterchef.basketPerBlock()).mul(allocPoint).div(masterchef.totalAllocPoint());\n', '\n', '            uint256 devAlloc = basketReward.mul(masterchef.devFundRate()).div(masterchef.divRate());\n', '            uint256 treasuryAlloc = basketReward.mul(masterchef.treasuryRate()).div(masterchef.divRate());\n', '\n', '            uint256 basketWithoutDevAndTreasury = basketReward.sub(devAlloc).sub(treasuryAlloc);\n', '\n', '            accBasketPerShare = accBasketPerShare.add(basketWithoutDevAndTreasury.mul(1e12).div(lpSupply));\n', '        }\n', '        return amount.mul(accBasketPerShare).div(1e12).sub(rewardDebt);\n', '    }\n', '}']