['//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Capped.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./Ownable.sol";\n', 'contract DSCVR is ERC20, ERC20Capped, ERC20Burnable, Ownable {  \n', '\n', '    uint256 public constant HARD_CAP = 100_000 * (10 ** 18); // 100k tokens\n', '    bool allowTransfer;\n', '    mapping (address => bool) public whiteListTransfer;\n', '\n', '    modifier isUnlocked() {\n', '        require(allowTransfer || whiteListTransfer[msg.sender], "Can-not-transfer");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor function of DSCVR Token\n', '     * @dev set name, symbol and decimal of token\n', '     * @dev mint hardcap to deployer\n', '     */\n', '    constructor() public \n', '    ERC20("DSCVR", "DSCVR") \n', '    ERC20Capped(HARD_CAP) {\n', '       whiteListTransfer[_msgSender()] = true;\n', '        _mint(msg.sender, HARD_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Admin whitelist/un-whitelist transfer  \n', '     * @dev to allow address transfer\n', '     * @dev token before allowTransferOn\n', '     */\n', '    function adminWhiteList(address _whitelistAddr, bool _whiteList) public onlyOwner returns (bool) {\n', '        whiteListTransfer[_whitelistAddr] = _whiteList;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin can set allowTransfer to allow user transfer token normally\n', '     */\n', '    function adminUnlockTransfer() public onlyOwner returns (bool) {\n', '        require(!allowTransfer, "Already-allowed");\n', '        allowTransfer = true;\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint amount) public isUnlocked override(ERC20) returns (bool) {\n', '        return super.transfer(to, amount);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint amount) public isUnlocked override(ERC20) returns (bool) {\n', '        return super.transferFrom(from, to, amount);\n', '    }\n', '     /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']