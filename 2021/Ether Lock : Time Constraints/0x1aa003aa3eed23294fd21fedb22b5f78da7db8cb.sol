['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract GasifyVault is Ownable {\n', '    IERC20 public GasifyVaultAddress;\n', '    uint256 public rewardsPool;\n', '    uint256 private totalLockedBalance;\n', '    uint8 private _isPaused;\n', '    \n', '    struct Lock {\n', '        address user;\n', '        uint256 amount;\n', '        uint256 unlockTime;\n', '    }\n', '    \n', '    mapping(address => Lock) public locks;\n', '    \n', '    event Locked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 startTime,\n', '        uint256 unlockTime\n', '    );\n', '    \n', '    event Unlocked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 unlockTime\n', '    );\n', '    \n', '    event RewardsSeeded(\n', '        address indexed admin,\n', '        uint256 indexed amount\n', '    );\n', '    \n', '    modifier whenNotPaused() {\n', '        require(_isPaused == 0, "GasifyVault: lock is currently paused");\n', '        _;\n', '    }\n', '\n', '    constructor(IERC20 _GasifyVaultAddress) {\n', '        GasifyVaultAddress = _GasifyVaultAddress;\n', '        totalLockedBalance = 0;\n', '        rewardsPool = 0;\n', '        _isPaused = 0;\n', '    }\n', '    \n', '    receive() external payable {\n', '        revert("You can not ETH token directly to the contract");\n', '    }\n', '    \n', '    function lock(uint256 _amount) external whenNotPaused {\n', '        require(locks[_msgSender()].amount == 0, "GasifyVault: Active lock found");\n', '        uint256 _unlockTime = block.timestamp + 30 days;\n', '        \n', '        GasifyVaultAddress.transferFrom(_msgSender(), address(this), _amount);\n', '        totalLockedBalance += _amount;\n', '        \n', '        locks[_msgSender()] = Lock(\n', '            _msgSender(),\n', '            _amount,\n', '            _unlockTime\n', '        );\n', '        emit Locked(_msgSender(), _amount, block.timestamp, _unlockTime);\n', '    }\n', '    \n', '    function unlock() external {\n', '        require(locks[_msgSender()].unlockTime <= block.timestamp, "GasifyVault: stakes is currently locked");\n', '        require(locks[_msgSender()].amount > 0, "GasifyVault: No active lock found");\n', '        \n', '        uint256 _amount = locks[_msgSender()].amount;\n', '        \n', '        locks[_msgSender()].amount = 0;\n', '        totalLockedBalance -= _amount;\n', '        \n', '        uint256 _rewards = calculateRewards(_amount);\n', '        rewardsPool -= _rewards;\n', '        \n', '        uint256 _totalValue = _amount + _rewards;\n', '        GasifyVaultAddress.transfer(_msgSender(), _totalValue);\n', '        emit Unlocked(_msgSender(), _totalValue, block.timestamp);\n', '    }\n', '    \n', '    function calculateRewards(uint256 _amount) internal pure returns(uint256) {\n', '        uint256 _rewards = (_amount * 40) / 100;\n', '        return _rewards;\n', '    }\n', '    \n', '    function getLockedTokens(address _account) external view returns(uint256) {\n', '        return locks[_account].amount;\n', '    }\n', '    \n', '    function getTotalLockedBalance() external view returns(uint256) {\n', '        return totalLockedBalance;\n', '    }\n', '    \n', '    function seedRewards(uint256 _amount) external onlyOwner {\n', '        GasifyVaultAddress.transferFrom(_msgSender(), address(this), _amount);\n', '        rewardsPool += _amount;\n', '        emit RewardsSeeded(_msgSender(), _amount);\n', '    }\n', '    \n', '    \n', '    function pause() external onlyOwner {\n', '        require(_isPaused == 0, "GasifyVault: lock is currently paused");\n', '        _isPaused = 1;\n', '    }\n', '    \n', '    function unpause() external onlyOwner {\n', '        require(_isPaused == 1, "GasifyVault: lock is currently active");\n', '        _isPaused = 0;\n', '    }\n', '    \n', '    function lockStatus() external view returns(uint8) {\n', '        return _isPaused;\n', '    }\n', '    \n', '    \n', '    function withdrawLockedToken(address _tokenAddress) external onlyOwner {\n', '        uint256 _balance = IERC20(_tokenAddress).balanceOf(address(this));\n', '        IERC20(_tokenAddress).transfer(owner(), _balance);\n', '    }\n', '}']