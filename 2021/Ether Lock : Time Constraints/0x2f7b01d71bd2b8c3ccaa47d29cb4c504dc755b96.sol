['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-17\n', '*/\n', '\n', '// Pool Token Balancer for Stabilize Protocol\n', '// Governance can change weights of various token pools using this rebalancer\n', '// The lower the price this returns, the higher the rewards from the operator contract for the pool\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'contract StabilizePoolRebalancer {\n', '    \n', '    // Mapping of custom tokens\n', '    mapping(address => uint256) public poolTokens;\n', '\n', '    address public owner;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        insertInitialTokens();\n', '    }\n', '    \n', '    modifier onlyGovernance() {\n', '        require(owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function insertInitialTokens() internal {\n', '        // Pool tokens\n', '        poolTokens[address(0x8e769EAA31375D13a1247dE1e64987c28Bed987E)] = 1e18;\n', '        poolTokens[address(0x739D93f2b116E6aD754e173655c635Bd5D8d664c)] = 1e18;\n', '        poolTokens[address(0x93B97BBb3F65EC39ea6041bF92FA998e5434E858)] = 1e18;\n', '        poolTokens[address(0xD469BB16116443F389EfEF407D73EF7Ab0Ad96Ce)] = 1e18;\n', '        poolTokens[address(0x27E8d93D27f55130B1870d8EF2BCE847C08A8191)] = 1e18;\n', '    }\n', '    \n', '    // Pool token options\n', '    function addNewPoolToken(address _address, uint256 _startPrice) external onlyGovernance {\n', '        poolTokens[_address] = _startPrice;\n', '    }\n', '    \n', '    function removePoolToken(address _address) external onlyGovernance {\n', '        poolTokens[_address] = 0;\n', '    }\n', '    \n', '    // Used to update the overall pool\n', '    function updatePoolTokens(address[] calldata _addresses, uint256[] calldata _prices) external onlyGovernance {\n', '        uint256 length = _addresses.length;\n', '        for(uint256 i = 0; i < length; i++){\n', '            poolTokens[_addresses[i]] = _prices[i];\n', '        }\n', '    }\n', '    \n', '    // Change governance\n', '    function governanceChange(address _address) external onlyGovernance {\n', '        owner = _address;\n', '    }\n', '    \n', '    function getPrice(address _address) public view returns (uint256) {\n', '        // This version of the price oracle will use Aave contracts\n', '        uint256 _price = poolTokens[_address];\n', '        if(_price == 0){ return 1e18; } // It returns a neutral price if pool token not found\n', '        return _price;\n', '    }\n', '\n', '}']