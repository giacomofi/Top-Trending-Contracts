['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function checkRate(uint unlockIndex) public constant returns (uint rate_);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Blacklisted(address indexed target);\n', '    \n', '\tevent DeleteFromBlacklist(address indexed target);\n', '\tevent RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint value);\n', '\tevent RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint value);\n', '\tevent RejectedPaymentToLockedAddr(address indexed from, address indexed to, uint value, uint lackdatetime, uint now_);\n', '\tevent RejectedPaymentFromLockedAddr(address indexed from, address indexed to, uint value, uint lackdatetime, uint now_);\n', '\tevent RejectedPaymentMaximunFromLockedAddr(address indexed from, address indexed to, uint value, uint maximum, uint rate);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract MNOBLECOIN is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public TGE;\n', '  \n', '    address addr_1\t= 0xD8ac88295004b923d0b7f9d586d2fe86bafE2a2f; // 팀자문 5%  (1년뒤 매년 10%씩 락업해제)\n', '    \n', '    address addr_2\t= 0xd27CAfC416CEBe3c10c744cBB57a7Cafe25d4bCd; // 프라이빗 15% \n', '    \n', '\taddress addr_3\t= 0xFee0E761c48a5DFCdF8c8d3a35504560BC0bAD88; // 퍼블릭 30%\n', '\t\n', '\taddress addr_4\t= 0x7f484A37B8Cd80db0510Bb38F7A68e7E01B4F82d; // 생태계파트너 5% (6개월뒤 매년 10%씩 락업해제)\n', '\t\n', '\taddress addr_5\t= 0x176b2C9853Ec5E8Ac128f2DbE4Cf30D51B1e2605; // 생태계바운티 15%\n', '\taddress addr_6\t= 0x1Fe3165d39206B8932e188eC15FD548B136a4F8C; // 마케팅  10%\n', '\t\n', '\taddress addr_7\t= 0xF862D0688D2403ee6DEAFB6E5077673E1bfBA188; // 팀파운더 20% (1년뒤 매년 10%씩 락업해제)\n', '\t\n', '\t\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => int8) public blacklist;\n', '    UnlockDateModel[] public unlockdate_T1;\n', '    UnlockDateModel[] public unlockdate_T2;\n', '\n', '    struct UnlockDateModel {\n', '\t\tuint256 datetime;\n', '\t\tuint rate;\n', '\t}\n', '\t\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "MNOBLE";\n', '        name = "mnoble coin";\n', '        decimals = 18;\n', '        _totalSupply = 3000000000000000000000000000; // 30억\n', '\n', '        balances[addr_1] = 150000000000000000000000000; // 팀자문 5%   150,000,000  (1년뒤 매년 10%씩 락업해제)\n', '        emit Transfer(address(0), addr_1, balances[addr_1]); \n', '        balances[addr_2] = 450000000000000000000000000; // 프라이빗 15% 450,000,000\n', '        emit Transfer(address(0), addr_2, balances[addr_2]); \n', '        balances[addr_3] = 900000000000000000000000000; // 퍼블릭 30%   900,000,000\n', '        emit Transfer(address(0), addr_3, balances[addr_3]); \n', '        balances[addr_4] = 150000000000000000000000000; // 생태계파트너 5%  150,000,000  (6개월뒤 매년 10%씩 락업해제)\n', '        emit Transfer(address(0), addr_4, balances[addr_4]); \n', '        balances[addr_5] = 450000000000000000000000000; // 생태계바운티 15% 450,000,000\n', '        emit Transfer(address(0), addr_5, balances[addr_5]); \n', '        balances[addr_6] = 300000000000000000000000000; // 마케팅 10%  300,000,000\n', '        emit Transfer(address(0), addr_6, balances[addr_6]);\n', '        balances[addr_7] = 600000000000000000000000000; // 팀파운더 20%  600,000,000\n', '        emit Transfer(address(0), addr_7, balances[addr_7]);\n', '        \n', '        TGE = now;\n', '        // 1month == 30days fixed\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 180 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 210 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 240 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 270 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 300 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 330 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 360 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 390 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 420 days, rate : 100}));\n', '        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 450 days, rate : 100}));\n', '        \n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 360 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 390 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 420 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 450 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 480 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 510 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 540 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 570 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 600 days, rate : 100}));\n', '        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 630 days, rate : 100}));\n', '        \n', '    }\n', '    \n', '    function now_() public constant returns (uint){\n', '        return now;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function checkRate(uint unlockIndex) public constant returns (uint rate_ ){\n', '        uint rate = 0;\n', '        if (unlockIndex == 1){\n', '            for (uint i = 0; i<unlockdate_T1.length; i++) {\n', '                if (unlockdate_T1[i].datetime < now) {\n', '                    rate = rate + unlockdate_T1[i].rate; \n', '                }\n', '            }\n', '        } else if (unlockIndex == 2){\n', '            for (uint s = 0; s<unlockdate_T2.length; s++) {\n', '                if (unlockdate_T2[s].datetime < now) {\n', '                    rate = rate + unlockdate_T2[s].rate; \n', '                }\n', '            }\n', '        }\n', '        return rate;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '  \n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        if (to == addr_1 || to == addr_7){\n', '            if (unlockdate_T2[9].datetime < now) {\n', '                emit RejectedPaymentToLockedAddr(msg.sender, to, tokens, unlockdate_T2[9].datetime, now);\n', '\t\t\t    require(false);\n', '            }\n', '        }\n', '        if (to == addr_4){\n', '            if (unlockdate_T1[9].datetime < now) {\n', '                emit RejectedPaymentToLockedAddr(msg.sender, to, tokens, unlockdate_T1[9].datetime, now);\n', '\t\t\t    require(false);\n', '            }\n', '            \n', '        }\n', '        \n', '        if (msg.sender == addr_1 || msg.sender == addr_7){\n', '            if (unlockdate_T2[0].datetime > now) {\n', '                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T2[0].datetime, now);\n', '\t\t\t    require(false);\n', '            } else {\n', '                uint rate1 = checkRate(2);\n', '                uint maximum1 = 150000000000000000000000000 - ((150000000000000000000000000 * 0.001) * rate1);\n', '                if (maximum1 > (balances[msg.sender] - tokens)){\n', '                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum1, rate1);\n', '\t\t\t        require(false);\n', '                }\n', '            }\n', '        } else if (msg.sender == addr_4){\n', '            if (unlockdate_T1[0].datetime > now) {\n', '                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T1[0].datetime, now);\n', '\t\t\t    require(false);\n', '            } else {\n', '                uint rate2 = checkRate(1);\n', '                uint maximum2 = 150000000000000000000000000 - (150000000000000000000000000 * 0.001) * rate2;\n', '                if (maximum2 > (balances[msg.sender] - tokens)){\n', '                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum2, rate2);\n', '\t\t\t        require(false);\n', '                }\n', '            }\n', '        }\n', '        \n', '        if (blacklist[msg.sender] > 0) { // Accounts in the blacklist can not be withdrawn\n', '\t\t\temit RejectedPaymentFromBlacklistedAddr(msg.sender, to, tokens);\n', '\t\t\trequire(false);\n', '\t\t} else if (blacklist[to] > 0) { // Accounts in the blacklist can not be withdrawn\n', '\t\t\temit RejectedPaymentToBlacklistedAddr(msg.sender, to, tokens);\n', '\t\t\trequire(false);\n', '\t\t} else {\n', '\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            emit Transfer(msg.sender, to, tokens);\n', '\t\t}\n', '\t\treturn true;\n', '\t\t\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        if (to == addr_1 || to == addr_7){\n', '            if (unlockdate_T2[9].datetime < now) {\n', '                emit RejectedPaymentToLockedAddr(msg.sender, to, tokens, unlockdate_T2[9].datetime, now);\n', '\t\t\t    require(false);\n', '            }\n', '        }\n', '        if (to == addr_4){\n', '            if (unlockdate_T1[9].datetime < now) {\n', '                emit RejectedPaymentToLockedAddr(msg.sender, to, tokens, unlockdate_T1[9].datetime, now);\n', '\t\t\t    require(false);\n', '            }\n', '            \n', '        }\n', '        \n', '        if (msg.sender == addr_1 || msg.sender == addr_7){\n', '            if (unlockdate_T2[0].datetime > now) {\n', '                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T2[0].datetime, now);\n', '\t\t\t    require(false);\n', '            } else {\n', '                uint rate1 = checkRate(2);\n', '                uint maximum1 = 150000000000000000000000000 - ((150000000000000000000000000 * 0.001) * rate1);\n', '                if (maximum1 > (balances[msg.sender] - tokens)){\n', '                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum1, rate1);\n', '\t\t\t        require(false);\n', '                }\n', '            }\n', '        } else if (msg.sender == addr_4){\n', '            if (unlockdate_T1[0].datetime > now) {\n', '                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T1[0].datetime, now);\n', '\t\t\t    require(false);\n', '            } else {\n', '                uint rate2 = checkRate(1);\n', '                uint maximum2 = 150000000000000000000000000 - (150000000000000000000000000 * 0.001) * rate2;\n', '                if (maximum2 > (balances[msg.sender] - tokens)){\n', '                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum2, rate2);\n', '\t\t\t        require(false);\n', '                }\n', '            }\n', '        }\n', '        \n', '        if (blacklist[from] > 0) { // Accounts in the blacklist can not be withdrawn\n', '\t\t\temit RejectedPaymentFromBlacklistedAddr(from, to, tokens);\n', '\t\t\trequire(false);\n', '\t\t} else if (blacklist[to] > 0) { // Accounts in the blacklist can not be withdrawn\n', '\t\t\temit RejectedPaymentToBlacklistedAddr(from, to, tokens);\n', '\t\t\trequire(false);\n', '\t\t} else {\n', '\t\t    balances[from] = safeSub(balances[from], tokens);\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            emit Transfer(from, to, tokens);\n', '\t\t}\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account. The spender contract function\n", '    // receiveApproval(...) is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\t\n', '\t// ------------------------------------------------------------------------\n', '    // Owner can add blacklist the wallet address.\n', '    // ------------------------------------------------------------------------\n', '\tfunction blacklisting(address _addr) public onlyOwner{\n', '\t\tblacklist[_addr] = 1;\n', '\t\temit Blacklisted(_addr);\n', '\t}\n', '\t\n', '\t\n', '\t// ------------------------------------------------------------------------\n', '    // Owner can delete from blacklist the wallet address.\n', '    // ------------------------------------------------------------------------\n', '\tfunction deleteFromBlacklist(address _addr) public onlyOwner{\n', '\t\tblacklist[_addr] = -1;\n', '\t\temit DeleteFromBlacklist(_addr);\n', '\t}\n', '\t\n', '}']