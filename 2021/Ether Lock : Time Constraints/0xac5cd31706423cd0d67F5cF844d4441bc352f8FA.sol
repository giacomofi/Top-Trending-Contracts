['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./ERC20.sol";\n', '\n', 'import "./XBASK.sol";\n', '\n', 'interface IMasterChef {\n', '    function userInfo(uint256, address) external view returns (uint256, uint256);\n', '}\n', '\n', 'contract BaskVoter {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public constant baskEthSLP = IERC20(0x34D25a4749867eF8b62A0CD1e2d7B4F7aF167E01);\n', '    IERC20 public constant bask = IERC20(0x44564d0bd94343f72E3C8a0D22308B7Fa71DB0Bb);\n', '    XBASK public constant xbask = XBASK(0x5C0e75EB4b27b5F9c99D78Fc96AFf7869eDa007b);\n', '\n', '    // Masterchef contract\n', '    IMasterChef public constant chef = IMasterChef(0xDB9daa0a50B33e4fe9d0ac16a1Df1d335F96595e);\n', '\n', '    function decimals() external pure returns (uint8) {\n', '        return uint8(18);\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return "BASK Voter";\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return "BASKV";\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return bask.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _voter) external view returns (uint256) {\n', '        // BASK/ETH is pool id 2\n', '        (uint256 _stakedEthBaskSlpAmount, ) = chef.userInfo(2, _voter);\n', '        uint256 ethBaskSlpAmount = baskEthSLP.balanceOf(_voter);\n', '        uint256 bareBaskAmount = bask.balanceOf(_voter);\n', '\n', '        // XBASK\n', '        uint256 xbaskBaskAmount = xbask.getRatio(xbask.balanceOf(_voter));\n', '\n', '        uint256 votePower =\n', '            getBaskAmountFromSLP(_stakedEthBaskSlpAmount)\n', '                .add(getBaskAmountFromSLP(ethBaskSlpAmount))\n', '                .add(bareBaskAmount)\n', '                .add(xbaskBaskAmount);\n', '\n', '        return votePower;\n', '    }\n', '\n', '    function getBaskAmountFromSLP(uint256 _slpAmount) public view returns (uint256) {\n', '        uint256 baskAmount = bask.balanceOf(address(baskEthSLP));\n', '        uint256 tokenAmount = baskEthSLP.totalSupply();\n', '\n', '        return _slpAmount.mul(1e18).div(tokenAmount).mul(baskAmount).div(1e18);\n', '    }\n', '\n', '    constructor() {}\n', '}']