['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-05\n', '*/\n', '\n', 'pragma solidity 0.8.1;\n', '\n', '\n', '/** @title Repeater\n', ' *  This contract repeats calls on the owner request.\n', ' */\n', 'contract Repeater {\n', '    address owner = msg.sender;\n', '    \n', '/** @dev Call `_target` with `_data`\n', ' *  @param _target The contract to call.\n', ' *  @param _data The data to send to the contract.\n', ' */    \n', '    function repeat(address _target, bytes calldata _data) external {\n', '        require(msg.sender == owner);\n', '        _target.call(_data);\n', '    }\n', '\n', '/** @dev Call `_target` with `_data` sending `_value` wei.\n', ' *  @param _target The contract to call.\n', ' *  @param _data The data to send to the contract.\n', ' *  @param _value The amount of wei to send.\n', ' */\n', '    function repeatWithValue(address _target, bytes calldata _data, uint _value) external {\n', '        require(msg.sender == owner);\n', '        _target.call{value: _value}(_data);\n', '    }\n', '    \n', '    receive() external payable {}\n', '}\n', '\n', '/** @title Master\n', ' *  This contract creates repeaters and make them perform some actions.\n', ' */\n', 'contract Master {\n', '    address public owner = msg.sender;\n', '    Repeater[] public repeaters;\n', '    \n', '    function changeOwner(address _newOwner) external {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '    /** @dev Create `_amount` repeaters.\n', '     *  @param _amount The amount of repeaters to create.\n', '     */\n', '    function addRepeaters(uint _amount) external {\n', '        require(msg.sender == owner);\n', '        for (uint i; i<_amount; ++i) {\n', '            repeaters.push(new Repeater());\n', '        }\n', '    }\n', '    \n', '    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data`.\n', '     *  @param _start The first repeater ID.\n', '     *  @param _end The last repeater ID.\n', '     *  @param _target The contract to be called by the repeaters.\n', '     *  @param _data The data the repeaters will send to the contract.\n', '     */\n', '    function say(uint _start, uint _end, address _target, bytes calldata _data) external {\n', '        require(msg.sender == owner);\n', '        for (uint i=_start; i<=_end; ++i) {\n', '            repeaters[i].repeat(_target, _data);\n', '        }\n', '    }\n', '\n', '    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data` sending `_value` wei.\n', '     *  @param _start The first repeater ID.\n', '     *  @param _end The last repeater ID.\n', '     *  @param _target The contract to be called by the repeaters.\n', '     *  @param _data The data the repeaters will send to the contract.\n', '     *  @param _value The amount of wei to send.\n', '     */\n', '    function sayWithValue(uint _start, uint _end, address _target, bytes calldata _data, uint _value) external {\n', '        require(msg.sender == owner);\n', '        for (uint i=_start; i<=_end; ++i) {\n', '            repeaters[i].repeatWithValue(_target, _data, _value);\n', '        }\n', '    }    \n', '    \n', '    /** @dev Return the list of repeaters.\n', '     *  @return The list of repeaters.\n', '     */\n', '    function getRepeatersAddresses() external view returns(Repeater[] memory)  {\n', '        return repeaters;\n', '    }\n', '    \n', '    \n', '}']