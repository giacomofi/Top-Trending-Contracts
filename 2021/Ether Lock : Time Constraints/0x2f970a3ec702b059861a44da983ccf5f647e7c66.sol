['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '//////////DEFI product for staking Your YOP tokens and getting rewards\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '///////////////////////////////////////////////////////////////////////////////////\n', 'pragma solidity ^0.8.0;\n', '\n', '//Version 1.3\n', '\n', '//THE smart contract for staking RAMP tokens and claiming the rewards\n', '//Fully fair and simple. Enjoy ;)\n', '\n', '\n', 'contract HopOnYop\n', '{\n', '    \n', '    IERC20 public YOP;\n', '    \n', '    uint256 public RewardPool;\n', '    uint256 public AllTimeStaked;\n', '    uint256 public TVL;\n', '    uint256 public RewardsOwed;\n', '    uint256 private constant minStake = 88  * (10 ** 8);\n', '    uint256 private constant maxStake = 33333  * (10 ** 8);\n', '    uint8 constant public reward1 = 6; uint256 constant public stakedFor1 = 30 days; //6% reward for 30 days lock\n', '    uint8 constant public reward2 = 15; uint256 constant public stakedFor2 = 60 days; //15% reward for 60 days lock\n', '    uint8 constant public reward3 = 33; uint256 constant public stakedFor3 = 90 days; //33% reward for 90 days lock\n', '    \n', '    \n', '    constructor (address addr)\n', '    {\n', '        YOP = IERC20(addr);\n', '    }\n', '    \n', '    enum options {d30, d60, d90}\n', '    struct stake\n', '    {\n', '        uint256 amount;\n', '        uint256 stakingTime;\n', '        options option;\n', '        bool rewardTaken;\n', '    }\n', '    \n', '    mapping(address => stake) private stakes;    \n', '    \n', '    \n', '    /**\n', '     * @dev Adds more tokens to the pool, but first we needs to add allowance for this contract\n', '     */\n', '    function feedRewardPool() public\n', '    {\n', '         uint256 tokenAmount = YOP.allowance(msg.sender, address(this));\n', '         RewardPool += tokenAmount;\n', '         require(YOP.transferFrom(msg.sender, address(this), tokenAmount)); //Transfers the tokens to smart contract\n', '    }\n', '\n', '    function stakeYOP(options option) public\n', '    {\n', '       \n', '        require(stakes[msg.sender].stakingTime == 0, "Error: Only one staking per address!!!");\n', '        uint256 tokenAmount = YOP.allowance(msg.sender, address(this));\n', '        require(tokenAmount > 0, "Error: Need to increase allowance first");\n', '        require(tokenAmount >= minStake && tokenAmount <= maxStake ,"Error: You should stake from 33 to 88888 tokens.");\n', '        stakes[msg.sender].amount = tokenAmount;\n', '        stakes[msg.sender].option = option;\n', '        stakes[msg.sender].stakingTime = block.timestamp;\n', '        \n', '        uint256 reward = calculateReward(msg.sender);\n', '        require(RewardPool >= reward + RewardsOwed, "Error: No enough rewards for You, shouldve thought about this before it went moon");\n', '        \n', '        TVL += tokenAmount;\n', '        RewardsOwed += reward;\n', '        AllTimeStaked += tokenAmount;\n', '        require(YOP.transferFrom(msg.sender, address(this), tokenAmount)); //Transfers the tokens to smart contract\n', '        \n', '\n', '    }\n', '\n', '    /**\n', '     * @dev claims the rewards and stake for the stake, can be only called by the user\n', '     * doesnt work if the campaign isnt finished yet\n', '     */\n', '    function claimRewards() public\n', '    {\n', '        require(stakes[msg.sender].rewardTaken == false,"Error: You already took the reward");\n', '        uint256 stakedFor;\n', '        options option = stakes[msg.sender].option;\n', '        \n', '        if(option == options.d30)\n', '        stakedFor = stakedFor1;\n', '        \n', '        if(option == options.d60)\n', '        stakedFor = stakedFor2;\n', '        \n', '        if(option == options.d90)\n', '        stakedFor = stakedFor3;\n', '        \n', '        require(stakes[msg.sender].stakingTime + stakedFor <= block.timestamp, "Error: Too soon to unstake");\n', '        uint256 reward = calculateReward(msg.sender);\n', '        uint256 amount = stakes[msg.sender].amount;\n', '        TVL -= amount;\n', '        RewardsOwed -= reward;\n', '        RewardPool -= reward;\n', '        stakes[msg.sender].rewardTaken = true;\n', '        \n', '        _withdraw(reward + amount);\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev calculates the rewards+stake for the given staker\n', '     * @param staker is the staker we want the info for\n', '     */\n', '    function calculateReward(address staker) public view returns(uint256)\n', '    {\n', '        uint256 reward;\n', '        options option = stakes[staker].option;\n', '        \n', '        if(option == options.d30)\n', '        reward = reward1;\n', '        \n', '        if(option == options.d60)\n', '        reward = reward2;\n', '        \n', '        if(option == options.d90)\n', '        reward = reward3;\n', '        \n', '        return ((stakes[staker].amount * reward) / 100);\n', '    }\n', '    \n', '    \n', '    function getStakerInfo(address addr) public view returns(uint256, uint256, options, bool)\n', '    {\n', '        return(stakes[addr].amount,stakes[addr].stakingTime,stakes[addr].option,stakes[addr].rewardTaken);\n', '    }\n', '    \n', '    \n', '    function _withdraw(uint256 amount) internal\n', '    {\n', '        require(YOP.transfer(msg.sender, amount));\n', '        emit withdrawHappened(msg.sender, amount);\n', '    }\n', '    \n', '    event withdrawHappened(address indexed to, uint256 amount);\n', '   \n', '}']