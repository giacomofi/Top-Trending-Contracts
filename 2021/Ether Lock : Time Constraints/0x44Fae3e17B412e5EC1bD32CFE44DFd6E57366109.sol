['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.7.1;\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/SafeCast.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n", ' * checks.\n', ' *\n', ' * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n', ' * easily result in undesired exploitation or bugs, since developers usually\n', ' * assume that overflows raise errors. `SafeCast` restores this intuition by\n', ' * reverting the transaction when such an operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' *\n', ' * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n', ' * all math on `uint256` and `int256` and then downcasting.\n', ' */\n', 'library SafeCast {\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', '// File: contracts/Interfaces/StakingInterface.sol\n', '\n', '\n', '\n', '\n', 'interface StakingInterface {\n', '  function getStakingTokenAddress() external view returns (address);\n', '\n', '  function getTokenInfo()\n', '    external\n', '    view\n', '    returns (\n', '      uint256 currentTerm,\n', '      uint256 latestTerm,\n', '      uint256 totalRemainingRewards,\n', '      uint256 currentTermRewards,\n', '      uint256 nextTermRewards,\n', '      uint128 currentStaking,\n', '      uint128 nextTermStaking\n', '    );\n', '\n', '  function getConfigs() external view returns (uint256 startTimestamp, uint256 termInterval);\n', '\n', '  function getTermInfo(uint256 term)\n', '    external\n', '    view\n', '    returns (\n', '      int128 stakeAdd,\n', '      uint128 stakeSum,\n', '      uint256 rewardSum\n', '    );\n', '\n', '  function getAccountInfo(address account)\n', '    external\n', '    view\n', '    returns (\n', '      uint256 userTerm,\n', '      uint256 stakeAmount,\n', '      int128 nextAddedStakeAmount,\n', '      uint256 remaining,\n', '      uint256 currentTermUserRewards,\n', '      uint256 nextTermUserRewards,\n', '      uint128 depositAmount,\n', '      uint128 withdrawableStakingAmount\n', '    );\n', '}\n', '\n', '// File: contracts/Staking/Staking.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Staking is ReentrancyGuard, StakingInterface {\n', '  using SafeMath for uint256;\n', '  using SafeMath for uint128;\n', '  using SignedSafeMath for int256;\n', '  using SignedSafeMath for int128;\n', '  using SafeCast for uint256;\n', '  using SafeCast for uint128;\n', '  using SafeCast for int256;\n', '  using SafeCast for int128;\n', '  using SafeERC20 for IERC20;\n', '\n', '  /* ========== CONSTANT VARIABLES ========== */\n', '\n', '  uint256 internal constant MAX_TERM = 100;\n', '\n', '  IERC20 internal immutable _stakingToken;\n', '  uint256 internal immutable _startTimestamp; // timestamp of the term 0\n', '  uint256 internal immutable _termInterval; // time interval between terms in second\n', '\n', '  /* ========== STATE VARIABLES ========== */\n', '\n', '  uint256 internal _currentTerm; // the current term (all the info prior to this term is fixed)\n', '  uint256 internal _totalRemaining; // total unsettled amount of rewards and withdrawal\n', '  uint256 internal _totalRewardAdded; // total unsettled amount of rewards\n', '\n', '  struct AccountInfo {\n', '    int128 added; // the added amount of stake which will be merged to stakeAmount at the term+1.\n', '    uint128 stakeAmount; // active stake amount of the user at userTerm\n', '    uint256 remaining; // the total amount of rewards and withdrawal until userTerm\n', '    uint256 userTerm; // the term when the user executed any function last time (all the terms before the term has been already settled)\n', '  }\n', '\n', '  /**\n', '   * @dev account => data\n', '   */\n', '  mapping(address => AccountInfo) internal _accountInfoList;\n', '\n', '  struct TermInfo {\n', '    uint128 stakeAdd; // the total added amount of stake which will be merged to stakeSum at the term+1\n', '    uint128 stakeRemove;\n', '    uint128 stakeSum; // the total staking amount at the term\n', '    uint256 rewardSum; // the total amount of rewards at the term\n', '  }\n', '\n', '  /**\n', '   * @dev term => data\n', '   */\n', '  mapping(uint256 => TermInfo) internal _termInfoList;\n', '\n', '  /* ========== EVENTS ========== */\n', '\n', '  event Staked(address indexed account, uint128 amount);\n', '  event Withdrawn(address indexed account, uint128 amount);\n', '  event RewardPaid(address indexed account, uint256 amount);\n', '  event TermUpdated(uint256 currentTerm);\n', '  event RewardUpdated(address indexed account, uint256 currentTerm);\n', '  event RewardAdded(address indexed account, uint256 indexed term, uint256 amount);\n', '\n', '  /* ========== CONSTRUCTOR ========== */\n', '\n', '  constructor(\n', '    IERC20 stakingToken,\n', '    uint256 startTimestamp,\n', '    uint256 termInterval\n', '  ) {\n', '    require(startTimestamp <= block.timestamp, "startTimestamp should be past time");\n', '    _startTimestamp = startTimestamp;\n', '    _stakingToken = stakingToken;\n', '    _termInterval = termInterval;\n', '  }\n', '\n', '  /* ========== MODIFIERS ========== */\n', '\n', '  /**\n', '   * @dev Update the info up to the current term.\n', '   */\n', '  modifier updateTerm() {\n', '    uint256 latestTerm = _getLatestTerm();\n', '    if (_currentTerm < latestTerm) {\n', '      uint128 sendBackLater = _termInfoList[_currentTerm].stakeRemove;\n', '      uint128 nextStakeSum = _getNextStakeSum();\n', '      uint256 nextTerm = nextStakeSum == 0 ? latestTerm : _currentTerm + 1; // if next stakeSum is 0, skip to latest term\n', '      uint256 nextTermReward = _getNextTermReward();\n', '      _termInfoList[nextTerm] = TermInfo({\n', '        stakeAdd: 0,\n', '        stakeRemove: 0,\n', '        stakeSum: nextStakeSum,\n', '        rewardSum: nextTermReward\n', '      });\n', '\n', '      // write total stake amount since (nextTerm + 1) until latestTerm\n', '      if (nextTerm < latestTerm) {\n', '        // assert(_termInfoList[nextTerm].stakeSum != 0 && _termInfoList[nextTerm].stakeAdd == 0);\n', '        _termInfoList[latestTerm] = TermInfo({\n', '          stakeAdd: 0,\n', '          stakeRemove: 0,\n', '          stakeSum: nextStakeSum,\n', '          rewardSum: 0\n', '        });\n', '      }\n', '\n', '      _totalRemaining = _totalRemaining.add(_totalRewardAdded).add(sendBackLater);\n', '      _totalRewardAdded = 0;\n', '      _currentTerm = latestTerm;\n', '    }\n', '\n', '    emit TermUpdated(_currentTerm);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate total rewards of the account until the current term.\n', '   */\n', '  modifier updateReward(address account) {\n', '    AccountInfo memory accountInfo = _accountInfoList[account];\n', '    uint256 startTerm = accountInfo.userTerm;\n', '    for (uint256 term = startTerm; term < _currentTerm && term < startTerm + MAX_TERM; term++) {\n', '      TermInfo memory termInfo = _termInfoList[term];\n', '\n', '      if (termInfo.stakeSum != 0) {\n', '        require(\n', '          accountInfo.stakeAmount <= termInfo.stakeSum,\n', '          "system error: stakeAmount is not more than stakeSum"\n', '        );\n', '\n', '        // `(total rewards) * (your stake amount) / (total stake amount)` in each term\n', '        uint256 rewardsAdded = termInfo.rewardSum.mul(accountInfo.stakeAmount) / termInfo.stakeSum;\n', '        accountInfo.remaining = accountInfo.remaining.add(rewardsAdded);\n', '        emit RewardAdded(account, term, rewardsAdded);\n', '      }\n', '\n', '      accountInfo.stakeAmount = addDiff(accountInfo.stakeAmount, accountInfo.added).toUint128();\n', '      if (accountInfo.added < 0) {\n', '        accountInfo.remaining = addDiff(accountInfo.remaining, -accountInfo.added);\n', '      }\n', '      accountInfo.added = 0;\n', '\n', '      if (accountInfo.stakeAmount == 0) {\n', '        accountInfo.userTerm = _currentTerm;\n', '        break; // skip unnecessary term\n', '      }\n', '\n', '      accountInfo.userTerm = term + 1; // calculated until this term\n', '    }\n', '\n', '    _accountInfoList[account] = accountInfo;\n', '\n', '    // do not execute main function if `userTerm` is not the same with `_currentTerm`.\n', '    if (accountInfo.userTerm < _currentTerm) {\n', '      return;\n', '    }\n', '\n', '    emit RewardUpdated(account, _currentTerm);\n', '    _;\n', '  }\n', '\n', '  /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '  /**\n', '   * @notice Stake the staking token for the token to be paid as reward.\n', '   */\n', '  // function stake(uint128 amount)\n', '  //   external\n', '  //   override\n', '  //   nonReentrant\n', '  //   updateTerm()\n', '  //   updateReward(msg.sender)\n', '  // {\n', '  //   require(amount != 0, "staking amount should be positive number");\n', '\n', '  //   _stake(msg.sender, amount);\n', '  //   _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '  // }\n', '\n', '  /**\n', '   * @notice Withdraw the staking token for the token to be paid as reward.\n', '   */\n', '  // function withdraw(uint128 amount)\n', '  //   external\n', '  //   override\n', '  //   nonReentrant\n', '  //   updateTerm()\n', '  //   updateReward(msg.sender)\n', '  // {\n', '  //   require(amount != 0, "withdrawing amount should be positive number");\n', '\n', '  //   _withdraw(msg.sender, amount);\n', '  //   // _stakingToken.safeTransfer(msg.sender, amount);\n', '  // }\n', '\n', '  /**\n', '   * @notice Receive the reward and withdrawal from this contract.\n', '   */\n', '  // function receiveReward()\n', '  //   external\n', '  //   override\n', '  //   nonReentrant\n', '  //   updateTerm()\n', '  //   updateReward(msg.sender)\n', '  //   returns (uint256 remaining)\n', '  // {\n', '  //   remaining = _receiveReward(msg.sender);\n', '  //   if (remaining != 0) {\n', '  //     _stakingToken.safeTransfer(msg.sender, remaining);\n', '  //   }\n', '  //   return remaining;\n', '  // }\n', '\n', '  /**\n', '   * @notice Add the reward to this contract.\n', '   */\n', '  function addReward(uint128 amount) external nonReentrant updateTerm() {\n', '    _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    return _addReward(msg.sender, amount);\n', '  }\n', '\n', '  /* ========== INTERNAL FUNCTIONS ========== */\n', '\n', '  /**\n', '   * @dev The stake amount of `account` increaases by `amount`.\n', '   * This function is staking if `amount` is positive, otherwise unstaking.\n', '   */\n', '  // function _stakeOrUnstake(address account, int128 amount) internal {\n', '  //   uint256 term = _currentTerm;\n', '  //   AccountInfo memory accountInfo = _accountInfoList[account];\n', '  //   require(\n', '  //     addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\n', '  //     "stake amount is out of range"\n', '  //   );\n', '\n', '  //   _accountInfoList[account].added = _accountInfoList[account].added.add(amount).toInt128(); // added when the term is shifted (the user)\n', '  //   if (amount >= 0) {\n', '  //     _termInfoList[term].stakeAdd = _termInfoList[term].stakeAdd.add(amount.toUint256()).toUint128(); // added when the term is shifted (global)\n', '  //   } else {\n', '  //     _termInfoList[term].stakeRemove = _termInfoList[term].stakeRemove.sub(-amount.toUint256()).toUint128(); // added when the term is shifted (global)\n', '  //   }\n', '  // }\n', '\n', '  function _stake(address account, uint128 amount) internal returns (uint128 sendBack) {\n', '    sendBack = 0;\n', '    if (_accountInfoList[account].added < 0) {\n', '      uint128 added = uint128(-_accountInfoList[account].added);\n', '      sendBack = added < amount ? added : amount; // min(added, amount)\n', '    }\n', '\n', '    uint256 term = _currentTerm;\n', '    AccountInfo memory accountInfo = _accountInfoList[account];\n', '    require(\n', '      addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\n', '      "stake amount is out of range"\n', '    );\n', '\n', '    _accountInfoList[account].added = _accountInfoList[account]\n', '      .added\n', '      .add(int256(amount))\n', '      .toInt128(); // added when the term is shifted (the user)\n', '    // assert(sendBack <= amount);\n', '    TermInfo memory termInfo = _termInfoList[term];\n', '    termInfo.stakeAdd = termInfo.stakeAdd.add(amount - sendBack).toUint128(); // added when the term is shifted (global)\n', '    termInfo.stakeRemove = termInfo.stakeRemove.sub(sendBack).toUint128(); // added when the term is shifted (global)\n', '    _termInfoList[term] = termInfo;\n', '    emit Staked(account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Callee must send back staking token to sender instantly until `added` becomes zero.\n', '   *  One can use the return value `sendBack` for it.\n', '   */\n', '  function _withdraw(address account, uint128 amount) internal returns (uint128 sendBack) {\n', '    sendBack = 0;\n', '    if (_accountInfoList[account].added > 0) {\n', '      uint128 added = uint128(_accountInfoList[account].added);\n', '      sendBack = added < amount ? added : amount; // min(added, amount)\n', '    }\n', '\n', '    uint256 term = _currentTerm;\n', '    AccountInfo memory accountInfo = _accountInfoList[account];\n', '    require(\n', '      addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\n', '      "stake amount is out of range"\n', '    );\n', '\n', '    _accountInfoList[account].added = _accountInfoList[account].added.sub(amount).toInt128(); // added when the term is shifted (the user)\n', '    // assert(sendBack <= amount);\n', '    TermInfo memory termInfo = _termInfoList[term];\n', '    termInfo.stakeAdd = termInfo.stakeAdd.sub(sendBack).toUint128(); // added when the term is shifted (global)\n', '    termInfo.stakeRemove = termInfo.stakeRemove.add(amount - sendBack).toUint128(); // added when the term is shifted (global)\n', '    _termInfoList[term] = termInfo;\n', '\n', '    emit Withdrawn(account, amount);\n', '  }\n', '\n', '  function _receiveReward(address account) internal returns (uint256 remaining) {\n', '    remaining = _accountInfoList[account].remaining;\n', '    if (remaining != 0) {\n', '      _totalRemaining = _totalRemaining.sub(remaining, "system error: _totalRemaining is invalid");\n', '      _accountInfoList[account].remaining = 0;\n', '      emit RewardPaid(account, remaining);\n', '    }\n', '  }\n', '\n', '  function _addReward(address, uint128 amount) internal {\n', '    _totalRewardAdded = _totalRewardAdded.add(amount);\n', '  }\n', '\n', '  function _getNextStakeSum() internal view returns (uint128 nextStakeSum) {\n', '    TermInfo memory currentTermInfo = _termInfoList[_currentTerm];\n', '    return\n', '      currentTermInfo\n', '        .stakeSum\n', '        .add(currentTermInfo.stakeAdd)\n', '        .sub(currentTermInfo.stakeRemove)\n', '        .toUint128();\n', '  }\n', '\n', '  function _getCarriedReward() internal view returns (uint256 carriedReward) {\n', '    TermInfo memory currentTermInfo = _termInfoList[_currentTerm];\n', '    return currentTermInfo.stakeSum == 0 ? currentTermInfo.rewardSum : 0; // if stakeSum is 0, carried forward until someone stakes\n', '  }\n', '\n', '  function _getNextTermReward() internal view returns (uint256 rewards) {\n', '    uint256 carriedReward = _getCarriedReward();\n', '    return _totalRewardAdded.add(carriedReward);\n', '  }\n', '\n', '  function _getLatestTerm() internal view returns (uint256) {\n', '    return (block.timestamp - _startTimestamp) / _termInterval;\n', '  }\n', '\n', '  /* ========== CALL FUNCTIONS ========== */\n', '\n', '  /**\n', '   * @return stakingTokenAddress is the token locked for staking\n', '   */\n', '  function getStakingTokenAddress() external view override returns (address stakingTokenAddress) {\n', '    return address(_stakingToken);\n', '  }\n', '\n', '  /**\n', '   * @return startTimestamp is the time when this contract was deployed\n', '   * @return termInterval is the duration of a term\n', '   */\n', '  function getConfigs()\n', '    external\n', '    view\n', '    override\n', '    returns (uint256 startTimestamp, uint256 termInterval)\n', '  {\n', '    startTimestamp = _startTimestamp;\n', '    termInterval = _termInterval;\n', '  }\n', '\n', '  function getTotalRewardAdded() external view returns (uint256 totalRewardAdded) {\n', '    return _totalRewardAdded;\n', '  }\n', '\n', '  /**\n', '   * @return currentTerm is the current latest term\n', '   * @return latestTerm is the potential latest term\n', '   * @return totalRemainingRewards is the as-of remaining rewards and withdrawal\n', '   * @return currentTermRewards is the total rewards at the current term\n', '   * @return nextTermRewards is the as-of total rewards to be paid at the next term\n', '   * @return currentStaking is the total active staking amount\n', '   * @return nextTermStaking is the total staking amount\n', '   */\n', '  function getTokenInfo()\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      uint256 currentTerm,\n', '      uint256 latestTerm,\n', '      uint256 totalRemainingRewards,\n', '      uint256 currentTermRewards,\n', '      uint256 nextTermRewards,\n', '      uint128 currentStaking,\n', '      uint128 nextTermStaking\n', '    )\n', '  {\n', '    currentTerm = _currentTerm;\n', '    latestTerm = _getLatestTerm();\n', '    totalRemainingRewards = _totalRemaining;\n', '    TermInfo memory termInfo = _termInfoList[_currentTerm];\n', '    currentTermRewards = termInfo.rewardSum;\n', '    nextTermRewards = _getNextTermReward();\n', '    currentStaking = termInfo.stakeSum;\n', '    nextTermStaking = termInfo\n', '      .stakeSum\n', '      .add(termInfo.stakeAdd)\n', '      .sub(termInfo.stakeRemove)\n', '      .toUint128();\n', '  }\n', '\n', '  /**\n', '   * @notice Returns _termInfoList[term].\n', '   */\n', '  function getTermInfo(uint256 term)\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      int128 stakeAdd,\n', '      uint128 stakeSum,\n', '      uint256 rewardSum\n', '    )\n', '  {\n', '    TermInfo memory termInfo = _termInfoList[term];\n', '    stakeAdd = int256(termInfo.stakeAdd).sub(termInfo.stakeRemove).toInt128();\n', '    stakeSum = termInfo.stakeSum;\n', '    if (term == _currentTerm.add(1)) {\n', '      rewardSum = _getNextTermReward();\n', '    } else {\n', '      rewardSum = termInfo.rewardSum;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @return userTerm is the latest term the user has updated to\n', '   * @return stakeAmount is the latest amount of staking from the user has updated to\n', '   * @return nextAddedStakeAmount is the next amount of adding to stake from the user has updated to\n', '   * @return remaining is the reward and withdrawal getting by the user has updated to\n', '   * @return currentTermUserRewards is the as-of user rewards to be paid at `_currentTerm`\n', '   * @return nextTermUserRewards is the as-of user rewards to be paid at the next term of `_currentTerm`\n', '   * @return depositAmount is the staking amount\n', '   * @return withdrawableStakingAmount is the withdrawable staking amount\n', '   */\n', '  function getAccountInfo(address account)\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      uint256 userTerm,\n', '      uint256 stakeAmount,\n', '      int128 nextAddedStakeAmount,\n', '      uint256 remaining,\n', '      uint256 currentTermUserRewards,\n', '      uint256 nextTermUserRewards,\n', '      uint128 depositAmount,\n', '      uint128 withdrawableStakingAmount\n', '    )\n', '  {\n', '    AccountInfo memory accountInfo = _accountInfoList[account];\n', '    userTerm = accountInfo.userTerm;\n', '    stakeAmount = accountInfo.stakeAmount;\n', '    nextAddedStakeAmount = accountInfo.added;\n', '    depositAmount = addDiff(stakeAmount, nextAddedStakeAmount).toUint128();\n', '    withdrawableStakingAmount = depositAmount;\n', '    remaining = accountInfo.remaining;\n', '\n', '    TermInfo memory termInfo = _termInfoList[_currentTerm];\n', '    uint256 currentTermRewards = termInfo.rewardSum;\n', '    uint256 currentStakeSum = termInfo.stakeSum;\n', '    currentTermUserRewards = currentStakeSum == 0\n', '      ? 0\n', '      : currentTermRewards.mul(userTerm < _currentTerm ? depositAmount : stakeAmount) /\n', '        currentStakeSum;\n', '    uint256 nextTermRewards = _getNextTermReward();\n', '    uint256 nextStakeSum = currentStakeSum.add(termInfo.stakeAdd).sub(termInfo.stakeRemove);\n', '    nextTermUserRewards = nextStakeSum == 0 ? 0 : nextTermRewards.mul(depositAmount) / nextStakeSum;\n', '    // uint256 latestTermUserRewards = _getLatestTerm() > _currentTerm\n', '    //   ? nextTermUserRewards\n', '    //   : currentTermUserRewards;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns `base` added to `diff` which may be nagative number.\n', '   */\n', '  function addDiff(uint256 base, int256 diff) internal pure returns (uint256) {\n', '    if (diff >= 0) {\n', '      return base.add(uint256(diff));\n', '    } else {\n', '      return base.sub(uint256(-diff));\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/Staking/StakingWithAggregator.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StakingWithAggregator is Ownable, Staking {\n', '  using SafeERC20 for IERC20;\n', '\n', '  event Recovered(address tokenAddress, uint256 tokenAmount);\n', '\n', '  constructor(\n', '    IERC20 stakingToken,\n', '    uint256 startTimestamp,\n', '    uint256 termInterval\n', '  ) Staking(stakingToken, startTimestamp, termInterval) {}\n', '\n', '  /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '  /**\n', '   * @notice Stake the staking token for the token to be paid as reward.\n', '   */\n', '  function stakeViaAggregator(address account, uint128 amount)\n', '    external\n', '    onlyOwner\n', '    nonReentrant\n', '    updateTerm()\n', '    updateReward(account)\n', '    returns (uint128 sendBack)\n', '  {\n', '    require(amount != 0, "staking amount should be positive number");\n', '\n', '    sendBack = _stake(account, amount);\n', '    // _stakingToken.safeTransferFrom(msg.sender, address(this), amount - sendBack);\n', '  }\n', '\n', '  /**\n', '   * @notice Withdraw the staking token for the token to be paid as reward.\n', '   */\n', '  function withdrawViaAggregator(address account, uint128 amount)\n', '    external\n', '    onlyOwner\n', '    nonReentrant\n', '    updateTerm()\n', '    updateReward(account)\n', '    returns (uint128 sendBack)\n', '  {\n', '    require(amount != 0, "withdrawing amount should be positive number");\n', '\n', '    return _withdraw(account, amount);\n', '  }\n', '\n', '  /**\n', '   * @notice Receive the reward for your staking in the token.\n', '   */\n', '  function receiveRewardViaAggregator(address account)\n', '    external\n', '    onlyOwner\n', '    nonReentrant\n', '    updateTerm()\n', '    updateReward(account)\n', '    returns (uint256 remaining)\n', '  {\n', '    return _receiveReward(account);\n', '  }\n', '\n', '  function addRewardViaAggregator(address account, uint128 amount)\n', '    external\n', '    onlyOwner\n', '    nonReentrant\n', '    updateTerm()\n', '  {\n', '    // _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    return _addReward(account, amount);\n', '  }\n', '\n', '  /**\n', '   * @notice If you have accidentally transferred token which is not `_stakingToken`,\n', '   * you can use this function to get it back.\n', '   */\n', '  function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n', '    require(tokenAddress != address(_stakingToken), "Cannot recover the staking token");\n', '    IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\n', '    emit Recovered(tokenAddress, tokenAmount);\n', '  }\n', '}\n', '\n', '// File: contracts/Interfaces/StakingAggregatorInterface.sol\n', '\n', '\n', '\n', '\n', '\n', 'interface StakingAggregatorInterface {\n', '  function stake(uint128 amount) external returns (uint128 totalSendBack);\n', '\n', '  function withdraw(uint128 amount) external returns (uint256 totalSendBack);\n', '\n', '  function receiveReward() external returns (uint256 remaining);\n', '\n', '  function addReward(uint256 stakingContractIndex, uint128 amount) external;\n', '\n', '  function getStakingTokenAddress() external view returns (address);\n', '\n', '  function getStakingContracts() external view returns (StakingWithAggregator[] memory);\n', '\n', '  function getConfigs()\n', '    external\n', '    view\n', '    returns (uint256[] memory startTimestampList, uint256 termInterval);\n', '\n', '  function getTokenInfo()\n', '    external\n', '    view\n', '    returns (\n', '      uint256[] memory latestTermList,\n', '      uint256[] memory totalRemainingRewardsList,\n', '      uint256[] memory currentTermRewardsList,\n', '      uint256[] memory nextTermRewardsList,\n', '      uint128[] memory currentStakingList,\n', '      uint128[] memory nextTermStakingList\n', '    );\n', '\n', '  function getTermInfo(uint256 term)\n', '    external\n', '    view\n', '    returns (\n', '      int128[] memory stakeAddList,\n', '      uint128[] memory stakeSumList,\n', '      uint256[] memory rewardSumList\n', '    );\n', '\n', '  function getAccountInfo(address account)\n', '    external\n', '    view\n', '    returns (\n', '      uint256[] memory userTermList,\n', '      uint256[] memory stakeAmountList,\n', '      int128[] memory nextAddedStakeAmountList,\n', '      uint256[] memory currentTermUserRewardsList,\n', '      uint256[] memory nextTermUserRewardsList,\n', '      uint128[] memory withdrawableStakingAmountList\n', '    );\n', '}\n', '\n', '// File: contracts/Staking/StakingAggregator.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StakingAggregator is StakingAggregatorInterface {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  /* ========== CONSTANT VARIABLES ========== */\n', '\n', '  uint256 internal immutable _termInterval;\n', '  IERC20 internal immutable _stakingToken;\n', '  StakingWithAggregator[] internal _stakingContracts; // immutable\n', '  uint256[] internal _startTimestampList; // immutable\n', '\n', '  /* ========== STATE VARIABLES ========== */\n', '\n', '  /**\n', '   * @dev if this contract is initialized\n', '   */\n', '  bool internal _enabled = false;\n', '\n', '  /* ========== CONSTRUCTOR ========== */\n', '\n', '  constructor(\n', '    IERC20 stakingToken,\n', '    uint256 termInterval,\n', '    StakingWithAggregator[] memory stakingContracts\n', '  ) {\n', '    require(stakingContracts.length != 0, "staking contracts should not be empty");\n', '    _stakingToken = stakingToken;\n', '    _termInterval = termInterval;\n', '    uint256 oldStartTimestamp = 0;\n', '    for (uint256 i = 0; i < stakingContracts.length; i++) {\n', '      require(\n', '        stakingContracts[i].getStakingTokenAddress() == address(stakingToken),\n', '        "staking token address differ from expected"\n', '      );\n', '      (uint256 ithStartTimestamp, uint256 ithTermInterval) = stakingContracts[i].getConfigs();\n', '      require(ithTermInterval == termInterval, "term interval differ from expected");\n', '      require(ithStartTimestamp > oldStartTimestamp, "startTimestamp should be sorted");\n', '      oldStartTimestamp = ithStartTimestamp;\n', '      _startTimestampList.push(ithStartTimestamp);\n', '      _stakingContracts.push(stakingContracts[i]);\n', '      // stakingToken.safeApprove(address(stakingContracts[i]), type(uint256).max);\n', '    }\n', '  }\n', '\n', '  modifier isEnabled() {\n', '    require(_enabled, "aggregator is not initialized");\n', '    _;\n', '  }\n', '\n', '  /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '  function init() external {\n', '    require(!_enabled, "already initialized");\n', '\n', '    for (uint256 i = 0; i < _stakingContracts.length; i++) {\n', '      require(_stakingContracts[i].owner() == address(this), "not owner");\n', '    }\n', '\n', '    _enabled = true;\n', '  }\n', '\n', '  /**\n', '   * @notice Stake the staking token for the token to be paid as reward.\n', '   */\n', '  function stake(uint128 amount) external override isEnabled returns (uint128 totalSendBack) {\n', '    uint256 maxUntilNextTerm;\n', '    uint256 nextStakingContractIndex;\n', '    for (uint256 i = 0; i < _startTimestampList.length; i++) {\n', '      // assert(_startTimestampList[i] <= block.timestamp);\n', '      uint256 untilNextTerm = (block.timestamp - _startTimestampList[i]) % _termInterval;\n', '      if (untilNextTerm > maxUntilNextTerm) {\n', '        maxUntilNextTerm = untilNextTerm;\n', '        nextStakingContractIndex = i;\n', '      }\n', '    }\n', '\n', '    totalSendBack = _stakingContracts[nextStakingContractIndex].stakeViaAggregator(\n', '      msg.sender,\n', '      amount\n', '    );\n', '\n', '    if (amount - totalSendBack != 0) {\n', '      _stakingToken.safeTransferFrom(msg.sender, address(this), amount - totalSendBack);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Withdraw the staking token for the token to be paid as reward.\n', '   * @return totalSendBack is the amount returned instantly.\n', '   */\n', '  function withdraw(uint128 amount) external override isEnabled returns (uint256 totalSendBack) {\n', '    require(amount != 0, "withdrawing amount should be positive number");\n', '\n', '    uint256 maxUntilNextTerm;\n', '    uint256 nextStakingContractIndex;\n', '    for (uint256 i = 0; i < _startTimestampList.length; i++) {\n', '      // assert(_startTimestampList[i] <= block.timestamp);\n', '      uint256 untilNextTerm = (block.timestamp - _startTimestampList[i]) % _termInterval;\n', '      if (untilNextTerm > maxUntilNextTerm) {\n', '        maxUntilNextTerm = untilNextTerm;\n', '        nextStakingContractIndex = i;\n', '      }\n', '    }\n', '\n', '    for (\n', '      uint256 i = nextStakingContractIndex;\n', '      i < nextStakingContractIndex + _startTimestampList.length && amount != 0;\n', '      i++\n', '    ) {\n', '      StakingWithAggregator ithStakingContract = _stakingContracts[i % _startTimestampList.length];\n', '      (, , , , , , uint128 withdrawableAmount, ) = ithStakingContract.getAccountInfo(msg.sender);\n', '      uint128 ithAmount = (amount < withdrawableAmount) ? amount : withdrawableAmount;\n', '      // assert(amount >= ithAmount);\n', '      amount -= ithAmount;\n', '\n', '      if (ithAmount != 0) {\n', '        uint128 sendBack = ithStakingContract.withdrawViaAggregator(msg.sender, ithAmount);\n', '        totalSendBack = totalSendBack.add(sendBack);\n', '      }\n', '    }\n', '\n', '    require(amount == 0, "exceed withdrawable amount");\n', '\n', '    if (totalSendBack != 0) {\n', '      _stakingToken.safeTransfer(msg.sender, totalSendBack);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Receive the reward for your staking in the token.\n', '   */\n', '  function receiveReward() external override isEnabled returns (uint256 remaining) {\n', '    for (uint256 i = 0; i < _stakingContracts.length; i++) {\n', '      remaining = remaining.add(_stakingContracts[i].receiveRewardViaAggregator(msg.sender));\n', '    }\n', '\n', '    if (remaining != 0) {\n', '      _stakingToken.safeTransfer(msg.sender, remaining);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Add the reward to this contract.\n', '   */\n', '  function addReward(uint256 stakingContractIndex, uint128 amount) external override isEnabled {\n', '    require(\n', '      stakingContractIndex < _stakingContracts.length,\n', '      "stakingContractIndex is out of index"\n', '    );\n', '    _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    return _stakingContracts[stakingContractIndex].addRewardViaAggregator(msg.sender, amount);\n', '  }\n', '\n', '  function getStakingTokenAddress() external view override returns (address) {\n', '    return address(_stakingToken);\n', '  }\n', '\n', '  function getStakingContracts()\n', '    external\n', '    view\n', '    override\n', '    returns (StakingWithAggregator[] memory stakingContracts)\n', '  {\n', '    return _stakingContracts;\n', '  }\n', '\n', '  function getConfigs()\n', '    external\n', '    view\n', '    override\n', '    returns (uint256[] memory startTimestampList, uint256 termInterval)\n', '  {\n', '    startTimestampList = _startTimestampList;\n', '    termInterval = _termInterval;\n', '  }\n', '\n', '  function getTokenInfo()\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      uint256[] memory latestTermList,\n', '      uint256[] memory totalRemainingRewardsList,\n', '      uint256[] memory currentTermRewardsList,\n', '      uint256[] memory nextTermRewardsList,\n', '      uint128[] memory currentStakingList,\n', '      uint128[] memory nextTermStakingList\n', '    )\n', '  {\n', '    uint256 numOfStakingContracts = _stakingContracts.length;\n', '    latestTermList = new uint256[](numOfStakingContracts);\n', '    totalRemainingRewardsList = new uint256[](numOfStakingContracts);\n', '    currentTermRewardsList = new uint256[](numOfStakingContracts);\n', '    nextTermRewardsList = new uint256[](numOfStakingContracts);\n', '    currentStakingList = new uint128[](numOfStakingContracts);\n', '    nextTermStakingList = new uint128[](numOfStakingContracts);\n', '    for (uint256 i = 0; i < numOfStakingContracts; i++) {\n', '      (\n', '        ,\n', '        uint256 latestTerm,\n', '        uint256 totalRemainingRewards,\n', '        uint256 currentTermRewards,\n', '        uint256 nextTermRewards,\n', '        uint128 currentStaking,\n', '        uint128 nextTermStaking\n', '      ) = _stakingContracts[i].getTokenInfo();\n', '      latestTermList[i] = latestTerm;\n', '      totalRemainingRewardsList[i] = totalRemainingRewards;\n', '      currentTermRewardsList[i] = currentTermRewards;\n', '      nextTermRewardsList[i] = nextTermRewards;\n', '      currentStakingList[i] = currentStaking;\n', '      nextTermStakingList[i] = nextTermStaking;\n', '    }\n', '  }\n', '\n', '  function getTermInfo(uint256 term)\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      int128[] memory stakeAddList,\n', '      uint128[] memory stakeSumList,\n', '      uint256[] memory rewardSumList\n', '    )\n', '  {\n', '    uint256 numOfStakingContracts = _stakingContracts.length;\n', '    stakeAddList = new int128[](numOfStakingContracts);\n', '    stakeSumList = new uint128[](numOfStakingContracts);\n', '    rewardSumList = new uint256[](numOfStakingContracts);\n', '    for (uint256 i = 0; i < numOfStakingContracts; i++) {\n', '      (int128 stakeAdd, uint128 stakeSum, uint256 rewardSum) = _stakingContracts[i].getTermInfo(\n', '        term\n', '      );\n', '      stakeAddList[i] = stakeAdd;\n', '      stakeSumList[i] = stakeSum;\n', '      rewardSumList[i] = rewardSum;\n', '    }\n', '  }\n', '\n', '  function getAccountInfo(address account)\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '      uint256[] memory userTermList,\n', '      uint256[] memory stakeAmountList,\n', '      int128[] memory nextAddedStakeAmountList,\n', '      uint256[] memory currentTermUserRewardsList,\n', '      uint256[] memory nextTermUserRewardsList,\n', '      uint128[] memory withdrawableStakingAmountList\n', '    )\n', '  {\n', '    uint256 numOfStakingContracts = _stakingContracts.length;\n', '    userTermList = new uint256[](numOfStakingContracts);\n', '    stakeAmountList = new uint256[](numOfStakingContracts);\n', '    nextAddedStakeAmountList = new int128[](numOfStakingContracts);\n', '    currentTermUserRewardsList = new uint256[](numOfStakingContracts);\n', '    nextTermUserRewardsList = new uint256[](numOfStakingContracts);\n', '    withdrawableStakingAmountList = new uint128[](numOfStakingContracts);\n', '    for (uint256 i = 0; i < numOfStakingContracts; i++) {\n', '      address accountTmp = account;\n', '      (\n', '        uint256 userTerm,\n', '        uint256 stakeAmount,\n', '        int128 nextAddedStakeAmount,\n', '        ,\n', '        uint256 currentTermUserRewards,\n', '        uint256 nextTermUserRewards,\n', '        ,\n', '        uint128 withdrawableStakingAmount\n', '      ) = _stakingContracts[i].getAccountInfo(accountTmp);\n', '      userTermList[i] = userTerm;\n', '      stakeAmountList[i] = stakeAmount;\n', '      nextAddedStakeAmountList[i] = nextAddedStakeAmount;\n', '      currentTermUserRewardsList[i] = currentTermUserRewards;\n', '      nextTermUserRewardsList[i] = nextTermUserRewards;\n', '      withdrawableStakingAmountList[i] = withdrawableStakingAmount;\n', '    }\n', '  }\n', '}']