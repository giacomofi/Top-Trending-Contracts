['// SPDX-License-Identifier: J-J-J-JENGA!!!\n', 'pragma solidity ^0.7.4;\n', '\n', '/* ROOTKIT:\n', 'Technically a wrapped WETH\n', 'So a wrapped wrapped ethereum\n', 'But also accepts raw ETH\n', 'Also functions exactly like WETH (deposit/withdraw/direct send)\n', '*/\n', '\n', 'import "./ERC31337.sol";\n', 'import "./IWETH.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract KETH is ERC31337, IWETH\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public freeParticipant;\n', '    uint16 public burnRate; \n', '\n', '    constructor (IWETH _weth) ERC31337(_weth, "RootKit ETH", "KETH")\n', '    {\n', '        _mint(msg.sender, 2000 ether);\n', '    }\n', '\n', '    receive() external payable\n', '    {\n', '        if (msg.sender != address(wrappedToken)) {\n', '            deposit();\n', '        }\n', '    }\n', '\n', '    function deposit() public payable override\n', '    {\n', '        uint256 amount = msg.value;\n', '        IWETH(address(wrappedToken)).deposit{ value: amount }();\n', '        _mint(msg.sender, amount);\n', '        emit Deposit(msg.sender, amount); \n', '    }\n', '\n', '    function withdraw(uint256 _amount) public override\n', '    {\n', '        _burn(msg.sender, _amount);\n', '        IWETH(address(wrappedToken)).withdraw(_amount);\n', '        emit Withdrawal(msg.sender, _amount);\n', '        (bool success,) = msg.sender.call{ value: _amount }("");\n', '        require (success, "Transfer failed");\n', '    }\n', '\n', '    function setFreeParticipant(address participant, bool free) public ownerOnly()\n', '    {\n', '        freeParticipant[participant] = free;\n', '    }\n', '\n', '    function setBurnRate(uint16 _burnRate) public ownerOnly()\n', '    {\n', '        require (_burnRate <= 2000 , "Dump tax rate should be less than or equal to 20%"); // protecting everyone from Ponzo\n', '        \n', '        burnRate = _burnRate;\n', '    }\n', '    \n', '    function burn(uint256 amount) public\n', '    {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \n', '    {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        if (burnRate > 0 && !freeParticipant[sender] && !freeParticipant[recipient]) {\n', '            uint256 burnAmount = amount * burnRate / 10000;\n', '            amount = amount.sub(burnAmount, "Burn too much");\n', '            _burn(sender, burnAmount);\n', '        }\n', '        _balanceOf[sender] = _balanceOf[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '}']