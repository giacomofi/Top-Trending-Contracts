['pragma solidity ^0.5.17;\n', '\n', 'import "./IERC20.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract STUDTeamVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address private _beneficiary;\n', '    uint256 private _ieoEndTime; \n', '    uint256 private _totalAmount;\n', '    uint256 private _withdrawnAmount = 0;\n', '    uint256[] private _months = [0, 6, 12, 18, 21, 24, 27, 30, 33, 36];\n', '    uint256[] private _percentages = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100];\n', '    IERC20 private _token;\n', '    uint256 private constant _daysInMonth = 30 days;\n', '\n', '    /**\n', '     * @dev Prevents other adresses except beneficiary.\n', '     */\n', '    modifier onlyBeneficiary {\n', '        require(msg.sender == _beneficiary, "Sender has to be already set as a beneficiary");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the benficiary address.\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param beneficiaryAddress Address of the beneficiary to whom vested tokens are transferred.\n', '     * @param token Address of the token which will be vested.\n', '     * @param ieoEndTime IEO end time in UNIX.\n', '     * @param totalAmount Total amount of tokens stored in contract.\n', '     */\n', '    constructor (address token, address payable owner, address payable beneficiaryAddress, uint256 ieoEndTime, uint256 totalAmount) public {\n', '        require(token != address(0), "Token is the zero address.");\n', '        require(owner != address(0), "Owner is the zero address.");\n', '        require(beneficiaryAddress != address(0), "Beneficiary is the zero address.");\n', '        require(ieoEndTime > block.timestamp, "IEO end time should be bigger than current timestamp.");\n', '        require(totalAmount > 0, "Total Amount should be bigger than 0.");\n', '\n', '        _token = IERC20(token);\n', '        _beneficiary = beneficiaryAddress;\n', '        _ieoEndTime = ieoEndTime;\n', '        _totalAmount = totalAmount;\n', '        transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Current amount of tokens possible to withdraw from contract.\n', '     */\n', '     function withdrawable() public view returns (uint256) {\n', '        uint256 percentageSum = 0;\n', '        for (uint256 i = 0; i<_months.length; i++) {\n', '    \t    uint256 tempTime = _ieoEndTime + _months[i] * _daysInMonth;\n', '    \t    if (block.timestamp > tempTime) {\n', '    \t\t    percentageSum += _percentages[i];\n', '    \t    }\n', '        }\n', '        return _totalAmount * percentageSum / 1000.0 - _withdrawnAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws the tokens from contract to beneficiary address.\n', '     */\n', '    function withdraw() public onlyBeneficiary  {\n', '        uint256 withdrawableAmount = withdrawable();\n', '        _withdrawnAmount += withdrawableAmount;\n', '        require (withdrawableAmount > 0, "Withdrawable amount must be greater than zero.");\n', '        _token.transfer(_beneficiary, withdrawableAmount);\n', '        emit TokensWithdrawed(_beneficiary, withdrawableAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the timestamps of each payout. Beacause a month can have different number\n', '     * of days, months are represented as 30 day period in contract.\n', '     */\n', '    function getTimestamps() public view returns (uint256[] memory) {\n', '    \tuint256[] memory timestamps = new uint256[](_months.length);\n', '    \tfor (uint256 i = 0; i<_months.length; i++) {\n', '    \t\tuint256 timestamp = _ieoEndTime + _months[i] * _daysInMonth;\n', '    \t\ttimestamps[i] = timestamp;\n', '        }\n', '    \treturn timestamps;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the IEO end time in UNIX timestamp\n', '     */\n', '    function getIeoEndTime() public view returns (uint256) {\n', '        return _ieoEndTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the total amount of tokens which was set during contract deployment.\n', '     */\n', '    function getTotalAmount() public view returns (uint256) {\n', '        return _totalAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns currently withdrawn amount from contract.\n', '     */\n', '    function getWithDrawnAmount() public view returns (uint256) {\n', '        return _withdrawnAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * @param _newBeneficiary New beneficiary address\n', '     */\n', '    function changeBeneficiary(address payable _newBeneficiary) public onlyOwner {\n', '        require(_newBeneficiary != address(0), "Ownable: new owner is the zero address");\n', '        emit BeneficiaryChanged(_beneficiary, _newBeneficiary);\n', '        _beneficiary = _newBeneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Revertible fallback to prevent Ether deposits.\n', '     */\n', '    function () external payable {\n', '        revert("Revert the ETH.");\n', '    }\n', '\n', '    /**\n', '     * @dev Claim mistakenly sent tokens to the contract.\n', '     * @param _tokenAddress Address of the token to be extracted.\n', '     */\n', '    function claimTokens(address _tokenAddress) public onlyOwner {\n', '        if (_tokenAddress == address(0)) {\n', '            owner().transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        IERC20 token = IERC20(_tokenAddress);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(owner(), balance);\n', '        emit ClaimedTokens(_tokenAddress, owner(), balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the tokens are withdrawn from contract.\n', '     */\n', '    event TokensWithdrawed(address beneficiary, uint256 amount);\n', '    /**\n', '     * @dev Emitted when the mistakenly sent tokens are claimed.\n', '     */\n', '    event ClaimedTokens(address _token, address _owner, uint256 _amount);\n', '    /**\n', '     * @dev Emitted when a new beneficiary has been set.\n', '     */\n', '    event BeneficiaryChanged(address _beneficiary, address _newBeneficiary);\n', '\n', '\n', '}']