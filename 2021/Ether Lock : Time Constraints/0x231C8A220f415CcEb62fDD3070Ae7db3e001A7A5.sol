['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', "import {Ownable} from './Ownable.sol';\n", "import {IERC20} from './IERC20.sol';\n", "import {IWETH} from './IWETH.sol';\n", "import {IWETHGateway} from './IWETHGateway.sol';\n", "import {IMarginPool} from './IMarginPool.sol';\n", "import {IXToken} from './IXToken.sol';\n", "import {ICreditDelegationToken} from './ICreditDelegationToken.sol';\n", "import {ReserveConfiguration} from './ReserveConfiguration.sol';\n", "import {UserConfiguration} from './UserConfiguration.sol';\n", "import {Helpers} from './Helpers.sol';\n", "import {DataTypes} from './DataTypes.sol';\n", '\n', 'contract WETHGateway is IWETHGateway, Ownable {\n', '  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n', '  using UserConfiguration for DataTypes.UserConfigurationMap;\n', '\n', '  IWETH internal immutable WETH;\n', '  IMarginPool internal immutable POOL;\n', '  IXToken internal immutable xWETH;\n', '  ICreditDelegationToken internal immutable dWETH;\n', '\n', '  /**\n', '   * @dev Sets the WETH address and the MarginPoolAddressesProvider address. Infinite approves margin pool.\n', '   * @param weth Address of the Wrapped Ether contract\n', '   * @param pool Address of the MarginPool contract\n', '   **/\n', '  constructor(address weth, address pool) public {\n', '    IMarginPool poolInstance = IMarginPool(pool);\n', '    WETH = IWETH(weth);\n', '    POOL = poolInstance;\n', '    xWETH = IXToken(poolInstance.getReserveData(weth).xTokenAddress);\n', '    dWETH = ICreditDelegationToken(poolInstance.getReserveData(weth).variableDebtTokenAddress);\n', '    IWETH(weth).approve(pool, uint256(-1));\n', '  }\n', '\n', '  /**\n', '   * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (xTokens)\n', '   * is minted.\n', '   * @param onBehalfOf address of the user who will receive the xTokens representing the deposit\n', '   **/\n', '  function depositETH(address onBehalfOf) external payable override {\n', '    WETH.deposit{value: msg.value}();\n', '    POOL.deposit(address(WETH), msg.value, onBehalfOf);\n', '  }\n', '\n', '  /**\n', '   * @dev withdraws the WETH _reserves of msg.sender.\n', '   * @param amount amount of xWETH to withdraw and receive native ETH\n', '   * @param to address of the user who will receive native ETH\n', '   */\n', '  function withdrawETH(uint256 amount, address to) external override {\n', '    uint256 userBalance = xWETH.balanceOf(msg.sender);\n', '    uint256 amountToWithdraw = amount;\n', '\n', '    // if amount is equal to uint(-1), the user wants to redeem everything\n', '    if (amount == type(uint256).max) {\n', '      amountToWithdraw = userBalance;\n', '    }\n', '    xWETH.transferFrom(msg.sender, address(this), amountToWithdraw);\n', '    POOL.withdraw(address(WETH), amountToWithdraw, address(this));\n', '    WETH.withdraw(amountToWithdraw);\n', '    _safeTransferETH(to, amountToWithdraw);\n', '  }\n', '\n', '  /**\n', '   * @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `MarginPool.borrow`.\n', '   * @param amount the amount of ETH to borrow\n', '   */\n', '  function borrowETH(\n', '    uint256 amount\n', '  ) external override {\n', '    POOL.borrow(address(WETH), amount, msg.sender);\n', '    WETH.withdraw(amount);\n', '    _safeTransferETH(msg.sender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev transfer ETH to an address, revert if it fails.\n', '   * @param to recipient of the transfer\n', '   * @param value the amount to send\n', '   */\n', '  function _safeTransferETH(address to, uint256 value) internal {\n', '    (bool success, ) = to.call{value: value}(new bytes(0));\n', "    require(success, 'ETH_TRANSFER_FAILED');\n", '  }\n', '\n', '  /**\n', '   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n', '   * direct transfers to the contract address.\n', '   * @param token token to transfer\n', '   * @param to recipient of the transfer\n', '   * @param amount amount to send\n', '   */\n', '  function emergencyTokenTransfer(\n', '    address token,\n', '    address to,\n', '    uint256 amount\n', '  ) external onlyOwner {\n', '    IERC20(token).transfer(to, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether\n', '   * due selfdestructs or transfer ether to pre-computated contract address before deployment.\n', '   * @param to recipient of the transfer\n', '   * @param amount amount to send\n', '   */\n', '  function emergencyEtherTransfer(address to, uint256 amount) external onlyOwner {\n', '    _safeTransferETH(to, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Get WETH address used by WETHGateway\n', '   */\n', '  function getWETHAddress() external view returns (address) {\n', '    return address(WETH);\n', '  }\n', '\n', '  /**\n', '   * @dev Get xWETH address used by WETHGateway\n', '   */\n', '  function getXWETHAddress() external view returns (address) {\n', '    return address(xWETH);\n', '  }\n', '\n', '  /**\n', '   * @dev Get MarginPool address used by WETHGateway\n', '   */\n', '  function getMarginPoolAddress() external view returns (address) {\n', '    return address(POOL);\n', '  }\n', '\n', '  /**\n', '   * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\n', '   */\n', '  receive() external payable {\n', "    require(msg.sender == address(WETH), 'Receive not allowed');\n", '  }\n', '\n', '  /**\n', '   * @dev Revert fallback calls\n', '   */\n', '  fallback() external payable {\n', "    revert('Fallback not allowed');\n", '  }\n', '}']