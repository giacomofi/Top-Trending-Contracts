['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', 'pragma solidity >=0.5.0 <0.7.0;\n', '\n', 'contract bank {\n', '      \n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event deployed(address owner, uint id);\n', '    \n', '    event userDetails (address user_address,\n', '        uint id, \n', '        uint asset_value_USD,\n', '        BankAsssetType v_asset,\n', '        BankState v_state,\n', '        uint cycle,         //In months\n', '        uint rate,\n', '        uint amount,        // this amount is in actual currency\n', '        uint intrest,\n', '        BankAsssetType withdrawl,\n', '        uint withdrawState);\n', '        \n', '    event rates (uint rate_AGCoin,\n', '        uint rate_ETH,\n', '        uint rate_BTC,\n', '        uint rate_LTC,\n', '        uint rate_XRP,\n', '        uint rate_USD);\n', '        \n', '    address public owner;\n', '    uint public id;\n', '\n', '    enum BankAsssetType{ \n', '        AGCoin, ETH, BTC, LTC, XRP, USD\n', '    }\n', '    enum BankState { \n', '        none, in_process, mature\n', '    }\n', '    \n', '    struct Bank { \n', '        address user;\n', '        uint id;\n', '        uint asset_value_USD;\n', '        BankAsssetType v_asset;\n', '        BankState v_state;\n', '        uint cycle;\n', '        uint rate;\n', '        uint amount;    // this is in actual currency\n', '        uint intrest;\n', '        BankAsssetType withdrawl;\n', '        uint withdrawState;\n', '    }\n', '    \n', '    mapping(uint=>Bank) public user_details;\n', '    mapping(uint  => uint) rate;\n', '    constructor() public {\n', '        owner = msg.sender; \n', '        id=1;\n', '        emit deployed(owner , id);\n', '    }\n', '    \n', '    function setUser (uint _cycle , uint _asset_value_USD, BankAsssetType _v_asset, uint _amount) public returns(uint){\n', '        require (_asset_value_USD >=100 , "Amount should be atleast 100 USD");\n', '        require (_cycle >=1,"it should be for atleast 1 month");\n', '        uint _rate = rate[uint(_v_asset)];\n', '        //uint id = uint256(keccak256(abi.encodePacked(msg.sender,_cycle,_amount,_asset_value_USD)));\n', '        //user_details[msg.sender].push(_asset_value_USD,_v_asset, 1,_cycle);\n', '        user_details[id].user = msg.sender;\n', '        user_details[id].id = id;\n', '        user_details[id].cycle =_cycle;\n', '        user_details[id].asset_value_USD =_asset_value_USD;\n', '        user_details[id].v_asset=_v_asset;\n', '        user_details[id].v_state=BankState.in_process;\n', '        user_details[id].rate=_rate;\n', '        user_details[id].amount=_amount;\n', '        user_details[id].withdrawl=BankAsssetType.AGCoin;\n', '        emit userDetails (user_details[id].user,\n', '        user_details[id].id,\n', '        user_details[id].asset_value_USD,\n', '        user_details[id].v_asset,\n', '        user_details[id].v_state,\n', '        user_details[id].cycle,\n', '        user_details[id].rate,\n', '        user_details[id].amount,    // this is in actual currency\n', '        user_details[id].intrest,\n', '        user_details[id].withdrawl,\n', '        user_details[id].withdrawState);\n', '        id +=1;\n', '   }\n', '\n', '    //rate should be provided as int\n', '    function setRate (uint agcoin_rate, uint eth_rate, uint btc_rate, uint ltc_rate,  uint xrp_rate, uint usd_rate) onlyOwner public{\n', '        rate[uint(BankAsssetType.AGCoin)]=uint(agcoin_rate);\n', '        rate[uint(BankAsssetType.ETH)]=uint(eth_rate);\n', '        rate[uint(BankAsssetType.BTC)]=uint(btc_rate);\n', '        rate[uint(BankAsssetType.LTC)]=uint(ltc_rate);\n', '        rate[uint(BankAsssetType.XRP)]=uint(xrp_rate);\n', '        rate[uint(BankAsssetType.USD)]=uint(usd_rate);\n', '        emit rates (rate[uint(BankAsssetType.AGCoin)],\n', '        rate[uint(BankAsssetType.ETH)],\n', '        rate[uint(BankAsssetType.BTC)],\n', '        rate[uint(BankAsssetType.LTC)],\n', '        rate[uint(BankAsssetType.XRP)],\n', '        rate[uint(BankAsssetType.USD)]);\n', '    }\n', '    \n', '    function withdraw(uint _id, BankAsssetType withdrawAsset) onlyOwner public{\n', '        uint _rate = user_details[_id].rate;\n', '        user_details[_id].intrest = _rate*user_details[_id].cycle*user_details[_id].amount/(100*12);\n', '        user_details[_id].v_state = BankState.mature;\n', '        user_details[_id].withdrawl = withdrawAsset;\n', '        user_details[_id].withdrawState = 1;\n', '        emit userDetails (user_details[_id].user,\n', '        user_details[_id].id,\n', '        user_details[_id].asset_value_USD,\n', '        user_details[_id].v_asset,\n', '        user_details[_id].v_state,\n', '        user_details[_id].cycle,\n', '        user_details[_id].rate,\n', '        user_details[_id].amount,   // this is in actual currency\n', '        user_details[_id].intrest,\n', '        user_details[_id].withdrawl,\n', '        user_details[_id].withdrawState);\n', '    }\n', '\n', '    function cal_intrest(uint _id) onlyOwner public {\n', '        uint _rate = user_details[_id].rate;\n', '        user_details[_id].intrest = _rate*user_details[_id].cycle*user_details[_id].amount/(100*12);\n', '        emit userDetails (user_details[_id].user,\n', '        user_details[_id].id,\n', '        user_details[_id].asset_value_USD,\n', '        user_details[_id].v_asset,\n', '        user_details[_id].v_state,\n', '        user_details[_id].cycle,\n', '        user_details[_id].rate,\n', '        user_details[_id].amount,       // this is in actual currency\n', '        user_details[_id].intrest,\n', '        user_details[_id].withdrawl,\n', '        user_details[_id].withdrawState);\n', '    }\n', '}']