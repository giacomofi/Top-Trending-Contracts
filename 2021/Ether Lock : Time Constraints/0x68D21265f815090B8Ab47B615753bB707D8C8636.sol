['// SPDX-License-Identifier: U-U-U-UPPPPP!!!\n', 'pragma solidity ^0.7.4;\n', '\n', 'import "./ERC31337.sol";\n', 'import "./IERC20.sol";\n', '\n', 'contract EliteToken is ERC31337\n', '{\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => bool) public freeParticipantControllers;\n', '    mapping (address => bool) public freeParticipants; \n', '\n', '    mapping (address => bool) public burnRateControllers;\n', '    uint16 burnRate;   \n', '\n', '    constructor (IERC20 _wrappedToken) ERC31337(_wrappedToken, "eliteTether", "etTether")\n', '    {\n', '    }    \n', '\n', '    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\n', '    {\n', '        freeParticipantControllers[freeParticipantController] = allow;\n', '    }\n', '\n', '    function setFreeParticipant(address participant, bool free) public\n', '    {\n', '        require (msg.sender == owner || freeParticipantControllers[msg.sender], "Not an owner or free participant controller");\n', '        freeParticipants[participant] = free;\n', '    }\n', '\n', '    function setBurnRateController(address burnRateController, bool allow) public ownerOnly()\n', '    {\n', '        burnRateControllers[burnRateController] = allow;\n', '    }\n', '\n', '    function setBurnRate(uint16 _burnRate) public // 10000 = 100%\n', '    {\n', '        require (msg.sender == owner || burnRateControllers[msg.sender], "Not an owner or burn rate controller");\n', '        require (_burnRate <= 10000, "But rate must be less or equal to 100%");\n', '       \n', '        burnRate = _burnRate;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \n', '    {\n', '        require(sender != address(0), "EliteToken: transfer from the zero address");\n', '        require(recipient != address(0), "EliteToken: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        uint256 remaining = amount;\n', '\n', '        if (!freeParticipants[sender] && !freeParticipants[recipient] && burnRate > 0)\n', '        {\n', '            uint256 burn = amount * burnRate / 10000;\n', '            amount = remaining = remaining.sub(burn, "Burn too much");\n', '            _burn(sender, burn);\n', '        }\n', '        \n', '        _balanceOf[sender] = _balanceOf[sender].sub(amount, "EliteToken: transfer amount exceeds balance");\n', '        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\n', '        \n', '        emit Transfer(sender, recipient, remaining);\n', '    }\n', '}']