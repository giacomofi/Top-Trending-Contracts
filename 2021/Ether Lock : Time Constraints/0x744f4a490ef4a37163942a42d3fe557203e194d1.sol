['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', '// File: contracts\\modules\\Ownable.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\Managerable.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'contract Managerable is Ownable {\n', '\n', '    address private _managerAddress;\n', '    /**\n', '     * @dev modifier, Only manager can be granted exclusive access to specific functions. \n', '     *\n', '     */\n', '    modifier onlyManager() {\n', '        require(_managerAddress == msg.sender,"Managerable: caller is not the Manager");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev set manager by owner. \n', '     *\n', '     */\n', '    function setManager(address managerAddress)\n', '    public\n', '    onlyOwner\n', '    {\n', '        _managerAddress = managerAddress;\n', '    }\n', '    /**\n', '     * @dev get manager address. \n', '     *\n', '     */\n', '    function getManager()public view returns (address) {\n', '        return _managerAddress;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\Halt.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract Halt is Ownable {\n', '    \n', '    bool private halted = false; \n', '    \n', '    modifier notHalted() {\n', '        require(!halted,"This contract is halted");\n', '        _;\n', '    }\n', '\n', '    modifier isHalted() {\n', '        require(halted,"This contract is not halted");\n', '        _;\n', '    }\n', '    \n', '    /// @notice function Emergency situation that requires \n', '    /// @notice contribution period to stop or not.\n', '    function setHalt(bool halt) \n', '        public \n', '        onlyOwner\n', '    {\n', '        halted = halt;\n', '    }\n', '}\n', '\n', '// File: contracts\\TokenConverter\\TokenConverterData.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', 'contract TokenConverterData is Managerable,Halt {\n', '    //the locjed reward info\n', '    struct lockedReward {\n', '        uint256 startTime; //this tx startTime for locking\n', '        uint256 total;     //record input amount in each lock tx    \n', '        mapping (uint256 => uint256) alloc;//the allocation table\n', '    }\n', '    \n', '    struct lockedIdx {\n', '        uint256 beginIdx;//the first index for user converting input claimable tx index \n', '        uint256 totalIdx;//the total number for converting tx\n', '    }\n', '    \n', '    address public cfnxAddress; //cfnx token address\n', '    address public fnxAddress;  //fnx token address\n', '    uint256 public timeSpan = 30*24*3600;//time interval span time ,default one month\n', '    uint256 public dispatchTimes = 6;    //allocation times,default 6 times\n', '    uint256 public txNum = 100; //100 times transfer tx \n', '    uint256 public lockPeriod = dispatchTimes*timeSpan;\n', '    \n', "    //the user's locked total balance\n", '    mapping (address => uint256) public lockedBalances;//locked balance for each user\n', '    \n', '    mapping (address =>  mapping (uint256 => lockedReward)) public lockedAllRewards;//converting tx record for each user\n', '    \n', '    mapping (address => lockedIdx) public lockedIndexs;//the converting tx index info\n', '    \n', '    \n', '    /**\n', '     * @dev Emitted when `owner` locked  `amount` FPT, which net worth is  `worth` in USD. \n', '     */\n', '    event InputCfnx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\n', '    /**\n', '     * @dev Emitted when `owner` burned locked  `amount` FPT, which net worth is  `worth` in USD.\n', '     */\n', '    event ClaimFnx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\n', '\n', '}\n', '\n', '// File: contracts\\modules\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity =0.5.16;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\TokenConverter\\TokenConverter.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\n', ' * @dev ERC20 token. Its inside value is collatral pool net worth.\n', ' *\n', ' */\n', 'contract TokenConverter is TokenConverterData {\n', '    using SafeMath for uint256;\n', '    modifier inited (){\n', '    \t  require(cfnxAddress!=address(0));\n', '    \t  require(fnxAddress!=address(0));\n', '    \t  _;\n', '    } \n', '\n', '    function initialize() onlyOwner public {\n', '        \n', '    }\n', '    \n', '    function update() onlyOwner public{\n', '    }\n', '    \n', '    /**\n', '     * @dev constructor function. set FNX minePool contract address. \n', '     */ \n', '    function setParameter(address _cfnxAddress,address _fnxAddress,uint256 _timeSpan,uint256 _dispatchTimes,uint256 _txNum) onlyOwner public{\n', '        if (_cfnxAddress != address(0))\n', '            cfnxAddress = _cfnxAddress;\n', '            \n', '        if (_fnxAddress != address(0))\n', '            fnxAddress = _fnxAddress;\n', '            \n', '        if (_timeSpan != 0) \n', '            timeSpan = _timeSpan;\n', '            \n', '        if (_dispatchTimes != 0) \n', '            dispatchTimes = _dispatchTimes;\n', '        \n', '        if (_txNum != 0) \n', '            txNum = _txNum;   \n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev getting back the left mine token\n', '     * @param reciever the reciever for getting back mine token\n', '     */\n', '    function getbackLeftFnx(address reciever)  public onlyOwner {\n', '        uint256 bal =  IERC20(fnxAddress).balanceOf(address(this));\n', '        IERC20(fnxAddress).transfer(reciever,bal);\n', '    }  \n', '\n', '    /**\n', "     * @dev Retrieve user's locked balance. \n", "     * @param account user's account.\n", '     */ \n', '    function lockedBalanceOf(address account) public view returns (uint256) {\n', '        return lockedBalances[account];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev user input cnfx to get fnx\n', '     * @param amount fnx amount\n', '     */ \n', '    function inputCfnxForInstallmentPay(uint256 amount) external inited {\n', '        require(amount>0,"amount should be bigger than 0");\n', '        \n', '        IERC20(cfnxAddress).transferFrom(msg.sender,address(this),amount);\n', '        uint256 idx = lockedIndexs[msg.sender].totalIdx;\n', '        uint256 divAmount = amount.div(dispatchTimes);\n', '\n', '        lockedAllRewards[msg.sender][idx] = lockedReward(now,amount);\n', '        \n', '        //index 0 to save the left token num\n', '        lockedAllRewards[msg.sender][idx].alloc[0] = amount.sub(divAmount);\n', '        uint256 i=2;\n', '        //idx = 1, the reward give user immediately\n', '        for(;i<dispatchTimes;i++){\n', '            lockedAllRewards[msg.sender][idx].alloc[i] = divAmount;\n', '        }\n', '        lockedAllRewards[msg.sender][idx].alloc[i] = amount.sub(divAmount.mul(dispatchTimes-1));\n', '        \n', '        \n', '        lockedBalances[msg.sender] = lockedBalances[msg.sender].add(amount.sub(divAmount));\n', '        \n', '        //should can not be overflow\n', '        lockedIndexs[msg.sender].totalIdx =  lockedIndexs[msg.sender].totalIdx + 1;\n', '        \n', '        IERC20(fnxAddress).transfer(msg.sender,divAmount);\n', '\n', '        emit InputCfnx(msg.sender,amount,divAmount);\n', '    }\n', '    \n', '      /**\n', '     * @dev user user claim expired reward\n', '     */ \n', '    function claimFnxExpiredReward() external inited {\n', '        require(fnxAddress!=address(0),"fnx token should be set");\n', '        \n', '        uint256 txcnt = 0;\n', '        uint256 i = lockedIndexs[msg.sender].beginIdx;\n', '        uint256 endIdx = lockedIndexs[msg.sender].totalIdx;\n', '        uint256 totalRet = 0;\n', '        \n', '        for(;i<endIdx && txcnt<txNum;i++) {\n', '           //only count the rewards over at least one timeSpan\n', '           if (now >= lockedAllRewards[msg.sender][i].startTime + timeSpan) {\n', '               \n', '               if (lockedAllRewards[msg.sender][i].alloc[0] > 0) {\n', '                    if (now >= lockedAllRewards[msg.sender][i].startTime + lockPeriod) {\n', '                        totalRet = totalRet.add(lockedAllRewards[msg.sender][i].alloc[0]);\n', '                        lockedAllRewards[msg.sender][i].alloc[0] = 0;\n', '                        \n', '                        //updated last expired idx\n', '                        lockedIndexs[msg.sender].beginIdx = i;\n', '                    } else {\n', '                      \n', '                        uint256 timeIdx = (now - lockedAllRewards[msg.sender][i].startTime).div(timeSpan) + 1;\n', '                        uint256 j = 2;\n', '                        uint256 subtotal = 0;\n', '                        for(;j<timeIdx+1;j++) {\n', '                            subtotal = subtotal.add(lockedAllRewards[msg.sender][i].alloc[j]);\n', '                            lockedAllRewards[msg.sender][i].alloc[j] = 0;\n', '                        }\n', '                        \n', '                        //updated left locked balance,possible?\n', '                        if(subtotal<=lockedAllRewards[msg.sender][i].alloc[0]){\n', '                            lockedAllRewards[msg.sender][i].alloc[0] = lockedAllRewards[msg.sender][i].alloc[0].sub(subtotal);\n', '                        } else {\n', '                            subtotal = lockedAllRewards[msg.sender][i].alloc[0];\n', '                            lockedAllRewards[msg.sender][i].alloc[0] = 0;\n', '                        }\n', '                        \n', '                        totalRet = totalRet.add(subtotal);\n', '                    }\n', '                    \n', '                    txcnt = txcnt + 1;\n', '               }\n', '                \n', '           } else {\n', '               //the item after this one is pushed behind this,not needed to caculate\n', '               break;\n', '           }\n', '        }\n', '        \n', '        lockedBalances[msg.sender] = lockedBalances[msg.sender].sub(totalRet);\n', '        //transfer back to user\n', '        IERC20(fnxAddress).transfer(msg.sender,totalRet);\n', '        \n', '        emit ClaimFnx(msg.sender,totalRet,txcnt);\n', '    }\n', '    \n', '      /**\n', '     * @dev get user claimable balance\n', '     * @param _user the user address\n', '     */ \n', '    function getClaimAbleBalance(address _user) public view returns (uint256) {\n', '        require(fnxAddress!=address(0),"fnx token should be set");\n', '        \n', '        uint256 txcnt = 0;\n', '        uint256 i = lockedIndexs[_user].beginIdx;\n', '        uint256 endIdx = lockedIndexs[_user].totalIdx;\n', '        uint256 totalRet = 0;\n', '        \n', '        for(;i<endIdx && txcnt<txNum;i++) {\n', '           //only count the rewards over at least one timeSpan\n', '           if (now >= lockedAllRewards[_user][i].startTime + timeSpan) {\n', '               \n', '               if (lockedAllRewards[_user][i].alloc[0] > 0) {\n', '                    if (now >= lockedAllRewards[_user][i].startTime + lockPeriod) {\n', '                        totalRet = totalRet.add(lockedAllRewards[_user][i].alloc[0]);\n', '                    } else {\n', '                        uint256 timeIdx = (now - lockedAllRewards[_user][i].startTime).div(timeSpan) + 1;\n', '                        uint256 j = 2;\n', '                        uint256 subtotal = 0;\n', '                        for(;j<timeIdx+1;j++) {\n', '                            subtotal = subtotal.add(lockedAllRewards[_user][i].alloc[j]);\n', '                        }\n', '                        \n', '                        //updated left locked balance,possible?\n', '                        if(subtotal>lockedAllRewards[_user][i].alloc[0]){\n', '                            subtotal = lockedAllRewards[_user][i].alloc[0];\n', '                        }\n', '                        \n', '                        totalRet = totalRet.add(subtotal);\n', '                    }\n', '                    \n', '                    txcnt = txcnt + 1;\n', '               }\n', '                \n', '           } else {\n', '               //the item after this one is pushed behind this,not needed to caculate\n', '               break;\n', '           }\n', '        }\n', '        \n', '        return totalRet;\n', '    }\n', '    \n', '  \n', '    \n', '}']