['# @version 0.2.8\n', '"""\n', '@title Simple Vesting Escrow\n', '@author Curve Finance, Yearn Finance\n', '@license MIT\n', '@notice Vests ERC20 tokens for a single address\n', '@dev Intended to be deployed many times via `VotingEscrowFactory`\n', '"""\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'event Fund:\n', '    recipient: indexed(address)\n', '    amount: uint256\n', '\n', 'event Claim:\n', '    recipient: indexed(address)\n', '    claimed: uint256\n', '\n', 'event RugPull:\n', '    recipient: address\n', '    rugged: uint256\n', '\n', 'event CommitOwnership:\n', '    admin: address\n', '\n', 'event ApplyOwnership:\n', '    admin: address\n', '\n', 'recipient: public(address)\n', 'token: public(ERC20)\n', 'start_time: public(uint256)\n', 'end_time: public(uint256)\n', 'cliff_length: public(uint256)\n', 'total_locked: public(uint256)\n', 'total_claimed: public(uint256)\n', 'disabled_at: public(uint256)\n', '\n', 'admin: public(address)\n', 'future_admin: public(address)\n', '\n', '@external\n', 'def __init__():\n', '    # ensure that the original contract cannot be initialized\n', '    self.admin = msg.sender\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def initialize(\n', '    admin: address,\n', '    token: address,\n', '    recipient: address,\n', '    amount: uint256,\n', '    start_time: uint256,\n', '    end_time: uint256,\n', '    cliff_length: uint256,\n', ') -> bool:\n', '    """\n', '    @notice Initialize the contract.\n', '    @dev This function is seperate from `__init__` because of the factory pattern\n', '         used in `VestingEscrowFactory.deploy_vesting_contract`. It may be called\n', '         once per deployment.\n', '    @param admin Admin address\n', '    @param token Address of the ERC20 token being distributed\n', '    @param recipient Address to vest tokens for\n', '    @param amount Amount of tokens being vested for `recipient`\n', '    @param start_time Epoch time at which token distribution starts\n', '    @param end_time Time until everything should be vested\n', '    @param cliff_length Duration after which the first portion vests\n', '    """\n', '    assert self.admin == ZERO_ADDRESS  # dev: can only initialize once\n', '\n', '    self.token = ERC20(token)\n', '    self.admin = admin\n', '    self.start_time = start_time\n', '    self.end_time = end_time\n', '    self.cliff_length = cliff_length\n', '\n', '    assert self.token.transferFrom(msg.sender, self, amount)  # dev: could not fund escrow\n', '\n', '    self.recipient = recipient\n', '    self.disabled_at = end_time  # Set to maximum time\n', '    self.total_locked = amount\n', '    log Fund(recipient, amount)\n', '\n', '    return True\n', '\n', '\n', '@internal\n', '@view\n', 'def _total_vested_at(time: uint256 = block.timestamp) -> uint256:\n', '    start: uint256 = self.start_time\n', '    end: uint256 = self.end_time\n', '    locked: uint256 = self.total_locked\n', '    if time < start + self.cliff_length:\n', '        return 0\n', '    return min(locked * (time - start) / (end - start), locked)\n', '\n', '\n', '@internal\n', '@view\n', 'def _unclaimed(time: uint256 = block.timestamp) -> uint256:\n', '    return self._total_vested_at(time) - self.total_claimed\n', '\n', '\n', '@external\n', '@view\n', 'def unclaimed() -> uint256:\n', '    """\n', '    @notice Get the number of unclaimed, vested tokens for recipient\n', '    """\n', '    # NOTE: if `rug_pull` is activated, limit by the activation timestamp\n', '    return self._unclaimed(min(block.timestamp, self.disabled_at))\n', '\n', '\n', '@internal\n', '@view\n', 'def _locked(time: uint256 = block.timestamp) -> uint256:\n', '    return self.total_locked - self._total_vested_at(time)\n', '\n', '\n', '@external\n', '@view\n', 'def locked() -> uint256:\n', '    """\n', '    @notice Get the number of locked tokens for recipient\n', '    """\n', '    # NOTE: if `rug_pull` is activated, limit by the activation timestamp\n', '    return self._locked(min(block.timestamp, self.disabled_at))\n', '\n', '\n', '@external\n', 'def claim(beneficiary: address = msg.sender, amount: uint256 = MAX_UINT256):\n', '    """\n', '    @notice Claim tokens which have vested\n', '    @param beneficiary Address to transfer claimed tokens to\n', '    @param amount Amount of tokens to claim\n', '    """\n', '    assert msg.sender == self.recipient  # dev: not recipient\n', '\n', '    claim_period_end: uint256 = min(block.timestamp, self.disabled_at)\n', '    claimable: uint256 = min(self._unclaimed(claim_period_end), amount)\n', '    self.total_claimed += claimable\n', '\n', '    assert self.token.transfer(beneficiary, claimable)\n', '    log Claim(beneficiary, claimable)\n', '\n', '\n', '@external\n', 'def rug_pull():\n', '    """\n', '    @notice Disable further flow of tokens and clawback the unvested part to admin\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin only\n', '    # NOTE: Rugging more than once is futile\n', '\n', '    self.disabled_at = block.timestamp\n', '    ruggable: uint256 = self._locked()\n', '\n', '    assert self.token.transfer(self.admin, ruggable)\n', '    log RugPull(self.recipient, ruggable)\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(addr: address):\n', '    """\n', '    @notice Transfer ownership of the contract to `addr`\n', '    @param addr Address to have ownership transferred to\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin only\n', '    self.future_admin = addr\n', '    log CommitOwnership(addr)\n', '\n', '\n', '@external\n', 'def apply_transfer_ownership():\n', '    """\n', '    @notice Apply pending ownership transfer\n', '    """\n', '    assert msg.sender == self.future_admin  # dev: future admin only\n', '    self.admin = msg.sender\n', '    self.future_admin = ZERO_ADDRESS\n', '    log ApplyOwnership(msg.sender)\n', '\n', '\n', '@external\n', 'def renounce_ownership():\n', '    """\n', '    @notice Renounce admin control of the escrow\n', '    """\n', '    assert msg.sender == self.admin  # dev: admin only\n', '    self.future_admin = ZERO_ADDRESS\n', '    self.admin = ZERO_ADDRESS\n', '    log ApplyOwnership(ZERO_ADDRESS)']