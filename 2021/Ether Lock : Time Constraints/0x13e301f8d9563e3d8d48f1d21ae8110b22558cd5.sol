['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.0;\n', '\n', 'contract Decoder {\n', '    \n', '    bytes32 public constant DEPOSIT = keccak256("DEPOSIT");\n', '    bytes32 public constant MAP_TOKEN = keccak256("MAP_TOKEN");\n', '    \n', '    enum SyncType {Deposit, TokenMapping, Unsupported}\n', '    \n', '    function getSyncTypeAndData(bytes memory data) internal pure returns(bytes32, bytes memory) {\n', '        (bytes32 syncType, bytes memory syncData) = abi.decode(data, (bytes32, bytes));\n', '        \n', '        return (syncType, syncData);\n', '    }\n', '    \n', '    function decodeStateSyncData(bytes calldata data) external pure returns (SyncType, address, address, bytes memory){\n', '        (bytes32 syncType, bytes memory syncData) = getSyncTypeAndData(data);\n', '        \n', '        if (syncType == MAP_TOKEN) {\n', '            (address root, address child, ) = abi.decode(syncData, (address, address, bytes32));\n', '            \n', '            return (SyncType.TokenMapping, root, child, "");\n', '        }\n', '        \n', '        if (syncType == DEPOSIT) {\n', '            (address depositor, address root, bytes memory depositData) = abi.decode(syncData, (address, address, bytes));\n', '            \n', '            return (SyncType.Deposit, depositor, root, depositData);\n', '        }\n', '        \n', '        return (SyncType.Unsupported, address(0), address(0), "");\n', '    }\n', '    \n', '    function decodeERC20Deposit(bytes calldata depositData) external pure returns(uint256) {\n', '        return abi.decode(depositData, (uint256));\n', '    }\n', '    \n', '    function decodeERC721SingleDeposit(bytes calldata depositData) external pure returns(uint256) {\n', '        return abi.decode(depositData, (uint256));\n', '    }\n', '    \n', '    function decodeERC721BatchDeposit(bytes calldata depositData) external pure returns(uint256[] memory) {\n', '        return abi.decode(depositData, (uint256[]));\n', '    }\n', '    \n', '    function decodeERC1155BatchDeposit(bytes calldata depositData) external pure returns(uint256[] memory, uint256[] memory, bytes memory) {\n', '        return abi.decode(depositData, (uint256[], uint256[], bytes));\n', '    }\n', '}']