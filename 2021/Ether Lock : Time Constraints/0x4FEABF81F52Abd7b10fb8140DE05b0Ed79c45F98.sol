['// SPDX-License-Identifier: UNLICENCED\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'pragma abicoder v2;\n', '\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./XIVInterface.sol";\n', '\n', 'contract XIVBettingFlexible is Ownable{\n', '    \n', '    using SafeMath for uint256;\n', '    address public databaseContractAddress=0x18464e4584759A50CE9FC58eA5997F8B0D1EA1d8;\n', '    uint256 constant secondsInADay=24 hours;\n', '    address public adminAddress=0x1Cff36DeBD53EEB3264fD75497356132C4067632;\n', '    \n', '    function betFlexible(uint256 amountOfXIV, uint16 typeOfBet, address _betContractAddress, uint256 betSlabeIndex, uint256 _days) external{\n', '        // 0-> defi Fixed, 1->defi flexible, 2-> index Fixed and 3-> index flexible 4-> flash fixed 5-> flash flexible\n', '        require(typeOfBet==1 || typeOfBet==3  || typeOfBet==5, "Invalid bet Type");\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        require(!dContract.getExistingBetCheckMapping(msg.sender,typeOfBet,_betContractAddress),"you can\'t place bet using these values.");\n', '        require(dContract.isDaysAvailable(_days),"Day does not exists.");\n', '        Token tokenObj = Token(dContract.getXIVTokenContractAddress());\n', '        require((dContract.getBetFactorLP()).mul(dContract.getTokenStakedAmount())>=\n', '                        ((tokenObj.balanceOf(databaseContractAddress)).sub(dContract.getTokenStakedAmount())).add(amountOfXIV),\n', '                        "Staking Vaults Have EXCEEDED CAPACITY. Please Check Back in 24hrs?");\n', '       \n', '        require(amountOfXIV>=dContract.getMinStakeXIVAmount() && amountOfXIV<=dContract.getMaxStakeXIVAmount(),"Please enter amount in the specified range");\n', '       \n', '        if(typeOfBet==1 || typeOfBet==5){\n', '            //defi flexible\n', '            require((typeOfBet==1?dContract.getDefiCoinsFlexibleMapping(_betContractAddress):\n', '                                    dContract.getDefiCoinsFixedMapping(_betContractAddress,true)).status,"The currency is currently disabled.");\n', '            require(isFlexibleDaysAvailable(_days,false),"Day does not exists.");\n', '            require(checkTimeForBet(_days),"Staking time closed for the selected day");\n', '            require(dContract.getFlexibleDefiCoinArray().length>betSlabeIndex,"Day does not exists.");\n', '            OracleWrapper oWObject=OracleWrapper(dContract.getOracleWrapperContractAddress());\n', '            XIVDatabaseLib.BetInfo memory binfo=XIVDatabaseLib.BetInfo({\n', '                id:dContract.getBetId(),\n', '                principalAmount:amountOfXIV,\n', '                amount:amountOfXIV,\n', '                userAddress:msg.sender,\n', '                contractAddress:_betContractAddress,\n', '                betType:typeOfBet,\n', '                currentPrice:uint256(oWObject.getPrice((typeOfBet==1?dContract.getDefiCoinsFlexibleMapping(_betContractAddress):\n', '                                    dContract.getDefiCoinsFixedMapping(_betContractAddress,true)).currencySymbol, (typeOfBet==1?dContract.getDefiCoinsFlexibleMapping(_betContractAddress):\n', '                                    dContract.getDefiCoinsFixedMapping(_betContractAddress,true)).oracleType)),\n', '                betTimePeriod:_days.mul(1 days),\n', '                checkpointPercent:dContract.getFlexibleDefiCoinArray()[betSlabeIndex].upDownPercentage,\n', '                rewardFactor:dContract.getFlexibleDefiCoinArray()[betSlabeIndex].rewardFactor,\n', '                riskFactor:dContract.getFlexibleDefiCoinArray()[betSlabeIndex].riskFactor,\n', '                timestamp:block.timestamp,\n', '                adminCommissionFee:0,\n', '                status:0\n', '            });\n', '            dContract.updateBetArray(binfo);\n', '            dContract.updateFindBetInArrayUsingBetIdMapping(dContract.getBetId(),dContract.getBetArray().length.sub(1));\n', '            if(dContract.getBetsAccordingToUserAddress(msg.sender).length==0){\n', '                dContract.addUserAddressUsedForBetting(msg.sender);\n', '            }\n', '            dContract.updateBetAddressesArray(msg.sender,dContract.getBetId());\n', '            dContract.updateBetId(dContract.getBetId().add(1));\n', '            uint256 betEndTime=(((((binfo.timestamp).div(secondsInADay)).mul(secondsInADay))).add(secondsInADay.div(2)).add(binfo.betTimePeriod).sub(1));\n', '            dContract.emitBetDetails(binfo.id,binfo.status,betEndTime);\n', '        }else if(typeOfBet==3){\n', '            //index flexible\n', '            require(isFlexibleDaysAvailable(_days, true),"Day does not exists.");\n', '            require(checkTimeForBet(_days),"Staking time closed for the selected day");\n', '            require(dContract.getFlexibleIndexArray().length>betSlabeIndex,"Day does not exists.");\n', '            XIVDatabaseLib.BetInfo memory binfo=XIVDatabaseLib.BetInfo({\n', '                id:dContract.getBetId(),\n', '                principalAmount:amountOfXIV,\n', '                amount:amountOfXIV,\n', '                userAddress:msg.sender,\n', '                contractAddress:address(0),\n', '                betType:typeOfBet,\n', '                currentPrice:uint256(calculateIndexValueForFlexibleInternal(dContract.getBetId())),\n', '                betTimePeriod:_days.mul(1 days),\n', '                checkpointPercent:dContract.getFlexibleIndexArray()[betSlabeIndex].upDownPercentage,\n', '                rewardFactor:dContract.getFlexibleIndexArray()[betSlabeIndex].rewardFactor,\n', '                riskFactor:dContract.getFlexibleIndexArray()[betSlabeIndex].riskFactor,\n', '                timestamp:block.timestamp,\n', '                adminCommissionFee:0,\n', '                status:0\n', '            });\n', '            dContract.updateBetArray(binfo);\n', '            dContract.updateFindBetInArrayUsingBetIdMapping(dContract.getBetId(),dContract.getBetArray().length.sub(1));\n', '            if(dContract.getBetsAccordingToUserAddress(msg.sender).length==0){\n', '                dContract.addUserAddressUsedForBetting(msg.sender);\n', '            }\n', '            dContract.updateBetAddressesArray(msg.sender,dContract.getBetId());\n', '            dContract.updateBetId(dContract.getBetId().add(1));\n', '            uint256 betEndTime=(((((binfo.timestamp).div(secondsInADay)).mul(secondsInADay))).add(secondsInADay.div(2)).add(binfo.betTimePeriod).sub(1));\n', '            dContract.emitBetDetails(binfo.id,binfo.status,betEndTime);\n', '        }\n', '        dContract.transferFromTokens(dContract.getXIVTokenContractAddress(),msg.sender,databaseContractAddress,amountOfXIV);\n', '        dContract.updateTotalTransactions(dContract.getTotalTransactions().add(amountOfXIV));\n', '        dContract.updateExistingBetCheckMapping(msg.sender,typeOfBet,_betContractAddress,true);\n', '    }\n', '    function checkTimeForBet(uint256 _days) internal view returns(bool){\n', '        uint256 currentTime=block.timestamp;\n', '        uint256 utcNoon=((block.timestamp.div(secondsInADay)).mul(secondsInADay)).add(secondsInADay.div(2));\n', '        if(_days==1){\n', '            if(((utcNoon).add(4 hours))>currentTime){\n', '                return true;\n', '            }else{\n', '                return false;\n', '            }\n', '        }else if(_days==3){\n', '            if(((utcNoon).add(12 hours))>currentTime){\n', '                return true;\n', '            }else{\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    function isFlexibleDaysAvailable(uint256 _days, bool isIndex) internal view returns(bool){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        if(isIndex){\n', '            for(uint256 i=0;i<dContract.getFlexibleIndexTimePeriodArray().length;i++){\n', '                if(dContract.getFlexibleIndexTimePeriodArray()[i]._days==_days && dContract.getFlexibleIndexTimePeriodArray()[i].status==true){\n', '                    return true;\n', '                }\n', '            }\n', '        }else{\n', '            for(uint256 i=0;i<dContract.getFlexibleDefiCoinTimePeriodArray().length;i++){\n', '                if(dContract.getFlexibleDefiCoinTimePeriodArray()[i]._days==_days && dContract.getFlexibleDefiCoinTimePeriodArray()[i].status==true){\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '   function calculateIndexValueForBetActual() external view returns(uint256){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 totalMarketcap;\n', '        for(uint256 i=0;i<dContract.getAllIndexContractAddressArray().length;i++){\n', '            Token tObj=Token(dContract.getAllIndexContractAddressArray()[i]);\n', '            XIVDatabaseLib.IndexCoin memory iCObj=dContract.getDefiCoinIndexMapping(dContract.getAllIndexContractAddressArray()[i]);\n', '            if(iCObj.status){\n', '                totalMarketcap=totalMarketcap.add(marketCapValue(iCObj,tObj));\n', '            }\n', '        }\n', '        return totalMarketcap;\n', '    }\n', '    function calculateIndexValueForBetBase() external view returns(uint256){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 totalMarketcap;\n', '        for(uint256 i=0;i<dContract.getAllIndexContractAddressArray().length;i++){\n', '            Token tObj=Token(dContract.getAllIndexContractAddressArray()[i]);\n', '            XIVDatabaseLib.IndexCoin memory iCObj=dContract.getDefiCoinIndexMapping(dContract.getAllIndexContractAddressArray()[i]);\n', '            if(iCObj.status){\n', '                totalMarketcap=totalMarketcap.add(marketCapValue(iCObj,tObj));\n', '            }\n', '        }\n', '         if(dContract.getBetBaseIndexValue()==0){\n', '            return (10**11);\n', '        }else{\n', '            if(totalMarketcap>dContract.getBetActualIndexValue()){\n', '                return (dContract.getBetBaseIndexValue().add((\n', '                                                     (totalMarketcap.sub(dContract.getBetActualIndexValue()))\n', '                                                     .mul(100*10**8)).div(dContract.getBetActualIndexValue())));\n', '            }else if(totalMarketcap<dContract.getBetActualIndexValue()){\n', '                return (dContract.getBetBaseIndexValue().sub((\n', '                                                     (dContract.getBetActualIndexValue().sub(totalMarketcap))\n', '                                                     .mul(100*10**8)).div(dContract.getBetActualIndexValue())));\n', '            }\n', '        }\n', '        return (10**11);\n', '    }\n', '    \n', '    function calculateIndexValueForFlexibleInternal(uint256 _betId) internal returns(uint256){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 totalMarketcap;\n', '        for(uint256 i=0;i<dContract.getAllIndexContractAddressArray().length;i++){\n', '            Token tObj=Token(dContract.getAllIndexContractAddressArray()[i]);\n', '            XIVDatabaseLib.IndexCoin memory iCObj=dContract.getDefiCoinIndexMapping(dContract.getAllIndexContractAddressArray()[i]);\n', '            if(iCObj.status){\n', '                totalMarketcap=totalMarketcap.add(marketCapValue(iCObj,tObj));\n', '                dContract.updateBetIndexForFlexibleArray(_betId,iCObj);\n', '            }\n', '        }\n', '        XIVDatabaseLib.BetPriceHistory memory bPHObj=XIVDatabaseLib.BetPriceHistory({\n', '            baseIndexValue:dContract.getBetBaseIndexValue()==0?10**11:dContract.getBetBaseIndexValue(),\n', '            actualIndexValue:totalMarketcap\n', '        });\n', '        dContract.updateBetPriceHistoryFlexibleMapping(_betId,bPHObj);\n', '        if(dContract.getBetBaseIndexValue()==0){\n', '            dContract.updateBetBaseIndexValue(10**11);\n', '        }else{\n', '            if(totalMarketcap>dContract.getBetActualIndexValue()){\n', '                dContract.updateBetBaseIndexValue(dContract.getBetBaseIndexValue().add((\n', '                                                     (totalMarketcap.sub(dContract.getBetActualIndexValue()))\n', '                                                     .mul(100*10**8)).div(dContract.getBetActualIndexValue())));\n', '            }else if(totalMarketcap<dContract.getBetActualIndexValue()){\n', '                dContract.updateBetBaseIndexValue(dContract.getBetBaseIndexValue().sub((\n', '                                                     (dContract.getBetActualIndexValue().sub(totalMarketcap))\n', '                                                     .mul(100*10**8)).div(dContract.getBetActualIndexValue())));\n', '            }\n', '        }\n', '        dContract.updateBetActualIndexValue(totalMarketcap);\n', '        return totalMarketcap;\n', '    }\n', '    \n', '    function claimBet(uint256 userBetId) external{\n', '        // 0-> defi Fixed, 1->defi flexible, 2-> index Fixed and 3-> index flexible\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 index=dContract.getFindBetInArrayUsingBetIdMapping(userBetId);\n', '        XIVDatabaseLib.BetInfo memory bObject=dContract.getBetArray()[index];\n', '        require((bObject.status==0) \n', '                || (bObject.status==1)\n', '                || (bObject.status==2),"bet is closed.");\n', '        if(bObject.status==0){\n', '           if(block.timestamp.sub(bObject.timestamp) > 6 days){\n', '                plentyFinal(index,7);\n', '                return;\n', '            }else if(block.timestamp.sub(bObject.timestamp) > 5 days){\n', '                plentyFinal(index,6);\n', '                return;\n', '            }else if(block.timestamp.sub(bObject.timestamp) > 4 days){\n', '                plentyFinal(index,5);\n', '                return;\n', '            }else if(block.timestamp.sub(bObject.timestamp) > 3 days){\n', '                plentyFinal(index,4);\n', '                return;\n', '            }else if(block.timestamp.sub(bObject.timestamp) > 2 days){\n', '                plentyFinal(index,3);\n', '                return;\n', '            }else if(block.timestamp.sub(bObject.timestamp) > 1 days){\n', '                plentyFinal(index,2);\n', '                return;\n', '            }else{\n', '                plentyFinal(index,1);\n', '                return;\n', '            }\n', '        }else{\n', '            claimBetFinal(index);\n', '        }\n', '    }\n', '    \n', '    function claimBetFinal(uint256 index) internal{\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        XIVDatabaseLib.BetInfo memory bObject=dContract.getBetArray()[index];\n', '        require(bObject.userAddress==msg.sender,"Authentication failure");\n', '        require(bObject.amount!=0,"Your bet amount is 0");\n', '        dContract.transferTokens(dContract.getXIVTokenContractAddress(),msg.sender,(bObject.amount)); \n', '        bObject.amount=0; // return 3 times\n', '        dContract.updateBetArrayIndex(bObject,index);\n', '    }\n', '    function plentyFinal(uint256 index, uint256 _days) internal{\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        XIVDatabaseLib.BetInfo memory bObject=dContract.getBetArray()[index];\n', '        uint256 plentyPercentage;\n', '        if(bObject.betTimePeriod==1 days){\n', '            plentyPercentage=dContract.getPlentyOneDayPercentage();\n', '        }else if(bObject.betTimePeriod==3 days){\n', '            plentyPercentage=dContract.getPlentyThreeDayPercentage(_days);\n', '        }else if(bObject.betTimePeriod==7 days){\n', '            plentyPercentage=dContract.getPlentySevenDayPercentage(_days);\n', '        }\n', '        if(plentyPercentage!=0){\n', '            uint256 plentyAmount=((plentyPercentage.mul(bObject.amount)).div(10**4));\n', '            uint256 userAmount=(bObject.amount).sub(plentyAmount);\n', '            if(userAmount!=0){\n', '                dContract.transferTokens(dContract.getXIVTokenContractAddress(),msg.sender,userAmount); \n', '            }\n', '            if(plentyAmount!=0){\n', '                dContract.transferTokens(dContract.getXIVTokenContractAddress(),adminAddress,plentyAmount); \n', '            }\n', '            bObject.status=3;\n', '            bObject.amount=0;\n', '            dContract.updateBetArrayIndex(bObject,index);\n', '            dContract.updateExistingBetCheckMapping(bObject.userAddress,bObject.betType,bObject.contractAddress,false);\n', '        }\n', '    }\n', '    \n', '    function marketCapValue(XIVDatabaseLib.IndexCoin memory iCObj,Token tObj) internal view returns(uint256){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        OracleWrapper oWObject=OracleWrapper(dContract.getOracleWrapperContractAddress());\n', '         if((keccak256(abi.encodePacked(iCObj.currencySymbol))) == (keccak256(abi.encodePacked("ETH"))) || (keccak256(abi.encodePacked(iCObj.currencySymbol))) == (keccak256(abi.encodePacked("BTC")))){\n', '            return ((((oWObject.getPrice(iCObj.currencySymbol,iCObj.oracleType))\n', '                                        /* .mul(iCObj.contributionPercentage)*/)\n', '                                        .div(10**2)));\n', '        }else{\n', '            return (((tObj.totalSupply().mul(oWObject.getPrice(iCObj.currencySymbol,iCObj.oracleType))\n', '                                /*.mul(iCObj.contributionPercentage)*/)\n', '                                .div((10**tObj.decimals()).mul(10**2))));\n', '        }\n', '    }\n', '    function getPieChartValue() external view returns(XIVDatabaseLib.IndexCoin[] memory){\n', '        DatabaseContract dContract=DatabaseContract(databaseContractAddress);\n', '        uint256 totalMarketcap;\n', '        XIVDatabaseLib.IndexCoin[] memory tempIndexArray=new XIVDatabaseLib.IndexCoin[](dContract.getAllIndexContractAddressArray().length);\n', '        for(uint256 i=0;i<dContract.getAllIndexContractAddressArray().length;i++){\n', '            Token tObj=Token(dContract.getAllIndexContractAddressArray()[i]);\n', '            XIVDatabaseLib.IndexCoin memory iCObj=dContract.getDefiCoinIndexMapping(dContract.getAllIndexContractAddressArray()[i]);\n', '            if(iCObj.status){\n', '                totalMarketcap=totalMarketcap.add(marketCapValue(iCObj,tObj));\n', '            }\n', '        }\n', '        for(uint256 i=0;i<dContract.getAllIndexContractAddressArray().length;i++){\n', '            Token tObj=Token(dContract.getAllIndexContractAddressArray()[i]);\n', '            XIVDatabaseLib.IndexCoin memory iCObj=dContract.getDefiCoinIndexMapping(dContract.getAllIndexContractAddressArray()[i]);\n', '            if(iCObj.status){\n', '                iCObj.contributionPercentage=(marketCapValue(iCObj,tObj).mul(10**4))/totalMarketcap;\n', '                tempIndexArray[i]=iCObj;\n', '            }\n', '        }\n', '        return tempIndexArray;\n', '    }\n', '    \n', '    function updateDatabaseAddress(address _databaseContractAddress) external onlyOwner{\n', '        databaseContractAddress=_databaseContractAddress;\n', '    }\n', '    \n', '    function updateAdminAddress(address _adminAddress) external onlyOwner{\n', '        adminAddress=_adminAddress;\n', '    }\n', '}']