['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'contract CoFiXUpdate {\n', '    // COFI Token地址\n', '    address constant COFI_TOKEN_ADDRESS = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\n', '    // USDT Token地址\n', '    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    // HBTC Token地址\n', '    address constant HBTC_TOKEN_ADDRESS = 0x0316EB71485b0Ab14103307bf65a021042c6d380;\n', '\n', '    // 1.0合约地址\n', '    // 工厂合约地址\n', '    address constant COFIXV1FACTORY_ADDRESS = 0x66C64ecC3A6014733325a8f2EBEE46B4CA3ED550;\n', '    // lp挖矿合约地址\n', '    address constant COFIXV1VAULTFORLP_ADDRESS = 0x6903b1C17A5A0A9484c7346E5c0956027A713fCF;\n', '    // cn挖矿合约地址\n', '    address constant COFIXV1VAULTFORCNODE_ADDRESS = 0x7eDa8251aC08E7898E986DbeC4Ba97B421d545DD;\n', '    // 交易挖矿合约地址\n', '    address constant COFIXV1VAULTFORTRADER_ADDRESS = 0xE6183d3094a9e360B123Ec1330afAE76A74d1cbF;\n', '    // 分红合约地址\n', '    address constant COFISTAKINGREWARDS_ADDRESS = 0x0061c52768378b84306b2665f098c3e0b2C03308;\n', '    // 对接nest3.6的controller\n', '    address constant COFIXV1NEWCONTROLLER_ADDRESS = 0xB99DB9674e03A2cB07c3D7d92406aE1a3BBB9f56;\n', '\n', '    // 2.0地址\n', '    // 2.0lp挖矿合约地址\n', '    address constant COFIXV2VAULTFORLP_ADDRESS = 0x618B7b93b07Bf78D04B2e8FB2B1C3B48049F8ED5;\n', '    // 2.0cn挖矿合约地址\n', '    address constant COFIXV2VAULTFORCNODE_ADDRESS = 0x3881292cE52AeD0EdAFF1AC7A40DA12AB2453B84;\n', '    // 2.0交易挖矿合约地址\n', '    address constant COFIXV2VAULTFORTRADER_ADDRESS = 0xb29A8d980E1408E487B9968f5E4f7fD7a9B0CaC5;\n', '    // 2.0DAO合约地址\n', '    address constant COFIXV2DAO_ADDRESS = 0x278f5d08bEa1989BEfcC09A20ad60fB39702D556;\n', '\n', '    // 1.0多签合约地址\n', '    address governance = 0xF51d8FdF98286e1EA846c79f1526ECC95b93AbB8;\n', '    // 操作合约的管理员\n', '    address _owner;\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    function doit() public onlyOwner {\n', '        // 1.设置1.0USDT和HBTCLP不挖矿，手续费转到LP池\n', '        setMiningZero();\n', '        // 2.设置cofix1.0挖矿效率为0\n', '        setVaultMiningNum();\n', '        // 3.删除COFI Token可挖矿权限-1.0挖矿合约\n', '        removeCofiMinter();\n', '        // 4.添加COFI Token可挖矿权限-2.0挖矿合约\n', '        addCofiMinter();\n', '        // 5.转移DAO资产\n', '        turnOutETH();\n', '        // 6.重置管理员地址\n', '        resetGovernance();\n', '    }\n', '\n', '    // Cofix1.0设置新的controller\n', '    function setCofixV1Controller() public onlyOwner {\n', '        ICoFiXFactory cofixFactory = ICoFiXFactory(COFIXV1FACTORY_ADDRESS);\n', '        // Cofix1.0设置新的controller\n', '        cofixFactory.setController(COFIXV1NEWCONTROLLER_ADDRESS);\n', '        require(cofixFactory.controller() == COFIXV1NEWCONTROLLER_ADDRESS, "setCofixV1Controller:!COFIXV1NEWCONTROLLER_ADDRESS");\n', '    }\n', '    \n', '    // 设置1.0USDT和HBTCLP不挖矿，手续费转到LP池\n', '    function setMiningZero() public onlyOwner {\n', '        ICoFiXFactory cofixFactory = ICoFiXFactory(COFIXV1FACTORY_ADDRESS);\n', '        // USDT和HBTCLP不挖矿，手续费转到LP池\n', '        cofixFactory.setTradeMiningStatus(USDT_TOKEN_ADDRESS, false);\n', '        cofixFactory.setTradeMiningStatus(HBTC_TOKEN_ADDRESS, false);\n', '        cofixFactory.setFeeVaultForLP(USDT_TOKEN_ADDRESS, address(0x0));\n', '        cofixFactory.setFeeVaultForLP(HBTC_TOKEN_ADDRESS, address(0x0));\n', '        require(cofixFactory.getTradeMiningStatus(USDT_TOKEN_ADDRESS) == false, "getTradeMiningStatus:!USDT_TOKEN_ADDRESS");\n', '        require(cofixFactory.getTradeMiningStatus(HBTC_TOKEN_ADDRESS) == false, "getTradeMiningStatus:!HBTC_TOKEN_ADDRESS");\n', '        require(cofixFactory.getFeeVaultForLP(USDT_TOKEN_ADDRESS) == address(0x0), "getFeeVaultForLP:!USDT_PAIR_ADDRESS");\n', '        require(cofixFactory.getFeeVaultForLP(HBTC_TOKEN_ADDRESS) == address(0x0), "getFeeVaultForLP:!HBTC_PAIR_ADDRESS");\n', '    }\n', '    \n', '    // 添加COFI Token可挖矿权限-2.0挖矿合约\n', '    function addCofiMinter() public onlyOwner {\n', '        ICoFiToken cofiToken = ICoFiToken(COFI_TOKEN_ADDRESS);\n', '\n', '        // 添加权限\n', '        cofiToken.addMinter(COFIXV2VAULTFORLP_ADDRESS);\n', '        cofiToken.addMinter(COFIXV2VAULTFORCNODE_ADDRESS);\n', '        cofiToken.addMinter(COFIXV2VAULTFORTRADER_ADDRESS);\n', '\n', '        // 验证\n', '        require(cofiToken.minters(COFIXV2VAULTFORLP_ADDRESS), "addCofiMinter:COFIXV2VAULTFORLP_ADDRESS");\n', '        require(cofiToken.minters(COFIXV2VAULTFORCNODE_ADDRESS), "addCofiMinter:COFIXV2VAULTFORCNODE_ADDRESS");\n', '        require(cofiToken.minters(COFIXV2VAULTFORTRADER_ADDRESS), "addCofiMinter:COFIXV2VAULTFORTRADER_ADDRESS");\n', '    }\n', '\n', '    // 删除COFI Token可挖矿权限-1.0挖矿合约\n', '    function removeCofiMinter() public onlyOwner {\n', '        ICoFiToken cofiToken = ICoFiToken(COFI_TOKEN_ADDRESS);\n', '\n', '        // 删除权限\n', '        cofiToken.removeMinter(COFIXV1VAULTFORLP_ADDRESS);\n', '        cofiToken.removeMinter(COFIXV1VAULTFORCNODE_ADDRESS);\n', '        cofiToken.removeMinter(COFIXV1VAULTFORTRADER_ADDRESS);\n', '\n', '        // 验证\n', '        require(cofiToken.minters(COFIXV1VAULTFORLP_ADDRESS) == false, "removeCofiMinter:COFIXV1VAULTFORLP_ADDRESS");\n', '        require(cofiToken.minters(COFIXV1VAULTFORCNODE_ADDRESS) == false, "removeCofiMinter:COFIXV1VAULTFORCNODE_ADDRESS");\n', '        require(cofiToken.minters(COFIXV1VAULTFORTRADER_ADDRESS) == false, "removeCofiMinter:COFIXV1VAULTFORTRADER_ADDRESS");\n', '    }\n', '\n', '    // 设置cofix1.0挖矿效率为0\n', '    function setVaultMiningNum() public onlyOwner {\n', '        // 设置CN挖矿效率为0\n', '        ICoFiXVaultForCNode cofixVaultForCNode = ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS);\n', '        cofixVaultForCNode.setInitCoFiRate(0);\n', '        require(cofixVaultForCNode.initCoFiRate() == 0, "setVaultMiningNum:cofixVaultForCNode!=0");\n', '\n', '        // 设置lp挖矿效率为0\n', '        ICoFiXVaultForLP cofixVaultForLP = ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS);\n', '        cofixVaultForLP.setInitCoFiRate(0);\n', '        require(cofixVaultForLP.initCoFiRate() == 0, "setVaultMiningNum:cofixVaultForLP!=0");\n', '\n', '        // 设置交易挖矿效率为0\n', '        ICoFiXVaultForTrader cofixVaultForTrader = ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS);\n', '        cofixVaultForTrader.setTheta(0);\n', '        require(cofixVaultForTrader.THETA() == 0, "setVaultMiningNum:cofixVaultForTrader!=0");\n', '    }\n', '\n', '    // 转移DAO资产\n', '    function turnOutETH() public onlyOwner {\n', '        // 转移ETH到升级合约\n', '        ICoFiStakingRewards cofiStakingRewards = ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS);\n', '        uint256 ETHAmount = cofiStakingRewards.pendingSavingAmount();\n', '        cofiStakingRewards.withdrawSavingByGov(address(this), ETHAmount);\n', '        require(address(this).balance >= ETHAmount, "turnOutETH:!thisBalance");\n', '        // 转移ETH到DAO合约\n', '        TransferHelper.safeTransferETH(COFIXV2DAO_ADDRESS, ETHAmount);\n', '        require(address(COFIXV2DAO_ADDRESS).balance >= ETHAmount, "turnOutETH:!COFIXV2DAO_ADDRESS");\n', '    }\n', '\n', '    // 重置管理员地址\n', '    function resetGovernance() public onlyOwner {\n', '        resetGovernance_COFI_TOKEN();\n', '        resetGovernance_COFIXV1FACTORY();\n', '        resetGovernance_COFIXV1VAULTFORCNODE();\n', '        resetGovernance_COFIXV1VAULTFORLP();\n', '        resetGovernance_COFIXV1VAULTFORTRADER();\n', '        resetGovernance_COFISTAKINGREWARDS();\n', '    }\n', '    \n', '    function resetGovernance_COFI_TOKEN() public onlyOwner {\n', '        ICoFiToken(COFI_TOKEN_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_COFIXV1FACTORY() public onlyOwner {\n', '        ICoFiXFactory(COFIXV1FACTORY_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_COFIXV1VAULTFORCNODE() public onlyOwner {\n', '        ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_COFIXV1VAULTFORLP() public onlyOwner {\n', '        ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_COFIXV1VAULTFORTRADER() public onlyOwner {\n', '        ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_COFISTAKINGREWARDS() public onlyOwner {\n', '        ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS).setGovernance(governance);\n', '    }\n', '    \n', '    function resetGovernance_CUS(address add) public onlyOwner {\n', '        require(add != address(0x0), "resetGovernance_CUS:0x0");\n', '        ICoFiToken(COFI_TOKEN_ADDRESS).setGovernance(add);\n', '        ICoFiXFactory(COFIXV1FACTORY_ADDRESS).setGovernance(add);\n', '        ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS).setGovernance(add);\n', '        ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS).setGovernance(add);\n', '        ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS).setGovernance(add);\n', '        ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS).setGovernance(add);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    receive() external payable{}\n', '    \n', '}\n', '\n', 'interface ICoFiToken {\n', '    function setGovernance(address _new) external;\n', '    function addMinter(address _minter) external;\n', '    function removeMinter(address _minter) external;\n', '    function minters(address add) external view returns(bool);\n', '}\n', '\n', 'interface ICoFiXFactory {\n', '    function setGovernance(address _new) external;\n', '    function setController(address _new) external;\n', '    function controller() external view returns(address);\n', '    function setTradeMiningStatus(address token, bool status) external;\n', '    function setFeeVaultForLP(address token, address feeVault) external;\n', '    function getTradeMiningStatus(address add) external view returns(bool);\n', '    function getFeeVaultForLP(address add) external view returns(address);\n', '}\n', '\n', 'interface ICoFiXVaultForCNode {\n', '    function setGovernance(address _new) external;\n', '    function setInitCoFiRate(uint256 _new) external;\n', '    function initCoFiRate() external view returns(uint256);\n', '}\n', '\n', 'interface ICoFiXVaultForLP {\n', '    function setGovernance(address _new) external;\n', '    function setInitCoFiRate(uint256 _new) external;\n', '    function initCoFiRate() external view returns(uint256);\n', '}\n', '\n', 'interface ICoFiXVaultForTrader {\n', '    function setGovernance(address _new) external;\n', '    function setTheta(uint256 theta) external;\n', '    function THETA() external view returns(uint256);\n', '}\n', '\n', 'interface ICoFiStakingRewards {\n', '    function setGovernance(address _new) external;\n', '    function withdrawSavingByGov(address _to, uint256 _amount) external;\n', '    function pendingSavingAmount() external view returns(uint256);\n', '}\n', '\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}']