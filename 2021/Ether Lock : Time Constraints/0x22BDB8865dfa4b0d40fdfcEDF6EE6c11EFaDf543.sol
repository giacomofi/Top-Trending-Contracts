['// SPDX-License-Identifier: U-U-U-UPPPPP!!!\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/* ROOTKIT:\n', 'A transfer gate (GatedERC20) for use with upTokens\n', '\n', 'It:\n', '    Allows customization of tax and burn rates\n', '    Allows transfer to/from approved pools\n', '    Disallows transfer to/from non-approved pools\n', '    Allows transfer to/from anywhere else\n', '    Allows for free transfers if permission granted\n', '    Allows for unrestricted transfers if permission granted\n', '    Allows for a pool to have an extra tax\n', '    Allows for a temporary declining tax\n', '*/\n', '\n', 'import "./Address.sol";\n', 'import "./IUniswapV2Factory.sol";\n', 'import "./IERC20.sol";\n', 'import "./IUniswapV2Pair.sol";\n', 'import "./ILiquidityLockedERC20.sol";\n', 'import "./IUniswapV2Router02.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./TokensRecoverable.sol";\n', 'import "./ITransferGate.sol";\n', '\n', 'contract RootedTransferGate is TokensRecoverable, ITransferGate\n', '{   \n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    IUniswapV2Router02 immutable internal uniswapV2Router;\n', '    IUniswapV2Factory immutable internal uniswapV2Factory;\n', '    ILiquidityLockedERC20 immutable internal rootedToken;\n', '\n', '    bool public unrestricted;\n', '    mapping (address => bool) public unrestrictedControllers;\n', '    mapping (address => bool) public feeControllers;\n', '    mapping (address => bool) public freeParticipantControllers;\n', '    mapping (address => bool) public freeParticipant;\n', '\n', '    address public override feeSplitter;\n', '    uint16 public feesRate; \n', '    uint16 public sellFeesRate;\n', '    IUniswapV2Pair public taxedPool;\n', '   \n', '    uint16 public dumpTaxStartRate; \n', '    uint256 public dumpTaxDurationInSeconds;\n', '    uint256 public dumpTaxEndTimestamp;\n', '\n', '    constructor(ILiquidityLockedERC20 _rootedToken, IUniswapV2Router02 _uniswapV2Router)\n', '    {\n', '        rootedToken = _rootedToken;\n', '        uniswapV2Router = _uniswapV2Router;\n', '        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\n', '    }\n', '\n', '    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\n', '    {\n', '        unrestrictedControllers[unrestrictedController] = allow;\n', '    }\n', '\n', '    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\n', '    {\n', '        freeParticipantControllers[freeParticipantController] = allow;\n', '    }\n', '\n', '    function setFeeControllers(address feeController, bool allow) public ownerOnly()\n', '    {\n', '        feeControllers[feeController] = allow;\n', '    }\n', '\n', '    function setFeeSplitter(address _feeSplitter) public ownerOnly()\n', '    {\n', '        feeSplitter = _feeSplitter;\n', '    }\n', '\n', '    function setFreeParticipant(address participant, bool free) public\n', '    {\n', '        require (msg.sender == owner || freeParticipantControllers[msg.sender], "Not an owner or free participant controller");\n', '        freeParticipant[participant] = free;\n', '    }\n', '\n', '    function setUnrestricted(bool _unrestricted) public\n', '    {\n', '        require (unrestrictedControllers[msg.sender], "Not an unrestricted controller");\n', '        unrestricted = _unrestricted;\n', '        rootedToken.setLiquidityLock(taxedPool, !_unrestricted);\n', '    }    \n', '\n', '    function setTaxedPool(IUniswapV2Pair _taxedPool) public ownerOnly()\n', '    {\n', '        taxedPool = _taxedPool;\n', '    }\n', '\n', '    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\n', '    {\n', '        require (feeControllers[msg.sender] || msg.sender == owner, "Not an owner or fee controller");\n', '        require (startTaxRate <= 2500, "Dump tax rate must be less than or equal to 25%");\n', '\n', '        dumpTaxStartRate = startTaxRate;\n', '        dumpTaxDurationInSeconds = durationInSeconds;\n', '        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\n', '    }\n', '\n', '    function getDumpTax() public view returns (uint256)\n', '    {\n', '        if (block.timestamp >= dumpTaxEndTimestamp) \n', '        {\n', '            return 0;\n', '        }       \n', '        \n', '        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\n', '    }\n', '\n', '    function setFees(uint16 _feesRate) public\n', '    {\n', '        require (feeControllers[msg.sender] || msg.sender == owner, "Not an owner or fee controller");\n', '        require (_feesRate <= 1000, "Fee rate must be less than or equal to 10%");\n', '        feesRate = _feesRate;\n', '    }\n', '    \n', '    function setSellFees(uint16 _sellFeesRate) public\n', '    {\n', '        require (feeControllers[msg.sender] || msg.sender == owner, "Not an owner or fee controller");\n', '        require (_sellFeesRate <= 2500, "Sell fee rate must be less than or equal to 25%");\n', '        \n', '        sellFeesRate = _sellFeesRate;\n', '    }\n', '\n', '    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\n', '    {\n', '        if (unrestricted || freeParticipant[from] || freeParticipant[to]) \n', '        {\n', '            return 0;\n', '        }\n', '\n', '        if (to == address(taxedPool)) \n', '        {\n', '            return amount * sellFeesRate / 10000 + amount * getDumpTax() / 10000;\n', '        }\n', '\n', '        return amount * feesRate / 10000;\n', '    }   \n', '}']