['pragma solidity ^0.7.0;\n', '\n', 'import { SafeMath } from "./SafeMath.sol";\n', '\n', 'interface TokenInterface {\n', '    function transfer(address, uint) external returns (bool);\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', 'interface UniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'contract PastaChef {\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice Contract name\n', '    string public constant name = "Pasta Chef v1";\n', '\n', '    /// @notice Contract owner (Timelock contract)\n', '    address public immutable owner;\n', '\n', '    /// @notice Reward starting block\n', '    uint256 public immutable startBlock;\n', '\n', '    /// @notice Reward ending block\n', '    uint256 public endBlock;\n', '\n', '    /// @notice Last block in which pasta rewards have been distributed\n', '    uint256 public lastUpdatedBlock;\n', '\n', '    /// @notice Pasta reward per block\n', '    uint256 public pastaPerBlock;\n', '\n', '    /// @notice ETH/PASTA v2 Uniswap pool\n', '    UniswapV2Pair public constant pool = UniswapV2Pair(0xE92346d9369Fe03b735Ed9bDeB6bdC2591b8227E);\n', '\n', '    /// @notice PASTA v2 token\n', '    TokenInterface public constant pasta = TokenInterface(0xE54f9E6Ab80ebc28515aF8b8233c1aeE6506a15E);\n', '\n', '    event Claimed(address indexed claimer, uint256 amount);\n', '    event UpdateRewardRate(uint256 oldRate, uint256 newRate);\n', '    event UpdateEndBlock(uint256 oldEnd, uint256 newEnd);\n', '\n', '    constructor(address _timelock, uint256 _startBlock, uint256 _endBlock, uint256 _pastaPerBlock) {\n', '        require(_timelock != address(0x0), "PastaChef::invalid-address");\n', '        require(_startBlock >= block.number, "PastaChef::invalid-start-block");\n', '        require(_endBlock >= block.number && _endBlock > _startBlock, "PastaChef::invalid-end-block");\n', '        require(_pastaPerBlock > 0, "PastaChef::invalid-rewards");\n', '\n', '        owner = _timelock;\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '        lastUpdatedBlock = _startBlock;\n', '        pastaPerBlock = _pastaPerBlock;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "PastaChef::unauthorized");\n', '        _;\n', '    }\n', '\n', '    function pendingRewards() public view returns (uint256) {\n', '        if (block.number <= startBlock || lastUpdatedBlock > endBlock) return 0;\n', '\n', '        uint256 blockNumber = block.number;\n', '        if (blockNumber > endBlock) {\n', '            blockNumber = endBlock;\n', '        }\n', '        return blockNumber.sub(lastUpdatedBlock).mul(pastaPerBlock);\n', '    }\n', '\n', '    function claimForAll() public {\n', '        uint256 rewards = pendingRewards();\n', '        require(rewards > 0, "PastaChef::already-claimed");\n', '\n', '        uint256 balance = pasta.balanceOf(address(this));\n', '        require(balance >= rewards, "PastaChef::insufficient-pasta");\n', '\n', '        require(pasta.transfer(address(pool), rewards), "PastaChef::failed-to-distribute");\n', '        pool.sync();\n', '\n', '        lastUpdatedBlock = block.number;\n', '\n', '        emit Claimed(msg.sender, rewards);\n', '    }\n', '\n', '    function updateRewardRate(uint256 _pastaPerBlock) external onlyOwner {\n', '        require(_pastaPerBlock > 0, "PastaChef::invalid-rewards");\n', '\n', '        claimForAll();\n', '\n', '        emit UpdateRewardRate(pastaPerBlock, _pastaPerBlock);\n', '\n', '        pastaPerBlock = _pastaPerBlock;\n', '    }\n', '\n', '    function updateEndBlock(uint256 _endBlock) external onlyOwner {\n', '        require(_endBlock >= block.number && _endBlock > startBlock, "PastaChef::invalid-end-block");\n', '        require(endBlock > block.number, "PastaChef::reward-period-over");\n', '\n', '        emit UpdateEndBlock(endBlock, _endBlock);\n', '\n', '        endBlock = _endBlock;\n', '    }\n', '\n', '    function sweep(address to) external onlyOwner {\n', '        require(block.number > endBlock, "PastaChef::reward-period-not-over");\n', '        uint256 balance = pasta.balanceOf(address(this));\n', '\n', '        require(pasta.transfer(to, balance));\n', '    }\n', '}']