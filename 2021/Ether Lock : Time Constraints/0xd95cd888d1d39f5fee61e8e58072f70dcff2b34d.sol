['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface StandardToken {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IController {\n', '    function withdrawETH(uint256 amount) external;\n', '    function depositForStrategy(uint256 amount, address addr) external;\n', '    function buyForStrategy(\n', '        uint256 amount,\n', '        address rewardToken,\n', '        address recipient\n', '    ) external;\n', '\n', '    function sendExitToken(\n', '        address user,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function getStrategy(address vault) external view returns (address);\n', '}\n', '\n', 'interface IStrategy {\n', '    function getNextEpochTime() external view returns(uint256);\n', '}\n', '\n', 'interface StakeAndYieldV1 {\n', '    function users(address user) external view returns (\n', '        uint256 balance,\n', '        uint256 stakeType,\n', '        uint256 paidReward,\n', '        uint256 yieldPaidReward,\n', '        uint256 paidRewardPerToken,\n', '        uint256 yieldPaidRewardPerToken,\n', '        uint256 withdrawable,\n', '        uint256 withdrawableExit,\n', '        uint256 withdrawTime,\n', '        bool exit,\n', '        uint256 exitStartTime,\n', '        uint256 exitAmountTillNow,\n', '        uint256 lastClaimTime\n', '    );\n', '\n', '    function userInfo(address account) external view returns(\n', '        uint256[15] memory numbers,\n', '\n', '        address rewardTokenAddress,\n', '        address stakedTokenAddress,\n', '        address controllerAddress,\n', '        address strategyAddress,\n', '        bool exit\n', '    );\n', '}\n', '\n', 'contract StakeAndYieldV2 is Ownable {\n', '    uint256 constant STAKE = 1;\n', '    uint256 constant YIELD = 2;\n', '    uint256 constant BOTH = 3;\n', '\n', '    uint256 public PERIOD = 7 days;\n', '\n', '    uint256 public EPOCH_PERIOD = 24 hours;\n', '\n', '    uint256 public EXIT_PERIOD = 75 days;\n', '\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardRate;\n', '    uint256 public rewardRateYield;\n', '\n', '    uint256 public rewardTillNowPerToken = 0;\n', '    uint256 public yieldRewardTillNowPerToken = 0;\n', '\n', '    uint256 public _totalSupply = 27107222074668847534350;\n', '    uint256 public _totalSupplyYield = 24018522600167288546949;\n', '\n', '    uint256 public _totalYieldWithdrawed = 7614108146077065784600;\n', '    uint256 public _totalExit = 0;\n', '\n', '    // false: withdraw from YEARN and then pay the user\n', '    // true: pay the user before withdrawing from YEARN\n', '    bool public allowEmergencyWithdraw = false;\n', '\n', '    uint256 public exitRewardDenominator = 2;\n', '\n', '    IController public controller;\n', '\n', '    address public operator;\n', '\n', '    struct User {\n', '        uint256 balance;\n', '        uint256 stakeType;\n', '\n', '        uint256 paidReward;\n', '        uint256 yieldPaidReward;\n', '\n', '        uint256 paidRewardPerToken;\n', '        uint256 yieldPaidRewardPerToken;\n', '\n', '        uint256 withdrawable;\n', '        uint256 withdrawableExit;\n', '        uint256 withdrawTime;\n', '\n', '        bool exit;\n', '\n', '        uint256 exitStartTime;\n', '        uint256 exitAmountTillNow;\n', '\n', '        uint256 lastClaimTime;\n', '    }\n', '\n', '    mapping (address => uint256) pendingEarneds;\n', '    mapping (address => uint256) pendingEarnedYields;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => User) public users;\n', '\n', '    uint256 public lastUpdatedBlock;\n', '\n', '    uint256 public periodFinish = 1621529382;\n', '\n', '    uint256 public birthDate;\n', '\n', '    uint256 public daoShare;\n', '    address public daoWallet;\n', '\n', '    bool public exitable;\n', '\n', '    StandardToken public stakedToken;\n', '    StandardToken public rewardToken;\n', '    StandardToken public yieldRewardToken;\n', '\n', '    address public oldContract;\n', '\n', '    uint256 public totalExitRewards;\n', '    uint256 public totalExitRewardsYield;\n', '\n', '    event Deposit(address user, uint256 amount, uint256 stakeType);\n', '    event Withdraw(address user, uint256 amount, uint256 stakeType);\n', '    event Exit(address user, uint256 amount, uint256 stakeType);\n', '    event Unfreeze(address user, uint256 amount, uint256 stakeType);\n', '    event EmergencyWithdraw(address user, uint256 amount);\n', '    event RewardClaimed(address user, uint256 amount, uint256 yieldAmount);\n', '\n', '    //event Int(uint256 i);\n', '\n', '    constructor (\n', '        address _stakedToken,\n', '        address _rewardToken,\n', '        address _yieldRewardToken,\n', '        uint256 _daoShare,\n', '        address _daoWallet,\n', '        address _controller,\n', '        bool _exitable,\n', '        address _oldContract\n', '    ) public {\n', '        stakedToken = StandardToken(_stakedToken);\n', '        rewardToken = StandardToken(_rewardToken);\n', '        yieldRewardToken = StandardToken(_yieldRewardToken);\n', '        controller = IController(_controller);\n', '        daoShare = _daoShare;\n', '        daoWallet = _daoWallet;\n', '        exitable = _exitable;\n', '\n', '        operator = msg.sender;\n', '        oldContract = _oldContract;\n', '        birthDate = now;\n', '    }\n', '\n', '    modifier onlyOwnerOrController(){\n', '        require(msg.sender == owner() ||\n', '            msg.sender == address(controller) ||\n', '            msg.sender == operator,\n', '            "!ownerOrController"\n', '        );\n', '        _;\n', '    }\n', '\n', '    // imports the user from old contract if\n', '    // its not imported yet\n', '    modifier importUser(address account){\n', '        if(oldContract != address(0)){\n', '            if(users[account].stakeType==0){\n', '                uint256 oldStakeType;\n', '                bool oldExit;\n', '                uint256[] memory ints = new uint256[](3);\n', '                (\n', '                    ,\n', '                    oldStakeType,\n', '                    ,,,,,,ints[2],oldExit,ints[0],,ints[1]\n', '                ) = StakeAndYieldV1(oldContract).users(account);\n', '                if(oldStakeType > 0){\n', '                    //lastClaimTime should be < birthdate of new contract\n', '                    require(ints[1] <= birthDate, "lastClaimTime > birthDate");\n', '                    users[account].exit = oldExit;\n', '                    users[account].exitStartTime = ints[0];\n', '                    users[account].lastClaimTime = ints[1];\n', '                    users[account].withdrawTime = ints[2];\n', '                    loadOldUser(account);\n', '                }\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier updateReward(address account, uint256 stakeType) {\n', '        \n', '        if(users[account].balance > 0 || users[account].withdrawable > 0\n', '            || users[account].withdrawableExit > 0\n', '        ){\n', '            stakeType = users[account].stakeType;\n', '        }\n', '        \n', '        if (account != address(0)) {\n', '            uint256 stakeEarned;\n', '            uint256 stakeSubtract;\n', '\n', '            (stakeEarned, stakeSubtract) = earned(account, STAKE);\n', '\n', '            uint256 yieldEarned;\n', '            uint256 yieldSubtract;\n', '\n', '            (yieldEarned, yieldSubtract) = earned(account, YIELD);\n', '\n', '            // sendReward(\n', '            //     account,\n', '            //     stakeEarned, stakeSubtract,\n', '            //     yieldEarned, yieldSubtract\n', '            // );\n', '\n', '            if(yieldEarned > 0){\n', '                pendingEarnedYields[account] = yieldEarned;\n', '                totalExitRewardsYield += yieldSubtract;\n', '            }\n', '            if(stakeEarned > 0){\n', '                pendingEarneds[account] = stakeEarned;\n', '                totalExitRewards += stakeSubtract;\n', '            }\n', '        }\n', '        \n', '        rewardTillNowPerToken = rewardPerToken(STAKE);\n', '        yieldRewardTillNowPerToken = rewardPerToken(YIELD);\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            users[account].paidRewardPerToken = rewardTillNowPerToken;\n', '            users[account].yieldPaidRewardPerToken = yieldRewardTillNowPerToken;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function loadOldUser(address account) private{\n', '            (\n', '                users[account].balance,\n', '                users[account].stakeType,\n', '                , //paidReward,\n', '                users[account].yieldPaidReward,\n', '                ,//paidRewardPerToken,\n', '                users[account].yieldPaidRewardPerToken,\n', '                users[account].withdrawable,\n', '                ,//withdrawableExit,\n', '                ,//withdrawTime,\n', '                ,//exit,\n', '                ,//exitStartTime,\n', '                ,//exitAmountTillNow,\n', '                //lastClaimTime\n', '            ) = StakeAndYieldV1(oldContract).users(account);\n', '    }\n', '\n', '    function setDaoWallet(address _daoWallet) public onlyOwner {\n', '        daoWallet = _daoWallet;\n', '    }\n', '\n', '    function setDaoShare(uint256 _daoShare) public onlyOwner {\n', '        daoShare = _daoShare;\n', '    }\n', '\n', '    function setExitPeriod(uint256 period) public onlyOwner {\n', '        EXIT_PERIOD = period;\n', '    }\n', '\n', '    function setOperator(address _addr) public onlyOwner{\n', '        operator = _addr;\n', '    }\n', '\n', '    function setPeriods(uint256 period, uint256 epochPeriod, uint256 _birthDate) public onlyOwner{\n', '        PERIOD = period;\n', '        EPOCH_PERIOD = epochPeriod;\n', '        birthDate = _birthDate;\n', '    }\n', '\n', '    function setRewardInfo(\n', '        uint256 _lastUpdateTime,\n', '        uint256 _rewardRate,\n', '        uint256 _rewardRateYield,\n', '\n', '        uint256 _rewardTillNowPerToken,\n', '        uint256 _yieldRewardTillNowPerToken\n', '    ) public onlyOwner{\n', '        lastUpdateTime = _lastUpdateTime;\n', '        rewardRate = _rewardRate;\n', '        rewardRateYield = _rewardRateYield;\n', '\n', '        rewardTillNowPerToken = _rewardTillNowPerToken;\n', '        yieldRewardTillNowPerToken = _yieldRewardTillNowPerToken;\n', '    }\n', '\n', '    function withdrawToBurn() public onlyOwner{\n', '        stakedToken.transfer(\n', '            msg.sender,\n', '            _totalExit\n', '        );\n', '        _totalExit = 0;\n', '    }\n', '\n', '    function earned(address account, uint256 stakeType) public view returns(uint256, uint256) {\n', '        User storage user = users[account];\n', '\n', '        uint256 paidPerToken = stakeType == STAKE ? \n', '            user.paidRewardPerToken : user.yieldPaidRewardPerToken;\n', '\n', '        uint256 amount = balanceOf(account, stakeType).mul(\n', '            rewardPerToken(stakeType).\n', '            sub(paidPerToken)\n', '        ).div(1e18);\n', '\n', '        uint256 substract = 0;\n', '        if(user.exit){\n', '            uint256 startDate = user.exitStartTime;\n', '            if(user.lastClaimTime > startDate){\n', '                startDate = user.lastClaimTime;\n', '            }\n', '            uint256 daysIn = (block.timestamp - startDate) / 1 days;\n', '            uint256 exitPeriodDays = EXIT_PERIOD/1 days;\n', '            if(daysIn > exitPeriodDays){\n', '                daysIn = exitPeriodDays;\n', '            }\n', '            substract = daysIn.mul(amount).div(exitPeriodDays).div(\n', '                exitRewardDenominator\n', '            );\n', '        }\n', '        uint256 pending = stakeType == STAKE ? \n', '            pendingEarneds[account] : pendingEarnedYields[account];\n', '        return (amount.sub(substract) + pending, substract);\n', '    }\n', '\n', '    function earned(address account) public view returns(uint256){\n', '        uint256 stakeEarned;\n', '        uint256 yieldEarned;\n', '        uint256 tmp;\n', '        (stakeEarned, tmp) = earned(account, STAKE);\n', '        (yieldEarned, tmp) = earned(account, YIELD);\n', '\n', '        return stakeEarned + yieldEarned;\n', '    }\n', '\n', '    function deposit(uint256 amount, uint256 stakeType, bool _exit) public {\n', '        depositFor(msg.sender, amount, stakeType, _exit);\n', '    }\n', '\n', '    function depositFor(address _user, uint256 amount, uint256 stakeType, bool _exit)\n', '        \n', '        importUser(_user)\n', '\n', '        updateReward(_user, stakeType)\n', '        public {\n', '        \n', '        require(stakeType==STAKE || stakeType ==YIELD || stakeType==BOTH, "Invalid stakeType");\n', ' \n', '        User storage user = users[_user];\n', '        require((user.balance == 0 && user.withdrawable==0 && user.withdrawableExit == 0)|| user.stakeType==stakeType, "Invalid Stake Type");\n', '\n', '        if(user.exit || (user.balance == 0 && _exit)){\n', '            updateExit(_user);\n', '        }else if(user.balance == 0 && !_exit){\n', '            user.exit = false;\n', '        }\n', '\n', '        stakedToken.transferFrom(address(msg.sender), address(this), amount);\n', '\n', '        user.stakeType = stakeType;\n', '        user.balance = user.balance.add(amount);\n', '\n', '        if(stakeType == STAKE){\n', '            _totalSupply = _totalSupply.add(amount);\n', '        }else if(stakeType == YIELD){\n', '            _totalSupplyYield = _totalSupplyYield.add(amount);\n', '        }else{\n', '            _totalSupplyYield = _totalSupplyYield.add(amount);\n', '            _totalSupply = _totalSupply.add(amount);\n', '        }\n', '        \n', '        emit Deposit(_user, amount, stakeType);\n', '    }\n', '\n', '    function updateExit(address _user) private{\n', '        require(exitable, "Not exitable");\n', '        User storage user = users[_user];\n', '        user.exit = true;\n', '        user.exitAmountTillNow = exitBalance(_user);\n', '        user.exitStartTime = block.timestamp;\n', '    }\n', '\n', '    function sendReward(address userAddress, \n', '        uint256 stakeEarned, uint256 stakeSubtract, \n', '        uint256 yieldEarned, uint256 yieldSubtract\n', '    ) private {\n', '        User storage user = users[userAddress];\n', '        uint256 _daoShare = stakeEarned.mul(daoShare).div(1 ether);\n', '        uint256 _yieldDaoShare = yieldEarned.mul(daoShare).div(1 ether);\n', '\n', '        if(stakeEarned > 0){\n', '            rewardToken.transfer(userAddress, stakeEarned.sub(_daoShare));\n', '            if(_daoShare > 0)\n', '                rewardToken.transfer(daoWallet, _daoShare);\n', '            user.paidReward = user.paidReward.add(\n', '                stakeEarned\n', '            );\n', '        }\n', '\n', '        if(yieldEarned > 0){\n', '            yieldRewardToken.transfer(userAddress, yieldEarned.sub(_yieldDaoShare));\n', '            \n', '            if(_yieldDaoShare > 0)\n', '                yieldRewardToken.transfer(daoWallet, _yieldDaoShare);   \n', '            \n', '            user.yieldPaidReward = user.yieldPaidReward.add(\n', '                yieldEarned\n', '            );\n', '        }\n', '        \n', '        if(yieldEarned > 0 || stakeEarned > 0){\n', '            emit RewardClaimed(userAddress, stakeEarned, yieldEarned);\n', '        }\n', '\n', '        if(stakeSubtract > 0){\n', '            //notifyRewardAmountInternal(stakeSubtract, STAKE);\n', '            totalExitRewards += stakeSubtract;\n', '        }\n', '        if(yieldSubtract > 0){\n', '            //notifyRewardAmountInternal(yieldSubtract, YIELD);\n', '            totalExitRewardsYield += yieldSubtract;\n', '        }\n', '        user.lastClaimTime = block.timestamp;\n', '        pendingEarneds[userAddress] = 0;\n', '        pendingEarnedYields[userAddress] = 0;\n', '    }\n', '\n', '    function sendExitToken(address _user, uint256 amount) private {\n', '        controller.sendExitToken(\n', '            _user,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function claim() \n', '        importUser(msg.sender)\n', '        updateReward(msg.sender, 0) public {\n', '        \n', '        claimInternal();\n', '    }\n', '\n', '    function claimInternal() private{\n', '        uint256 stakeEarned;\n', '        uint256 stakeSubtract;\n', '\n', '        (stakeEarned, stakeSubtract) = earned(msg.sender, STAKE);\n', '\n', '        uint256 yieldEarned;\n', '        uint256 yieldSubtract;\n', '\n', '        (yieldEarned, yieldSubtract) = earned(msg.sender, YIELD);\n', '\n', '        sendReward(\n', '            msg.sender,\n', '            stakeEarned, stakeSubtract,\n', '            yieldEarned, yieldSubtract\n', '        );\n', '    }\n', '\n', '    function setExit(bool _val) \n', '        importUser(msg.sender) \n', '        updateReward(msg.sender, 0) public{\n', '        \n', '        User storage user = users[msg.sender];\n', '        require(user.exit != _val, "same exit status");\n', '        require(user.balance > 0, "0 balance");\n', '\n', '        user.exit = _val;\n', '        user.exitStartTime = now;\n', '        user.exitAmountTillNow = 0;\n', '    }\n', '\n', '    function unfreezeAllAndClaim() public{\n', '        unfreeze(users[msg.sender].balance);\n', '        claimInternal();\n', '    }\n', '\n', '    function unfreeze(uint256 amount) \n', '        importUser(msg.sender) \n', '        updateReward(msg.sender, 0) public {\n', '        User storage user = users[msg.sender];\n', '        uint256 stakeType = user.stakeType;\n', '\n', '        require(\n', '            user.balance >= amount,\n', '            "withdraw > deposit");\n', '\n', '        if (amount > 0) {\n', '            uint256 exitAmount = exitBalance(msg.sender);\n', '            uint256 remainingExit = 0;\n', '            if(exitAmount > amount){\n', '                remainingExit = exitAmount.sub(amount);\n', '                exitAmount = amount;\n', '            }\n', '\n', '            if(user.exit){\n', '                user.exitAmountTillNow = remainingExit;\n', '                user.exitStartTime = now;\n', '            }\n', '\n', '            uint256 tokenAmount = amount.sub(exitAmount);\n', '            user.balance = user.balance.sub(amount);\n', '            if(stakeType == STAKE){\n', '                _totalSupply = _totalSupply.sub(amount);\n', '            }else if (stakeType == YIELD){\n', '                _totalSupplyYield = _totalSupplyYield.sub(amount);\n', '            }else{\n', '                _totalSupply = _totalSupply.sub(amount);\n', '                _totalSupplyYield = _totalSupplyYield.sub(amount);\n', '            }\n', '\n', '            if(allowEmergencyWithdraw || stakeType==STAKE){\n', '                if(tokenAmount > 0){\n', '                    stakedToken.transfer(address(msg.sender), tokenAmount);\n', '                    emit Withdraw(msg.sender, tokenAmount, stakeType);\n', '                }\n', '                if(exitAmount > 0){\n', '                    sendExitToken(msg.sender, exitAmount);\n', '                    emit Exit(msg.sender, exitAmount, stakeType);\n', '                }\n', '            }else{\n', '                user.withdrawable += tokenAmount;\n', '                user.withdrawableExit += exitAmount;\n', '\n', '                user.withdrawTime = now;\n', '\n', '                _totalYieldWithdrawed += amount;\n', '                emit Unfreeze(msg.sender, amount, stakeType);\n', '            }\n', '            _totalExit += exitAmount;\n', '        }\n', '    }\n', '\n', '    function withdrawUnfreezed() \n', '        importUser(msg.sender) \n', '        public{\n', '        User storage user = users[msg.sender];\n', '        require(user.withdrawable > 0 || user.withdrawableExit > 0, \n', '            "amount is 0");\n', '        \n', '        uint256 nextEpochTime = IStrategy(\n', '            controller.getStrategy(address(this))\n', '        ).getNextEpochTime();\n', '\n', '        require(nextEpochTime.sub(PERIOD).sub(EPOCH_PERIOD) >=  user.withdrawTime ||\n', '            allowEmergencyWithdraw, "not withdrawable yet");\n', '\n', '        if(user.withdrawable > 0){\n', '            stakedToken.transfer(address(msg.sender), user.withdrawable);\n', '            emit Withdraw(msg.sender, user.withdrawable, YIELD);\n', '            user.withdrawable = 0;\n', '        }\n', '\n', '        if(user.withdrawableExit > 0){\n', '            sendExitToken(msg.sender, user.withdrawableExit);\n', '            emit Exit(msg.sender, user.withdrawableExit, YIELD);\n', '            user.withdrawableExit = 0;    \n', '        }\n', '    }\n', '\n', '    function notifyRewardAmount(uint256 reward, uint256 stakeType) public onlyOwnerOrController{\n', '        notifyRewardAmountInternal(reward, stakeType);\n', '    }\n', '\n', '    // just Controller and admin should be able to call this\n', '    function notifyRewardAmountInternal(uint256 reward, uint256 stakeType) private  updateReward(address(0), stakeType){\n', '        if (block.timestamp >= periodFinish) {\n', '            if(stakeType == STAKE){\n', '                rewardRate = reward.div(PERIOD);    \n', '            }else{\n', '                rewardRateYield = reward.div(PERIOD);\n', '            }\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            if(stakeType == STAKE){\n', '                uint256 leftover = remaining.mul(rewardRate);\n', '                rewardRate = reward.add(leftover).div(PERIOD);    \n', '            }else{\n', '                uint256 leftover = remaining.mul(rewardRateYield);\n', '                rewardRateYield = reward.add(leftover).div(PERIOD);\n', '            }\n', '            \n', '        }\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(PERIOD);\n', '    }\n', '\n', '    function balanceOf(address account, uint256 stakeType) public view returns(uint256) {\n', '        User storage user = users[account];\n', '        if(user.stakeType == BOTH || user.stakeType==stakeType)\n', '            return user.balance;\n', '        return 0;\n', '    }\n', '\n', '    function exitBalance(address account) public view returns(uint256){\n', '        User storage user = users[account];\n', '        if(!user.exit || user.balance==0){\n', '            return 0;\n', '        }\n', '        uint256 portion = (block.timestamp - user.exitStartTime).mul(1 ether).div(EXIT_PERIOD);\n', '        portion = portion >= 1 ether ? 1 ether : portion;\n', '\n', '        uint256 notExitedBalance = user.balance.sub(user.exitAmountTillNow);\n', '        \n', '        uint256 balance = user.exitAmountTillNow.add(notExitedBalance.mul(portion).div(1 ether));\n', '        return balance > user.balance ? user.balance : balance;\n', '    }\n', '\n', '    function totalYieldWithdrawed() public view returns(uint256) {\n', '        return _totalYieldWithdrawed;\n', '    }\n', '\n', '    function totalExit() public view returns(uint256) {\n', '        return _totalExit;\n', '    }\n', '\n', '    function totalSupply(uint256 stakeType) public view returns(uint256) {\n', '        return stakeType == STAKE ? _totalSupply : _totalSupplyYield;\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns(uint256) {\n', '        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n', '    }\n', '\n', '    function rewardPerToken(uint256 stakeType) public view returns(uint256) {\n', '        uint256 supply = stakeType == STAKE ? _totalSupply : _totalSupplyYield;        \n', '        if (supply == 0) {\n', '            return stakeType == STAKE ? rewardTillNowPerToken : yieldRewardTillNowPerToken;\n', '        }\n', '        if(stakeType == STAKE){\n', '            return rewardTillNowPerToken.add(\n', '                lastTimeRewardApplicable().sub(lastUpdateTime)\n', '                .mul(rewardRate).mul(1e18).div(_totalSupply)\n', '            );\n', '        }else{\n', '            return yieldRewardTillNowPerToken.add(\n', '                lastTimeRewardApplicable().sub(lastUpdateTime).\n', '                mul(rewardRateYield).mul(1e18).div(_totalSupplyYield)\n', '            );\n', '        }\n', '    }\n', '\n', '    function getRewardToken() public view returns(address){\n', '        return address(rewardToken);\n', '    }\n', '\n', '    function userInfo(address account) public view returns(\n', '        uint256[15] memory numbers,\n', '\n', '        address rewardTokenAddress,\n', '        address stakedTokenAddress,\n', '        address controllerAddress,\n', '        address strategyAddress,\n', '        bool exit\n', '    ){\n', '        User storage user = users[account];\n', '        numbers[0] = user.balance;\n', '        numbers[1] = user.stakeType;\n', '        numbers[2] = user.withdrawTime;\n', '        numbers[3] = user.withdrawable;\n', '        numbers[4] = _totalSupply;\n', '        numbers[5] = _totalSupplyYield;\n', '        numbers[6] = stakedToken.balanceOf(address(this));\n', '        \n', '        numbers[7] = rewardPerToken(STAKE);\n', '        numbers[8] = rewardPerToken(YIELD);\n', '        \n', '        numbers[9] = earned(account);\n', '\n', '        numbers[10] = user.exitStartTime;\n', '        numbers[11] = exitBalance(account);\n', '\n', '        numbers[12] = user.withdrawable;\n', '        numbers[13] = user.withdrawableExit;\n', '\n', '        rewardTokenAddress = address(rewardToken);\n', '        stakedTokenAddress = address(stakedToken);\n', '        controllerAddress = address(controller);\n', '\n', '        exit = user.exit;\n', '\n', '        strategyAddress = controller.getStrategy(address(this));\n', '        numbers[14] = IStrategy(\n', '            controller.getStrategy(address(this))\n', '        ).getNextEpochTime();\n', '    }\n', '\n', '    function setController(address _controller) public onlyOwner{\n', '        if(_controller != address(0)){\n', '            controller = IController(_controller);\n', '        }\n', '    }\n', '\n', '    function emergencyWithdrawFor(address _user) public onlyOwner{\n', '        User storage user = users[_user];\n', '\n', '        uint256 amount = user.balance;\n', '\n', '        stakedToken.transfer(_user, amount);\n', '\n', '        emit EmergencyWithdraw(_user, amount);\n', '\n', '        //add other fields\n', '        user.balance = 0;\n', '        user.paidReward = 0;\n', '        user.yieldPaidReward = 0;\n', '    }\n', '\n', '    function setAllowEmergencyWithdraw(bool _val) public onlyOwner{\n', '        allowEmergencyWithdraw = _val;\n', '    }\n', '\n', '    function setExitable(bool _val) public onlyOwner{\n', '        exitable = _val;\n', '    }\n', '\n', '    function setExitRewardDenominator(uint256 _val) public onlyOwner{\n', '        exitRewardDenominator = _val;\n', '    }\n', '\n', '    function emergencyWithdrawETH(uint256 amount, address addr) public onlyOwner{\n', '        require(addr != address(0));\n', '        payable(addr).transfer(amount);\n', '    }\n', '\n', '    function emergencyWithdrawERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\n', '        StandardToken(_tokenAddr).transfer(_to, _amount);\n', '    }\n', '}\n', '\n', '\n', '//Dar panah khoda']