['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// This governance contract calculcates total STBZ held by a particular address\n', '// It first gets the STBZ tokens held in wallet\n', '// Then STBZ held in staking pool\n', '// Then LP tokens held in wallet to calculate STBZ held by user\n', '// Finally LP tokens held in operator contract pool\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'interface Operator {\n', '    function poolBalance(uint256, address) external view returns (uint256);\n', '}\n', '\n', 'interface StakingPool {\n', '    function poolBalance(address) external view returns (uint256);\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'contract StabilizeGovernanceCalculator {\n', '    \n', '    address constant operatorAddress = address(0xEe9156C93ebB836513968F92B4A67721f3cEa08a);\n', '    address constant stbzAddress = address(0xB987D48Ed8f2C468D52D6405624EADBa5e76d723);\n', '    address constant uniLpAddress = address(0xDB28312a8d26D59978D9B86cA185707B1A26725b);\n', '    address constant stakingAddress = address(0x8c17bE13e034f7fa2a6496bC83B6010be6305204);\n', '    \n', '    function calculateTotalSTBZ(address _address) external view returns (uint256) {\n', '        IERC20 stbz = IERC20(stbzAddress);\n', '        uint256 mySTBZ = stbz.balanceOf(_address); // First get the token balance of STBZ in the wallet\n', '        mySTBZ = mySTBZ + StakingPool(stakingAddress).poolBalance(_address); // Get STBZ being staked\n', '        IERC20 lp = IERC20(uniLpAddress);\n', '        uint256 myLP = lp.balanceOf(_address); // Get amount of LP in wallet\n', '        myLP = myLP + Operator(operatorAddress).poolBalance(0, _address);\n', '        // Now we have our LP balance and must calculate how much STBZ we have in it\n', '        uint256 stbzInLP = stbz.balanceOf(uniLpAddress);\n', '        stbzInLP = stbzInLP * myLP / lp.totalSupply();\n', '        return mySTBZ + stbzInLP;\n', '    }\n', '\n', '}']