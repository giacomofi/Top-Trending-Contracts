['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-15\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC20Sumswap.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IERC20Sumswap{\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IAccessControl.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IAccessControl {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '}\n', '\n', '// File: contracts/TokenIssue.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'interface ISumma {\n', '    function issue(address addr, uint256 amount) external;\n', '}\n', '\n', 'contract TokenIssue is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant INIT_MINE_SUPPLY = 32000000 * 10 ** 18;\n', '\n', '    uint256 public issuedAmount = INIT_MINE_SUPPLY;\n', '\n', '    uint256 public surplusAmount = 2.88 * 10 ** 8 * 10 ** 18;\n', '\n', '    uint256 public TOTAL_AMOUNT = 3.2 * 10 ** 8 * 10 ** 18;\n', '\n', '    uint256 public constant MONTH_SECONDS = 225 * 24 * 30;\n', '\n', '    bytes32 public constant TRANS_ROLE = keccak256("TRANS_ROLE");\n', '\n', '    // utc 2021-05-01\n', '    //    uint256 public startIssueTime = 0;\n', '    uint256 public startIssueTime = 0;\n', '\n', '    address public summa;\n', '\n', '    address public summaPri;\n', '\n', '    uint256[] public issueInfo;\n', '\n', '    constructor(address _summa,address _summaPri) public {\n', '        summa = _summa;\n', '        summaPri = _summaPri;\n', '        initialize();\n', '    }\n', '\n', '    function initialize() private {\n', '        issueInfo.push(1920000 * 10 ** 18);\n', '        issueInfo.push(2035200 * 10 ** 18);\n', '        issueInfo.push(2157312.0000000005 * 10 ** 18);\n', '        issueInfo.push(2286750.72 * 10 ** 18);\n', '        issueInfo.push(2423955.763200001 * 10 ** 18);\n', '        issueInfo.push(2569393.108992 * 10 ** 18);\n', '        issueInfo.push(2723556.6955315205 * 10 ** 18);\n', '        issueInfo.push(2886970.0972634126 * 10 ** 18);\n', '        issueInfo.push(3060188.303099217 * 10 ** 18);\n', '        issueInfo.push(3243799.6012851703 * 10 ** 18);\n', '        issueInfo.push(3438427.577362281 * 10 ** 18);\n', '        issueInfo.push(3644733.232004018 * 10 ** 18);\n', '        issueInfo.push(2575611.4839495043 * 10 ** 18);\n', '        issueInfo.push(2678635.943307485 * 10 ** 18);\n', '        issueInfo.push(2785781.3810397848 * 10 ** 18);\n', '        issueInfo.push(2897212.636281376 * 10 ** 18);\n', '        issueInfo.push(3013101.141732631 * 10 ** 18);\n', '        issueInfo.push(3133625.187401936 * 10 ** 18);\n', '        issueInfo.push(3258970.1948980135 * 10 ** 18);\n', '        issueInfo.push(3389329.0026939344 * 10 ** 18);\n', '        issueInfo.push(3524902.1628016927 * 10 ** 18);\n', '        issueInfo.push(3665898.24931376 * 10 ** 18);\n', '        issueInfo.push(3812534.17928631 * 10 ** 18);\n', '        issueInfo.push(3965035.546457763 * 10 ** 18);\n', '        issueInfo.push(2061818.484158036 * 10 ** 18);\n', '        issueInfo.push(2103054.8538411967 * 10 ** 18);\n', '        issueInfo.push(2145115.9509180207 * 10 ** 18);\n', '        issueInfo.push(2188018.269936382 * 10 ** 18);\n', '        issueInfo.push(2231778.6353351087 * 10 ** 18);\n', '        issueInfo.push(2276414.208041811 * 10 ** 18);\n', '        issueInfo.push(2321942.4922026475 * 10 ** 18);\n', '        issueInfo.push(2368381.3420467 * 10 ** 18);\n', '        issueInfo.push(2415748.9688876346 * 10 ** 18);\n', '        issueInfo.push(2464063.948265387 * 10 ** 18);\n', '        issueInfo.push(2513345.227230695 * 10 ** 18);\n', '        issueInfo.push(2563612.131775309 * 10 ** 18);\n', '        issueInfo.push(2614884.3744108155 * 10 ** 18);\n', '        issueInfo.push(2667182.061899032 * 10 ** 18);\n', '        issueInfo.push(2720525.703137012 * 10 ** 18);\n', '        issueInfo.push(2774936.2171997526 * 10 ** 18);\n', '        issueInfo.push(2830434.941543747 * 10 ** 18);\n', '        issueInfo.push(2887043.6403746223 * 10 ** 18);\n', '        issueInfo.push(2944784.513182115 * 10 ** 18);\n', '        issueInfo.push(3003680.2034457573 * 10 ** 18);\n', '        issueInfo.push(3063753.807514673 * 10 ** 18);\n', '        issueInfo.push(3125028.883664966 * 10 ** 18);\n', '        issueInfo.push(3187529.461338266 * 10 ** 18);\n', '        issueInfo.push(3251280.0505650314 * 10 ** 18);\n', '        issueInfo.push(1658152.825788165 * 10 ** 18);\n', '        issueInfo.push(1674734.3540460467 * 10 ** 18);\n', '        issueInfo.push(1691481.6975865073 * 10 ** 18);\n', '        issueInfo.push(1708396.5145623726 * 10 ** 18);\n', '        issueInfo.push(1725480.479707996 * 10 ** 18);\n', '        issueInfo.push(1742735.2845050762 * 10 ** 18);\n', '        issueInfo.push(1760162.6373501269 * 10 ** 18);\n', '        issueInfo.push(1777764.263723628 * 10 ** 18);\n', '        issueInfo.push(1795541.9063608644 * 10 ** 18);\n', '        issueInfo.push(1813497.3254244728 * 10 ** 18);\n', '        issueInfo.push(1831632.2986787176 * 10 ** 18);\n', '        issueInfo.push(1849948.621665505 * 10 ** 18);\n', '        issueInfo.push(1868448.10788216 * 10 ** 18);\n', '        issueInfo.push(1887132.5889609817 * 10 ** 18);\n', '        issueInfo.push(1906003.9148505912 * 10 ** 18);\n', '        issueInfo.push(1925063.9539990975 * 10 ** 18);\n', '        issueInfo.push(1944314.5935390887 * 10 ** 18);\n', '        issueInfo.push(1963757.7394744793 * 10 ** 18);\n', '        issueInfo.push(1983395.316869224 * 10 ** 18);\n', '        issueInfo.push(2003229.2700379163 * 10 ** 18);\n', '        issueInfo.push(2023261.5627382956 * 10 ** 18);\n', '        issueInfo.push(2043494.1783656788 * 10 ** 18);\n', '        issueInfo.push(2063929.1201493354 * 10 ** 18);\n', '        issueInfo.push(2084568.4113508288 * 10 ** 18);\n', '        issueInfo.push(2105414.0954643367 * 10 ** 18);\n', '        issueInfo.push(2126468.23641898 * 10 ** 18);\n', '        issueInfo.push(2147732.91878317 * 10 ** 18);\n', '        issueInfo.push(2169210.247971002 * 10 ** 18);\n', '        issueInfo.push(2190902.350450712 * 10 ** 18);\n', '        issueInfo.push(2212811.373955219 * 10 ** 18);\n', '        issueInfo.push(2234939.4876947715 * 10 ** 18);\n', '        issueInfo.push(2257288.882571719 * 10 ** 18);\n', '        issueInfo.push(2279861.7713974365 * 10 ** 18);\n', '        issueInfo.push(2302660.389111411 * 10 ** 18);\n', '        issueInfo.push(2325686.9930025246 * 10 ** 18);\n', '        issueInfo.push(2348943.8629325503 * 10 ** 18);\n', '        issueInfo.push(1897946.6412495002 * 10 ** 18);\n', '        issueInfo.push(1913130.2143794964 * 10 ** 18);\n', '        issueInfo.push(1928435.2560945326 * 10 ** 18);\n', '        issueInfo.push(1943862.7381432885 * 10 ** 18);\n', '        issueInfo.push(1959413.6400484347 * 10 ** 18);\n', '        issueInfo.push(1975088.9491688225 * 10 ** 18);\n', '        issueInfo.push(1990889.6607621727 * 10 ** 18);\n', '        issueInfo.push(2006816.7780482706 * 10 ** 18);\n', '        issueInfo.push(2022871.3122726567 * 10 ** 18);\n', '        issueInfo.push(2039054.282770838 * 10 ** 18);\n', '        issueInfo.push(2055366.7170330046 * 10 ** 18);\n', '        issueInfo.push(2071809.6507692689 * 10 ** 18);\n', '        issueInfo.push(2088384.1279754227 * 10 ** 18);\n', '        issueInfo.push(2105091.200999226 * 10 ** 18);\n', '        issueInfo.push(2121931.93060722 * 10 ** 18);\n', '        issueInfo.push(2138907.386052078 * 10 ** 18);\n', '        issueInfo.push(2156018.645140494 * 10 ** 18);\n', '        issueInfo.push(2173266.794301619 * 10 ** 18);\n', '        issueInfo.push(2190652.928656032 * 10 ** 18);\n', '        issueInfo.push(2208178.15208528 * 10 ** 18);\n', '        issueInfo.push(2225843.5773019614 * 10 ** 18);\n', '        issueInfo.push(2243650.3259203774 * 10 ** 18);\n', '        issueInfo.push(2261599.528527741 * 10 ** 18);\n', '        issueInfo.push(2279692.324755963 * 10 ** 18);\n', '        issueInfo.push(2297929.86335401 * 10 ** 18);\n', '        issueInfo.push(2316313.302260842 * 10 ** 18);\n', '        issueInfo.push(2334843.8086789288 * 10 ** 18);\n', '        issueInfo.push(2353522.559148361 * 10 ** 18);\n', '        issueInfo.push(2372350.7396215475 * 10 ** 18);\n', '        issueInfo.push(2391329.54553852 * 10 ** 18);\n', '        issueInfo.push(2410460.1819028277 * 10 ** 18);\n', '        issueInfo.push(2429743.8633580506 * 10 ** 18);\n', '        issueInfo.push(2449181.8142649154 * 10 ** 18);\n', '        issueInfo.push(2468775.2687790347 * 10 ** 18);\n', '        issueInfo.push(2488525.470929267 * 10 ** 18);\n', '        issueInfo.push(2508433.674696701 * 10 ** 18);\n', '        issueInfo.push(2528501.1440942744 * 10 ** 18);\n', '        issueInfo.push(2548729.153247029 * 10 ** 18);\n', '    }\n', '\n', '    function issueInfoLength() external view returns (uint256) {\n', '        return issueInfo.length;\n', '    }\n', '\n', '    function currentCanIssueAmount() public view returns (uint256){\n', '        uint256 currentTime = block.number;\n', '        if (currentTime <= startIssueTime || startIssueTime <= 0) {\n', '            return INIT_MINE_SUPPLY.sub(issuedAmount);\n', '        }\n', '        uint256 timeInterval = currentTime - startIssueTime;\n', '        uint256 monthIndex = timeInterval.div(MONTH_SECONDS);\n', '        if (monthIndex < 1) {\n', '            return issueInfo[monthIndex].div(MONTH_SECONDS).mul(timeInterval).add(INIT_MINE_SUPPLY).sub(issuedAmount);\n', '        } else if (monthIndex < issueInfo.length) {\n', '            uint256 tempTotal = INIT_MINE_SUPPLY;\n', '            for (uint256 j = 0; j < monthIndex; j++) {\n', '                tempTotal = tempTotal.add(issueInfo[j]);\n', '            }\n', '            uint256 calcAmount = timeInterval.sub(monthIndex.mul(MONTH_SECONDS)).mul(issueInfo[monthIndex].div(MONTH_SECONDS)).add(tempTotal);\n', '            if (calcAmount > TOTAL_AMOUNT) {\n', '                return TOTAL_AMOUNT.sub(issuedAmount);\n', '            }\n', '            return calcAmount.sub(issuedAmount);\n', '        } else {\n', '            return TOTAL_AMOUNT.sub(issuedAmount);\n', '        }\n', '    }\n', '\n', '    function currentBlockCanIssueAmount() public view returns (uint256){\n', '        uint256 currentTime = block.number;\n', '        if (currentTime <= startIssueTime || startIssueTime <= 0) {\n', '            return 0;\n', '        }\n', '        uint256 timeInterval = currentTime - startIssueTime;\n', '        uint256 monthIndex = timeInterval.div(MONTH_SECONDS);\n', '        if (monthIndex < 1) {\n', '            return issueInfo[monthIndex].div(MONTH_SECONDS);\n', '        } else if (monthIndex < issueInfo.length) {\n', '            uint256 tempTotal = INIT_MINE_SUPPLY;\n', '            for (uint256 j = 0; j < monthIndex; j++) {\n', '                tempTotal = tempTotal.add(issueInfo[j]);\n', '            }\n', '            uint256 actualBlockIssue = issueInfo[monthIndex].div(MONTH_SECONDS);\n', '            uint256 calcAmount = timeInterval.sub(monthIndex.mul(MONTH_SECONDS)).mul(issueInfo[monthIndex].div(MONTH_SECONDS)).add(tempTotal);\n', '            if (calcAmount > TOTAL_AMOUNT) {\n', '                if (calcAmount.sub(TOTAL_AMOUNT) <= actualBlockIssue) {\n', '                    return actualBlockIssue.sub(calcAmount.sub(TOTAL_AMOUNT));\n', '                }\n', '                return 0;\n', '            }\n', '            return actualBlockIssue;\n', '        } else {\n', '            return 0;\n', '        }\n', '\n', '    }\n', '\n', '    function issueAnyOne() public {\n', '        uint256 currentCanIssue = currentCanIssueAmount();\n', '        if (currentCanIssue > 0) {\n', '            issuedAmount = issuedAmount.add(currentCanIssue);\n', '            surplusAmount = surplusAmount.sub(currentCanIssue);\n', '            ISumma(summa).issue(address(this), currentCanIssue);\n', '        }\n', '    }\n', '\n', '    function withdrawETH() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function setStart() public onlyOwner {\n', '        if (startIssueTime <= 0) {\n', '            startIssueTime = block.number;\n', '        }\n', '    }\n', '\n', '    function transByContract(address to,uint256 amount) public{\n', '        require(IAccessControl(summaPri).hasRole(TRANS_ROLE, _msgSender()), "Caller is not a transfer role");\n', '        if(amount > IERC20Sumswap(summa).balanceOf(address(this))){\n', '            issueAnyOne();\n', '        }\n', '        require(amount <= IERC20Sumswap(summa).balanceOf(address(this)),"not enough,please check code");\n', '        IERC20Sumswap(summa).transfer(to,amount);\n', '    }\n', '\n', '    function withdrawToken(address addr) public onlyOwner {\n', '        IERC20Sumswap(addr).transfer(_msgSender(), IERC20Sumswap(addr).balanceOf(address(this)));\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '}']