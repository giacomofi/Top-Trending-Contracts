['// SPDX-License-Identifier: MIT\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./IERC20.sol";\n', '\n', 'import "./ABDKMath64x64.sol";\n', 'import "./IAssimilator.sol";\n', 'import "./IOracle.sol";\n', '\n', 'contract UsdcToUsdAssimilator is IAssimilator {\n', '    using ABDKMath64x64 for int128;\n', '    using ABDKMath64x64 for uint256;\n', '\n', '    IOracle private constant oracle = IOracle(0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6);\n', '    IERC20 private constant usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '\n', '    // solhint-disable-next-line\n', '    constructor() {}\n', '\n', '    // solhint-disable-next-line\n', '    function getRate() public view override returns (uint256) {\n', '        return uint256(oracle.latestAnswer());\n', '    }\n', '\n', '    function intakeRawAndGetBalance(uint256 _amount) external override returns (int128 amount_, int128 balance_) {\n', '        bool _success = usdc.transferFrom(msg.sender, address(this), _amount);\n', '\n', '        require(_success, "Curve/USDC-transfer-from-failed");\n', '\n', '        uint256 _balance = usdc.balanceOf(address(this));\n', '\n', '        uint256 _rate = getRate();\n', '\n', '        balance_ = ((_balance * _rate) / 1e8).divu(1e6);\n', '\n', '        amount_ = ((_amount * _rate) / 1e8).divu(1e6);\n', '    }\n', '\n', '    function intakeRaw(uint256 _amount) external override returns (int128 amount_) {\n', '        bool _success = usdc.transferFrom(msg.sender, address(this), _amount);\n', '\n', '        require(_success, "Curve/USDC-transfer-from-failed");\n', '\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = ((_amount * _rate) / 1e8).divu(1e6);\n', '    }\n', '\n', '    function intakeNumeraire(int128 _amount) external override returns (uint256 amount_) {\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = (_amount.mulu(1e6) * 1e8) / _rate;\n', '\n', '        bool _success = usdc.transferFrom(msg.sender, address(this), amount_);\n', '\n', '        require(_success, "Curve/USDC-transfer-from-failed");\n', '    }\n', '\n', '    function intakeNumeraireLPRatio(\n', '        uint256,\n', '        uint256,\n', '        address,\n', '        int128 _amount\n', '    ) external override returns (uint256 amount_) {\n', '        amount_ = _amount.mulu(1e6);\n', '\n', '        bool _success = usdc.transferFrom(msg.sender, address(this), amount_);\n', '\n', '        require(_success, "Curve/USDC-transfer-from-failed");\n', '    }\n', '\n', '    function outputRawAndGetBalance(address _dst, uint256 _amount)\n', '        external\n', '        override\n', '        returns (int128 amount_, int128 balance_)\n', '    {\n', '        uint256 _rate = getRate();\n', '\n', '        uint256 _usdcAmount = ((_amount * _rate) / 1e8);\n', '\n', '        bool _success = usdc.transfer(_dst, _usdcAmount);\n', '\n', '        require(_success, "Curve/USDC-transfer-failed");\n', '\n', '        uint256 _balance = usdc.balanceOf(address(this));\n', '\n', '        amount_ = _usdcAmount.divu(1e6);\n', '\n', '        balance_ = ((_balance * _rate) / 1e8).divu(1e6);\n', '    }\n', '\n', '    function outputRaw(address _dst, uint256 _amount) external override returns (int128 amount_) {\n', '        uint256 _rate = getRate();\n', '\n', '        uint256 _usdcAmount = (_amount * _rate) / 1e8;\n', '\n', '        bool _success = usdc.transfer(_dst, _usdcAmount);\n', '\n', '        require(_success, "Curve/USDC-transfer-failed");\n', '\n', '        amount_ = _usdcAmount.divu(1e6);\n', '    }\n', '\n', '    function outputNumeraire(address _dst, int128 _amount) external override returns (uint256 amount_) {\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = (_amount.mulu(1e6) * 1e8) / _rate;\n', '\n', '        bool _success = usdc.transfer(_dst, amount_);\n', '\n', '        require(_success, "Curve/USDC-transfer-failed");\n', '    }\n', '\n', '    function viewRawAmount(int128 _amount) external view override returns (uint256 amount_) {\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = (_amount.mulu(1e6) * 1e8) / _rate;\n', '    }\n', '\n', '    function viewRawAmountLPRatio(\n', '        uint256,\n', '        uint256,\n', '        address,\n', '        int128 _amount\n', '    ) external pure override returns (uint256 amount_) {\n', '        amount_ = _amount.mulu(1e6);\n', '    }\n', '\n', '    function viewNumeraireAmount(uint256 _amount) external view override returns (int128 amount_) {\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = ((_amount * _rate) / 1e8).divu(1e6);\n', '    }\n', '\n', '    function viewNumeraireBalance(address _addr) public view override returns (int128 balance_) {\n', '        uint256 _rate = getRate();\n', '\n', '        uint256 _balance = usdc.balanceOf(_addr);\n', '\n', '        if (_balance <= 0) return ABDKMath64x64.fromUInt(0);\n', '\n', '        balance_ = ((_balance * _rate) / 1e8).divu(1e6);\n', '    }\n', '\n', '    // views the numeraire value of the current balance of the reserve wrt to USD\n', '    // since this is already the USD assimlator, the ratio is just 1\n', '    function viewNumeraireBalanceLPRatio(\n', '        uint256,\n', '        uint256,\n', '        address _addr\n', '    ) external view override returns (int128 balance_) {\n', '        uint256 _balance = usdc.balanceOf(_addr);\n', '\n', '        return _balance.divu(1e6);\n', '    }\n', '\n', '    function viewNumeraireAmountAndBalance(address _addr, uint256 _amount)\n', '        external\n', '        view\n', '        override\n', '        returns (int128 amount_, int128 balance_)\n', '    {\n', '        uint256 _rate = getRate();\n', '\n', '        amount_ = ((_amount * _rate) / 1e8).divu(1e6);\n', '\n', '        uint256 _balance = usdc.balanceOf(_addr);\n', '\n', '        balance_ = ((_balance * _rate) / 1e8).divu(1e6);\n', '    }\n', '}']