['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library Constants {\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant _launchSupply = 60450 * 10**9;\n', '    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\n', '\n', '    uint256 private constant _baseExpansionFactor = 100;\n', '    uint256 private constant _baseContractionFactor = 100;\n', '    uint256 private constant _baseUtilityFee = 50;\n', '    uint256 private constant _baseContractionCap = 1000;\n', '\n', '    uint256 private constant _stabilizerFee = 250;\n', '    uint256 private constant _stabilizationLowerBound = 50;\n', '    uint256 private constant _stabilizationLowerReset = 75;\n', '    uint256 private constant _stabilizationUpperBound = 150;\n', '    uint256 private constant _stabilizationUpperReset = 125;\n', '    uint256 private constant _stabilizePercent = 10;\n', '\n', '    uint256 private constant _treasuryFee = 250;\n', '\n', '    uint256 private constant _presaleMinIndividualCap = 1 ether;\n', '    uint256 private constant _presaleMaxIndividualCap = 4 ether;\n', '    uint256 private constant _presaleCap = 37200 * 10**9; \n', '    uint256 private constant _maxPresaleGas = 200000000000;\n', '\n', '    uint256 private constant _epochLength = 4 hours;\n', '\n', '    uint256 private constant _liquidityReward = 2 * 10**9;\n', '    uint256 private constant _minForLiquidity = 10 * 10**9;\n', '    uint256 private constant _minForCallerLiquidity = 10 * 10**9;\n', '\n', '    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address payable private constant _deployerAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\n', '    address private constant _treasuryAddress = 0xB4a43aEd87902A24cD66afBD3349Af812325Ca01;\n', '\n', '    uint256 private constant _presaleRate = 31000;\n', '    uint256 private constant _listingRate = 29063;\n', '\n', '    string private constant _name = "YFStable";\n', '    string private constant _symbol = "YFST";\n', '    uint8 private constant _decimals = 9;\n', '\n', '    /****** Getters *******/\n', '    function getPresaleRate() internal pure returns (uint256) {\n', '        return _presaleRate;\n', '    }\n', '     function getListingRate() internal pure returns (uint256) {\n', '        return _listingRate;\n', '    }\n', '    function getLaunchSupply() internal pure returns (uint256) {\n', '        return _launchSupply;\n', '    }\n', '    function getLargeTotal() internal pure returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getPresaleCap() internal pure returns (uint256) {\n', '        return _presaleCap;\n', '    }\n', '    function getPresaleMinIndividualCap() internal pure returns (uint256) {\n', '        return _presaleMinIndividualCap;\n', '    }\n', '    function getPresaleMaxIndividualCap() internal pure returns (uint256) {\n', '        return _presaleMaxIndividualCap;\n', '    }\n', '    function getMaxPresaleGas() internal pure returns (uint256) {\n', '        return _maxPresaleGas;\n', '    }\n', '    function getBaseExpansionFactor() internal pure returns (uint256) {\n', '        return _baseExpansionFactor;\n', '    }\n', '    function getBaseContractionFactor() internal pure returns (uint256) {\n', '        return _baseContractionFactor;\n', '    }\n', '    function getBaseContractionCap() internal pure returns (uint256) {\n', '        return _baseContractionCap;\n', '    }\n', '    function getBaseUtilityFee() internal pure returns (uint256) {\n', '        return _baseUtilityFee;\n', '    }\n', '    function getStabilizerFee() internal pure returns (uint256) {\n', '        return _stabilizerFee;\n', '    }\n', '    function getStabilizationLowerBound() internal pure returns (uint256) {\n', '        return _stabilizationLowerBound;\n', '    }\n', '    function getStabilizationLowerReset() internal pure returns (uint256) {\n', '        return _stabilizationLowerReset;\n', '    }\n', '    function getStabilizationUpperBound() internal pure returns (uint256) {\n', '        return _stabilizationUpperBound;\n', '    }\n', '    function getStabilizationUpperReset() internal pure returns (uint256) {\n', '        return _stabilizationUpperReset;\n', '    }\n', '    function getStabilizePercent() internal pure returns (uint256) {\n', '        return _stabilizePercent;\n', '    }\n', '    function getTreasuryFee() internal pure returns (uint256) {\n', '        return _treasuryFee;\n', '    }\n', '    function getEpochLength() internal pure returns (uint256) {\n', '        return _epochLength;\n', '    }\n', '    function getLiquidityReward() internal pure returns (uint256) {\n', '        return _liquidityReward;\n', '    }\n', '    function getMinForLiquidity() internal pure returns (uint256) {\n', '        return _minForLiquidity;\n', '    }\n', '    function getMinForCallerLiquidity() internal pure returns (uint256) {\n', '        return _minForCallerLiquidity;\n', '    }\n', '    function getRouterAdd() internal pure returns (address) {\n', '        return _routerAddress;\n', '    }\n', '    function getFactoryAdd() internal pure returns (address) {\n', '        return _factoryAddress;\n', '    }\n', '    function getDeployerAdd() internal pure returns (address payable) {\n', '        return _deployerAddress;\n', '    }\n', '    function getTreasuryAdd() internal pure returns (address) {\n', '        return _treasuryAddress;\n', '    }\n', '    function getName() internal pure returns (string memory)  {\n', '        return _name;\n', '    }\n', '    function getSymbol() internal pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function getDecimals() internal pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', 'interface IYFStable {\n', '    function isPresaleDone() external view returns (bool);\n', '    function mint(address to, uint256 amount) external;\n', '    function setPresaleDone() external payable;\n', '}\n', 'contract YFStablePresale is Context, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    IYFStable token;\n', '    // Presale stuff below\n', '    uint256 private _presaleMint;\n', '    uint256 public presaleTime = now;\n', '    uint256 public presalePrice;\n', '    mapping (address => uint256) private _presaleParticipation;\n', '    bool public presale = false;\n', '\n', '    constructor (address tokenAdd) public {\n', '        token = IYFStable(tokenAdd);\n', '        presaleTime;\n', '        presalePrice = Constants.getPresaleRate();\n', '    }\n', '\n', '    function setPresaleTime(uint256 time) external onlyOwner() {\n', '        require(token.isPresaleDone() == false, "This cannot be modified after the presale is done");\n', '        presaleTime = time;\n', '    }\n', '\n', '    function setPresaleFlag(bool flag) external onlyOwner() {\n', '        require(!token.isPresaleDone(), "This cannot be modified after the presale is done");\n', '        if (flag == true) {\n', '            require(presalePrice > 0, "Sale price has to be greater than 0");\n', '        }\n', '        presale = flag;\n', '    }\n', '    \n', '\n', '    function setPresalePrice(uint256 priceInWei) external onlyOwner() {\n', '        require(!presale && !token.isPresaleDone(),"Can only be set before presale starts");\n', '        presalePrice = priceInWei;\n', '    }\n', '\n', '    // Presale function\n', '    receive() external payable {\n', '        require(presale, "Presale is inactive");\n', '        require(!token.isPresaleDone(), "Presale is already completed");\n', '        require(presaleTime <= now, "Presale hasn\'t started yet");\n', '        uint256 invest = _presaleParticipation[_msgSender()].add(msg.value);\n', '        require(invest <= Constants.getPresaleMaxIndividualCap() && invest >= Constants.getPresaleMinIndividualCap(), "Crossed individual cap");\n', '        require(presalePrice != 0, "Presale price is not set");\n', '        require(msg.value > 1, "Cannot buy without sending at least 1 eth mate!");\n', '        require(!Address.isContract(_msgSender()),"no contracts");\n', '        require(tx.gasprice <= Constants.getMaxPresaleGas(),"gas price above limit");\n', '        uint256 amountToMint = msg.value.div(10**11).mul(presalePrice);\n', '        require(_presaleMint.add(amountToMint) <= Constants.getPresaleCap(), "Presale max cap already reached");\n', '        token.mint(_msgSender(),amountToMint);\n', '        _presaleParticipation[_msgSender()] = _presaleParticipation[_msgSender()].add(msg.value);\n', '        _presaleMint = _presaleMint.add(amountToMint);\n', '    }\n', '\n', '    function presaleDone() external onlyOwner() {\n', '        require(!token.isPresaleDone(), "Presale is already completed");\n', '        token.setPresaleDone{value:address(this).balance}();\n', '    }\n', '\n', '    function emergencyWithdraw() external onlyOwner() {\n', '        require(!token.isPresaleDone(), "Presale is already completed");\n', '        _msgSender().transfer(address(this).balance);\n', '    }\n', '}']