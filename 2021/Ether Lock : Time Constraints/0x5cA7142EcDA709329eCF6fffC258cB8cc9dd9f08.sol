['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./IERC20.sol";\n', '\n', 'interface IUniswapV2Router02 {\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '    external\n', '    payable\n', '    returns (\n', '        uint256 amountToken,\n', '        uint256 amountETH,\n', '        uint256 liquidity\n', '    );\n', '}\n', '\n', 'contract SafuInvestmentsPresale {\n', '    using SafeMath for uint256;\n', '\n', '    IUniswapV2Router02 private constant uniswapRouter =\n', '    IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n', '\n', '    address payable internal safuFactoryAddress; // address that creates the presale contracts\n', '    address payable public safuDevAddress; // address where dev fees will be transferred to\n', '    address public safuLiqLockAddress; // address where LP tokens will be locked\n', '\n', '    IERC20 public token; // token that will be sold\n', '    address payable public presaleCreatorAddress; // address where percentage of invested wei will be transferred to\n', '    address public unsoldTokensDumpAddress; // address where unsold tokens will be transferred to\n', '\n', '    mapping(address => uint256) public investments; // total wei invested per address\n', '    mapping(address => bool) public whitelistedAddresses; // addresses eligible in presale\n', '    mapping(address => bool) public claimed; // if true, it means investor already claimed the tokens or got a refund\n', '\n', '    uint256 private safuDevFeePercentage; // dev fee to support the development of Safu Investments\n', '    uint256 private safuMinDevFeeInWei; // minimum fixed dev fee to support the development of Safu Investments\n', '    uint256 public safuId; // used for fetching presale without referencing its address\n', '\n', '    uint256 public totalInvestorsCount; // total investors count\n', '    uint256 public presaleCreatorClaimWei; // wei to transfer to presale creator per investor claim\n', '    uint256 public presaleCreatorClaimTime; // time when presale creator can collect funds raise\n', '    uint256 public totalCollectedWei; // total wei collected\n', '    uint256 public totalTokens; // total tokens to be sold\n', '    uint256 public tokensLeft; // available tokens to be sold\n', '    uint256 public tokenPriceInWei; // token presale wei price per 1 token\n', '    uint256 public hardCapInWei; // maximum wei amount that can be invested in presale\n', '    uint256 public softCapInWei; // minimum wei amount to invest in presale, if not met, invested wei will be returned\n', '    uint256 public maxInvestInWei; // maximum wei amount that can be invested per wallet address\n', '    uint256 public minInvestInWei; // minimum wei amount that can be invested per wallet address\n', '    uint256 public openTime; // time when presale starts, investing is allowed\n', '    uint256 public closeTime; // time when presale closes, investing is not allowed\n', '    uint256 public uniListingPriceInWei; // token price when listed in Uniswap\n', '    uint256 public uniLiquidityAddingTime; // time when adding of liquidity in uniswap starts, investors can claim their tokens afterwards\n', '    uint256 public uniLPTokensLockDurationInDays; // how many days after the liquity is added the presale creator can unlock the LP tokens\n', '    uint256 public uniLiquidityPercentageAllocation; // how many percentage of the total invested wei that will be added as liquidity\n', '\n', '    bool public uniLiquidityAdded = false; // if true, liquidity is added in Uniswap and lp tokens are locked\n', '    bool public onlyWhitelistedAddressesAllowed = true; // if true, only whitelisted addresses can invest\n', '    bool public safuDevFeesExempted = false; // if true, presale will be exempted from dev fees\n', '    bool public presaleCancelled = false; // if true, investing will not be allowed, investors can withdraw, presale creator can withdraw their tokens\n', '\n', '    bytes32 public saleTitle;\n', '    bytes32 public linkTelegram;\n', '    bytes32 public linkTwitter;\n', '    bytes32 public linkDiscord;\n', '    bytes32 public linkWebsite;\n', '\n', '    constructor(address _safuFactoryAddress, address _safuDevAddress) public {\n', '        require(_safuFactoryAddress != address(0));\n', '        require(_safuDevAddress != address(0));\n', '\n', '        safuFactoryAddress = payable(_safuFactoryAddress);\n', '        safuDevAddress = payable(_safuDevAddress);\n', '    }\n', '\n', '    modifier onlySafuDev() {\n', '        require(safuFactoryAddress == msg.sender || safuDevAddress == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlySafuFactory() {\n', '        require(safuFactoryAddress == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPresaleCreatorOrSafuFactory() {\n', '        require(\n', '            presaleCreatorAddress == msg.sender || safuFactoryAddress == msg.sender,\n', '            "Not presale creator or factory"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyPresaleCreator() {\n', '        require(presaleCreatorAddress == msg.sender, "Not presale creator");\n', '        _;\n', '    }\n', '\n', '    modifier whitelistedAddressOnly() {\n', '        require(\n', '            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender],\n', '            "Address not whitelisted"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier presaleIsNotCancelled() {\n', '        require(!presaleCancelled, "Cancelled");\n', '        _;\n', '    }\n', '\n', '    modifier investorOnly() {\n', '        require(investments[msg.sender] > 0, "Not an investor");\n', '        _;\n', '    }\n', '\n', '    modifier notYetClaimedOrRefunded() {\n', '        require(!claimed[msg.sender], "Already claimed or refunded");\n', '        _;\n', '    }\n', '\n', '    function setAddressInfo(\n', '        address _presaleCreator,\n', '        address _tokenAddress,\n', '        address _unsoldTokensDumpAddress\n', '    ) external onlySafuFactory {\n', '        require(_presaleCreator != address(0));\n', '        require(_tokenAddress != address(0));\n', '        require(_unsoldTokensDumpAddress != address(0));\n', '\n', '        presaleCreatorAddress = payable(_presaleCreator);\n', '        token = IERC20(_tokenAddress);\n', '        unsoldTokensDumpAddress = _unsoldTokensDumpAddress;\n', '    }\n', '\n', '    function setGeneralInfo(\n', '        uint256 _totalTokens,\n', '        uint256 _tokenPriceInWei,\n', '        uint256 _hardCapInWei,\n', '        uint256 _softCapInWei,\n', '        uint256 _maxInvestInWei,\n', '        uint256 _minInvestInWei,\n', '        uint256 _openTime,\n', '        uint256 _closeTime\n', '    ) external onlySafuFactory {\n', '        require(_totalTokens > 0);\n', '        require(_tokenPriceInWei > 0);\n', '        require(_openTime > 0);\n', '        require(_closeTime > 0);\n', '        require(_hardCapInWei > 0);\n', '\n', '        // Hard cap > (token amount * token price)\n', '        require(_hardCapInWei <= _totalTokens.mul(_tokenPriceInWei));\n', '        // Soft cap > to hard cap\n', '        require(_softCapInWei <= _hardCapInWei);\n', '        //  Min. wei investment > max. wei investment\n', '        require(_minInvestInWei <= _maxInvestInWei);\n', '        // Open time >= close time\n', '        require(_openTime < _closeTime);\n', '\n', '        totalTokens = _totalTokens;\n', '        tokensLeft = _totalTokens;\n', '        tokenPriceInWei = _tokenPriceInWei;\n', '        hardCapInWei = _hardCapInWei;\n', '        softCapInWei = _softCapInWei;\n', '        maxInvestInWei = _maxInvestInWei;\n', '        minInvestInWei = _minInvestInWei;\n', '        openTime = _openTime;\n', '        closeTime = _closeTime;\n', '    }\n', '\n', '    function setUniswapInfo(\n', '        uint256 _uniListingPriceInWei,\n', '        uint256 _uniLiquidityAddingTime,\n', '        uint256 _uniLPTokensLockDurationInDays,\n', '        uint256 _uniLiquidityPercentageAllocation\n', '    ) external onlySafuFactory {\n', '        require(_uniListingPriceInWei > 0);\n', '        require(_uniLiquidityAddingTime > 0);\n', '        require(_uniLPTokensLockDurationInDays > 0);\n', '        require(_uniLiquidityPercentageAllocation > 0);\n', '\n', '        require(closeTime > 0);\n', '        // Listing time < close time\n', '        require(_uniLiquidityAddingTime >= closeTime);\n', '\n', '        uniListingPriceInWei = _uniListingPriceInWei;\n', '        uniLiquidityAddingTime = _uniLiquidityAddingTime;\n', '        uniLPTokensLockDurationInDays = _uniLPTokensLockDurationInDays;\n', '        uniLiquidityPercentageAllocation = _uniLiquidityPercentageAllocation;\n', '    }\n', '\n', '    function setStringInfo(\n', '        bytes32 _saleTitle,\n', '        bytes32 _linkTelegram,\n', '        bytes32 _linkDiscord,\n', '        bytes32 _linkTwitter,\n', '        bytes32 _linkWebsite\n', '    ) external onlyPresaleCreatorOrSafuFactory {\n', '        saleTitle = _saleTitle;\n', '        linkTelegram = _linkTelegram;\n', '        linkDiscord = _linkDiscord;\n', '        linkTwitter = _linkTwitter;\n', '        linkWebsite = _linkWebsite;\n', '    }\n', '\n', '    function setSafuInfo(\n', '        address _safuLiqLockAddress,\n', '        uint256 _safuDevFeePercentage,\n', '        uint256 _safuMinDevFeeInWei,\n', '        uint256 _safuId\n', '    ) external onlySafuDev {\n', '        safuLiqLockAddress = _safuLiqLockAddress;\n', '        safuDevFeePercentage = _safuDevFeePercentage;\n', '        safuMinDevFeeInWei = _safuMinDevFeeInWei;\n', '        safuId = _safuId;\n', '    }\n', '\n', '    function setSafuDevFeesExempted(bool _safuDevFeesExempted)\n', '    external\n', '    onlySafuDev\n', '    {\n', '        safuDevFeesExempted = _safuDevFeesExempted;\n', '    }\n', '\n', '    function setOnlyWhitelistedAddressesAllowed(bool _onlyWhitelistedAddressesAllowed)\n', '    external\n', '    onlyPresaleCreatorOrSafuFactory\n', '    {\n', '        onlyWhitelistedAddressesAllowed = _onlyWhitelistedAddressesAllowed;\n', '    }\n', '\n', '    function addwhitelistedAddresses(address[] calldata _whitelistedAddresses)\n', '    external\n', '    onlyPresaleCreatorOrSafuFactory\n', '    {\n', '        onlyWhitelistedAddressesAllowed = _whitelistedAddresses.length > 0;\n', '        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\n', '            whitelistedAddresses[_whitelistedAddresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function getTokenAmount(uint256 _weiAmount)\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _weiAmount.mul(1e18).div(tokenPriceInWei);\n', '    }\n', '\n', '    function invest()\n', '    public\n', '    payable\n', '    whitelistedAddressOnly\n', '    presaleIsNotCancelled\n', '    {\n', '        require(block.timestamp >= openTime, "Not yet opened");\n', '        require(block.timestamp < closeTime, "Closed");\n', '        require(totalCollectedWei < hardCapInWei, "Hard cap reached");\n', '        require(tokensLeft > 0);\n', '        require(msg.value <= tokensLeft.mul(tokenPriceInWei));\n', '        uint256 totalInvestmentInWei = investments[msg.sender].add(msg.value);\n', '        require(totalInvestmentInWei >= minInvestInWei || totalCollectedWei >= hardCapInWei.sub(1 ether), "Min investment not reached");\n', '        require(maxInvestInWei == 0 || totalInvestmentInWei <= maxInvestInWei, "Max investment reached");\n', '\n', '        if (investments[msg.sender] == 0) {\n', '            totalInvestorsCount = totalInvestorsCount.add(1);\n', '        }\n', '\n', '        totalCollectedWei = totalCollectedWei.add(msg.value);\n', '        investments[msg.sender] = totalInvestmentInWei;\n', '        tokensLeft = tokensLeft.sub(getTokenAmount(msg.value));\n', '    }\n', '\n', '    receive() external payable {\n', '        invest();\n', '    }\n', '\n', '    function addLiquidityAndLockLPTokens() external presaleIsNotCancelled {\n', '        require(totalCollectedWei > 0);\n', '        require(!uniLiquidityAdded, "Liquidity already added");\n', '        require(\n', '            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender] || msg.sender == presaleCreatorAddress,\n', '            "Not whitelisted or not presale creator"\n', '        );\n', '\n', '        if (totalCollectedWei >= hardCapInWei.sub(1 ether) && block.timestamp < uniLiquidityAddingTime) {\n', '            require(msg.sender == presaleCreatorAddress, "Not presale creator");\n', '        } else if (block.timestamp >= uniLiquidityAddingTime) {\n', '            require(\n', '                msg.sender == presaleCreatorAddress || investments[msg.sender] > 0,\n', '                "Not presale creator or investor"\n', '            );\n', '            require(totalCollectedWei >= softCapInWei, "Soft cap not reached");\n', '        } else {\n', '            revert("Liquidity cannot be added yet");\n', '        }\n', '\n', '        uniLiquidityAdded = true;\n', '\n', '        uint256 finalTotalCollectedWei = totalCollectedWei;\n', '        uint256 safuDevFeeInWei;\n', '        if (!safuDevFeesExempted) {\n', '            uint256 pctDevFee = finalTotalCollectedWei.mul(safuDevFeePercentage).div(100);\n', '            safuDevFeeInWei = pctDevFee > safuMinDevFeeInWei || safuMinDevFeeInWei >= finalTotalCollectedWei\n', '            ? pctDevFee\n', '            : safuMinDevFeeInWei;\n', '        }\n', '        if (safuDevFeeInWei > 0) {\n', '            finalTotalCollectedWei = finalTotalCollectedWei.sub(safuDevFeeInWei);\n', '            safuDevAddress.transfer(safuDevFeeInWei);\n', '        }\n', '\n', '        uint256 liqPoolEthAmount = finalTotalCollectedWei.mul(uniLiquidityPercentageAllocation).div(100);\n', '        uint256 liqPoolTokenAmount = liqPoolEthAmount.mul(1e18).div(uniListingPriceInWei);\n', '\n', '        token.approve(address(uniswapRouter), liqPoolTokenAmount);\n', '\n', '        uniswapRouter.addLiquidityETH{value : liqPoolEthAmount}(\n', '            address(token),\n', '            liqPoolTokenAmount,\n', '            0,\n', '            0,\n', '            safuLiqLockAddress,\n', '            block.timestamp.add(15 minutes)\n', '        );\n', '\n', '        uint256 unsoldTokensAmount = token.balanceOf(address(this)).sub(getTokenAmount(totalCollectedWei));\n', '        if (unsoldTokensAmount > 0) {\n', '            token.transfer(unsoldTokensDumpAddress, unsoldTokensAmount);\n', '        }\n', '\n', '        presaleCreatorClaimWei = address(this).balance.mul(1e18).div(totalInvestorsCount.mul(1e18));\n', '        presaleCreatorClaimTime = block.timestamp + 1 days;\n', '    }\n', '\n', '    function claimTokens()\n', '    external\n', '    whitelistedAddressOnly\n', '    presaleIsNotCancelled\n', '    investorOnly\n', '    notYetClaimedOrRefunded\n', '    {\n', '        require(uniLiquidityAdded, "Liquidity not yet added");\n', '\n', '        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\n', '        token.transfer(msg.sender, getTokenAmount(investments[msg.sender]));\n', '\n', '        uint256 balance = address(this).balance;\n', '        if (balance > 0) {\n', '            uint256 funds = presaleCreatorClaimWei > balance ? balance : presaleCreatorClaimWei;\n', '            presaleCreatorAddress.transfer(funds);\n', '        }\n', '    }\n', '\n', '    function getRefund()\n', '    external\n', '    whitelistedAddressOnly\n', '    investorOnly\n', '    notYetClaimedOrRefunded\n', '    {\n', '        if (!presaleCancelled) {\n', '            require(block.timestamp >= openTime, "Not yet opened");\n', '            require(block.timestamp >= closeTime, "Not yet closed");\n', '            require(softCapInWei > 0, "No soft cap");\n', '            require(totalCollectedWei < softCapInWei, "Soft cap reached");\n', '        }\n', '\n', '        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\n', '        uint256 investment = investments[msg.sender];\n', '        uint256 presaleBalance =  address(this).balance;\n', '        require(presaleBalance > 0);\n', '\n', '        if (investment > presaleBalance) {\n', '            investment = presaleBalance;\n', '        }\n', '\n', '        if (investment > 0) {\n', '            msg.sender.transfer(investment);\n', '        }\n', '    }\n', '\n', '    function cancelAndTransferTokensToPresaleCreator() external {\n', '        if (!uniLiquidityAdded && presaleCreatorAddress != msg.sender && safuDevAddress != msg.sender) {\n', '            revert();\n', '        }\n', '        if (uniLiquidityAdded && safuDevAddress != msg.sender) {\n', '            revert();\n', '        }\n', '\n', '        require(!presaleCancelled);\n', '        presaleCancelled = true;\n', '\n', '        uint256 balance = token.balanceOf(address(this));\n', '        if (balance > 0) {\n', '            token.transfer(presaleCreatorAddress, balance);\n', '        }\n', '    }\n', '\n', '    function collectFundsRaised() onlyPresaleCreator external {\n', '        require(uniLiquidityAdded);\n', '        require(!presaleCancelled);\n', '        require(block.timestamp >= presaleCreatorClaimTime);\n', '\n', '        if (address(this).balance > 0) {\n', '            presaleCreatorAddress.transfer(address(this).balance);\n', '        }\n', '    }\n', '}']