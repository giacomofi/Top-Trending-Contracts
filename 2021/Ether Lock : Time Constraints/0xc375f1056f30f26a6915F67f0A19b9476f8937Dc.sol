['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-06\n', '*/\n', '\n', '// File contracts/libs/SafeMath.sol\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/Strings.sol\n', '\n', '// File: contracts/Strings.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', 'library Strings {\n', '\n', '    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        uint i = 0;\n', '        for (i = 0; i < _ba.length; i++) {\n', '            babcde[k++] = _ba[i];\n', '        }\n', '        for (i = 0; i < _bb.length; i++) {\n', '            babcde[k++] = _bb[i];\n', '        }\n', '        for (i = 0; i < _bc.length; i++) {\n', '            babcde[k++] = _bc[i];\n', '        }\n', '        for (i = 0; i < _bd.length; i++) {\n', '            babcde[k++] = _bd[i];\n', '        }\n', '        for (i = 0; i < _be.length; i++) {\n', '            babcde[k++] = _be[i];\n', '        }\n', '        return string(babcde);\n', '    }\n', '\n', '    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint j = _i;\n', '        uint len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = byte(uint8(48 + _i % 10));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '}\n', '\n', '\n', '\n', '// File contracts/libs/IERC165.sol\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others (`ERC165Checker`).\n', ' *\n', ' * For an implementation, see `ERC165`.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/libs/ERC165.sol\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC165` interface.\n', ' *\n', ' * Contracts may inherit from this and call `_registerInterface` to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC165.supportsInterface`.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See `IERC165.supportsInterface`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/IERC721.sol\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'contract IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in `owner`'s account.\n", '     */\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either `approve` or `setApproveForAll`.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either `approve` or `setApproveForAll`.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public;\n', '    function approve(address to, uint256 tokenId) public;\n', '    function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public;\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '}\n', '\n', '\n', '// File contracts/libs/Address.sol\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/Counters.sol\n', '\n', '// File: openzeppelin-solidity/contracts/drafts/Counters.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/IERC721Receiver.sol\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n', '    public returns (bytes4);\n', '}\n', '\n', '\n', '// File contracts/libs/ERC721.sol\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using Counters for Counters.Counter;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) private _tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => Counters.Counter) private _ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '    \n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    constructor () public {\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _ownedTokensCount[owner].current();\n', '    }\n', '\n', '    function ownerOf(uint256 tokenId) public view returns (address) {\n', '        address owner = _tokenOwner[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '\n', '        return owner;\n', '    }\n', '\n', '    function approve(address to, uint256 tokenId) public {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(owner, to, tokenId);\n', '    }\n', '\n', '    function getApproved(uint256 tokenId) public view returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    function setApprovalForAll(address to, bool approved) public {\n', '        require(to != msg.sender, "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[msg.sender][to] = approved;\n', '        emit ApprovalForAll(msg.sender, to, approved);\n', '    }\n', '\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) public {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transferFrom(from, to, tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n', '        transferFrom(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        address owner = _tokenOwner[tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _tokenOwner[tokenId] = to;\n', '        _ownedTokensCount[to].increment();\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    function _burn(address owner, uint256 tokenId) internal {\n', '        require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");\n', '\n', '        _clearApproval(tokenId);\n', '\n', '        _ownedTokensCount[owner].decrement();\n', '        _tokenOwner[tokenId] = address(0);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    function _burn(uint256 tokenId) internal {\n', '        _burn(ownerOf(tokenId), tokenId);\n', '    }\n', '\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _clearApproval(tokenId);\n', '\n', '        _ownedTokensCount[from].decrement();\n', '        _ownedTokensCount[to].increment();\n', '\n', '        _tokenOwner[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '    internal returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '\n', '        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _clearApproval(uint256 tokenId) private {\n', '        if (_tokenApprovals[tokenId] != address(0)) {\n', '            _tokenApprovals[tokenId] = address(0);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/IERC721Enumerable.sol\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n', '\n', '    function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/libs/ERC721Enumerable.sol\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) private _ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] private _allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    /**\n', '     * @dev Constructor function.\n', '     */\n', '    constructor () public {\n', '        // register the supported interface to conform to ERC721Enumerable via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n', '     * @param owner address owning the tokens list to be accessed\n', '     * @param index uint256 representing the index to be accessed of the requested tokens list\n', '     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n', '        require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '        return _ownedTokens[owner][index];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the total amount of tokens stored by the contract.\n', '     * @return uint256 representing the total amount of tokens\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of all the tokens in this contract\n', '     * Reverts if the index is greater or equal to the total number of tokens.\n', '     * @param index uint256 representing the index to be accessed of the tokens list\n', '     * @return uint256 token ID at the given index of the tokens list\n', '     */\n', '    function tokenByIndex(uint256 index) public view returns (uint256) {\n', '        require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to transfer ownership of a given token ID to another address.\n', '     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        super._transferFrom(from, to, tokenId);\n', '\n', '        _removeTokenFromOwnerEnumeration(from, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * @param to address the beneficiary that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        super._mint(to, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '\n', '        _addTokenToAllTokensEnumeration(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to burn a specific token.\n', '     * Reverts if the token does not exist.\n', '     * Deprecated, use _burn(uint256) instead.\n', '     * @param owner owner of the token to burn\n', '     * @param tokenId uint256 ID of the token being burned\n', '     */\n', '    function _burn(address owner, uint256 tokenId) internal {\n', '        super._burn(owner, tokenId);\n', '\n', '        _removeTokenFromOwnerEnumeration(owner, tokenId);\n', '        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n', '        _ownedTokensIndex[tokenId] = 0;\n', '\n', '        _removeTokenFromAllTokensEnumeration(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the list of token IDs of the requested owner.\n', '     * @param owner address owning the tokens\n', '     * @return uint256[] List of token IDs owned by the requested address\n', '     */\n', '    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n', '        return _ownedTokens[owner];\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n", '     * @param to address representing the new owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n', '        _ownedTokens[to].push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's token tracking data structures.\n", '     * @param tokenId uint256 ID of the token to be added to the tokens list\n', '     */\n', '    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '        _allTokensIndex[tokenId] = _allTokens.length;\n', '        _allTokens.push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n", '     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\n', '     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n', '     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', "        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n", '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary\n', '        if (tokenIndex != lastTokenIndex) {\n', '            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '        }\n', '\n', '        // This also deletes the contents at the last position of the array\n', '        _ownedTokens[from].length--;\n', '\n', "        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n", '        // lastTokenId, or just over the end of the array if the token was the last one).\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's token tracking data structures.\n", '     * This has O(1) time complexity, but alters the order of the _allTokens array.\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list\n', '     */\n', '    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n', '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '        uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n', '        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n', "        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n", '        uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '\n', '        // This also deletes the contents at the last position of the array\n', '        _allTokens.length--;\n', '        _allTokensIndex[tokenId] = 0;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/CustomERC721Metadata.sol\n', '\n', '// File: contracts/CustomERC721Metadata.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * ERC721 base contract without the concept of tokenUri as this is managed by the parent\n', ' */\n', 'contract CustomERC721Metadata is ERC165, ERC721, ERC721Enumerable {\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /**\n', '     * @dev Constructor function\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token name\n', '     * @return string representing the token name\n', '     */\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token symbol\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '}\n', '\n', '\n', '// File contracts/GenArt721Core2.sol\n', '\n', '// File: contracts/GenArt721Core.sol\n', '\n', '//0x1454EFCa69FA654e5A7d83CB61c1aD81790c44B7\n', '\n', '//https://oneclickdapp.com/radar-valery/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface Randomizer {\n', '   function returnValue() external view returns(bytes32);\n', '}\n', '\n', 'contract GenArt721Core2 is CustomERC721Metadata {\n', '    using SafeMath for uint256;\n', '\n', '    event Mint(\n', '        address indexed _to,\n', '        uint256 indexed _tokenId,\n', '        uint256 indexed _projectId\n', '\n', '    );\n', '\n', '    Randomizer public randomizerContract;\n', '\n', '    struct Project {\n', '        string name;\n', '        string artist;\n', '        string description;\n', '        string website;\n', '        string license;\n', '        bool dynamic;\n', '        string projectBaseURI;\n', '        string projectBaseIpfsURI;\n', '        uint256 invocations;\n', '        uint256 maxInvocations;\n', '        string scriptJSON;\n', '        mapping(uint256 => string) scripts;\n', '        uint scriptCount;\n', '        string ipfsHash;\n', '        bool useHashString;\n', '        bool useIpfs;\n', '        bool active;\n', '        bool locked;\n', '        bool paused;\n', '\n', '    }\n', '\n', '    //uint256 constant ONE_MILLION = 1_000_000;\n', '    mapping(uint256 => Project) projects;\n', '\n', '    //All financial functions are stripped from struct for visibility\n', '    mapping(uint256 => address) public projectIdToArtistAddress;\n', '    mapping(uint256 => string) public projectIdToCurrencySymbol;\n', '    mapping(uint256 => address) public projectIdToCurrencyAddress;\n', '    mapping(uint256 => uint256) public projectIdToPricePerTokenInWei;\n', '    mapping(uint256 => address) public projectIdToAdditionalPayee;\n', '    mapping(uint256 => uint256) public projectIdToAdditionalPayeePercentage;\n', '    mapping(uint256 => uint256) public projectIdToSecondaryMarketRoyaltyPercentage;\n', '\n', '    address public artblocksAddress;\n', '    uint256 public artblocksPercentage = 5;\n', '\n', '\n', '    mapping(uint256 => string) public staticIpfsImageLink;\n', '    mapping(uint256 => uint256) public tokenIdToProjectId;\n', '    //mapping(uint256 => uint256[]) internal projectIdToTokenIds;\n', '    mapping(uint256 => bytes32) public tokenIdToHash;\n', '    mapping(bytes32 => uint256) public hashToTokenId;\n', '\n', '    address public admin;\n', '    mapping(address => bool) public isWhitelisted;\n', '    mapping(address => bool) public isMintWhitelisted;\n', '\n', '    uint256 public nextProjectId = 0;\n', '\n', '    modifier onlyValidTokenId(uint256 _tokenId) {\n', '        require(_exists(_tokenId), "Token ID does not exist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyUnlocked(uint256 _projectId) {\n', '        require(!projects[_projectId].locked, "Only if unlocked");\n', '        _;\n', '    }\n', '\n', '    modifier onlyArtist(uint256 _projectId) {\n', '        require(msg.sender == projectIdToArtistAddress[_projectId], "Only artist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "Only admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted[msg.sender], "Only whitelisted");\n', '        _;\n', '    }\n', '\n', '    modifier onlyArtistOrWhitelisted(uint256 _projectId) {\n', '        require(isWhitelisted[msg.sender] || msg.sender == projectIdToArtistAddress[_projectId], "Only artist or whitelisted");\n', '        _;\n', '    }\n', '\n', '    constructor(string memory _tokenName, string memory _tokenSymbol, address _randomizerContract) CustomERC721Metadata(_tokenName, _tokenSymbol) public {\n', '        admin = msg.sender;\n', '        isWhitelisted[msg.sender] = true;\n', '        artblocksAddress = msg.sender;\n', '        randomizerContract = Randomizer(_randomizerContract);\n', '\n', '    }\n', '\n', '    function mint(address _to, uint256 _projectId, address _by) external returns (uint256 _tokenId) {\n', '        require(isMintWhitelisted[msg.sender], "Must mint from whitelisted minter contract.");\n', '        require(projects[_projectId].invocations.add(1) <= projects[_projectId].maxInvocations, "Must not exceed max invocations");\n', '        require(projects[_projectId].active || _by == projectIdToArtistAddress[_projectId], "Project must exist and be active");\n', '        require(!projects[_projectId].paused || _by == projectIdToArtistAddress[_projectId], "Purchases are paused.");\n', '\n', '\n', '        uint256 tokenId = _mintToken(_to, _projectId);\n', '\n', '        return tokenId;\n', '    }\n', '\n', '    function _mintToken(address _to, uint256 _projectId) internal returns (uint256 _tokenId) {\n', '\n', '        uint256 tokenIdToBe = (_projectId * 100) + projects[_projectId].invocations;\n', '\n', '        projects[_projectId].invocations = projects[_projectId].invocations.add(1);\n', '\n', '        if (projects[_projectId].useHashString) {\n', '            bytes32 hash = keccak256(abi.encodePacked(projects[_projectId].invocations, block.number, blockhash(block.number - 1), msg.sender, randomizerContract.returnValue()));\n', '            tokenIdToHash[tokenIdToBe]=hash;\n', '            hashToTokenId[hash] = tokenIdToBe;\n', '          }\n', '\n', '\n', '        _mint(_to, tokenIdToBe);\n', '\n', '        tokenIdToProjectId[tokenIdToBe] = _projectId;\n', '        //projectIdToTokenIds[_projectId].push(tokenIdToBe);\n', '\n', '        emit Mint(_to, tokenIdToBe, _projectId);\n', '\n', '        return tokenIdToBe;\n', '    }\n', '\n', '    function updateAdmin(address _adminAddress) public onlyAdmin {\n', '        admin = _adminAddress;\n', '    }\n', '\n', '    function updateArtblocksAddress(address _artblocksAddress) public onlyAdmin {\n', '        artblocksAddress = _artblocksAddress;\n', '    }\n', '\n', '\n', '    function updateArtblocksPercentage(uint256 _artblocksPercentage) public onlyAdmin {\n', '        require(_artblocksPercentage <= 25, "Max of 25%");\n', '        artblocksPercentage = _artblocksPercentage;\n', '    }\n', '\n', '    function addWhitelisted(address _address) public onlyAdmin {\n', '        isWhitelisted[_address] = true;\n', '    }\n', '\n', '    function removeWhitelisted(address _address) public onlyAdmin {\n', '        isWhitelisted[_address] = false;\n', '    }\n', '\n', '    function addMintWhitelisted(address _address) public onlyAdmin {\n', '        isMintWhitelisted[_address] = true;\n', '    }\n', '\n', '    function removeMintWhitelisted(address _address) public onlyAdmin {\n', '        isMintWhitelisted[_address] = false;\n', '    }\n', '\n', '    function updateRandomizerAddress(address _randomizerAddress) public onlyWhitelisted {\n', '      randomizerContract = Randomizer(_randomizerAddress);\n', '    }\n', '    function toggleProjectIsLocked(uint256 _projectId) public onlyWhitelisted onlyUnlocked(_projectId) {\n', '        projects[_projectId].locked = true;\n', '    }\n', '\n', '    function toggleProjectIsActive(uint256 _projectId) public onlyWhitelisted {\n', '        projects[_projectId].active = !projects[_projectId].active;\n', '    }\n', '\n', '    function updateProjectArtistAddress(uint256 _projectId, address _artistAddress) public onlyArtistOrWhitelisted(_projectId) {\n', '        projectIdToArtistAddress[_projectId] = _artistAddress;\n', '    }\n', '\n', '    function toggleProjectIsPaused(uint256 _projectId) public onlyArtist(_projectId) {\n', '        projects[_projectId].paused = !projects[_projectId].paused;\n', '    }\n', '\n', '    function addProject(string memory _projectName, address _artistAddress, uint256 _pricePerTokenInWei, bool _dynamic) public onlyWhitelisted {\n', '\n', '        uint256 projectId = nextProjectId;\n', '        projectIdToArtistAddress[projectId] = _artistAddress;\n', '        projects[projectId].name = _projectName;\n', '        projectIdToCurrencySymbol[projectId] = "ETH";\n', '        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\n', '        projects[projectId].paused=true;\n', '        projects[projectId].dynamic=_dynamic;\n', '        projects[projectId].maxInvocations = 100;\n', '        if (!_dynamic) {\n', '            projects[projectId].useHashString = false;\n', '        } else {\n', '            projects[projectId].useHashString = true;\n', '        }\n', '        nextProjectId = nextProjectId.add(1);\n', '    }\n', '\n', '    function updateProjectCurrencyInfo(uint256 _projectId, string memory _currencySymbol, address _currencyAddress) onlyArtist(_projectId) public {\n', '        projectIdToCurrencySymbol[_projectId] = _currencySymbol;\n', '        projectIdToCurrencyAddress[_projectId] = _currencyAddress;\n', '    }\n', '\n', '    function updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei) onlyArtist(_projectId) public {\n', '        projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;\n', '    }\n', '\n', '    function updateProjectName(uint256 _projectId, string memory _projectName) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].name = _projectName;\n', '    }\n', '\n', '    function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].artist = _projectArtistName;\n', '    }\n', '\n', '    function updateProjectAdditionalPayeeInfo(uint256 _projectId, address _additionalPayee, uint256 _additionalPayeePercentage) onlyArtist(_projectId) public {\n', '        require(_additionalPayeePercentage <= 100, "Max of 100%");\n', '        projectIdToAdditionalPayee[_projectId] = _additionalPayee;\n', '        projectIdToAdditionalPayeePercentage[_projectId] = _additionalPayeePercentage;\n', '    }\n', '\n', '    function updateProjectSecondaryMarketRoyaltyPercentage(uint256 _projectId, uint256 _secondMarketRoyalty) onlyArtist(_projectId) public {\n', '        require(_secondMarketRoyalty <= 100, "Max of 100%");\n', '        projectIdToSecondaryMarketRoyaltyPercentage[_projectId] = _secondMarketRoyalty;\n', '    }\n', '\n', '    function updateProjectDescription(uint256 _projectId, string memory _projectDescription) onlyArtist(_projectId) public {\n', '        projects[_projectId].description = _projectDescription;\n', '    }\n', '\n', '    function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) onlyArtist(_projectId) public {\n', '        projects[_projectId].website = _projectWebsite;\n', '    }\n', '\n', '    function updateProjectLicense(uint256 _projectId, string memory _projectLicense) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].license = _projectLicense;\n', '    }\n', '\n', '    function updateProjectMaxInvocations(uint256 _projectId, uint256 _maxInvocations) onlyArtist(_projectId) public {\n', '        require((!projects[_projectId].locked || _maxInvocations<projects[_projectId].maxInvocations), "Only if unlocked");\n', '        require(_maxInvocations > projects[_projectId].invocations, "You must set max invocations greater than current invocations");\n', '        require(_maxInvocations <= 100, "Cannot exceed 100");\n', '        projects[_projectId].maxInvocations = _maxInvocations;\n', '    }\n', '\n', '    function toggleProjectUseHashString(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '      require(projects[_projectId].invocations == 0, "Cannot modify after a token is minted.");\n', '      projects[_projectId].useHashString = !projects[_projectId].useHashString;\n', '    }\n', '\n', '    function addProjectScript(uint256 _projectId, string memory _script) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].scripts[projects[_projectId].scriptCount] = _script;\n', '        projects[_projectId].scriptCount = projects[_projectId].scriptCount.add(1);\n', '    }\n', '\n', '    function updateProjectScript(uint256 _projectId, uint256 _scriptId, string memory _script) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        require(_scriptId < projects[_projectId].scriptCount, "scriptId out of range");\n', '        projects[_projectId].scripts[_scriptId] = _script;\n', '    }\n', '\n', '    function removeProjectLastScript(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        require(projects[_projectId].scriptCount > 0, "there are no scripts to remove");\n', '        delete projects[_projectId].scripts[projects[_projectId].scriptCount - 1];\n', '        projects[_projectId].scriptCount = projects[_projectId].scriptCount.sub(1);\n', '    }\n', '\n', '    function updateProjectScriptJSON(uint256 _projectId, string memory _projectScriptJSON) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].scriptJSON = _projectScriptJSON;\n', '    }\n', '\n', '    function updateProjectIpfsHash(uint256 _projectId, string memory _ipfsHash) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '        projects[_projectId].ipfsHash = _ipfsHash;\n', '    }\n', '\n', '    function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI) onlyArtist(_projectId) public {\n', '        projects[_projectId].projectBaseURI = _newBaseURI;\n', '    }\n', '\n', '    function updateProjectBaseIpfsURI(uint256 _projectId, string memory _projectBaseIpfsURI) onlyArtist(_projectId) public {\n', '        projects[_projectId].projectBaseIpfsURI = _projectBaseIpfsURI;\n', '    }\n', '\n', '    function toggleProjectUseIpfsForStatic(uint256 _projectId) onlyArtist(_projectId) public {\n', '        require(!projects[_projectId].dynamic, "can only set static IPFS hash for static projects");\n', '        projects[_projectId].useIpfs = !projects[_projectId].useIpfs;\n', '    }\n', '\n', '    function toggleProjectIsDynamic(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {\n', '      require(projects[_projectId].invocations == 0, "Can not switch after a token is minted.");\n', '        if (projects[_projectId].dynamic) {\n', '            projects[_projectId].useHashString = false;\n', '        } else {\n', '            projects[_projectId].useHashString = true;\n', '        }\n', '        projects[_projectId].dynamic = !projects[_projectId].dynamic;\n', '    }\n', '\n', '    function overrideTokenDynamicImageWithIpfsLink(uint256 _tokenId, string memory _ipfsHash) onlyArtist(tokenIdToProjectId[_tokenId]) public {\n', '        staticIpfsImageLink[_tokenId] = _ipfsHash;\n', '    }\n', '\n', '    function clearTokenIpfsImageUri(uint256 _tokenId) onlyArtist(tokenIdToProjectId[_tokenId]) public {\n', '        delete staticIpfsImageLink[tokenIdToProjectId[_tokenId]];\n', '    }\n', '\n', '    function projectDetails(uint256 _projectId) view public returns (string memory projectName, string memory artist, string memory description, string memory website, string memory license, bool dynamic) {\n', '        projectName = projects[_projectId].name;\n', '        artist = projects[_projectId].artist;\n', '        description = projects[_projectId].description;\n', '        website = projects[_projectId].website;\n', '        license = projects[_projectId].license;\n', '        dynamic = projects[_projectId].dynamic;\n', '    }\n', '\n', '    function projectTokenInfo(uint256 _projectId) view public returns (address artistAddress, uint256 pricePerTokenInWei, uint256 invocations, uint256 maxInvocations, bool active, address additionalPayee, uint256 additionalPayeePercentage ,string memory currency, address currencyAddress) {\n', '        artistAddress = projectIdToArtistAddress[_projectId];\n', '        pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];\n', '        invocations = projects[_projectId].invocations;\n', '        maxInvocations = projects[_projectId].maxInvocations;\n', '        active = projects[_projectId].active;\n', '        additionalPayee = projectIdToAdditionalPayee[_projectId];\n', '        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[_projectId];\n', '        currency = projectIdToCurrencySymbol[_projectId];\n', '        currencyAddress = projectIdToCurrencyAddress[_projectId];\n', '    }\n', '\n', '    function projectScriptInfo(uint256 _projectId) view public returns (string memory scriptJSON, uint256 scriptCount, bool useHashString, string memory ipfsHash, bool locked, bool paused) {\n', '        scriptJSON = projects[_projectId].scriptJSON;\n', '        scriptCount = projects[_projectId].scriptCount;\n', '        useHashString = projects[_projectId].useHashString;\n', '        ipfsHash = projects[_projectId].ipfsHash;\n', '        locked = projects[_projectId].locked;\n', '        paused = projects[_projectId].paused;\n', '    }\n', '\n', '    function projectScriptByIndex(uint256 _projectId, uint256 _index) view public returns (string memory){\n', '        return projects[_projectId].scripts[_index];\n', '    }\n', '\n', '    function projectURIInfo(uint256 _projectId) view public returns (string memory projectBaseURI, string memory projectBaseIpfsURI, bool useIpfs) {\n', '        projectBaseURI = projects[_projectId].projectBaseURI;\n', '        projectBaseIpfsURI = projects[_projectId].projectBaseIpfsURI;\n', '        useIpfs = projects[_projectId].useIpfs;\n', '    }\n', '/*\n', '    function projectShowAllTokens(uint _projectId) public view returns (uint256[] memory){\n', '        return projectIdToTokenIds[_projectId];\n', '    }\n', '    */\n', '\n', '    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\n', '        return _tokensOfOwner(owner);\n', '    }\n', '\n', '    function getRoyaltyData(uint256 _tokenId) public view returns (address artistAddress, address additionalPayee, uint256 additionalPayeePercentage, uint256 royaltyFeeByID) {\n', '        artistAddress = projectIdToArtistAddress[tokenIdToProjectId[_tokenId]];\n', '        additionalPayee = projectIdToAdditionalPayee[tokenIdToProjectId[_tokenId]];\n', '        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[tokenIdToProjectId[_tokenId]];\n', '        royaltyFeeByID = projectIdToSecondaryMarketRoyaltyPercentage[tokenIdToProjectId[_tokenId]];\n', '    }\n', '\n', '    function tokenURI(uint256 _tokenId) external view onlyValidTokenId(_tokenId) returns (string memory) {\n', '        if (bytes(staticIpfsImageLink[_tokenId]).length > 0) {\n', '            return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseIpfsURI, staticIpfsImageLink[_tokenId]);\n', '        }\n', '\n', '        if (!projects[tokenIdToProjectId[_tokenId]].dynamic && projects[tokenIdToProjectId[_tokenId]].useIpfs) {\n', '            return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseIpfsURI, projects[tokenIdToProjectId[_tokenId]].ipfsHash);\n', '        }\n', '\n', '        return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseURI, Strings.uint2str(_tokenId));\n', '    }\n', '}']