['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC, Reflexer Labs, INC.\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract OracleLike {\n', '    function getResultWithValidity() virtual external view returns (uint256, bool);\n', '}\n', 'abstract contract OracleRelayerLike {\n', '    function redemptionPrice() virtual external returns (uint256);\n', '    function modifyParameters(bytes32,uint256) virtual external;\n', '}\n', 'abstract contract PIDCalculator {\n', '    function computeRate(uint256, uint256, uint256) virtual external returns (uint256);\n', '    function rt(uint256, uint256, uint256) virtual external view returns (uint256);\n', '    function pscl() virtual external view returns (uint256);\n', '    function tlv() virtual external view returns (uint256);\n', '}\n', '\n', 'contract RateSetter is IncreasingTreasuryReimbursement {\n', '    // --- Variables ---\n', '    // Settlement flag\n', '    uint256 public contractEnabled;                 // [0 or 1]\n', '    // Last recorded system coin market price\n', '    uint256 public latestMarketPrice;               // [ray]\n', '    // When the price feed was last updated\n', '    uint256 public lastUpdateTime;                  // [timestamp]\n', '    // Enforced gap between calls\n', '    uint256 public updateRateDelay;                 // [seconds]\n', '\n', '    // --- System Dependencies ---\n', '    // OSM or medianizer for the system coin\n', '    OracleLike                public orcl;\n', '    // OracleRelayer where the redemption price is stored\n', '    OracleRelayerLike         public oracleRelayer;\n', '    // Calculator for the redemption rate\n', '    PIDCalculator             public pidCalculator;\n', '\n', '    // --- Events ---\n', '    event UpdateRedemptionRate(\n', '        uint marketPrice,\n', '        uint redemptionPrice,\n', '        uint redemptionRate\n', '    );\n', '    event FailUpdateRedemptionRate(\n', '        bytes reason\n', '    );\n', '    event FailUpdateOracle(bytes revertReason, address orcl);\n', '\n', '    constructor(\n', '      address oracleRelayer_,\n', '      address orcl_,\n', '      address treasury_,\n', '      address pidCalculator_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_,\n', '      uint256 updateRateDelay_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        oracleRelayer    = OracleRelayerLike(oracleRelayer_);\n', '        orcl             = OracleLike(orcl_);\n', '        pidCalculator    = PIDCalculator(pidCalculator_);\n', '\n', '        updateRateDelay  = updateRateDelay_;\n', '        contractEnabled  = 1;\n', '\n', '        emit ModifyParameters("orcl", orcl_);\n', '        emit ModifyParameters("oracleRelayer", oracleRelayer_);\n', '        emit ModifyParameters("pidCalculator", pidCalculator_);\n', '        emit ModifyParameters("updateRateDelay", updateRateDelay_);\n', '    }\n', '\n', '    // --- Management ---\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        require(contractEnabled == 1, "RateSetter/contract-not-enabled");\n', '        if (parameter == "orcl") orcl = OracleLike(addr);\n', '        else if (parameter == "oracleRelayer") oracleRelayer = OracleRelayerLike(addr);\n', '        else if (parameter == "treasury") {\n', '          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), "RateSetter/treasury-coin-not-set");\n', '          treasury = StabilityFeeTreasuryLike(addr);\n', '        }\n', '        else if (parameter == "pidCalculator") {\n', '          pidCalculator = PIDCalculator(addr);\n', '        }\n', '        else revert("RateSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '          parameter,\n', '          addr\n', '        );\n', '    }\n', '    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n', '        require(contractEnabled == 1, "RateSetter/contract-not-enabled");\n', '        if (parameter == "baseUpdateCallerReward") {\n', '          require(val <= maxUpdateCallerReward, "RateSetter/invalid-base-caller-reward");\n', '          baseUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(val >= baseUpdateCallerReward, "RateSetter/invalid-max-caller-reward");\n', '          maxUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(val >= RAY, "RateSetter/invalid-caller-reward-increase");\n', '          perSecondCallerRewardIncrease = val;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(val > 0, "RateSetter/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = val;\n', '        }\n', '        else if (parameter == "updateRateDelay") {\n', '          require(val >= 0, "RateSetter/invalid-call-gap-length");\n', '          updateRateDelay = val;\n', '        }\n', '        else revert("RateSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '          parameter,\n', '          val\n', '        );\n', '    }\n', '    function disableContract() external isAuthorized {\n', '        contractEnabled = 0;\n', '    }\n', '\n', '    // --- Feedback Mechanism ---\n', '    /**\n', '    * @notice Compute and set a new redemption rate\n', '    * @param feeReceiver The proposed address that should receive the reward for calling this function\n', "    *        (unless it's address(0) in which case msg.sender will get it)\n", '    **/\n', '    function updateRate(address feeReceiver) external {\n', '        require(contractEnabled == 1, "RateSetter/contract-not-enabled");\n', '        // Check delay between calls\n', '        require(either(subtract(now, lastUpdateTime) >= updateRateDelay, lastUpdateTime == 0), "RateSetter/wait-more");\n', '        // Get price feed updates\n', '        (uint256 marketPrice, bool hasValidValue) = orcl.getResultWithValidity();\n', '        // If the oracle has a value\n', '        require(hasValidValue, "RateSetter/invalid-oracle-value");\n', '        // If the price is non-zero\n', '        require(marketPrice > 0, "RateSetter/null-price");\n', '        // Get the latest redemption price\n', '        uint redemptionPrice = oracleRelayer.redemptionPrice();\n', "        // Get the caller's reward\n", '        uint256 callerReward = getCallerReward(lastUpdateTime, updateRateDelay);\n', '        // Store the latest market price\n', '        latestMarketPrice = ray(marketPrice);\n', '        // Calculate the rate\n', '        uint256 tlv       = pidCalculator.tlv();\n', '        uint256 iapcr     = rpower(pidCalculator.pscl(), tlv, RAY);\n', '        uint256 validated = pidCalculator.computeRate(\n', '            marketPrice,\n', '            redemptionPrice,\n', '            iapcr\n', '        );\n', '        // Store the timestamp of the update\n', '        lastUpdateTime = now;\n', "        // Update the rate inside the system (if it doesn't throw)\n", '        try oracleRelayer.modifyParameters("redemptionRate", validated) {\n', '          // Emit success event\n', '          emit UpdateRedemptionRate(\n', '            ray(marketPrice),\n', '            redemptionPrice,\n', '            validated\n', '          );\n', '        }\n', '        catch(bytes memory revertReason) {\n', '          emit FailUpdateRedemptionRate(\n', '            revertReason\n', '          );\n', '        }\n', '        // Pay the caller for updating the rate\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '\n', '    // --- Getters ---\n', '    /**\n', '    * @notice Get the market price from the system coin oracle\n', '    **/\n', '    function getMarketPrice() external view returns (uint256) {\n', '        (uint256 marketPrice, ) = orcl.getResultWithValidity();\n', '        return marketPrice;\n', '    }\n', '    /**\n', '    * @notice Get the redemption and the market prices for the system coin\n', '    **/\n', '    function getRedemptionAndMarketPrices() external returns (uint256 marketPrice, uint256 redemptionPrice) {\n', '        (marketPrice, ) = orcl.getResultWithValidity();\n', '        redemptionPrice = oracleRelayer.redemptionPrice();\n', '    }\n', '}']