['pragma solidity 0.5.12;\n', '\n', 'import "./MPool.sol";\n', '\n', 'contract MFactory is MBronze {\n', '    event LOG_NEW_POOL(\n', '        address indexed caller,\n', '        address indexed pool\n', '    );\n', '\n', '    address private _lpMining;\n', '    address private _swapMining;\n', '\n', '    mapping(address => bool) private _isMPool;\n', '    mapping(address => bool) private _isWhiteList;\n', '\n', '    function isMPool(address b)\n', '    external view returns (bool)\n', '    {\n', '        return _isMPool[b];\n', '    }\n', '\n', '    function isWhiteList(address w)\n', '    external view returns (bool)\n', '    {\n', '        return _isWhiteList[w];\n', '    }\n', '\n', '    function newMPool()\n', '    external\n', '    returns (MPool)\n', '    {\n', '        MPool mpool = new MPool();\n', '        _isMPool[address(mpool)] = true;\n', '        emit LOG_NEW_POOL(msg.sender, address(mpool));\n', '        mpool.setController(msg.sender);\n', '        return mpool;\n', '    }\n', '\n', '    address private _mlabs;\n', '    address public feeTo;\n', '\n', '    constructor() public {\n', '        _mlabs = msg.sender;\n', '    }\n', '\n', '    function getMLabs()\n', '    external view\n', '    returns (address)\n', '    {\n', '        return _mlabs;\n', '    }\n', '\n', '    function getFeeTo()\n', '    external view\n', '    returns (address)\n', '    {\n', '        return feeTo;\n', '    }\n', '\n', '    function setMLabs(address b)\n', '    external\n', '    {\n', '        require(msg.sender == _mlabs, "ERR_NOT_BLABS");\n', '        _mlabs = b;\n', '    }\n', '\n', '    function setFeeTo(address b)\n', '    external\n', '    {\n', '        require(msg.sender == _mlabs, "ERR_NOT_BLABS");\n', '        feeTo = b;\n', '    }\n', '\n', '    function updateWhiteList(address w, bool status)\n', '    external\n', '    {\n', '        require(msg.sender == _mlabs, "ERR_NOT_MLABS");\n', '        _isWhiteList[w] = status;\n', '    }\n', '\n', '    function getMining()\n', '    external view\n', '    returns (address lpMiningAdr, address swapMiningAdr)\n', '    {\n', '        return (_lpMining, _swapMining);\n', '    }\n', '\n', '    function setMining(address lpMining, address swapMining)\n', '    external\n', '    {\n', '        require(msg.sender == _mlabs, "ERR_NOT_MLABS");\n', '        _lpMining = lpMining;\n', '        _swapMining = swapMining;\n', '    }\n', '\n', '}']