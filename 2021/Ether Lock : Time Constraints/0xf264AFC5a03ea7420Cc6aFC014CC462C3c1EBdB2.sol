['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-15\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: localhost/contract/library/ErrorCode.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'library ErrorCode {\n', '\n', "    string constant FORBIDDEN = 'YouSwap:FORBIDDEN';\n", "    string constant IDENTICAL_ADDRESSES = 'YouSwap:IDENTICAL_ADDRESSES';\n", "    string constant ZERO_ADDRESS = 'YouSwap:ZERO_ADDRESS';\n", "    string constant INVALID_ADDRESSES = 'YouSwap:INVALID_ADDRESSES';\n", "    string constant BALANCE_INSUFFICIENT = 'YouSwap:BALANCE_INSUFFICIENT';\n", "    string constant REWARDTOTAL_LESS_THAN_REWARDPROVIDE = 'YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE';\n", "    string constant PARAMETER_TOO_LONG = 'YouSwap:PARAMETER_TOO_LONG';\n", "    string constant REGISTERED = 'YouSwap:REGISTERED';\n", "    string constant MINING_NOT_STARTED = 'YouSwap:MINING_NOT_STARTED';\n", "    string constant END_OF_MINING = 'YouSwap:END_OF_MINING';\n", "    string constant POOL_NOT_EXIST_OR_END_OF_MINING = 'YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING';\n", '    \n', '}\n', '// File: localhost/contract/interface/IYouswapInviteV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'interface IYouswapInviteV1 {\n', '\n', '    struct UserInfo {\n', '        address upper;//上级\n', '        address[] lowers;//下级\n', '        uint256 startBlock;//邀请块高\n', '    }\n', '\n', '    event InviteV1(address indexed owner, address indexed upper, uint256 indexed height);//被邀请人的地址，邀请人的地址，邀请块高\n', '\n', '    function inviteCount() external view returns (uint256);//邀请人数\n', '\n', '    function inviteUpper1(address) external view returns (address);//上级邀请\n', '\n', '    function inviteUpper2(address) external view returns (address, address);//上级邀请\n', '\n', '    function inviteLower1(address) external view returns (address[] memory);//下级邀请\n', '\n', '    function inviteLower2(address) external view returns (address[] memory, address[] memory);//下级邀请\n', '\n', '    function inviteLower2Count(address) external view returns (uint256, uint256);//下级邀请\n', '    \n', '    function register() external returns (bool);//注册邀请关系\n', '\n', '    function acceptInvitation(address) external returns (bool);//注册邀请关系\n', '    \n', '    function inviteBatch(address[] memory) external returns (uint, uint);//注册邀请关系：输入数量，成功数量\n', '\n', '}\n', '// File: localhost/contract/implement/YouswapInviteV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', 'contract YouswapInviteV1 is IYouswapInviteV1 {\n', '\n', '    address public constant ZERO = address(0);\n', '    uint256 public startBlock;\n', '    address[] public inviteUserInfoV1;\n', '    mapping(address => UserInfo) public inviteUserInfoV2;\n', '\n', '    constructor () {\n', '        startBlock = block.number;\n', '    }\n', '    \n', '    function inviteCount() override external view returns (uint256) {\n', '        return inviteUserInfoV1.length;\n', '    }\n', '\n', '    function inviteUpper1(address _owner) override external view returns (address) {\n', '        return inviteUserInfoV2[_owner].upper;\n', '    }\n', '\n', '    function inviteUpper2(address _owner) override external view returns (address, address) {\n', '        address upper1 = inviteUserInfoV2[_owner].upper;\n', '        address upper2 = address(0);\n', '        if (address(0) != upper1) {\n', '            upper2 = inviteUserInfoV2[upper1].upper;\n', '        }\n', '\n', '        return (upper1, upper2);\n', '    }\n', '\n', '    function inviteLower1(address _owner) override external view returns (address[] memory) {\n', '        return inviteUserInfoV2[_owner].lowers;\n', '    }\n', '\n', '    function inviteLower2(address _owner) override external view returns (address[] memory, address[] memory) {\n', '        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\n', '        uint256 count = 0;\n', '        uint256 lowers1Len = lowers1.length;\n', '        for (uint256 i = 0; i < lowers1Len; i++) {\n', '            count += inviteUserInfoV2[lowers1[i]].lowers.length;\n', '        }\n', '        address[] memory lowers;\n', '        address[] memory lowers2 = new address[](count);\n', '        count = 0;\n', '        for (uint256 i = 0; i < lowers1Len; i++) {\n', '            lowers = inviteUserInfoV2[lowers1[i]].lowers;\n', '            for (uint256 j = 0; j < lowers.length; j++) {\n', '                lowers2[count] = lowers[j];\n', '                count++;\n', '            }\n', '        }\n', '        \n', '        return (lowers1, lowers2);\n', '    }\n', '\n', '    function inviteLower2Count(address _owner) override external view returns (uint256, uint256) {\n', '        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\n', '        uint256 lowers2Len = 0;\n', '        uint256 len = lowers1.length;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            lowers2Len += inviteUserInfoV2[lowers1[i]].lowers.length;\n', '        }\n', '        \n', '        return (lowers1.length, lowers2Len);\n', '    }\n', '\n', '    function register() override external returns (bool) {\n', '        UserInfo storage user = inviteUserInfoV2[tx.origin];\n', '        require(0 == user.startBlock, ErrorCode.REGISTERED);\n', '        user.upper = ZERO;\n', '        user.startBlock = block.number;\n', '        inviteUserInfoV1.push(tx.origin);\n', '        \n', '        emit InviteV1(tx.origin, user.upper, user.startBlock);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function acceptInvitation(address _inviter) override external returns (bool) {\n', '        require(msg.sender != _inviter, ErrorCode.FORBIDDEN);\n', '        UserInfo storage user = inviteUserInfoV2[msg.sender];\n', '        require(0 == user.startBlock, ErrorCode.REGISTERED);\n', '        UserInfo storage upper = inviteUserInfoV2[_inviter];\n', '        if (0 == upper.startBlock) {\n', '            upper.upper = ZERO;\n', '            upper.startBlock = block.number;\n', '            inviteUserInfoV1.push(_inviter);\n', '            \n', '            emit InviteV1(_inviter, upper.upper, upper.startBlock);\n', '        }\n', '        user.upper = _inviter;\n', '        upper.lowers.push(msg.sender);\n', '        user.startBlock = block.number;\n', '        inviteUserInfoV1.push(msg.sender);\n', '        \n', '        emit InviteV1(msg.sender, user.upper, user.startBlock);\n', '\n', '        return true;\n', '    }\n', '\n', '    function inviteBatch(address[] memory _invitees) override external returns (uint, uint) {\n', '        uint len = _invitees.length;\n', '        require(len <= 100, ErrorCode.PARAMETER_TOO_LONG);\n', '        UserInfo storage user = inviteUserInfoV2[msg.sender];\n', '        if (0 == user.startBlock) {\n', '            user.upper = ZERO;\n', '            user.startBlock = block.number;\n', '            inviteUserInfoV1.push(msg.sender);\n', '                        \n', '            emit InviteV1(msg.sender, user.upper, user.startBlock);\n', '        }\n', '        uint count = 0;\n', '        for (uint i = 0; i < len; i++) {\n', '            if ((address(0) != _invitees[i]) && (msg.sender != _invitees[i])) {\n', '                UserInfo storage lower = inviteUserInfoV2[_invitees[i]];\n', '                if (0 == lower.startBlock) {\n', '                    lower.upper = msg.sender;\n', '                    lower.startBlock = block.number;\n', '                    user.lowers.push(_invitees[i]);\n', '                    inviteUserInfoV1.push(_invitees[i]);\n', '                    count++;\n', '\n', '                    emit InviteV1(_invitees[i], msg.sender, lower.startBlock);\n', '                }\n', '            }\n', '        }\n', '\n', '        return (len, count);\n', '    }\n', '\n', '}\n', '// File: localhost/contract/interface/ITokenYou.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'interface ITokenYou {\n', '    \n', '    function mint(address recipient, uint256 amount) external;\n', '    \n', '    function decimals() external view returns (uint8);\n', '    \n', '}\n', '\n', '// File: localhost/contract/interface/IYouswapFactoryV2.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', '/**\n', '挖矿\n', ' */\n', 'interface IYouswapFactoryV2 {\n', '\n', '    /**\n', '    矿池可视化信息\n', '     */\n', '    struct PoolViewInfo {\n', '        address token;//token合约地址\n', '        string name;//名称\n', '        uint256 multiple;//奖励倍数\n', '        uint256 priority;//排序\n', '    }\n', '\n', '    /**\n', '    矿池质押信息\n', '     */\n', '    struct PoolStakeInfo {\n', '        uint256 startBlock;//挖矿开始块高\n', '        address token;//token合约地址\n', '        uint256 amount;//质押数量\n', '        uint256 lastRewardBlock;//最后发放奖励块高\n', '        uint256 totalPower;//总算力\n', '        uint256 powerRatio;//质押数量到算力系数\n', '        uint256 maxStakeAmount;//最大质押数量\n', '        uint256 endBlock;//挖矿结束块高\n', '    }\n', '    \n', '    /**\n', '    矿池奖励信息\n', '     */\n', '    struct PoolRewardInfo {        \n', '        address token;//挖矿奖励币种:A/B/C\n', '        uint256 rewardTotal;//矿池总奖励\n', '        uint256 rewardPerBlock;//单个区块奖励\n', '        uint256 rewardProvide;//矿池已发放奖励\n', '        uint256 rewardPerShare;//单位算力奖励\n', '    }\n', '\n', '    /**\n', '    用户质押信息\n', '     */\n', '    struct UserStakeInfo {\n', '        uint256 startBlock;//质押开始块高\n', '        uint256 amount;//质押数量\n', '        uint256 invitePower;//邀请算力\n', '        uint256 stakePower;//质押算力\n', '        uint256[] invitePendingRewards;//待领取奖励\n', '        uint256[] stakePendingRewards;//待领取奖励\n', '        uint256[] inviteRewardDebts;//邀请负债\n', '        uint256[] stakeRewardDebts;//质押负债\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '    /**\n', '    自邀请\n', '    self：Sender地址\n', '     */\n', '    event InviteRegister(address indexed self);\n', '\n', '    /**\n', '    更新矿池信息\n', '\n', '    action：true(新建矿池)，false(更新矿池)\n', '    poolId：矿池ID\n', '    name：矿池名称\n', '    token：质押token合约地址\n', '    powerRatio：质押数量到算力系数=最小质押数量\n', '    maxStakeAmount：最大质押数量\n', '    startBlock：矿池开始挖矿块高\n', '    multiple：矿池奖励倍数\n', '    priority：矿池排序\n', '    tokens：挖矿奖励token合约地址\n', '    rewardTotal：挖矿总奖励数量\n', '    rewardPerBlock：区块奖励数量\n', '     */\n', '    event UpdatePool(bool action, uint256 poolId, string name, address indexed token, uint256 powerRatio, uint256 maxStakeAmount, uint256 startBlock, uint256 multiple, uint256 priority, address[] tokens, uint256[] _rewardTotals, uint256[] rewardPerBlocks);\n', '\n', '    /**\n', '    矿池挖矿结束\n', '    \n', '    poolId：矿池ID\n', '     */\n', '    event EndPool(uint256 poolId);    \n', '    \n', '    /**\n', '    质押\n', '\n', '    poolId：矿池ID\n', '    token：token合约地址\n', '    from：质押转出地址\n', '    amount：质押数量\n', '     */\n', '    event Stake(uint256 poolId, address indexed token, address indexed from, uint256 amount);\n', '\n', '    /**\n', '    算力\n', '\n', '    poolId：矿池ID\n', '    token：token合约地址\n', '    totalPower：矿池总算力\n', '    owner：用户地址\n', '    ownerInvitePower：用户邀请算力\n', '    ownerStakePower：用户质押算力\n', '    upper1：上1级地址\n', '    upper1InvitePower：上1级邀请算力\n', '    upper2：上2级地址\n', '    upper2InvitePower：上2级邀请算力\n', '     */\n', '    event UpdatePower(uint256 poolId, address token, uint256 totalPower, address indexed owner, uint256 ownerInvitePower, uint256 ownerStakePower, address indexed upper1, uint256 upper1InvitePower, address indexed upper2, uint256 upper2InvitePower);    \n', '\n', '    /**\n', '    解质押\n', '    \n', '    poolId：矿池ID\n', '    token：token合约地址\n', '    to：解质押转入地址\n', '    amount：解质押数量\n', '     */\n', '    event UnStake(uint256 poolId, address indexed token, address indexed to, uint256 amount);\n', '    \n', '    /**\n', '    提取奖励\n', '\n', '    poolId：矿池ID\n', '    token：token合约地址\n', '    to：奖励转入地址\n', '    inviteAmount：奖励数量\n', '    stakeAmount：奖励数量\n', '     */\n', '    event WithdrawReward(uint256 poolId, address indexed token, address indexed to, uint256 inviteAmount, uint256 stakeAmount);\n', '    \n', '    /**\n', '    挖矿\n', '\n', '    poolId：矿池ID\n', '    token：token合约地址\n', '    amount：奖励数量\n', '     */\n', '    event Mint(uint256 poolId, address indexed token, uint256 amount);\n', '\n', '    /**\n', '    紧急提取奖励事件\n', '\n', '    token：领取token合约地址\n', '    to：领取地址\n', '    amount：领取token数量\n', '     */\n', '    event SafeWithdraw(address indexed token, address indexed to, uint256 amount);\n', '    \n', '    /**\n', '    转移Owner\n', '\n', '    oldOwner：旧Owner\n', '    newOwner：新Owner\n', '     */\n', '    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    /**\n', '    修改OWNER\n', '     */\n', '    function transferOwnership(address owner) external;\n', '    \n', '    /**\n', '    质押\n', '    */\n', '    function stake(uint256 poolId, uint256 amount) external;\n', '    \n', '    /**\n', '    解质押并提取奖励\n', '     */\n', '    function unStake(uint256 poolId, uint256 amount) external;\n', '    \n', '    /**\n', '    批量解质押并提取奖励\n', '     */\n', '    function unStakes(uint256[] memory _poolIds) external;\n', '    \n', '    /**\n', '    提取奖励\n', '     */\n', '    function withdrawReward(uint256 poolId) external;\n', '\n', '    /**\n', '    批量提取奖励\n', '     */\n', '    function withdrawRewards(uint256[] memory _poolIds) external;\n', '\n', '    /**\n', '    紧急转移token\n', '    */\n', '    function safeWithdraw(address token, address to, uint256 amount) external;\n', '        \n', '    /**\n', '    算力占比\n', '     */\n', '    function powerScale(uint256 poolId, address user) external view returns (uint256, uint256);\n', '    \n', '    /**\n', '    待领取的奖励\n', '     */\n', '    function pendingRewardV2(uint256 poolId, address user) external view returns (address[] memory, uint256[] memory);\n', '    \n', '    function pendingRewardV3(uint256 poolId, address user) external view returns (address[] memory, uint256[] memory, uint256[] memory);\n', '    \n', '    /**\n', '    通过token查询矿池编号\n', '     */\n', '    function poolNumbers(address token) external view returns (uint256[] memory);\n', '\n', '    /**\n', '    矿池ID\n', '     */\n', '    function poolIdsV2() external view returns (uint256[] memory);\n', '    \n', '    /**\n', '    质押数量范围\n', '     */\n', '    function stakeRange(uint256 poolId) external view returns (uint256, uint256);\n', '    \n', '    /**\n', '    质押数量到算力系数\n', '     */\n', '    function getPowerRatio(uint256 poolId) external view returns (uint256);\n', '\n', '    function getRewardInfo(uint256 poolId, address user, uint256 index) external view returns (uint256, uint256, uint256, uint256);\n', '    \n', '    /**\n', '    设置运营权限\n', '     */\n', '    function setOperateOwner(address user, bool state) external;\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '    /**\n', '    新建矿池\n', '     */\n', '    function addPool(string memory name, address token, uint256 powerRatio, uint256 startBlock, uint256 multiple, uint256 priority, address[] memory tokens, uint256[] memory rewardTotals, uint256[] memory rewardPerBlocks) external;\n', '        \n', '    /**\n', '    修改矿池区块奖励\n', '     */\n', '    function setRewardPerBlock(uint256 poolId, address token, uint256 rewardPerBlock) external;\n', '\n', '    /**\n', '    修改矿池总奖励\n', '     */\n', '    function setRewardTotal(uint256 poolId, address token, uint256 rewardTotal) external;\n', '\n', '    /**\n', '    修改矿池名称\n', '     */\n', '    function setName(uint256 poolId, string memory name) external;\n', '    \n', '    /**\n', '    修改矿池倍数\n', '     */\n', '    function setMultiple(uint256 poolId, uint256 multiple) external;\n', '    \n', '    /**\n', '    修改矿池排序\n', '     */\n', '    function setPriority(uint256 poolId, uint256 priority) external;\n', '\n', '    /**\n', '    修改矿池最大可质押数量\n', '     */\n', '    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) external;\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '}\n', '// File: localhost/contract/implement/YouswapFactoryV2.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', '\n', 'contract YouswapFactoryV2 is IYouswapFactoryV2 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address public constant ZERO = address(0);\n', '    uint256 public constant INVITE_SELF_REWARD = 5;//质押自奖励，5%\n', '    uint256 public constant INVITE1_REWARD = 15;//1级邀请奖励，15%\n', '    uint256 public constant INVITE2_REWARD = 10;//2级邀请奖励，10%\n', '    \n', '    uint256 public deployBlock;//合约部署块高\n', '    address public owner;//所有权限\n', '    mapping(address => bool) public operateOwner;//运营权限\n', '    ITokenYou public you;//you contract\n', '    YouswapInviteV1 public invite;//invite contract\n', '\n', '    uint256 public poolCount = 0;//矿池数量\n', '    uint256[] public poolIds;//矿池ID\n', '    mapping(uint256 => PoolViewInfo) public poolViewInfos;//矿池可视化信息，poolID->PoolViewInfo\n', '    mapping(uint256 => PoolStakeInfo) public poolStakeInfos;//矿池质押信息，poolID->PoolStakeInfo\n', '    mapping(uint256 => PoolRewardInfo[]) public poolRewardInfos;//矿池奖励信息，poolID->PoolRewardInfo[]\n', '    mapping(uint256 => mapping(address => UserStakeInfo)) public userStakeInfos;//用户质押信息，poolID->user-UserStakeInfo\n', '    mapping(address => uint256) public tokenPendingRewards;//现存token奖励数量，token-amount\n', '    mapping(address => mapping(address => uint256)) public userReceiveRewards;//用户已领取数量，token->user->amount\n', '    \n', '    modifier onlyOwner() {//校验owner权限\n', '        require(owner == msg.sender, "YouSwap:FORBIDDEN_NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperater() {//校验运营权限\n', '        require(operateOwner[msg.sender], "YouSwap:FORBIDDEN_NOT_OPERATER");\n', '        _;\n', '    }\n', '\n', '    constructor (ITokenYou _you, YouswapInviteV1 _invite) {\n', '        deployBlock = block.number;\n', '        owner = msg.sender;\n', '        invite = _invite;\n', '        you = _you;\n', '        _setOperateOwner(owner, true);//给owner授权运营权限\n', '    }\n', '\n', '    /**\n', '    修改OWNER\n', '     */\n', '    function transferOwnership(address _owner) override external onlyOwner {\n', '        require(ZERO != _owner, "YouSwap:INVALID_ADDRESSES");\n', '        emit TransferOwnership(owner, _owner);\n', '        owner = _owner;\n', '    }\n', '    \n', '    /**\n', '    质押\n', '    */\n', '    function stake(uint256 poolId, uint256 amount) override external {\n', '        require(0 < amount, "YouSwap:PARAMETER_ERROR");\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), "YouSwap:POOL_NOT_EXIST_OR_MINT_NOT_START");//是否开启挖矿\n', '        require((poolStakeInfo.powerRatio <= amount) && (poolStakeInfo.amount.add(amount) < poolStakeInfo.maxStakeAmount), "YouSwap:STAKE_AMOUNT_TOO_SMALL_OR_TOO_LARGE");\n', '        (, uint256 startBlock) = invite.inviteUserInfoV2(msg.sender);//sender是否注册邀请关系\n', '        if (0 == startBlock) {\n', '            invite.register();//sender注册邀请关系\n', '            emit InviteRegister(msg.sender);\n', '        }\n', '        IERC20(poolStakeInfo.token).safeTransferFrom(msg.sender, address(this), amount);//转移sender的质押资产到this\n', '        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);//获取上2级邀请关系\n', '        initRewardInfo(poolId, msg.sender, upper1, upper2);\n', '        uint256[] memory rewardPerShares = computeReward(poolId);//计算单位算力奖励\n', '        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//给sender发放收益，给upper1，upper2增加待领取收益\n', '        addPower(poolId, msg.sender, amount, poolStakeInfo.powerRatio, upper1, upper2);//增加sender，upper1，upper2算力\n', '        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//重置sender，upper1，upper2负债\n', '        emit Stake(poolId, poolStakeInfo.token, msg.sender, amount);\n', '    }\n', '    \n', '    /**\n', '    解质押并提取奖励\n', '     */\n', '    function unStake(uint256 poolId, uint256 amount) override external {\n', '        _unStake(poolId, amount);\n', '    }\n', '    \n', '    /**\n', '    批量解质押并提取奖励\n', '     */\n', '    function unStakes(uint256[] memory _poolIds) override external {\n', '        require((0 < _poolIds.length) && (50 >= _poolIds.length), "YouSwap:PARAMETER_ERROR_TOO_SHORT_OR_LONG");\n', '        uint256 amount;\n', '        uint256 poolId;\n', '        for(uint i = 0; i < _poolIds.length; i++) {\n', '            poolId = _poolIds[i];\n', '            amount = userStakeInfos[poolId][msg.sender].amount;//sender的质押数量\n', '            if (0 < amount) {\n', '                _unStake(poolId, amount);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '    提取奖励\n', '     */\n', '    function withdrawReward(uint256 poolId) override external {\n', '        _withdrawReward(poolId);\n', '    }\n', '\n', '    /**\n', '    批量提取奖励\n', '     */\n', '    function withdrawRewards(uint256[] memory _poolIds) override external {\n', '        require((0 < _poolIds.length) && (50 >= _poolIds.length), "YouSwap:PARAMETER_ERROR_TOO_SHORT_OR_LONG");\n', '        for(uint i = 0; i < _poolIds.length; i++) {\n', '            _withdrawReward(_poolIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    紧急转移token\n', '    */\n', '    function safeWithdraw(address token, address to, uint256 amount) override external onlyOwner {\n', '        require((ZERO != token) && (ZERO != to) && (0 < amount), "YouSwap:ZERO_ADDRESS_OR_ZERO_AMOUNT");\n', '        require(IERC20(token).balanceOf(address(this)) >= amount, "YouSwap:BALANCE_INSUFFICIENT");\n', '        IERC20(token).safeTransfer(to, amount);//紧急转移资产到to地址\n', '        emit SafeWithdraw(token, to, amount);\n', '    }\n', '    \n', '    /**\n', '    算力占比\n', '     */\n', '    function powerScale(uint256 poolId, address user) override external view returns (uint256, uint256) {\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        if (0 == poolStakeInfo.totalPower) {\n', '            return (0, 0);\n', '        }\n', '        UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\n', '        return (userStakeInfo.invitePower.add(userStakeInfo.stakePower), poolStakeInfo.totalPower);\n', '    }\n', '    \n', '    /**\n', '    待领取的奖励\n', '     */\n', '    function pendingRewardV2(uint256 poolId, address user) override external view returns (address[] memory, uint256[] memory) {\n', '        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\n', '        address[] memory tokens = new address[](_poolRewardInfos.length);\n', '        uint256[] memory pendingRewards = new uint256[](_poolRewardInfos.length);\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        if (ZERO != poolStakeInfo.token) {\n', '            uint256 totalReward = 0;\n', '            uint256 rewardPre;\n', '            UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\n', '            for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '                PoolRewardInfo memory poolRewardInfo = _poolRewardInfos[i];\n', '                if (poolStakeInfo.startBlock <= block.number) {\n', '                    totalReward = 0;\n', '                    if (userStakeInfo.invitePendingRewards.length == _poolRewardInfos.length) {\n', '                        if (0 < poolStakeInfo.totalPower) {\n', '                            rewardPre = block.number.sub(poolStakeInfo.lastRewardBlock).mul(poolRewardInfo.rewardPerBlock);//待快照奖励\n', '                            if (poolRewardInfo.rewardProvide.add(rewardPre) >= poolRewardInfo.rewardTotal) {//是否超出总奖励\n', '                                rewardPre = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//核减超出奖励\n', '                            }\n', '                            poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(rewardPre.mul(1e24).div(poolStakeInfo.totalPower));//累加待快照的单位算力奖励\n', '                        }\n', '                        totalReward = userStakeInfo.invitePendingRewards[i];//待领取奖励\n', '                        totalReward = totalReward.add(userStakeInfo.stakePendingRewards[i]);//待领取奖励\n', '                        totalReward = totalReward.add(userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24));//待快照的邀请奖励\n', '                        totalReward = totalReward.add(userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24));//待快照的质押奖励\n', '                    }\n', '                    pendingRewards[i] = totalReward;\n', '                }\n', '                tokens[i] = poolRewardInfo.token;\n', '            }\n', '        }\n', '\n', '        return (tokens, pendingRewards);\n', '    }\n', '\n', '    /**\n', '    待领取的奖励\n', '     */\n', '    function pendingRewardV3(uint256 poolId, address user) override external view returns (address[] memory, uint256[] memory, uint256[] memory) {\n', '        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\n', '        address[] memory tokens = new address[](_poolRewardInfos.length);\n', '        uint256[] memory invitePendingRewards = new uint256[](_poolRewardInfos.length);\n', '        uint256[] memory stakePendingRewards = new uint256[](_poolRewardInfos.length);\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        if (ZERO != poolStakeInfo.token) {\n', '            uint256 inviteReward = 0;\n', '            uint256 stakeReward = 0;\n', '            uint256 rewardPre;\n', '            UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\n', '            for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '                PoolRewardInfo memory poolRewardInfo = _poolRewardInfos[i];\n', '                if (poolStakeInfo.startBlock <= block.number) {\n', '                    inviteReward = 0;\n', '                    stakeReward = 0;\n', '                    if (userStakeInfo.invitePendingRewards.length == _poolRewardInfos.length) {\n', '                        if (0 < poolStakeInfo.totalPower) {\n', '                            rewardPre = block.number.sub(poolStakeInfo.lastRewardBlock).mul(poolRewardInfo.rewardPerBlock);//待快照奖励\n', '                            if (poolRewardInfo.rewardProvide.add(rewardPre) >= poolRewardInfo.rewardTotal) {//是否超出总奖励\n', '                                rewardPre = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//核减超出奖励\n', '                            }\n', '                            poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(rewardPre.mul(1e24).div(poolStakeInfo.totalPower));//累加待快照的单位算力奖励\n', '                        }\n', '                        inviteReward = userStakeInfo.invitePendingRewards[i];//待领取奖励\n', '                        stakeReward = userStakeInfo.stakePendingRewards[i];//待领取奖励\n', '                        inviteReward = inviteReward.add(userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24));//待快照的邀请奖励\n', '                        stakeReward = stakeReward.add(userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24));//待快照的质押奖励\n', '                    }\n', '                    invitePendingRewards[i] = inviteReward;\n', '                    stakePendingRewards[i] = stakeReward;\n', '                }\n', '                tokens[i] = poolRewardInfo.token;\n', '            }\n', '        }\n', '\n', '        return (tokens, invitePendingRewards, stakePendingRewards);\n', '    }\n', '    \n', '    /**\n', '    通过token查询矿池编号\n', '     */\n', '    function poolNumbers(address token) override external view returns (uint256[] memory) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < poolIds.length; i++) {\n', '            if (poolViewInfos[poolIds[i]].token == token) {\n', '                count = count.add(1);\n', '            }\n', '        }\n', '        uint256[] memory ids = new uint256[](count);\n', '        count = 0;\n', '        for (uint i = 0; i < poolIds.length; i++) {\n', '            if (poolViewInfos[poolIds[i]].token == token) {\n', '                ids[count] = poolIds[i];\n', '                count = count.add(1);\n', '            }\n', '        }\n', '        return ids;\n', '    }\n', '\n', '    /**\n', '    矿池ID\n', '     */\n', '    function poolIdsV2() override external view returns (uint256[] memory) {\n', '        return poolIds;\n', '    }\n', '\n', '    /**\n', '    质押数量范围\n', '     */    \n', '    function stakeRange(uint256 poolId) override external view returns (uint256, uint256) {\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        if (ZERO == poolStakeInfo.token) {\n', '            return (0, 0);\n', '        }\n', '        return (poolStakeInfo.powerRatio, poolStakeInfo.maxStakeAmount.sub(poolStakeInfo.amount));\n', '    }\n', '    \n', '    /**\n', '    质押数量到算力系数\n', '     */\n', '    function getPowerRatio(uint256 poolId) override external view returns (uint256) {\n', '        return poolStakeInfos[poolId].powerRatio;\n', '    }\n', '    \n', '    function getRewardInfo(uint256 poolId, address user, uint256 index) override external view returns (uint256, uint256, uint256, uint256) {\n', '        UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\n', '        return (userStakeInfo.invitePendingRewards[index], userStakeInfo.stakePendingRewards[index], userStakeInfo.inviteRewardDebts[index], userStakeInfo.stakeRewardDebts[index]);\n', '    }\n', '\n', '    /**\n', '    设置运营权限\n', '     */\n', '    function setOperateOwner(address user, bool state) override external onlyOwner {\n', '        _setOperateOwner(user, state);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////    \n', '    \n', '    /**\n', '    新建矿池\n', '     */\n', '    function addPool(string memory name, address token, uint256 powerRatio, uint256 startBlock, uint256 multiple, uint256 priority, address[] memory tokens, uint256[] memory _rewardTotals, uint256[] memory rewardPerBlocks) override external onlyOperater {\n', '        require((ZERO != token) && (address(this) != token), "YouSwap:PARAMETER_ERROR_TOKEN");\n', '        require(0 < powerRatio, "YouSwap:POWERRATIO_MUST_GREATER_THAN_ZERO");\n', '        require((0 < tokens.length) && (10 >= tokens.length) && (tokens.length == _rewardTotals.length) && (tokens.length == rewardPerBlocks.length), "YouSwap:PARAMETER_ERROR_REWARD");\n', '        startBlock = startBlock < block.number ? block.number : startBlock;//合法开始块高\n', '        uint256 poolId = poolCount.add(20000000);//矿池ID，偏移20000000，与v1区分开\n', '        poolIds.push(poolId);//全部矿池ID\n', '        poolCount = poolCount.add(1);//矿池总数量\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];//矿池可视化信息\n', '        poolViewInfo.token = token;//矿池质押token\n', '        poolViewInfo.name = name;//矿池名称\n', '        poolViewInfo.multiple = multiple;//矿池倍数\n', '        if (0 < priority) {\n', '            poolViewInfo.priority = priority;//矿池优先级\n', '        }else {\n', '            poolViewInfo.priority = poolIds.length.mul(100).add(75);//矿池优先级\n', '        }\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//矿池质押信息\n', '        poolStakeInfo.startBlock = startBlock;//开始块高\n', '        poolStakeInfo.token = token;//矿池质押token\n', '        poolStakeInfo.amount = 0;//矿池质押数量\n', '        poolStakeInfo.lastRewardBlock = startBlock.sub(1);//矿池上次快照块高\n', '        poolStakeInfo.totalPower = 0;//矿池总算力\n', '        poolStakeInfo.powerRatio = powerRatio;//质押数量到算力系数\n', '        poolStakeInfo.maxStakeAmount = 0;//最大质押数量\n', '        poolStakeInfo.endBlock = 0;//矿池结束块高\n', '        uint256 minRewardPerBlock = uint256(0) - uint256(1);//最小区块奖励\n', '        for(uint i = 0; i < tokens.length; i++) {\n', '            require((ZERO != tokens[i]) && (address(this) != tokens[i]), "YouSwap:PARAMETER_ERROR_TOKEN");\n', '            require(0 < _rewardTotals[i], "YouSwap:PARAMETER_ERROR_REWARD_TOTAL");\n', '            require(0 < rewardPerBlocks[i], "YouSwap:PARAMETER_ERROR_REWARD_PER_BLOCK");\n', '            if (address(you) != tokens[i]) {//非you奖励\n', '                tokenPendingRewards[tokens[i]] = tokenPendingRewards[tokens[i]].add(_rewardTotals[i]);\n', '                require(IERC20(tokens[i]).balanceOf(address(this)) >= tokenPendingRewards[tokens[i]], "YouSwap:BALANCE_INSUFFICIENT");//奖励数量是否足额\n', '            }\n', '            PoolRewardInfo memory poolRewardInfo;//矿池奖励信息\n', '            poolRewardInfo.token = tokens[i];//奖励token\n', '            poolRewardInfo.rewardTotal = _rewardTotals[i];//总奖励\n', '            poolRewardInfo.rewardPerBlock = rewardPerBlocks[i];//区块奖励\n', '            poolRewardInfo.rewardProvide = 0;//已发放奖励\n', '            poolRewardInfo.rewardPerShare = 0;//单位算力简历\n', '            poolRewardInfos[poolId].push(poolRewardInfo);\n', '            if (minRewardPerBlock > poolRewardInfo.rewardPerBlock) {\n', '                minRewardPerBlock = poolRewardInfo.rewardPerBlock;\n', '                poolStakeInfo.maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\n', '            }\n', '        }\n', '        sendUpdatePoolEvent(true, poolId);\n', '    }\n', '\n', '    /**\n', '    修改矿池区块奖励\n', '     */\n', '    function setRewardPerBlock(uint256 poolId, address token, uint256 rewardPerBlock) override external onlyOperater {\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在、是否结束\n', '        computeReward(poolId);//计算单位算力奖励\n', '        uint256 minRewardPerBlock = uint256(0) - uint256(1);//最小区块奖励\n', '        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\n', '        for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '            if (_poolRewardInfos[i].token == token) {\n', '                _poolRewardInfos[i].rewardPerBlock = rewardPerBlock;//修改矿池区块奖励\n', '                sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '            }\n', '            if (minRewardPerBlock > _poolRewardInfos[i].rewardPerBlock) {\n', '                minRewardPerBlock = _poolRewardInfos[i].rewardPerBlock;\n', '                poolStakeInfo.maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    修改矿池总奖励\n', '     */\n', '    function setRewardTotal(uint256 poolId, address token, uint256 rewardTotal) override external onlyOperater {\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在、是否结束\n', '        computeReward(poolId);//计算单位算力奖励\n', '        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\n', '        for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '            if (_poolRewardInfos[i].token == token) {\n', '                require(_poolRewardInfos[i].rewardProvide <= rewardTotal, "YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE");//新总奖励是否超出已发放奖励\n', '                if (address(you) != token) {//非you\n', '                    if (_poolRewardInfos[i].rewardTotal > rewardTotal) {//新总奖励小于旧总奖励\n', '                        tokenPendingRewards[token] = tokenPendingRewards[token].sub(_poolRewardInfos[i].rewardTotal.sub(rewardTotal));//减少新旧差额\n', '                    }else {//新总奖励大于旧总奖励\n', '                        tokenPendingRewards[token] = tokenPendingRewards[token].add(rewardTotal.sub(_poolRewardInfos[i].rewardTotal));//增加新旧差额\n', '                    }\n', '                    require(IERC20(token).balanceOf(address(this)) >= tokenPendingRewards[token], "YouSwap:BALANCE_INSUFFICIENT");//奖励数量是否足额\n', '                }\n', '                _poolRewardInfos[i].rewardTotal = rewardTotal;//修改矿池总奖励\n', '                sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    修改矿池名称\n', '     */\n', '    function setName(uint256 poolId, string memory name) override external onlyOperater {\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\n', '        require(ZERO != poolViewInfo.token, "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在\n', '        poolViewInfo.name = name;//修改矿池名称\n', '        sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '    }\n', '    \n', '    /**\n', '    修改矿池倍数\n', '     */\n', '    function setMultiple(uint256 poolId, uint256 multiple) override external onlyOperater {\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\n', '        require(ZERO != poolViewInfo.token, "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在\n', '        poolViewInfo.multiple = multiple;//修改矿池倍数\n', '        sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '    }\n', '    \n', '    /**\n', '    修改矿池排序\n', '     */\n', '    function setPriority(uint256 poolId, uint256 priority) override external onlyOperater {\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\n', '        require(ZERO != poolViewInfo.token, "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在\n', '        poolViewInfo.priority = priority;//修改矿池排序\n', '        sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '    }\n', '    \n', '    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) override external onlyOperater {\n', '        uint256 _maxStakeAmount;\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), "YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING");//矿池是否存在、是否结束\n', '        uint256 minRewardPerBlock = uint256(0) - uint256(1);//最小区块奖励\n', '        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\n', '        for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '            if (minRewardPerBlock > _poolRewardInfos[i].rewardPerBlock) {\n', '                minRewardPerBlock = _poolRewardInfos[i].rewardPerBlock;\n', '                _maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\n', '            }\n', '        }\n', '        require(poolStakeInfo.powerRatio <= maxStakeAmount && poolStakeInfo.amount <= maxStakeAmount && maxStakeAmount <= _maxStakeAmount, "YouSwap:MAX_STAKE_AMOUNT_INVALID");\n', '        poolStakeInfo.maxStakeAmount = maxStakeAmount;\n', '        sendUpdatePoolEvent(false, poolId);//更新矿池信息事件\n', '    }\n', '\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '    function _setOperateOwner(address user, bool state) internal onlyOwner {\n', '        operateOwner[user] = state;//设置运营权限\n', '    }\n', '\n', '    /**\n', '    计算单位算力奖励\n', '     */\n', '    function computeReward(uint256 poolId) internal returns (uint256[] memory) {\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\n', '        uint256[] memory rewardPerShares = new uint256[](_poolRewardInfos.length);\n', '        if (0 < poolStakeInfo.totalPower) {//有算力才能发奖励\n', '            uint finishRewardCount = 0;\n', '            uint256 reward = 0;\n', '            uint256 blockCount = block.number.sub(poolStakeInfo.lastRewardBlock);//待发放的区块数量\n', '            for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '                PoolRewardInfo storage poolRewardInfo = _poolRewardInfos[i];//矿池奖励信息\n', '                reward = blockCount.mul(poolRewardInfo.rewardPerBlock);//两次快照之间总奖励\n', '                if (poolRewardInfo.rewardProvide.add(reward) >= poolRewardInfo.rewardTotal) {//是否超出总奖励数量\n', '                    reward = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//核减超出奖励\n', '                    finishRewardCount = finishRewardCount.add(1);//挖矿结束token计数\n', '                }\n', '                poolRewardInfo.rewardProvide = poolRewardInfo.rewardProvide.add(reward);//更新已发放奖励数量\n', '                poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(reward.mul(1e24).div(poolStakeInfo.totalPower));//更新单位算力奖励\n', '                rewardPerShares[i] = poolRewardInfo.rewardPerShare;\n', '                if (0 < reward) {\n', '                    emit Mint(poolId, poolRewardInfo.token, reward);//挖矿事件\n', '                }\n', '            }\n', '            poolStakeInfo.lastRewardBlock = block.number;//更新快照块高\n', '            if (finishRewardCount == _poolRewardInfos.length) {//是否挖矿结束\n', '                poolStakeInfo.endBlock = block.number;//挖矿结束块高\n', '                emit EndPool(poolId);//挖矿结束事件\n', '            }\n', '        }else {\n', '            for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '                rewardPerShares[i] = _poolRewardInfos[i].rewardPerShare;\n', '            }\n', '        }\n', '        return rewardPerShares;\n', '    }\n', '    \n', '    /**\n', '    增加算力\n', '     */\n', '    function addPower(uint256 poolId, address user, uint256 amount, uint256 powerRatio, address upper1, address upper2) internal {\n', '        uint256 power = amount.div(powerRatio);\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//矿池质押信息\n', '        poolStakeInfo.amount = poolStakeInfo.amount.add(amount);//更新矿池质押数量\n', '        poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(power);//更新矿池总算力\n', '        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];//sender质押信息\n', '        userStakeInfo.amount = userStakeInfo.amount.add(amount);//更新sender质押数量\n', '        userStakeInfo.stakePower = userStakeInfo.stakePower.add(power);//更新sender质押算力\n', '        if (0 == userStakeInfo.startBlock) {\n', '            userStakeInfo.startBlock = block.number;//挖矿开始块高\n', '        }\n', '        uint256 upper1InvitePower = 0;//upper1邀请算力\n', '        uint256 upper2InvitePower = 0;//upper2邀请算力\n', '        if (ZERO != upper1) {\n', '            uint256 inviteSelfPower = power.mul(INVITE_SELF_REWARD).div(100);//新增sender自邀请算力\n', '            userStakeInfo.invitePower = userStakeInfo.invitePower.add(inviteSelfPower);//更新sender邀请算力\n', '            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(inviteSelfPower);//更新矿池总算力\n', '            uint256 invite1Power = power.mul(INVITE1_REWARD).div(100);//新增upper1邀请算力\n', '            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];//upper1质押信息\n', '            upper1StakeInfo.invitePower = upper1StakeInfo.invitePower.add(invite1Power);//更新upper1邀请算力\n', '            upper1InvitePower = upper1StakeInfo.invitePower;\n', '            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(invite1Power);//更新矿池总算力\n', '            if (0 == upper1StakeInfo.startBlock) {\n', '                upper1StakeInfo.startBlock = block.number;//挖矿开始块高\n', '            }\n', '            \n', '        }\n', '        if (ZERO != upper2) {\n', '            uint256 invite2Power = power.mul(INVITE2_REWARD).div(100);//新增upper2邀请算力\n', '            UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];//upper2质押信息\n', '            upper2StakeInfo.invitePower = upper2StakeInfo.invitePower.add(invite2Power);//更新upper2邀请算力\n', '            upper2InvitePower = upper2StakeInfo.invitePower;\n', '            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(invite2Power);//更新矿池总算力\n', '            if (0 == upper2StakeInfo.startBlock) {\n', '                upper2StakeInfo.startBlock = block.number;//挖矿开始块高\n', '            }\n', '        }\n', '        emit UpdatePower(poolId, poolStakeInfo.token, poolStakeInfo.totalPower, user, userStakeInfo.invitePower, userStakeInfo.stakePower, upper1, upper1InvitePower, upper2, upper2InvitePower);//更新算力事件\n', '    }\n', '\n', '    /**\n', '    减少算力\n', '     */\n', '    function subPower(uint256 poolId, address user, uint256 amount, uint256 powerRatio, address upper1, address upper2) internal {\n', '        uint256 power = amount.div(powerRatio);\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//矿池质押信息\n', '        if (poolStakeInfo.amount <= amount) {\n', '            poolStakeInfo.amount = 0;//减少矿池总质押数量\n', '        }else {\n', '            poolStakeInfo.amount = poolStakeInfo.amount.sub(amount);//减少矿池总质押数量\n', '        }\n', '        if (poolStakeInfo.totalPower <= power) {\n', '            poolStakeInfo.totalPower = 0;//减少矿池总算力\n', '        }else {\n', '            poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(power);//减少矿池总算力\n', '        }\n', '        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];//sender质押信息\n', '        userStakeInfo.amount = userStakeInfo.amount.sub(amount);//减少sender质押数量\n', '        if (userStakeInfo.stakePower <= power) {\n', '            userStakeInfo.stakePower = 0;//减少sender质押算力\n', '        }else {\n', '            userStakeInfo.stakePower = userStakeInfo.stakePower.sub(power);//减少sender质押算力\n', '        }\n', '        uint256 upper1InvitePower = 0;\n', '        uint256 upper2InvitePower = 0;\n', '        if (ZERO != upper1) {\n', '            uint256 inviteSelfPower = power.mul(INVITE_SELF_REWARD).div(100);//sender自邀请算力\n', '            if (poolStakeInfo.totalPower <= inviteSelfPower) {\n', '                poolStakeInfo.totalPower = 0;//减少矿池sender自邀请算力\n', '            }else {\n', '                poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(inviteSelfPower);//减少矿池sender自邀请算力\n', '            }\n', '            if (userStakeInfo.invitePower <= inviteSelfPower) {\n', '                userStakeInfo.invitePower = 0;//减少sender自邀请算力\n', '            }else {\n', '                userStakeInfo.invitePower = userStakeInfo.invitePower.sub(inviteSelfPower);//减少sender自邀请算力\n', '            }\n', '            uint256 invite1Power = power.mul(INVITE1_REWARD).div(100);//upper1邀请算力\n', '            if (poolStakeInfo.totalPower <= invite1Power) {\n', '                poolStakeInfo.totalPower = 0;//减少矿池upper1邀请算力\n', '            }else {\n', '                poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(invite1Power);//减少矿池upper1邀请算力\n', '            }\n', '            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\n', '            if (upper1StakeInfo.invitePower <= invite1Power) {\n', '                upper1StakeInfo.invitePower = 0;//减少upper1邀请算力\n', '            }else {\n', '                upper1StakeInfo.invitePower = upper1StakeInfo.invitePower.sub(invite1Power);//减少upper1邀请算力\n', '            }\n', '            upper1InvitePower = upper1StakeInfo.invitePower;\n', '        }\n', '        if (ZERO != upper2) {\n', '                uint256 invite2Power = power.mul(INVITE2_REWARD).div(100);//upper2邀请算力\n', '                if (poolStakeInfo.totalPower <= invite2Power) {\n', '                    poolStakeInfo.totalPower = 0;//减少矿池upper2邀请算力\n', '                }else {\n', '                    poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(invite2Power);//减少矿池upper2邀请算力\n', '                }\n', '                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\n', '                if (upper2StakeInfo.invitePower <= invite2Power) {\n', '                    upper2StakeInfo.invitePower = 0;//减少upper2邀请算力\n', '                }else {\n', '                    upper2StakeInfo.invitePower = upper2StakeInfo.invitePower.sub(invite2Power);//减少upper2邀请算力\n', '                }\n', '                upper2InvitePower = upper2StakeInfo.invitePower;\n', '        }\n', '        emit UpdatePower(poolId, poolStakeInfo.token, poolStakeInfo.totalPower, user, userStakeInfo.invitePower, userStakeInfo.stakePower, upper1, upper1InvitePower, upper2, upper2InvitePower);\n', '    }\n', '    \n', '    /**\n', '    //给sender发放收益，给upper1，upper2增加待领取收益\n', '     */\n', '    function provideReward(uint256 poolId, uint256[] memory rewardPerShares, address user, address upper1, address upper2) internal {\n', '        uint256 reward = 0;\n', '        uint256 inviteReward = 0;\n', '        uint256 stakeReward = 0;\n', '        uint256 rewardPerShare = 0;\n', '        address token;\n', '        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\n', '        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\n', '        for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '            token = _poolRewardInfos[i].token;//挖矿奖励token\n', '            rewardPerShare = rewardPerShares[i];//单位算力奖励系数\n', '            if ((0 < userStakeInfo.invitePower) || (0 < userStakeInfo.stakePower)) {\n', '                inviteReward = userStakeInfo.invitePower.mul(rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24);//邀请奖励\n', '                stakeReward = userStakeInfo.stakePower.mul(rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24);//质押奖励\n', '                inviteReward = userStakeInfo.invitePendingRewards[i].add(inviteReward);//待领取奖励\n', '                stakeReward = userStakeInfo.stakePendingRewards[i].add(stakeReward);//待领取奖励\n', '                reward = inviteReward.add(stakeReward);\n', '            }\n', '            if (0 < reward) {\n', '                userStakeInfo.invitePendingRewards[i] = 0;//重置待领取奖励\n', '                userStakeInfo.stakePendingRewards[i] = 0;//重置待领取奖励\n', '                userReceiveRewards[token][user] = userReceiveRewards[token][user].add(reward);//增加已领取奖励\n', '                if (address(you) == token) {//you\n', '                    you.mint(user, reward);//挖you\n', '                }else {//非you\n', '                    tokenPendingRewards[token] = tokenPendingRewards[token].sub(reward);//减少奖励总额\n', '                    IERC20(token).safeTransfer(user, reward);//发放奖励\n', '                }\n', '                emit WithdrawReward(poolId, token, user, inviteReward, stakeReward);\n', '            }\n', '            if (ZERO != upper1) {\n', '                UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\n', '                if ((0 < upper1StakeInfo.invitePower) || (0 < upper1StakeInfo.stakePower)) {\n', '                    inviteReward = upper1StakeInfo.invitePower.mul(rewardPerShare).sub(upper1StakeInfo.inviteRewardDebts[i]).div(1e24);//邀请奖励\n', '                    stakeReward = upper1StakeInfo.stakePower.mul(rewardPerShare).sub(upper1StakeInfo.stakeRewardDebts[i]).div(1e24);//质押奖励\n', '                    upper1StakeInfo.invitePendingRewards[i] = upper1StakeInfo.invitePendingRewards[i].add(inviteReward);//待领取奖励\n', '                    upper1StakeInfo.stakePendingRewards[i] = upper1StakeInfo.stakePendingRewards[i].add(stakeReward);//待领取奖励\n', '                }\n', '            }\n', '            if (ZERO != upper2) {\n', '                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\n', '                if ((0 < upper2StakeInfo.invitePower) || (0 < upper2StakeInfo.stakePower)) {\n', '                    inviteReward = upper2StakeInfo.invitePower.mul(rewardPerShare).sub(upper2StakeInfo.inviteRewardDebts[i]).div(1e24);//邀请奖励\n', '                    stakeReward = upper2StakeInfo.stakePower.mul(rewardPerShare).sub(upper2StakeInfo.stakeRewardDebts[i]).div(1e24);//质押奖励\n', '                    upper2StakeInfo.invitePendingRewards[i] = upper2StakeInfo.invitePendingRewards[i].add(inviteReward);//待领取奖励\n', '                    upper2StakeInfo.stakePendingRewards[i] = upper2StakeInfo.stakePendingRewards[i].add(stakeReward);//待领取奖励\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    重置负债\n', '     */\n', '    function setRewardDebt(uint256 poolId, uint256[] memory rewardPerShares, address user, address upper1, address upper2) internal {\n', '        uint256 rewardPerShare = 0;\n', '        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\n', '        for(uint i = 0; i < rewardPerShares.length; i++) {\n', '            rewardPerShare = rewardPerShares[i];//单位算力奖励系数\n', '            userStakeInfo.inviteRewardDebts[i] = userStakeInfo.invitePower.mul(rewardPerShare);//重置sender邀请负债\n', '            userStakeInfo.stakeRewardDebts[i] = userStakeInfo.stakePower.mul(rewardPerShare);//重置sender质押负债\n', '            if (ZERO != upper1) {\n', '                UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\n', '                upper1StakeInfo.inviteRewardDebts[i] = upper1StakeInfo.invitePower.mul(rewardPerShare);//重置upper1邀请负债\n', '                upper1StakeInfo.stakeRewardDebts[i] = upper1StakeInfo.stakePower.mul(rewardPerShare);//重置upper1质押负债\n', '                if (ZERO != upper2) {\n', '                    UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\n', '                    upper2StakeInfo.inviteRewardDebts[i] = upper2StakeInfo.invitePower.mul(rewardPerShare);//重置upper2邀请负债\n', '                    upper2StakeInfo.stakeRewardDebts[i] = upper2StakeInfo.stakePower.mul(rewardPerShare);//重置upper2质押负债\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    矿池信息更新事件\n', '     */\n', '    function sendUpdatePoolEvent(bool action, uint256 poolId) internal {\n', '        PoolViewInfo memory poolViewInfo = poolViewInfos[poolId];\n', '        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\n', '        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\n', '        address[] memory tokens = new address[](_poolRewardInfos.length);\n', '        uint256[] memory _rewardTotals = new uint256[](_poolRewardInfos.length);\n', '        uint256[] memory rewardPerBlocks = new uint256[](_poolRewardInfos.length);\n', '        for(uint i = 0; i < _poolRewardInfos.length; i++) {\n', '            tokens[i] = _poolRewardInfos[i].token;\n', '            _rewardTotals[i] = _poolRewardInfos[i].rewardTotal;\n', '            rewardPerBlocks[i] = _poolRewardInfos[i].rewardPerBlock;\n', '        }\n', '        emit UpdatePool(action, poolId, poolViewInfo.name, poolStakeInfo.token, poolStakeInfo.powerRatio, poolStakeInfo.maxStakeAmount, poolStakeInfo.startBlock, poolViewInfo.multiple, poolViewInfo.priority, tokens, _rewardTotals, rewardPerBlocks);\n', '    }\n', '\n', '    /**\n', '    解质押\n', '     */\n', '    function _unStake(uint256 poolId, uint256 amount) internal {        \n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), "YouSwap:POOL_NOT_EXIST_OR_MINING_NOT_START");\n', '        require((0 < amount) && (userStakeInfos[poolId][msg.sender].amount >= amount), "YouSwap:BALANCE_INSUFFICIENT");\n', '        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\n', '        initRewardInfo(poolId, msg.sender, upper1, upper2);\n', '        uint256[] memory rewardPerShares = computeReward(poolId);//计算单位算力奖励系数\n', '        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//给sender发放收益，给upper1，upper2增加待领取收益\n', '        subPower(poolId, msg.sender, amount, poolStakeInfo.powerRatio, upper1, upper2);//减少算力\n', '        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//重置sender，upper1，upper2负债\n', '        IERC20(poolStakeInfo.token).safeTransfer(msg.sender, amount);//解质押token\n', '        emit UnStake(poolId, poolStakeInfo.token, msg.sender, amount);\n', '    }    \n', '\n', '    function _withdrawReward(uint256 poolId) internal {\n', '        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\n', '        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), "YouSwap:POOL_NOT_EXIST_OR_MINING_NOT_START");\n', '        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\n', '        initRewardInfo(poolId, msg.sender, upper1, upper2);\n', '        uint256[] memory rewardPerShares = computeReward(poolId);//计算单位算力奖励系数\n', '        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//给sender发放收益，给upper1，upper2增加待领取收益\n', '        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//重置sender，upper1，upper2负债\n', '    }\n', '    \n', '    function initRewardInfo(uint256 poolId, address user, address upper1, address upper2) internal {\n', '        uint count = poolRewardInfos[poolId].length;\n', '        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\n', '        if (0 == userStakeInfo.invitePendingRewards.length) {\n', '            for(uint i = 0; i < count; i++) {\n', '                userStakeInfo.invitePendingRewards.push(0);//初始化待领取数量\n', '                userStakeInfo.stakePendingRewards.push(0);//初始化待领取数量\n', '                userStakeInfo.inviteRewardDebts.push(0);//初始化邀请负债\n', '                userStakeInfo.stakeRewardDebts.push(0);//初始化质押负债\n', '            }\n', '        }\n', '        if (ZERO != upper1) {\n', '            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\n', '            if (0 == upper1StakeInfo.invitePendingRewards.length) {\n', '                for(uint i = 0; i < count; i++) {\n', '                    upper1StakeInfo.invitePendingRewards.push(0);//初始化待领取数量\n', '                    upper1StakeInfo.stakePendingRewards.push(0);//初始化待领取数量\n', '                    upper1StakeInfo.inviteRewardDebts.push(0);//初始化邀请负债\n', '                    upper1StakeInfo.stakeRewardDebts.push(0);//初始化质押负债\n', '                }\n', '            }\n', '            if (ZERO != upper2) {\n', '                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\n', '                if (0 == upper2StakeInfo.invitePendingRewards.length) {\n', '                    for(uint i = 0; i < count; i++) {\n', '                        upper2StakeInfo.invitePendingRewards.push(0);//初始化待领取数量\n', '                        upper2StakeInfo.stakePendingRewards.push(0);//初始化待领取数量\n', '                        upper2StakeInfo.inviteRewardDebts.push(0);//初始化邀请负债\n', '                        upper2StakeInfo.stakeRewardDebts.push(0);//初始化质押负债\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '}']