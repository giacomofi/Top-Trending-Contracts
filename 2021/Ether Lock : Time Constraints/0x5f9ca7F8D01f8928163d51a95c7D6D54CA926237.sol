['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./MasterChef.sol";\n', 'import "./IMigrator.sol";\n', 'import "./ERC20Mintable.sol";\n', '\n', 'import "./Ownable.sol";\n', 'import "./ERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', '// Sushiswap - PID 232: BDI/ETH\n', '// BasketDAO - PID   1: BDI/ETH\n', '\n', '// Sushiswap - PID 233: BASK/ETH\n', '// BasketDAO - PID   2: BASK/ETH\n', '\n', 'interface ISushiswapMasterchef {\n', '    function sushiPerBlock() external view returns (uint256);\n', '}\n', '\n', 'contract StackedMasterChef is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct PoolInfo {\n', '        uint256 lastRewardBlock;\n', '        uint256 accRewardsPerShare;\n', '    }\n', '\n', '    struct UserInfo {\n', '        uint256 amount;\n', '        uint256 sushiRewardDebt;\n', '        uint256 basketRewardDebt;\n', '    }\n', '\n', '    address public timelock;\n', '\n', '    IERC20 public stakingToken; // Stake in SUSHI\n', '    IERC20 public mintableToken; // Mint and deposit in BASK (Since we have full control over it)\n', '\n', '    IERC20 public constant baskToken = IERC20(0x44564d0bd94343f72E3C8a0D22308B7Fa71DB0Bb);\n', '    IERC20 public constant sushiToken = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n', '\n', '    mapping(address => UserInfo) public userInfo;\n', '    mapping(address => PoolInfo) public poolInfo;\n', '\n', '    MasterChef basketdaoMasterChef = MasterChef(0xDB9daa0a50B33e4fe9d0ac16a1Df1d335F96595e);\n', '    uint256 public baskPID;\n', '\n', '    MasterChef sushiMasterChef = MasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n', '    uint256 public sushiPID;\n', '\n', '    constructor(\n', '        address _timelock,\n', '        IERC20 _stakingToken,\n', '        IERC20 _mintableToken,\n', '        uint256 _sushiPID,\n', '        uint256 _baskPID\n', '    ) {\n', '        timelock = _timelock;\n', '\n', '        stakingToken = _stakingToken;\n', '        mintableToken = _mintableToken;\n', '        sushiPID = _sushiPID;\n', '        baskPID = _baskPID;\n', '\n', '        stakingToken.approve(address(sushiMasterChef), uint256(-1));\n', '        mintableToken.approve(address(basketdaoMasterChef), uint256(-1));\n', '\n', '        updatePools();\n', '    }\n', '\n', '    modifier onlyTimelock {\n', '        require(msg.sender == timelock, "!timelock");\n', '        _;\n', '    }\n', '\n', '    function deposit(uint256 _amount) public {\n', '        PoolInfo storage sushiPool = poolInfo[address(sushiToken)];\n', '        PoolInfo storage baskPool = poolInfo[address(baskToken)];\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        // Deposit first to trigger token transfer\n', '        stakingToken.transferFrom(msg.sender, address(this), _amount);\n', '        ERC20Mintable(address(mintableToken)).mint(address(this), _amount);\n', '\n', '        sushiMasterChef.deposit(sushiPID, _amount);\n', '        basketdaoMasterChef.deposit(baskPID, _amount);\n', '\n', '        if (user.amount > 0) {\n', '            uint256 baskPending = user.amount.mul(baskPool.accRewardsPerShare).div(1e12).sub(user.basketRewardDebt);\n', '            uint256 sushiPending = user.amount.mul(sushiPool.accRewardsPerShare).div(1e12).sub(user.sushiRewardDebt);\n', '\n', '            _safeTransfer(baskToken, msg.sender, baskPending);\n', '            _safeTransfer(sushiToken, msg.sender, sushiPending);\n', '        }\n', '\n', '        user.amount = user.amount.add(_amount);\n', '        user.sushiRewardDebt = user.amount.mul(sushiPool.accRewardsPerShare).div(1e12);\n', '        user.basketRewardDebt = user.amount.mul(baskPool.accRewardsPerShare).div(1e12);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public {\n', '        PoolInfo storage sushiPool = poolInfo[address(sushiToken)];\n', '        PoolInfo storage baskPool = poolInfo[address(baskToken)];\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        // Withdraw first to trigger token transfer\n', '        sushiMasterChef.withdraw(sushiPID, _amount);\n', '        basketdaoMasterChef.withdraw(baskPID, _amount);\n', '\n', '        stakingToken.transfer(msg.sender, _amount);\n', '        ERC20Mintable(address(mintableToken)).burn(_amount);\n', '\n', '        updatePools();\n', '        if (user.amount > 0) {\n', '            uint256 baskPending = user.amount.mul(baskPool.accRewardsPerShare).div(1e12).sub(user.basketRewardDebt);\n', '            uint256 sushiPending = user.amount.mul(sushiPool.accRewardsPerShare).div(1e12).sub(user.sushiRewardDebt);\n', '\n', '            _safeTransfer(baskToken, msg.sender, baskPending);\n', '            _safeTransfer(sushiToken, msg.sender, sushiPending);\n', '        }\n', '\n', '        user.amount = user.amount.sub(_amount);\n', '        user.sushiRewardDebt = user.amount.mul(sushiPool.accRewardsPerShare).div(1e12);\n', '        user.basketRewardDebt = user.amount.mul(baskPool.accRewardsPerShare).div(1e12);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw() public {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        sushiMasterChef.withdraw(sushiPID, user.amount);\n', '        stakingToken.safeTransfer(address(msg.sender), user.amount);\n', '\n', '        user.amount = 0;\n', '        user.sushiRewardDebt = 0;\n', '        user.basketRewardDebt = 0;\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePools() public {\n', '        // Update the pools\n', '        sushiMasterChef.updatePool(sushiPID);\n', '        basketdaoMasterChef.updatePool(baskPID);\n', '\n', '        // Sushi Pools\n', '        (, , uint256 sushiLastRewardBlock, uint256 accSushiPerShare) = sushiMasterChef.poolInfo(sushiPID);\n', '        PoolInfo storage sushiPool = poolInfo[address(sushiToken)];\n', '        sushiPool.accRewardsPerShare = accSushiPerShare;\n', '        sushiPool.lastRewardBlock = sushiLastRewardBlock;\n', '\n', '        // Bask Pools\n', '        (, , uint256 baskLastRewardBlock, uint256 accBaskPerShare) = basketdaoMasterChef.poolInfo(baskPID);\n', '        PoolInfo storage baskPool = poolInfo[address(baskToken)];\n', '        baskPool.accRewardsPerShare = accBaskPerShare;\n', '        baskPool.lastRewardBlock = baskLastRewardBlock;\n', '    }\n', '\n', '    // **** View ****\n', '\n', '    function pendingRewards(address _user) external view returns (uint256, uint256) {\n', '        return (pendingSushiRewards(_user), pendingBaskRewards(_user));\n', '    }\n', '\n', '    function pendingSushiRewards(address _user) public view returns (uint256) {\n', '        (, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = sushiMasterChef.poolInfo(sushiPID);\n', '        UserInfo memory user = userInfo[_user];\n', '\n', '        uint256 lpSupply = stakingToken.balanceOf(address(sushiMasterChef));\n', '        if (block.number > lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = sushiMasterChef.getMultiplier(lastRewardBlock, block.number);\n', '            uint256 sushiReward =\n', '                multiplier.mul(ISushiswapMasterchef(address(sushiMasterChef)).sushiPerBlock()).mul(allocPoint).div(\n', '                    sushiMasterChef.totalAllocPoint()\n', '                );\n', '\n', '            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n', '        }\n', '\n', '        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.sushiRewardDebt);\n', '    }\n', '\n', '    function pendingBaskRewards(address _user) public view returns (uint256) {\n', '        (, uint256 allocPoint, uint256 lastRewardBlock, uint256 accBasketPerShare) =\n', '            basketdaoMasterChef.poolInfo(baskPID);\n', '        UserInfo memory user = userInfo[_user];\n', '\n', '        uint256 lpSupply = mintableToken.balanceOf(address(basketdaoMasterChef));\n', '        if (block.number > lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = basketdaoMasterChef.getMultiplier(lastRewardBlock, block.number);\n', '            uint256 basketReward =\n', '                multiplier.mul(basketdaoMasterChef.basketPerBlock()).mul(allocPoint).div(\n', '                    basketdaoMasterChef.totalAllocPoint()\n', '                );\n', '\n', '            uint256 devAlloc = basketReward.mul(basketdaoMasterChef.devFundRate()).div(basketdaoMasterChef.divRate());\n', '            uint256 treasuryAlloc =\n', '                basketReward.mul(basketdaoMasterChef.treasuryRate()).div(basketdaoMasterChef.divRate());\n', '\n', '            uint256 basketWithoutDevAndTreasury = basketReward.sub(devAlloc).sub(treasuryAlloc);\n', '\n', '            accBasketPerShare = accBasketPerShare.add(basketWithoutDevAndTreasury.mul(1e12).div(lpSupply));\n', '        }\n', '\n', '        return user.amount.mul(accBasketPerShare).div(1e12).sub(user.basketRewardDebt);\n', '    }\n', '\n', '    // **** Restricted functions **** //\n', '\n', '    function emergencyExecute(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data\n', '    ) public onlyTimelock returns (bytes memory) {\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call{ value: value }(callData);\n', '        require(success, "!tx");\n', '\n', '        return returnData;\n', '    }\n', '\n', '    // **** Internal Functions **** //\n', '\n', '    function _safeTransfer(\n', '        IERC20 _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        uint256 maxBal = _token.balanceOf(address(this));\n', '        if (_amount > maxBal) {\n', '            _token.transfer(_to, maxBal);\n', '        } else {\n', '            _token.transfer(_to, _amount);\n', '        }\n', '    }\n', '}']