['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/balancer-core/BConst.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract BConst {\n', '    uint public constant BONE              = 10**18;\n', '    // Minimum number of tokens in the pool\n', '    uint public constant MIN_BOUND_TOKENS  = 2;\n', '    // Maximum number of tokens in the pool\n', '    uint public constant MAX_BOUND_TOKENS  = 9;\n', '    // Minimum swap fee\n', '    uint public constant MIN_FEE           = BONE / 10**6;\n', '    // Maximum swap fee\n', '    uint public constant MAX_FEE           = BONE / 10;\n', '    // Minimum weight for token\n', '    uint public constant MIN_WEIGHT        = 1000000000;\n', '    // Maximum weight for token\n', '    uint public constant MAX_WEIGHT        = BONE * 50;\n', '    // Maximum total weight\n', '    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\n', '    // Minimum balance for a token\n', '    uint public constant MIN_BALANCE       = BONE / 10**12;\n', '    // Initial pool tokens supply\n', '    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\n', '\n', '    uint public constant MIN_BPOW_BASE     = 1 wei;\n', '    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n', '    uint public constant BPOW_PRECISION    = BONE / 10**10;\n', '    // Maximum input tokens balance ratio for swaps.\n', '    uint public constant MAX_IN_RATIO      = BONE / 2;\n', '    // Maximum output tokens balance ratio for swaps.\n', '    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\n', '}\n', '\n', '// File: contracts/balancer-core/BNum.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract BNum is BConst {\n', '\n', '    function btoi(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return a / BONE;\n', '    }\n', '\n', '    function bfloor(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return btoi(a) * BONE;\n', '    }\n', '\n', '    function badd(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsub(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        (uint c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsubSign(uint a, uint b)\n', '        internal pure\n', '        returns (uint, bool)\n', '    {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    function bmul(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    function bdiv(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b > 0, "ERR_DIV_ZERO");\n', '      return a / b;\n', '    }\n', '\n', '    // DSMath.wpow\n', '    function bpowi(uint a, uint n)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint z = n % 2 != 0 ? a : BONE;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            a = bmul(a, a);\n', '\n', '            if (n % 2 != 0) {\n', '                z = bmul(z, a);\n', '            }\n', '        }\n', '        return z;\n', '    }\n', '\n', '    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n', '    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n', '    // of approximation of b^0.w\n', '    function bpow(uint base, uint exp)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(base >= MIN_BPOW_BASE, "ERR_BPOW_BASE_TOO_LOW");\n', '        require(base <= MAX_BPOW_BASE, "ERR_BPOW_BASE_TOO_HIGH");\n', '\n', '        uint whole  = bfloor(exp);\n', '        uint remain = bsub(exp, whole);\n', '\n', '        uint wholePow = bpowi(base, btoi(whole));\n', '\n', '        if (remain == 0) {\n', '            return wholePow;\n', '        }\n', '\n', '        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n', '        return bmul(wholePow, partialResult);\n', '    }\n', '\n', '    function bpowApprox(uint base, uint exp, uint precision)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        // term 0:\n', '        uint a     = exp;\n', '        (uint x, bool xneg)  = bsubSign(base, BONE);\n', '        uint term = BONE;\n', '        uint sum   = term;\n', '        bool negative = false;\n', '\n', '\n', '        // term(k) = numer / denom\n', '        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n', '        // each iteration, multiply previous term by (a-(k-1)) * x / k\n', '        // continue until term is less than precision\n', '        for (uint i = 1; term >= precision; i++) {\n', '            uint bigK = i * BONE;\n', '            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n', '            term = bmul(term, bmul(c, x));\n', '            term = bdiv(term, bigK);\n', '            if (term == 0) break;\n', '\n', '            if (xneg) negative = !negative;\n', '            if (cneg) negative = !negative;\n', '            if (negative) {\n', '                sum = bsub(sum, term);\n', '            } else {\n', '                sum = badd(sum, term);\n', '            }\n', '        }\n', '\n', '        return sum;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/BMathInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BMathInterface {\n', '  function calcInGivenOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '\n', '  function calcSingleInGivenPoolOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '}\n', '\n', '// File: contracts/balancer-core/BMath.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract BMath is BConst, BNum, BMathInterface {\n', '    /**********************************************************************************************\n', '    // calcSpotPrice                                                                             //\n', '    // sP = spotPrice                                                                            //\n', '    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\n', '    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\n', '    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\n', '    // wO = tokenWeightOut                                                                       //\n', '    // sF = swapFee                                                                              //\n', '    **********************************************************************************************/\n', '    function calcSpotPrice(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint swapFee\n', '    )\n', '        public pure virtual\n', '        returns (uint spotPrice)\n', '    {\n', '        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n', '        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n', '        uint ratio = bdiv(numer, denom);\n', '        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n', '        return  (spotPrice = bmul(ratio, scale));\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcOutGivenIn                                                                            //\n', '    // aO = tokenAmountOut                                                                       //\n', '    // bO = tokenBalanceOut                                                                      //\n', '    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\n', '    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\n', '    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\n', '    // wO = tokenWeightOut                                                                       //\n', '    // sF = swapFee                                                                              //\n', '    **********************************************************************************************/\n', '    function calcOutGivenIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    )\n', '        public pure virtual\n', '        returns (uint tokenAmountOut)\n', '    {\n', '        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n', '        uint adjustedIn = bsub(BONE, swapFee);\n', '        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n', '        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n', '        uint foo = bpow(y, weightRatio);\n', '        uint bar = bsub(BONE, foo);\n', '        tokenAmountOut = bmul(tokenBalanceOut, bar);\n', '        return tokenAmountOut;\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcInGivenOut                                                                            //\n', '    // aI = tokenAmountIn                                                                        //\n', '    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\n', '    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\n', '    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\n', '    // wI = tokenWeightIn           --------------------------------------------                 //\n', '    // wO = tokenWeightOut                          ( 1 - sF )                                   //\n', '    // sF = swapFee                                                                              //\n', '    **********************************************************************************************/\n', '    function calcInGivenOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    )\n', '        public pure virtual override\n', '        returns (uint tokenAmountIn)\n', '    {\n', '        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n', '        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\n', '        uint y = bdiv(tokenBalanceOut, diff);\n', '        uint foo = bpow(y, weightRatio);\n', '        foo = bsub(foo, BONE);\n', '        tokenAmountIn = bsub(BONE, swapFee);\n', '        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n', '        return tokenAmountIn;\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcPoolOutGivenSingleIn                                                                  //\n', '    // pAo = poolAmountOut         /                                              \\              //\n', '    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\n', '    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\n', '    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\n', '    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\n', '    // pS = poolSupply            \\\\                    tBi               /        /             //\n', '    // sF = swapFee                \\                                              /              //\n', '    **********************************************************************************************/\n', '    function calcPoolOutGivenSingleIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    )\n', '        public pure virtual\n', '        returns (uint poolAmountOut)\n', '    {\n', '        // Charge the trading fee for the proportion of tokenAi\n', '        ///  which is implicitly traded to the other pool tokens.\n', '        // That proportion is (1- weightTokenIn)\n', '        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\n', '        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n', '        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\n', '        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\n', '\n', '        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\n', '        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n', '\n', '        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\n', '        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\n', '        uint newPoolSupply = bmul(poolRatio, poolSupply);\n', '        poolAmountOut = bsub(newPoolSupply, poolSupply);\n', '        return poolAmountOut;\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcSingleInGivenPoolOut                                                                  //\n', '    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\n', '    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\n', '    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\n', '    // bI = balanceIn          tAi =  --------------------------------------------               //\n', '    // wI = weightIn                              /      wI  \\                                   //\n', '    // tW = totalWeight                          |  1 - ----  |  * sF                            //\n', '    // sF = swapFee                               \\      tW  /                                   //\n', '    **********************************************************************************************/\n', '    function calcSingleInGivenPoolOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountOut,\n', '        uint swapFee\n', '    )\n', '        public pure virtual override\n', '        returns (uint tokenAmountIn)\n', '    {\n', '        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n', '        uint newPoolSupply = badd(poolSupply, poolAmountOut);\n', '        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n', '\n', '        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\n', '        uint boo = bdiv(BONE, normalizedWeight);\n', '        uint tokenInRatio = bpow(poolRatio, boo);\n', '        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n', '        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\n', '        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\n', '        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\n', '        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\n', '        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\n', '        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\n', '        return tokenAmountIn;\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcSingleOutGivenPoolIn                                                                  //\n', '    // tAo = tokenAmountOut            /      /                                             \\\\   //\n', '    // bO = tokenBalanceOut           /      //       pS - pAi        \\     /    1    \\      \\\\  //\n', '    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\n', '    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\n', '    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\n', '    // tW = totalWeight                    /     /      wO \\       \\                             //\n', '    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\n', '    // eF = exitFee                        \\     \\      tW /       /                             //\n', '    **********************************************************************************************/\n', '    function calcSingleOutGivenPoolIn(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountIn,\n', '        uint swapFee\n', '    )\n', '        public pure virtual\n', '        returns (uint tokenAmountOut)\n', '    {\n', '        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n', '        uint newPoolSupply = bsub(poolSupply, poolAmountIn);\n', '        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n', '\n', '        // newBalTo = poolRatio^(1/weightTo) * balTo;\n', '        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n', '        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n', '\n', '        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\n', '\n', '        // charge swap fee on the output token side\n', '        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\n', '        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\n', '        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\n', '        return tokenAmountOut;\n', '    }\n', '\n', '    /**********************************************************************************************\n', '    // calcPoolInGivenSingleOut                                                                  //\n', '    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\n', '    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\n', '    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\n', '    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\n', '    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\n', '    // tW = totalWeight                                                                          //\n', '    // sF = swapFee                                                                              //\n', '    **********************************************************************************************/\n', '    function calcPoolInGivenSingleOut(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    )\n', '        public pure virtual\n', '        returns (uint poolAmountIn)\n', '    {\n', '\n', '        // charge swap fee on the output token side\n', '        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n', '        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\n', '        uint zoo = bsub(BONE, normalizedWeight);\n', '        uint zar = bmul(zoo, swapFee);\n', '        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\n', '\n', '        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\n', '        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n', '\n', '        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\n', '        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\n', '        uint newPoolSupply = bmul(poolRatio, poolSupply);\n', '        uint poolAmountIn = bsub(poolSupply, newPoolSupply);\n', '        return poolAmountIn;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/BPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'interface BPoolInterface is IERC20, BMathInterface {\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function getDenormalizedWeight(address) external view returns (uint256);\n', '\n', '  function getBalance(address) external view returns (uint256);\n', '\n', '  function getSwapFee() external view returns (uint256);\n', '\n', '  function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '  function getCommunityFee()\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      address\n', '    );\n', '\n', '  function calcAmountWithCommunityFee(\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external view returns (uint256, uint256);\n', '\n', '  function getRestrictions() external view returns (address);\n', '\n', '  function isPublicSwap() external view returns (bool);\n', '\n', '  function isFinalized() external view returns (bool);\n', '\n', '  function isBound(address t) external view returns (bool);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function setSwapFee(uint256) external;\n', '\n', '  function setCommunityFeeAndReceiver(\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external;\n', '\n', '  function setController(address) external;\n', '\n', '  function setPublicSwap(bool) external;\n', '\n', '  function finalize() external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function rebind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function unbind(address) external;\n', '\n', '  function gulp(address) external;\n', '\n', '  function callVoting(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  function getMinWeight() external view returns (uint256);\n', '\n', '  function getMaxBoundTokens() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/WrappedPiErc20Interface.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface WrappedPiErc20Interface is IERC20 {\n', '  function deposit(uint256 _amount) external payable returns (uint256);\n', '\n', '  function withdraw(uint256 _amount) external payable returns (uint256);\n', '\n', '  function changeRouter(address _newRouter) external;\n', '\n', '  function setEthFee(uint256 _newEthFee) external;\n', '\n', '  function withdrawEthFee(address payable receiver) external;\n', '\n', '  function approveUnderlying(address _to, uint256 _amount) external;\n', '\n', '  function callExternal(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  struct ExternalCallData {\n', '    address destination;\n', '    bytes4 signature;\n', '    bytes args;\n', '    uint256 value;\n', '  }\n', '\n', '  function callExternalMultiple(ExternalCallData[] calldata calls) external;\n', '\n', '  function getUnderlyingBalance() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexWrapperInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface PowerIndexWrapperInterface {\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getBalance(address _token) external view returns (uint256);\n', '\n', '  function setPiTokenForUnderlyingsMultiple(address[] calldata _underlyingTokens, address[] calldata _piTokens)\n', '    external;\n', '\n', '  function setPiTokenForUnderlying(address _underlyingTokens, address _piToken) external;\n', '\n', '  function updatePiTokenEthFees(address[] calldata _underlyingTokens) external;\n', '\n', '  function withdrawOddEthFee(address payable _recipient) external;\n', '\n', '  function calcEthFeeForTokens(address[] memory tokens) external view returns (uint256 feeSum);\n', '\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external payable;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external payable;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/ControllerOwnable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an controller) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the controller account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract ControllerOwnable {\n', '    address private _controller;\n', '\n', '    event SetController(address indexed previousController, address indexed newController);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial controller.\n', '     */\n', '    constructor () internal {\n', '        _controller = msg.sender;\n', '        emit SetController(address(0), _controller);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current controller.\n', '     */\n', '    function getController() public view returns (address) {\n', '        return _controller;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the controller.\n', '     */\n', '    modifier onlyController() {\n', '        require(_controller == msg.sender, "NOT_CONTROLLER");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Give the controller permissions to a new account (`newController`).\n', '     * Can only be called by the current controller.\n', '     */\n', '    function setController(address newController) public virtual onlyController {\n', '        require(newController != address(0), "ControllerOwnable: new controller is the zero address");\n', '        emit SetController(_controller, newController);\n', '        _controller = newController;\n', '    }\n', '}\n', '\n', '// File: contracts/powerindex-router/PowerIndexWrapper.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract PowerIndexWrapper is ControllerOwnable, BMath, PowerIndexWrapperInterface {\n', '  using SafeMath for uint256;\n', '\n', '  event SetPiTokenForUnderlying(address indexed underlyingToken, address indexed piToken);\n', '  event UpdatePiTokenEthFee(address indexed piToken, uint256 ethFee);\n', '\n', '  BPoolInterface public immutable bpool;\n', '\n', '  mapping(address => address) public piTokenByUnderlying;\n', '  mapping(address => address) public underlyingByPiToken;\n', '  mapping(address => uint256) public ethFeeByPiToken;\n', '\n', '  constructor(address _bpool) public ControllerOwnable() {\n', '    bpool = BPoolInterface(_bpool);\n', '    BPoolInterface(_bpool).approve(_bpool, uint256(-1));\n', '\n', '    address[] memory tokens = BPoolInterface(_bpool).getCurrentTokens();\n', '    uint256 len = tokens.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      IERC20(tokens[i]).approve(_bpool, uint256(-1));\n', '    }\n', '  }\n', '\n', '  function withdrawOddEthFee(address payable _recipient) external override onlyController {\n', '    _recipient.transfer(address(this).balance);\n', '  }\n', '\n', '  function setPiTokenForUnderlyingsMultiple(address[] calldata _underlyingTokens, address[] calldata _piTokens)\n', '    external\n', '    override\n', '    onlyController\n', '  {\n', '    uint256 len = _underlyingTokens.length;\n', '    require(len == _piTokens.length, "LENGTH_DONT_MATCH");\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _setPiTokenForUnderlying(_underlyingTokens[i], _piTokens[i]);\n', '    }\n', '  }\n', '\n', '  function setPiTokenForUnderlying(address _underlyingToken, address _piToken) external override onlyController {\n', '    _setPiTokenForUnderlying(_underlyingToken, _piToken);\n', '  }\n', '\n', '  function updatePiTokenEthFees(address[] calldata _underlyingTokens) external override {\n', '    uint256 len = _underlyingTokens.length;\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _updatePiTokenEthFee(piTokenByUnderlying[_underlyingTokens[i]]);\n', '    }\n', '  }\n', '\n', '  function swapExactAmountOut(\n', '    address tokenIn,\n', '    uint256 maxAmountIn,\n', '    address tokenOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 maxPrice\n', '  ) external payable override returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\n', '    (address actualTokenIn, uint256 actualMaxAmountIn) = _getActualTokenAndAmount(tokenIn, maxAmountIn);\n', '    (address actualTokenOut, uint256 actualTokenAmountOut) = _getActualTokenAndAmount(tokenOut, tokenAmountOut);\n', '    uint256 actualMaxPrice =\n', '      getActualMaxPrice(maxAmountIn, actualMaxAmountIn, tokenAmountOut, actualTokenAmountOut, maxPrice);\n', '    uint256 amountInRate = actualMaxAmountIn.mul(uint256(1 ether)).div(maxAmountIn);\n', '\n', '    uint256 prevMaxAmount = actualMaxAmountIn;\n', '    actualMaxAmountIn = calcInGivenOut(\n', '      bpool.getBalance(actualTokenIn),\n', '      bpool.getDenormalizedWeight(actualTokenIn),\n', '      bpool.getBalance(actualTokenOut),\n', '      bpool.getDenormalizedWeight(actualTokenOut),\n', '      actualTokenAmountOut,\n', '      bpool.getSwapFee()\n', '    );\n', '    if (prevMaxAmount > actualMaxAmountIn) {\n', '      maxAmountIn = actualMaxAmountIn.mul(uint256(1 ether)).div(amountInRate);\n', '    } else {\n', '      actualMaxAmountIn = prevMaxAmount;\n', '    }\n', '\n', '    _processUnderlyingTokenIn(tokenIn, maxAmountIn);\n', '\n', '    (tokenAmountIn, spotPriceAfter) = bpool.swapExactAmountOut(\n', '      actualTokenIn,\n', '      actualMaxAmountIn,\n', '      actualTokenOut,\n', '      actualTokenAmountOut,\n', '      actualMaxPrice\n', '    );\n', '\n', '    _processUnderlyingOrPiTokenOutBalance(tokenOut);\n', '\n', '    return (tokenAmountIn, spotPriceAfter);\n', '  }\n', '\n', '  function swapExactAmountIn(\n', '    address tokenIn,\n', '    uint256 tokenAmountIn,\n', '    address tokenOut,\n', '    uint256 minAmountOut,\n', '    uint256 maxPrice\n', '  ) external payable override returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\n', '    (address actualTokenIn, uint256 actualAmountIn) = _processUnderlyingTokenIn(tokenIn, tokenAmountIn);\n', '    (address actualTokenOut, uint256 actualMinAmountOut) = _getActualTokenAndAmount(tokenOut, minAmountOut);\n', '    uint256 actualMaxPrice =\n', '      getActualMaxPrice(tokenAmountIn, actualAmountIn, minAmountOut, actualMinAmountOut, maxPrice);\n', '\n', '    (tokenAmountOut, spotPriceAfter) = bpool.swapExactAmountIn(\n', '      actualTokenIn,\n', '      actualAmountIn,\n', '      actualTokenOut,\n', '      actualMinAmountOut,\n', '      actualMaxPrice\n', '    );\n', '\n', '    _processUnderlyingOrPiTokenOutBalance(tokenOut);\n', '\n', '    return (tokenAmountOut, spotPriceAfter);\n', '  }\n', '\n', '  function joinPool(uint256 poolAmountOut, uint256[] memory maxAmountsIn) external payable override {\n', '    address[] memory tokens = getCurrentTokens();\n', '    uint256 len = tokens.length;\n', '    require(maxAmountsIn.length == len, "ERR_LENGTH_MISMATCH");\n', '\n', '    uint256 ratio = poolAmountOut.mul(1 ether).div(bpool.totalSupply()).add(100);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      (address actualToken, uint256 actualMaxAmountIn) = _getActualTokenAndAmount(tokens[i], maxAmountsIn[i]);\n', '      uint256 amountInRate = actualMaxAmountIn.mul(uint256(1 ether)).div(maxAmountsIn[i]);\n', '\n', '      uint256 prevMaxAmount = actualMaxAmountIn;\n', '      actualMaxAmountIn = ratio.mul(bpool.getBalance(actualToken)).div(1 ether);\n', '      if (prevMaxAmount > actualMaxAmountIn) {\n', '        maxAmountsIn[i] = actualMaxAmountIn.mul(uint256(1 ether)).div(amountInRate);\n', '      } else {\n', '        actualMaxAmountIn = prevMaxAmount;\n', '      }\n', '\n', '      _processUnderlyingTokenIn(tokens[i], maxAmountsIn[i]);\n', '      maxAmountsIn[i] = actualMaxAmountIn;\n', '    }\n', '    bpool.joinPool(poolAmountOut, maxAmountsIn);\n', '    require(bpool.transfer(msg.sender, bpool.balanceOf(address(this))), "ERR_TRANSFER_FAILED");\n', '  }\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] memory minAmountsOut) external payable override {\n', '    address[] memory tokens = getCurrentTokens();\n', '    uint256 len = tokens.length;\n', '    require(minAmountsOut.length == len, "ERR_LENGTH_MISMATCH");\n', '\n', '    bpool.transferFrom(msg.sender, address(this), poolAmountIn);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      (, minAmountsOut[i]) = _getActualTokenAndAmount(tokens[i], minAmountsOut[i]);\n', '    }\n', '\n', '    bpool.exitPool(poolAmountIn, minAmountsOut);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _processUnderlyingOrPiTokenOutBalance(tokens[i]);\n', '    }\n', '  }\n', '\n', '  function joinswapExternAmountIn(\n', '    address tokenIn,\n', '    uint256 tokenAmountIn,\n', '    uint256 minPoolAmountOut\n', '  ) external payable override returns (uint256 poolAmountOut) {\n', '    (address actualTokenIn, uint256 actualAmountIn) = _processUnderlyingTokenIn(tokenIn, tokenAmountIn);\n', '    poolAmountOut = bpool.joinswapExternAmountIn(actualTokenIn, actualAmountIn, minPoolAmountOut);\n', '    require(bpool.transfer(msg.sender, bpool.balanceOf(address(this))), "ERR_TRANSFER_FAILED");\n', '    return poolAmountOut;\n', '  }\n', '\n', '  function joinswapPoolAmountOut(\n', '    address tokenIn,\n', '    uint256 poolAmountOut,\n', '    uint256 maxAmountIn\n', '  ) external payable override returns (uint256 tokenAmountIn) {\n', '    (address actualTokenIn, uint256 actualMaxAmountIn) = _getActualTokenAndAmount(tokenIn, maxAmountIn);\n', '    uint256 amountInRate = actualMaxAmountIn.mul(uint256(1 ether)).div(maxAmountIn);\n', '\n', '    uint256 prevMaxAmount = maxAmountIn;\n', '    maxAmountIn = calcSingleInGivenPoolOut(\n', '      getBalance(tokenIn),\n', '      bpool.getDenormalizedWeight(actualTokenIn),\n', '      bpool.totalSupply(),\n', '      bpool.getTotalDenormalizedWeight(),\n', '      poolAmountOut,\n', '      bpool.getSwapFee()\n', '    );\n', '    if (prevMaxAmount > maxAmountIn) {\n', '      maxAmountIn = maxAmountIn;\n', '      actualMaxAmountIn = maxAmountIn.mul(amountInRate).div(uint256(1 ether));\n', '    } else {\n', '      maxAmountIn = prevMaxAmount;\n', '    }\n', '\n', '    _processUnderlyingTokenIn(tokenIn, maxAmountIn);\n', '    tokenAmountIn = bpool.joinswapPoolAmountOut(actualTokenIn, poolAmountOut, actualMaxAmountIn);\n', '    require(bpool.transfer(msg.sender, bpool.balanceOf(address(this))), "ERR_TRANSFER_FAILED");\n', '    return tokenAmountIn;\n', '  }\n', '\n', '  function exitswapPoolAmountIn(\n', '    address tokenOut,\n', '    uint256 poolAmountIn,\n', '    uint256 minAmountOut\n', '  ) external payable override returns (uint256 tokenAmountOut) {\n', '    require(bpool.transferFrom(msg.sender, address(this), poolAmountIn), "ERR_TRANSFER_FAILED");\n', '\n', '    (address actualTokenOut, uint256 actualMinAmountOut) = _getActualTokenAndAmount(tokenOut, minAmountOut);\n', '    tokenAmountOut = bpool.exitswapPoolAmountIn(actualTokenOut, poolAmountIn, actualMinAmountOut);\n', '    _processUnderlyingOrPiTokenOutBalance(tokenOut);\n', '    return tokenAmountOut;\n', '  }\n', '\n', '  function exitswapExternAmountOut(\n', '    address tokenOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 maxPoolAmountIn\n', '  ) external payable override returns (uint256 poolAmountIn) {\n', '    require(bpool.transferFrom(msg.sender, address(this), maxPoolAmountIn), "ERR_TRANSFER_FAILED");\n', '\n', '    (address actualTokenOut, uint256 actualTokenAmountOut) = _getActualTokenAndAmount(tokenOut, tokenAmountOut);\n', '    poolAmountIn = bpool.exitswapExternAmountOut(actualTokenOut, actualTokenAmountOut, maxPoolAmountIn);\n', '    _processUnderlyingOrPiTokenOutBalance(tokenOut);\n', '    require(bpool.transfer(msg.sender, maxPoolAmountIn.sub(poolAmountIn)), "ERR_TRANSFER_FAILED");\n', '    return poolAmountIn;\n', '  }\n', '\n', '  function calcInGivenOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super.calcInGivenOut(tokenBalanceIn, tokenWeightIn, tokenBalanceOut, tokenWeightOut, tokenAmountOut, swapFee).add(\n', '        1\n', '      );\n', '  }\n', '\n', '  function calcSingleInGivenPoolOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountOut,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super\n', '        .calcSingleInGivenPoolOut(tokenBalanceIn, tokenWeightIn, poolSupply, totalWeight, poolAmountOut, swapFee)\n', '        .add(1);\n', '  }\n', '\n', '  function calcPoolInGivenSingleOut(\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super\n', '        .calcPoolInGivenSingleOut(tokenBalanceOut, tokenWeightOut, poolSupply, totalWeight, tokenAmountOut, swapFee)\n', '        .add(1);\n', '  }\n', '\n', '  function calcSpotPrice(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return super.calcSpotPrice(tokenBalanceIn, tokenWeightIn, tokenBalanceOut, tokenWeightOut, swapFee).add(1);\n', '  }\n', '\n', '  function calcOutGivenIn(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountIn,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super.calcOutGivenIn(tokenBalanceIn, tokenWeightIn, tokenBalanceOut, tokenWeightOut, tokenAmountIn, swapFee).sub(\n', '        10\n', '      );\n', '  }\n', '\n', '  function calcPoolOutGivenSingleIn(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 tokenAmountIn,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super\n', '        .calcPoolOutGivenSingleIn(tokenBalanceIn, tokenWeightIn, poolSupply, totalWeight, tokenAmountIn, swapFee)\n', '        .sub(10);\n', '  }\n', '\n', '  function calcSingleOutGivenPoolIn(\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountIn,\n', '    uint256 swapFee\n', '  ) public pure override returns (uint256) {\n', '    return\n', '      super\n', '        .calcSingleOutGivenPoolIn(tokenBalanceOut, tokenWeightOut, poolSupply, totalWeight, poolAmountIn, swapFee)\n', '        .sub(10);\n', '  }\n', '\n', '  function getDenormalizedWeight(address token) external view returns (uint256) {\n', '    return bpool.getDenormalizedWeight(_getActualToken(token));\n', '  }\n', '\n', '  function getSwapFee() external view returns (uint256) {\n', '    return bpool.getSwapFee();\n', '  }\n', '\n', '  function calcEthFeeForTokens(address[] memory tokens) external view override returns (uint256 feeSum) {\n', '    uint256 len = tokens.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      address piToken = address(0);\n', '      if (underlyingByPiToken[tokens[i]] != address(0)) {\n', '        piToken = tokens[i];\n', '      } else if (piTokenByUnderlying[tokens[i]] != address(0)) {\n', '        piToken = piTokenByUnderlying[tokens[i]];\n', '      }\n', '      if (piToken != address(0)) {\n', '        feeSum = feeSum.add(WrappedPiErc20EthFeeInterface(piToken).ethFee());\n', '      }\n', '    }\n', '  }\n', '\n', '  function getCurrentTokens() public view override returns (address[] memory tokens) {\n', '    tokens = bpool.getCurrentTokens();\n', '\n', '    uint256 len = tokens.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      if (underlyingByPiToken[tokens[i]] != address(0)) {\n', '        tokens[i] = underlyingByPiToken[tokens[i]];\n', '      }\n', '    }\n', '  }\n', '\n', '  function getFinalTokens() public view override returns (address[] memory tokens) {\n', '    return getCurrentTokens();\n', '  }\n', '\n', '  function getBalance(address _token) public view override returns (uint256) {\n', '    address piTokenAddress = piTokenByUnderlying[_token];\n', '    if (piTokenAddress == address(0)) {\n', '      return bpool.getBalance(_token);\n', '    }\n', '    return WrappedPiErc20EthFeeInterface(piTokenAddress).getUnderlyingEquivalentForPi(bpool.getBalance(piTokenAddress));\n', '  }\n', '\n', '  function getActualMaxPrice(\n', '    uint256 amountIn,\n', '    uint256 actualAmountIn,\n', '    uint256 amountOut,\n', '    uint256 actualAmountOut,\n', '    uint256 maxPrice\n', '  ) public returns (uint256 actualMaxPrice) {\n', '    uint256 amountInRate = amountIn.mul(uint256(1 ether)).div(actualAmountIn);\n', '    uint256 amountOutRate = actualAmountOut.mul(uint256(1 ether)).div(amountOut);\n', '    return\n', '      amountInRate > amountOutRate\n', '        ? maxPrice.mul(amountInRate).div(amountOutRate)\n', '        : maxPrice.mul(amountOutRate).div(amountInRate);\n', '  }\n', '\n', '  function _processUnderlyingTokenIn(address _underlyingToken, uint256 _amount)\n', '    internal\n', '    returns (address actualToken, uint256 actualAmount)\n', '  {\n', '    if (_amount == 0) {\n', '      return (_underlyingToken, _amount);\n', '    }\n', '    require(IERC20(_underlyingToken).transferFrom(msg.sender, address(this), _amount), "ERR_TRANSFER_FAILED");\n', '\n', '    actualToken = piTokenByUnderlying[_underlyingToken];\n', '    if (actualToken == address(0)) {\n', '      return (_underlyingToken, _amount);\n', '    }\n', '    actualAmount = WrappedPiErc20Interface(actualToken).deposit{ value: ethFeeByPiToken[actualToken] }(_amount);\n', '  }\n', '\n', '  function _processPiTokenOutBalance(address _piToken) internal {\n', '    uint256 balance = WrappedPiErc20EthFeeInterface(_piToken).balanceOfUnderlying(address(this));\n', '\n', '    WrappedPiErc20Interface(_piToken).withdraw{ value: ethFeeByPiToken[_piToken] }(balance);\n', '\n', '    require(IERC20(underlyingByPiToken[_piToken]).transfer(msg.sender, balance), "ERR_TRANSFER_FAILED");\n', '  }\n', '\n', '  function _processUnderlyingTokenOutBalance(address _underlyingToken) internal returns (uint256 balance) {\n', '    balance = IERC20(_underlyingToken).balanceOf(address(this));\n', '    require(IERC20(_underlyingToken).transfer(msg.sender, balance), "ERR_TRANSFER_FAILED");\n', '  }\n', '\n', '  function _processUnderlyingOrPiTokenOutBalance(address _underlyingOrPiToken) internal {\n', '    address piToken = piTokenByUnderlying[_underlyingOrPiToken];\n', '    if (piToken == address(0)) {\n', '      _processUnderlyingTokenOutBalance(_underlyingOrPiToken);\n', '    } else {\n', '      _processPiTokenOutBalance(piToken);\n', '    }\n', '  }\n', '\n', '  function _getActualToken(address token) internal view returns (address) {\n', '    address piToken = piTokenByUnderlying[token];\n', '    return piToken == address(0) ? token : piToken;\n', '  }\n', '\n', '  function _getActualTokenAndAmount(address token, uint256 amount)\n', '    internal\n', '    view\n', '    returns (address actualToken, uint256 actualAmount)\n', '  {\n', '    address piToken = piTokenByUnderlying[token];\n', '    if (piToken == address(0)) {\n', '      return (token, amount);\n', '    }\n', '    return (piToken, WrappedPiErc20EthFeeInterface(piToken).getPiEquivalentForUnderlying(amount));\n', '  }\n', '\n', '  function _setPiTokenForUnderlying(address underlyingToken, address piToken) internal {\n', '    piTokenByUnderlying[underlyingToken] = piToken;\n', '    if (piToken == address(0)) {\n', '      IERC20(underlyingToken).approve(address(bpool), uint256(-1));\n', '    } else {\n', '      underlyingByPiToken[piToken] = underlyingToken;\n', '      IERC20(piToken).approve(address(bpool), uint256(-1));\n', '      IERC20(underlyingToken).approve(piToken, uint256(-1));\n', '      _updatePiTokenEthFee(piToken);\n', '    }\n', '    emit SetPiTokenForUnderlying(underlyingToken, piToken);\n', '  }\n', '\n', '  function _updatePiTokenEthFee(address piToken) internal {\n', '    if (piToken == address(0)) {\n', '      return;\n', '    }\n', '    uint256 ethFee = WrappedPiErc20EthFeeInterface(piToken).ethFee();\n', '    if (ethFeeByPiToken[piToken] == ethFee) {\n', '      return;\n', '    }\n', '    ethFeeByPiToken[piToken] = ethFee;\n', '    emit UpdatePiTokenEthFee(piToken, ethFee);\n', '  }\n', '}\n', '\n', 'interface WrappedPiErc20EthFeeInterface {\n', '  function ethFee() external view returns (uint256);\n', '\n', '  function router() external view returns (address);\n', '\n', '  function getPiEquivalentForUnderlying(uint256 _underlyingAmount) external view returns (uint256);\n', '\n', '  function getUnderlyingEquivalentForPi(uint256 _piAmount) external view returns (uint256);\n', '\n', '  function balanceOfUnderlying(address _account) external view returns (uint256);\n', '}']