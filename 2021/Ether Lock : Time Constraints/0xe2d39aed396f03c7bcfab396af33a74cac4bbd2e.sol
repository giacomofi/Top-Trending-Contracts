['pragma solidity ^0.5.16;\n', '\n', 'import "./InterestRateModel.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', "  * @title CREAM's TripleSlopeRateModel Contract\n", '  * @author C.R.E.A.M. Finance\n', '  */\n', 'contract TripleSlopeRateModel is InterestRateModel {\n', '    using SafeMath for uint;\n', '\n', '    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink1, uint kink2, uint roof);\n', '\n', '    /**\n', '     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @notice The approximate number of blocks per year that is assumed by the interest rate model\n', '     */\n', '    uint public constant blocksPerYear = 2102400;\n', '\n', '    /**\n', '     * @notice The minimum roof value used for calculating borrow rate.\n', '     */\n', '    uint internal constant minRoofValue = 1e18;\n', '\n', '    /**\n', '     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n', '     */\n', '    uint public multiplierPerBlock;\n', '\n', '    /**\n', '     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n', '     */\n', '    uint public baseRatePerBlock;\n', '\n', '    /**\n', '     * @notice The multiplierPerBlock after hitting a specified utilization point\n', '     */\n', '    uint public jumpMultiplierPerBlock;\n', '\n', '    /**\n', '     * @notice The utilization point at which the interest rate is fixed\n', '     */\n', '    uint public kink1;\n', '\n', '    /**\n', '     * @notice The utilization point at which the jump multiplier is applied\n', '     */\n', '    uint public kink2;\n', '\n', '    /**\n', '     * @notice The utilization point at which the rate is fixed\n', '     */\n', '    uint public roof;\n', '\n', '    /**\n', '     * @notice Construct an interest rate model\n', '     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n', '     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n', '     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n', '     * @param kink1_ The utilization point at which the interest rate is fixed\n', '     * @param kink2_ The utilization point at which the jump multiplier is applied\n', '     * @param roof_ The utilization point at which the borrow rate is fixed\n', '     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\n', '     */\n', '    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink1_, uint kink2_, uint roof_, address owner_) public {\n', '        owner = owner_;\n', '\n', '        updateTripleRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink1_, kink2_, roof_);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\n', '     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n', '     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n', '     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n', '     * @param kink1_ The utilization point at which the interest rate is fixed\n', '     * @param kink2_ The utilization point at which the jump multiplier is applied\n', '     * @param roof_ The utilization point at which the borrow rate is fixed\n', '     */\n', '    function updateTripleRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink1_, uint kink2_, uint roof_) external {\n', '        require(msg.sender == owner, "only the owner may call this function.");\n', '\n', '        updateTripleRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink1_, kink2_, roof_);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n', '     * @param cash The amount of cash in the market\n', '     * @param borrows The amount of borrows in the market\n', '     * @param reserves The amount of reserves in the market (currently unused)\n', '     * @return The utilization rate as a mantissa between [0, 1e18]\n', '     */\n', '    function utilizationRate(uint cash, uint borrows, uint reserves) public view returns (uint) {\n', '        // Utilization rate is 0 when there are no borrows\n', '        if (borrows == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint util = borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n', '        // If the utilization is above the roof, cap it.\n', '        if (util > roof) {\n', '            util = roof;\n', '        }\n', '        return util;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n', '     * @param cash The amount of cash in the market\n', '     * @param borrows The amount of borrows in the market\n', '     * @param reserves The amount of reserves in the market\n', '     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n', '     */\n', '    function getBorrowRate(uint cash, uint borrows, uint reserves) public view returns (uint) {\n', '        uint util = utilizationRate(cash, borrows, reserves);\n', '\n', '        if (util <= kink1) {\n', '            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n', '        } else if (util <= kink2) {\n', '            return kink1.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n', '        } else {\n', '            uint normalRate = kink1.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n', '            uint excessUtil = util.sub(kink2);\n', '            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the current supply rate per block\n', '     * @param cash The amount of cash in the market\n', '     * @param borrows The amount of borrows in the market\n', '     * @param reserves The amount of reserves in the market\n', '     * @param reserveFactorMantissa The current reserve factor for the market\n', '     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n', '     */\n', '    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\n', '        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\n', '        uint borrowRate = getBorrowRate(cash, borrows, reserves);\n', '        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n', '        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to update the parameters of the interest rate model\n', '     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n', '     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n', '     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n', '     * @param kink1_ The utilization point at which the interest rate is fixed\n', '     * @param kink2_ The utilization point at which the jump multiplier is applied\n', '     * @param roof_ The utilization point at which the borrow rate is fixed\n', '     */\n', '    function updateTripleRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink1_, uint kink2_, uint roof_) internal {\n', '        require(kink1_ <= kink2_, "kink1 must less than or equal to kink2");\n', '        require(roof_ >= minRoofValue, "invalid roof value");\n', '\n', '        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n', '        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink1_));\n', '        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\n', '        kink1 = kink1_;\n', '        kink2 = kink2_;\n', '        roof = roof_;\n', '\n', '        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink1, kink2, roof);\n', '    }\n', '}']