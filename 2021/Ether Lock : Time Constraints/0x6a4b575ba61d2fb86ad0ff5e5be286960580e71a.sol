['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'interface AggregatorInterface {\n', '  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n', '  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n', '\n', '  function latestAnswer() external returns (int256);\n', '  function latestTimestamp() external returns (uint256);\n', '  function latestRound() external returns (uint256);\n', '  function getAnswer(uint256 roundId) external returns (int256);\n', '  function getTimestamp(uint256 roundId) external returns (uint256);\n', '\n', '  // post-Historic\n', '\n', '  function decimals() external returns (uint8);\n', '  function getRoundData(uint256 _roundId)\n', '    external\n', '    returns (\n', '      uint256 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint256 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    returns (\n', '      uint256 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint256 answeredInRound\n', '    );\n', '}\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ChainlinkPriceFeedMedianizer is IncreasingTreasuryReimbursement {\n', '    // --- Variables ---\n', '    AggregatorInterface public chainlinkAggregator;\n', '\n', '    // Delay between updates after which the reward starts to increase\n', '    uint256 public periodSize;\n', '    // Latest median price\n', '    uint256 private medianPrice;                    // [wad]\n', '    // Timestamp of the Chainlink aggregator\n', '    uint256 public linkAggregatorTimestamp;\n', '    // Last timestamp when the median was updated\n', '    uint256 public  lastUpdateTime;                 // [unix timestamp]\n', '    // Multiplier for the Chainlink price feed in order to scaled it to 18 decimals. Default to 10 for USD price feeds\n', '    uint8   public  multiplier = 10;\n', '\n', '    // You want to change these every deployment\n', '    uint256 public staleThreshold = 3;\n', '    bytes32 public symbol         = "ethusd";\n', '\n', '    // --- Events ---\n', '    event UpdateResult(uint256 medianPrice, uint256 lastUpdateTime);\n', '\n', '    constructor(\n', '      address aggregator,\n', '      address treasury_,\n', '      uint256 periodSize_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        require(aggregator != address(0), "ChainlinkPriceFeedMedianizer/null-aggregator");\n', '        require(multiplier >= 1, "ChainlinkPriceFeedMedianizer/null-multiplier");\n', '        require(periodSize_ > 0, "ChainlinkPriceFeedMedianizer/null-period-size");\n', '\n', '        lastUpdateTime      = now;\n', '        periodSize          = periodSize_;\n', '        chainlinkAggregator = AggregatorInterface(aggregator);\n', '\n', '        emit ModifyParameters(bytes32("periodSize"), periodSize);\n', '        emit ModifyParameters(bytes32("aggregator"), aggregator);\n', '    }\n', '\n', '    // --- General Utils ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Administration ---\n', '    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n', '        if (parameter == "baseUpdateCallerReward") baseUpdateCallerReward = data;\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(data > baseUpdateCallerReward, "ChainlinkPriceFeedMedianizer/invalid-max-reward");\n', '          maxUpdateCallerReward = data;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(data >= RAY, "ChainlinkPriceFeedMedianizer/invalid-reward-increase");\n', '          perSecondCallerRewardIncrease = data;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(data > 0, "ChainlinkPriceFeedMedianizer/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = data;\n', '        }\n', '        else if (parameter == "periodSize") {\n', '          require(data > 0, "ChainlinkPriceFeedMedianizer/null-period-size");\n', '          periodSize = data;\n', '        }\n', '        else if (parameter == "staleThreshold") {\n', '          require(data > 1, "ChainlinkPriceFeedMedianizer/invalid-stale-threshold");\n', '          staleThreshold = data;\n', '        }\n', '        else revert("ChainlinkPriceFeedMedianizer/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, data);\n', '    }\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        if (parameter == "aggregator") chainlinkAggregator = AggregatorInterface(addr);\n', '        else if (parameter == "treasury") {\n', '          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), "ChainlinkPriceFeedMedianizer/treasury-coin-not-set");\n', '      \t  treasury = StabilityFeeTreasuryLike(addr);\n', '        }\n', '        else revert("ChainlinkPriceFeedMedianizer/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, addr);\n', '    }\n', '\n', '    function read() external view returns (uint256) {\n', '        require(both(medianPrice > 0, subtract(now, linkAggregatorTimestamp) <= multiply(periodSize, staleThreshold)), "ChainlinkPriceFeedMedianizer/invalid-price-feed");\n', '        return medianPrice;\n', '    }\n', '\n', '    function getResultWithValidity() external view returns (uint256,bool) {\n', '        return (medianPrice, both(medianPrice > 0, subtract(now, linkAggregatorTimestamp) <= multiply(periodSize, staleThreshold)));\n', '    }\n', '\n', '    // --- Median Updates ---\n', '    function updateResult(address feeReceiver) external {\n', '        int256 aggregatorPrice      = chainlinkAggregator.latestAnswer();\n', '        uint256 aggregatorTimestamp = chainlinkAggregator.latestTimestamp();\n', '\n', '        require(aggregatorPrice > 0, "ChainlinkPriceFeedMedianizer/invalid-price-feed");\n', '        require(both(aggregatorTimestamp > 0, aggregatorTimestamp > linkAggregatorTimestamp), "ChainlinkPriceFeedMedianizer/invalid-timestamp");\n', '\n', '        uint256 callerReward    = getCallerReward(lastUpdateTime, periodSize);\n', '        medianPrice             = multiply(uint(aggregatorPrice), 10 ** uint(multiplier));\n', '        linkAggregatorTimestamp = aggregatorTimestamp;\n', '        lastUpdateTime          = now;\n', '\n', '        emit UpdateResult(medianPrice, lastUpdateTime);\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '}\n', '\n', 'contract ChainlinkMedianETHUSD is ChainlinkPriceFeedMedianizer {\n', '  constructor(\n', '    address aggregator,\n', '    uint256 periodSize,\n', '    uint256 baseUpdateCallerReward,\n', '    uint256 maxUpdateCallerReward,\n', '    uint256 perSecondCallerRewardIncrease\n', '  ) ChainlinkPriceFeedMedianizer(aggregator, address(0), periodSize, baseUpdateCallerReward, maxUpdateCallerReward, perSecondCallerRewardIncrease) public {\n', '        symbol = "ETHUSD";\n', '        multiplier = 10;\n', '        staleThreshold = 6;\n', '    }\n', '}']