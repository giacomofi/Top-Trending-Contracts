['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * @notice A sample upkeep contract that emits event at regular intervals\n', ' */\n', '\n', 'contract TimedUpKeep {\n', '  uint public lastBlockServiced; \n', '  uint public blocksInterval = 50;\n', '  \n', '  event timedAlarm(uint);\n', '\n', '  function checkUpkeep(bytes calldata data) external view returns (bool, bytes memory) {\n', '    \n', '    //check if set number of blocks have passed\n', '    bool shouldPerformUpkeep = (block.number-lastBlockServiced) > blocksInterval;\n', '    \n', '    return (shouldPerformUpkeep, "");\n', '  }\n', '  \n', '\n', '  function performUpkeep(bytes calldata data) external {\n', '       \n', '      lastBlockServiced = block.number;\n', '      emit timedAlarm(lastBlockServiced);\n', '      //do something useful here\n', '  }\n', '  \n', ' function debugVars() external view returns (uint,uint,uint){\n', '      \n', '      return(lastBlockServiced,blocksInterval,block.number);\n', '  }\n', '  \n', '  function comingAfter() external view returns (uint)\n', '  {\n', '      return blocksInterval-(block.number-lastBlockServiced);\n', '  }\n', '  \n', '    function setBlocksInterval(uint interval) public {\n', '    blocksInterval = interval;\n', '  }\n', '  \n', '}']