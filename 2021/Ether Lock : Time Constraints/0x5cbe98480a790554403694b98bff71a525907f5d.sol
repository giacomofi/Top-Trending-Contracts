['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-09\n', '*/\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'library Helper {\n', '    function safeTransfer(address token, address to, uint256 value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Helper::safeTransfer: failed');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Helper::safeTransferFrom: failed');\n", '    }\n', '}\n', '\n', 'contract ProxySwapAsset {\n', '    event LogChangeMPCOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveTime);\n', '    event LogChangeLpProvider(address indexed oldProvider, address indexed newProvider);\n', '    event LogSwapin(bytes32 indexed txhash, address indexed account, uint amount);\n', '    event LogSwapout(address indexed account, address indexed bindaddr, uint amount);\n', '\n', '    address private _oldOwner;\n', '    address private _newOwner;\n', '    uint256 private _newOwnerEffectiveTime;\n', '    uint256 constant public effectiveInterval = 2 * 24 * 3600;\n', '\n', '    address public proxyToken;\n', '    address public lpProvider;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner(), "only owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyProvider() {\n', '        require(msg.sender == lpProvider, "only lp provider");\n', '        _;\n', '    }\n', '\n', '    constructor(address _proxyToken, address _lpProvider) public {\n', '        proxyToken = _proxyToken;\n', '        lpProvider = _lpProvider;\n', '        _newOwner = msg.sender;\n', '        _newOwnerEffectiveTime = block.timestamp;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return block.timestamp >= _newOwnerEffectiveTime ? _newOwner : _oldOwner;\n', '    }\n', '\n', '    function changeMPCOwner(address newOwner) public onlyOwner returns (bool) {\n', '        require(newOwner != address(0), "new owner is the zero address");\n', '        _oldOwner = owner();\n', '        _newOwner = newOwner;\n', '        _newOwnerEffectiveTime = block.timestamp + effectiveInterval;\n', '        emit LogChangeMPCOwner(_oldOwner, _newOwner, _newOwnerEffectiveTime);\n', '        return true;\n', '    }\n', '\n', '    function changeLpProvider(address newProvider) public onlyProvider returns (bool) {\n', '        require(newProvider != address(0), "new provider is the zero address");\n', '        emit LogChangeLpProvider(lpProvider, newProvider);\n', '        lpProvider = newProvider;\n', '    }\n', '\n', '    function withdraw(address to, uint256 amount) public onlyProvider {\n', '        Helper.safeTransfer(proxyToken, to, amount);\n', '    }\n', '\n', '    function Swapin(bytes32 txhash, address account, uint256 amount) public onlyOwner returns (bool) {\n', '        Helper.safeTransfer(proxyToken, account, amount);\n', '        emit LogSwapin(txhash, account, amount);\n', '        return true;\n', '    }\n', '\n', "    // keep same interface with 'amount' parameter though it's unnecessary here\n", '    function Swapout(uint256 amount, address bindaddr) public returns (bool) {\n', '        require(bindaddr != address(0), "bind address is the zero address");\n', '        Helper.safeTransferFrom(proxyToken, msg.sender, address(this), amount);\n', '        emit LogSwapout(msg.sender, bindaddr, amount);\n', '        return true;\n', '    }\n', '}']