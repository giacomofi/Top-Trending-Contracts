['pragma solidity >=0.7.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', 'import "./IMintedBeforeReveal.sol";\n', '\n', 'contract MonstroCities is ERC721, Ownable, IMintedBeforeReveal {\n', '\n', '    // This is the provenance record of all Monsters in existence. The provenance will be updated once metadata is live at launch.\n', '    string public constant ORIGINAL_PROVENANCE = "";\n', '\n', '    // Time of when the sale starts.\n', '    uint256 public constant SALE_START_TIMESTAMP = 1626026340;\n', '\n', '    // Time after which the Monsters are randomized and revealed 7 days from instantly after initial launch).\n', '    uint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP;\n', '\n', '    // Maximum amount of Monsters in existance.\n', '    uint256 public constant MAX_MONSTRO_SUPPLY = 8000;\n', '\n', '    // The block in which the starting index was created.\n', '    uint256 public startingIndexBlock;\n', '\n', '    // The index of the item that will be #1.\n', '    uint256 public startingIndex;\n', '\n', '    mapping (uint256 => bool) private _mintedBeforeReveal;\n', '    \n', '    bool public saleActive = false;\n', '\n', '    constructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) {\n', '        _setBaseURI(baseURI);\n', '    }\n', '\n', '    function isMintedBeforeReveal(uint256 index) public view override returns (bool) {\n', '        return _mintedBeforeReveal[index];\n', '    }\n', ' \n', '    function getMonstroMaxAmount() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started yet so you can\'t get a price yet.");\n', '        require(totalSupply() < MAX_MONSTRO_SUPPLY, "Sale has already ended and all sold out, no more left to sell.");\n', '\n', '        uint currentSupply = totalSupply();\n', '\n', '            return 10; // 10 max per transaction\n', ' \n', '    }\n', '\n', '    function getMonstroPrice() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started yet so you can\'t get a price yet.");\n', '        require(totalSupply() < MAX_MONSTRO_SUPPLY, "Sale has already ended, no more Monsters left to sell.");\n', '\n', '        uint currentSupply = totalSupply();\n', '  \n', '            return 70000000000000000;  //   0.07 ETH\n', ' \n', '    }\n', '\n', '    function mintMonster(uint256 numberOfMonstro) public payable {\n', '        // Exceptions that need to be handled + launch switch mechanic\n', '        require(saleActive == true, "Sale has not started yet");\n', '        require(totalSupply() < MAX_MONSTRO_SUPPLY, "Sale has already ended.");\n', '        require(numberOfMonstro > 0, "You cannot mint 0 Monsters, please increase to more than 1");\n', '        require(numberOfMonstro <= getMonstroMaxAmount(), "You are not allowed to buy this many Monsters at once. The limit is 10.");\n', '        require(SafeMath.add(totalSupply(), numberOfMonstro) <= MAX_MONSTRO_SUPPLY, "Exceeds maximum Monster supply of 8,000. Please try to mint less Monsters.");\n', '        require(SafeMath.mul(getMonstroPrice(), numberOfMonstro) == msg.value, "Amount of Ether sent is not correct.");\n', '\n', '        for (uint i = 0; i < numberOfMonstro; i++) {\n', '            uint mintIndex = totalSupply();\n', '            if (block.timestamp < REVEAL_TIMESTAMP) {\n', '                _mintedBeforeReveal[mintIndex] = true;\n', '            }\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '\n', '        if (startingIndexBlock == 0 && (totalSupply() == MAX_MONSTRO_SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)) {\n', '            startingIndexBlock = block.number;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Finalize starting index\n', '    */\n', '    function finalizeStartingIndex() public {\n', '        require(startingIndex == 0, "Starting index is already set");\n', '        require(startingIndexBlock != 0, "Starting index block must be set");\n', '        \n', '        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_MONSTRO_SUPPLY;\n', '\n', '        if (SafeMath.sub(block.number, startingIndexBlock) > 255) {\n', '            startingIndex = uint(blockhash(block.number-1)) % MAX_MONSTRO_SUPPLY;\n', '        }\n', '\n', '        if (startingIndex == 0) {\n', '            startingIndex = SafeMath.add(startingIndex, 1);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ether from this contract (Callable by owner only)\n', '    */\n', '    function withdraw() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '    \n', '     function Launch() public onlyOwner {\n', '        saleActive = !saleActive;\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function changeBaseURI(string memory baseURI) onlyOwner public {\n', '       _setBaseURI(baseURI);\n', '    }\n', '       /**\n', '    * @dev Reserved for people who helped this project and giveaways. Max 10\n', '    */\n', '      function reserveGiveaway(uint256 numMonstro) public onlyOwner {\n', '        uint currentSupply = totalSupply();\n', '        require(totalSupply() + numMonstro <= 40, "40 mints for sale giveaways");\n', '        uint256 index;\n', '        // Reserved for people who helped this project and giveaways\n', '        for (index = 0; index < numMonstro; index++) {\n', '            _safeMint(owner(), currentSupply + index);\n', '        }\n', '    }\n', '}']