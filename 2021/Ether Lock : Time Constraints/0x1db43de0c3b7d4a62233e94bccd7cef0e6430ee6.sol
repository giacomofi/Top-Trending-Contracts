['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'library EnumerableSet {\n', '    struct Set {\n', '        bytes32[] _values;\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            set._values.pop();\n', '            delete set._indexes[value];\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface Token {\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function transfer(address, uint) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'contract TKOStaking is Ownable {\n', '    using SafeMath for uint;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    \n', '    event RewardsTransferred(address holder, uint amount);\n', '    \n', '    // TKO token contract address\n', '    address public constant tokenAddress = 0xcA1024B60b00bbd8b5c278F3BBD65B40AAB4e837;\n', '    // Fee collect address\n', '    address public constant feeAddress = 0x59BA4C88129D6178657fC039D6f70a8873628826;\n', '    // Fee collect address\n', '    address public constant TKOFoundationWallet = 0x08f3ec531A6817960D5a641bd215459D4EcdDC06;\n', '    \n', '    uint public totalClaimedRewards = 0;\n', '    // reward rate 150% per day\n', '    uint public  rewardRate = 15000;\n', '    uint public constant rewardInterval = 1 days;\n', '    // Staking total time\n', '    uint public stakingTotalTime;\n', '    // transaction fee 0.02 percent\n', '    uint public stakingFeeRate = 2;\n', '    \n', '    EnumerableSet.AddressSet private holders;\n', '    \n', '    mapping (address => uint) public depositedTokens;\n', '    mapping (address => uint) public stakingTime;\n', '    mapping (address => uint) public lastClaimedTime;\n', '    mapping (address => uint) public totalEarnedTokens;\n', '    \n', '    constructor(address owner) public {\n', '    stakingTotalTime = now + 180 days;\n', '    transferOwnership(owner);\n', '    }\n', '    \n', '    function stakingPoolStop() public onlyOwner{\n', '        require(now >= stakingTotalTime,"Pool is not over yet!");\n', '            uint256 balance = Token(tokenAddress).balanceOf(address(this));\n', '            require(Token(tokenAddress).transfer(TKOFoundationWallet, balance), "Could not transfer tokens.");\n', '    }\n', '    \n', '    function updateRewardRate(uint _newRewardRate) public onlyOwner{\n', '        rewardRate = _newRewardRate; \n', '    }\n', '      function updateFeeRate(uint _newFeeRate) public onlyOwner{\n', '        stakingFeeRate = _newFeeRate; \n', '    }\n', '  \n', '   function updateStakingTime(uint _timeInDays) public onlyOwner{\n', '        stakingTotalTime = now + _timeInDays.mul(86400); \n', '    }\n', '    \n', '    function updateAccount(address account) private {\n', '        uint pendingRewards = getPendingReward(account);\n', '        if (pendingRewards > 0) {\n', '            require(Token(tokenAddress).transfer(account, pendingRewards), "Could not transfer tokens.");\n', '            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingRewards);\n', '            totalClaimedRewards = totalClaimedRewards.add(pendingRewards);\n', '            emit RewardsTransferred(account, pendingRewards);\n', '        }\n', '        lastClaimedTime[account] = now;\n', '    }\n', '    \n', '    function getPendingReward(address _holder) public view returns (uint) {\n', '        if (!holders.contains(_holder)) return 0;\n', '        if (depositedTokens[_holder] == 0) return 0;\n', '\n', '        uint timeDiff = now.sub(lastClaimedTime[_holder]);\n', '        uint stakedAmount = depositedTokens[_holder];\n', '        \n', '        uint pendingDivs = stakedAmount\n', '                            .mul(rewardRate)\n', '                            .mul(timeDiff)\n', '                            .div(rewardInterval)\n', '                            .div(1e4);\n', '            \n', '        return pendingDivs;\n', '    }\n', '    \n', '    function getNumberOfHolders() public view returns (uint) {\n', '        return holders.length();\n', '    }\n', '    \n', '    function stake(uint amountToStake) public {\n', '        require(now < stakingTotalTime,"Staking pool time is ended");\n', '        require(amountToStake > 0, "Cannot deposit 0 Tokens");\n', '        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        uint fee = amountToStake.mul(stakingFeeRate).div(1e4);\n', '        uint amountAfterFee = amountToStake.sub(fee);\n', '        require(Token(tokenAddress).transfer(feeAddress, fee), "Could not transfer deposit fee.");\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\n', '        \n', '        if (!holders.contains(msg.sender)) {\n', '            holders.add(msg.sender);\n', '            stakingTime[msg.sender] = now;\n', '        }\n', '    }\n', '    \n', '    function unstake(uint amountToWithdraw) public {\n', '        require(depositedTokens[msg.sender] >= amountToWithdraw, "Invalid amount to withdraw");\n', '        \n', '        uint fee = amountToWithdraw.mul(stakingFeeRate).div(1e4);\n', '        uint amountAfterFee = amountToWithdraw.sub(fee);\n', '        require(Token(tokenAddress).transfer(feeAddress, fee), "Could not transfer deposit fee.");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        require(Token(tokenAddress).transfer(msg.sender, amountAfterFee), "Could not transfer tokens.");\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n', '        \n', '        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\n', '            holders.remove(msg.sender);\n', '        }\n', '    }\n', '    \n', '    function claimReward() public {\n', '        updateAccount(msg.sender);\n', '    }\n', '    \n', '}']