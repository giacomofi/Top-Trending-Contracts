['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Token.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', "// BokkyPooBah's DateTime Library v1.01\n", '//\n', '// A gas-efficient Solidity date and time library\n', '//\n', '// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n', '//\n', '// Tested date range 1970/01/01 to 2345/12/31\n', '//\n', '// Conventions:\n', '// Unit      | Range         | Notes\n', '// :-------- |:-------------:|:-----\n', '// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n', '// year      | 1970 ... 2345 |\n', '// month     | 1 ... 12      |\n', '// day       | 1 ... 31      |\n', '// hour      | 0 ... 23      |\n', '// minute    | 0 ... 59      |\n', '// second    | 0 ... 59      |\n', '// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n', '//\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', 'library BokkyPooBahsDateTimeLibrary {\n', '\n', '    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n', '    uint constant SECONDS_PER_HOUR = 60 * 60;\n', '    uint constant SECONDS_PER_MINUTE = 60;\n', '    int constant OFFSET19700101 = 2440588;\n', '\n', '    uint constant DOW_MON = 1;\n', '    uint constant DOW_TUE = 2;\n', '    uint constant DOW_WED = 3;\n', '    uint constant DOW_THU = 4;\n', '    uint constant DOW_FRI = 5;\n', '    uint constant DOW_SAT = 6;\n', '    uint constant DOW_SUN = 7;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Calculate the number of days from 1970/01/01 to year/month/day using\n', '    // the date conversion algorithm from\n', '    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n', '    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n', '    //\n', '    // days = day\n', '    //      - 32075\n', '    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n', '    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n', '    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n', '    //      - offset\n', '    // ------------------------------------------------------------------------\n', '    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n', '        require(year >= 1970);\n', '        int _year = int(year);\n', '        int _month = int(month);\n', '        int _day = int(day);\n', '\n', '        int __days = _day\n', '          - 32075\n', '          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n', '          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n', '          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n', '          - OFFSET19700101;\n', '\n', '        _days = uint(__days);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Calculate year/month/day from the number of days since 1970/01/01 using\n', '    // the date conversion algorithm from\n', '    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n', '    // and adding the offset 2440588 so that 1970/01/01 is day 0\n', '    //\n', '    // int L = days + 68569 + offset\n', '    // int N = 4 * L / 146097\n', '    // L = L - (146097 * N + 3) / 4\n', '    // year = 4000 * (L + 1) / 1461001\n', '    // L = L - 1461 * year / 4 + 31\n', '    // month = 80 * L / 2447\n', '    // dd = L - 2447 * month / 80\n', '    // L = month / 11\n', '    // month = month + 2 - 12 * L\n', '    // year = 100 * (N - 49) + year + L\n', '    // ------------------------------------------------------------------------\n', '    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n', '        int __days = int(_days);\n', '\n', '        int L = __days + 68569 + OFFSET19700101;\n', '        int N = 4 * L / 146097;\n', '        L = L - (146097 * N + 3) / 4;\n', '        int _year = 4000 * (L + 1) / 1461001;\n', '        L = L - 1461 * _year / 4 + 31;\n', '        int _month = 80 * L / 2447;\n', '        int _day = L - 2447 * _month / 80;\n', '        L = _month / 11;\n', '        _month = _month + 2 - 12 * L;\n', '        _year = 100 * (N - 49) + _year + L;\n', '\n', '        year = uint(_year);\n', '        month = uint(_month);\n', '        day = uint(_day);\n', '    }\n', '\n', '    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\n', '        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n', '    }\n', '    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\n', '        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\n', '    }\n', '    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n', '        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n', '        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        uint secs = timestamp % SECONDS_PER_DAY;\n', '        hour = secs / SECONDS_PER_HOUR;\n', '        secs = secs % SECONDS_PER_HOUR;\n', '        minute = secs / SECONDS_PER_MINUTE;\n', '        second = secs % SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\n', '        if (year >= 1970 && month > 0 && month <= 12) {\n', '            uint daysInMonth = _getDaysInMonth(year, month);\n', '            if (day > 0 && day <= daysInMonth) {\n', '                valid = true;\n', '            }\n', '        }\n', '    }\n', '    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\n', '        if (isValidDate(year, month, day)) {\n', '            if (hour < 24 && minute < 60 && second < 60) {\n', '                valid = true;\n', '            }\n', '        }\n', '    }\n', '    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\n', '        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        leapYear = _isLeapYear(year);\n', '    }\n', '    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n', '        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n', '    }\n', '    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\n', '        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n', '    }\n', '    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\n', '        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n', '    }\n', '    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\n', '        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        daysInMonth = _getDaysInMonth(year, month);\n', '    }\n', '    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n', '        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '            daysInMonth = 31;\n', '        } else if (month != 2) {\n', '            daysInMonth = 30;\n', '        } else {\n', '            daysInMonth = _isLeapYear(year) ? 29 : 28;\n', '        }\n', '    }\n', '    // 1 = Monday, 7 = Sunday\n', '    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\n', '        uint _days = timestamp / SECONDS_PER_DAY;\n', '        dayOfWeek = (_days + 3) % 7 + 1;\n', '    }\n', '\n', '    function getYear(uint timestamp) internal pure returns (uint year) {\n', '        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '    function getMonth(uint timestamp) internal pure returns (uint month) {\n', '        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '    function getDay(uint timestamp) internal pure returns (uint day) {\n', '        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '    function getHour(uint timestamp) internal pure returns (uint hour) {\n', '        uint secs = timestamp % SECONDS_PER_DAY;\n', '        hour = secs / SECONDS_PER_HOUR;\n', '    }\n', '    function getMinute(uint timestamp) internal pure returns (uint minute) {\n', '        uint secs = timestamp % SECONDS_PER_HOUR;\n', '        minute = secs / SECONDS_PER_MINUTE;\n', '    }\n', '    function getSecond(uint timestamp) internal pure returns (uint second) {\n', '        second = timestamp % SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n', '        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        year += _years;\n', '        uint daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n', '        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        month += _months;\n', '        year += (month - 1) / 12;\n', '        month = (month - 1) % 12 + 1;\n', '        uint daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp + _seconds;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n', '        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        year -= _years;\n', '        uint daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n', '        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        uint yearMonth = year * 12 + (month - 1) - _months;\n', '        year = yearMonth / 12;\n', '        month = yearMonth % 12 + 1;\n', '        uint daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n', '        newTimestamp = timestamp - _seconds;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n', '        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n', '        _years = toYear - fromYear;\n', '    }\n', '    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n', '        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n', '        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n', '    }\n', '    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n', '    }\n', '    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n', '    }\n', '    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n', '    }\n', '    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _seconds = toTimestamp - fromTimestamp;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', "// Testing BokkyPooBah's DateTime Library\n", '//\n', '// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract TestDateTime {\n', '    using BokkyPooBahsDateTimeLibrary for uint;\n', '\n', '    uint public nextYear;\n', '\n', '    function test() public {\n', '        uint today = now;\n', '        nextYear = today.addYears(1);\n', '    }\n', '\n', '    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\n', '        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\n', '    }\n', '    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\n', '        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\n', '    }\n', '    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\n', '        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\n', '    }\n', '    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n', '        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\n', '    }\n', '\n', '    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\n', '        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\n', '    }\n', '    function _isLeapYear(uint year) public pure returns (bool leapYear) {\n', '        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\n', '    }\n', '    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\n', '        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\n', '    }\n', '    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\n', '        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\n', '    }\n', '\n', '    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\n', '        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\n', '    }\n', '    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\n', '        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\n', '    }\n', '    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\n', '        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\n', '    }\n', '\n', '    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\n', '        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\n', '    }\n', '    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\n', '        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\n', '    }\n', '\n', '    function getYear(uint timestamp) public pure returns (uint year) {\n', '        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\n', '    }\n', '    function getMonth(uint timestamp) public pure returns (uint month) {\n', '        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\n', '    }\n', '    function getDay(uint timestamp) public pure returns (uint day) {\n', '        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\n', '    }\n', '    function getHour(uint timestamp) public pure returns (uint hour) {\n', '        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\n', '    }\n', '    function getMinute(uint timestamp) public pure returns (uint minute) {\n', '        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\n', '    }\n', '    function getSecond(uint timestamp) public pure returns (uint second) {\n', '        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\n', '    }\n', '\n', '    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\n', '    }\n', '    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\n', '    }\n', '    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\n', '    }\n', '    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\n', '    }\n', '    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\n', '    }\n', '    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\n', '    }\n', '\n', '    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\n', '    }\n', '    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\n', '    }\n', '    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\n', '    }\n', '    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\n', '    }\n', '    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\n', '    }\n', '    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\n', '        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\n', '    }\n', '\n', '    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\n', '        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\n', '    }\n', '    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\n', '        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\n', '    }\n', '    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\n', '        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\n', '    }\n', '    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\n', '        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\n', '    }\n', '    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\n', '        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\n', '    }\n', '    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\n', '        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Artemis is Ownable, ERC20 {\n', '    \n', '    using BokkyPooBahsDateTimeLibrary for uint;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public MAX_SUPPLY =  10000000 * 10**18;\n', '    uint public last_development_withdrawal_time;\n', '    //TOKENS ALLOTMENT\n', '    uint256 public STAKING_RESERVE =  1670000 * 10**18;\n', '    uint256 public TEAM_AND_ADVISOR_RESERVE =  240000 * 10**18;\n', '    uint256 public DEVELOPMENT_RESERVE =  200000 * 10**18;\n', '    uint256 public MARKETING_AND_LISTING_RESERVE =  400000 * 10**18;\n', '    uint256 public MINTABLE_SUPPLY =  7000000 * 10**18;\n', '    uint256 public TOTAL_MINTABLE_MINTED =  0;\n', '    uint256 public PARTNERSHIP_INTERGRATION_RESERVE =  490000 * 10**18;\n', '\n', '\n', '\n', '\n', '\n', '    address public _stakingWallet;\n', '    address public _teamWallet;\n', '    address public _developmentWallet;\n', '    address public _marketingWallet;\n', '    address public _partnershipIntegrationWallet;\n', '\n', '\n', '\n', '    function checkTeamWalletWithdrawalEligiblity() private returns(bool){\n', '        if(last_development_withdrawal_time ==0){\n', '            return true;\n', '        }\n', '        uint _days = BokkyPooBahsDateTimeLibrary.diffDays(last_development_withdrawal_time, now);\n', '\n', '        if(_days>30){\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '\n', '    function claimTeamTokens()public{\n', '        require(checkTeamWalletWithdrawalEligiblity(),"1 month has not passed please try after one month");\n', '\n', '        require(msg.sender == _teamWallet,"You are not authorized");\n', '        require(TEAM_AND_ADVISOR_RESERVE >0,"Development Reserve Empty");\n', '        uint256 amount =  20000 * 10**18;\n', '        _mint(_teamWallet, amount);\n', '        last_development_withdrawal_time = now;\n', '        TEAM_AND_ADVISOR_RESERVE = TEAM_AND_ADVISOR_RESERVE.sub(amount);\n', '    }\n', '\n', '\n', '    function claimDevelopmentTokens()public{\n', '\n', '        \n', '         require(msg.sender == _developmentWallet,"You are not authorized");\n', '        _mint(_developmentWallet, DEVELOPMENT_RESERVE);\n', '        DEVELOPMENT_RESERVE = 0;\n', '    }\n', '\n', '    function claimMarketingTokens()public{\n', '        require(msg.sender == _marketingWallet,"You are not authorized");\n', '        _mint(_marketingWallet, MARKETING_AND_LISTING_RESERVE);\n', '        MARKETING_AND_LISTING_RESERVE = 0;\n', '\n', '    }\n', '    \n', '    \n', '     function claimPartnershipAndIntegrationTokens()public{\n', '        require(msg.sender == _partnershipIntegrationWallet,"You are not authorized");\n', '        _mint(_partnershipIntegrationWallet, PARTNERSHIP_INTERGRATION_RESERVE);\n', '        PARTNERSHIP_INTERGRATION_RESERVE = 0;\n', '\n', '    }\n', '\n', '    function claimStakingTokens()public{\n', '        require(msg.sender == _stakingWallet,"You are not authorized");\n', '        _mint(_stakingWallet, STAKING_RESERVE);\n', '        STAKING_RESERVE=0;\n', '    }\n', '\n', '\n', '\n', '    constructor(address stakingWallet,\n', '                address  teamWallet,\n', '                address  developmentWallet,\n', '                address marketingWallet,\n', '                address partnershipIntegrationWallet)\n', '                 public ERC20("Artemis Vision", "ARV") {\n', '\n', '\n', '        _stakingWallet = stakingWallet;\n', '        _teamWallet = teamWallet;\n', '        _developmentWallet = developmentWallet;\n', '        _marketingWallet = marketingWallet;\n', '\n', '        _partnershipIntegrationWallet = partnershipIntegrationWallet;\n', '                  \n', '                     \n', ' }\n', '\n', '   \n', '   \n', '   \n', '   \n', '    function mint(address account, uint256 amount) public onlyOwner {\n', '        require(TOTAL_MINTABLE_MINTED.add(amount)<=MINTABLE_SUPPLY,"Max Supply Exceeds");\n', '        _mint(account, amount);\n', '        TOTAL_MINTABLE_MINTED = TOTAL_MINTABLE_MINTED.add(amount);\n', '    }\n', '\n', '\n', '\n', '   \n', '    function burn(address account, uint256 amount) public onlyOwner {\n', '        _burn(account, amount);\n', '    }\n', '\n', '    function recoverERC20( uint256 tokenAmount) public virtual onlyOwner {\n', '        IERC20(address(this)).transfer(owner(), tokenAmount);\n', '    }\n', '}']