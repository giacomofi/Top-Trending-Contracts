['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-13\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-03\n', '*/\n', '\n', '// roles.sol - roled based authentication\n', '\n', '// Copyright (C) 2017  DappHub, LLC\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity >=0.6.7;\n', '\n', 'interface DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) external view returns (bool);\n', '}\n', '\n', 'abstract contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig), "ds-auth-unauthorized");\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) virtual internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSRoles is DSAuth, DSAuthority\n', '{\n', '    mapping(address=>bool) _root_users;\n', '    mapping(address=>bytes32) _user_roles;\n', '    mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;\n', '    mapping(address=>mapping(bytes4=>bool)) _public_capabilities;\n', '\n', '    // --- Events ---\n', '    event SetRootUser(address who, bool enabled);\n', '    event SetUserRole(address who, uint8 role, bool enabled);\n', '    event SetPublicCapability(address code, bytes4 sig, bool enabled);\n', '    event SetRoleCapability(uint8 role, address code, bytes4 sig, bool enabled);\n', '\n', '    function getUserRoles(address who)\n', '        public\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return _user_roles[who];\n', '    }\n', '\n', '    function getCapabilityRoles(address code, bytes4 sig)\n', '        public\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return _capability_roles[code][sig];\n', '    }\n', '\n', '    function isUserRoot(address who)\n', '        virtual\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _root_users[who];\n', '    }\n', '\n', '    function isCapabilityPublic(address code, bytes4 sig)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _public_capabilities[code][sig];\n', '    }\n', '\n', '    function hasUserRole(address who, uint8 role)\n', '        virtual\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 roles = getUserRoles(who);\n', '        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n', '        return bytes32(0) != roles & shifted;\n', '    }\n', '\n', '    function canCall(address caller, address code, bytes4 sig)\n', '        override\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        if( isUserRoot(caller) || isCapabilityPublic(code, sig) ) {\n', '            return true;\n', '        } else {\n', '            bytes32 has_roles = getUserRoles(caller);\n', '            bytes32 needs_one_of = getCapabilityRoles(code, sig);\n', '            return bytes32(0) != has_roles & needs_one_of;\n', '        }\n', '    }\n', '\n', '    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\n', '        return (input ^ bytes32(uint(-1)));\n', '    }\n', '\n', '    function setRootUser(address who, bool enabled)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        _root_users[who] = enabled;\n', '        emit SetRootUser(who, enabled);\n', '    }\n', '\n', '    function setUserRole(address who, uint8 role, bool enabled)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        bytes32 last_roles = _user_roles[who];\n', '        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n', '        if( enabled ) {\n', '            _user_roles[who] = last_roles | shifted;\n', '        } else {\n', '            _user_roles[who] = last_roles & BITNOT(shifted);\n', '        }\n', '        emit SetUserRole(who, role, enabled);\n', '    }\n', '\n', '    function setPublicCapability(address code, bytes4 sig, bool enabled)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        _public_capabilities[code][sig] = enabled;\n', '        emit SetPublicCapability(code, sig, enabled);\n', '    }\n', '\n', '    function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)\n', '        virtual\n', '        public\n', '        auth\n', '    {\n', '        bytes32 last_roles = _capability_roles[code][sig];\n', '        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n', '        if( enabled ) {\n', '            _capability_roles[code][sig] = last_roles | shifted;\n', '        } else {\n', '            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\n', '        }\n', '        emit SetRoleCapability(role, code, sig, enabled);\n', '    }\n', '\n', '}']