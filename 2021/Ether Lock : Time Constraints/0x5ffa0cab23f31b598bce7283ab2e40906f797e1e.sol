['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ListInterface {\n', '    function accounts() external view returns (uint64);\n', '    function accountAddr(uint64) external view returns (address);\n', '}\n', '\n', 'interface AccountInterface {\n', '    function version() external view returns (uint64);\n', '}\n', '\n', 'contract InstaDSAPowerResolver {\n', '\n', '    struct DSAs {\n', '        address dsa;\n', '        uint256 version;\n', '    }\n', '\n', '    function getTotalAccounts() public view returns(uint totalAccounts) {\n', '        ListInterface list = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\n', '        totalAccounts = uint(list.accounts());\n', '    }\n', '\n', '    function getDSAWalletsData(uint start, uint end) public view returns(DSAs[] memory wallets) {\n', '        assert(start < end);\n', '        ListInterface list = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\n', '        uint totalAccounts = uint(list.accounts());\n', '        end = totalAccounts < end ? totalAccounts : end;\n', '        uint len = (end - start) + 1;\n', '        wallets = new DSAs[](len);\n', '        for (uint i = 0; i < len; i++) {\n', '            address dsa = list.accountAddr(uint64(start + i));\n', '            wallets[i] = DSAs({\n', '                dsa: dsa,\n', '                version: AccountInterface(dsa).version()\n', '            });\n', '        }\n', '        return wallets;\n', '    }\n', '\n', '    function getDSAWallets(uint start, uint end) public view returns(address[] memory) {\n', '        assert(start < end);\n', '        ListInterface list = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\n', '        uint totalAccounts = uint(list.accounts());\n', '        end = totalAccounts < end ? totalAccounts : end;\n', '        uint len = (end - start) + 1;\n', '        address[] memory wallets = new address[](len);\n', '        for (uint i = 0; i < len; i++) {\n', '            wallets[i] = list.accountAddr(uint64(start + i));\n', '        }\n', '        return wallets;\n', '    }\n', '\n', '    function getDSAVersions(address[] memory dsas) public view returns(uint256[] memory versions) {\n', '        versions = new uint256[](dsas.length);\n', '        for (uint i = 0; i < dsas.length; i++) {\n', '            versions[i] = AccountInterface(dsas[i]).version();\n', '        }\n', '        return versions;\n', '    }\n', '}']