['// SPDX-License-Identifier: GPL-2.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Ownable.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./IERC20.sol";\n', 'import "./IncentiveDistribution.sol";\n', '\n', 'contract LiquidityMiningReward is Ownable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public stakeToken;\n', '    mapping(address => uint256) public claimIds;\n', '    mapping(address => uint256) public stakeAmounts;\n', '    IncentiveDistribution incentiveDistributor;\n', '    uint256 public incentiveStart;\n', '\n', '    constructor(\n', '        address _incentiveDistributor,\n', '        address _stakeToken,\n', '        uint256 startTimestamp\n', '    ) {\n', '        incentiveDistributor = IncentiveDistribution(_incentiveDistributor);\n', '        stakeToken = IERC20(_stakeToken);\n', '        incentiveStart = startTimestamp;\n', '    }\n', '\n', '    function migrateIncentiveDistributor(address newDistributor) external onlyOwner {\n', '        incentiveDistributor = IncentiveDistribution(newDistributor);\n', '    }\n', '\n', '    function depositStake(uint256 amount) external {\n', '        require(\n', '            block.timestamp > incentiveStart,\n', '            "Incentive hasn\'t started yet"\n', '        );\n', '\n', '        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        if (claimIds[msg.sender] > 0) {\n', '            incentiveDistributor.addToClaimAmount(\n', '                0,\n', '                claimIds[msg.sender],\n', '                amount\n', '            );\n', '        } else {\n', '            uint256 claimId =\n', '                incentiveDistributor.startClaim(0, msg.sender, amount);\n', '            claimIds[msg.sender] = claimId;\n', '            require(claimId > 0, "Distribution is over or paused");\n', '        }\n', '\n', '        stakeAmounts[msg.sender] += amount;\n', '    }\n', '\n', '    function withdrawStake(uint256 amount) external {\n', '        uint256 stakeAmount = stakeAmounts[msg.sender];\n', '        require(stakeAmount >= amount, "Not enough stake to withdraw");\n', '\n', '        stakeToken.safeTransfer(msg.sender, amount);\n', '        stakeAmounts[msg.sender] = stakeAmount - amount;\n', '\n', '        if (stakeAmount == amount) {\n', '            incentiveDistributor.endClaim(0, claimIds[msg.sender]);\n', '            claimIds[msg.sender] = 0;\n', '        } else {\n', '            incentiveDistributor.subtractFromClaimAmount(\n', '                0,\n', '                claimIds[msg.sender],\n', '                amount\n', '            );\n', '        }\n', '    }\n', '\n', '    function withdrawReward() external returns (uint256) {\n', '        uint256 claimId = claimIds[msg.sender];\n', '        require(claimId > 0, "No registered claim");\n', '        return incentiveDistributor.withdrawReward(0, claimId);\n', '    }\n', '}\n', '\n', '// USDC - MFI pair token\n', '// 0x9d640080af7c81911d87632a7d09cc4ab6b133ac\n', '\n', '// on ropsten:\n', '// 0xc4c79A0e1C7A9c79f1e943E3a5bEc65396a5434a']