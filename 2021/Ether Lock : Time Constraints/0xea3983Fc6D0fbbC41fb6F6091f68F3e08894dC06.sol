['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.0;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address private _nextOwner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'Only the owner of the contract can do that');\n", '        _;\n', '    }\n', '    \n', '    function transferOwnership(address nextOwner) public onlyOwner {\n', '        _nextOwner = nextOwner;\n', '    }\n', '    \n', '    function takeOwnership() public {\n', "        require(msg.sender == _nextOwner, 'Must be given ownership to do that');\n", '        emit OwnershipTransferred(owner, _nextOwner);\n', '        owner = _nextOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract UnidoDistribution is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    // 0 - SEED\n', '    // 1 - PRIVATE\n', '    // 2 - TEAM\n', '    // 3 - ADVISOR\n', '    // 4 - ECOSYSTEM\n', '    // 5 - LIQUIDITY\n', '    // 6 - RESERVE\n', '    enum POOL{SEED, PRIVATE, TEAM, ADVISOR, ECOSYSTEM, LIQUIDITY, RESERVE}\n', '    \n', '    mapping (POOL => uint) public pools;\n', '    \n', '    uint256 public totalSupply;\n', '    string public constant name = "Unido";\n', '    uint256 public constant decimals = 18;\n', '    string public constant symbol = "UDO";\n', '    address[] public participants;\n', '    \n', '    bool private isActive;\n', '    uint256 private scanLength = 150;\n', '    uint256 private continuePoint;\n', '    uint256[] private deletions;\n', '    \n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping(address => uint256)) private allowances;\n', '    mapping (address => uint256) public lockoutPeriods;\n', '    mapping (address => uint256) public lockoutBalances;\n', '    mapping (address => uint256) public lockoutReleaseRates;\n', '    \n', '    event Active(bool isActive);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Burn(address indexed tokenOwner, uint tokens);\n', '    \n', '    constructor () {\n', '        pools[POOL.SEED] = 15000000 * 10**decimals;\n', '        pools[POOL.PRIVATE] = 16000000 * 10**decimals;\n', '        pools[POOL.TEAM] = 18400000 * 10**decimals;\n', '        pools[POOL.ADVISOR] = 10350000 * 10**decimals;\n', '        pools[POOL.ECOSYSTEM] = 14375000 * 10**decimals;\n', '        pools[POOL.LIQUIDITY] = 8625000 * 10**decimals;\n', '        pools[POOL.RESERVE] = 32250000 * 10**decimals;\n', '        \n', '        totalSupply = pools[POOL.SEED] + pools[POOL.PRIVATE] + pools[POOL.TEAM] + pools[POOL.ADVISOR] + pools[POOL.ECOSYSTEM] + pools[POOL.LIQUIDITY] + pools[POOL.RESERVE];\n', '\n', '        // Give POLS private sale directly\n', '        uint pols = 2000000 * 10**decimals;\n', '        pools[POOL.PRIVATE] = pools[POOL.PRIVATE].sub(pols);\n', '        balances[address(0xeFF02cB28A05EebF76cB6aF993984731df8479b1)] = pols;\n', '        \n', '        // Give LIQUIDITY pool their half directly\n', '        uint liquid = pools[POOL.LIQUIDITY].div(2);\n', '        pools[POOL.LIQUIDITY] = pools[POOL.LIQUIDITY].sub(liquid);\n', '        balances[address(0xd6221a4f8880e9Aa355079F039a6012555556974)] = liquid;\n', '    }\n', '    \n', '    function _isTradeable() internal view returns (bool) {\n', '        return isActive;\n', '    }\n', '    \n', '    function isTradeable() public view returns (bool) {\n', '        return _isTradeable();\n', '    }\n', '    \n', '    function setTradeable() external onlyOwner {\n', '        require (!isActive, "Can only set tradeable when its not already tradeable");\n', '        isActive = true;\n', '        Active(true);\n', '    }\n', '    \n', '    function setScanLength(uint256 len) external onlyOwner {\n', '        require (len > 20, "Values 20 or less are impractical");\n', '        require (len <= 200, "Values greater than 200 may cause the updateRelease function to fail");\n', '        scanLength = len;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint) {\n', '        return allowances[tokenOwner][spender];\n', '    }\n', '    \n', '    function spendable(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner].sub(lockoutBalances[tokenOwner]);\n', '    }\n', '    \n', '    function transfer(address to, uint tokens) public returns (bool) {\n', '        require (_isTradeable(), "Contract is not tradeable yet");\n', '        require (balances[msg.sender].sub(lockoutBalances[msg.sender]) >= tokens, "Must have enough spendable tokens");\n', '        require (tokens > 0, "Must transfer non-zero amount");\n', '        require (to != address(0), "Cannot send to the 0 address");\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool) {\n', '        _approve(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint tokens) internal {\n', '        require (owner != address(0), "Cannot approve from the 0 address");\n', '        require (spender != address(0), "Cannot approve the 0 address");\n', '        \n', '        allowances[owner][spender] = tokens;\n', '        Approval(owner, spender, tokens);\n', '    }\n', '    \n', '    function burn(uint tokens) public {\n', '        require (balances[msg.sender].sub(lockoutBalances[msg.sender]) >= tokens, "Must have enough spendable tokens");\n', '        require (tokens > 0, "Must burn non-zero amount");\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        totalSupply = totalSupply.sub(tokens);\n', '        Burn(msg.sender, tokens);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool) {\n', '        require (_isTradeable(), "Contract is not trading yet");\n', '        require (balances[from].sub(lockoutBalances[from]) >= tokens, "Must have enough spendable tokens");\n', '        require (allowances[from][msg.sender] >= tokens, "Must be approved to spend that much");\n', '        require (tokens > 0, "Must transfer non-zero amount");\n', '        require (from != address(0), "Cannot send from the 0 address");\n', '        require (to != address(0), "Cannot send to the 0 address");\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowances[from][msg.sender] = allowances[from][msg.sender].sub(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function addParticipants(POOL pool, address[] calldata _participants, uint256[] calldata _stakes) external onlyOwner {\n', '        require (pool >= POOL.SEED && pool <= POOL.RESERVE, "Must select a valid pool");\n', '        require (_participants.length == _stakes.length, "Must have equal array sizes");\n', '        \n', '        uint lockoutPeriod;\n', '        uint lockoutReleaseRate;\n', '        \n', '        if (pool == POOL.SEED) {\n', '            lockoutPeriod = 1;\n', '            lockoutReleaseRate = 5;\n', '        } else if (pool == POOL.PRIVATE) {\n', '            lockoutReleaseRate = 4;\n', '        } else if (pool == POOL.TEAM) {\n', '            lockoutPeriod = 12;\n', '            lockoutReleaseRate = 12;\n', '        } else if (pool == POOL.ADVISOR) {\n', '            lockoutPeriod = 6;\n', '            lockoutReleaseRate = 6;\n', '        } else if (pool == POOL.ECOSYSTEM) {\n', '            lockoutPeriod = 3;\n', '            lockoutReleaseRate = 9;\n', '        } else if (pool == POOL.LIQUIDITY) {\n', '            lockoutReleaseRate = 1;\n', '            lockoutPeriod = 1;\n', '        } else if (pool == POOL.RESERVE) {\n', '            lockoutReleaseRate = 18;\n', '        }\n', '        \n', '        uint256 sum;\n', '        uint256 len = _participants.length;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            address p = _participants[i];\n', '            require(lockoutBalances[p] == 0, "Participants can\'t be involved in multiple lock ups simultaneously");\n', '        \n', '            participants.push(p);\n', '            lockoutBalances[p] = _stakes[i];\n', '            balances[p] = balances[p].add(_stakes[i]);\n', '            lockoutPeriods[p] = lockoutPeriod;\n', '            lockoutReleaseRates[p] = lockoutReleaseRate;\n', '            sum = sum.add(_stakes[i]);\n', '        }\n', '        \n', '        require(sum <= pools[pool], "Insufficient amount left in pool for this");\n', '        pools[pool] = pools[pool].sub(sum);\n', '    }\n', '    \n', '    function finalizeParticipants(POOL pool) external onlyOwner {\n', '        uint leftover = pools[pool];\n', '        pools[pool] = 0;\n', '        totalSupply = totalSupply.sub(leftover);\n', '    }\n', '    \n', '    /**\n', '     * For each account with an active lockout, if their lockout has expired \n', '     * then release their lockout at the lockout release rate\n', '     * If the lockout release rate is 0, assume its all released at the date\n', '     * Only do max 100 at a time, call repeatedly which it returns true\n', '     */\n', '    function updateRelease() external onlyOwner returns (bool) {\n', '        uint scan = scanLength;\n', '        uint len = participants.length;\n', '        uint continueAddScan = continuePoint.add(scan);\n', '        for (uint i = continuePoint; i < len && i < continueAddScan; i++) {\n', '            address p = participants[i];\n', '            if (lockoutPeriods[p] > 0) {\n', '                lockoutPeriods[p]--;\n', '            } else if (lockoutReleaseRates[p] > 0) {\n', '                uint rate = lockoutReleaseRates[p];\n', '                \n', '                uint release;\n', '                if (rate == 18) {\n', '                    // First release of reserve is 12.5%\n', '                    release = lockoutBalances[p].div(8);\n', '                } else {\n', '                    release = lockoutBalances[p].div(lockoutReleaseRates[p]);\n', '                }\n', '                \n', '                lockoutBalances[p] = lockoutBalances[p].sub(release);\n', '                lockoutReleaseRates[p]--;\n', '            } else {\n', '                deletions.push(i);\n', '            }\n', '        }\n', '        continuePoint = continuePoint.add(scan);\n', '        if (continuePoint >= len) {\n', '            continuePoint = 0;\n', '            while (deletions.length > 0) {\n', '                uint index = deletions[deletions.length-1];\n', '                deletions.pop();\n', '\n', '                participants[index] = participants[participants.length - 1];\n', '                participants.pop();\n', '            }\n', '            return false;\n', '        }\n', '        \n', '        return true;\n', '    }\n', '}']