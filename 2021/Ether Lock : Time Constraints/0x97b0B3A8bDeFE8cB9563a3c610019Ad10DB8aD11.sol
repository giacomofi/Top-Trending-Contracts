['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title InstaConnectorsV2\n', ' * @dev Registry for Connectors.\n', ' */\n', '\n', 'interface IndexInterface {\n', '    function master() external view returns (address);\n', '}\n', '\n', 'interface ConnectorInterface {\n', '    function name() external view returns (string memory);\n', '}\n', '\n', 'contract Controllers {\n', '\n', '    event LogController(address indexed addr, bool indexed isChief);\n', '\n', '    // InstaIndex Address.\n', '    address public immutable instaIndex;\n', '\n', '    constructor(address _instaIndex) {\n', '        instaIndex = _instaIndex;\n', '    }\n', '\n', '    // Enabled Chief(Address of Chief => bool).\n', '    mapping(address => bool) public chief;\n', '    // Enabled Connectors(Connector name => address).\n', '    mapping(string => address) public connectors;\n', '\n', '    /**\n', '    * @dev Throws if the sender not is Master Address from InstaIndex\n', '    * or Enabled Chief.\n', '    */\n', '    modifier isChief {\n', '        require(chief[msg.sender] || msg.sender == IndexInterface(instaIndex).master(), "not-an-chief");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Toggle a Chief. Enable if disable & vice versa\n', '     * @param _chiefAddress Chief Address.\n', '    */\n', '    function toggleChief(address _chiefAddress) external {\n', '        require(msg.sender == IndexInterface(instaIndex).master(), "toggleChief: not-master");\n', '        chief[_chiefAddress] = !chief[_chiefAddress];\n', '        emit LogController(_chiefAddress, chief[_chiefAddress]);\n', '    }\n', '}\n', '\n', '\n', 'contract InstaConnectorsV2 is Controllers {\n', '    event LogConnectorAdded(\n', '        bytes32 indexed connectorNameHash,\n', '        string connectorName,\n', '        address indexed connector\n', '    );\n', '    event LogConnectorUpdated(\n', '        bytes32 indexed connectorNameHash,\n', '        string connectorName,\n', '        address indexed oldConnector,\n', '        address indexed newConnector\n', '    );\n', '    event LogConnectorRemoved(\n', '        bytes32 indexed connectorNameHash,\n', '        string connectorName,\n', '        address indexed connector\n', '    );\n', '\n', '    constructor(address _instaIndex) public Controllers(_instaIndex) {}\n', '\n', '    /**\n', '     * @dev Add Connectors\n', '     * @param _connectorNames Array of Connector Names.\n', '     * @param _connectors Array of Connector Address.\n', '    */\n', '    function addConnectors(string[] calldata _connectorNames, address[] calldata _connectors) external isChief {\n', '        require(_connectors.length == _connectors.length, "addConnectors: not same length");\n', '        for (uint i = 0; i < _connectors.length; i++) {\n', '            require(connectors[_connectorNames[i]] == address(0), "addConnectors: _connectorName added already");\n', '            require(_connectors[i] != address(0), "addConnectors: _connectors address not vaild");\n', '            ConnectorInterface(_connectors[i]).name(); // Checking if connector has function name()\n', '            connectors[_connectorNames[i]] = _connectors[i];\n', '            emit LogConnectorAdded(keccak256(abi.encodePacked(_connectorNames[i])), _connectorNames[i], _connectors[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Update Connectors\n', '     * @param _connectorNames Array of Connector Names.\n', '     * @param _connectors Array of Connector Address.\n', '    */\n', '    function updateConnectors(string[] calldata _connectorNames, address[] calldata _connectors) external isChief {\n', '        require(_connectorNames.length == _connectors.length, "updateConnectors: not same length");\n', '        for (uint i = 0; i < _connectors.length; i++) {\n', '            require(connectors[_connectorNames[i]] != address(0), "updateConnectors: _connectorName not added to update");\n', '            require(_connectors[i] != address(0), "updateConnectors: _connector address is not vaild");\n', '            ConnectorInterface(_connectors[i]).name(); // Checking if connector has function name()\n', '            emit LogConnectorUpdated(keccak256(abi.encodePacked(_connectorNames[i])), _connectorNames[i], connectors[_connectorNames[i]], _connectors[i]);\n', '            connectors[_connectorNames[i]] = _connectors[i];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Remove Connectors\n', '     * @param _connectorNames Array of Connector Names.\n', '    */\n', '    function removeConnectors(string[] calldata _connectorNames) external isChief {\n', '        for (uint i = 0; i < _connectorNames.length; i++) {\n', '            require(connectors[_connectorNames[i]] != address(0), "removeConnectors: _connectorName not added to update");\n', '            emit LogConnectorRemoved(keccak256(abi.encodePacked(_connectorNames[i])), _connectorNames[i], connectors[_connectorNames[i]]);\n', '            delete connectors[_connectorNames[i]];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check if Connector addresses are enabled.\n', '     * @param _connectors Array of Connector Names.\n', '    */\n', '    function isConnectors(string[] calldata _connectorNames) external view returns (bool isOk, address[] memory _connectors) {\n', '        isOk = true;\n', '        uint len = _connectorNames.length;\n', '        _connectors = new address[](len);\n', '        for (uint i = 0; i < _connectors.length; i++) {\n', '            _connectors[i] = connectors[_connectorNames[i]];\n', '            if (_connectors[i] == address(0)) {\n', '                isOk = false;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']