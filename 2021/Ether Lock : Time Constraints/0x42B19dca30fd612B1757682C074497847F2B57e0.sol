['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// File: @axie/contract-library/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    require(c / a == b);\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Since Solidity automatically asserts when dividing by 0,\n', '    // but we only need it to revert.\n', '    require(b > 0);\n', '    return a / b;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Same reason as `div`.\n', '    require(b > 0);\n', '    return a % b;\n', '  }\n', '\n', '  function ceilingDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\n', '  }\n', '\n', '  function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '}\n', '\n', '// File: @axie/contract-library/contracts/access/HasAdmin.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'contract HasAdmin {\n', '  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\n', '  event AdminRemoved(address indexed _oldAdmin);\n', '\n', '  address public admin;\n', '\n', '  modifier onlyAdmin {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  constructor() internal {\n', '    admin = msg.sender;\n', '    emit AdminChanged(address(0), admin);\n', '  }\n', '\n', '  function changeAdmin(address _newAdmin) external onlyAdmin {\n', '    require(_newAdmin != address(0));\n', '    emit AdminChanged(admin, _newAdmin);\n', '    admin = _newAdmin;\n', '  }\n', '\n', '  function removeAdmin() external onlyAdmin {\n', '    emit AdminRemoved(admin);\n', '    admin = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/chain/common/IValidator.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', 'contract IValidator {\n', '  event ValidatorAdded(uint256 indexed _id, address indexed _validator);\n', '  event ValidatorRemoved(uint256 indexed _id, address indexed _validator);\n', '  event ThresholdUpdated(\n', '    uint256 indexed _id,\n', '    uint256 indexed _numerator,\n', '    uint256 indexed _denominator,\n', '    uint256 _previousNumerator,\n', '    uint256 _previousDenominator\n', '  );\n', '\n', '  function isValidator(address _addr) public view returns (bool);\n', '  function getValidators() public view returns (address[] memory _validators);\n', '\n', '  function checkThreshold(uint256 _voteCount) public view returns (bool);\n', '}\n', '\n', '// File: contracts/chain/common/Validator.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', 'contract Validator is IValidator {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => bool) validatorMap;\n', '  address[] public validators;\n', '  uint256 public validatorCount;\n', '\n', '  uint256 public num;\n', '  uint256 public denom;\n', '\n', '  constructor(address[] memory _validators, uint256 _num, uint256 _denom)\n', '    public\n', '  {\n', '    validators = _validators;\n', '    validatorCount = _validators.length;\n', '\n', '    for (uint256 _i = 0; _i < validatorCount; _i++) {\n', '      address _validator = _validators[_i];\n', '      validatorMap[_validator] = true;\n', '    }\n', '\n', '    num = _num;\n', '    denom = _denom;\n', '  }\n', '\n', '  function isValidator(address _addr)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return validatorMap[_addr];\n', '  }\n', '\n', '  function getValidators()\n', '    public\n', '    view\n', '    returns (address[] memory _validators)\n', '  {\n', '    _validators = validators;\n', '  }\n', '\n', '  function checkThreshold(uint256 _voteCount)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _voteCount.mul(denom) >= num.mul(validatorCount);\n', '  }\n', '\n', '  function _addValidator(uint256 _id, address _validator)\n', '    internal\n', '  {\n', '    require(!validatorMap[_validator]);\n', '\n', '    validators.push(_validator);\n', '    validatorMap[_validator] = true;\n', '    validatorCount++;\n', '\n', '    emit ValidatorAdded(_id, _validator);\n', '  }\n', '\n', '  function _removeValidator(uint256 _id, address _validator)\n', '    internal\n', '  {\n', '    require(isValidator(_validator));\n', '\n', '    uint256 _index;\n', '    for (uint256 _i = 0; _i < validatorCount; _i++) {\n', '      if (validators[_i] == _validator) {\n', '        _index = _i;\n', '        break;\n', '      }\n', '    }\n', '\n', '    validatorMap[_validator] = false;\n', '    validators[_index] = validators[validatorCount - 1];\n', '    validators.pop();\n', '\n', '    validatorCount--;\n', '\n', '    emit ValidatorRemoved(_id, _validator);\n', '  }\n', '\n', '  function _updateQuorum(uint256 _id, uint256 _numerator, uint256 _denominator)\n', '    internal\n', '  {\n', '    require(_numerator <= _denominator);\n', '    uint256 _previousNumerator = num;\n', '    uint256 _previousDenominator = denom;\n', '\n', '    num = _numerator;\n', '    denom = _denominator;\n', '\n', '    emit ThresholdUpdated(\n', '      _id,\n', '      _numerator,\n', '      _denominator,\n', '      _previousNumerator,\n', '      _previousDenominator\n', '    );\n', '  }\n', '}\n', '\n', '// File: contracts/chain/mainchain/MainchainValidator.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Validator\n', ' * @dev Simple validator contract\n', ' */\n', 'contract MainchainValidator is Validator, HasAdmin {\n', '  uint256 nonce;\n', '\n', '  constructor(\n', '    address[] memory _validators,\n', '    uint256 _num,\n', '    uint256 _denom\n', '  ) Validator(_validators, _num, _denom) public {\n', '  }\n', '\n', '  function addValidators(address[] calldata _validators) external onlyAdmin {\n', '    for (uint256 _i; _i < _validators.length; ++_i) {\n', '      _addValidator(nonce++, _validators[_i]);\n', '    }\n', '  }\n', '\n', '  function removeValidator(address _validator) external onlyAdmin {\n', '    _removeValidator(nonce++, _validator);\n', '  }\n', '\n', '  function updateQuorum(uint256 _numerator, uint256 _denominator) external onlyAdmin {\n', '    _updateQuorum(nonce++, _numerator, _denominator);\n', '  }\n', '}']