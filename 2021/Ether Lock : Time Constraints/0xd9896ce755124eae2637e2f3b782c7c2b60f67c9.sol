['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-09\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'interface IToken {\n', '    function transfer(address to, uint256 tokens) external returns (bool success);\n', '    function burnTokens(uint256 _amount) external;\n', '    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n', '}\n', '\n', '\n', 'contract Presale is Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    bool public isPresaleOpen;\n', '    \n', '    //@dev ERC20 token address and decimals\n', '    address public tokenAddress;\n', '    uint256 public tokenDecimals = 9;\n', '    \n', '    //@dev amount of tokens per ether 100 indicates 1 token per eth\n', '    uint256 public tokenRatePerEth = 137_00;\n', '    //@dev decimal for tokenRatePerEth,\n', '    //2 means if you want 100 tokens per eth then set the rate as 100 + number of rateDecimals i.e => 10000\n', '    uint256 public rateDecimals = 2;\n', '    \n', '    //@dev max and min token buy limit per account\n', '    uint256 public minEthLimit = 500 finney;\n', '    uint256 public maxEthLimit = 3 ether;\n', '    \n', '    mapping(address => uint256) public usersInvestments;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function startPresale() external onlyOwner{\n', '        require(!isPresaleOpen, "Presale is open");\n', '        \n', '        isPresaleOpen = true;\n', '    }\n', '    \n', '    function closePrsale() external onlyOwner{\n', '        require(isPresaleOpen, "Presale is not open yet.");\n', '        \n', '        isPresaleOpen = false;\n', '    }\n', '    \n', '    function setTokenAddress(address token) external onlyOwner {\n', '        require(tokenAddress == address(0), "Token address is already set.");\n', '        require(token != address(0), "Token address zero not allowed.");\n', '        \n', '        tokenAddress = token;\n', '    }\n', '    \n', '    function setTokenDecimals(uint256 decimals) external onlyOwner {\n', '       tokenDecimals = decimals;\n', '    }\n', '    \n', '    function setMinEthLimit(uint256 amount) external onlyOwner {\n', '        minEthLimit = amount;    \n', '    }\n', '    \n', '    function setMaxEthLimit(uint256 amount) external onlyOwner {\n', '        maxEthLimit = amount;    \n', '    }\n', '    \n', '    function setTokenRatePerEth(uint256 rate) external onlyOwner {\n', '        tokenRatePerEth = rate;\n', '    }\n', '    \n', '    function setRateDecimals(uint256 decimals) external onlyOwner {\n', '        rateDecimals = decimals;\n', '    }\n', '    \n', '    receive() external payable{\n', '        require(isPresaleOpen, "Presale is not open.");\n', '        require(\n', '                usersInvestments[msg.sender].add(msg.value) <= maxEthLimit\n', '                && usersInvestments[msg.sender].add(msg.value) >= minEthLimit,\n', '                "Installment Invalid."\n', '            );\n', '        \n', '        //@dev calculate the amount of tokens to transfer for the given eth\n', '        uint256 tokenAmount = getTokensPerEth(msg.value);\n', '        \n', '        require(IToken(tokenAddress).transfer(msg.sender, tokenAmount), "Insufficient balance of presale contract!");\n', '        \n', '        usersInvestments[msg.sender] = usersInvestments[msg.sender].add(msg.value);\n', '        \n', '        //@dev send received funds to the owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function getTokensPerEth(uint256 amount) internal view returns(uint256) {\n', '        return amount.mul(tokenRatePerEth).div(\n', '            10**(uint256(18).sub(tokenDecimals).add(rateDecimals))\n', '            );\n', '    }\n', '    \n', '    function burnUnsoldTokens() external onlyOwner {\n', '        require(!isPresaleOpen, "You cannot burn tokens untitl the presale is closed.");\n', '        \n', '        IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   \n', '    }\n', '    \n', '    function getUnsoldTokens() external onlyOwner {\n', '        require(!isPresaleOpen, "You cannot get tokens until the presale is closed.");\n', '        \n', '        IToken(tokenAddress).transfer(owner, IToken(tokenAddress).balanceOf(address(this)) );\n', '    }\n', '}']