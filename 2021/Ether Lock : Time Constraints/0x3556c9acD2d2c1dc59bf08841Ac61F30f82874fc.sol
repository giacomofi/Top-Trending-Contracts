['// SPDX-License-Identifier: UNLICENSED\n', '// ALL RIGHTS RESERVED\n', '\n', '// Presale contract. Version 1\n', '\n', '/**\n', '  Allows a decentralised presale to take place, and on success creates a uniswap pair and locks liquidity on Unicrypt.\n', '  B_TOKEN, or base token, is the token the presale attempts to raise. (Usally ETH).\n', '  S_TOKEN, or sale token, is the token being sold, which investors buy with the base token.\n', '  If the base currency is set to the WETH9 address, the presale is in ETH.\n', '  Otherwise it is for an ERC20 token - such as DAI, USDC, WBTC etc.\n', '  For the Base token - It is advised to only use tokens such as ETH (WETH), DAI, USDC or tokens that have no rebasing, or complex fee on transfers. 1 token should ideally always be 1 token.\n', "  Token withdrawls are done on a percent of total contribution basis (opposed to via a hardcoded 'amount'). This allows \n", '  fee on transfer, rebasing, or any magically changing balances to still work for the Sale token.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./TransferHelper.sol";\n', 'import "./EnumerableSet.sol";\n', 'import "./SafeMath.sol";\n', 'import "./ReentrancyGuard.sol";\n', 'import "./IERC20.sol";\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IPresaleLockForwarder {\n', '    function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external;\n', '    function uniswapPairIsInitialised (address _token0, address _token1) external view returns (bool);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IPresaleSettings {\n', '    function getMaxPresaleLength () external view returns (uint256);\n', '    function getRound1Length () external view returns (uint256);\n', '    function userHoldsSufficientRound1Token (address _user) external view returns (bool);\n', '    function referrerIsValid(address _referrer) external view returns (bool);\n', '    function getBaseFee () external view returns (uint256);\n', '    function getTokenFee () external view returns (uint256);\n', '    function getEthAddress () external view returns (address payable);\n', '    function getTokenAddress () external view returns (address payable);\n', '    function getReferralFee () external view returns (uint256);\n', '    function getEthCreationFee () external view returns (uint256);\n', '}\n', '\n', 'contract Presale01 is ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '  \n', '  /// @notice Presale Contract Version, used to choose the correct ABI to decode the contract\n', '  uint256 public CONTRACT_VERSION = 1;\n', '  \n', '  struct PresaleInfo {\n', '    address payable PRESALE_OWNER;\n', '    IERC20 S_TOKEN; // sale token\n', '    IERC20 B_TOKEN; // base token // usually WETH (ETH)\n', '    uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\n', '    uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\n', '    uint256 AMOUNT; // the amount of presale tokens up for presale\n', '    uint256 HARDCAP;\n', '    uint256 SOFTCAP;\n', '    uint256 LIQUIDITY_PERCENT; // divided by 1000\n', '    uint256 LISTING_RATE; // fixed rate at which the token will list on uniswap\n', '    uint256 START_BLOCK;\n', '    uint256 END_BLOCK;\n', '    uint256 LOCK_PERIOD; // unix timestamp -> e.g. 2 weeks\n', '    bool PRESALE_IN_ETH; // if this flag is true the presale is raising ETH, otherwise an ERC20 token such as DAI\n', '  }\n', '  \n', '  struct PresaleFeeInfo {\n', '    uint256 UNICRYPT_BASE_FEE; // divided by 1000\n', '    uint256 UNICRYPT_TOKEN_FEE; // divided by 1000\n', '    uint256 REFERRAL_FEE; // divided by 1000\n', '    address payable BASE_FEE_ADDRESS;\n', '    address payable TOKEN_FEE_ADDRESS;\n', '    address payable REFERRAL_FEE_ADDRESS; // if this is not address(0), there is a valid referral\n', '  }\n', '  \n', '  struct PresaleStatus {\n', '    bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\n', '    bool LP_GENERATION_COMPLETE; // final flag required to end a presale and enable withdrawls\n', '    bool FORCE_FAILED; // set this flag to force fail the presale\n', '    uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\n', '    uint256 TOTAL_TOKENS_SOLD; // total presale tokens sold\n', '    uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful presale\n', '    uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on presale failure\n', '    uint256 ROUND1_LENGTH; // in blocks\n', '    uint256 NUM_BUYERS; // number of unique participants\n', '  }\n', '\n', '  struct BuyerInfo {\n', '    uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\n', '    uint256 tokensOwed; // num presale tokens a user is owed, can be withdrawn on presale success\n', '  }\n', '  \n', '  PresaleInfo public PRESALE_INFO;\n', '  PresaleFeeInfo public PRESALE_FEE_INFO;\n', '  PresaleStatus public STATUS;\n', '  address public PRESALE_GENERATOR;\n', '  IPresaleLockForwarder public PRESALE_LOCK_FORWARDER;\n', '  IPresaleSettings public PRESALE_SETTINGS;\n', '  address UNICRYPT_DEV_ADDRESS;\n', '  IUniswapV2Factory public UNI_FACTORY;\n', '  IWETH public WETH;\n', '  mapping(address => BuyerInfo) public BUYERS;\n', '  EnumerableSet.AddressSet private WHITELIST;\n', '\n', '  constructor(address _presaleGenerator) public {\n', '    PRESALE_GENERATOR = _presaleGenerator;\n', '    UNI_FACTORY = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '    WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    PRESALE_SETTINGS = IPresaleSettings(0x2A8977E2A829BE0dD8c94fC7886b15937a376C41);\n', '    PRESALE_LOCK_FORWARDER = IPresaleLockForwarder(0xCA07E89e9674e9BC5bB9CaDE6771FEc8e14e4042);\n', '    UNICRYPT_DEV_ADDRESS = 0x60e2E1b2a317EdfC870b6Fc6886F69083FB2099a;\n', '  }\n', '  \n', '  function init1 (\n', '    address payable _presaleOwner, \n', '    uint256 _amount,\n', '    uint256 _tokenPrice, \n', '    uint256 _maxEthPerBuyer, \n', '    uint256 _hardcap, \n', '    uint256 _softcap,\n', '    uint256 _liquidityPercent,\n', '    uint256 _listingRate,\n', '    uint256 _startblock,\n', '    uint256 _endblock,\n', '    uint256 _lockPeriod\n', '    ) external {\n', '          \n', "      require(msg.sender == PRESALE_GENERATOR, 'FORBIDDEN');\n", '      PRESALE_INFO.PRESALE_OWNER = _presaleOwner;\n', '      PRESALE_INFO.AMOUNT = _amount;\n', '      PRESALE_INFO.TOKEN_PRICE = _tokenPrice;\n', '      PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\n', '      PRESALE_INFO.HARDCAP = _hardcap;\n', '      PRESALE_INFO.SOFTCAP = _softcap;\n', '      PRESALE_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\n', '      PRESALE_INFO.LISTING_RATE = _listingRate;\n', '      PRESALE_INFO.START_BLOCK = _startblock;\n', '      PRESALE_INFO.END_BLOCK = _endblock;\n', '      PRESALE_INFO.LOCK_PERIOD = _lockPeriod;\n', '  }\n', '  \n', '  function init2 (\n', '    IERC20 _baseToken,\n', '    IERC20 _presaleToken,\n', '    uint256 _unicryptBaseFee,\n', '    uint256 _unicryptTokenFee,\n', '    uint256 _referralFee,\n', '    address payable _baseFeeAddress,\n', '    address payable _tokenFeeAddress,\n', '    address payable _referralAddress\n', '    ) external {\n', '          \n', "      require(msg.sender == PRESALE_GENERATOR, 'FORBIDDEN');\n", "      // require(!PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(_presaleToken), address(_baseToken)), 'PAIR INITIALISED');\n", '      \n', '      PRESALE_INFO.PRESALE_IN_ETH = address(_baseToken) == address(WETH);\n', '      PRESALE_INFO.S_TOKEN = _presaleToken;\n', '      PRESALE_INFO.B_TOKEN = _baseToken;\n', '      PRESALE_FEE_INFO.UNICRYPT_BASE_FEE = _unicryptBaseFee;\n', '      PRESALE_FEE_INFO.UNICRYPT_TOKEN_FEE = _unicryptTokenFee;\n', '      PRESALE_FEE_INFO.REFERRAL_FEE = _referralFee;\n', '      \n', '      PRESALE_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\n', '      PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\n', '      PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS = _referralAddress;\n', '      STATUS.ROUND1_LENGTH = PRESALE_SETTINGS.getRound1Length();\n', '  }\n', '  \n', '  modifier onlyPresaleOwner() {\n', '    require(PRESALE_INFO.PRESALE_OWNER == msg.sender, "NOT PRESALE OWNER");\n', '    _;\n', '  }\n', '  \n', '  function presaleStatus () public view returns (uint256) {\n', '    if (STATUS.FORCE_FAILED) {\n', '      return 3; // FAILED - force fail\n', '    }\n', '    if ((block.number > PRESALE_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED < PRESALE_INFO.SOFTCAP)) {\n', '      return 3; // FAILED - softcap not met by end block\n', '    }\n', '    if (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.HARDCAP) {\n', '      return 2; // SUCCESS - hardcap met\n', '    }\n', '    if ((block.number > PRESALE_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.SOFTCAP)) {\n', '      return 2; // SUCCESS - endblock and soft cap reached\n', '    }\n', '    if ((block.number >= PRESALE_INFO.START_BLOCK) && (block.number <= PRESALE_INFO.END_BLOCK)) {\n', '      return 1; // ACTIVE - deposits enabled\n', '    }\n', '    return 0; // QUED - awaiting start block\n', '  }\n', '  \n', '  // accepts msg.value for eth or _amount for ERC20 tokens\n', '  function userDeposit (uint256 _amount) external payable nonReentrant {\n', "    require(presaleStatus() == 1, 'NOT ACTIVE'); // ACTIVE\n", '    if (STATUS.WHITELIST_ONLY) {\n', "      require(WHITELIST.contains(msg.sender), 'NOT WHITELISTED');\n", '    }\n', '    // Presale Round 1 - require participant to hold a certain token and balance\n', '    if (block.number < PRESALE_INFO.START_BLOCK + STATUS.ROUND1_LENGTH) { // 276 blocks = 1 hour\n', "        require(PRESALE_SETTINGS.userHoldsSufficientRound1Token(msg.sender), 'INSUFFICENT ROUND 1 TOKEN BALANCE');\n", '    }\n', '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    uint256 amount_in = PRESALE_INFO.PRESALE_IN_ETH ? msg.value : _amount;\n', '    uint256 allowance = PRESALE_INFO.MAX_SPEND_PER_BUYER.sub(buyer.baseDeposited);\n', '    uint256 remaining = PRESALE_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\n', '    allowance = allowance > remaining ? remaining : allowance;\n', '    if (amount_in > allowance) {\n', '      amount_in = allowance;\n', '    }\n', '    uint256 tokensSold = amount_in.mul(PRESALE_INFO.TOKEN_PRICE).div(10 ** uint256(PRESALE_INFO.B_TOKEN.decimals()));\n', "    require(tokensSold > 0, 'ZERO TOKENS');\n", '    if (buyer.baseDeposited == 0) {\n', '        STATUS.NUM_BUYERS++;\n', '    }\n', '    buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\n', '    buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\n', '    STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(amount_in);\n', '    STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\n', '    \n', '    // return unused ETH\n', '    if (PRESALE_INFO.PRESALE_IN_ETH && amount_in < msg.value) {\n', '      msg.sender.transfer(msg.value.sub(amount_in));\n', '    }\n', '    // deduct non ETH token from user\n', '    if (!PRESALE_INFO.PRESALE_IN_ETH) {\n', '      TransferHelper.safeTransferFrom(address(PRESALE_INFO.B_TOKEN), msg.sender, address(this), amount_in);\n', '    }\n', '  }\n', '  \n', '  // withdraw presale tokens\n', '  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '  function userWithdrawTokens () external nonReentrant {\n', "    require(STATUS.LP_GENERATION_COMPLETE, 'AWAITING LP GENERATION');\n", '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    uint256 tokensRemainingDenominator = STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN);\n', '    uint256 tokensOwed = PRESALE_INFO.S_TOKEN.balanceOf(address(this)).mul(buyer.tokensOwed).div(tokensRemainingDenominator);\n', "    require(tokensOwed > 0, 'NOTHING TO WITHDRAW');\n", '    STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.tokensOwed);\n', '    buyer.tokensOwed = 0;\n', '    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), msg.sender, tokensOwed);\n', '  }\n', '  \n', '  // on presale failure\n', '  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '  function userWithdrawBaseTokens () external nonReentrant {\n', "    require(presaleStatus() == 3, 'NOT FAILED'); // FAILED\n", '    BuyerInfo storage buyer = BUYERS[msg.sender];\n', '    uint256 baseRemainingDenominator = STATUS.TOTAL_BASE_COLLECTED.sub(STATUS.TOTAL_BASE_WITHDRAWN);\n', '    uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH ? address(this).balance : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\n', '    uint256 tokensOwed = remainingBaseBalance.mul(buyer.baseDeposited).div(baseRemainingDenominator);\n', "    require(tokensOwed > 0, 'NOTHING TO WITHDRAW');\n", '    STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(buyer.baseDeposited);\n', '    buyer.baseDeposited = 0;\n', '    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), msg.sender, tokensOwed, !PRESALE_INFO.PRESALE_IN_ETH);\n', '  }\n', '  \n', '  // on presale failure\n', '  // allows the owner to withdraw the tokens they sent for presale & initial liquidity\n', '  function ownerWithdrawTokens () external onlyPresaleOwner {\n', '    require(presaleStatus() == 3); // FAILED\n', '    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_INFO.PRESALE_OWNER, PRESALE_INFO.S_TOKEN.balanceOf(address(this)));\n', '  }\n', '  \n', '\n', '  // Can be called at any stage before or during the presale to cancel it before it ends.\n', '  // If the pair already exists on uniswap and it contains the presale token as liquidity \n', "  // the final stage of the presale 'addLiquidity()' will fail. This function \n", '  // allows anyone to end the presale prematurely to release funds in such a case.\n', '  function forceFailIfPairExists () external {\n', '    require(!STATUS.LP_GENERATION_COMPLETE && !STATUS.FORCE_FAILED);\n', '    if (PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(PRESALE_INFO.S_TOKEN), address(PRESALE_INFO.B_TOKEN))) {\n', '        STATUS.FORCE_FAILED = true;\n', '    }\n', '  }\n', '  \n', '  // if something goes wrong in LP generation\n', '  function forceFailByUnicrypt () external {\n', '      require(msg.sender == UNICRYPT_DEV_ADDRESS);\n', '      STATUS.FORCE_FAILED = true;\n', '  }\n', '  \n', '  // on presale success, this is the final step to end the presale, lock liquidity and enable withdrawls of the sale token.\n', '  // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\n', '  // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to \n', '  // the presale parameters and fixed prices.\n', '  function addLiquidity() external nonReentrant {\n', "    require(!STATUS.LP_GENERATION_COMPLETE, 'GENERATION COMPLETE');\n", "    require(presaleStatus() == 2, 'NOT SUCCESS'); // SUCCESS\n", '    // Fail the presale if the pair exists and contains presale token liquidity\n', '    if (PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(PRESALE_INFO.S_TOKEN), address(PRESALE_INFO.B_TOKEN))) {\n', '        STATUS.FORCE_FAILED = true;\n', '        return;\n', '    }\n', '    \n', '    uint256 unicryptBaseFee = STATUS.TOTAL_BASE_COLLECTED.mul(PRESALE_FEE_INFO.UNICRYPT_BASE_FEE).div(1000);\n', '    \n', '    // base token liquidity\n', '    uint256 baseLiquidity = STATUS.TOTAL_BASE_COLLECTED.sub(unicryptBaseFee).mul(PRESALE_INFO.LIQUIDITY_PERCENT).div(1000);\n', '    if (PRESALE_INFO.PRESALE_IN_ETH) {\n', '        WETH.deposit{value : baseLiquidity}();\n', '    }\n', '    TransferHelper.safeApprove(address(PRESALE_INFO.B_TOKEN), address(PRESALE_LOCK_FORWARDER), baseLiquidity);\n', '    \n', '    // sale token liquidity\n', '    uint256 tokenLiquidity = baseLiquidity.mul(PRESALE_INFO.LISTING_RATE).div(10 ** uint256(PRESALE_INFO.B_TOKEN.decimals()));\n', '    TransferHelper.safeApprove(address(PRESALE_INFO.S_TOKEN), address(PRESALE_LOCK_FORWARDER), tokenLiquidity);\n', '    \n', '    PRESALE_LOCK_FORWARDER.lockLiquidity(PRESALE_INFO.B_TOKEN, PRESALE_INFO.S_TOKEN, baseLiquidity, tokenLiquidity, block.timestamp + PRESALE_INFO.LOCK_PERIOD, PRESALE_INFO.PRESALE_OWNER);\n', '    \n', '    // transfer fees\n', '    uint256 unicryptTokenFee = STATUS.TOTAL_TOKENS_SOLD.mul(PRESALE_FEE_INFO.UNICRYPT_TOKEN_FEE).div(1000);\n', '    // referrals are checked for validity in the presale generator\n', '    if (PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS != address(0)) {\n', '        // Base token fee\n', '        uint256 referralBaseFee = unicryptBaseFee.mul(PRESALE_FEE_INFO.REFERRAL_FEE).div(1000);\n', '        TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS, referralBaseFee, !PRESALE_INFO.PRESALE_IN_ETH);\n', '        unicryptBaseFee = unicryptBaseFee.sub(referralBaseFee);\n', '        // Token fee\n', '        uint256 referralTokenFee = unicryptTokenFee.mul(PRESALE_FEE_INFO.REFERRAL_FEE).div(1000);\n', '        TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS, referralTokenFee);\n', '        unicryptTokenFee = unicryptTokenFee.sub(referralTokenFee);\n', '    }\n', '    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_FEE_INFO.BASE_FEE_ADDRESS, unicryptBaseFee, !PRESALE_INFO.PRESALE_IN_ETH);\n', '    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS, unicryptTokenFee);\n', '    \n', '    // burn unsold tokens\n', '    uint256 remainingSBalance = PRESALE_INFO.S_TOKEN.balanceOf(address(this));\n', '    if (remainingSBalance > STATUS.TOTAL_TOKENS_SOLD) {\n', '        uint256 burnAmount = remainingSBalance.sub(STATUS.TOTAL_TOKENS_SOLD);\n', '        TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), 0x000000000000000000000000000000000000dEaD, burnAmount);\n', '    }\n', '    \n', '    // send remaining base tokens to presale owner\n', '    uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH ? address(this).balance : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\n', '    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_INFO.PRESALE_OWNER, remainingBaseBalance, !PRESALE_INFO.PRESALE_IN_ETH);\n', '    \n', '    STATUS.LP_GENERATION_COMPLETE = true;\n', '  }\n', '  \n', '  function updateMaxSpendLimit(uint256 _maxSpend) external onlyPresaleOwner {\n', '    PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\n', '  }\n', '  \n', '  // postpone or bring a presale forward, this will only work when a presale is inactive.\n', '  // i.e. current start block > block.number\n', '  function updateBlocks(uint256 _startBlock, uint256 _endBlock) external onlyPresaleOwner {\n', '    require(PRESALE_INFO.START_BLOCK > block.number);\n', '    require(_endBlock.sub(_startBlock) <= PRESALE_SETTINGS.getMaxPresaleLength());\n', '    PRESALE_INFO.START_BLOCK = _startBlock;\n', '    PRESALE_INFO.END_BLOCK = _endBlock;\n', '  }\n', '\n', '  // editable at any stage of the presale\n', '  function setWhitelistFlag(bool _flag) external onlyPresaleOwner {\n', '    STATUS.WHITELIST_ONLY = _flag;\n', '  }\n', '\n', '  // editable at any stage of the presale\n', '  function editWhitelist(address[] memory _users, bool _add) external onlyPresaleOwner {\n', '    if (_add) {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '          WHITELIST.add(_users[i]);\n', '        }\n', '    } else {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '          WHITELIST.remove(_users[i]);\n', '        }\n', '    }\n', '  }\n', '\n', '  // whitelist getters\n', '  function getWhitelistedUsersLength () external view returns (uint256) {\n', '    return WHITELIST.length();\n', '  }\n', '  \n', '  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\n', '    return WHITELIST.at(_index);\n', '  }\n', '  \n', '  function getUserWhitelistStatus (address _user) external view returns (bool) {\n', '    return WHITELIST.contains(_user);\n', '  }\n', '}']