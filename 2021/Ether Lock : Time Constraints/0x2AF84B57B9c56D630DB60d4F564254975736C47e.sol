['// SPDX-License-Identifier: GPL-2.0-only\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "./IWETH.sol";\n', 'import "./RoleAware.sol";\n', '\n', 'contract Fund is RoleAware, Ownable {\n', '    address public WETH;\n', '    mapping(address => bool) public activeTokens;\n', '\n', '    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\n', '        WETH = _WETH;\n', '    }\n', '\n', '    function activateToken(address token) external {\n', '        require(\n', '            isTokenActivator(msg.sender),\n', '            "Address not authorized to activate tokens"\n', '        );\n', '        activeTokens[token] = true;\n', '    }\n', '\n', '    function deactivateToken(address token) external {\n', '        require(\n', '            isTokenActivator(msg.sender),\n', '            "Address not authorized to activate tokens"\n', '        );\n', '        activeTokens[token] = false;\n', '    }\n', '\n', '    function deposit(address depositToken, uint256 depositAmount)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(activeTokens[depositToken], "Deposit token is not active");\n', '        return\n', '            IERC20(depositToken).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                depositAmount\n', '            );\n', '    }\n', '\n', '    function depositFor(\n', '        address sender,\n', '        address depositToken,\n', '        uint256 depositAmount\n', '    ) external returns (bool) {\n', '        require(activeTokens[depositToken], "Deposit token is not active");\n', '        require(isWithdrawer(msg.sender), "Contract not authorized to deposit");\n', '        return\n', '            IERC20(depositToken).transferFrom(\n', '                sender,\n', '                address(this),\n', '                depositAmount\n', '            );\n', '    }\n', '\n', '    function depositToWETH() external payable {\n', '        IWETH(WETH).deposit{value: msg.value}();\n', '    }\n', '\n', '    // withdrawers role\n', '    function withdraw(\n', '        address withdrawalToken,\n', '        address recipient,\n', '        uint256 withdrawalAmount\n', '    ) external returns (bool) {\n', '        require(\n', '            isWithdrawer(msg.sender),\n', '            "Contract not authorized to withdraw"\n', '        );\n', '        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\n', '    }\n', '\n', '    // withdrawers role\n', '    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\n', '        require(isWithdrawer(msg.sender), "Not authorized to withdraw");\n', '        IWETH(WETH).withdraw(withdrawalAmount);\n', '        payable(recipient).transfer(withdrawalAmount);\n', '    }\n', '}']