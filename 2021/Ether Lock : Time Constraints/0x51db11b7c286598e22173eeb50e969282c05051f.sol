['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IMooncatLike {\n', '    function catOwners(bytes5) external view returns (address);\n', '}\n', '\n', 'contract FlexMoocat {\n', '    address public owner = 0xA1Ed76f128084e70C683eB86b1A61FeFdc49268F;\n', '\n', '    struct ActiveFlex {\n', '        address flexer;\n', '        uint256 flexAmount;\n', '        bytes5 id;\n', '        uint256 flexEndTime;\n', '    }\n', '\n', '    bool public paused = false;\n', '\n', '    ActiveFlex public flex;\n', '\n', '    event NewFlex(\n', '        address indexed _flexer,\n', '        bytes5 _id,\n', '        uint256 _value,\n', '        uint256 _days\n', '    );\n', '\n', '     event RevokeFlex(\n', '        address indexed _address,\n', '        bytes5 _id,\n', '        uint256 _days\n', '    );\n', '\n', '\n', '    modifier onlyDegenData {\n', '        require(\n', '            msg.sender == 0xA1Ed76f128084e70C683eB86b1A61FeFdc49268F,\n', '            "Excuse me, This doesn\'t belong to you"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier isPaused {\n', '        require(\n', '            paused == false,\n', '            "sorry we have pause things for now. Too much Flexing is going on."\n', '        );\n', '        _;\n', '    }\n', '\n', '    function flexMooncat(bytes5 _id) public payable isPaused {\n', '        require(msg.value > .1 ether, "Minimum Flex is > .1 ETH.");\n', '        require(\n', '            IMooncatLike(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6).catOwners(\n', '                _id\n', '            ) == msg.sender,\n', '            "Sender has to be the owner of the MoonCat"\n', '        );\n', '        require(\n', '            msg.value > flex.flexAmount,\n', '            "You Gotta Flex more than the Current Flex."\n', '        );\n', '        require(\n', '            block.timestamp > flex.flexEndTime,\n', '            "You gotta Wait your turn to flex"\n', '        );\n', '        flex.flexAmount = msg.value;\n', '        flex.flexer = msg.sender;\n', '        flex.id = _id;\n', '        flex.flexEndTime = block.timestamp + 1 days;\n', '        emit NewFlex(msg.sender, _id, msg.value, flex.flexEndTime);\n', '    }\n', '\n', '    function contractBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function withdraw() public onlyDegenData {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function pause(bool _bool) public onlyDegenData {\n', '        paused = _bool;\n', '    }\n', '\n', '    function revokeFlex(bytes5 _id) public isPaused {\n', '        require(\n', '            IMooncatLike(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6).catOwners(\n', '                _id\n', '            ) == msg.sender,\n', '            "Sender has to be the owner of the MoonCat"\n', '        );\n', '        emit RevokeFlex(msg.sender, _id, block.timestamp);\n', '    }\n', '}']