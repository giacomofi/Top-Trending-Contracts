['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', '    helper methods for interacting with ERC20 tokens that do not consistently return true/false\n', '    with the addition of a transfer function to send eth or an erc20 token\n', '*/\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x095ea7b3, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: APPROVE_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0xa9059cbb, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x23b872dd, from, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FROM_FAILED"\n', '        );\n', '    }\n', '\n', '    // sends ETH or an erc20 token\n', '    function safeTransferBaseToken(\n', '        address token,\n', '        address payable to,\n', '        uint256 value,\n', '        bool isERC20\n', '    ) internal {\n', '        if (!isERC20) {\n', '            to.transfer(value);\n', '        } else {\n', '            (bool success, bytes memory data) = token.call(\n', '                abi.encodeWithSelector(0xa9059cbb, to, value)\n', '            );\n', '            require(\n', '                success && (data.length == 0 || abi.decode(data, (bool))),\n', '                "TransferHelper: TRANSFER_FAILED"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping(bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) {\n', '            // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function _at(Set storage set, uint256 index)\n', '        private\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        require(\n', '            set._values.length > index,\n', '            "EnumerableSet: index out of bounds"\n', '        );\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(AddressSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(UintSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function tryAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    function trySub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    function tryMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    function tryDiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    function tryMod(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '}\n', '\n', 'interface IPresaleLockForwarder {\n', '    function lockLiquidity(\n', '        IERC20 _baseToken,\n', '        IERC20 _saleToken,\n', '        uint256 _baseAmount,\n', '        uint256 _saleAmount,\n', '        uint256 _unlock_date,\n', '        address payable _withdrawer\n', '    ) external;\n', '\n', '    function uniswapPairIsInitialised(address token0, address token1)\n', '        external\n', '        view\n', '        returns (bool);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'interface IPresaleSettings {\n', '    function getMaxPresaleLength() external view returns (uint256);\n', '\n', '    function getBaseFee() external view returns (uint256);\n', '\n', '    function getTokenFee() external view returns (uint256);\n', '\n', '    function getEthAddress() external view returns (address payable);\n', '\n', '    function getTokenAddress() external view returns (address payable);\n', '\n', '    function getEthCreationFee() external view returns (uint256);\n', '}\n', '\n', 'contract Presale01 is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    struct PresaleInfo {\n', '        address payable PRESALE_OWNER;\n', '        IERC20 S_TOKEN; // sale token\n', '        IERC20 B_TOKEN; // base token // usually WETH (ETH)\n', '        uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\n', '        uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\n', '        uint256 MIN_SPEND_PER_BUYER; // maximum base token BUY amount per account\n', '        uint256 AMOUNT; // the amount of presale tokens up for presale\n', '        uint256 HARDCAP;\n', '        uint256 SOFTCAP;\n', '        uint256 LIQUIDITY_PERCENT; // divided by 1000\n', '        uint256 LISTING_RATE; // fixed rate at which the token will list on uniswap\n', '        uint256 START_BLOCK;\n', '        uint256 END_BLOCK;\n', '        uint256 LOCK_PERIOD; // unix timestamp -> e.g. 2 weeks\n', '        uint256 UNISWAP_LISTING_TIME;\n', '        bool PRESALE_IN_ETH; // if this flag is true the presale is raising ETH, otherwise an ERC20 token such as DAI\n', '    }\n', '\n', '    struct PresaleFeeInfo {\n', '        uint256 DAOLAUNCH_BASE_FEE; // divided by 1000\n', '        uint256 DAOLAUNCH_TOKEN_FEE; // divided by 1000\n', '        address payable BASE_FEE_ADDRESS;\n', '        address payable TOKEN_FEE_ADDRESS;\n', '    }\n', '\n', '    struct PresaleStatus {\n', '        bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\n', '        bool LIST_ON_UNISWAP;\n', '        bool IS_TRANSFERED_FEE;\n', '        bool IS_OWNER_WITHDRAWN;\n', '        bool IS_TRANSFERED_DAOLAUNCH_FEE;\n', '        uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\n', '        uint256 TOTAL_TOKENS_SOLD; // total presale tokens sold\n', '        uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful presale\n', '        uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on presale failure\n', '        uint256 NUM_BUYERS; // number of unique participants\n', '    }\n', '\n', '    struct BuyerInfo {\n', '        uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\n', '        uint256 tokensOwed; // num presale tokens a user is owed, can be withdrawn on presale success\n', '        bool isWithdrawn;\n', '    }\n', '\n', '    struct GasLimit {\n', '        uint256 transferDAOLaunchFee;\n', '        uint256 listOnUniswap;\n', '    }\n', '\n', '    PresaleInfo private PRESALE_INFO;\n', '    PresaleFeeInfo public PRESALE_FEE_INFO;\n', '    PresaleStatus public STATUS;\n', '    address public PRESALE_GENERATOR;\n', '    IPresaleLockForwarder public PRESALE_LOCK_FORWARDER;\n', '    IPresaleSettings public PRESALE_SETTINGS;\n', '    IUniswapV2Factory public UNI_FACTORY;\n', '    IWETH public WETH;\n', '    mapping(address => BuyerInfo) public BUYERS;\n', '    EnumerableSet.AddressSet private WHITELIST;\n', '    address payable public CALLER;\n', '    GasLimit public GAS_LIMIT;\n', '    address payable public DAOLAUNCH_DEV;\n', '\n', '    constructor(address _presaleGenerator) public payable {\n', '        PRESALE_GENERATOR = _presaleGenerator;\n', '        UNI_FACTORY = IUniswapV2Factory(\n', '            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '        );\n', '        WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '        PRESALE_SETTINGS = IPresaleSettings(\n', '            0xaBAE64D9d205d0467F7cA03aA1cd133EAd41873c\n', '        );\n', '        PRESALE_LOCK_FORWARDER = IPresaleLockForwarder(\n', '            0xE95f84F19710BeD43003e79d9ed2504E9410ed45\n', '        );\n', '        GAS_LIMIT = GasLimit(100000, 4000000);\n', '        DAOLAUNCH_DEV = payable(0xE582244c3D167CFE9499b3CDA503E26CaE812E4E);\n', '    }\n', '\n', '    function init1(\n', '        address payable _presaleOwner,\n', '        uint256 _amount,\n', '        uint256 _tokenPrice,\n', '        uint256 _maxEthPerBuyer,\n', '        uint256 _minEthPerBuyer,\n', '        uint256 _hardcap,\n', '        uint256 _softcap,\n', '        uint256 _liquidityPercent,\n', '        uint256 _listingRate,\n', '        uint256 _startblock,\n', '        uint256 _endblock,\n', '        uint256 _lockPeriod\n', '    ) external {\n', '        require(msg.sender == PRESALE_GENERATOR, "FORBIDDEN");\n', '        PRESALE_INFO.PRESALE_OWNER = _presaleOwner;\n', '        PRESALE_INFO.AMOUNT = _amount;\n', '        PRESALE_INFO.TOKEN_PRICE = _tokenPrice;\n', '        PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\n', '        PRESALE_INFO.MIN_SPEND_PER_BUYER = _minEthPerBuyer;\n', '        PRESALE_INFO.HARDCAP = _hardcap;\n', '        PRESALE_INFO.SOFTCAP = _softcap;\n', '        PRESALE_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\n', '        PRESALE_INFO.LISTING_RATE = _listingRate;\n', '        PRESALE_INFO.START_BLOCK = _startblock;\n', '        PRESALE_INFO.END_BLOCK = _endblock;\n', '        PRESALE_INFO.LOCK_PERIOD = _lockPeriod;\n', '    }\n', '\n', '    function init2(\n', '        IERC20 _baseToken,\n', '        IERC20 _presaleToken,\n', '        uint256 _DAOLaunchBaseFee,\n', '        uint256 _DAOLaunchTokenFee,\n', '        uint256 _uniswapListingTime,\n', '        address payable _baseFeeAddress,\n', '        address payable _tokenFeeAddress\n', '    ) external {\n', '        require(msg.sender == PRESALE_GENERATOR, "FORBIDDEN");\n', '\n', '        PRESALE_INFO.PRESALE_IN_ETH = address(_baseToken) == address(WETH);\n', '        PRESALE_INFO.S_TOKEN = _presaleToken;\n', '        PRESALE_INFO.B_TOKEN = _baseToken;\n', '        PRESALE_INFO.UNISWAP_LISTING_TIME = _uniswapListingTime;\n', '        PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE = _DAOLaunchBaseFee;\n', '        PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE = _DAOLaunchTokenFee;\n', '\n', '        PRESALE_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\n', '        PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\n', '    }\n', '\n', '    function init3(address[] memory _white_list, address payable _caller)\n', '        external\n', '    {\n', '        require(msg.sender == PRESALE_GENERATOR, "FORBIDDEN");\n', '        if (_white_list.length > 0) STATUS.WHITELIST_ONLY = true;\n', '\n', '        for (uint256 i = 0; i < _white_list.length; i++) {\n', '            WHITELIST.add(_white_list[i]);\n', '        }\n', '\n', '        CALLER = _caller;\n', '    }\n', '\n', '    modifier onlyPresaleOwner() {\n', '        require(PRESALE_INFO.PRESALE_OWNER == msg.sender, "NOT PRESALE OWNER");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCaller() {\n', '        require(CALLER == msg.sender, "NOT PRESALE CALLER");\n', '        _;\n', '    }\n', '\n', '    function presaleStatus() public view returns (uint256) {\n', '        if (\n', '            (block.number > PRESALE_INFO.END_BLOCK) &&\n', '            (STATUS.TOTAL_BASE_COLLECTED < PRESALE_INFO.SOFTCAP)\n', '        ) {\n', '            return 3; // FAILED - softcap not met by end block\n', '        }\n', '        if (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.HARDCAP) {\n', '            return 2; // SUCCESS - hardcap met\n', '        }\n', '        if (\n', '            (block.number > PRESALE_INFO.END_BLOCK) &&\n', '            (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.SOFTCAP)\n', '        ) {\n', '            return 2; // SUCCESS - endblock and soft cap reached\n', '        }\n', '        if (\n', '            (block.number >= PRESALE_INFO.START_BLOCK) &&\n', '            (block.number <= PRESALE_INFO.END_BLOCK)\n', '        ) {\n', '            return 1; // ACTIVE - deposits enabled\n', '        }\n', '        return 0; // QUED - awaiting start block\n', '    }\n', '\n', '    // accepts msg.value for eth or _amount for ERC20 tokens\n', '    function userDeposit(uint256 _amount) external payable nonReentrant {\n', '        require(presaleStatus() == 1, "NOT ACTIVE"); // ACTIVE\n', '        if (STATUS.WHITELIST_ONLY) {\n', '            require(WHITELIST.contains(msg.sender), "NOT WHITELISTED");\n', '        }\n', '\n', '        BuyerInfo storage buyer = BUYERS[msg.sender];\n', '        uint256 amount_in = PRESALE_INFO.PRESALE_IN_ETH ? msg.value : _amount;\n', '        require(\n', '            amount_in >= PRESALE_INFO.MIN_SPEND_PER_BUYER,\n', '            "NOT ENOUGH VALUE"\n', '        );\n', '        uint256 allowance = PRESALE_INFO.MAX_SPEND_PER_BUYER.sub(\n', '            buyer.baseDeposited\n', '        );\n', '        uint256 remaining = PRESALE_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\n', '        allowance = allowance > remaining ? remaining : allowance;\n', '        if (amount_in > allowance) {\n', '            amount_in = allowance;\n', '        }\n', '        uint256 tokensSold = amount_in.mul(PRESALE_INFO.TOKEN_PRICE).div(\n', '            10**uint256(PRESALE_INFO.B_TOKEN.decimals())\n', '        );\n', '        require(tokensSold > 0, "ZERO TOKENS");\n', '        if (buyer.baseDeposited == 0) {\n', '            STATUS.NUM_BUYERS++;\n', '        }\n', '        buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\n', '        buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\n', '        STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(\n', '            amount_in\n', '        );\n', '        STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\n', '\n', '        // return unused ETH\n', '        if (PRESALE_INFO.PRESALE_IN_ETH && amount_in < msg.value) {\n', '            msg.sender.transfer(msg.value.sub(amount_in));\n', '        }\n', '        // deduct non ETH token from user\n', '        if (!PRESALE_INFO.PRESALE_IN_ETH) {\n', '            TransferHelper.safeTransferFrom(\n', '                address(PRESALE_INFO.B_TOKEN),\n', '                msg.sender,\n', '                address(this),\n', '                amount_in\n', '            );\n', '        }\n', '    }\n', '\n', '    // withdraw presale tokens\n', '    // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '    function userWithdrawTokens() external nonReentrant {\n', '        require(presaleStatus() == 2, "NOT SUCCESS"); // SUCCESS\n', '        require(\n', '            STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN) > 0,\n', '            "ALL TOKEN HAS BEEN WITHDRAWN"\n', '        );\n', '\n', '        BuyerInfo storage buyer = BUYERS[msg.sender];\n', '\n', '        require(!buyer.isWithdrawn, "NOTHING TO WITHDRAW");\n', '        uint256 tokensOwed = buyer.tokensOwed;\n', '\n', '        STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(\n', '            tokensOwed\n', '        );\n', '        TransferHelper.safeTransfer(\n', '            address(PRESALE_INFO.S_TOKEN),\n', '            msg.sender,\n', '            tokensOwed\n', '        );\n', '        buyer.isWithdrawn = true;\n', '    }\n', '\n', '    // on presale failure\n', '    // percentile withdrawls allows fee on transfer or rebasing tokens to still work\n', '    function userWithdrawBaseTokens() external nonReentrant {\n', '        require(presaleStatus() == 3, "NOT FAILED"); // FAILED\n', '        BuyerInfo storage buyer = BUYERS[msg.sender];\n', '        require(!buyer.isWithdrawn, "NOTHING TO REFUND");\n', '\n', '        STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(\n', '            buyer.baseDeposited\n', '        );\n', '        TransferHelper.safeTransferBaseToken(\n', '            address(PRESALE_INFO.B_TOKEN),\n', '            msg.sender,\n', '            buyer.baseDeposited,\n', '            !PRESALE_INFO.PRESALE_IN_ETH\n', '        );\n', '        buyer.isWithdrawn = true;\n', '    }\n', '\n', '    // on presale failure\n', '    // allows the owner to withdraw the tokens they sent for presale & initial liquidity\n', '    function ownerRefundTokens() external onlyPresaleOwner {\n', '        require(presaleStatus() == 3); // FAILED\n', '        require(!STATUS.IS_OWNER_WITHDRAWN, "NOTHING TO WITHDRAW");\n', '        TransferHelper.safeTransfer(\n', '            address(PRESALE_INFO.S_TOKEN),\n', '            PRESALE_INFO.PRESALE_OWNER,\n', '            PRESALE_INFO.S_TOKEN.balanceOf(address(this))\n', '        );\n', '        STATUS.IS_OWNER_WITHDRAWN = true;\n', '    }\n', '\n', '    // on presale success, this is the final step to end the presale, lock liquidity and enable withdrawls of the sale token.\n', '    // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\n', '    // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to\n', '    // the presale parameters and fixed prices.\n', '\n', '    function listOnUniswap() external onlyCaller {\n', '        require(\n', '            block.number >= PRESALE_INFO.UNISWAP_LISTING_TIME,\n', '            "Call listOnUniswap too early"\n', '        );\n', '        require(presaleStatus() == 2, "NOT SUCCESS"); // SUCCESS\n', '        require(!STATUS.IS_TRANSFERED_FEE, "TRANSFERED FEE");\n', '\n', '        uint256 DAOLaunchBaseFee = STATUS\n', '            .TOTAL_BASE_COLLECTED\n', '            .mul(PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE)\n', '            .div(1000);\n', '        // base token liquidity\n', '        uint256 baseLiquidity = STATUS\n', '            .TOTAL_BASE_COLLECTED\n', '            .sub(DAOLaunchBaseFee)\n', '            .mul(PRESALE_INFO.LIQUIDITY_PERCENT)\n', '            .div(1000);\n', '        if (PRESALE_INFO.PRESALE_IN_ETH) {\n', '            WETH.deposit{value: baseLiquidity}();\n', '        }\n', '        TransferHelper.safeApprove(\n', '            address(PRESALE_INFO.B_TOKEN),\n', '            address(PRESALE_LOCK_FORWARDER),\n', '            baseLiquidity\n', '        );\n', '\n', '        // // sale token liquidity\n', '        uint256 tokenLiquidity = baseLiquidity\n', '            .mul(PRESALE_INFO.LISTING_RATE)\n', '            .div(10**uint256(PRESALE_INFO.B_TOKEN.decimals()));\n', '\n', '        // transfer fees\n', '        uint256 DAOLaunchTokenFee = STATUS\n', '            .TOTAL_TOKENS_SOLD\n', '            .mul(PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE)\n', '            .div(1000);\n', '        if (DAOLaunchBaseFee > 0) {\n', '            TransferHelper.safeTransferBaseToken(\n', '                address(PRESALE_INFO.B_TOKEN),\n', '                PRESALE_FEE_INFO.BASE_FEE_ADDRESS,\n', '                DAOLaunchBaseFee,\n', '                !PRESALE_INFO.PRESALE_IN_ETH\n', '            );\n', '        }\n', '        if (DAOLaunchTokenFee > 0) {\n', '            TransferHelper.safeTransfer(\n', '                address(PRESALE_INFO.S_TOKEN),\n', '                PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS,\n', '                DAOLaunchTokenFee\n', '            );\n', '        }\n', '        STATUS.IS_TRANSFERED_FEE = true;\n', '\n', '        // transfer fee to DAOLaunch\n', '        uint256 txFee = tx.gasprice.mul(GAS_LIMIT.listOnUniswap);\n', '        require(txFee <= PRESALE_SETTINGS.getEthCreationFee());\n', '\n', '        // // send DAOLaunch fee\n', '        PRESALE_SETTINGS.getEthAddress().transfer(\n', '            PRESALE_SETTINGS.getEthCreationFee().sub(txFee)\n', '        );\n', '\n', '        // send transaction fee\n', '        CALLER.transfer(txFee);\n', '        STATUS.IS_TRANSFERED_DAOLAUNCH_FEE = true;\n', '\n', '        // Fail the presale if the pair exists and contains presale token liquidity\n', '        if (\n', '            PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(\n', '                address(PRESALE_INFO.S_TOKEN),\n', '                address(PRESALE_INFO.B_TOKEN)\n', '            )\n', '        ) {\n', '            STATUS.LIST_ON_UNISWAP = true;\n', '            return;\n', '        }\n', '\n', '        TransferHelper.safeApprove(\n', '            address(PRESALE_INFO.S_TOKEN),\n', '            address(PRESALE_LOCK_FORWARDER),\n', '            tokenLiquidity\n', '        );\n', '        PRESALE_LOCK_FORWARDER.lockLiquidity(\n', '            PRESALE_INFO.B_TOKEN,\n', '            PRESALE_INFO.S_TOKEN,\n', '            baseLiquidity,\n', '            tokenLiquidity,\n', '            block.timestamp + PRESALE_INFO.LOCK_PERIOD,\n', '            PRESALE_INFO.PRESALE_OWNER\n', '        );\n', '        STATUS.LIST_ON_UNISWAP = true;\n', '    }\n', '\n', '    function ownerWithdrawTokens() external nonReentrant onlyPresaleOwner {\n', '        require(!STATUS.IS_OWNER_WITHDRAWN, "GENERATION COMPLETE");\n', '        require(presaleStatus() == 2, "NOT SUCCESS"); // SUCCESS\n', '\n', '        uint256 DAOLaunchBaseFee = STATUS\n', '            .TOTAL_BASE_COLLECTED\n', '            .mul(PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE)\n', '            .div(1000);\n', '        uint256 baseLiquidity = STATUS\n', '            .TOTAL_BASE_COLLECTED\n', '            .sub(DAOLaunchBaseFee)\n', '            .mul(PRESALE_INFO.LIQUIDITY_PERCENT)\n', '            .div(1000);\n', '        uint256 DAOLaunchTokenFee = STATUS\n', '            .TOTAL_TOKENS_SOLD\n', '            .mul(PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE)\n', '            .div(1000);\n', '        uint256 tokenLiquidity = baseLiquidity\n', '            .mul(PRESALE_INFO.LISTING_RATE)\n', '            .div(10**uint256(PRESALE_INFO.B_TOKEN.decimals()));\n', '\n', '        // send remain unsold tokens to presale owner\n', '        uint256 remainingSBalance = PRESALE_INFO\n', '            .S_TOKEN\n', '            .balanceOf(address(this))\n', '            .add(STATUS.TOTAL_TOKENS_WITHDRAWN)\n', '            .sub(STATUS.TOTAL_TOKENS_SOLD);\n', '\n', '        // send remaining base tokens to presale owner\n', '        uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH\n', '            ? address(this).balance\n', '            : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\n', '        if (!STATUS.IS_TRANSFERED_FEE) {\n', '            remainingBaseBalance = remainingBaseBalance.sub(DAOLaunchBaseFee);\n', '            remainingSBalance = remainingSBalance.sub(DAOLaunchTokenFee);\n', '        }\n', '        if (!STATUS.LIST_ON_UNISWAP) {\n', '            remainingBaseBalance = remainingBaseBalance.sub(baseLiquidity).sub(\n', '                PRESALE_SETTINGS.getEthCreationFee()\n', '            );\n', '            remainingSBalance = remainingSBalance.sub(tokenLiquidity);\n', '        }\n', '\n', '        if (remainingSBalance > 0) {\n', '            TransferHelper.safeTransfer(\n', '                address(PRESALE_INFO.S_TOKEN),\n', '                PRESALE_INFO.PRESALE_OWNER,\n', '                remainingSBalance\n', '            );\n', '        }\n', '\n', '        TransferHelper.safeTransferBaseToken(\n', '            address(PRESALE_INFO.B_TOKEN),\n', '            PRESALE_INFO.PRESALE_OWNER,\n', '            remainingBaseBalance,\n', '            !PRESALE_INFO.PRESALE_IN_ETH\n', '        );\n', '        STATUS.IS_OWNER_WITHDRAWN = true;\n', '    }\n', '\n', '    function sendDAOLaunchFee() external onlyCaller {\n', '        require(\n', '            !STATUS.IS_TRANSFERED_DAOLAUNCH_FEE,\n', '            "IS_TRANSFERED_DAOLAUNCH_FEE"\n', '        );\n', '        require(presaleStatus() == 3, "NOT FAILED"); // FAILED\n', '\n', '        // calcucalte transaction fee\n', '        uint256 txFee = tx.gasprice.mul(GAS_LIMIT.transferDAOLaunchFee);\n', '        require(txFee <= PRESALE_SETTINGS.getEthCreationFee());\n', '\n', '        // send DAOLaunch fee\n', '        PRESALE_SETTINGS.getEthAddress().transfer(\n', '            PRESALE_SETTINGS.getEthCreationFee().sub(txFee)\n', '        );\n', '\n', '        // send transaction fee\n', '        CALLER.transfer(txFee);\n', '        STATUS.IS_TRANSFERED_DAOLAUNCH_FEE = true;\n', '    }\n', '\n', '    function updateGasLimit(\n', '        uint256 _transferDAOLaunchFee,\n', '        uint256 _listOnUniswap\n', '    ) external onlyPresaleOwner {\n', '        GAS_LIMIT.transferDAOLaunchFee = _transferDAOLaunchFee;\n', '        GAS_LIMIT.listOnUniswap = _listOnUniswap;\n', '    }\n', '\n', '    function updateMaxSpendLimit(uint256 _maxSpend) external onlyPresaleOwner {\n', '        PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\n', '    }\n', '\n', '    // postpone or bring a presale forward, this will only work when a presale is inactive.\n', '    // i.e. current start block > block.number\n', '    function updateBlocks(uint256 _startBlock, uint256 _endBlock)\n', '        external\n', '        onlyPresaleOwner\n', '    {\n', '        require(PRESALE_INFO.START_BLOCK > block.number);\n', '        require(_endBlock.sub(_startBlock) > 0);\n', '        PRESALE_INFO.START_BLOCK = _startBlock;\n', '        PRESALE_INFO.END_BLOCK = _endBlock;\n', '    }\n', '\n', '    // editable at any stage of the presale\n', '    function setWhitelistFlag(bool _flag) external onlyPresaleOwner {\n', '        STATUS.WHITELIST_ONLY = _flag;\n', '    }\n', '\n', '    // editable at any stage of the presale\n', '    function editWhitelist(address[] memory _users, bool _add)\n', '        external\n', '        onlyPresaleOwner\n', '    {\n', '        if (_add) {\n', '            for (uint256 i = 0; i < _users.length; i++) {\n', '                WHITELIST.add(_users[i]);\n', '            }\n', '        } else {\n', '            for (uint256 i = 0; i < _users.length; i++) {\n', '                WHITELIST.remove(_users[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    // if uniswap listing fails, call this function to release eth\n', '    function finalize() external {\n', '        require(msg.sender == DAOLAUNCH_DEV, "INVALID CALLER");\n', '        selfdestruct(DAOLAUNCH_DEV);\n', '    }\n', '\n', '    // whitelist getters\n', '    function getWhitelistedUsersLength() external view returns (uint256) {\n', '        return WHITELIST.length();\n', '    }\n', '\n', '    function getWhitelistedUserAtIndex(uint256 _index)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return WHITELIST.at(_index);\n', '    }\n', '\n', '    function getUserWhitelistStatus(address _user)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return WHITELIST.contains(_user);\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library PresaleHelper {\n', '    using SafeMath for uint256;\n', '\n', '    function calculateAmountRequired(\n', '        uint256 _amount,\n', '        uint256 _tokenPrice,\n', '        uint256 _listingRate,\n', '        uint256 _liquidityPercent,\n', '        uint256 _tokenFee\n', '    ) public pure returns (uint256) {\n', '        uint256 listingRatePercent = _listingRate.mul(1000).div(_tokenPrice);\n', '        uint256 DAOLaunchTokenFee = _amount.mul(_tokenFee).div(1000);\n', '        uint256 amountMinusFee = _amount.sub(DAOLaunchTokenFee);\n', '        uint256 liquidityRequired = amountMinusFee\n', '            .mul(_liquidityPercent)\n', '            .mul(listingRatePercent)\n', '            .div(1000000);\n', '        uint256 tokensRequiredForPresale = _amount.add(liquidityRequired).add(\n', '            DAOLaunchTokenFee\n', '        );\n', '        return tokensRequiredForPresale;\n', '    }\n', '}\n', '\n', 'interface IPresaleFactory {\n', '    function registerPresale(address _presaleAddress) external;\n', '\n', '    function presaleIsRegistered(address _presaleAddress)\n', '        external\n', '        view\n', '        returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Locker {\n', '    function lockLPToken(\n', '        address _lpToken,\n', '        uint256 _amount,\n', '        uint256 _unlock_date,\n', '        address payable _referral,\n', '        bool _fee_in_eth,\n', '        address payable _withdrawer\n', '    ) external payable;\n', '}\n', '\n', 'contract PresaleGenerator01 is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    IPresaleFactory public PRESALE_FACTORY;\n', '    IPresaleSettings public PRESALE_SETTINGS;\n', '\n', '    struct PresaleParams {\n', '        uint256 amount;\n', '        uint256 tokenPrice;\n', '        uint256 maxSpendPerBuyer;\n', '        uint256 minSpendPerBuyer;\n', '        uint256 hardcap;\n', '        uint256 softcap;\n', '        uint256 liquidityPercent;\n', '        uint256 listingRate; // sale token listing price on uniswap\n', '        uint256 startblock;\n', '        uint256 endblock;\n', '        uint256 lockPeriod;\n', '        uint256 uniswapListingTime;\n', '    }\n', '\n', '    constructor() public {\n', '        PRESALE_FACTORY = IPresaleFactory(\n', '            0x35D4dc34966018Ac8c35051f86105753F4BB4AFc\n', '        );\n', '        PRESALE_SETTINGS = IPresaleSettings(\n', '            0xaBAE64D9d205d0467F7cA03aA1cd133EAd41873c\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\n', '     */\n', '    function createPresale(\n', '        address payable _presaleOwner,\n', '        IERC20 _presaleToken,\n', '        IERC20 _baseToken,\n', '        address[] memory white_list,\n', '        uint256[12] memory uint_params,\n', '        address payable _caller\n', '    ) public payable {\n', '        PresaleParams memory params;\n', '        params.amount = uint_params[0];\n', '        params.tokenPrice = uint_params[1];\n', '        params.maxSpendPerBuyer = uint_params[2];\n', '        params.minSpendPerBuyer = uint_params[3];\n', '        params.hardcap = uint_params[4];\n', '        params.softcap = uint_params[5];\n', '        params.liquidityPercent = uint_params[6];\n', '        params.listingRate = uint_params[7];\n', '        params.startblock = uint_params[8];\n', '        params.endblock = uint_params[9];\n', '        params.lockPeriod = uint_params[10];\n', '        params.uniswapListingTime = uint_params[11];\n', '\n', '        if (params.lockPeriod < 4 weeks) {\n', '            params.lockPeriod = 4 weeks;\n', '        }\n', '\n', '        require(params.uniswapListingTime > params.endblock);\n', '        // Charge ETH fee for contract creation\n', '        require(\n', '            msg.value == PRESALE_SETTINGS.getEthCreationFee(),\n', '            "FEE NOT MET"\n', '        );\n', '\n', '        require(params.amount >= 10000, "MIN DIVIS"); // minimum divisibility\n', '        require(params.endblock > params.startblock, "INVALID BLOCK TIME");\n', '        require(params.tokenPrice.mul(params.hardcap) > 0, "INVALID PARAMS"); // ensure no overflow for future calculations\n', '        require(\n', '            params.liquidityPercent >= 300 && params.liquidityPercent <= 1000,\n', '            "MIN LIQUIDITY"\n', '        ); // 30% minimum liquidity lock\n', '        uint256 tokensRequiredForPresale = PresaleHelper\n', '            .calculateAmountRequired(\n', '            params.amount,\n', '            params.tokenPrice,\n', '            params.listingRate,\n', '            params.liquidityPercent,\n', '            PRESALE_SETTINGS.getBaseFee()\n', '        );\n', '\n', '        Presale01 newPresale = (new Presale01){value: msg.value}(address(this));\n', '\n', '        TransferHelper.safeTransferFrom(\n', '            address(_presaleToken),\n', '            address(msg.sender),\n', '            address(newPresale),\n', '            tokensRequiredForPresale\n', '        );\n', '        newPresale.init1(\n', '            _presaleOwner,\n', '            params.amount,\n', '            params.tokenPrice,\n', '            params.maxSpendPerBuyer,\n', '            params.minSpendPerBuyer,\n', '            params.hardcap,\n', '            params.softcap,\n', '            params.liquidityPercent,\n', '            params.listingRate,\n', '            params.startblock,\n', '            params.endblock,\n', '            params.lockPeriod\n', '        );\n', '        newPresale.init2(\n', '            _baseToken,\n', '            _presaleToken,\n', '            PRESALE_SETTINGS.getBaseFee(),\n', '            PRESALE_SETTINGS.getTokenFee(),\n', '            params.uniswapListingTime,\n', '            PRESALE_SETTINGS.getEthAddress(),\n', '            PRESALE_SETTINGS.getTokenAddress()\n', '        );\n', '        newPresale.init3(white_list, _caller);\n', '        PRESALE_FACTORY.registerPresale(address(newPresale));\n', '    }\n', '}']