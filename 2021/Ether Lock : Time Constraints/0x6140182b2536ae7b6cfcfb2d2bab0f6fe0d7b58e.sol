['# @version 0.2.8\n', '# @notice A manager contract for the StakingRewards contract from Arcx.\n', '# @author skozin, kadmil\n', '# @license MIT\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface StakingRewards:\n', '    def collabPeriodFinish() -> uint256: view\n', '    def notifyRewardAmount(reward: uint256, rewardToken: address): nonpayable\n', '    def setcollabRewardsDistributor(_rewardsDistributor: address): nonpayable\n', '    def recovercollab(amount: uint256): nonpayable\n', '\n', '\n', 'owner: public(address)\n', 'rewards_contract: public(address)\n', 'ldo_token: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\n', '\n', '\n', '@external\n', 'def __init__():\n', '    self.owner = msg.sender\n', '\n', '\n', '@external\n', '@payable\n', 'def __default__():\n', '    assert msg.value > 0 # dev: unexpected call\n', '\n', '\n', '@view\n', '@internal\n', 'def _is_rewards_period_finished(rewards_contract: address) -> bool:\n', '    return block.timestamp >= StakingRewards(rewards_contract).collabPeriodFinish()\n', '\n', '\n', '@internal\n', 'def _recover_erc20(_token: address, _token_amount: uint256):\n', '    recipient: address = self.owner\n', '\n', '    ERC20(_token).transfer(recipient, _token_amount)\n', '\n', '    if self.balance != 0:\n', '        send(recipient, self.balance)\n', '\n', '\n', '@view\n', '@external\n', 'def collab_rewards_period_finish() -> uint256:\n', '    """\n', '    @notice The timestamp of LDO reward period finish.\n', '    """\n', '    return StakingRewards(self.rewards_contract).collabPeriodFinish()\n', '\n', '\n', '@view\n', '@external\n', 'def is_rewards_period_finished() -> bool:\n', '    """\n', '    @notice Whether the current rewards period has finished.\n', '    """\n', '    return self._is_rewards_period_finished(self.rewards_contract)\n', '\n', '\n', '@external\n', 'def transfer_ownership(_to: address):\n', '    """\n', '    @notice Changes the contract owner. Can only be called by the current owner.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '    self.owner = _to\n', '\n', '\n', '@external\n', 'def set_rewards_contract(_rewards_contract: address):\n', '    """\n', '    @notice Sets the StakingRewards contract. Can only be called by the owner.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '    self.rewards_contract = _rewards_contract\n', '\n', '\n', '@external\n', 'def start_next_rewards_period():\n', '    """\n', '    @notice\n', '        Starts the next rewards period of duration `rewards_contract.rewardsDuration()`,\n', '        distributing `ldo_token.balanceOf(self)` tokens throughout the period. The current\n', '        rewards period must be finished by this time.\n', '    """\n', '    rewards_contract: address = self.rewards_contract\n', '    amount: uint256 = ERC20(ldo_token).balanceOf(self)\n', '\n', '    assert rewards_contract != ZERO_ADDRESS and amount != 0, "manager: rewards disabled"\n', '    assert self._is_rewards_period_finished(rewards_contract), "manager: rewards period not finished"\n', '\n', '    ERC20(ldo_token).transfer(rewards_contract, amount)\n', '    StakingRewards(rewards_contract).notifyRewardAmount(amount, ldo_token)\n', '\n', '\n', '@external\n', 'def recover_ldo_from_campaign(_amount: uint256):\n', '    """\n', '    @notice\n', '        Recovers all extra LDO from rewards contract to the reward manager owner.\n', '    """\n', '    StakingRewards(self.rewards_contract).recovercollab(_amount)\n', '    self._recover_erc20(ldo_token, _amount)\n', '\n', '\n', '@external\n', 'def change_manager(_new_manager: address):\n', '    """\n', '    @notice Changes the LDO reward manager in the reward contract.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '\n', '    rewards_contract: address = self.rewards_contract\n', '    assert rewards_contract != ZERO_ADDRESS, "manager: no rewards contract"\n', '\n', '    StakingRewards(self.rewards_contract).setcollabRewardsDistributor(_new_manager)\n', '\n', '\n', '@external\n', 'def recover_erc20(_token: address, _token_amount: uint256):\n', '    """\n', '    @notice\n', '        Transfers the the given ERC20 token and the whole\n', '        ETH balance from self to the owner of self.\n', '    """\n', '    self._recover_erc20(_token, _token_amount)']