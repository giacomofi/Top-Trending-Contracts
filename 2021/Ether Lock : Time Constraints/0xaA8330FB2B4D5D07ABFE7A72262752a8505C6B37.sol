['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '        \n', '}\n', '\n', 'interface ItokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \n', '}\n', '\n', 'interface IERC20Token {\n', '    function totalSupply() external view returns (uint256 supply);\n', '    function transfer(address _to, uint256 _value) external  returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address private owner;\n', '    \n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '\n', '    function changeOwner(address newOwner) public onlyOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract StandardToken is IERC20Token {\n', '    \n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    uint256 public _totalSupply;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    function totalSupply() override public view returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\n', '        require(_to != address(0x0), "Use burn function instead");                              \n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '\t\trequire(balances[msg.sender] >= _value, "Not enough balance");\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\n', '        require(_to != address(0x0), "Use burn function instead");                               \n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '\t\trequire(balances[_from] >= _value, "Not enough balance");\n', '\t\trequire(allowed[_from][msg.sender] >= _value, "You need to increase allowance");\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) override public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) override public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}\n', '\n', 'contract POLCToken is Ownable, StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '    string public name = "Polka City";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "POLC";\n', '\n', '    // Time lock for progressive release of team, marketing and platform balances\n', '    struct TimeLock {\n', '        uint256 totalAmount;\n', '        uint256 lockedBalance;\n', '        uint128 baseDate;\n', '        uint64 step;\n', '        uint64 tokensStep;\n', '    }\n', '    mapping (address => TimeLock) public timeLocks; \n', '\n', '    // Prevent Bots - If true, limits transactions to 1 transfer per block (whitelisted can execute multiple transactions)\n', '    bool public limitTransactions;\n', '    mapping (address => bool) public contractsWhiteList;\n', '    mapping (address => uint) public lastTXBlock;\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '// token sale\n', '\n', '    // Wallet for the tokens to be sold, and receive ETH\n', '    address payable public salesWallet;\n', '    uint256 public soldOnCSale;\n', '    uint256 public constant CROWDSALE_START = 1613926800;\n', '    uint256 public constant CROWDSALE_END = 1614556740;\n', '    uint256 public constant CSALE_WEI_FACTOR = 15000;\n', '    uint256 public constant CSALE_HARDCAP = 7500000 ether;\n', '    \n', '    constructor() {\n', '        _totalSupply = 250000000 ether;\n', '        \n', '        // Base date to calculate team, marketing and platform tokens lock\n', '        uint256 lockStartDate = 1613494800;\n', '        \n', '        // Team wallet - 10000000 tokens\n', '        // 0 tokens free, 10000000 tokens locked - progressive release of 5% every 30 days (after 180 days of waiting period)\n', '        address team = 0x4ef5B3d10fD217AC7ddE4DDee5bF319c5c356723;\n', '        balances[team] = 10000000 ether;\n', '        timeLocks[team] = TimeLock(10000000 ether, 10000000 ether, uint128(lockStartDate + (180 days)), 30 days, 500000);\n', '        emit Transfer(address(0x0), team, balances[team]);\n', '\n', '        // Marketing wallet - 5000000 tokens\n', '        // 1000000 tokens free, 4000000 tokens locked - progressive release of 5% every 30 days\n', '        address marketingWallet = 0x056F878d4Ac07E66C9a46a8db4918E827c6fD71c;\n', '        balances[marketingWallet] = 5000000 ether;\n', '        timeLocks[marketingWallet] = TimeLock(4000000 ether, 4000000 ether, uint128(lockStartDate), 30 days, 200000);\n', '        emit Transfer(address(0x0), marketingWallet, balances[marketingWallet]);\n', '        \n', '        // Private sale wallet - 2500000 tokens\n', '        address privateWallet = 0xED854fCF86efD8473F174d6dE60c8A5EBDdCc37A;\n', '        balances[privateWallet] = 2500000 ether;\n', '        emit Transfer(address(0x0), privateWallet, balances[privateWallet]);\n', '        \n', '        // Sales wallet, holds Pre-Sale balance - 7500000 tokens\n', '        salesWallet = payable(0x4bb74E94c1EB133a6868C53aA4f6BD437F99c347);\n', '        balances[salesWallet] = 7500000 ether;\n', '        emit Transfer(address(0x0), salesWallet, balances[salesWallet]);\n', '        \n', '        // Exchanges - 25000000 tokens\n', '        address exchanges = 0xE50d4358425a93702988eCd8B66c2EAD8b41CE5d;  \n', '        balances[exchanges] = 25000000 ether;\n', '        emit Transfer(address(0x0), exchanges, balances[exchanges]);\n', '        \n', '        // Platform wallet - 200000000 tokens\n', '        // 50000000 tokens free, 150000000 tokens locked - progressive release of 25000000 every 90 days\n', '        address platformWallet = 0xAD334543437EF71642Ee59285bAf2F4DAcBA613F;\n', '        balances[platformWallet] = 200000000 ether;\n', '        timeLocks[platformWallet] = TimeLock(150000000 ether, 150000000 ether, uint128(lockStartDate), 90 days, 25000000);\n', '        emit Transfer(address(0x0), platformWallet, balances[platformWallet]);\n', '        \n', '\n', '\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) override public returns (bool success) {\n', '        require(checkTransferLimit(), "Transfers are limited to 1 per block");\n', '        require(_value <= (balances[msg.sender] - timeLocks[msg.sender].lockedBalance));\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n', '        require(checkTransferLimit(), "Transfers are limited to 1 per block");\n', '        require(_value <= (balances[_from] - timeLocks[_from].lockedBalance));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value, "Not enough balance");\n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        ItokenRecipient recipient = ItokenRecipient(_spender);\n', '        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\n', '        return true;\n', '    }\n', '    \n', '\n', '    function releaseTokens(address _account) public {\n', '        uint256 timeDiff = block.timestamp - uint256(timeLocks[_account].baseDate);\n', '        require(timeDiff > uint256(timeLocks[_account].step), "Unlock point not reached yet");\n', '        uint256 steps = (timeDiff / uint256(timeLocks[_account].step));\n', '        uint256 unlockableAmount = ((uint256(timeLocks[_account].tokensStep) * 1 ether) * steps);\n', '        if (unlockableAmount >=  timeLocks[_account].totalAmount) {\n', '            timeLocks[_account].lockedBalance = 0;\n', '        } else {\n', '            timeLocks[_account].lockedBalance = timeLocks[_account].totalAmount - unlockableAmount;\n', '        }\n', '    }\n', '       \n', '    function checkTransferLimit() internal returns (bool txAllowed) {\n', '        address _caller = msg.sender;\n', '        if (limitTransactions == true && contractsWhiteList[_caller] != true) {\n', '            if (lastTXBlock[_caller] == block.number) {\n', '                return false;\n', '            } else {\n', '                lastTXBlock[_caller] = block.number;\n', '                return true;\n', '            }\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function enableTXLimit() public onlyOwner {\n', '        limitTransactions = true;\n', '    }\n', '    \n', '    function disableTXLimit() public onlyOwner {\n', '        limitTransactions = false;\n', '    }\n', '    \n', '    function includeWhiteList(address _contractAddress) public onlyOwner {\n', '        contractsWhiteList[_contractAddress] = true;\n', '    }\n', '    \n', '    function removeWhiteList(address _contractAddress) public onlyOwner {\n', '        contractsWhiteList[_contractAddress] = false;\n', '    }\n', '    \n', '    function getLockedBalance(address _wallet) public view returns (uint256 lockedBalance) {\n', '        return timeLocks[_wallet].lockedBalance;\n', '    }\n', '    \n', '    function buy() public payable {\n', '        require((block.timestamp > CROWDSALE_START) && (block.timestamp < CROWDSALE_END), "Contract is not selling tokens");\n', '        uint weiValue = msg.value;\n', '        require(weiValue >= (5 * (10 ** 16)), "Minimum amount is 0.05 eth");\n', '        require(weiValue <= (20 ether), "Maximum amount is 20 eth");\n', '        uint amount = CSALE_WEI_FACTOR * weiValue;\n', '        require((soldOnCSale) <= (CSALE_HARDCAP), "That quantity is not available");\n', '        soldOnCSale += amount;\n', '        balances[salesWallet] = balances[salesWallet].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        require(salesWallet.send(weiValue));\n', '        emit Transfer(salesWallet, msg.sender, amount);\n', '\n', '    }\n', '    \n', '    function burnUnsold() public onlyOwner {\n', '        require(block.timestamp > CROWDSALE_END);\n', '        uint currentBalance = balances[salesWallet];\n', '        balances[salesWallet] = 0;\n', '        _totalSupply = _totalSupply.sub(currentBalance);\n', '        emit Burn(salesWallet, currentBalance);\n', '    }\n', '}']