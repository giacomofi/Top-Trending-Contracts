['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', 'pragma solidity >=0.5.12;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\t\n', '}\n', '\n', 'contract PubeTokenSale is owned {\n', '\tusing SafeMath for uint;\n', '\tToken public tokenAddress;\n', '    bool public initialized = false;\n', '\n', '\taddress public receiverAddress;\n', '\t\n', '\tuint public rate = 4000000000000;\n', '\tuint public start;\n', '\tuint public end;\n', '\t\n', '\tuint public pre_sale = 40;\n', '    uint public bonus_1 = 30;\n', '    uint public bonus_2 = 20;\n', '    uint public bonus_3 = 15;\n', '    uint public bonus_4 = 10;\n', '    uint public bonus_5 = 5;\n', '\t\n', '    event Initialized();\n', '    event WithdrawTokens(address destination, uint256 amount);\n', '    event WithdrawAnyTokens(address tokenAddress, address destination, uint256 amount);\n', '    event WithdrawEther(address destination, uint256 amount);\n', '\t\n', '\n', '    /**\n', '     * Initialize contract\n', '     *\n', '     * @param _tokenAddress token address\n', '     */\n', '    function init(Token _tokenAddress) onlyOwner public {\n', '        require(!initialized);\n', '        initialized = true;\n', '        tokenAddress = _tokenAddress;\n', '        emit Initialized();\n', '    }\n', '\n', '\n', '    /**\n', '     * withdrawTokens\n', '     *\n', '     * Withdraw tokens from the contract\n', '     *\n', '     * @param amount is an amount of tokens\n', '     */\n', '    function withdrawTokens(\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        require(initialized);\n', '        tokenAddress.transfer(msg.sender, amount);\n', '        emit WithdrawTokens(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * withdrawAnyTokens\n', '     *\n', '     * Withdraw any tokens from the contract\n', '     *\n', '     * @param _tokenAddress is a token contract address\n', '     * @param amount is an amount of tokens\n', '     */\n', '    function withdrawAnyTokens(\n', '        address _tokenAddress,\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        Token(_tokenAddress).transfer(msg.sender, amount);\n', '        emit WithdrawAnyTokens(_tokenAddress, msg.sender, amount);\n', '    }\n', '    \n', '    /**\n', '     * withdrawEther\n', '     *\n', '     * Withdraw ether from the contract\n', '     *\n', '     * @param amount is a wei amount \n', '     */\n', '    function withdrawEther(\n', '        uint256 amount\n', '    )\n', '        onlyOwner public\n', '    {\n', '        msg.sender.transfer(amount);\n', '        emit WithdrawEther(msg.sender, amount);\n', '    }\n', '\t\n', '\tfunction SaleRate(uint _rate) public onlyOwner {\n', '\t\trate = _rate;\n', '\t}\n', '\t\n', '\tfunction StartSale(uint _start) public onlyOwner {\n', '\t\tstart = _start;\n', '\t}\n', '\t\n', '\tfunction EndSale(uint _last) public onlyOwner {\n', '\t\tend = _last;\n', '\t}\n', '\t\n', '\tfunction EthReceiver(address _receiverAddress) public onlyOwner {\n', '\t\treceiverAddress = _receiverAddress;\n', '\t}\n', '\t\n', '\tmodifier OnGoing() {\n', '    require(now > start && now < end);\n', '    _;\n', '\t}\n', '\t\n', '\tfunction SetBonus(uint _pre_sale, uint _bonus_1, uint _bonus_2, uint _bonus_3, uint _bonus_4, uint _bonus_5) public onlyOwner {\n', '\t\tpre_sale = _pre_sale;\n', '\t\tbonus_1 = _bonus_1;\n', '\t\tbonus_2 = _bonus_2;\n', '\t\tbonus_3 = _bonus_3;\n', '\t\tbonus_4 = _bonus_4;\n', '\t\tbonus_5 = _bonus_5; \n', '\t}\n', '\n', '\tfunction BuyPubes() OnGoing payable public {\n', '\t\t\n', '\t\tuint tokens = rate.mul(msg.value).div(1 ether);\n', '\t\t\n', '\t\tuint BonusPubes = 0;\n', '\t\t\n', '\t\tif(now < start)  {\n', '\t\t\tBonusPubes = tokens.div(100).mul(pre_sale);\n', '\t\t} else if(now >= start && now < start + 7 days) { \t// 1st week\n', '\t\t\tBonusPubes = tokens.div(100).mul(bonus_1);\n', '\t\t} else if(now >= start && now < start + 14 days) { \t// 2nd week\n', '\t\t\tBonusPubes = tokens.div(100).mul(bonus_2);\n', '\t\t} else if(now >= start && now < start + 21 days) { \t// 3rd week\n', '\t\t\tBonusPubes = tokens.div(100).mul(bonus_3);\n', '\t\t} else if(now >= start && now < start + 35 days) { \t// 4th week\n', '\t\t\tBonusPubes = tokens.div(100).mul(bonus_4);\n', '\t\t} else if(now >= start && now < start + 42 days) { \t// 5th week\n', '\t\t\tBonusPubes = tokens.div(100).mul(bonus_5);\n', '\t\t} \n', '\t\t\n', '\t\tuint amountTobuy = msg.value;\n', '\t\tuint TotalWithBonus = tokens.add(BonusPubes);\n', '\t\t\n', '        uint TokenLeft = Token(tokenAddress).balanceOf(address(this));\n', '        require(amountTobuy > 0, "You need to send some Ether");\n', '        require(TotalWithBonus <= TokenLeft, "Not enough tokens available");\n', '\t\t\n', '\t\taddress payable wallet = address(uint160(receiverAddress));\n', '\t\twallet.transfer(msg.value);\n', '\t\t\n', '        Token(tokenAddress).transfer(msg.sender, TotalWithBonus);\n', '\t\t\n', '\t}\n', '\n', '\tfunction() external payable {\n', '\t\tBuyPubes();\n', '\t}\n', '\t\n', '}']