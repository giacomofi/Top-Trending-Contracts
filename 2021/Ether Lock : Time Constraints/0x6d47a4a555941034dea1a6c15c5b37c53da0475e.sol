['pragma solidity >=0.7.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', 'import "./IMintedBeforeReveal.sol";\n', '\n', 'contract Smooshies is ERC721, Ownable, IMintedBeforeReveal {\n', '\n', '    // This will be the provenance record of all Smooshies in existence at the time once revealed.\n', '    string public constant ORIGINAL_PROVENANCE = "";\n', '\n', '    // Time of when the sale starts.\n', '    uint256 public constant SALE_START_TIMESTAMP = 1617480000;\n', '\n', '    // Time after which the Smooshies are gathered up, randomized, and revealed 5 days from initial launch).\n', '    uint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 5);\n', '\n', '    // Maximum amount of Smooshies in existance ever to be minted. Spooky.\n', '    uint256 public constant MAX_SMOOSHIES_SUPPLY = 10000;\n', '\n', '    // Facts.\n', '    string public constant R = "They are squeezable, they are squishable. They are Smooshies!";\n', '\n', '    // The block in which the starting index was created.\n', '    uint256 public startingIndexBlock;\n', '\n', '    // The index of the item that will be #1.\n', '    uint256 public startingIndex;\n', '\n', '    mapping (uint256 => bool) private _mintedBeforeReveal;\n', '\n', '    constructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) {\n', '        _setBaseURI(baseURI);\n', '    }\n', '\n', '    function isMintedBeforeReveal(uint256 index) public view override returns (bool) {\n', '        return _mintedBeforeReveal[index];\n', '    }\n', '\n', ' \n', '    function getSmooshiesMaxAmount() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Pre-Sale has not started yet!");\n', '        require(totalSupply() < MAX_SMOOSHIES_SUPPLY, "Sale has ended, no more Smooshies left to sell :(. Head over to opensea to trade the post-sale market!");\n', '\n', '        uint currentSupply = totalSupply();\n', '        \n', '            return 50; // Always allow up to 50 mint\n', '        }\n', '\n', '    function getSmooshiesPrice() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Pre-Sale has not started yet!");\n', '        require(totalSupply() < MAX_SMOOSHIES_SUPPLY, "Sale has ended, no more Smooshies left to sell :(. Head over to opensea to trade the post-sale market!");\n', '\n', '        uint currentSupply = totalSupply();\n', '\n', '        if (currentSupply > 9950) {\n', '            return 1000000000000000000; // 9951-1000: 1.00 ETH\n', '        } else if (currentSupply > 9500) {\n', '            return 800000000000000000; // 9501-9950: 0.80 ETH\n', '        } else if (currentSupply > 8000) {\n', '            return 400000000000000000; // 8001-9500: 0.40 ETH\n', '        } else if (currentSupply > 5000) {\n', '            return 200000000000000000; // 5001-8000: 0.20 ETH\n', '        } else if (currentSupply > 2000) {\n', '            return 150000000000000000; // 2001-5000: 0.15 ETH\n', '        } else if (currentSupply > 500) {\n', '            return 50000000000000000; // 500-2000:  0.05 ETH\n', '        } else {\n', '            return 20000000000000000;  // 1 - 499:   0.02 ETH\n', '        }\n', '    }\n', '\n', '    function mintSmooshie(uint256 numberOfSmooshies) public payable {\n', '        require(totalSupply() < MAX_SMOOSHIES_SUPPLY, "Sale has ended, no more Smooshies left to sell :(. Head over to opensea to trade the post-sale market!");\n', '        require(numberOfSmooshies > 0, "You have to mint at least 1 Smooshie");\n', '        require(numberOfSmooshies <= getSmooshiesMaxAmount(), "Woah there Whale! You are not allowed to buy more than 50 Smooshies at once. Please mint 50 and then do another transaction!");\n', '        require(SafeMath.add(totalSupply(), numberOfSmooshies) <= MAX_SMOOSHIES_SUPPLY, "Exceeds maximum Smooshies supply. We are near the end of the sale! Please check the supply remaining and try to mint less Smooshies.");\n', '        require(SafeMath.mul(getSmooshiesPrice(), numberOfSmooshies) == msg.value, "Amount of Ether sent is not correct, please try again");\n', '\n', '        for (uint i = 0; i < numberOfSmooshies; i++) {\n', '            uint mintIndex = totalSupply();\n', '            if (block.timestamp < REVEAL_TIMESTAMP) {\n', '                _mintedBeforeReveal[mintIndex] = true;\n', '            }\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '\n', '        // Source of randomness. Theoretical miner withhold manipulation possible but should be sufficient in a pragmatic sense\n', '        // Set the starting block index when the sale concludes either time-wise or the supply runs out.\n', '        if (startingIndexBlock == 0 && (totalSupply() == MAX_SMOOSHIES_SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)) {\n', '            startingIndexBlock = block.number;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Finalize starting index\n', '    */\n', '    function finalizeStartingIndex() public {\n', '        require(startingIndex == 0, "Starting index is already set");\n', '        require(startingIndexBlock != 0, "Starting index block must be set");\n', '        \n', '        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_SMOOSHIES_SUPPLY;\n', '\n', '        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes).\n', '        if (SafeMath.sub(block.number, startingIndexBlock) > 255) {\n', '            startingIndex = uint(blockhash(block.number-1)) % MAX_SMOOSHIES_SUPPLY;\n', '        }\n', '\n', '        // Prevent default sequence because that would be a bit boring.\n', '        if (startingIndex == 0) {\n', '            startingIndex = SafeMath.add(startingIndex, 1);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ether from this contract (Callable by owner only)\n', '    */\n', '    function withdraw() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function changeBaseURI(string memory baseURI) onlyOwner public {\n', '       _setBaseURI(baseURI);\n', '    }\n', '       /**\n', '    * @dev Reserved for people who helped this project and giveaways. Max 10\n', '    */\n', '      function reserveGiveaway(uint256 numSmooshies) public onlyOwner {\n', '        uint currentSupply = totalSupply();\n', '        require(totalSupply() + numSmooshies <= 10, "Exceeded the max giveaway mint of 10. Play fair!");\n', '        uint256 index;\n', '        // Reserved for people who helped this project and giveaways\n', '        for (index = 0; index < numSmooshies; index++) {\n', '            _safeMint(owner(), currentSupply + index);\n', '        }\n', '    }\n', '}']