['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '/**\n', "                                                    ......''''......\n", "                                            .',:cldxxkOOO0kddk0OOOkxxdlc:;'.\n", '                                       .,:lxkO00000000000k, .;k00000000000Okxl:,.\n', '                                   .;ldO0000000000000000O;    :O0000000000000000Odl;.\n', "                                ':dk00000000000000000000Ol.  .o000000000000000000000kd:'\n", '                             .:dO0000000000000000000000000o;:d0000000000000000000000000Od:.\n', '                           ,ok000000000000000000000000000000000000000000000000000000000000ko,\n', '                        .;dO0000000000000000000000000000000000000000000000000000000000000000Od;.\n', '                       ;d0000000000000000000000000000000000000000000000000000000000000000000000d;\n', "                     'dO000000000000000000000000000000000000000000000000000000000000000000000000Od'\n", '                   .cO0000000000000000000000000000000000000000000000000000000000000000000000000000Oc.\n', "                  'd00000000000000000000000000000000000000000000000000000000000000000000000000000000d'\n", '                 ;k0000000000000000000000000000000000000000000000000000000000000000000000000000000000k;\n', '                cO000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oc\n', '               cO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oc\n', '              :O0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000O:\n', '             ;k000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000k;\n', '            .x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000x.\n', '            l0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000l\n', "           'k0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000k'\n", '           c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c\n', '          .x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000x.\n', '          ,k00000000000000000000000000000000000OOOO000000000000000000000000000000000000000000000000000000000k,\n', "          ;O000OO00000000000000000000000000000x,...'',,;;;:::cccclloooddxxkkkOOOO000000000000000000000000000O;\n", "          :0ko:'.,ldO0000000000000000000000000d.                         ........'',,;;;::ccccllooodddxxkkkOO:\n", "          cOd;.   .:k0000000000000000000000000d.                                        .......'',,;:cclodxxk:\n", "          :000kocok000000000000000000000000000d.                ...'',,;;;::cccclloodddxxkkkOOOO0000000000000:\n", '          ;O0000000000000000000000000000000000koccllood;       .o0O00000000000000000000000000000000000000000O;\n', "          'k0000000000000000000000000000000000000000000d.      .x0000000000000000000000000000000000000000000k'\n", '          .o0000000000000000000000000000000000000000000x.      ,k0000000000000000000000000000000000000000000o.\n', '           ;O000000000000000000000000000000000000000000k,      ;O000000000000000000000000000000000000000000O;\n', '           .d000000000000000000000000000000000000000000O;      c0000000000000000000000000000000000000000000d.\n', '            ;O000000000000000000000000000000000000000000c     .o000000000000000000000000000000000000000000O;\n', '            .l000000000000000000000000000000000000000000o.    .x000000000000000000000000000000000000000000l.\n', "             .d00000000000000000000000000000000000000000x.    'k00000000000000000000000000000000000000000d.\n", "              .x0000000000000000000000000000000000000000k'    ;O0000000000000000000000000000000000000000x.\n", "               'x000000000000000000000000000000000000000O;    c0000000000000000000000000000000000000000x'\n", '                .d000000000000000000000000000000000000000c   .o000000000000000000000000000000000000000d.\n', '                 .lO0000000000000000000000000000000000000o.  .d0000000000000000000000000000000000000Ol.\n', "                   ;k000000000000000000000000000000000000d.  'k000000000000000000000000000000000000k;\n", "                    .oO0000000000000000000000000000000000k'  ;O0000000000000000000000000000000000Oo.\n", '                      ,d000000000000000000000000000000000O,  :0000000000000000000000000000000000d,\n', '                       .;x00000000000000000000000000000000:..l00000000000000000000000000000000x;.\n', '                         .;dO00000000000000000000000000000l.,d00000000000000000000000000000Od;.\n', "                            'lk000000000000000000000000000d;cx000000000000000000000000000kl'\n", '                              .,lk000000000000000000000000xodk000000000000000000000000kl,.\n', '                                 .,cdO00000000000000000000OkOO00000000000000000000Odc,.\n', '                                     .;cdkO0000000000000000000000000000000000Okdc;.\n', "                                         .';cldkO0000000000000000000000Okdlc;'.\n", "                                               ..',;:cclllloollllcc:;,'..\n", "                           ':ccc,\n", '                         .l0KKKK0d.\n', "                         'kK0KK0K0;\n", "     ..'.'.'.            .o0KKKKKx.\n", '     :000000O,             ,cllc;.\n', '     :0K000KO,\n', '     c0K0K0KO,                                        .....              .....                        ......\n', ".cdddk000KKK0kdddddc.     :ddddddc.     .ldddddl. ,coxkOOOkdol;.     'coxkOOOkdl;.               .;loxkOOOkkxoc,.\n", ".xK0KK00KKKKKK0KK0Kd.    .oK0KK0Kx.     'OK0K0K0dx0KK0000000KKKOc. ,x0KK0000000KKOl.          .:dOKKK00000000KK0Oo,\n", ".kKKKKK0KKKKKKKKKKKd.    .oK0KK0Kx.     'OK0KK0KK00KKKKKK00KKK0K0xdOK0KKKKKK000K00Kx'       .:kKK0K0KKKKKKKK00K00K0d'\n", ".;cccx0K0K0K0dccccc;     .oK0KK0Kx.     'OK0KKK0K0xl;,,:oOK0KK000KKK0kl;,,:oOKK00K0Kd.     .o0K0K0K0xl:,,,:lk0K0KK0KO;\n", "     :0K0K0KO,           .oK0KK0Kx.     'OK0KK0K0l.      'xK00KKK0K0l.      .dK0000K0;    .l000KK0x,.       .:kK0KK0KO,\n", "     :0K0K0KO,           .oK0KK0Kx.     'OK0KK0Kd.        ,OKK0KK0Kd.        ,OK0KK0Kl    ,OK000Kk,...........:OK0KK0Ko.\n", "     :0K0K0KO,           .oK0KK0Kx.     'OK0KKKKc         'kXK0000Kl         .xK0KK0Ko.   :0K000K0kkkkkkkkkkkkO0K0000Kx.\n", "     :0K0K0KO,           .oK0KK0Kx.     'OK0KKKKc         'kXK0KK0Kl         .xK0KK0Ko.   :0K0K0K000000000000000000000x.\n", "     :0K000KO,           .oK0KK0Kx.     'OK0KKK0c         'kXK00K0Kl         .xK0KK0Ko.   'OK0K0KOc....................\n", "     :0K0K0K0l.          .oK0KK0Kx.     'OK0KKKKc         'kXK00K0Kl         .xK0KK0Ko.    l0K0K0Kk:.          'cl'\n", "     ,OK0KK0K0xc;,,:.    .oK0KK0Kx.     'OK0KKKKc         'kXK0KK0Kl         .xK0KK0Ko.    .l0K0K0K0ko:,,',;:lx0KKOc.\n", "      c0K0KKK0KKKKKKc    .oK0KK0Kx.     'OK0KKK0c         'kXK0KK0Kl         .xK0KK0Ko.      ;x0K0000KKK000KKK00K000x,\n", "       ;k0KK0000000Kc    .oK0KK0Kx.     'OK00000c         'kXK0K00Kl         .xK0000Ko.       .;oO0KK000000000KKK0Oo:.\n", "        .,cdxkOOOkxo'     :ddddddc.     .ldddddd,         .lxdddddd;         .cdddddd:           .,codxkOOOkkxol:,.\n", "            ..''...                                                                                   ...''...\n", '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.7.0 <0.9.0;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the token decimals.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the token symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '    * @dev Returns the token name.\n', '    */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the erc token owner.\n', '     */\n', '    function getOwner() external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address _owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {cs := extcodesize(self)}\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', 'contract ERC20TokenImplementation is Context, IERC20, Initializable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal _balances;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '    uint256 internal _totalSupply;\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    bool internal _mintable;\n', '\n', '    constructor() {\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Leaves the contract without owner. It will not be possible to call\n', '    * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '    *\n', '    * NOTE: Renouncing ownership will leave the contract without an owner,\n', '    * thereby removing any functionality that is only available to the owner.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if the token is mintable or not\n', '     */\n', '    function mintable() external view returns (bool) {\n', '        return _mintable;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the erc token owner.\n', '     */\n', '    function getOwner() external override view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the token decimals.\n', '     */\n', '    function decimals() external override view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the token symbol.\n', '     */\n', '    function symbol() external override view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the token name.\n', '    */\n', '    function name() external override view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-totalSupply}.\n', '     */\n', '    function totalSupply() external override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) external override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) external override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) external override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n', '     * the total supply.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `msg.sender` must be the token owner\n', '     * - `_mintable` must be true\n', '     */\n', '    function mint(uint256 amount) public onlyOwner returns (bool) {\n', '        require(_mintable, "this token is not mintable");\n', '        _mint(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '   * @dev Burn `amount` tokens and decreasing the total supply.\n', '   */\n', '    function burn(uint256 amount) public returns (bool) {\n', '        _burn(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract Time is ERC20TokenImplementation {\n', '\n', '    /**\n', '     * @dev TimeZones are candidates possible to be yield farmed\n', '     */\n', '\n', '    function _max_int() pure private returns (uint256) {\n', '        return 2 ** 256 - 1;\n', '    }\n', '\n', '    function _seconds_in_day() pure private returns (uint256) {\n', '        return 86400;\n', '    }\n', '\n', '    struct TimeZone {\n', '        uint256 index;\n', '        string id;\n', '        string description;\n', '        address contractAddress;\n', '    }\n', '\n', '    mapping(string => TimeZone) private _timeZoneMap;\n', '    string[] private _timeZoneKeys;\n', '\n', '\n', '    function _upsertTimeZone(string calldata id, string calldata description, address contractAddress) onlyOwner private returns (bool) {\n', '        TimeZone storage timeZoneToUpsert = _timeZoneMap[id];\n', '        timeZoneToUpsert.id = id;\n', '        timeZoneToUpsert.description = description;\n', '        timeZoneToUpsert.contractAddress = contractAddress;\n', '        if (timeZoneToUpsert.index > 0) {// entry exists\n', '            // do nothing\n', '            return true;\n', '        } else {// new entry\n', '            _timeZoneKeys.push(id);\n', '            uint keyListIndex = _timeZoneKeys.length - 1;\n', '            timeZoneToUpsert.index = keyListIndex + 1;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _removeTimeZone(string calldata id) onlyOwner private returns (bool) {\n', '        TimeZone storage timeZoneToRemove = _timeZoneMap[id];\n', '        // entry not exist\n', '        require(timeZoneToRemove.index != 0);\n', '        // invalid index value\n', '        require(timeZoneToRemove.index <= _timeZoneKeys.length);\n', '\n', '        // Move an last element of array into the vacated key slot.\n', '        uint keyListIndex = timeZoneToRemove.index - 1;\n', '        uint keyListLastIndex = _timeZoneKeys.length - 1;\n', '        _timeZoneMap[_timeZoneKeys[keyListLastIndex]].index = keyListIndex + 1;\n', '        _timeZoneKeys[keyListIndex] = _timeZoneKeys[keyListLastIndex];\n', '        _timeZoneKeys.pop();\n', '        delete _timeZoneMap[id];\n', '        return true;\n', '    }\n', '\n', '    function _timeZonesSize() view private returns (uint) {\n', '        return uint(_timeZoneKeys.length);\n', '    }\n', '\n', '    function _timeZoneExists(string calldata id) view private returns (bool) {\n', '        return _timeZoneMap[id].index > 0;\n', '    }\n', '\n', '    function _timeZoneById(string calldata id) view private returns (TimeZone memory) {\n', '        return _timeZoneMap[id];\n', '    }\n', '\n', '    function _timeZoneByIndex(uint index) view private returns (TimeZone memory) {\n', '        require(index >= 0);\n', '        require(index < _timeZoneKeys.length);\n', '        return _timeZoneMap[_timeZoneKeys[index]];\n', '    }\n', '\n', '    function _timeZonesKeys() view private returns (string[] memory) {\n', '        return _timeZoneKeys;\n', '    }\n', '\n', '    /**\n', '     * @dev Voting proportion of an account for which time zone to farm from\n', '     */\n', '    struct VotingProportion {\n', '        uint256 index;\n', '        string[] zoneIds;\n', '        uint256[] proportions;\n', '    }\n', '\n', '    mapping(address => VotingProportion) private _votingProportionMap;\n', '    address[] private _votingProportionKeys;\n', '\n', '    function _upsertVotingProportion(address key, string[] memory zoneIds, uint256[] memory proportions) private returns (bool) {\n', '        VotingProportion storage votingProportionToUpsert = _votingProportionMap[key];\n', '        votingProportionToUpsert.zoneIds = zoneIds;\n', '        votingProportionToUpsert.proportions = proportions;\n', '        if (votingProportionToUpsert.index > 0) {// entry exists\n', '            // do nothing\n', '            return true;\n', '        } else {// new entry\n', '            _votingProportionKeys.push(key);\n', '            uint keyListIndex = _votingProportionKeys.length - 1;\n', '            votingProportionToUpsert.index = keyListIndex + 1;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _removeVotingProportion(address key) private returns (bool) {\n', '        VotingProportion storage votingProportionToRemove = _votingProportionMap[key];\n', '        // entry not exist\n', '        require(votingProportionToRemove.index != 0);\n', '        // invalid index value\n', '        require(votingProportionToRemove.index <= _votingProportionKeys.length);\n', '\n', '        // Move an last element of array into the vacated key slot.\n', '        uint keyListIndex = votingProportionToRemove.index - 1;\n', '        uint keyListLastIndex = _votingProportionKeys.length - 1;\n', '        _votingProportionMap[_votingProportionKeys[keyListLastIndex]].index = keyListIndex + 1;\n', '        _votingProportionKeys[keyListIndex] = _votingProportionKeys[keyListLastIndex];\n', '        _votingProportionKeys.pop();\n', '        delete _votingProportionMap[key];\n', '        return true;\n', '    }\n', '\n', '    function _votingProportionSize() view private returns (uint) {\n', '        return uint(_votingProportionKeys.length);\n', '    }\n', '\n', '    function _votingProportionExists(address key) view private returns (bool) {\n', '        return _votingProportionMap[key].index > 0;\n', '    }\n', '\n', '    function _votingProportionByKey(address key) view private returns (VotingProportion memory) {\n', '        return _votingProportionMap[key];\n', '    }\n', '\n', '    function _votingProportionByIndex(uint index) view private returns (VotingProportion memory) {\n', '        require(index >= 0);\n', '        require(index < _votingProportionKeys.length);\n', '        return _votingProportionMap[_votingProportionKeys[index]];\n', '    }\n', '\n', '\n', '    struct PriceInfo {\n', '        uint256 timeStampFrom;\n', '        uint256 timeStampTo;\n', '        uint256 priceFrom;\n', '        uint256 priceTo;\n', '        uint256 computedPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin private variables\n', '     */\n', '    address private _liquidity;\n', '    address private _baseCurrency;\n', '    uint256 private _expense;\n', '\n', '    /**\n', '     * @dev Time pricing related private variables\n', '     */\n', '    uint256 private _minTimeStamp;\n', '    uint256 private _maxTimeStamp;\n', '    mapping(uint256 => uint256) private _timeStampToPrice;\n', '\n', '    // Voting Events\n', '    event TimeZoneUpdated(string id, string description, address contractAddress);\n', '    event TimeZoneRemoved(string id);\n', '    event Voted(address votingAccount, string[] zoneIds, uint256[] proportions);\n', '    event Unvoted(address votingAccount);\n', '    event TimeZonesCleaned();\n', '    event VotingProportionCleaned();\n', '\n', '    // Admin Events\n', '    event LiquidityChanged(address previousLiquidity, address newLiquidity);\n', '    event BaseCurrencyChanged(address previousBaseCurrency, address newBaseCurrency, uint256 rate);\n', '\n', '    // Time Events\n', '    event TimeBought(uint256 timeAmount, uint256 baseCurrencyAmount, address buyer);\n', '    event TimeSold(uint256 timeAmount, uint256 baseCurrencyAmount, address seller);\n', '    event LapseProved(uint256 newPrice, uint256 newTimeStamp, uint256 expense);\n', '    event Reimbursed(uint256 expense);\n', '\n', '    constructor() {\n', '        _timeZoneKeys = new string[](0);\n', '        _votingProportionKeys = new address[](0);\n', '        _maxTimeStamp = 0;\n', '        _minTimeStamp = _max_int();\n', '        _expense = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev sets initials supply and the owner\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals, uint256 amount, bool mintable, address owner, address liquidityIn, address baseCurrencyIn) external initializer {\n', '        _owner = owner;\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _mintable = mintable;\n', '        _liquidity = liquidityIn;\n', '        _baseCurrency = baseCurrencyIn;\n', '        _mint(owner, amount);\n', '    }\n', '\n', '    function addOrUpdateTimeZone(string calldata id, string calldata description, address contractAddress) onlyOwner external returns (bool) {\n', '        require(_upsertTimeZone(id, description, contractAddress), "Failed to upsert new time zone!");\n', '        emit TimeZoneUpdated(id, description, contractAddress);\n', '        return true;\n', '    }\n', '\n', '    function removeTimeZone(string calldata id) onlyOwner external returns (bool) {\n', '        require(_removeTimeZone(id), "Failed to remove time zone!");\n', '        emit TimeZoneRemoved(id);\n', '        return true;\n', '    }\n', '\n', '    function timeZone(string calldata id) view external returns (TimeZone memory) {\n', '        return _timeZoneById(id);\n', '    }\n', '\n', '    function timeZoneIds() view external returns (string[] memory) {\n', '        return _timeZoneKeys;\n', '    }\n', '\n', '    function vote(string[] calldata zoneIds, uint256[] calldata proportions) external returns (bool) {\n', '        require(zoneIds.length == proportions.length, "Voting zone length and proportion length does not match!");\n', '        bool allKeyExists = true;\n', '        uint256 proportionSum = 0;\n', '        for (uint256 i = 0; i < zoneIds.length; i++) {\n', '            allKeyExists = allKeyExists && _timeZoneExists(zoneIds[i]);\n', '            proportionSum += proportions[i];\n', '        }\n', '        require(allKeyExists, "Input contains wrong cadidate id(s)!");\n', '        require(proportionSum == 1 ether, "Voting proportion must add up to 1 ether");\n', '        require(_upsertVotingProportion(msg.sender, zoneIds, proportions), "Failed to update voting proportions!");\n', '        emit Voted(msg.sender, zoneIds, proportions);\n', '        return true;\n', '    }\n', '\n', '    function unvote() external returns (bool) {\n', '        require(_removeVotingProportion(msg.sender), "Failed to remove voting proportion!");\n', '        emit Unvoted(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function votingProportion(address account) view external returns (VotingProportion memory) {\n', '        return _votingProportionByKey(account);\n', '    }\n', '\n', '    function votingResult() view external returns (uint256[] memory) {\n', '        uint256[] memory votingResultToReturn = new uint256[](_timeZonesSize());\n', '        for (uint256 i = 0; i < _votingProportionSize(); i++) {\n', '            address account = _votingProportionKeys[i];\n', '            uint256 accountBalance = _balances[account];\n', '            string[] storage zoneIds = _votingProportionMap[account].zoneIds;\n', '            for (uint256 j = 0; j < zoneIds.length; j++) {\n', '                uint256 zoneIndex = _timeZoneMap[zoneIds[j]].index - 1;\n', '                uint256 accountVotingProportion = _votingProportionMap[account].proportions[j];\n', '                votingResultToReturn[zoneIndex] += SafeMath.div(SafeMath.mul(accountBalance, accountVotingProportion), 1 ether);\n', '            }\n', '        }\n', '        return votingResultToReturn;\n', '    }\n', '\n', '    function cleanVotingProportion() onlyOwner external returns (bool) {\n', '        for (uint256 i = 0; i < _votingProportionSize(); i++) {\n', '            delete _votingProportionMap[_votingProportionKeys[i]];\n', '        }\n', '        delete _votingProportionKeys;\n', '        emit VotingProportionCleaned();\n', '        return true;\n', '    }\n', '\n', '    function cleanTimeZones() onlyOwner external returns (bool) {\n', '        for (uint256 i = 0; i < _timeZonesSize(); i++) {\n', '            delete _timeZoneMap[_timeZoneKeys[i]];\n', '        }\n', '        delete _timeZoneKeys;\n', '        emit TimeZonesCleaned();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev changes the liquidity account\n', '     */\n', '    function setLiquidity(address liquidity) onlyOwner external returns (bool) {\n', '        address previousLiquidity = _liquidity;\n', '        _liquidity = liquidity;\n', '        emit LiquidityChanged(previousLiquidity, _liquidity);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev main currency that time is backed - most likely one of the fiat base stablecoin\n', '     */\n', '    function baseCurrency() view external returns (address) {\n', '        return _baseCurrency;\n', '    }\n', '\n', '    /**\n', '     * @dev changes base currency contract, need to provide rate which is newBaseCurrency/currentBaseCurrency\n', '     */\n', '    function setBaseCurrency(address newBaseCurrency, uint256 rate) onlyOwner external returns (bool) {\n', '        address previousBaseCurrency = _baseCurrency;\n', '        _baseCurrency = newBaseCurrency;\n', '        for (uint256 timeStamp = _minTimeStamp; timeStamp <= _maxTimeStamp; timeStamp = timeStamp + _seconds_in_day()) {\n', '            if (_timeStampToPrice[timeStamp] != 0) {\n', '                _timeStampToPrice[timeStamp] = _applyRate(_timeStampToPrice[timeStamp], rate);\n', '            }\n', '        }\n', '        emit BaseCurrencyChanged(previousBaseCurrency, _baseCurrency, rate);\n', '        return true;\n', '    }\n', '\n', '    function _applyRate(uint256 value, uint256 rate) internal pure returns (uint256) {\n', '        return SafeMath.div(SafeMath.mul(value, rate), 1 ether);\n', '    }\n', '\n', '    function _baseLiquidityAmount() internal view returns (uint256) {\n', '        return IERC20(_baseCurrency).balanceOf(address(_liquidity));\n', '    }\n', '\n', '    /**\n', '     * @dev maximum amount time can be sold back at the moment\n', '     * if this value is small, time service will refill liquidity with base currency\n', '     */\n', '    function maxTimeSellAmount() view public returns (uint256) {\n', '        return SafeMath.div(SafeMath.mul(_baseLiquidityAmount(), 1 ether), currentPrice());\n', '    }\n', '\n', '    /**\n', '     * @dev the actual live price - this price is used in maxTimeSellAmount and sellForBase\n', '     */\n', '    function currentPrice() view public returns (uint256) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp).computedPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev start price of the current timeframe\n', '     */\n', '    function currentStartPrice() view public returns (uint256) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp).priceFrom;\n', '    }\n', '\n', '    /**\n', '     * @dev end price of the current timeframe\n', '     * when buying time, it can be only bought with this price\n', '     */\n', '    function currentEndPrice() view public returns (uint256) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp).priceTo;\n', '    }\n', '\n', '    /**\n', '     * @dev start timestamp of the current timeframe\n', '     */\n', '    function currentStartTimeStamp() view public returns (uint256) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp).timeStampFrom;\n', '    }\n', '\n', '    /**\n', '     * @dev end timestamp of the current timeframe\n', '     */\n', '    function currentEndTimeStamp() view public returns (uint256) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp).timeStampTo;\n', '    }\n', '\n', '    /**\n', '     * @dev full priceinfo object of the current timeframe\n', '     */\n', '    function currentPriceInfo() view public returns (PriceInfo memory) {\n', '        uint256 currentTimeStamp = block.timestamp;\n', '        return _computePriceInfo(currentTimeStamp);\n', '    }\n', '\n', '    /**\n', '     * @dev price of a given historical time\n', '     */\n', '    function historicalPrice(uint256 timeStamp) view public returns (uint256) {\n', '        return _computePriceInfo(timeStamp).computedPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev full priceinfo object of a given historical time\n', '     */\n', '    function historicalPriceInfo(uint256 timeStamp) view public returns (PriceInfo memory) {\n', '        return _computePriceInfo(timeStamp);\n', '    }\n', '\n', '    function _computePriceInfo(uint256 timeStamp) view internal returns (PriceInfo memory) {\n', '        if (timeStamp <= _minTimeStamp) {\n', '            uint256 minPrice = _timeStampToPrice[_minTimeStamp];\n', '            return PriceInfo(_minTimeStamp, _minTimeStamp, minPrice, minPrice, minPrice);\n', '        }\n', '        if (_maxTimeStamp <= timeStamp) {\n', '            uint256 maxPrice = _timeStampToPrice[_maxTimeStamp];\n', '            return PriceInfo(_maxTimeStamp, _maxTimeStamp, maxPrice, maxPrice, maxPrice);\n', '        }\n', '\n', '        uint256 secondInDay = SafeMath.mod(timeStamp, _seconds_in_day());\n', '\n', '        uint256 timeStampFrom = SafeMath.sub(timeStamp, secondInDay);\n', '        uint256 timeStampTo = SafeMath.add(timeStampFrom, _seconds_in_day());\n', '        uint256 priceFrom = _timeStampToPrice[timeStampFrom];\n', '        uint256 priceTo = _timeStampToPrice[timeStampTo];\n', '\n', '        if (secondInDay == 0) {\n', '            return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, priceFrom);\n', '        }\n', '        if (priceTo <= priceFrom) {\n', '            return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, priceTo);\n', '        }\n', '\n', '        uint256 priceRange = priceTo - priceFrom;\n', '        uint256 timeRange = timeStampTo - timeStampFrom;\n', '        uint256 timePassed = timeStamp - timeStampFrom;\n', '        uint256 price = SafeMath.add(SafeMath.div(SafeMath.mul(priceRange, timePassed), timeRange), priceFrom);\n', '        return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, price);\n', '    }\n', '\n', '    /**\n', '     * @dev buy time coin with base currency end price\n', '     */\n', '    function buyForBase(uint256 timeAmount) external returns (bool) {\n', '        uint256 baseAmount = SafeMath.div(timeAmount * currentEndPrice(), 1 ether);\n', '        IERC20(_baseCurrency).transferFrom(msg.sender, _liquidity, baseAmount);\n', '        _mint(msg.sender, timeAmount);\n', '        emit TimeBought(timeAmount, baseAmount, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev sell time coin with base currency current price\n', '     */\n', '    function sellForBase(uint256 timeAmount) external returns (bool) {\n', '        require(maxTimeSellAmount() > timeAmount, "Time amount to sell should be lower than maxTimeSellAmount()");\n', '        uint256 baseAmount = SafeMath.div(timeAmount * currentPrice(), 1 ether);\n', '        IERC20(_baseCurrency).transferFrom(_liquidity, msg.sender, baseAmount);\n', '        _burn(msg.sender, timeAmount);\n', '        emit TimeSold(timeAmount, baseAmount, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev reimburse expense\n', '     */\n', '    function reimburse() onlyOwner external returns (bool) {\n', '        require(_baseLiquidityAmount() > _expense, "Not enough base liquidity amount!");\n', '        IERC20(_baseCurrency).transferFrom(_liquidity, msg.sender, _expense);\n', '        emit Reimbursed(_expense);\n', '        _expense = 0;\n', '        return true;\n', '    }\n', '\n', '    function expenseAmount() view external returns (uint256) {\n', '        return _expense;\n', '    }\n', '\n', '    /**\n', '     * @dev run proof of lapse process using interest gained and amount of released coin (excluding owned by time itself)\n', '     */\n', '    function proofOfLapse(uint256 capitalGain, uint256 releasedCoins, uint256 newTimeStamp, uint256 expense) onlyOwner external returns (bool) {\n', '        require(SafeMath.mod(newTimeStamp, _seconds_in_day()) == 0, "TimeStamp should be divisible by 86400!");\n', '        uint256 previousPrice = historicalPrice(SafeMath.sub(newTimeStamp, _seconds_in_day()));\n', '        uint256 newPrice = SafeMath.add(previousPrice, SafeMath.div(SafeMath.mul(SafeMath.sub(SafeMath.sub(capitalGain, expense), _expense), 1 ether), releasedCoins));\n', '        return proofOfLapse(newPrice, newTimeStamp, expense);\n', '    }\n', '\n', '    /**\n', '     * @dev run proof of lapse process using new end price\n', '     */\n', '    function proofOfLapse(uint256 newPrice, uint256 newTimeStamp, uint256 expense) onlyOwner public returns (bool) {\n', '        require(SafeMath.mod(newTimeStamp, _seconds_in_day()) == 0, "TimeStamp should be divisible by 86400!");\n', '        _expense = SafeMath.add(_expense, expense);\n', '        _timeStampToPrice[newTimeStamp] = newPrice;\n', '        if (newTimeStamp < _minTimeStamp) {\n', '            _minTimeStamp = newTimeStamp;\n', '        }\n', '        if (_maxTimeStamp < newTimeStamp) {\n', '            _maxTimeStamp = newTimeStamp;\n', '        }\n', '        emit LapseProved(newPrice, newTimeStamp, expense);\n', '        return true;\n', '    }\n', '}']