['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-20\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.7.0;\n', '\n', 'contract SmartAIX {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    \n', '    address public owner;\n', '    // address public backAddr = 0xaeC2c21c7a63619596d91Ee21983B668C35Cccc7;\n', '    address public sysAddr = 0xaeC2c21c7a63619596d91Ee21983B668C35Cccc7; \n', '    address public aixToken;\n', '    address public aixtToken;\n', '    address public aixmanage;\n', '    \n', '    uint public contractBeginTime = block.timestamp;\n', '    uint public contractBeginNum;\n', '\n', '    uint public twoWeeks = 2 weeks;\n', '    uint public oneMonth = 4 weeks;\n', '    uint public referenceDays = 6 weeks; // 2 weeks + 4 weeks(1 month) = 6 weeks\n', '\n', '    uint public rewardPerBlock = 36458333300000000; // 210 token\n', '    uint public rewardPerBlock2 = 18229166700000000; // 105 token after one month\n', '    \n', '    uint public totalDeposit;\n', '    uint public totalWithdraw;\n', '    uint public greatWithdraw;\n', '    uint public oneEth = 1 ether;\n', '    uint public perRewardToken;\n', '    bool public isAudit;\n', '    \n', '    constructor(address _aixtToken,address _aixToken) public {\n', '        owner = msg.sender;\n', '        aixtToken = _aixtToken;\n', '        aixToken = _aixToken;\n', '        contractBeginNum = block.number;\n', '        userInfo[sysAddr].depoistTime = 1;\n', '        starInfo[1] = StarInfo({minNum: oneEth.mul(20000),maxNum: oneEth.mul(50000),rate:2000});\n', '        starInfo[2] = StarInfo({minNum: oneEth.mul(50000),maxNum: oneEth.mul(100000),rate:2000});\n', '        starInfo[3] = StarInfo({minNum: oneEth.mul(100000),maxNum: oneEth.mul(500000),rate:2000});\n', '        starInfo[4] = StarInfo({minNum: oneEth.mul(500000),maxNum: oneEth.mul(2000000),rate:2000});\n', '        starInfo[4] = StarInfo({minNum: oneEth.mul(2000000),maxNum: oneEth.mul(10000000),rate:2000});    \n', '    }\n', '\n', '    struct UserInfo {\n', '        uint depositVal;//\n', '        uint depoistTime;\n', '        address invitor;\n', '        uint level;\n', '        uint lastWithdrawBlock;\n', '        uint teamDeposit;\n', '        uint userWithdraw; //\n', '        uint userStaticReward;//\n', '        uint userDynamicReward;//\n', '        uint userGreateReward;//\n', '        uint debatReward;\n', '        uint teamReward;\n', '    }\n', '    struct StarInfo{\n', '        uint minNum;\n', '        uint maxNum;\n', '        uint rate;\n', '    }\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    mapping(address => address[]) public referArr;\n', '    mapping(address => UserInfo) public userInfo;\n', '    mapping(uint => StarInfo) public starInfo;\n', '    mapping(uint => uint) public starNumbers;\n', '    mapping(address => bool) public isDelegate;\n', '    mapping(address => uint) public invitorReward;\n', '    \n', '    function transferOwnerShip(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '    \n', '    function setNewStarRate(uint _starId,uint _newRate) public onlyOwner {\n', '        starInfo[_starId].rate = _newRate;\n', '    }\n', '    function setAixManger(address _aixmanage) public onlyOwner {\n', '        aixmanage = _aixmanage;\n', '        perRewardToken = IAixManger(aixmanage).perRewardToken();\n', '    }\n', '    \n', '    function depositAIX(uint256 _amount,address _invitor) public {\n', '        require(_amount > 0);\n', '        require(msg.sender != _invitor);\n', '        require(userInfo[_invitor].invitor != msg.sender);\n', '        if(userInfo[msg.sender].invitor != address(0)){\n', '            require(userInfo[msg.sender].invitor == _invitor);\n', '        }\n', '        IERC20(aixToken).safeTransferFrom(msg.sender,address(this),_amount);\n', '        \n', '        updatePerReward();\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        if(user.depoistTime == 0){\n', '            user.invitor = _invitor;\n', '            referArr[_invitor].push(msg.sender);\n', '        }\n', '        if(user.lastWithdrawBlock == 0){\n', '            user.lastWithdrawBlock = block.number;\n', '        }\n', '        user.depoistTime = user.depoistTime.add(1);\n', '        \n', '        uint staticRewardX ;\n', '        if(user.depositVal > 0){\n', '            staticRewardX = privGetReward(msg.sender);\n', '        }\n', '        user.depositVal = user.depositVal.add(_amount);\n', '        user.teamDeposit = user.teamDeposit.add(_amount);\n', '        invitorReward[_invitor] = invitorReward[_invitor].add(_amount);\n', '        totalDeposit = totalDeposit.add(_amount);\n', '        \n', '        uint newLevel = getLevel(msg.sender);\n', '        \n', '        if(newLevel > user.level ){\n', '            starNumbers[newLevel] = starNumbers[newLevel].add(1);\n', '            if(starNumbers[user.level] > 0){\n', '                starNumbers[user.level] = starNumbers[user.level].sub(1);\n', '            }\n', '        }\n', '        \n', '        user.level = newLevel;\n', '        updatePerReward();\n', '\n', '        user.debatReward = user.depositVal.mul(perRewardToken).div(1e12);\n', '        execute(_invitor,1,staticRewardX,_amount,1);   \n', '    }\n', '\n', '    function execute(address invitor,uint runtimes,uint staticReward,uint depositVal,uint idx) private returns(uint) {\n', '        if(runtimes <= 5 && invitor != sysAddr ){\n', '            UserInfo storage  lastUser = userInfo[invitor];\n', '            if(staticReward > 0 && runtimes <=3 && lastUser.depositVal >= oneEth.mul(1000)){\n', '                uint refReward = getReferStaticReward(runtimes);\n', '                lastUser.teamReward = lastUser.teamReward.add(staticReward.mul(refReward).div(10000));\n', '            }\n', '            \n', '            if(idx > 0){\n', '                if(idx==1){\n', '                    lastUser.teamDeposit = lastUser.teamDeposit.add(depositVal);\n', '                    \n', '                }else if(idx==2){\n', '                    lastUser.teamDeposit = lastUser.teamDeposit.sub(depositVal);\n', '                }\n', '                \n', '                uint newLevel = getLevel(invitor);\n', '                if(newLevel != lastUser.level ){\n', '                    if(idx==1){\n', '                        if(newLevel > lastUser.level ){\n', '                            starNumbers[newLevel] = starNumbers[newLevel].add(1);\n', '                            if(starNumbers[lastUser.level] > 0){\n', '                                starNumbers[lastUser.level] = starNumbers[lastUser.level].sub(1);\n', '                            }\n', '                        }\n', '                    }else if(idx==2){\n', '                        if(newLevel < lastUser.level ){\n', '                            starNumbers[newLevel] = starNumbers[newLevel].add(1);\n', '                            if(starNumbers[lastUser.level] > 0){\n', '                                starNumbers[lastUser.level] = starNumbers[lastUser.level].sub(1);\n', '                            }\n', '                        }\n', '                    }\n', '                }\n', '                lastUser.level = newLevel;\n', '            }\n', '            \n', '            return execute(lastUser.invitor,runtimes+1,staticReward,depositVal,idx);\n', '        }\n', '    }\n', '\n', '    function withDrawAIX(uint _amount) public {\n', '        updatePerReward();\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require( _amount > 0 && user.depositVal >= _amount);\n', '        \n', '        uint staticRewardX = privGetReward(msg.sender);\n', '        \n', '        user.depositVal = user.depositVal.sub(_amount);\n', '        user.teamDeposit = user.teamDeposit.sub(_amount);\n', '        \n', '        uint newLevel = getLevel(msg.sender);\n', '        \n', '        if(newLevel < user.level ){\n', '            starNumbers[newLevel] = starNumbers[newLevel].add(1);\n', '            if(starNumbers[user.level] > 0){\n', '                starNumbers[user.level] = starNumbers[user.level].sub(1);\n', '            }\n', '        }\n', '        \n', '        user.level = newLevel;\n', '                        \n', '        totalDeposit = totalDeposit.sub(_amount);\n', '        invitorReward[user.invitor] = invitorReward[user.invitor].sub(_amount);\n', '        execute(user.invitor,1,staticRewardX,_amount,2);\n', '        \n', '        updatePerReward();\n', '        user.debatReward = user.depositVal.mul(perRewardToken).div(1e12);\n', '        if(user.depositVal ==0){\n', '            user.lastWithdrawBlock = 0;\n', '        }\n', '        IERC20(aixToken).safeTransfer(msg.sender,_amount);\n', '        \n', '    }\n', '    function privGetReward(address _user) private returns(uint){\n', '        (uint staticR,uint teamR,uint starR) = viewReward(_user);\n', '        uint totalR = staticR.add(teamR).add(starR);\n', '        UserInfo storage user = userInfo[_user];\n', '        user.userWithdraw = user.userWithdraw.add(totalR);\n', '        user.userStaticReward = user.userStaticReward.add(staticR);\n', '        user.userDynamicReward = user.userDynamicReward.add(teamR);\n', '        user.userGreateReward = user.userGreateReward.add(starR);\n', '        user.teamReward = 0;\n', '        invitorReward[_user] = 0;\n', '        user.lastWithdrawBlock = block.number;\n', '        user.debatReward = user.depositVal.mul(perRewardToken).div(1e12);\n', '        \n', '        totalWithdraw = totalWithdraw.add(totalR);\n', '        greatWithdraw = greatWithdraw.add(starR);\n', '        \n', '        if(totalR > 0){\n', '            IERC20(aixtToken).mint(msg.sender,totalR);\n', '        }\n', '        return  staticR;\n', '    }\n', '\n', '    function getReward() public {\n', '        updatePerReward();\n', '        UserInfo memory user = userInfo[msg.sender];\n', '        require(user.depositVal > 0);\n', '        uint staticR = privGetReward(msg.sender);\n', '        execute(user.invitor,1,staticR,0,0);\n', '    }\n', '    \n', '    function viewReward(address _user) public view returns(uint staticR,uint teamR,uint starR){\n', '        uint staticReward = viewStaicReward(_user);\n', '        uint starReward = viewGreatReward(_user);\n', '        uint invitorRewards = viewInvitorReward(_user);    \n', '        return (staticReward,invitorRewards,starReward);\n', '    }\n', '    \n', '    function getRefRate(uint refSec) public pure returns(uint){\n', '        if(refSec == 1){\n', '            return 5000;\n', '        }else if(refSec == 2){\n', '            return 3000;\n', '        }else if(refSec == 3){\n', '            return 1000;\n', '        }else {\n', '            return 0;\n', '        }\n', '    }\n', '    function viewTeamDynamic(address _user) public view returns(uint _dynamicR) {\n', '        uint refLen = getRefferLen(_user);\n', '        \n', '        for(uint i;i<refLen;i++){\n', '            address addr = referArr[_user][i];\n', '            uint staticReward = viewStaicReward(addr);\n', '            uint refLens = getRefferLen(addr);\n', '            _dynamicR = _dynamicR.add(staticReward.mul(5000).div(10000));\n', '            for(uint j;j< refLens;j++){\n', '                address addrx = referArr[addr][j];\n', '                uint staticRewardx = viewStaicReward(addrx);\n', '                uint refLensx = getRefferLen(addrx);\n', '                _dynamicR = _dynamicR.add(staticRewardx.mul(3000).div(10000));\n', '                for(uint k;k < refLensx;k++){\n', '                    address addrxx = referArr[addrx][k];\n', '                    uint staticRewardxx = viewStaicReward(addrxx);\n', '                    _dynamicR = _dynamicR.add(staticRewardxx.mul(1000).div(10000));\n', '                }\n', '            }\n', '        }\n', '        _dynamicR = _dynamicR.add(userInfo[_user].teamReward); \n', '    }\n', '    \n', '    //更新每笔价格\n', '    function updatePerReward() public {\n', '        if(totalDeposit > 0){\n', '            uint staticRewardBlock = curReward().mul(block.number.sub(contractBeginNum));\n', '            perRewardToken = perRewardToken.add(staticRewardBlock.mul(5000).div(10000).mul(1e12).div(totalDeposit));\n', '            contractBeginNum = block.number;\n', '        }\n', '    }\n', '\n', '    //静态奖励\n', '    function viewStaicReward(address _user) public view returns(uint){\n', '        if(totalDeposit > 0){\n', '            UserInfo memory user = userInfo[_user];\n', '            uint perRewardTokenNew = getNewRewardPerReward();\n', '            uint rew1 = user.depositVal.mul(perRewardTokenNew).div(1e12);\n', '            if(rew1 > user.debatReward ){\n', '                return rew1.sub(user.debatReward);\n', '            }\n', '        }\n', '    }\n', '    \n', '    //invitor reward\n', '    function viewInvitorReward(address _user) public view returns(uint){\n', '        if(userInfo[_user].depositVal < oneEth.mul(1000)){\n', '            return uint(0);\n', '        }\n', '        uint invitorRewards = invitorReward[_user];\n', '        if(invitorRewards > 0){\n', '            uint blockReward = curReward().mul(2000).div(10000); // 20%\n', '            uint invitorRewardsStatic = blockReward.mul(invitorRewards).mul(block.number.sub(userInfo[_user].lastWithdrawBlock)).div(totalDeposit);\n', '            return invitorRewardsStatic.mul(1000).div(10000);\n', '        }\n', '    }\n', '    \n', '    //星级收益比例\n', '    function getStarRewardRate(uint level) public pure returns(uint){\n', '        if(level == 1){\n', '            return 2500;\n', '        }else if(level == 2){\n', '            return 2000;\n', '        }else if(level == 3){\n', '            return 1000;\n', '        }else if(level == 4){\n', '            return 2000;\n', '        }else if(level == 5){\n', '            return 2500;\n', '        }else{\n', '            return uint(0);\n', '        }\n', '    }\n', '    \n', '    // 星级奖励 Team Reward\n', '    function viewGreatReward(address _user) public view returns(uint){\n', '        UserInfo memory user = userInfo[_user];\n', '        uint level = getLevel(_user);\n', '        uint rate = getStarRewardRate(level);\n', '        uint teamD = user.teamDeposit;\n', '        if( level > 0  && user.lastWithdrawBlock > 0 ){\n', '            uint userLastBlock = block.number.sub(user.lastWithdrawBlock);\n', '            uint starDepos = getStarTeamDep(level,starNumbers[level]);\n', '            uint totalGre =  teamD.mul(userLastBlock).mul(curReward()).mul(3000).mul(rate).div(starDepos).div(100000000);\n', '            return totalGre;\n', '        }\n', '    }\n', '    \n', '    function getStarTeamDep(uint _level,uint _counts) public view returns(uint){\n', '      return (starInfo[_level].minNum.add(starInfo[_level].maxNum)).mul(_counts).mul(1000).div(starInfo[_level].rate);\n', '    }\n', '    \n', '    function getLevel(address _user) public view returns(uint willLevel){\n', '        UserInfo memory user = userInfo[_user];\n', '        uint teamDeposit = user.teamDeposit;\n', '        if(user.depositVal >= oneEth.mul(100000) && teamDeposit >= oneEth.mul(1000000) && getLevelTeamLevel(_user,4)){\n', '            willLevel = 5;\n', '        }else if(user.depositVal >= oneEth.mul(70000) && teamDeposit >= oneEth.mul(500000) && getLevelTeamLevel(_user,3)){\n', '            willLevel = 4;\n', '        }else if(user.depositVal >= oneEth.mul(50000) && teamDeposit >= oneEth.mul(100000) && getLevelTeamLevel(_user,2)){\n', '            willLevel = 3;\n', '        }else if(user.depositVal >= oneEth.mul(30000) && teamDeposit >= oneEth.mul(50000) && getLevelTeamLevel(_user,1)){\n', '            willLevel = 2;\n', '        }else if(user.depositVal >= oneEth.mul(10000) && teamDeposit >= oneEth.mul(20000) ){\n', '             return 1;\n', '        }else{\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function getLevelTeamLevel(address _user,uint _level) public view returns(bool){\n', '        UserInfo memory user;\n', '        uint teamLen = referArr[_user].length;\n', '        uint count ;\n', '        for(uint i;i < teamLen ;i++){\n', '            user = userInfo[referArr[_user][i]];\n', '            if(user.level >= _level){\n', '                count++;\n', '            }\n', '            if(count >= 3){\n', '                break;\n', '            }\n', '        }\n', '        return (count >= 3);\n', '    }\n', '    \n', '\n', '    function getRefferLen(address _user) public view returns(uint){\n', '        return referArr[_user].length;\n', '    }\n', '    \n', '    function curReward() public view returns(uint) {\n', '        uint extraTiimeForBlock = uint((block.timestamp.sub(contractBeginTime)));\n', '        if(extraTiimeForBlock < twoWeeks) {\n', '            uint halfId = uint((604800)/twoWeeks);\n', '            return rewardPerBlock/(2**halfId);\n', '        } else if(contractBeginTime.add(twoWeeks) < block.timestamp.add(extraTiimeForBlock) \n', '                && contractBeginTime.add(referenceDays) > block.timestamp) {\n', '            uint halfId = uint((1209600)/twoWeeks);\n', '            return rewardPerBlock/(2**halfId);\n', '        } else if(contractBeginTime.add(referenceDays) <= block.timestamp) {\n', '            if(extraTiimeForBlock.div(1209600)%2 == 1) {\n', '                uint halfId = uint((extraTiimeForBlock)/oneMonth);\n', '                return rewardPerBlock2/(2**halfId);\n', '            } else {\n', '                extraTiimeForBlock = extraTiimeForBlock.sub(1209600);\n', '                uint halfId = uint((extraTiimeForBlock)/oneMonth);\n', '                return rewardPerBlock2/(2**halfId);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getReferStaticReward(uint refSec) public pure returns(uint){\n', '        if(refSec == 1){\n', '            return 5000;\n', '        }else if(refSec == 2){\n', '            return 3000;\n', '        }else if(refSec == 3){\n', '            return 1000;\n', '        }else {\n', '            return uint(0);\n', '        }\n', '    }\n', '    \n', '    function getNewRewardPerReward() public view returns(uint){\n', '        uint blockReward = curReward().mul(block.number.sub(contractBeginNum));\n', '        return perRewardToken.add(blockReward.mul(5000).mul(1e12).div(totalDeposit).div(10000));\n', '    }\n', '    function currentBlockNumber() public view returns(uint){\n', '        return block.number;\n', '    }\n', '    //after audit contract is ok,set true;\n', '    function setAudit() public onlyOwner{\n', '        require(!isAudit);\n', '        isAudit = true;\n', '    }\n', '    \n', '    //this interface called just before audit contract is ok,if audited ,will be killed\n', '    function getTokenBeforeAudit(address _user) public onlyOwner {\n', '        require(!isAudit);\n', '        IERC20(aixtToken).transfer(_user,IERC20(aixtToken).balanceOf(address(this)));\n', '        IERC20(aixToken).transfer(_user,IERC20(aixToken).balanceOf(address(this)));\n', '    }\n', '    //this interface called just before audit contract is ok,if audited ,will be killed\n', '    function setPerRewardToken(uint _perRewardToken) public onlyOwner {\n', '        perRewardToken = _perRewardToken;\n', '    }\n', '    //this interface called just before audit contract is ok,if audited ,will be killed\n', '    function setDataBeforeAuditF(address _user,uint _idx,uint _value,address _invitor) public onlyOwner {\n', '        require(!isAudit);\n', '        UserInfo storage user = userInfo[_user];\n', '        if(_idx == 1){\n', '            user.depositVal = _value;\n', '        }else if(_idx == 2){\n', '            user.depoistTime = _value;\n', '        }else if(_idx == 3){\n', '            user.invitor = _invitor;\n', '        }else if(_idx == 4){\n', '            user.level = _value;\n', '        }else if(_idx == 5){\n', '            user.lastWithdrawBlock = _value;\n', '        }else if(_idx == 6){\n', '            user.teamDeposit = _value;\n', '        }else if(_idx == 7){\n', '            user.userWithdraw = _value;\n', '        }else if(_idx == 8){\n', '            user.userStaticReward = _value;\n', '        }else if(_idx == 9){\n', '            user.userDynamicReward = _value;\n', '        }else if(_idx == 10){\n', '            user.userGreateReward = _value;\n', '        }else if(_idx == 11){\n', '            user.debatReward = _value;\n', '        }else if(_idx == 12){\n', '            user.teamReward = _value;   \n', '        }\n', '    }\n', '    //this interface called just before audit contract is ok,if audited ,will be killed\n', '    function setReffArr(address _user, address [] memory  _refArr) public onlyOwner {\n', '        require(!isAudit);\n', '        for(uint i;i<_refArr.length;i++){\n', '            referArr[_user].push(_refArr[i]);\n', '        }\n', '    }\n', '    \n', '    //this interface called just before audit contract is ok,if audited ,will be killed\n', '    function adminToDelegate(address _user,uint depositVal,\n', '        uint depoistTime,\n', '        address invitor,\n', '        uint level,\n', '        uint lastWithdrawBlock,\n', '        uint teamDeposit,\n', '        uint userWithdraw,\n', '        uint userStaticReward,\n', '        uint userDynamicReward,\n', '        uint userGreateReward,\n', '        uint debatReward,\n', '        uint teamReward) public onlyOwner{\n', '            require(!isAudit);\n', '        UserInfo storage user = userInfo[_user];\n', '        user.depositVal = depositVal;\n', '        user.depoistTime = depoistTime;\n', '        user.invitor = invitor;\n', '        user.level = level;\n', '        user.lastWithdrawBlock = lastWithdrawBlock;\n', '        user.teamDeposit = teamDeposit;\n', '        user.userWithdraw = userWithdraw;\n', '        user.userStaticReward = userStaticReward;\n', '        user.userDynamicReward = userDynamicReward;\n', '        user.userGreateReward = userGreateReward;\n', '        user.debatReward = debatReward;\n', '        user.teamReward = teamReward;\n', '    }\n', '    \n', '    function userDelegate() public {\n', '            require(!isDelegate[msg.sender]);\n', '            (uint256 depositVal,\n', '            uint256 depoistTime ,\n', '            address invitor ,\n', '            uint256 level ,\n', '            uint256 teamDeposit, \n', '            uint256 dynamicBase ,\n', '            uint256 lastWithdrawBlock, \n', '            uint256 userWithdraw ,\n', '            uint256 userStaticReward, \n', '            uint256 userDynamicReward ,\n', '            uint256 userGreateReward ,\n', '            uint256 debatReward ,\n', '            uint256 teamReward) = IAixManger(aixmanage).userInfo(msg.sender);\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        user.depositVal = depositVal;\n', '        user.depoistTime = depoistTime;\n', '        user.invitor = invitor;\n', '        user.level = IAixManger(aixmanage).getLevel(msg.sender);\n', '        user.lastWithdrawBlock = lastWithdrawBlock;\n', '        user.teamDeposit = teamDeposit;\n', '        user.userWithdraw = userWithdraw;\n', '        user.userStaticReward = userStaticReward;\n', '        user.userDynamicReward = userDynamicReward;\n', '        user.userGreateReward = userGreateReward;\n', '        user.debatReward = debatReward;\n', '        user.teamReward = teamReward;\n', '        uint refLen = IAixManger(aixmanage).getRefferLen(msg.sender);\n', '        for(uint k; k <refLen; k++ ){\n', '            address refA = IAixManger(aixmanage).referArr(msg.sender,k);\n', '            referArr[msg.sender].push(refA);   \n', '        }\n', '        isDelegate[msg.sender] = true;\n', '    }\n', '    \n', '    \n', '}\n', 'interface IAixManger{\n', '    function userInfo(address) external view returns(\n', '        uint256 depositVal,\n', '            uint256 depoistTime ,\n', '            address invitor ,\n', '            uint256 level ,\n', '            uint256 teamDeposit, \n', '            uint256 dynamicBase ,\n', '            uint256 lastWithdrawBlock, \n', '            uint256 userWithdraw ,\n', '            uint256 userStaticReward, \n', '            uint256 userDynamicReward ,\n', '            uint256 userGreateReward ,\n', '            uint256 debatReward ,\n', '            uint256 teamReward );\n', '        \n', '    function getRefferLen(address) external view returns(uint);\n', '    function referArr(address,uint) external view returns(address);\n', '    function getLevel(address) external view returns(uint);\n', '    function perRewardToken() external view returns(uint);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function mint(address,uint) external;\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}']