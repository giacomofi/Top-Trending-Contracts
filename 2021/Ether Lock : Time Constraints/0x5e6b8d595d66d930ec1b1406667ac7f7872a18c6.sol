['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-13\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract Lock {\n', '\n', '    address public immutable token;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => uint256) public lockStart;\n', '    mapping(address => uint256) public lockEnd;\n', '\n', '    constructor(address _token) {\n', '        require(_token != address(0), "token address is zero");\n', '        token = _token;\n', '    }\n', '\n', '    function totalLocked() public view returns (uint256) {\n', '        (bool _success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\n', '        (uint amount) = abi.decode(data, (uint));\n', '        return amount;\n', '    }\n', '\n', '    // transfer ERC from msg.sender to contract with locked:\n', '    function lock(address _lockTo, uint256 _amount, uint32 _startAfterDays, uint32 _lockDays) public returns (bool) {\n', '        require(_lockTo != address(0), "address is zero");\n', '        require(_amount > 0, "amount <= 0");\n', '        require(_startAfterDays >= 0 && _startAfterDays <= 365, "start lock days < 0 or > 1y");\n', '        require(_lockDays >= 1 && _lockDays <= 3650, "lock days < 1d or > 10y");\n', '\n', '        require(lockStart[_lockTo] == 0, "cannot re-lock");\n', '        require(lockEnd[_lockTo] == 0, "cannot re-lock");\n', '        require(balances[_lockTo] == 0, "cannot re-lock");\n', '\n', '        uint256 start = block.timestamp + 3600 * 24 * _startAfterDays;\n', '        uint256 end = start + 3600 * 24 * _lockDays;\n', '        lockStart[_lockTo] = start;\n', '        lockEnd[_lockTo] = end;\n', '        balances[_lockTo] = _amount;\n', '        safeTransferFrom(msg.sender, address(this), _amount);\n', '        return true;\n', '    }\n', '\n', '    function unlockable(address _address) public view returns (uint256) {\n', '        uint256 total = balances[_address];\n', '        if (total == 0) {\n', '            return 0;\n', '        }\n', '        uint256 start = lockStart[_address];\n', '        if (block.timestamp <= start) {\n', '            return 0;\n', '        }\n', '        uint256 end = lockEnd[_address];\n', '        if (block.timestamp < end) {\n', '            return total * (block.timestamp - start) / (end - start);\n', '        } else {\n', '            return total;\n', '        }\n', '    }\n', '\n', '    // transfer locked ERC to msg.sender if unlock ok:\n', '    function unlock() public returns (bool) {\n', '        uint256 start = lockStart[msg.sender];\n', '        require(start > 0, "lock not found");\n', '        require(start < block.timestamp, "still in lock");\n', '\n', '        uint256 total = balances[msg.sender];\n', '        uint256 canWithdraw = unlockable(msg.sender);\n', '        if (canWithdraw == 0) {\n', '            return false;\n', '        }\n', '        safeTransfer(msg.sender, canWithdraw);\n', '        balances[msg.sender] = total - canWithdraw;\n', '\n', '        if (total == canWithdraw) {\n', '            lockStart[msg.sender] = 0;\n', '            lockEnd[msg.sender] = 0;\n', '        } else {\n', '            lockStart[msg.sender] = block.timestamp;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function safeTransfer(\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) =\n', '            token.call(abi.encodeWithSelector(0xa9059cbb, _to, _value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper: TRANSFER_FAILED'\n", '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) =\n', '            token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper: TRANSFER_FROM_FAILED'\n", '        );\n', '    }\n', '}']