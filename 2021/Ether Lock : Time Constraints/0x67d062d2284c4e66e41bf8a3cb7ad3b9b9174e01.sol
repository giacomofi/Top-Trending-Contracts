['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// every part under MIT license\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\utils\\Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\access\\Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/* =========================================================================================================== */\n', '/* =========================================================================================================== */\n', '/* =========================================================================================================== */\n', '\n', '// File: contracts\\RentibleStaking.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// 0.6.12+commit.27d51765\n', '\n', '// LP token (ERC20 reward) based staking for Rentible\n', '// \n', '// See: \n', '// https://rentible.io/ \n', '// https://staking.rentible.io/ \n', '// \n', '// Inspired by:\n', '// https://github.com/SashimiProject/sashimiswap/blob/master/contracts/MasterChef.sol\n', '// https://github.com/ltonetwork\n', '\n', 'contract RentibleStaking is Ownable { \n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- main variables ------------------------------------------------ */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    // when staking starts, unix time\n', '    uint256 public immutable startTime;\n', '    // when staking ends, unix time\n', '    uint256 public immutable endTime;\n', '\n', '    // ------\n', '\n', '    // Uniswap V2 liquidity token (the staked token)\n', '    IERC20 public immutable lpToken; \n', '\n', '    // Rentible ERC20 token (in our case RNB, as reward)\n', '    IERC20 public immutable erc20;\n', '\n', '    // ------\n', '\n', '    // NOTE: in the last changes we made 4 real days into one "contract" day!\n', '    // in sec\n', '    uint256 public immutable dayLength;\n', '\n', '    // in sec\n', '    uint256 public immutable stakingProgramTimeLength;\n', '\n', '    // ------\n', '\n', '    // NOTE (!!!): if you modify the array size, please modify max in getCurrentStakingDayNumber() and updateDailyTotalLptAmount() too (to array size - 1)\n', '\n', '    // NOTE: in the last changes we made 4 real days into one "contract" day!\n', '    // how many liquidity tokens were in the staking (per day) (add/subtract happens upon deposit, withdraw) (every user combined)\n', '    uint256[93] public dailyTotalLptAmount;\n', '\n', '    // liquidity tokens in the staking as of now (every user combined) (add/subtract happens upon deposit, withdraw) (every user combined)\n', '    uint256 public currentTotalLptAmount;\n', '\n', '    // ------\n', '\n', '    // NOTE (!!!): if you modify the array size, please modify max in getCurrentStakingDayNumber() and updateDailyTotalLptAmount() too (to array size - 1)\n', '\n', '    // NOTE: in the last changes we made 4 real days into one "contract" day!\n', '\n', '    // total reward, has to equal the sum of the dailyPlannedErc20RewardAmounts (payed out rewards are not subtracted from this)\n', '    uint256 public immutable totalErc20RewardAmount;\n', '\n', '    // total reward per "contract" day, planned (practically treated as fixed/immutable, payed out rewards are not subtracted from this))\n', '    // has to be equal to totalErc20RewardAmount (and after full reward funding equal to fundedErc20RewardAmount)\n', '    // note: there is a starting 0 and a closing 0\n', '    uint256[93] public dailyPlannedErc20RewardAmounts = [0, 5753337571515390000000, 5710955710955710000000, 5668573850392040000000, 5626191989828360000000, 5583810129264680000000, 5541428268701000000000, 5499046408137330000000, 5456664547573650000000, 5414282687009970000000, 5371900826446290000000, 5329518965882620000000, 5287137105318940000000, 5244755244755260000000, 5202373384191580000000, 5159991523627910000000, 5117609663064230000000, 5075227802500550000000, 5032845941936870000000, 4990464081373200000000, 4948082220809520000000, 4905700360245840000000, 4863318499682160000000, 4820936639118490000000, 4778554778554810000000, 4736172917991130000000, 4693791057427450000000, 4651409196863780000000, 4609027336300100000000, 4566645475736420000000, 4524263615172740000000, 4481881754609070000000, 4439499894045390000000, 4397118033481710000000, 4354736172918030000000, 4312354312354360000000, 4269972451790680000000, 4227590591227000000000, 4185208730663320000000, 4142826870099650000000, 4100445009535970000000, 4058063148972290000000, 4015681288408610000000, 3973299427844940000000, 3930917567281260000000, 3888535706717580000000, 3846153846153900000000, 3803771985590230000000, 3761390125026550000000, 3719008264462870000000, 3676626403899190000000, 3634244543335510000000, 3591862682771830000000, 3549480822208150000000, 3507098961644470000000, 3464717101080790000000, 3422335240517110000000, 3379953379953430000000, 3337571519389750000000, 3295189658826080000000, 3252807798262400000000, 3210425937698720000000, 3168044077135040000000, 3125662216571360000000, 3083280356007680000000, 3040898495444000000000, 2998516634880320000000, 2956134774316640000000, 2913752913752960000000, 2871371053189280000000, 2828989192625600000000, 2786607332061920000000, 2744225471498250000000, 2701843610934570000000, 2659461750370890000000, 2617079889807210000000, 2574698029243530000000, 2532316168679850000000, 2489934308116170000000, 2447552447552490000000, 2405170586988810000000, 2362788726425130000000, 2320406865861450000000, 2278025005297770000000, 2235643144734100000000, 2193261284170420000000, 2150879423606740000000, 2108497563043060000000, 2066115702479380000000, 2023733841915700000000, 1981351981352020000000, 1938970120788340000000, 0];\n', '\n', '    // total reward funded (so far) (payed out rewards are not subtracted from this), \n', '    // eventually (after funding) has to be equal to totalErc20RewardAmount\n', '    uint256 public fundedErc20RewardAmount = 0;\n', '\n', '    // total reward, at start the same as dailyPlannedErc20RewardAmounts, \n', '    // daily counter, \n', '    // not yet tied to any UserInfo object, \n', '    // subtractions happen when reward is assigned to a UserInfo object\n', '    // (rewards are always payed out through UserInfo object, not directly from here!)\n', '    // note: there is a starting 0 and a closing 0\n', '    uint256[93] public dailyErc20RewardAmounts =        [0, 5753337571515390000000, 5710955710955710000000, 5668573850392040000000, 5626191989828360000000, 5583810129264680000000, 5541428268701000000000, 5499046408137330000000, 5456664547573650000000, 5414282687009970000000, 5371900826446290000000, 5329518965882620000000, 5287137105318940000000, 5244755244755260000000, 5202373384191580000000, 5159991523627910000000, 5117609663064230000000, 5075227802500550000000, 5032845941936870000000, 4990464081373200000000, 4948082220809520000000, 4905700360245840000000, 4863318499682160000000, 4820936639118490000000, 4778554778554810000000, 4736172917991130000000, 4693791057427450000000, 4651409196863780000000, 4609027336300100000000, 4566645475736420000000, 4524263615172740000000, 4481881754609070000000, 4439499894045390000000, 4397118033481710000000, 4354736172918030000000, 4312354312354360000000, 4269972451790680000000, 4227590591227000000000, 4185208730663320000000, 4142826870099650000000, 4100445009535970000000, 4058063148972290000000, 4015681288408610000000, 3973299427844940000000, 3930917567281260000000, 3888535706717580000000, 3846153846153900000000, 3803771985590230000000, 3761390125026550000000, 3719008264462870000000, 3676626403899190000000, 3634244543335510000000, 3591862682771830000000, 3549480822208150000000, 3507098961644470000000, 3464717101080790000000, 3422335240517110000000, 3379953379953430000000, 3337571519389750000000, 3295189658826080000000, 3252807798262400000000, 3210425937698720000000, 3168044077135040000000, 3125662216571360000000, 3083280356007680000000, 3040898495444000000000, 2998516634880320000000, 2956134774316640000000, 2913752913752960000000, 2871371053189280000000, 2828989192625600000000, 2786607332061920000000, 2744225471498250000000, 2701843610934570000000, 2659461750370890000000, 2617079889807210000000, 2574698029243530000000, 2532316168679850000000, 2489934308116170000000, 2447552447552490000000, 2405170586988810000000, 2362788726425130000000, 2320406865861450000000, 2278025005297770000000, 2235643144734100000000, 2193261284170420000000, 2150879423606740000000, 2108497563043060000000, 2066115702479380000000, 2023733841915700000000, 1981351981352020000000, 1938970120788340000000, 0];\n', '\n', '    // has to be equal to the sum of the dailyErc20RewardAmounts array, payed out rewards are subtracted from this, this is the remaing unassigned reward, not tied to any UserInfo object\n', '    uint256 public currentTotalErc20RewardAmount = 0;\n', '\n', '    // ------\n', '\n', '    // info of each user (depositor)\n', '    struct UserInfo {\n', '\n', '        // NOTE: in the last changes we made 4 real days into one "contract" day!\n', '\n', '        uint256 currentlyAssignedRewardAmount; // reward (ERC20 Rentible token) amount, that was already clearly assigned to this UserInfo object (meaning subtracted from dailyErc20RewardAmounts and currentTotalErc20RewardAmount)\n', '        uint256 rewardCountedUptoDay; // the "contract" day (stakingDayNumber) up to which currentlyAssignedRewardAmount was already handled\n', '\n', '        uint256 lptAmount;\n', '    }\n', '\n', '    // user (UserInfo) mapping\n', '    mapping (address => UserInfo) public userInfo;\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- events --------------------------------------------------------- */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    event Deposit(address indexed user, uint256 depositedLptAmount);\n', ' \n', '    event WithdrawLptCore(address indexed user, uint256 withdrawnLptAmount);\n', '    event TakeOutSomeOfTheAccumulatedReward(address indexed user, uint256 rewardAmountTakenOut);\n', '\n', '    event Fund(address indexed ownerUser, uint256 addedErc20Amount);\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- constructor ---------------------------------------------------- */\n', '    /* -------------------------------------------------------------------- */\n', '    \n', '    // https://abi.hashex.org/#\n', '    // 0000000000000000000000005af3176021e2450850377d4b166364e5c52ae82f000000000000000000000000e764f66e9e165cd29116826b84e943176ac8e91c0000000000000000000000000000000000000000000000000000000000000000\n', '\n', '    // _startTime = 0: means start instantly upon deploy\n', '    constructor(IERC20 _erc20, IERC20 _lpToken, uint256 _startTime) public {\n', '       \n', '        require(_startTime == 0 || _startTime > 1621041111, "constructor: _startTime is too small");\n', '          \n', '        // ---\n', '\n', '        erc20 = _erc20; // RNB (for rewards)\n', '        lpToken = _lpToken; // RNB/ETH Uni V2 (the staked token)\n', '\n', '        // ---\n', '\n', '        // NOTE: in the last changes we made 4 real days into one contract day\n', '        // variables were parameterized already (for testing etc.) and were not renamed\n', '\n', '        uint256 dayLengthT = 345600; // 86400 sec = one day, 345600 sec = 4 days\n', '        // uint256 dayLengthT = 600; // scaled down, for testing, ratio 10 minutes = 4 day\n', '\n', '        dayLength = dayLengthT; // this way it can be immutable\n', '        \n', '        // ---\n', '\n', '        uint256 startTimeT;\n', '       \n', '        if (_startTime > 0) {\n', '            startTimeT = _startTime;\n', '        } else {\n', '            startTimeT = block.timestamp; // default is current time\n', '        }\n', '        \n', '        startTime = SafeMath.sub(startTimeT, dayLengthT); // this way it can be immutable, we subtract 1 day to skip day 0\n', '\n', '        // ---\n', '\n', '        // NOTE: in the last changes we made 4 real days into one "contract" day\n', '        // 364 real days = 91 contract days = staking program length\n', '\n', '        uint256 stakingProgramTimeLengthT = SafeMath.mul(dayLengthT, 91);\n', '\n', '        stakingProgramTimeLength = stakingProgramTimeLengthT; // this way it can be immutable\n', '\n', '        // ---\n', '\n', '        uint256 endTimeT = SafeMath.add(startTimeT, stakingProgramTimeLengthT); \n', '\n', '        endTime = endTimeT; // this way it can be immutable\n', '        \n', '        // ---\n', '\n', '        uint256 totalErc20RewardAmountT = 350000000000000000000000; // 350000 RNB\n', '\n', '        totalErc20RewardAmount = totalErc20RewardAmountT; // this way it can be immutable\n', '             \n', '    }\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- basic write operations for the depositors ---------------------- */\n', '    /* -------------------------------------------------------------------- */\n', '    \n', '    // Deposit LP tokens (by the users/investors/depositors)\n', '    function deposit(uint256 _depositLptAmount) public {\n', '\n', '        require(_depositLptAmount > 0, "deposit: _depositLptAmount must be positive");\n', '\n', '        require(block.timestamp >= startTime, "deposit: cannot deposit yet, current time is before startTime");\n', '        require(block.timestamp < endTime, "deposit: cannot deposit anymore, current time is after endTime");\n', '\n', '        // require(fundedErc20RewardAmount == totalErc20RewardAmount, "deposit: please wait until owner funds the rewards");\n', '\n', '        // ---\n', '        \n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        addToTheUsersAssignedReward();\n', '        \n', '        // ---\n', '\n', '        user.lptAmount = SafeMath.add(user.lptAmount, _depositLptAmount);\n', '        lpToken.safeTransferFrom(msg.sender, address(this), _depositLptAmount);\n', '\n', '        currentTotalLptAmount = SafeMath.add(currentTotalLptAmount, _depositLptAmount);\n', '        updateDailyTotalLptAmount();\n', '        \n', '        // ---\n', '\n', '        emit Deposit(msg.sender, _depositLptAmount);\n', '\n', '    }\n', '\n', '    function updateDailyTotalLptAmount() private {\n', '        \n', '        // NOTE: in the last changes we made 4 real days into one "contract" day\n', '\n', '        uint256 currentStakingDayNumber = getCurrentStakingDayNumber();\n', '\n', '        for (uint256 i = currentStakingDayNumber; i <= 92; i++) {\n', '            dailyTotalLptAmount[i] = currentTotalLptAmount;\n', '        } \n', '\n', '    }\n', '\n', '    /*\n', '    \n', '    Withdraw variants:\n', '\n', '    1) withdrawLptCore(uint256) = emergency withdraw, user receives the param amount of LPT, does not receive RNB, can unrecoverably loose some reward RNB\n', '    2) withdrawWithoutReward(uint256) = user receives the param amount of LPT, plus the method calculates and updates the reward amount in UserInfo object (but leaves it there)\n', '    3) withdrawAllWithoutReward() = same as 3, amount is fixed/all (user.lptAmount)\n', '    4) takeOutSomeOfTheAccumulatedReward(uint256) = leaves deposited LPT untouched, user receives the param amount of rewards\n', '    5) takeOutTheAccumulatedReward() = same as 4, reward amount is fixed/all (user.currentlyAssignedRewardAmount, it gets refreshed/recalculated before take out)\n', '    6) withdrawWithAllReward(uint256) = method 4, reward amount is fixed/all (user.currentlyAssignedRewardAmount); plus after that method 2\n', '    7) withdrawAllWithAllReward() = method 4, reward amount is fixed/all (user.currentlyAssignedRewardAmount), plus after that method 2, amount is fixed/all (user.lptAmount)\n', '    \n', '    */\n', '\n', '    // 1\n', '    // this works as the inner function of all LP token withdraws, but also on its own as a kind of emergency withdraw\n', '    function withdrawLptCore(uint256 _withdrawLptAmount) public {\n', '\n', '        require(_withdrawLptAmount > 0, "withdrawLptCore: _withdrawLptAmount must be positive");\n', '\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require(user.lptAmount >= _withdrawLptAmount, "withdrawLptCore: cannot withdraw more than the deposit, _withdrawLptAmount is too big");\n', '         \n', '        lpToken.safeTransfer(msg.sender, _withdrawLptAmount); // send lpt to the user\n', '        \n', "        user.lptAmount = SafeMath.sub(user.lptAmount, _withdrawLptAmount);  // subtract from the user's lpt\n", '        currentTotalLptAmount = SafeMath.sub(currentTotalLptAmount, _withdrawLptAmount); // subtract from the global counter\n', '\n', '        updateDailyTotalLptAmount(); // update the global daily (array) counters\n', '\n', '        emit WithdrawLptCore(msg.sender, _withdrawLptAmount);\n', '\n', '    }\n', '\n', '    // 2\n', '    function withdrawWithoutReward(uint256 _withdrawLptAmount) public {\n', '        addToTheUsersAssignedReward(); // updates UserInfo object\n', '        withdrawLptCore(_withdrawLptAmount);\n', '    }\n', '\n', '    // 3\n', '    function withdrawAllWithoutReward() public {\n', '        addToTheUsersAssignedReward(); // updates UserInfo object\n', '        withdrawWithoutReward(depositedLptOfTheUser());\n', '    }\n', '\n', '    // 4\n', '    function takeOutSomeOfTheAccumulatedReward(uint256 _rewardAmountToBeTakenOut) public returns(uint256) {\n', '\n', '        require(_rewardAmountToBeTakenOut > 0, "takeOutSomeOfTheAccumulatedReward: _rewardAmountToBeTakenOut must be positive");\n', '\n', '        addToTheUsersAssignedReward(); // updates UserInfo object\n', '\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require(user.currentlyAssignedRewardAmount >= _rewardAmountToBeTakenOut, "withdraw: user.currentlyAssignedRewardAmount is too low for this operation, _rewardAmountToBeTakenOut is too big");\n', '\n', '        // note: will always send out only what is currently held inside the UserInfo object (never directly from the global dailyErc20RewardAmounts[] array)\n', '        // (so addToTheUsersAssignedReward() call is needed before transfer)\n', '\n', '        erc20.safeTransfer(msg.sender, _rewardAmountToBeTakenOut); // send erc20 reward to the user\n', '        user.currentlyAssignedRewardAmount = SafeMath.sub(user.currentlyAssignedRewardAmount, _rewardAmountToBeTakenOut);\n', '\n', '        emit TakeOutSomeOfTheAccumulatedReward(msg.sender, _rewardAmountToBeTakenOut);\n', '        \n', '        return _rewardAmountToBeTakenOut;\n', '        \n', '    }\n', '\n', '    // 5\n', '    function takeOutTheAccumulatedReward() public returns(uint256) {\n', '        addToTheUsersAssignedReward(); // updates UserInfo object \n', '        takeOutSomeOfTheAccumulatedReward(assignedRewardOfTheUser());\n', '    }\n', '\n', '    // 6\n', '    function withdrawWithAllReward(uint256 _withdrawLptAmount) public {\n', '\n', '        addToTheUsersAssignedReward(); // updates UserInfo object \n', '\n', '        uint256 a = assignedRewardOfTheUser();\n', '        if (a > 0) {\n', '            takeOutSomeOfTheAccumulatedReward(a);\n', '        }\n', '\n', '        withdrawWithoutReward(_withdrawLptAmount);\n', '    }\n', '\n', '    // 7\n', '    function withdrawAllWithAllReward() public {\n', '\n', '        addToTheUsersAssignedReward(); // updates UserInfo object \n', '\n', '        uint256 a = assignedRewardOfTheUser();\n', '        if (a > 0) {\n', '            takeOutSomeOfTheAccumulatedReward(a);\n', '        }\n', '\n', '        uint256 d = depositedLptOfTheUser();\n', '        if (d > 0) {\n', '            withdrawWithoutReward(d);\n', '        }\n', '\n', '    }\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- reward related read/write operations for the depositors -------- */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    // Updates the current accumulated/assigned reward (RNB) of the user (depositor) \n', "    // (alters state in the user's UserInfo object and other places).\n", '    function addToTheUsersAssignedReward() public returns(uint256) {\n', '\n', '        uint256 currentStakingDayNumber = getCurrentStakingDayNumber();\n', '        uint256 currentStakingDayNumberMinusOne = SafeMath.sub(currentStakingDayNumber, 1);\n', '\n', '        if (currentStakingDayNumber == 0) {\n', '            return 0;\n', '        }\n', '\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        \n', '        if (user.lptAmount == 0) { \n', '            // when user.lptAmount was set to 0 we did the calculations and state changes, if lptAmount is still 0, it means no change since then\n', '            // note: important to always call addToTheUsersAssignedReward() before transfers!\n', '            user.rewardCountedUptoDay = currentStakingDayNumberMinusOne;\n', '            return user.currentlyAssignedRewardAmount;\n', '        }\n', '        \n', '        // ---\n', '\n', '        // NOTE: in the last changes we made 4 real days into one contract day\n', '\n', '        uint256 rewardCountedUptoDay = user.rewardCountedUptoDay;\n', '        uint256 rewardCountedUptoDayNextDay = SafeMath.add(rewardCountedUptoDay, 1);\n', '\n', '        if (!(rewardCountedUptoDayNextDay <= currentStakingDayNumberMinusOne)) {\n', '            return user.currentlyAssignedRewardAmount;\n', '        }\n', '\n', '        // ---\n', '        \n', '        uint256 usersRewardRecently = 0;\n', '        \n', '        for (uint256 i = rewardCountedUptoDayNextDay; i <= currentStakingDayNumberMinusOne; i++) {\n', '                        \n', '            if (dailyTotalLptAmount[i] == 0) {\n', '                continue;\n', '            }\n', '\n', '            // logic used here is because of integer division, we improve precision (not perfect solution, good enough)\n', '            // (sample uses 10^4 instead of 10^19 units)\n', '            // 49.5k = users stake, 80k = total stake, 2k = daily reward)\n', '            // correct value would be = 1237.5\n', '            // (49 500 / 80 000 = 0.61875 = 0) * 2000 = 0; \n', '            // ((49 500 * 100) / 80 000 = 61,875 = 61) * 2000 = 122000) / 100 = 1220 = 1220\n', '            // ((49 500 * 1000) / 80 000 = 618,75 = 618) * 2000 = 1236000) / 1000 = 1236 = 1236\n', '            // ((49 500 * 10000) / 80 000 = 6187.5 = 6187) * 2000 = 12374000) / 10000 = 1237.4 = 1237\n', '\n', '            uint256 raiser = 10000000000000000000; // 10^19\n', '            \n', '            // uint256 rew = (((user.lptAmount.mul(raiser)).div(dailyTotalLptAmount[i])).mul(dailyPlannedErc20RewardAmounts[i])).div(raiser);\n', '            \n', '            // same with SafeMath:\n', '\n', '            uint256 rew = SafeMath.mul(user.lptAmount, raiser);\n', '            rew = SafeMath.div(rew, dailyTotalLptAmount[i]);\n', '            rew = SafeMath.mul(rew, dailyPlannedErc20RewardAmounts[i]);\n', '            rew = SafeMath.div(rew, raiser);\n', '\n', '            if (dailyErc20RewardAmounts[i] < rew) { \n', '                // the has to be added amount is less, than the remaining (global), can happen because of slight rounding issues at the very end\n', '                // not really... more likely the oposite (that some small residue gets left behind)\n', '                rew = dailyErc20RewardAmounts[i];\n', '            }\n', '\n', '            usersRewardRecently = SafeMath.add(usersRewardRecently, rew);\n', '            dailyErc20RewardAmounts[i] = SafeMath.sub(dailyErc20RewardAmounts[i], rew);\n', '           \n', '        }\n', '\n', '        user.currentlyAssignedRewardAmount = SafeMath.add(user.currentlyAssignedRewardAmount, usersRewardRecently);\n', '        currentTotalErc20RewardAmount = SafeMath.sub(currentTotalErc20RewardAmount, usersRewardRecently);\n', '        user.rewardCountedUptoDay = currentStakingDayNumberMinusOne;\n', '\n', '        return user.currentlyAssignedRewardAmount;\n', '    }\n', '\n', "    // Current additionally assignable reward (RNB) of the user (depositor), meaning what wasn't added to UserInfo, but will be upon the next addToTheUsersAssignedReward() call\n", '    // (read only, does not save/alter state)\n', '    function calculateUsersAssignableReward() public view returns(uint256) {\n', '\n', '        // ---\n', '        // --- similar to addToTheUsersAssignedReward(), but without the writes, plus few other modifications\n', '        // ---\n', '\n', '        uint256 currentStakingDayNumber = getCurrentStakingDayNumber();\n', '        uint256 currentStakingDayNumberMinusOne = SafeMath.sub(currentStakingDayNumber, 1);\n', '\n', '        if (currentStakingDayNumber == 0) {\n', '            return 0;\n', '        }\n', '\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        \n', '        if (user.lptAmount == 0) {\n', '            // user.rewardCountedUptoDay = currentStakingDayNumberMinusOne; // different from addToTheUsersAssignedReward\n', '            return 0; // different from addToTheUsersAssignedReward\n', '        }\n', '        \n', '        // ---\n', '\n', '        uint256 rewardCountedUptoDay = user.rewardCountedUptoDay;\n', '        uint256 rewardCountedUptoDayNextDay = SafeMath.add(rewardCountedUptoDay, 1);\n', '\n', '        if (!(rewardCountedUptoDayNextDay <= currentStakingDayNumberMinusOne)) {\n', '            return 0; // different from addToTheUsersAssignedReward\n', '        }\n', '\n', '        // ---\n', '        \n', '        uint256 usersRewardRecently = 0;\n', '        \n', '        for (uint256 i = rewardCountedUptoDayNextDay; i <= currentStakingDayNumberMinusOne; i++) {\n', '                        \n', '            if (dailyTotalLptAmount[i] == 0) {\n', '                continue;\n', '            }\n', '\n', '            // logic used here is because of integer division, we improve precision (not perfect solution, good enough)\n', '            // (sample use 10^4 instead of 10^19 units)\n', '            // 49.5k = users stake, 80k = total stake, 2k = daily reward)\n', '            // correct value would be = 1237.5\n', '            // (49 500 / 80 000 = 0.61875 = 0) * 2000 = 0; \n', '            // ((49 500 * 100) / 80 000 = 61,875 = 61) * 2000 = 122000) / 100 = 1220 = 1220\n', '            // ((49 500 * 1000) / 80 000 = 618,75 = 618) * 2000 = 1236000) / 1000 = 1236 = 1236\n', '            // ((49 500 * 10000) / 80 000 = 6187.5 = 6187) * 2000 = 12374000) / 10000 = 1237.4 = 1237\n', '\n', '            uint256 raiser = 10000000000000000000; // 10^19\n', '            \n', '            // uint256 rew = (((user.lptAmount.mul(raiser)).div(dailyTotalLptAmount[i])).mul(dailyPlannedErc20RewardAmounts[i])).div(raiser);\n', '            \n', '            // with SafeMath:\n', '\n', '            uint256 rew = SafeMath.mul(user.lptAmount, raiser);\n', '            rew = SafeMath.div(rew, dailyTotalLptAmount[i]);\n', '            rew = SafeMath.mul(rew, dailyPlannedErc20RewardAmounts[i]);\n', '            rew = SafeMath.div(rew, raiser);\n', '            \n', '            if (dailyErc20RewardAmounts[i] < rew) {\n', '                // the has to be added amount is less, than the remaining (global), can happen because of slight rounding issues at the very end\n', '                // not really... more likely the oposite (that some small residue gets left behind)\n', '                rew = dailyErc20RewardAmounts[i];\n', '            }\n', '\n', '            usersRewardRecently = SafeMath.add(usersRewardRecently, rew);\n', '            // dailyErc20RewardAmounts[i] = SafeMath.sub(dailyErc20RewardAmounts[i], rew); // different from addToTheUsersAssignedReward\n', '           \n', '        }\n', '\n', '        // different from addToTheUsersAssignedReward\n', '        // user.currentlyAssignedRewardAmount = SafeMath.add(user.currentlyAssignedRewardAmount, usersRewardRecently); \n', '        // currentTotalErc20RewardAmount = SafeMath.sub(currentTotalErc20RewardAmount, usersRewardRecently);\n', '        // user.rewardCountedUptoDay = currentStakingDayNumberMinusOne;\n', '        \n', '        // ---\n', '        // ---\n', '        // ---\n', '\n', '        return usersRewardRecently;\n', '\n', '    }    \n', '\n', '    // user.currentlyAssignedRewardAmount + calculateUsersAssignableReward()\n', '    // (read only, does not save/alter state)\n', '    function calculateCurrentTakeableRewardOfTheUser() public view returns(uint256) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        return SafeMath.add(user.currentlyAssignedRewardAmount, calculateUsersAssignableReward());\n', '    }\n', '\n', '    // Current clearly accumulated and assigned RNB reward of the user (depositor), meaning what is already in UserInfo\n', '    function assignedRewardOfTheUser() public view returns(uint256) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        return user.currentlyAssignedRewardAmount;\n', '    }\n', '\n', '    function rewardCountedUptoDayOfTheUser() public view returns(uint256) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        return user.rewardCountedUptoDay;\n', '    }\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- other read operations for the depositors ----------------------- */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    // Current Uniswap V2 liquidity token amount of the user (depositor)\n', '    function depositedLptOfTheUser() public view returns(uint256) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        return user.lptAmount;\n', '    }\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- write operations for the contract owner ------------------------ */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    // Fund rewards (erc20 RNB) (operation is for Rentible admins)\n', '    function fund(uint256 _fundErc20Amount) public onlyOwner {\n', '\n', '        require(_fundErc20Amount > 0, "fund: _fundErc20Amount must be positive");\n', '\n', '        require(fundedErc20RewardAmount < totalErc20RewardAmount, "fund: already fully funded");\n', '        require(SafeMath.add(fundedErc20RewardAmount, _fundErc20Amount) <= totalErc20RewardAmount, "fund: _fundErc20Amount too big, sum would exceed totalErc20RewardAmount");\n', '\n', '        // we do not check time here, optionally reward funding can be provided any time\n', '        // (in pratice it should happen before start, or very quickly)\n', '\n', '        erc20.safeTransferFrom(address(msg.sender), address(this), _fundErc20Amount);\n', '\n', '        fundedErc20RewardAmount = SafeMath.add(fundedErc20RewardAmount, _fundErc20Amount);\n', '        currentTotalErc20RewardAmount = SafeMath.add(currentTotalErc20RewardAmount, _fundErc20Amount);\n', '\n', '        emit Fund(msg.sender, _fundErc20Amount);\n', '    }\n', '\n', '    /* -------------------------------------------------------------------- */\n', '    /* --- misc utils ----------------------------------------------------- */\n', '    /* -------------------------------------------------------------------- */\n', '\n', '    function getCurrentStakingDayNumber() public view returns(uint256) {\n', '        \n', '        uint256 elapsedTime = block.timestamp.sub(startTime);\n', '        uint256 dayNumber = SafeMath.div(elapsedTime, dayLength); // integer division, truncated\n', '\n', '        if (dayNumber > 92) {\n', '            return 92;\n', '        }\n', '        \n', '        return dayNumber;\n', '\n', '    }\n', '\n', '}']