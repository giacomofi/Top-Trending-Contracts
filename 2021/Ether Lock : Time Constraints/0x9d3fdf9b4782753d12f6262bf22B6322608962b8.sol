['pragma solidity ^0.5.0;\n', '\n', 'import "./Config.sol";\n', '\n', '\n', '/// @title Governance Contract\n', '/// @author Matter Labs\n', '/// @author ZKSwap L2 Labs\n', 'contract Governance is Config {\n', '\n', '    /// @notice Token added to Franklin net\n', '    event NewToken(\n', '        address indexed token,\n', '        uint16 indexed tokenId\n', '    );\n', '\n', '    /// @notice Governor changed\n', '    event NewGovernor(\n', '        address newGovernor\n', '    );\n', '\n', "    /// @notice Validator's status changed\n", '    event ValidatorStatusUpdate(\n', '        address indexed validatorAddress,\n', '        bool isActive\n', '    );\n', '\n', '    /// @notice Address which will exercise governance over the network i.e. add tokens, change validator set, conduct upgrades\n', '    address public networkGovernor;\n', '\n', '    /// @notice Total number of ERC20 tokens registered in the network (excluding ETH, which is hardcoded as tokenId = 0)\n', '    uint16 public totalTokens;\n', '\n', '    /// @notice List of registered tokens by tokenId\n', '    mapping(uint16 => address) public tokenAddresses;\n', '\n', '    /// @notice List of registered tokens by address\n', '    mapping(address => uint16) public tokenIds;\n', '\n', '    /// @notice List of permitted validators\n', '    mapping(address => bool) public validators;\n', '\n', '    constructor() public {}\n', '\n', '    /// @notice Governance contract initialization. Can be external because Proxy contract intercepts illegal calls of this function.\n', '    /// @param initializationParameters Encoded representation of initialization parameters:\n', '    ///     _networkGovernor The address of network governor\n', '    function initialize(bytes calldata initializationParameters) external {\n', '        address _networkGovernor = abi.decode(initializationParameters, (address));\n', '\n', '        networkGovernor = _networkGovernor;\n', '    }\n', '\n', '    /// @notice Governance contract upgrade. Can be external because Proxy contract intercepts illegal calls of this function.\n', '    /// @param upgradeParameters Encoded representation of upgrade parameters\n', '    function upgrade(bytes calldata upgradeParameters) external {}\n', '\n', '    /// @notice Change current governor\n', '    /// @param _newGovernor Address of the new governor\n', '    function changeGovernor(address _newGovernor) external {\n', '        requireGovernor(msg.sender);\n', '        require(_newGovernor != address(0), "zero address is passed as _newGovernor");\n', '        if (networkGovernor != _newGovernor) {\n', '            networkGovernor = _newGovernor;\n', '            emit NewGovernor(_newGovernor);\n', '        }\n', '    }\n', '\n', '    /// @notice Add token to the list of networks tokens\n', '    /// @param _token Token address\n', '    function addToken(address _token) external {\n', '        requireGovernor(msg.sender);\n', '        require(tokenIds[_token] == 0, "gan11"); // token exists\n', '        require(totalTokens < MAX_AMOUNT_OF_REGISTERED_TOKENS, "gan12"); // no free identifiers for tokens\n', '        require(\n', '            _token != address(0), "address cannot be zero"\n', '        );\n', '\n', '        totalTokens++;\n', '        uint16 newTokenId = totalTokens; // it is not `totalTokens - 1` because tokenId = 0 is reserved for eth\n', '\n', '        tokenAddresses[newTokenId] = _token;\n', '        tokenIds[_token] = newTokenId;\n', '        emit NewToken(_token, newTokenId);\n', '    }\n', '\n', '    /// @notice Change validator status (active or not active)\n', '    /// @param _validator Validator address\n', '    /// @param _active Active flag\n', '    function setValidator(address _validator, bool _active) external {\n', '        requireGovernor(msg.sender);\n', '        if (validators[_validator] != _active) {\n', '            validators[_validator] = _active;\n', '            emit ValidatorStatusUpdate(_validator, _active);\n', '        }\n', '    }\n', '\n', '    /// @notice Check if specified address is is governor\n', '    /// @param _address Address to check\n', '    function requireGovernor(address _address) public view {\n', '        require(_address == networkGovernor, "grr11"); // only by governor\n', '    }\n', '\n', '    /// @notice Checks if validator is active\n', '    /// @param _address Validator address\n', '    function requireActiveValidator(address _address) external view {\n', '        require(validators[_address], "grr21"); // validator is not active\n', '    }\n', '\n', '    /// @notice Validate token id (must be less than or equal to total tokens amount)\n', '    /// @param _tokenId Token id\n', '    /// @return bool flag that indicates if token id is less than or equal to total tokens amount\n', '    function isValidTokenId(uint16 _tokenId) external view returns (bool) {\n', '        return _tokenId <= totalTokens;\n', '    }\n', '\n', '    /// @notice Validate token address\n', '    /// @param _tokenAddr Token address\n', '    /// @return tokens id\n', '    function validateTokenAddress(address _tokenAddr) external view returns (uint16) {\n', '        uint16 tokenId = tokenIds[_tokenAddr];\n', '        require(tokenId != 0, "gvs11"); // 0 is not a valid token\n', '\t    require(tokenId <= MAX_AMOUNT_OF_REGISTERED_TOKENS, "gvs12");\n', '        return tokenId;\n', '    }\n', '\n', '    function getTokenAddress(uint16 _tokenId) external view returns (address) {\n', '        address tokenAddr = tokenAddresses[_tokenId];\n', '        return tokenAddr;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/// @title ZKSwap configuration constants\n', '/// @author Matter Labs\n', '/// @author ZKSwap L2 Labs\n', 'contract Config {\n', '\n', '    /// @notice ERC20 token withdrawal gas limit, used only for complete withdrawals\n', '    uint256 constant ERC20_WITHDRAWAL_GAS_LIMIT = 250000;\n', '\n', '    /// @notice ETH token withdrawal gas limit, used only for complete withdrawals\n', '    uint256 constant ETH_WITHDRAWAL_GAS_LIMIT = 10000;\n', '\n', '    /// @notice Bytes in one chunk\n', '    uint8 constant CHUNK_BYTES = 9;\n', '\n', '    /// @notice ZKSwap address length\n', '    uint8 constant ADDRESS_BYTES = 20;\n', '\n', '    uint8 constant PUBKEY_HASH_BYTES = 20;\n', '\n', '    /// @notice Public key bytes length\n', '    uint8 constant PUBKEY_BYTES = 32;\n', '\n', '    /// @notice Ethereum signature r/s bytes length\n', '    uint8 constant ETH_SIGN_RS_BYTES = 32;\n', '\n', '    /// @notice Success flag bytes length\n', '    uint8 constant SUCCESS_FLAG_BYTES = 1;\n', '\n', '    /// @notice Max amount of tokens registered in the network (excluding ETH, which is hardcoded as tokenId = 0)\n', '    uint16 constant MAX_AMOUNT_OF_REGISTERED_TOKENS = 128 - 1;\n', '\n', '    /// @notice Max account id that could be registered in the network\n', '    uint32 constant MAX_ACCOUNT_ID = (2 ** 24) - 1;\n', '\n', '    /// @notice Expected average period of block creation\n', '    uint256 constant BLOCK_PERIOD = 15 seconds;\n', '\n', '    /// @notice ETH blocks verification expectation\n', '    /// Blocks can be reverted if they are not verified for at least EXPECT_VERIFICATION_IN.\n', '    /// If set to 0 validator can revert blocks at any time.\n', '    uint256 constant EXPECT_VERIFICATION_IN = 0 hours / BLOCK_PERIOD;\n', '\n', '    uint256 constant NOOP_BYTES = 1 * CHUNK_BYTES;\n', '    uint256 constant CREATE_PAIR_BYTES = 4 * CHUNK_BYTES;\n', '    uint256 constant DEPOSIT_BYTES = 6 * CHUNK_BYTES;\n', '    uint256 constant TRANSFER_TO_NEW_BYTES = 6 * CHUNK_BYTES;\n', '    uint256 constant PARTIAL_EXIT_BYTES = 6 * CHUNK_BYTES;\n', '    uint256 constant TRANSFER_BYTES = 2 * CHUNK_BYTES;\n', '    uint256 constant UNISWAP_ADD_RM_LIQ_BYTES = 6 * CHUNK_BYTES;\n', '    uint256 constant UNISWAP_SWAP_BYTES = 4 * CHUNK_BYTES;\n', '\n', '    /// @notice Full exit operation length\n', '    uint256 constant FULL_EXIT_BYTES = 6 * CHUNK_BYTES;\n', '\n', '    /// @notice OnchainWithdrawal data length\n', '    uint256 constant ONCHAIN_WITHDRAWAL_BYTES = 1 + 20 + 2 + 16; // (uint8 addToPendingWithdrawalsQueue, address _to, uint16 _tokenId, uint128 _amount)\n', '\n', '    /// @notice ChangePubKey operation length\n', '    uint256 constant CHANGE_PUBKEY_BYTES = 6 * CHUNK_BYTES;\n', '\n', '    /// @notice Expiration delta for priority request to be satisfied (in seconds)\n', '    /// NOTE: Priority expiration should be > (EXPECT_VERIFICATION_IN * BLOCK_PERIOD), otherwise incorrect block with priority op could not be reverted.\n', '    uint256 constant PRIORITY_EXPIRATION_PERIOD = 3 days;\n', '\n', '    /// @notice Expiration delta for priority request to be satisfied (in ETH blocks)\n', '    uint256 constant PRIORITY_EXPIRATION = PRIORITY_EXPIRATION_PERIOD / BLOCK_PERIOD;\n', '\n', '    /// @notice Maximum number of priority request to clear during verifying the block\n', "    /// @dev Cause deleting storage slots cost 5k gas per each slot it's unprofitable to clear too many slots\n", '    /// @dev Value based on the assumption of ~750k gas cost of verifying and 5 used storage slots per PriorityOperation structure\n', '    uint64 constant MAX_PRIORITY_REQUESTS_TO_DELETE_IN_VERIFY = 6;\n', '\n', '    /// @notice Reserved time for users to send full exit priority operation in case of an upgrade (in seconds)\n', '    uint constant MASS_FULL_EXIT_PERIOD = 3 days;\n', '\n', '    /// @notice Reserved time for users to withdraw funds from full exit priority operation in case of an upgrade (in seconds)\n', '    uint constant TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT = 2 days;\n', '\n', '    /// @notice Notice period before activation preparation status of upgrade mode (in seconds)\n', '    // NOTE: we must reserve for users enough time to send full exit operation, wait maximum time for processing this operation and withdraw funds from it.\n', '    uint constant UPGRADE_NOTICE_PERIOD = MASS_FULL_EXIT_PERIOD + PRIORITY_EXPIRATION_PERIOD + TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT;\n', '\n', '}\n', '\n', '{\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  }\n', '}']