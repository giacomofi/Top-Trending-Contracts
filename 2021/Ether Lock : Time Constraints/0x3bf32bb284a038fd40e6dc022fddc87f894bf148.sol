['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface ICourtStake{\n', '\n', '    function lockedStake(uint256 amount, address beneficiar,  uint256 StartReleasingTime, uint256 batchCount, uint256 batchPeriod) external;\n', '\n', '}\n', '\n', 'interface IMERC20 {\n', '    function mint(address account, uint amount) external;\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract CourtFarming_MatterStake {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '\n', '    IERC20 public constant stakedToken = IERC20(0x1C9491865a1DE77C5b6e19d2E6a5F1D7a6F2b25F);\n', '\n', '\n', '    IMERC20 public constant courtToken = IMERC20(0x0538A9b4f4dcB0CB01A7fA34e17C0AC947c22553);\n', '\n', '    uint256 private _totalStaked;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    // last updated block number\n', '    uint256 private _lastUpdateBlock;\n', '\n', '    // incentive rewards\n', '    uint256 public incvFinishBlock; //  finish incentive rewarding block number\n', '    uint256 private _incvRewardPerBlock; // incentive reward per block\n', '    uint256 private _incvAccRewardPerToken; // accumulative reward per token\n', '    mapping(address => uint256) private _incvRewards; // reward balances\n', '    mapping(address => uint256) private _incvPrevAccRewardPerToken;// previous accumulative reward per token (for a user)\n', '\n', '    uint256 public incvStartReleasingTime;  // incentive releasing time\n', '    uint256 public incvBatchPeriod; // incentive batch period\n', '    uint256 public incvBatchCount; // incentive batch count\n', '    mapping(address => uint256) public  incvWithdrawn;\n', '\n', '    address public owner;\n', '\n', '    enum TransferRewardState {\n', '        Succeeded,\n', '        RewardsStillLocked\n', '    }\n', '\n', '\n', '    address public courtStakeAddress;\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Unstaked(address indexed user, uint256 amount);\n', '    event ClaimReward(address indexed user, uint256 reward);\n', '    event ClaimIncentiveReward(address indexed user, uint256 reward);\n', '    event StakeRewards(address indexed user, uint256 amount, uint256 lockTime);\n', '    event CourtStakeChanged(address oldAddress, address newAddress);\n', '    event StakeParametersChanged(uint256 incvRewardPerBlock, uint256 incvRewardFinsishBlock, uint256 incvLockTime);\n', '\n', '    constructor () public {\n', '\n', '        owner = msg.sender;\n', '\n', '        uint256 incvRewardsPerBlock = 8267195767195767;\n', '        uint256 incvRewardsPeriodInDays = 90;\n', '        \n', '        incvStartReleasingTime = 1620914400; // 13/05/2021 // check https://www.epochconverter.com/ for timestamp\n', '        incvBatchPeriod = 1 days;\n', '        incvBatchCount = 1;\n', '\n', '         _stakeParametrsCalculation(incvRewardsPerBlock, incvRewardsPeriodInDays, incvStartReleasingTime);\n', '\n', '        _lastUpdateBlock = blockNumber();\n', '    }\n', '\n', '    function _stakeParametrsCalculation(uint256 incvRewardsPerBlock, uint256 incvRewardsPeriodInDays, uint256 iLockTime) internal{\n', '\n', '\n', '        uint256 incvRewardBlockCount = incvRewardsPeriodInDays * 5760;\n', '        uint256 incvRewardPerBlock = incvRewardsPerBlock;\n', '\n', '        _incvRewardPerBlock = incvRewardPerBlock * (1e18);\n', '        incvFinishBlock = blockNumber().add(incvRewardBlockCount);\n', '\n', '        incvStartReleasingTime = iLockTime;\n', '    }\n', '\n', '    function changeStakeParameters( uint256 incvRewardsPerBlock, uint256 incvRewardsPeriodInDays, uint256 iLockTime) public {\n', '\n', '        require(msg.sender == owner, "can be called by owner only");\n', '        updateReward(address(0));\n', '\n', '        _stakeParametrsCalculation(incvRewardsPerBlock, incvRewardsPeriodInDays, iLockTime);\n', '\n', '        emit StakeParametersChanged( _incvRewardPerBlock, incvFinishBlock, incvStartReleasingTime);\n', '    }\n', '\n', '    function updateReward(address account) public {\n', '        // reward algorithm\n', '        // in general: rewards = (reward per token ber block) user balances\n', '        uint256 cnBlock = blockNumber();\n', '\n', '        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\n', '        if (_totalStaked > 0) {\n', '            uint256 incvlastRewardBlock = cnBlock < incvFinishBlock ? cnBlock : incvFinishBlock;\n', '            if (incvlastRewardBlock > _lastUpdateBlock) {\n', '                _incvAccRewardPerToken = incvlastRewardBlock.sub(_lastUpdateBlock)\n', '                .mul(_incvRewardPerBlock).div(_totalStaked)\n', '                .add(_incvAccRewardPerToken);\n', '            }\n', '        }\n', '\n', '        _lastUpdateBlock = cnBlock;\n', '\n', '        if (account != address(0)) {\n', '\n', '            uint256 incAccRewardPerTokenForUser = _incvAccRewardPerToken.sub(_incvPrevAccRewardPerToken[account]);\n', '\n', '            if (incAccRewardPerTokenForUser > 0) {\n', '                _incvRewards[account] =\n', '                _balances[account]\n', '                .mul(incAccRewardPerTokenForUser)\n', '                .div(1e18)\n', '                .add(_incvRewards[account]);\n', '\n', '                _incvPrevAccRewardPerToken[account] = _incvAccRewardPerToken;\n', '            }\n', '        }\n', '    }\n', '\n', '    function stake(uint256 amount) public {\n', '        updateReward(msg.sender);\n', '\n', '        if (amount > 0) {\n', '            _totalStaked = _totalStaked.add(amount);\n', '            _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '            stakedToken.safeTransferFrom(msg.sender, address(this), amount);\n', '            emit Staked(msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    function unstake(uint256 amount, bool claim) public {\n', '        updateReward(msg.sender);\n', '\n', '        if (amount > 0) {\n', '            _totalStaked = _totalStaked.sub(amount);\n', '            _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '            stakedToken.safeTransfer(msg.sender, amount);\n', '            emit Unstaked(msg.sender, amount);\n', '        }\n', '        claim = false;\n', '    }\n', '\n', '\n', '    function stakeIncvRewards(uint256 amount) public returns (bool) {\n', '        updateReward(msg.sender);\n', '        uint256 incvReward = _incvRewards[msg.sender];\n', '\n', '\n', '        if (amount > incvReward || courtStakeAddress == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        _incvRewards[msg.sender] -= amount;  // no need to use safe math sub, since there is check for amount > reward\n', '\n', '        courtToken.mint(address(this), amount);\n', '\n', '        ICourtStake courtStake = ICourtStake(courtStakeAddress);\n', '        courtStake.lockedStake(amount,  msg.sender, incvStartReleasingTime, incvBatchCount, incvBatchPeriod);\n', '        emit StakeRewards(msg.sender, amount, incvStartReleasingTime);\n', '    }\n', '\n', '    function setCourtStake(address courtStakeAdd) public {\n', '        require(msg.sender == owner, "only contract owner can change");\n', '\n', '        address oldAddress = courtStakeAddress;\n', '        courtStakeAddress = courtStakeAdd;\n', '\n', '        IERC20 courtTokenERC20 = IERC20(address(courtToken));\n', '\n', '        courtTokenERC20.approve(courtStakeAdd, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n', '\n', '        emit CourtStakeChanged(oldAddress, courtStakeAdd);\n', '    }\n', '\n', '    function rewards(address account) public view returns (uint256 reward, uint256 incvReward) {\n', '        // read version of update\n', '        uint256 cnBlock = blockNumber();\n', '        \n', '        uint256 incvAccRewardPerToken = _incvAccRewardPerToken;\n', '\n', '        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\n', '        if (_totalStaked > 0) {\n', '            \n', '            uint256 incvLastRewardBlock = cnBlock < incvFinishBlock ? cnBlock : incvFinishBlock;\n', '            if (incvLastRewardBlock > _lastUpdateBlock) {\n', '                incvAccRewardPerToken = incvLastRewardBlock.sub(_lastUpdateBlock)\n', '                .mul(_incvRewardPerBlock).div(_totalStaked)\n', '                .add(incvAccRewardPerToken);\n', '            }\n', '        }\n', '\n', '        incvReward = _balances[account]\n', '        .mul(incvAccRewardPerToken.sub(_incvPrevAccRewardPerToken[account]))\n', '        .div(1e18)\n', '        .add(_incvRewards[account])\n', '        .sub(incvWithdrawn[account]);\n', '        \n', '        reward = 0;\n', '    }\n', '\n', '    function incvRewardInfo() external view returns (uint256 cBlockNumber, uint256 incvRewardPerBlock, uint256 incvRewardFinishBlock, uint256 incvRewardFinishTime, uint256 incvRewardLockTime) {\n', '        cBlockNumber = blockNumber();\n', '        incvRewardFinishBlock = incvFinishBlock;\n', '        incvRewardPerBlock = _incvRewardPerBlock.div(1e18);\n', '        if( cBlockNumber < incvFinishBlock){\n', '            incvRewardFinishTime = block.timestamp.add(incvFinishBlock.sub(cBlockNumber).mul(15));\n', '        }else{\n', '            incvRewardFinishTime = block.timestamp.sub(cBlockNumber.sub(incvFinishBlock).mul(15));\n', '        }\n', '        incvRewardLockTime=incvStartReleasingTime;\n', '    }\n', '\n', '\n', '    // expected reward,\n', '    // please note this is only expectation, because total balance may changed during the day\n', '    function expectedRewardsToday(uint256 amount) external view returns (uint256 reward, uint256 incvReward) {\n', '        reward = 0;\n', '        uint256 totalIncvRewardPerDay = _incvRewardPerBlock * 5760;\n', '        incvReward =  totalIncvRewardPerDay.div(_totalStaked.add(amount)).mul(amount).div(1e18);\n', '    }\n', '\n', '    function lastUpdateBlock() external view returns(uint256) {\n', '        return _lastUpdateBlock;\n', '    }\n', '\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function totalStaked() external view returns (uint256) {\n', '        return _totalStaked;\n', '    }\n', '\n', '    function blockNumber() public view returns (uint256) {\n', '       return block.number;\n', '    }\n', '    \n', '    function getCurrentTime() public view returns(uint256){\n', '        return block.timestamp;\n', '    }\n', '    \n', '    function getVestedAmount(uint256 lockedAmount, uint256 time) internal  view returns(uint256){\n', '        \n', '        // if time < StartReleasingTime: then return 0\n', '        if(time < incvStartReleasingTime){\n', '            return 0;\n', '        }\n', '\n', '        // if locked amount 0 return 0\n', '        if (lockedAmount == 0){\n', '            return 0;\n', '        }\n', '\n', '        // elapsedBatchCount = ((time - startReleasingTime) / batchPeriod) + 1\n', '        uint256 elapsedBatchCount =\n', '        time.sub(incvStartReleasingTime)\n', '        .div(incvBatchPeriod)\n', '        .add(1);\n', '\n', '        // vestedAmount = lockedAmount  * elapsedBatchCount / batchCount\n', '        uint256  vestedAmount =\n', '        lockedAmount\n', '        .mul(elapsedBatchCount)\n', '        .div(incvBatchCount);\n', '\n', '        if(vestedAmount > lockedAmount){\n', '            vestedAmount = lockedAmount;\n', '        }\n', '\n', '        return vestedAmount;\n', '    }\n', '    \n', '    \n', '    function incvRewardClaim() public returns(uint256 amount){\n', '        updateReward(msg.sender);\n', '        amount = getVestedAmount(_incvRewards[msg.sender], getCurrentTime()).sub(incvWithdrawn[msg.sender]);\n', '        \n', '        if(amount > 0){\n', '            incvWithdrawn[msg.sender] = incvWithdrawn[msg.sender].add(amount);\n', '\n', '            courtToken.mint(msg.sender, amount);\n', '\n', '            emit ClaimIncentiveReward(msg.sender, amount);\n', '        }\n', '    }\n', '    \n', '    function getBeneficiaryInfo(address ibeneficiary) external view\n', '    returns(address beneficiary,\n', '        uint256 totalLocked,\n', '        uint256 withdrawn,\n', '        uint256 releasableAmount,\n', '        uint256 nextBatchTime,\n', '        uint256 currentTime){\n', '\n', '        beneficiary = ibeneficiary;\n', '        currentTime = getCurrentTime();\n', '        \n', '        totalLocked = _incvRewards[ibeneficiary];\n', '        withdrawn = incvWithdrawn[ibeneficiary];\n', '        ( , uint256 incvReward) = rewards(ibeneficiary);\n', '        releasableAmount = getVestedAmount(incvReward, getCurrentTime()).sub(incvWithdrawn[beneficiary]);\n', '        nextBatchTime = getIncNextBatchTime(incvReward, ibeneficiary, currentTime);\n', '        \n', '    }\n', '    \n', '    function getIncNextBatchTime(uint256 lockedAmount, address beneficiary, uint256 time) internal view returns(uint256){\n', '\n', '        // if total vested equal to total locked then return 0\n', '        if(getVestedAmount(lockedAmount, time) == _incvRewards[beneficiary]){\n', '            return 0;\n', '        }\n', '\n', '        // if time less than startReleasingTime: then return sartReleasingTime\n', '        if(time <= incvStartReleasingTime){\n', '            return incvStartReleasingTime;\n', '        }\n', '\n', '        // find the next batch time\n', '        uint256 elapsedBatchCount =\n', '        time.sub(incvStartReleasingTime)\n', '        .div(incvBatchPeriod)\n', '        .add(1);\n', '\n', '        uint256 nextBatchTime =\n', '        elapsedBatchCount\n', '        .mul(incvBatchPeriod)\n', '        .add(incvStartReleasingTime);\n', '\n', '        return nextBatchTime;\n', '\n', '    }\n', '    \n', '}']