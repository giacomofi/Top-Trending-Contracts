['// SPDX-License-Identifier: J-J-J-JENGA!!!\n', 'pragma solidity ^0.7.4;\n', '\n', '/* Originally for ROOTKIT:\n', 'When KETH is trapped\n', 'You take the WETH back\n', 'Technically a wrapped WETH\n', 'So a wrapped wrapped ethereum\n', 'But also accepts raw ETH\n', 'Also functions exactly like WETH (deposit/withdraw/direct send)\n', '*/\n', '\n', 'import "./ERC31337.sol";\n', 'import "./IWETH.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract TETH is ERC31337, IWETH\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    constructor (IWETH _weth)\n', '        ERC31337(_weth, "tETH", "tETH")\n', '    {\n', '    }\n', '\n', '    receive() external payable\n', '    {\n', '        if (msg.sender != address(wrappedToken)) {\n', '            deposit();\n', '        }\n', '    }\n', '\n', '    function deposit() public payable override\n', '    {\n', '        uint256 amount = msg.value;\n', '        IWETH(address(wrappedToken)).deposit{ value: amount }();\n', '        _mint(msg.sender, amount);\n', '        emit Deposit(msg.sender, amount); \n', '    }\n', '\n', '    function withdraw(uint256 _amount) public override\n', '    {\n', '        _burn(msg.sender, _amount);\n', '        IWETH(address(wrappedToken)).withdraw(_amount);\n', '        emit Withdrawal(msg.sender, _amount);\n', '        (bool success,) = msg.sender.call{ value: _amount }("");\n', '        require (success, "Transfer failed");\n', '    }\n', '}']