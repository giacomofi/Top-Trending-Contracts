['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', 'pragma solidity ^0.5.4;\n', '\n', 'contract NiftyRegistry {\n', '\n', '    event OwnerAddition(address indexed owner);\n', '    event OwnerRemoval(address indexed owner);\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    mapping(address => bool) niftyManagers;\n', '    mapping (address => bool) public isOwner;\n', '\n', '    function isValidNiftyManager(address sending_key) public view returns (bool) {\n', '        return(niftyManagers[sending_key]);\n', '    }\n', '\n', '    function addNiftyManager(address new_sending_key) external onlyOwner {\n', '        niftyManagers[new_sending_key] = true;\n', '    }\n', '\n', '    function removeNiftyManager(address sending_key) external onlyOwner {\n', '        niftyManagers[sending_key] = false;\n', '    }\n', '\n', '    constructor(address[] memory _owners, address[] memory signing_keys) public {\n', '        for (uint i=0; i<_owners.length; i++) {\n', '            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n', '            isOwner[_owners[i]] = true;\n', '        }\n', '        for (uint i=0; i<signing_keys.length; i++) {\n', '            require(signing_keys[i] != address(0));\n', '            niftyManagers[signing_keys[i]] = true;\n', '        }\n', '    }\n', '\n', '    function addOwner(address owner) public onlyOwner {\n', '        isOwner[owner] = true;\n', '        emit OwnerAddition(owner);\n', '    }\n', '\n', '    function removeOwner(address owner) public onlyOwner {\n', '        isOwner[owner] = false;\n', '        emit OwnerRemoval(owner);\n', '    }\n', '\n', '}']