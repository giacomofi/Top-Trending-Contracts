['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-03\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '\n', 'interface contract2Interface{\n', '    \n', '   function userStats(address user) external view returns(uint256 firstBlock, uint256 claimedDays, uint256 lockedRewards, uint256 claimableRewards);\n', '    \n', '    function definiteStats(address user) external view returns(uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards);\n', '    \n', '    function totalStakedMCH(uint256 day) external view returns(uint256);\n', '    \n', '    function totalLocked(address user) external view returns(uint256);\n', '    \n', '    function unstake(uint256 amount) external ;\n', '    \n', '    function claimRewards() external returns(bool);\n', '    \n', '    function claimRewards(address user) external returns(bool); \n', '    \n', '    function emergencyWithdraw(address to, uint256 amount) external ;\n', '    \n', '    function giveAllowence(address user) external ;\n', '    \n', '    function removeAllowence(address user) external ;\n', '    \n', '    function allowance(address user) external view returns(bool) ;\n', '    \n', '    event MCHunstake(address user, uint256 amont);\n', '}\n', '\n', '\n', 'interface IERC20{\n', '\n', '\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '}\n', '\n', '\n', 'interface MCHstakingInterface {\n', '\n', '\n', '    function stakingStats(address user) external view returns(uint256 amount, uint256 stakingBlock) ;\n', '    \n', '    function totalStaked() external view returns(uint256);\n', '    \n', '    function showBlackUser(address user) external view returns(bool) ;\n', '    \n', '    function unstake(address user, uint256 amount) external ;  \n', '    \n', '    function transferMCH(address to, uint256 amount) external ;\n', '    \n', '}\n', 'contract Contract2 is contract2Interface {\n', '    \n', '    MCHstakingInterface MCHstaking;\n', '    IERC20 MCF;\n', '    //MCH staing : 12310169\n', '    \n', '    address _owner;\n', '    \n', '    mapping (address => bool) private _allowence;\n', '    \n', '    mapping (uint256 => uint256) private _totalStaked; //total staked MCH during each day\n', '    \n', '    mapping (address => uint256) private _firstBlock; //first block the user staked at\n', '    mapping (address => uint256) private _claimedDays; //Days the users have claimed rewards in\n', '    \n', '    mapping (address => uint256) private _lockedRewards;\n', '    mapping (address => uint256) private _totalLockedRewards;\n', '    \n', '    constructor(address MCHcontract, address MCFcontract) {\n', '        _owner = msg.sender;\n', '        MCHstaking = MCHstakingInterface(MCHcontract);\n', '        MCF = IERC20((MCFcontract));\n', '    }\n', '\n', '\n', '    function allowance(address user) external view override returns(bool){\n', '        require(_allowence[msg.sender]);\n', '        return _allowence[user];\n', '    }    \n', '\n', '\n', '    function CR(address user) internal  {\n', '        setFirstBlock(user);\n', '           uint256 totalStaked = MCHstaking.totalStaked();\n', '              uint256 day = ((block.number - 12356690) / 6646) + 1; //12356692\n', '           if(day > 61) {day = 61;}\n', '           if(totalStaked > _totalStaked[day]){_totalStaked[day] = totalStaked;}\n', '           uint256 claimedDays = _claimedDays[user] + 1;\n', '           (uint256 staked, ) = MCHstaking.stakingStats(user);\n', '           if(claimedDays < day && staked > 0){\n', '               uint256 rewards;\n', '               for(uint256 t = claimedDays; t < day; ++t){\n', '                   if(_totalStaked[t] == 0){_totalStaked[t] = totalStaked;}\n', '                   rewards += (staked * 5000000000000000 / _totalStaked[t]);\n', '                   /////////////////////5000000000000000\n', '                   \n', '                   if(t+1 == day){\n', '                       _claimedDays[user] = t;\n', '                       _lockedRewards[user] += rewards/2;\n', '                       _totalLockedRewards[user] = _lockedRewards[user];\n', '                       MCF.transfer(user, rewards/2);\n', '                   }\n', '               }\n', '               \n', '           }\n', '\n', '\n', '    }\n', '    \n', '    function setFirstBlock(address user) internal  {\n', '                if(_firstBlock[user] == 0){\n', '            (, uint256 stakingBlock) = MCHstaking.stakingStats(user);\n', '            if(stakingBlock != 0){\n', '            _firstBlock[user] = stakingBlock;\n', '                    uint256 day = ((stakingBlock + 46523) - 12356690) / 6646 ;     //   12356692    \n', '            _claimedDays[user] = day;\n', '            }\n', '            else{\n', '                _firstBlock[user] = block.number;\n', '                uint256 day = ((block.number + 46523) - 12356690) / 6646 ;     //   12356692    \n', '            _claimedDays[user] = day;\n', '            }\n', '                }\n', '    }\n', '    \n', '    function userStats(address user) external view override returns(uint256 firstBlock, uint256 claimedDays, uint256 lockedRewards, uint256 claimableRewards){\n', '            if(_firstBlock[user] == 0){\n', '            (, uint256 stakingBlock) = MCHstaking.stakingStats(user);\n', '            if(stakingBlock != 0){\n', '            firstBlock = stakingBlock;\n', '                    uint256 day = ((stakingBlock + 46523) - 12356690) / 6646 ;     //   12356692    \n', '            claimedDays = day;\n', '            }\n', '            else{\n', '                firstBlock = block.number;\n', '                uint256 day = ((block.number + 46523) - 12356690) / 6646 ;     //   12356692    \n', '            claimedDays = day;\n', '            }\n', '                }\n', '                \n', '            else{\n', '              firstBlock = _firstBlock[user];\n', '              claimedDays = _claimedDays[user];\n', '            }    \n', '        if(block.number >= 12356690){\n', '            uint256 totalStaked = MCHstaking.totalStaked();\n', '            uint256 day = (block.number - 12356690) / 6646 + 1;\n', '            if(day > 61) {day = 61;}\n', '            if(claimedDays + 1 < day){\n', '               (uint256 staked, ) = MCHstaking.stakingStats(user);\n', '               for(uint256 t = claimedDays+1; t < day; ++t){\n', '                   if(_totalStaked[t] == 0){\n', '                       claimableRewards += (staked * 5000000000000000 / totalStaked) / 2;\n', '                       }\n', '                       else{\n', '                           claimableRewards += (staked * 5000000000000000 / _totalStaked[t]) / 2;\n', '                       }\n', '                   \n', '               }\n', '           }\n', '        }\n', '        else{claimableRewards = 0;}\n', '        \n', '        lockedRewards = _lockedRewards[user] + claimableRewards;\n', '    }\n', '    \n', '    function definiteStats(address user) external view override returns(uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards){\n', '        firstBlock = _firstBlock[user];\n', '        lockedRewards = _lockedRewards[user];\n', '        totalLockedRewards = _totalLockedRewards[user];\n', '    }\n', '    \n', '    function totalStakedMCH(uint256 day) external view override returns(uint256){\n', '        return _totalStaked[day];\n', '    }\n', '    \n', '    function totalLocked(address user) external view override returns(uint256){\n', '        return _totalLockedRewards[user];\n', '    }\n', '    function unstake(uint256 amount) external override {\n', '        setFirstBlock(msg.sender);\n', '        require(!MCHstaking.showBlackUser(msg.sender));\n', '        require(block.number - _firstBlock[msg.sender] >= 46523);\n', '        CR(msg.sender);\n', '        MCHstaking.unstake(msg.sender, amount);\n', '        MCHstaking.transferMCH(msg.sender, amount);\n', '        emit MCHunstake(msg.sender, amount);\n', '    }\n', '    \n', '    function claimRewards() external override returns(bool) {\n', '        require(!MCHstaking.showBlackUser(msg.sender));\n', '        CR(msg.sender);\n', '        return true;\n', '    }\n', '    \n', '    function claimRewards2() external returns(bool) {\n', '        require(!MCHstaking.showBlackUser(msg.sender));\n', '        CR(msg.sender);\n', '        return true;\n', '    }\n', '    \n', '    function claimRewards(address user) external override returns(bool) {\n', '        require(address(MCHstaking) == msg.sender || _allowence[msg.sender]);\n', '        if(!MCHstaking.showBlackUser(user)){CR(user);}\n', '        return true;\n', '    }\n', '    \n', '    function emergencyWithdraw(address to, uint256 amount) external override {\n', '        require(msg.sender == _owner);\n', '        MCF.transfer(to, amount);\n', '    }\n', '        \n', '    function giveAllowence(address user) external override {\n', '        require(msg.sender == _owner);\n', '        _allowence[user] = true;\n', '    }\n', '    \n', '    function removeAllowence(address user) external override {\n', '        require(msg.sender == _owner);\n', '        _allowence[user] = false;\n', '    }  \n', '    \n', '    function editData(address user, uint256 lockedRewards, uint256 firstBlock) external {\n', '        require(_allowence[msg.sender]);\n', '        _lockedRewards[user] = lockedRewards;\n', '        _firstBlock[user] = firstBlock;\n', '    }\n', '    \n', '    \n', '    \n', '}']