['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Helper  {\n', '    event TransferOut(uint256 Amount, address To, address Token);\n', '    event TransferIn(uint256 Amount, address From, address Token);\n', '    modifier TestAllownce(\n', '        address _token,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) {\n', '        require(\n', '            ERC20(_token).allowance(_owner, address(this)) >= _amount,\n', '            "no allowance"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function TransferToken(\n', '        address _Token,\n', '        address _Reciver,\n', '        uint256 _Amount\n', '    ) internal {\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        emit TransferOut(_Amount, _Reciver, _Token);\n', '        ERC20(_Token).transfer(_Reciver, _Amount);\n', '        require(\n', '            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\n', '                ,\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '\n', '    function CheckBalance(address _Token, address _Subject)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ERC20(_Token).balanceOf(_Subject);\n', '    }\n', '\n', '    function TransferInToken(\n', '        address _Token,\n', '        address _Subject,\n', '        uint256 _Amount\n', '    ) internal TestAllownce(_Token, _Subject, _Amount) {\n', '        require(_Amount > 0);\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\n', '        emit TransferIn(_Amount, _Subject, _Token);\n', '        require(\n', '            (SafeMath.add(OldBalance, _Amount)) ==\n', '                CheckBalance(_Token, address(this)),\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '\n', '    function ApproveAllowanceERC20(\n', '        address _Token,\n', '        address _Subject,\n', '        uint256 _Amount\n', '    ) internal {\n', '        require(_Amount > 0);\n', '        ERC20(_Token).approve(_Subject, _Amount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract GovManager is Ownable {\n', '    address public GovernerContract;\n', '\n', '    modifier onlyOwnerOrGov() {\n', '        require(msg.sender == owner() || msg.sender == GovernerContract, "Authorization Error");\n', '        _;\n', '    }\n', '\n', '    function setGovernerContract(address _address) external onlyOwnerOrGov{\n', '        GovernerContract = _address;\n', '    }\n', '\n', '    constructor() public {\n', '        GovernerContract = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract PozBenefit is GovManager {\n', '    constructor() public {\n', '        PozFee = 15; // *10000\n', '        PozTimer = 1000; // *10000\n', '    \n', '       // POZ_Address = address(0x0);\n', '       // POZBenefit_Address = address(0x0);\n', '    }\n', '\n', '    uint256 public PozFee; // the fee for the first part of the pool\n', '    uint256 public PozTimer; //the timer for the first part fo the pool\n', '    \n', '    modifier PercentCheckOk(uint256 _percent) {\n', '        if (_percent < 10000) _;\n', '        else revert("Not in range");\n', '    }\n', '    modifier LeftIsBigger(uint256 _left, uint256 _right) {\n', '        if (_left > _right) _;\n', '        else revert("Not bigger");\n', '    }\n', '\n', '    function SetPozTimer(uint256 _pozTimer)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_pozTimer)\n', '    {\n', '        PozTimer = _pozTimer;\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract ETHHelper is Ownable {\n', '    constructor() public {\n', '        IsPayble = false;\n', '    }\n', '\n', '    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\n', '        require(msgValue >= _MinETHInvest, "Send ETH to invest");\n', '        emit TransferInETH(msgValue, msgSender);\n', '        _;\n', '    }\n', '\n', '    //@dev not/allow contract to receive funds\n', '    receive() external payable {\n', '        if (!IsPayble) revert();\n', '    }\n', '\n', '    event TransferOutETH(uint256 Amount, address To);\n', '    event TransferInETH(uint256 Amount, address From);\n', '\n', '    bool public IsPayble;\n', ' \n', '    function SwitchIsPayble() public onlyOwner {\n', '        IsPayble = !IsPayble;\n', '    }\n', '\n', '    function TransferETH(address payable _Reciver, uint256 _ammount) internal {\n', '        emit TransferOutETH(_ammount, _Reciver);\n', '        uint256 beforeBalance = address(_Reciver).balance;\n', '        _Reciver.transfer(_ammount);\n', '        require(\n', '            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\n', '            "The transfer did not complite"\n', '        );\n', '    }\n', ' \n', '}\n', '\n', '\n', '\n', '//For whitelist, \n', 'interface IWhiteList {\n', '    function Check(address _Subject, uint256 _Id) external view returns(uint);\n', '    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\n', '    function IsNeedRegister(uint256 _Id) external view returns(bool);\n', '    function LastRoundRegister(address _Subject,uint256 _Id) external;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '// \n', '\n', '\n', '\n', '\n', 'contract Manageable is ETHHelper, ERC20Helper, PozBenefit, Pausable  {\n', '    constructor() public {\n', '        Fee = 20; // *10000\n', '        //MinDuration = 0; //need to set\n', '        //PoolPrice = 0; // Price for create a pool\n', '        MaxDuration = 60 * 60 * 24 * 30 * 6; // half year\n', '        MinETHInvest = 10000; // for percent calc\n', '        MaxETHInvest = 100 * 10**18; // 100 eth per wallet\n', '        //WhiteList_Address = address(0x0);\n', '    }\n', '\n', '    mapping(address => uint256) FeeMap;\n', '    //@dev for percent use uint16\n', '    uint256 public Fee; //the fee for the pool\n', '    uint256 public MinDuration; //the minimum duration of a pool, in seconds\n', '    uint256 public MaxDuration; //the maximum duration of a pool from the creation, in seconds\n', '    uint256 public PoolPrice;\n', '    uint256 public MinETHInvest;\n', '    uint256 public MaxETHInvest;\n', '    uint256 public MinERC20Invest;\n', '    uint256 public MaxERC20Invest;\n', '    address public WhiteList_Address; //The address of the Whitelist contract\n', '    address public Benefit_Address;\n', '\n', '    bool public IsTokenFilterOn;\n', '    uint256 public TokenWhitelistId;\n', '    uint256 public MCWhitelistId; // Main Coin WhiteList ID\n', '\n', '    address public LockedDealAddress;\n', '    bool public UseLockedDealForTlp;\n', '\n', '    function SwapTokenFilter() public onlyOwner {\n', '        IsTokenFilterOn = !IsTokenFilterOn;\n', '    }\n', '\n', '    function setTokenWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\n', '        TokenWhitelistId = _whiteListId;\n', '    }\n', '\n', '    function setMCWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\n', '        MCWhitelistId = _whiteListId;\n', '    }\n', '\n', '    function IsValidToken(address _address) public view returns (bool) {\n', '        return !IsTokenFilterOn || (IWhiteList(WhiteList_Address).Check(_address, TokenWhitelistId) > 0);\n', '    }\n', '\n', '    function IsERC20Maincoin(address _address) public view returns (bool) {\n', '        return !IsTokenFilterOn || IWhiteList(WhiteList_Address).Check(_address, MCWhitelistId) > 0;\n', '    }\n', '    \n', '    function SetWhiteList_Address(address _WhiteList_Address) public onlyOwnerOrGov {\n', '        WhiteList_Address = _WhiteList_Address;\n', '    }\n', '\n', '    function SetBenefit_Address(address _benefitAddress) public onlyOwnerOrGov {\n', '        Benefit_Address = _benefitAddress;\n', '    }\n', '\n', '    function SetMinMaxETHInvest(uint256 _MinETHInvest, uint256 _MaxETHInvest)\n', '        public\n', '        onlyOwnerOrGov\n', '    {\n', '        MinETHInvest = _MinETHInvest;\n', '        MaxETHInvest = _MaxETHInvest;\n', '    }\n', '    function SetMinMaxERC20Invest(uint256 _MinERC20Invest, uint256 _MaxERC20Invest)\n', '        public\n', '        onlyOwnerOrGov\n', '    {\n', '        MinERC20Invest = _MinERC20Invest;\n', '        MaxERC20Invest = _MaxERC20Invest;\n', '    }\n', '\n', '    function SetMinMaxDuration(uint256 _minDuration, uint256 _maxDuration)\n', '        public\n', '        onlyOwnerOrGov\n', '    {\n', '        MinDuration = _minDuration;\n', '        MaxDuration = _maxDuration;\n', '    }\n', '\n', '    function SetPoolPrice(uint256 _PoolPrice) public onlyOwnerOrGov {\n', '        PoolPrice = _PoolPrice;\n', '    }\n', '\n', '    function SetFee(uint256 _fee)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger(_fee, PozFee)\n', '    {\n', '        Fee = _fee;\n', '    }\n', '\n', '    function SetPOZFee(uint256 _fee)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger(Fee, _fee)\n', '    {\n', '        PozFee = _fee;\n', '    }\n', '\n', '    function SetLockedDealAddress(address lockedDeal) public onlyOwnerOrGov {\n', '        LockedDealAddress = lockedDeal;\n', '    }\n', '\n', '    function SwitchLockedDealForTlp() public onlyOwnerOrGov {\n', '        UseLockedDealForTlp = !UseLockedDealForTlp;\n', '    }\n', '\n', '    function isUsingLockedDeal() public view returns(bool) {\n', '        return UseLockedDealForTlp && LockedDealAddress != address(0x0);\n', '    }\n', '\n', '    function pause() public onlyOwnerOrGov {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() public onlyOwnerOrGov {\n', '        _unpause();\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Pools is Manageable {\n', '    event NewPool(address token, uint256 id);\n', '    event FinishPool(uint256 id);\n', '    event PoolUpdate(uint256 id);\n', '\n', '    constructor() public {\n', '        //  poolsCount = 0; //Start with 0\n', '    }\n', '\n', '    uint256 public poolsCount; // the ids of the pool\n', '    mapping(uint256 => Pool) pools; //the id of the pool with the data\n', "    mapping(address => uint256[]) poolsMap; //the address and all of the pools id's\n", '    struct Pool {\n', '        PoolBaseData BaseData;\n', '        PoolMoreData MoreData;\n', '    }\n', '    struct PoolBaseData {\n', '        address Token; //the address of the erc20 toke for sale\n', '        address Creator; //the project owner\n', '        uint256 FinishTime; //Until what time the pool is active\n', '        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\n', '        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\n', '        address Maincoin; // on adress.zero = ETH\n', '        uint256 StartAmount; //The total amount of the tokens for sale\n', '    }\n', '    struct PoolMoreData {\n', '        uint64 LockedUntil; // true - the investors getting the tokens after the FinishTime. false - intant deal\n', '        uint256 Lefttokens; // the ammount of tokens left for sale\n', '        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\n', '        uint256 OpenForAll; // The Time that all investors can invest\n', '        uint256 UnlockedTokens; //for locked pools\n', '        uint256 WhiteListId; // 0 is turn off, the Id of the whitelist from the contract.\n', '        bool TookLeftOvers; //The Creator took the left overs after the pool finished\n', '        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\n', '    }\n', '\n', '    function isPoolLocked(uint256 _id) public view returns(bool){\n', '        return pools[_id].MoreData.LockedUntil > now;\n', '    }\n', '\n', '    //create a new pool\n', '    function CreatePool(\n', '        address _Token, //token to sell address\n', '        uint256 _FinishTime, //Until what time the pool will work\n', '        uint256 _Rate, //the rate of the trade\n', '        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\n', '        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n', '        uint64 _LockedUntil, //False = DSP or True = TLP\n', '        address _MainCoin, // address(0x0) = ETH, address of main token\n', '        bool _Is21Decimal, //focus the for smaller tokens.\n', '        uint256 _Now, //Start Time - can be 0 to not change current flow\n', '        uint256 _WhiteListId // the Id of the Whitelist contract, 0 For turn-off\n', '    ) public payable whenNotPaused {\n', '        require(msg.value >= PoolPrice, "Need to pay for the pool");\n', '        require(IsValidToken(_Token), "Need Valid ERC20 Token"); //check if _Token is ERC20\n', '        require(\n', '            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\n', '            "Main coin not in list"\n', '        );\n', '        require(_FinishTime  < SafeMath.add(MaxDuration, now), "Pool duration can\'t be that long");\n', '        require(_LockedUntil < SafeMath.add(MaxDuration, now) , "Locked value can\'t be that long");\n', '        require(\n', '            _Rate <= _POZRate,\n', '            "POZ holders need to have better price (or the same)"\n', '        );\n', '        require(_POZRate > 0, "It will not work");\n', '        if (_Now < now) _Now = now;\n', '        require(\n', '            SafeMath.add(now, MinDuration) <= _FinishTime,\n', '            "Need more then MinDuration"\n', '        ); // check if the time is OK\n', '        TransferInToken(_Token, msg.sender, _StartAmount);\n', '        uint256 Openforall =\n', '            (_WhiteListId == 0) \n', '                ? _Now //and this\n', '                : SafeMath.add(\n', '                    SafeMath.div(\n', '                        SafeMath.mul(SafeMath.sub(_FinishTime, _Now), PozTimer),\n', '                        10000\n', '                    ),\n', '                    _Now\n', '                );\n', '        //register the pool\n', '        pools[poolsCount] = Pool(\n', '            PoolBaseData(\n', '                _Token,\n', '                msg.sender,\n', '                _FinishTime,\n', '                _Rate,\n', '                _POZRate,\n', '                _MainCoin,\n', '                _StartAmount\n', '            ),\n', '            PoolMoreData(\n', '                _LockedUntil,\n', '                _StartAmount,\n', '                _Now,\n', '                Openforall,\n', '                0,\n', '                _WhiteListId,\n', '                false,\n', '                _Is21Decimal\n', '            )\n', '        );\n', '        poolsMap[msg.sender].push(poolsCount);\n', '        emit NewPool(_Token, poolsCount);\n', '        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract PoolsData is Pools {\n', '    enum PoolStatus {Created, Open, PreMade, OutOfstock, Finished, Close} //the status of the pools\n', '\n', '    modifier isPoolId(uint256 _id) {\n', '        require(_id < poolsCount, "Invalid Pool ID");\n', '        _;\n', '    }\n', '\n', '    function GetMyPoolsId() public view returns (uint256[] memory) {\n', '        return poolsMap[msg.sender];\n', '    }\n', '\n', '    function GetPoolBaseData(uint256 _Id)\n', '        public\n', '        view\n', '        isPoolId(_Id)\n', '        returns (\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].BaseData.Token,\n', '            pools[_Id].BaseData.Creator,\n', '            pools[_Id].BaseData.FinishTime,\n', '            pools[_Id].BaseData.Rate,\n', '            pools[_Id].BaseData.POZRate,\n', '            pools[_Id].BaseData.StartAmount\n', '        );\n', '    }\n', '\n', '    function GetPoolMoreData(uint256 _Id)\n', '        public\n', '        view\n', '        isPoolId(_Id)\n', '        returns (\n', '            uint64,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            bool\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].MoreData.LockedUntil,\n', '            pools[_Id].MoreData.Lefttokens,\n', '            pools[_Id].MoreData.StartTime,\n', '            pools[_Id].MoreData.OpenForAll,\n', '            pools[_Id].MoreData.UnlockedTokens,\n', '            pools[_Id].MoreData.Is21DecimalRate\n', '        );\n', '    }\n', '\n', '    function GetPoolExtraData(uint256 _Id)\n', '        public\n', '        view\n', '        isPoolId(_Id)\n', '        returns (\n', '            bool,\n', '            uint256,\n', '            address\n', '        )\n', '    {\n', '        return (\n', '            pools[_Id].MoreData.TookLeftOvers,\n', '            pools[_Id].MoreData.WhiteListId,\n', '            pools[_Id].BaseData.Maincoin\n', '        );\n', '    }\n', '\n', '    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\n', '        public\n', '        view\n', '        isPoolId(_PoolId)\n', '        returns (bool)\n', '    {\n', '        return\n', '            pools[_PoolId].BaseData.FinishTime <= now &&\n', '            pools[_PoolId].MoreData.Lefttokens > 0 &&\n', '            !pools[_PoolId].MoreData.TookLeftOvers;\n', '    }\n', '\n', '    //@dev no use of revert to make sure the loop will work\n', '    function WithdrawLeftOvers(uint256 _PoolId) public isPoolId(_PoolId) returns (bool) {\n', '        //pool is finished + got left overs + did not took them\n', '        if (IsReadyWithdrawLeftOvers(_PoolId)) {\n', '            pools[_PoolId].MoreData.TookLeftOvers = true;\n', '            TransferToken(\n', '                pools[_PoolId].BaseData.Token,\n', '                pools[_PoolId].BaseData.Creator,\n', '                pools[_PoolId].MoreData.Lefttokens\n', '            );\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    //calculate the status of a pool\n', '    function GetPoolStatus(uint256 _id)\n', '        public\n', '        view\n', '        isPoolId(_id)\n', '        returns (PoolStatus)\n', '    {\n', "        //Don't like the logic here - ToDo Boolean checks (truth table)\n", '        if (now < pools[_id].MoreData.StartTime) return PoolStatus.PreMade;\n', '        if (\n', '            now < pools[_id].MoreData.OpenForAll &&\n', '            pools[_id].MoreData.Lefttokens > 0\n', '        ) {\n', '            //got tokens + only poz investors\n', '            return (PoolStatus.Created);\n', '        }\n', '        if (\n', '            now >= pools[_id].MoreData.OpenForAll &&\n', '            pools[_id].MoreData.Lefttokens > 0 &&\n', '            now < pools[_id].BaseData.FinishTime\n', '        ) {\n', '            //got tokens + all investors\n', '            return (PoolStatus.Open);\n', '        }\n', '        if (\n', '            pools[_id].MoreData.Lefttokens == 0 &&\n', '            isPoolLocked(_id) &&\n', '            now < pools[_id].BaseData.FinishTime\n', '        ) //no tokens on locked pool, got time\n', '        {\n', '            return (PoolStatus.OutOfstock);\n', '        }\n', '        if (\n', '            pools[_id].MoreData.Lefttokens == 0 && !isPoolLocked(_id)\n', '        ) //no tokens on direct pool\n', '        {\n', '            return (PoolStatus.Close);\n', '        }\n', '        if (\n', '            now >= pools[_id].BaseData.FinishTime &&\n', '            !isPoolLocked(_id)\n', '        ) {\n', '            // After finish time - not locked\n', '            if (pools[_id].MoreData.TookLeftOvers) return (PoolStatus.Close);\n', '            return (PoolStatus.Finished);\n', '        }\n', '        if (\n', '            (pools[_id].MoreData.TookLeftOvers ||\n', '                pools[_id].MoreData.Lefttokens == 0) &&\n', '            (pools[_id].MoreData.UnlockedTokens +\n', '                pools[_id].MoreData.Lefttokens ==\n', '                pools[_id].BaseData.StartAmount)\n', '        ) return (PoolStatus.Close);\n', '        return (PoolStatus.Finished);\n', '    }\n', '}\n', '\n', '\n', '\n', '//True POZ Token will have this, \n', 'interface IPOZBenefit {\n', '    function IsPOZHolder(address _Subject) external view returns(bool);\n', '}\n', '\n', '\n', 'interface ILockedDeal {\n', '    function CreateNewPool(address _Token, uint64 _FinishTime, uint256 _StartAmount, address _Owner) external returns(uint256);\n', '    function WithdrawToken(uint256 _PoolId) external returns(bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Invest is PoolsData {\n', '    event NewInvestorEvent(uint256 Investor_ID, address Investor_Address, uint256 LockedDeal_ID);\n', '\n', '    modifier CheckTime(uint256 _Time) {\n', '        require(now >= _Time, "Pool not open yet");\n', '        _;\n', '    }\n', '\n', '    modifier validateSender(){\n', '        require(\n', '            msg.sender == tx.origin && !isContract(msg.sender),\n', '            "Some thing wrong with the msgSender"\n', '        );\n', '        _;\n', '    }\n', '\n', '    //using SafeMath for uint256;\n', '    constructor() public {\n', '        //TotalInvestors = 0;\n', '    }\n', '\n', '    //Investorsr Data\n', '    uint256 internal TotalInvestors;\n', '    mapping(uint256 => Investor) Investors;\n', '    mapping(address => uint256[]) InvestorsMap;\n', '    struct Investor {\n', '        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\n', '        address InvestorAddress; //\n', '        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\n', '        uint256 InvestTime; //the time that investment made\n', '    }\n', '\n', '    function getTotalInvestor() external view returns(uint256){\n', '        return TotalInvestors;\n', '    }\n', '    \n', '    //@dev Send in wei\n', '    function InvestETH(uint256 _PoolId)\n', '        external\n', '        payable\n', '        ReceivETH(msg.value, msg.sender, MinETHInvest)\n', '        whenNotPaused\n', '        CheckTime(pools[_PoolId].MoreData.StartTime)\n', '        isPoolId(_PoolId)\n', '        validateSender()\n', '    {\n', '        require(pools[_PoolId].BaseData.Maincoin == address(0x0), "Pool is only for ETH");\n', '        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\n', '        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\n', '        \n', '        TokenAllocate(_PoolId, ThisInvestor, Tokens);\n', '\n', '        uint256 EthMinusFee =\n', '            SafeMath.div(\n', '                SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\n', '                10000\n', '            );\n', '        // send money to project owner - the fee stays on contract\n', '        TransferETH(payable(pools[_PoolId].BaseData.Creator), EthMinusFee); \n', '        RegisterInvest(_PoolId, Tokens);\n', '    }\n', '\n', '    function InvestERC20(uint256 _PoolId, uint256 _Amount)\n', '        external\n', '        whenNotPaused\n', '        CheckTime(pools[_PoolId].MoreData.StartTime)\n', '        isPoolId(_PoolId)\n', '        validateSender()\n', '    {\n', '        require(\n', '            pools[_PoolId].BaseData.Maincoin != address(0x0),\n', '            "Pool is for ETH, use InvestETH"\n', '        );\n', '        TransferInToken(pools[_PoolId].BaseData.Maincoin, msg.sender, _Amount);\n', '        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\n', '        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\n', '\n', '        TokenAllocate(_PoolId, ThisInvestor, Tokens);\n', '\n', '        uint256 RegularFeePay =\n', '            SafeMath.div(SafeMath.mul(_Amount, CalcFee(_PoolId)), 10000);\n', '\n', '        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\n', '        FeeMap[pools[_PoolId].BaseData.Maincoin] = SafeMath.add(\n', '            FeeMap[pools[_PoolId].BaseData.Maincoin],\n', '            RegularFeePay\n', '        );\n', '        TransferToken(\n', '            pools[_PoolId].BaseData.Maincoin,\n', '            pools[_PoolId].BaseData.Creator,\n', '            RegularPaymentMinusFee\n', '        ); // send money to project owner - the fee stays on contract\n', '        RegisterInvest(_PoolId, Tokens);\n', '    }\n', '\n', '    function TokenAllocate(uint256 _PoolId, uint256 _ThisInvestor, uint256 _Tokens) internal {\n', '        uint256 lockedDealId;\n', '        if (isPoolLocked(_PoolId)) {\n', '            require(isUsingLockedDeal(), "Cannot invest in TLP without LockedDeal");\n', '            (address tokenAddress,,,,,) = GetPoolBaseData(_PoolId);\n', '            (uint64 lockedUntil,,,,,) = GetPoolMoreData(_PoolId);\n', '            ApproveAllowanceERC20(tokenAddress, LockedDealAddress, _Tokens);\n', '            lockedDealId = ILockedDeal(LockedDealAddress).CreateNewPool(tokenAddress, lockedUntil, _Tokens, msg.sender);\n', '        } else {\n', '            // not locked, will transfer the tokens\n', '            TransferToken(pools[_PoolId].BaseData.Token, Investors[_ThisInvestor].InvestorAddress, _Tokens);\n', '        }\n', '        emit NewInvestorEvent(_ThisInvestor, Investors[_ThisInvestor].InvestorAddress, lockedDealId);\n', '    }\n', '\n', '    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\n', '        pools[_PoolId].MoreData.Lefttokens = SafeMath.sub(\n', '            pools[_PoolId].MoreData.Lefttokens,\n', '            _Tokens\n', '        );\n', '        if (pools[_PoolId].MoreData.Lefttokens == 0) emit FinishPool(_PoolId);\n', '        else emit PoolUpdate(_PoolId);\n', '    }\n', '\n', '    function NewInvestor(\n', '        address _Sender,\n', '        uint256 _Amount,\n', '        uint256 _Pid\n', '    ) internal returns (uint256) {\n', '        Investors[TotalInvestors] = Investor(\n', '            _Pid,\n', '            _Sender,\n', '            _Amount,\n', '            block.timestamp\n', '        );\n', '        InvestorsMap[msg.sender].push(TotalInvestors);\n', '        TotalInvestors = SafeMath.add(TotalInvestors, 1);\n', '        return SafeMath.sub(TotalInvestors, 1);\n', '    }\n', '\n', '    function CalcTokens(\n', '        uint256 _Pid,\n', '        uint256 _Amount,\n', '        address _Sender\n', '    ) internal returns (uint256) {\n', '        uint256 msgValue = _Amount;\n', '        uint256 result = 0;\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n', '            IsWhiteList(_Sender, pools[_Pid].MoreData.WhiteListId, _Amount);\n', '            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.POZRate);\n', '        }\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n', '            (,,address _mainCoin) = GetPoolExtraData(_Pid);\n', '            if(_mainCoin == address(0x0)){\n', '                require(\n', '                    msgValue >= MinETHInvest && msgValue <= MaxETHInvest,\n', '                    "Investment amount not valid"\n', '                );\n', '            } else {\n', '                require(\n', '                    msgValue >= MinERC20Invest && msgValue <= MaxERC20Invest,\n', '                    "Investment amount not valid"\n', '                );\n', '            }\n', '            require(VerifyPozHolding(_Sender), "Only POZ holder can invest");\n', '            LastRegisterWhitelist(_Sender, pools[_Pid].MoreData.WhiteListId);\n', '            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.Rate);\n', '        }\n', '        if (result >= 10**21) {\n', '            if (pools[_Pid].MoreData.Is21DecimalRate) {\n', '                result = SafeMath.div(result, 10**21);\n', '            }\n', '            require(\n', '                result <= pools[_Pid].MoreData.Lefttokens,\n', '                "Not enough tokens in the pool"\n', '            );\n', '            return result;\n', '        }\n', '        revert("Wrong pool status to CalcTokens");\n', '    }\n', '\n', '    function VerifyPozHolding(address _Sender) internal view returns(bool){\n', '        if(Benefit_Address == address(0)) return true;\n', '        return IPOZBenefit(Benefit_Address).IsPOZHolder(_Sender);\n', '    }\n', '\n', '    function LastRegisterWhitelist(address _Sender,uint256 _Id) internal returns(bool) {\n', '        if (_Id == 0) return true; //turn-off\n', '        IWhiteList(WhiteList_Address).LastRoundRegister(_Sender, _Id);\n', '        return true;\n', '    }\n', '\n', '    function CalcFee(uint256 _Pid) internal view returns (uint256) {\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\n', '            return PozFee;\n', '        }\n', '        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\n', '            return Fee;\n', '        }\n', '        //will not get here, will fail on CalcTokens\n', '    }\n', '\n', '    //@dev use it with  require(msg.sender == tx.origin)\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    //  no need register - will return true or false base on Check\n', '    //  if need register - revert or true\n', '    function IsWhiteList(\n', '        address _Investor,\n', '        uint256 _Id,\n', '        uint256 _Amount\n', '    ) internal returns (bool) {\n', '        if (_Id == 0) return true; //turn-off\n', '        IWhiteList(WhiteList_Address).Register(_Investor, _Id, _Amount); //will revert if fail\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract InvestorData is Invest {\n', '    \n', "    //Give all the id's of the investment  by sender address\n", '    function GetMyInvestmentIds() public view returns (uint256[] memory) {\n', '        return InvestorsMap[msg.sender];\n', '    }\n', '\n', '    function GetInvestmentData(uint256 _id)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            address,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            Investors[_id].Poolid,\n', '            Investors[_id].InvestorAddress,\n', '            Investors[_id].MainCoin,\n', '            Investors[_id].InvestTime\n', '        );\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ThePoolz is InvestorData {\n', '    constructor() public {    }\n', '\n', '    function WithdrawETHFee(address payable _to) public onlyOwner {\n', '        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n', '    }\n', '\n', '    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\n', '        uint256 temp = FeeMap[_Token];\n', '        FeeMap[_Token] = 0;\n', '        TransferToken(_Token, _to, temp);\n', '    }\n', '    \n', '}']