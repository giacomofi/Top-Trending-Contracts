['// contracts/CryptoAmulets.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <=0.8.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', '\n', '\n', 'contract CryptoAmulets is ERC721, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    bool public hasSaleStarted = false;\n', '    \n', '    // Max supply of 8000 AMULETS\n', '    uint public constant MAX_AMULETS = 8000;\n', '    \n', '    // SHA256 File hash of 8000 CryptoAmulets Artwork hashes (Before/After Reveal)\n', '    string public PROVENANCE_HASH = "446A8BEB34E8049DF458F8C131A3F6F90394413E7DB2CC14F90D64DA820D30DE";\n', '\n', '    // Txn Hash of the Reveal Function Call\n', '    string public REVEAL_HASH = "";\n', '    \n', '    constructor(string memory baseURI) ERC721("CryptoAmulets", "AMULETS")  {\n', '        setBaseURI(baseURI);\n', '    }\n', '  \n', '    function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '        if (tokenCount == 0) {\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 index;\n', '            for (index = 0; index < tokenCount; index++) {\n', '                result[index] = tokenOfOwnerByIndex(_owner, index);\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    function calculatePrice() public view returns (uint256) {\n', '        require(hasSaleStarted == true, "Sales have not start");\n', '        require(totalSupply() < MAX_AMULETS, "Sales have ended");\n', '\n', '        uint currentSupply = totalSupply();\n', '        if (currentSupply >= 7900) {\n', '            return 0.80 ether;        // Tier 8 -- 7901-8000: 0.80 ETH \n', '        } else if (currentSupply >= 7500) {\n', '            return 0.60 ether;        // Tier 7 -- 7501-7900: 0.60 ETH\n', '        } else if (currentSupply >= 6500) {\n', '            return 0.45 ether;        // Tier 6 -- 6501-7500: 0.45 ETH\n', '        } else if (currentSupply >= 5000) {\n', '            return 0.30 ether;        // Tier 5 -- 5001-6500: 0.30 ETH\n', '        } else if (currentSupply >= 3000) {\n', '            return 0.16 ether;        // Tier 4 -- 3001-5000: 0.16 ETH \n', '        } else if (currentSupply >= 1500) {\n', '            return 0.08 ether;         // Tier 3 -- 1501-3000: 0.08 ETH \n', '        } else if (currentSupply >= 500) {\n', '            return 0.04 ether;         // Tier 2 -- 501-1500:  0.04 ETH\n', '        } else {\n', '            return 0.02 ether;         // Tier 3 -- 1-500:     0.02 ETH\n', '        }\n', '    }\n', '\n', '   function adoptAMULETS(uint256 numofAMULETS) public payable {\n', '        require(totalSupply() < MAX_AMULETS, "Sales have ended");\n', '        require(numofAMULETS > 0 && numofAMULETS <= 20, "You can adopt minimum 1, maximum 20 AMULETS");\n', '        require(totalSupply().add(numofAMULETS) <= MAX_AMULETS, "Exceeds MAX no of AMULETS");\n', '        require(msg.value >= calculatePrice().mul(numofAMULETS), "Ether value sent is insufficient");\n', '\n', '        for (uint i = 0; i < numofAMULETS; i++) {\n', '            uint mintIndex = totalSupply().add(1);\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '    }\n', '    \n', '    // onlyOwner functions below\n', '    function setProvenanceHash(string memory _hash) public onlyOwner {\n', '        PROVENANCE_HASH = _hash;\n', '    }\n', '    \n', '    // Call Reveal to get Txn Hash for distributing artworks\n', '    function Reveal() public onlyOwner {\n', '        REVEAL_HASH = "Txn Hash of this Reveal Transaction will be used for distrubtion of artworks";\n', '    }\n', '    \n', '    function setReveal(string memory hash) public onlyOwner {\n', '        REVEAL_HASH = hash;\n', '    }\n', '\n', '    function setBaseURI(string memory baseURI) public onlyOwner {\n', '        _setBaseURI(baseURI);\n', '    }\n', '    \n', '    function startSale() public onlyOwner {\n', '        hasSaleStarted = true;\n', '    }\n', '    function stopSale() public onlyOwner {\n', '        hasSaleStarted = false;\n', '    }\n', '    \n', '    function withdrawAll() public payable onlyOwner {\n', '        require(payable(msg.sender).send(address(this).balance));\n', '    }\n', '    \n', '    function withdrawAmt(uint256 amount) public payable onlyOwner {\n', '        require(payable(msg.sender).send(amount));\n', '    }\n', '  \n', '}']