['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * CakeCrypt.io\n', '*/\n', '\n', 'contract Token {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract owned {\n', '        address public owner;\n', '\n', '        constructor() public {\n', '            owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '}\n', '\n', 'contract lockToken is owned{\n', '    using SafeMath for uint256;\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '    uint256 private _status;\n', '    \n', '     modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    /*\n', '     * deposit vars\n', '    */\n', '    struct Items {\n', '        address tokenAddress;\n', '        address withdrawalAddress;\n', '        uint256 tokenAmount;\n', '        uint256 unlockTime;\n', '        bool withdrawn;\n', '    }\n', '    struct TokensBalances{\n', '        address tokenAddress;\n', '        uint256 tokenBalance;\n', '    }\n', '    \n', '    uint256 public depositId;\n', '    uint256[] public allDepositIds;\n', '    mapping (address => uint256[]) public depositsByWithdrawalAddress;\n', '    mapping (uint256 => Items) public lockedToken;\n', '    mapping (address => mapping(address => uint256)) public walletTokenBalance;\n', '    \n', '    \n', '    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\n', '    \n', '    /**\n', '     * Constrctor function\n', '    */\n', '    constructor() public {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    \n', '    /**\n', '     *lock tokens\n', '    */\n', '    function lockTokens(address _tokenAddress, uint256 _amount, uint256 _unlockTime) public returns (uint256 _id) {\n', "        require(_amount > 0, 'token amount is Zero');\n", "        require(_unlockTime < 10000000000, 'Enter an unix timestamp in seconds, not miliseconds');\n", "        require(Token(_tokenAddress).approve(address(this), _amount), 'Approve tokens failed');\n", "        require(Token(_tokenAddress).transferFrom(msg.sender, address(this), _amount), 'Transfer of tokens failed');\n", '        \n', '        //update balance in address\n', '        walletTokenBalance[_tokenAddress][msg.sender] = walletTokenBalance[_tokenAddress][msg.sender].add(_amount);\n', '        \n', '        address _withdrawalAddress = msg.sender;\n', '        _id = ++depositId;\n', '        lockedToken[_id].tokenAddress = _tokenAddress;\n', '        lockedToken[_id].withdrawalAddress = _withdrawalAddress;\n', '        lockedToken[_id].tokenAmount = _amount;\n', '        lockedToken[_id].unlockTime = _unlockTime;\n', '        lockedToken[_id].withdrawn = false;\n', '        \n', '        allDepositIds.push(_id);\n', '        depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\n', '    }\n', '    \n', '    /**\n', '     *withdraw tokens\n', '    */\n', '    function withdrawTokens(uint256 _id) nonReentrant public {\n', "        require(block.timestamp >= lockedToken[_id].unlockTime, 'Tokens are locked');\n", "        require(msg.sender == lockedToken[_id].withdrawalAddress, 'Can withdraw by withdrawal Address only');\n", "        require(!lockedToken[_id].withdrawn, 'Tokens already withdrawn');\n", '\t\tlockedToken[_id].withdrawn = true;\n', "        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount), 'Transfer of tokens failed');\n", '        \n', '        \n', '        \n', '        //update balance in address\n', '        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\n', '        \n', '        //remove this id from this address\n', '        uint256 i; uint256 j;\n', '        for(j=0; j<depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length; j++){\n', '            if(depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id){\n', '                for (i = j; i<depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length-1; i++){\n', '                    depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i+1];\n', '                }\n', '                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\n', '                break;\n', '            }\n', '        }\n', '        emit LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\n', '    }\n', '\n', '     /*get total token balance in contract*/\n', '    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\n', '    {\n', '       return Token(_tokenAddress).balanceOf(address(this));\n', '    }\n', '\n', '    function getAllTokens() view public returns (TokensBalances[] memory)\n', '    {\n', '        uint256 size=depositId+1;\n', '        TokensBalances[] memory tBalances=new TokensBalances[](depositId);\n', '        for(uint256 i=1;i<size;i++){\n', '            tBalances[i-1]=TokensBalances({\n', '                tokenAddress:lockedToken[i].tokenAddress,\n', '                tokenBalance:Token(lockedToken[i].tokenAddress).balanceOf(address(this))\n', '            });\n', '        }\n', '        return(tBalances);\n', '    }\n', '    \n', '    /*get total token balance by address*/\n', '    function getTokenBalanceByAddress(address _tokenAddress, address _walletAddress) view public returns (uint256)\n', '    {\n', '       return walletTokenBalance[_tokenAddress][_walletAddress];\n', '    }\n', '    \n', '    /*get allDepositIds*/\n', '    function getAllDepositIds() view public returns (uint256[] memory)\n', '    {\n', '        return allDepositIds;\n', '    }\n', '    \n', '    /*get getDepositDetails*/\n', '    function getDepositDetails(uint256 _id) view public returns (address, address, uint256, uint256, bool)\n', '    {\n', '        return(lockedToken[_id].tokenAddress,lockedToken[_id].withdrawalAddress,lockedToken[_id].tokenAmount,\n', '        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\n', '    }\n', '    \n', '    function getLockedTokenDetails(address _tokenAddress) view public returns (Items[] memory)\n', '    {\n', '        uint256 size=depositId+1;\n', '        Items[] memory data = new Items[](depositId);\n', '        uint256 j=0;\n', '        for(uint256 i=1;i<size;i++){\n', '            if(lockedToken[i].tokenAddress==_tokenAddress){\n', '                data[j]=lockedToken[i];\n', '                j++;\n', '            }\n', '        }\n', '        if(j>0){\n', '            Items[] memory dataReturned = new Items[](j);\n', '            for(uint256 i=0;i<j;i++){\n', '                dataReturned[i]=data[i];\n', '            }\n', '            return(dataReturned);\n', '        }\n', '        return(data);\n', '    }\n', '    \n', '    /*get DepositsByWithdrawalAddress*/\n', '    function getDepositsByWithdrawalAddress(address _withdrawalAddress) view public returns (uint256[] memory)\n', '    {\n', '        return depositsByWithdrawalAddress[_withdrawalAddress];\n', '    }\n', '    \n', '}']