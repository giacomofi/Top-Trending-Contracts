['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '/// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IMolochSummoner {\n', '    function summonMoloch(\n', '        address[] memory _summoner,\n', '        address[] memory _approvedTokens,\n', '        uint256 _periodDuration,\n', '        uint256 _votingPeriodLength,\n', '        uint256 _gracePeriodLength,\n', '        uint256 _proposalDeposit,\n', '        uint256 _dilutionBound,\n', '        uint256 _processingReward,\n', '        uint256[] memory _summonerShares\n', '    ) external returns (address);\n', '}\n', '\n', 'interface IMinionFactory {\n', '    function summonMinion(address moloch, string memory details) external returns (address);\n', '}\n', '\n', 'interface IRicardianLLC {\n', '    function mintLLC(address to) external payable;\n', '}\n', '\n', '/// @notice Summon a Moloch DAO v2 (daohaus.club) with Minion and optional LLC formation maintained by LexDAO (ricardian.gitbook.io).\n', 'contract MolochSummonerV2 { \n', '    IMolochSummoner constant dhMolochSummoner = IMolochSummoner(0x38064F40B20347d58b326E767791A6f79cdEddCe);\n', '    IMinionFactory constant dhMinionFactory = IMinionFactory(0x88207Daf515e0da1A32399b3f92D128B1BF45294);\n', '    IRicardianLLC constant ricardianLLC = IRicardianLLC(0x43B644a01d87025c9046F12eE4cdeC7E04258eBf);\n', '    \n', '    event SummonMoloch(address indexed moloch, address indexed minion, bool mintLLC);\n', '    \n', '    function summonMoloch(\n', '        address[] memory _summoner,\n', '        address[] memory _approvedTokens,\n', '        uint256 _periodDuration,\n', '        uint256 _votingPeriodLength,\n', '        uint256 _gracePeriodLength,\n', '        uint256 _proposalDeposit,\n', '        uint256 _dilutionBound,\n', '        uint256 _processingReward,\n', '        uint256[] memory _summonerShares,\n', '        string memory details,\n', '        bool mintLLC\n', '    ) public payable returns (address moloch, address minion) {\n', '        moloch = dhMolochSummoner.summonMoloch( // summon Moloch\n', '            _summoner,\n', '            _approvedTokens,\n', '            _periodDuration,\n', '            _votingPeriodLength,\n', '            _gracePeriodLength,\n', '            _proposalDeposit,\n', '            _dilutionBound,\n', '            _processingReward,\n', '            _summonerShares);\n', '        minion = dhMinionFactory.summonMinion(moloch, details); // summon Minion\n', '        if (mintLLC) ricardianLLC.mintLLC{value: msg.value}(minion); // form LLC for DAO and deposit registration NFT into Minion - fwd any ether to Ricardian LLC mgmt\n', '        emit SummonMoloch(moloch, minion, mintLLC);\n', '    }\n', '}']