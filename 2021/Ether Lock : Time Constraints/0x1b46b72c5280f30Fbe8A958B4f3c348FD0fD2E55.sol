['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'interface IERC20 {\n', '   \n', '    function totalSupply() external view returns (uint256);\n', '\n', '  \n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    \n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferWithoutDeflationary(address recipient, uint256 amount) external returns (bool) ;\n', '   \n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '   \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    \n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '   \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract Context {\n', '  \n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal virtual {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract PolkaBridgeStaking is Ownable {\n', '    string public name = "PolkaBridge: Staking";\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct UserInfo {\n', '        uint256 amount;\n', '        uint256 rewardDebt;\n', '        uint256 rewardClaimed;\n', '        uint256 lastBlock;\n', '        uint256 beginTime;\n', '        uint256 endTime;\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 stakeToken;\n', '        IERC20 rewardToken;\n', '        uint256 allocPoint;\n', '        uint256 lastRewardBlock;\n', '        uint256 accTokenPerShare;\n', '        uint256 rewardPerBlock;\n', '        uint256 totalTokenStaked;\n', '        uint256 totalTokenClaimed;\n', '        uint256 endDate;\n', '    }\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] private poolInfo;\n', '\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    uint256 public totalUser;\n', '\n', '    // The block number when staking  starts.\n', '    uint256 public startBlock;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(uint256 _startBlock) public {\n', '        startBlock = _startBlock;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    function addPool(\n', '        uint256 _allocPoint,\n', '        IERC20 _stakeToken,\n', '        IERC20 _rewardToken,\n', '        uint256 _rewardPerBlock,\n', '        uint256 _endDate,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 _lastRewardBlock =\n', '            block.number > startBlock ? block.number : startBlock;\n', '\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                stakeToken: _stakeToken,\n', '                rewardToken: _rewardToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: _lastRewardBlock,\n', '                accTokenPerShare: 0,\n', '                rewardPerBlock: _rewardPerBlock,\n', '                totalTokenStaked: 0,\n', '                totalTokenClaimed: 0,\n', '                endDate: _endDate\n', '            })\n', '        );\n', '    }\n', '\n', '    function setPool(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        uint256 _rewardPerBlock,\n', '        uint256 _endDate,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        if (_allocPoint > 0) {\n', '            poolInfo[_pid].allocPoint = _allocPoint;\n', '        }\n', '        if (_rewardPerBlock > 0) {\n', '            poolInfo[_pid].rewardPerBlock = _rewardPerBlock;\n', '        }\n', '        if (_endDate > 0) {\n', '            poolInfo[_pid].endDate = _endDate;\n', '        }\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _fromBlock, uint256 _toBlock)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _toBlock.sub(_fromBlock);\n', '    }\n', '\n', '    function getTotalTokenStaked(uint256 _pid) public view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        return pool.totalTokenStaked;\n', '    }\n', '\n', '    function pendingReward(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accTokenPerShare = pool.accTokenPerShare;\n', '        uint256 totalTokenStaked = getTotalTokenStaked(_pid);\n', '\n', '        if (block.number > pool.lastRewardBlock && totalTokenStaked > 0) {\n', '            uint256 multiplier =\n', '                getMultiplier(pool.lastRewardBlock, block.number); //number diff block\n', '            uint256 tokenReward = multiplier.mul(pool.rewardPerBlock);\n', '\n', '            accTokenPerShare = accTokenPerShare.add(\n', '                tokenReward.mul(1e18).div(totalTokenStaked)\n', '            );\n', '        }\n', '        return user.amount.mul(accTokenPerShare).div(1e18).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 totalTokenStaked = getTotalTokenStaked(_pid);\n', '\n', '        if (totalTokenStaked == 0 || pool.allocPoint == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 tokenReward = multiplier.mul(pool.rewardPerBlock);\n', '\n', '        pool.accTokenPerShare = pool.accTokenPerShare.add(\n', '            tokenReward.mul(1e18).div(totalTokenStaked)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(block.timestamp < pool.endDate, "staking pool already closed");\n', '\n', '        updatePool(_pid);\n', '\n', '        if (user.amount > 0) {\n', '            uint256 pending =\n', '                user.amount.mul(pool.accTokenPerShare).div(1e18).sub(\n', '                    user.rewardDebt\n', '                );\n', '            if (pending > 0) {\n', '                safeTokenTransfer(msg.sender, pending, _pid);\n', '                pool.totalTokenClaimed = pool.totalTokenClaimed.add(pending);\n', '                user.rewardClaimed = user.rewardClaimed.add(pending);\n', '            }\n', '        } else {\n', '            //new user, or old user unstake all before\n', '            totalUser = totalUser.add(1);\n', '            user.beginTime = block.timestamp;\n', '            user.endTime = 0; //reset endtime\n', '        }\n', '        if (_amount > 0) {\n', '            pool.stakeToken.safeTransferFrom(\n', '                address(msg.sender),\n', '                address(this),\n', '                _amount\n', '            );\n', '            user.amount = user.amount.add(_amount);\n', '            pool.totalTokenStaked = pool.totalTokenStaked.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e18);\n', '        user.lastBlock = block.number;\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: bad request");\n', '        updatePool(_pid);\n', '        uint256 pending =\n', '            user.amount.mul(pool.accTokenPerShare).div(1e18).sub(\n', '                user.rewardDebt\n', '            );\n', '        if (pending > 0) {\n', '            safeTokenTransfer(msg.sender, pending, _pid);\n', '            pool.totalTokenClaimed = pool.totalTokenClaimed.add(pending);\n', '            user.rewardClaimed = user.rewardClaimed.add(pending);\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            if (user.amount == 0) {\n', '                user.endTime = block.timestamp;\n', '            }\n', '            pool.totalTokenStaked = pool.totalTokenStaked.sub(_amount);\n', '\n', '            pool.stakeToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e18);\n', '        user.lastBlock = block.number;\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 amount = user.amount;\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        pool.stakeToken.safeTransfer(address(msg.sender), amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, amount);\n', '    }\n', '\n', '    function safeTokenTransfer(\n', '        address _to,\n', '        uint256 _amount,\n', '        uint256 _pid\n', '    ) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 totalPoolReward = pool.allocPoint;\n', '\n', '        if (_amount > totalPoolReward) {\n', '            pool.rewardToken.transfer(_to, totalPoolReward);\n', '        } else {\n', '            pool.rewardToken.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function getPoolInfo(uint256 _pid)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            poolInfo[_pid].accTokenPerShare,\n', '            poolInfo[_pid].lastRewardBlock,\n', '            poolInfo[_pid].rewardPerBlock,\n', '            poolInfo[_pid].totalTokenStaked,\n', '            poolInfo[_pid].totalTokenClaimed\n', '        );\n', '    }\n', '\n', '    function getDiffBlock(address user, uint256 pid)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        UserInfo memory user = userInfo[pid][user];\n', '        return block.number.sub(user.lastBlock);\n', '    }\n', '}']