['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', 'pragma solidity 0.8.2;\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IBoostedVaultWithLockup {\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for the sender\n', '     * @param _amount Units of StakingToken\n', '     */\n', '    function stake(uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for a given beneficiary\n', '     * @param _beneficiary Staked tokens are credited to this address\n', '     * @param _amount      Units of StakingToken\n', '     */\n', '    function stake(address _beneficiary, uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Withdraws stake from pool and claims any unlocked rewards.\n', '     * Note, this function is costly - the args for _claimRewards\n', '     * should be determined off chain and then passed to other fn\n', '     */\n', '    function exit() external;\n', '\n', '    /**\n', '     * @dev Withdraws stake from pool and claims any unlocked rewards.\n', '     * @param _first    Index of the first array element to claim\n', '     * @param _last     Index of the last array element to claim\n', '     */\n', '    function exit(uint256 _first, uint256 _last) external;\n', '\n', '    /**\n', '     * @dev Withdraws given stake amount from the pool\n', '     * @param _amount Units of the staked token to withdraw\n', '     */\n', '    function withdraw(uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Claims only the tokens that have been immediately unlocked, not including\n', '     * those that are in the lockers.\n', '     */\n', '    function claimReward() external;\n', '\n', '    /**\n', '     * @dev Claims all unlocked rewards for sender.\n', '     * Note, this function is costly - the args for _claimRewards\n', '     * should be determined off chain and then passed to other fn\n', '     */\n', '    function claimRewards() external;\n', '\n', '    /**\n', '     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\n', '     * rewards and also locked rewards past their time lock.\n', '     * @param _first    Index of the first array element to claim\n', '     * @param _last     Index of the last array element to claim\n', '     */\n', '    function claimRewards(uint256 _first, uint256 _last) external;\n', '\n', '    /**\n', '     * @dev Pokes a given account to reset the boost\n', '     */\n', '    function pokeBoost(address _account) external;\n', '\n', '    /**\n', '     * @dev Gets the last applicable timestamp for this reward period\n', '     */\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards per token since last update,\n', '     * and sums with stored to give the new cumulative reward per token\n', "     * @return 'Reward' per staked token\n", '     */\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\n', '     * does NOT include the majority of rewards which will be locked up.\n', '     * @param _account User address\n', '     * @return Total reward amount earned\n', '     */\n', '    function earned(address _account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\n', '     * and those that have passed their time lock.\n', '     * @param _account User address\n', '     * @return amount Total units of unclaimed rewards\n', '     * @return first Index of the first userReward that has unlocked\n', '     * @return last Index of the last userReward that has unlocked\n', '     */\n', '    function unclaimedRewards(address _account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 amount,\n', '            uint256 first,\n', '            uint256 last\n', '        );\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'struct PokeVaultAccounts {\n', '    // Address of the Boosted Vault\n', '    address boostVault;\n', '    // List of accounts to be poked\n', '    address[] accounts;\n', '}\n', '\n', '/**\n', ' * @title   Poker\n', ' * @author  mStable\n', ' * @notice  Pokes accounts on boosted vaults so their vault balances can be recalculated.\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2021-04-17\n', ' */\n', 'contract Poker {\n', '\n', '    /**\n', '     * @dev For each boosted vault, poke all the over boosted accounts.\n', '     * @param _vaultAccounts     An array of PokeVaultAccounts structs\n', '     */\n', '    function poke(PokeVaultAccounts[] memory _vaultAccounts) external {\n', '        uint vaultCount = _vaultAccounts.length;\n', '        for(uint i = 0; i < vaultCount; i++) {\n', '            PokeVaultAccounts memory vaultAccounts = _vaultAccounts[i];\n', '            address boostVaultAddress = vaultAccounts.boostVault;\n', '            require(boostVaultAddress != address(0), "blank vault address");\n', '            IBoostedVaultWithLockup boostVault = IBoostedVaultWithLockup(boostVaultAddress);\n', '\n', '            uint accountsLength = vaultAccounts.accounts.length;\n', '            for(uint j = 0; j < accountsLength; j++) {\n', '                address accountAddress = vaultAccounts.accounts[j];\n', '                require(accountAddress != address(0), "blank address");\n', '                boostVault.pokeBoost(accountAddress);\n', '            }\n', '        }\n', '    }\n', '}']