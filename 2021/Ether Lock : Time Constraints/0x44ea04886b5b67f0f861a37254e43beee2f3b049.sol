['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor(address initialOwner) internal {\n', '        require(initialOwner != address(0));\n', '        _owner = initialOwner;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() internal view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', ' interface IERC20 {\n', '     function transfer(address to, uint256 value) external returns (bool);\n', '     function approve(address spender, uint256 value) external returns (bool);\n', '     function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '     function totalSupply() external view returns (uint256);\n', '     function balanceOf(address who) external view returns (uint256);\n', '     function allowance(address owner, address spender) external view returns (uint256);\n', '     function mint(address to, uint256 value) external returns (bool);\n', '     function burnFrom(address from, uint256 value) external;\n', '\n', '     function freezeAndTransfer(address recipient, uint256 amount, uint256 period) external;\n', ' }\n', '\n', ' interface IUSDT {\n', '     function totalSupply() external view returns (uint256);\n', '     function balanceOf(address account) external view returns (uint256);\n', '     function transfer(address recipient, uint256 amount) external;\n', '     function allowance(address owner, address spender) external view returns (uint256);\n', '     function approve(address spender, uint256 amount) external;\n', '     function transferFrom(address sender, address recipient, uint256 amount) external;\n', '     function decimals() external view returns(uint8);\n', ' }\n', '\n', ' contract SSTReseller is Ownable {\n', '\n', '     IUSDT public USDT;\n', '     IERC20 public SST;\n', '\n', '     uint8[] public REFERRAL_PERCENTS = [20, 10, 5, 5, 5];\n', '     uint8 public FEE_PERCENT = 5;\n', '     uint8 public PERCENTS_DIVIDER = 100;\n', '\n', '     uint128 public rate;\n', '     uint32 public period;\n', '     uint64 public minimum;\n', '\n', '     address public boss1 = 0x96f9ED1C9555060da2A04b6250154C9941c1BA5a;\n', '     address public boss2 = 0x96f9ED1C9555060da2A04b6250154C9941c1BA5a;\n', '     address public boss3 = 0xa2B079f860b27966Cf3D96b955859E66b5FAd8FC;\n', '\n', '     bool public active;\n', '\n', '     mapping (address => uint64) public interestBalance;\n', '\n', '     event OnBuy(address indexed account, uint256 usdt, uint256 sst, uint256 rate);\n', '     event OnRefBonus(address indexed account, address indexed referrer, uint256 level, uint256 bonus);\n', '     event OnWithdraw(address indexed account, uint256 value);\n', '     event OnSetRate(address indexed account, uint256 oldValue, uint256 newValue);\n', '     event OnSetPeriod(address indexed account, uint256 oldValue, uint256 newValue);\n', '     event OnSetMinimum(address indexed account, uint256 oldValue, uint256 newValue);\n', '     event OnWithdrawERC20(address indexed account, address indexed erc20, uint256 value);\n', '     event OnSwitchState(address indexed account, bool indexed active);\n', '     event OnBoss1Deposed(address indexed account, address oldBoss1, address newBoss1);\n', '     event OnBoss2Deposed(address indexed account, address oldBoss2, address newBoss2);\n', '     event OnBoss3Deposed(address indexed account, address oldBoss3, address newBoss3);\n', '\n', '     modifier onlyActive {\n', '         require(active, "Not active");\n', '         _;\n', '     }\n', '\n', '     constructor(address USDTAddr, address SSTAddr, uint128 initialRate, uint32 initialPeriod, address initialOwner) public Ownable(initialOwner) {\n', '         require(USDTAddr != address(0) && SSTAddr != address(0));\n', '         require(initialRate > 0);\n', '\n', '         USDT = IUSDT(USDTAddr);\n', '         SST = IERC20(SSTAddr);\n', '\n', '         rate = initialRate;\n', '         period = initialPeriod;\n', '\n', '         active = true;\n', '     }\n', '\n', '     function buy(uint256 value, address _ref1, address _ref2, address _ref3, address _ref4, address _ref5) public onlyActive {\n', '         require(value >= minimum, "Less than minimum");\n', '         USDT.transferFrom(msg.sender, address(this), value);\n', '\n', '         uint256 total;\n', '         if (_ref1 != address(0) && _ref1 != msg.sender) {\n', '             uint256 bonus = value * REFERRAL_PERCENTS[0] / PERCENTS_DIVIDER;\n', '             interestBalance[_ref1] += uint64(bonus);\n', '             total += bonus;\n', '             emit OnRefBonus(msg.sender, _ref1, 0, bonus);\n', '         }\n', '\n', '         if (_ref2 != address(0) && _ref2 != msg.sender) {\n', '             uint256 bonus = value * REFERRAL_PERCENTS[1] / PERCENTS_DIVIDER;\n', '             interestBalance[_ref2] += uint64(bonus);\n', '             total += bonus;\n', '             emit OnRefBonus(msg.sender, _ref2, 1, bonus);\n', '         }\n', '\n', '         if (_ref3 != address(0) && _ref3 != msg.sender) {\n', '             uint256 bonus = value * REFERRAL_PERCENTS[2] / PERCENTS_DIVIDER;\n', '             interestBalance[_ref3] += uint64(bonus);\n', '             total += bonus;\n', '             emit OnRefBonus(msg.sender, _ref3, 2, bonus);\n', '         }\n', '\n', '         if (_ref4 != address(0) && _ref4 != msg.sender) {\n', '             uint256 bonus = value * REFERRAL_PERCENTS[3] / PERCENTS_DIVIDER;\n', '             interestBalance[_ref4] += uint64(bonus);\n', '             total += bonus;\n', '             emit OnRefBonus(msg.sender, _ref4, 3, bonus);\n', '         }\n', '\n', '         if (_ref5 != address(0) && _ref5 != msg.sender) {\n', '             uint256 bonus = value * REFERRAL_PERCENTS[4] / PERCENTS_DIVIDER;\n', '             interestBalance[_ref5] += uint64(bonus);\n', '             total += bonus;\n', '             emit OnRefBonus(msg.sender, _ref5, 4, bonus);\n', '         }\n', '\n', '         uint256 fee = value * FEE_PERCENT / PERCENTS_DIVIDER;\n', '         interestBalance[boss2] += uint64(fee);\n', '         interestBalance[boss1] += uint64(value - fee - total);\n', '\n', '         uint256 amount = getEstimation(value);\n', '\n', '         SST.freezeAndTransfer(msg.sender, amount, period);\n', '\n', '         emit OnBuy(msg.sender, value, amount, rate);\n', '     }\n', '\n', '     function withdraw(uint256 value) public {\n', '         require(value <= interestBalance[msg.sender], "Not enough balance");\n', '\n', '         interestBalance[msg.sender] -= uint64(value);\n', '         USDT.transfer(msg.sender, value);\n', '\n', '         emit OnWithdraw(msg.sender, value);\n', '     }\n', '\n', '     function setRate(uint128 newRate) public {\n', '         require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2 || msg.sender == boss3, "No access");\n', '         require(newRate > 0, "Invalid rate");\n', '\n', '         emit OnSetRate(msg.sender, rate, newRate);\n', '\n', '         rate = newRate;\n', '     }\n', '\n', '     function setMinimum(uint64 newMinimum) public {\n', '         require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2, "No access");\n', '         require(newMinimum > 0, "Invalid rate");\n', '\n', '         emit OnSetMinimum(msg.sender, minimum, newMinimum);\n', '\n', '         minimum = newMinimum;\n', '     }\n', '\n', '     function setPeriod(uint32 newPeriod) public {\n', '         require(msg.sender == boss1 || msg.sender == boss2 || msg.sender == boss3, "No access");\n', '         require(newPeriod > 0, "Invalid rate");\n', '\n', '         emit OnSetPeriod(msg.sender, period, newPeriod);\n', '\n', '         period = newPeriod;\n', '     }\n', '\n', '     function withdrawERC20(address ERC20Token, address recipient, uint256 value) external {\n', '         require(msg.sender == boss1 || msg.sender == boss2, "No access");\n', '\n', '         IERC20(ERC20Token).transfer(recipient, value);\n', '\n', '         emit OnWithdrawERC20(msg.sender, ERC20Token, value);\n', '     }\n', '\n', '     function switchState() public {\n', '         require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2, "No access");\n', '         active = !active;\n', '\n', '         emit OnSwitchState(msg.sender, active);\n', '     }\n', '\n', '     function deposeBoss1(address newBoss1) public {\n', '         require(msg.sender == boss1 || msg.sender == boss2, "No access");\n', '         require(newBoss1 != address(0), "Zero address");\n', '\n', '         emit OnBoss1Deposed(msg.sender, boss1, newBoss1);\n', '\n', '         boss1 = newBoss1;\n', '     }\n', '\n', '     function deposeBoss2(address newBoss2) public {\n', '         require(msg.sender == boss1 || msg.sender == boss2, "No access");\n', '         require(newBoss2 != address(0), "Zero address");\n', '\n', '         emit OnBoss2Deposed(msg.sender, boss2, newBoss2);\n', '\n', '         boss2 = newBoss2;\n', '     }\n', '\n', '     function deposeBoss3(address newBoss3) public {\n', '         require(msg.sender == owner() || msg.sender == boss1, "No access");\n', '         require(newBoss3 != address(0), "Zero address");\n', '\n', '         emit OnBoss3Deposed(msg.sender, boss3, newBoss3);\n', '\n', '         boss3 = newBoss3;\n', '     }\n', '\n', '     function getEstimation(uint256 amount) public view returns(uint256) {\n', '         uint256 result = amount * rate;\n', '         require(result >= amount);\n', '         return amount * rate;\n', '     }\n', '\n', '     function allowanceUSDT(address account) public view returns(uint256) {\n', '         return USDT.allowance(account, address(this));\n', '     }\n', '\n', '     function allowanceSST(address account) public view returns(uint256) {\n', '         return SST.allowance(account, address(this));\n', '     }\n', '\n', '     function balanceUSDT(address account) public view returns(uint256) {\n', '         return USDT.balanceOf(account);\n', '     }\n', '\n', '     function balanceSST(address account) public view returns(uint256) {\n', '         return SST.balanceOf(account);\n', '     }\n', '\n', ' }']