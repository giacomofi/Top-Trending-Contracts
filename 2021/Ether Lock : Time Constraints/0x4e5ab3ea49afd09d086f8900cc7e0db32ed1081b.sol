['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-28\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '    abstract contract Context {\n', '            function _msgSender() internal view virtual returns (address payable) {\n', '                return msg.sender;\n', '            }\n', '    \n', '            function _msgData() internal view virtual returns (bytes memory) {\n', '                this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '                return msg.data;\n', '            }\n', '        }\n', '    contract Ownable is Context {\n', '        address private _owner;\n', '    \n', '        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '        /**\n', '        * @dev Initializes the contract setting the deployer as the initial owner.\n', '        */\n', '        constructor () internal {\n', '            address msgSender = _msgSender();\n', '            _owner = msgSender;\n', '            emit OwnershipTransferred(address(0), msgSender);\n', '        }\n', '    \n', '        /**\n', '        * @dev Returns the address of the current owner.\n', '        */\n', '        function owner() public view returns (address) {\n', '            return _owner;\n', '        }\n', '    \n', '        /**\n', '        * @dev Throws if called by any account other than the owner.\n', '        */\n', '        modifier onlyOwner() {\n', '            require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '            _;\n', '        }\n', '    \n', '        /**\n', '        * @dev Leaves the contract without owner. It will not be possible to call\n', '        * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '        *\n', '        * NOTE: Renouncing ownership will leave the contract without an owner,\n', '        * thereby removing any functionality that is only available to the owner.\n', '        */\n', '        function renounceOwnership() public virtual onlyOwner {\n', '            emit OwnershipTransferred(_owner, address(0));\n', '            _owner = address(0);\n', '        }\n', '    \n', '        /**\n', '        * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '        * Can only be called by the current owner.\n', '        */\n', '        function transferOwnership(address newOwner) public virtual onlyOwner {\n', '            require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '            emit OwnershipTransferred(_owner, newOwner);\n', '            _owner = newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    contract DataStorage is Ownable{\n', '       \n', '        uint256 constant feeAdjusted = 10000;\n', '        struct PoolInfo{\n', '            address lpToken;\n', '            address stakingPool;\n', '        }\n', '\n', '        PoolInfo[] public poolInfo;\n', '        \n', '\n', '        constructor() public {\n', '        poolInfo.push(PoolInfo({\n', '                lpToken: 0x93567318aaBd27E21c52F766d2844Fc6De9Dc738,\n', '                stakingPool: 0x103cc17C2B1586e5Cd9BaD308690bCd0BBe54D5e})); \n', '        poolInfo.push(PoolInfo({\n', '                lpToken: 0x479A8666Ad530af3054209Db74F3C74eCd295f8D,\n', '                stakingPool: 0x4B2e76EbBc9f2923d83F5FBDe695D8733db1a17B}));\n', '        poolInfo.push(PoolInfo({\n', '                lpToken: 0xd59996055b5E0d154f2851A030E207E0dF0343B0,\n', '                stakingPool: 0x0C49066C0808Ee8c673553B7cbd99BCC9ABf113d}));\n', '        }\n', '\n', '        function poolLength() external view returns (uint256) {\n', '            return poolInfo.length;\n', '        }\n', '\n', '        function add(address _lpToken, address _stakingPool) public onlyOwner {\n', '            poolInfo.push(PoolInfo({\n', '                lpToken: _lpToken,\n', '                stakingPool: _stakingPool})); \n', '        }\n', '    }']