['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface ERC20 {\n', '    function decimals() external view returns (uint256 digits);\n', '}\n', '\n', 'interface ExchangeInterface {\n', '    function getExpectedRate(address src, address dest, uint256 srcQty)\n', '        external\n', '        view\n', '        returns (uint256 expectedRate);\n', '}\n', '\n', 'contract SaverExchangeConstantAddresses {\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '\n', '    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\n', '    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\n', '    address public constant OASIS_WRAPPER = 0x891f5A171f865031b0f3Eb9723bb8f68C901c9FE;\n', '\n', '    \n', '    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n', '}\n', '\n', 'contract BestPrice is SaverExchangeConstantAddresses {\n', '\n', '    function getBestPrice(\n', '        uint256 _amount,\n', '        address _srcToken,\n', '        address _destToken,\n', '        uint256 _exchangeType\n', '    ) public returns (address, uint256) {\n', '        uint256 expectedRateKyber;\n', '        uint256 expectedRateUniswap;\n', '        uint256 expectedRateOasis;\n', '\n', '        if (_exchangeType == 1) {\n', '            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount));\n', '        }\n', '\n', '        if (_exchangeType == 2) {\n', '            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount));\n', '        }\n', '\n', '        if (_exchangeType == 3) {\n', '            expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n', '            expectedRateUniswap = expectedRateUniswap * (10**(18 - getDecimals(_destToken)));\n', '            return (UNISWAP_WRAPPER, expectedRateUniswap);\n', '        }\n', '\n', '        expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount);\n', '        expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n', '        expectedRateUniswap = expectedRateUniswap * (10**(18 - getDecimals(_destToken)));\n', '        expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount);\n', '        expectedRateOasis = expectedRateOasis * (10**(18 - getDecimals(_destToken)));\n', '\n', '        if (\n', '            (expectedRateKyber >= expectedRateUniswap) && (expectedRateKyber >= expectedRateOasis)\n', '        ) {\n', '            return (KYBER_WRAPPER, expectedRateKyber);\n', '        }\n', '\n', '        if (\n', '            (expectedRateOasis >= expectedRateKyber) && (expectedRateOasis >= expectedRateUniswap)\n', '        ) {\n', '            return (OASIS_WRAPPER, expectedRateOasis);\n', '        }\n', '\n', '        if (\n', '            (expectedRateUniswap >= expectedRateKyber) && (expectedRateUniswap >= expectedRateOasis)\n', '        ) {\n', '            return (UNISWAP_WRAPPER, expectedRateUniswap);\n', '        }\n', '    }\n', '\n', '    function getExpectedRate(\n', '        address _wrapper,\n', '        address _srcToken,\n', '        address _destToken,\n', '        uint256 _amount\n', '    ) public returns (uint256) {\n', '        bool success;\n', '        bytes memory result;\n', '\n', '        (success, result) = _wrapper.call(\n', '            abi.encodeWithSignature(\n', '                "getExpectedRate(address,address,uint256)",\n', '                _srcToken,\n', '                _destToken,\n', '                _amount\n', '            )\n', '        );\n', '\n', '        if (success) {\n', '            return sliceUint(result, 0);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function getDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == address(0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A)) return 9;\n', '        if (_token == KYBER_ETH_ADDRESS) return 18;\n', '\n', '        return ERC20(_token).decimals();\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '\n', '    \n', '    function() external payable {}\n', '}']