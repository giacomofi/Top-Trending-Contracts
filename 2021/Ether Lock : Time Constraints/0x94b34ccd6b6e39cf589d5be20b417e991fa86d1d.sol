['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./CYAN_Complete.sol";\n', '\n', 'contract CYAN_ICO {\n', '\n', '    address public FLUSH_ADDR; //Where to send flushed ETH and CYAN\n', '    CYAN cyanContract; //CYAN contract object\n', '    uint256 public priceStart; //wei\n', '    uint256 public priceEnd; //wei\n', '    uint256 public icoStartTime; //in days\n', '    uint256 public icoEndTime; //in days\n', '    uint256 public cyanideSold = 0;\n', '    uint256 public ethCollected = 0;\n', '\n', '    event Sell(address _buyer, uint256 _amount);\n', '    event SaleStart(uint256 time);\n', '    event SaleEnd(uint256 time);\n', '    event PriceChange(uint256 price);\n', '    event FlushedCYN(uint amount);\n', '    event FlushedETH(uint amount);\n', '\n', '    //Called once when contract is deployed\n', '    constructor(address _cyanContractAddress, uint256 _priceStart, uint256 _priceEnd, uint256 _icoStartTime, uint256 _icoEndTime) {\n', '\n', '        //Ensure later values are greater than earlier values\n', '        require (_icoStartTime < _icoEndTime);\n', '        require (_priceStart < _priceEnd);\n', '\n', '        FLUSH_ADDR = msg.sender; //Assign flush address to contract deployer\n', '        cyanContract = CYAN(payable(_cyanContractAddress)); //Assign CYAN contract by address\n', '\n', '        priceStart = _priceStart; //INPUT IN WEI\n', '        priceEnd = _priceEnd; //INPUT IN WEI\n', '\n', '        icoStartTime = _icoStartTime; //INPUT IN DAYS\n', '        icoEndTime = _icoEndTime; // INPUT IN DAYS\n', '\n', '    }\n', '\n', '    function changeSettings(address _cyanContractAddress, uint256 _priceStart, uint256 _priceEnd, uint256 _icoStartTime, uint256 _icoEndTime) public {\n', '\n', '        require (msg.sender == FLUSH_ADDR, "Sender not FLUSH_ADDR");\n', '        require (_icoStartTime < _icoEndTime);\n', '        require (_priceStart < _priceEnd);\n', '\n', '        cyanContract = CYAN(payable(_cyanContractAddress)); //Assign CYAN contract by address\n', '\n', '        priceStart = _priceStart; //INPUT IN WEI\n', '        priceEnd = _priceEnd; //INPUT IN WEI\n', '\n', '        icoStartTime = _icoStartTime; //INPUT IN DAYS\n', '        icoEndTime = _icoEndTime; // INPUT IN DAYS\n', '\n', '    }\n', '\n', '    function getCurrentDay() view public returns (uint256) {\n', '        return ((block.timestamp / (1 days)) - icoStartTime);\n', '    }\n', '\n', '    function checkSaleEnabled() view public returns (bool) {\n', '        return ((block.timestamp / (1 days)) >= icoStartTime && (block.timestamp / (1 days)) <= icoEndTime);\n', '    }\n', '\n', '    //Returns start price if before ICO and end price if after ICO\n', '    function checkCurrentPrice() view public returns (uint256) {\n', '        if ((block.timestamp / (1 days)) < icoStartTime) {\n', '            return priceStart;\n', '        }\n', '        else if ((block.timestamp / (1 days)) > icoEndTime) {\n', '            return priceEnd;\n', '        }\n', '        else {\n', '            return priceStart + ((((block.timestamp / (1 days)) - icoStartTime) * (priceEnd-priceStart)) / (icoEndTime - icoStartTime));\n', '        }\n', '\n', '    }\n', '\n', '    function purchaseCYN(uint256 _amount) public payable {\n', '\n', '        //Ensure the purchase is correct\n', '        require(checkSaleEnabled(), "Sale not enabled");\n', '        uint256 price = checkCurrentPrice();\n', '        require(msg.value >= (_amount * price), "Not enough ETH sent");\n', '        require(cyanContract.balanceOf(address(this)) >= _amount, "Not enough CYAN left");\n', '        require(cyanContract.transfer(msg.sender, _amount), "CYAN could not be transferred");\n', '\n', '        //Update ICO trackers\n', '        cyanideSold += _amount;\n', '        ethCollected += msg.value;\n', '\n', '        Sell(msg.sender, _amount);\n', '\n', '    }\n', '\n', '    //Send all CYAN remaining in the contract to FLUSH_ADDR\n', '    function flushCYN() public {\n', '\n', '        require(msg.sender == FLUSH_ADDR, "Sender not FLUSH_ADDR");\n', '\n', '        uint256 bal = cyanContract.balanceOf(address(this));\n', '        require(cyanContract.transfer(FLUSH_ADDR, bal));\n', '\n', '        FlushedCYN(bal);\n', '\n', '    }\n', '\n', '    //Send all ETH remaining in the contract to FLUSH_ADDR\n', '    function flushETH() public {\n', '\n', '        require(msg.sender == FLUSH_ADDR, "Sender not FLUSH_ADDR");\n', '        require(address(this).balance != 0, "Currently no ETH in CYAN_ICO.");\n', '\n', '        uint256 bal = address(this).balance;\n', '        payable(FLUSH_ADDR).transfer(bal);\n', '\n', '        FlushedETH(bal);\n', '\n', '    }\n', '\n', '    //Backup functions\n', '    receive() external payable {}\n', '    fallback() external payable {}\n', '\n', '}']