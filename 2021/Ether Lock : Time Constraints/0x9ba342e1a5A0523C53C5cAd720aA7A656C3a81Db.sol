['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Pool {\n', '    using SafeMath for uint256;\n', '    \n', '    string public name;\n', '\n', '    uint256 public poolStart;\n', '    uint256 public poolEnd;\n', '\n', '    IERC20 public rewardToken;\n', '    IERC20 public stakeToken;\n', '\n', '    uint256 public rewardPerBlock;\n', '\n', '    uint256 public TOTAL_STAKED;\n', '\n', '    address private CONSTRUCTOR_ADDRESS;\n', '    address private TEAM_POOL;\n', '\n', '    mapping (address => uint256) private STAKED_AMOUNT;\n', '    mapping (address => uint256) private CUMULATED_REWARD;\n', '    mapping (address => uint256) private UPDATED_BLOCK;\n', '\n', '    constructor (\n', '        string memory _name,\n', '        uint256 _poolStart,\n', '        uint256 _poolEnd,\n', '        uint256 _rewardPerBlock,\n', '        address _rewardToken, \n', '        address _stakeToken,\n', '        address _teamPool\n', '    ) public {\n', '        rewardToken = IERC20(_rewardToken);\n', '        stakeToken = IERC20(_stakeToken);\n', '        name = _name;\n', '        poolStart = _poolStart;\n', '        poolEnd = _poolEnd;\n', '        rewardPerBlock = _rewardPerBlock;\n', '        TEAM_POOL = _teamPool;\n', '        CONSTRUCTOR_ADDRESS = msg.sender;\n', '    }\n', '\n', '    function claimAllReward () external{\n', '        _updateReward(msg.sender);\n', '        require(CUMULATED_REWARD[msg.sender] > 0, "Nothing to claim");\n', '        uint256 amount = CUMULATED_REWARD[msg.sender];\n', '        CUMULATED_REWARD[msg.sender] = 0;\n', '        rewardToken.transfer(msg.sender, amount);\n', '    }\n', '\n', '    function stake (uint256 amount) external {\n', '        uint256 oldBalance = stakeToken.balanceOf(address(this));\n', '        _updateReward(msg.sender);\n', '        stakeToken.transferFrom(msg.sender, address(this), amount);\n', "        require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');\n", '        STAKED_AMOUNT[msg.sender] = STAKED_AMOUNT[msg.sender].add(amount);\n', '        TOTAL_STAKED = TOTAL_STAKED.add(amount);\n', '    }\n', '\n', '    function claimAndUnstake (uint256 amount) external {\n', '        _updateReward(msg.sender);\n', '        if(CUMULATED_REWARD[msg.sender] > 0){\n', '            uint256 rewards = CUMULATED_REWARD[msg.sender];\n', '            CUMULATED_REWARD[msg.sender] = 0;\n', '            rewardToken.transfer(msg.sender, rewards);\n', '        }\n', '        _withdraw(msg.sender, amount);\n', '    }\n', '\n', '    function unstakeAll () external {\n', '        _updateReward(msg.sender);\n', '        _withdraw(msg.sender, STAKED_AMOUNT[msg.sender]);\n', '    }\n', '\n', '    function emergencyExit () external {\n', '        _withdraw(msg.sender, STAKED_AMOUNT[msg.sender]);\n', '    }\n', '\n', '    function inquiryDeposit (address host) external view returns (uint256) {\n', '        return STAKED_AMOUNT[host];\n', '    }\n', '    function inquiryRemainReward (address host) external view returns (uint256) {\n', '        return CUMULATED_REWARD[host];\n', '    }\n', '    function inquiryExpectedReward (address host) external view returns (uint256) {\n', '        return _calculateEarn(\n', '            _max(0, _elapsedBlock(UPDATED_BLOCK[host])), \n', '            STAKED_AMOUNT[host]\n', '        ).mul(95).div(100).add(CUMULATED_REWARD[host]);\n', '    }\n', '\n', '    function _withdraw (address host, uint256 amount) internal {\n', '        STAKED_AMOUNT[host] = STAKED_AMOUNT[host].sub(amount);\n', '        require(STAKED_AMOUNT[host] >= 0);\n', '        TOTAL_STAKED = TOTAL_STAKED.sub(amount);\n', '        stakeToken.transfer(host, amount);\n', '    }\n', '\n', '    function _updateReward (address host) internal {\n', '        uint256 elapsed = _elapsedBlock(UPDATED_BLOCK[host]);\n', '        if(elapsed <= 0){return;}\n', '        UPDATED_BLOCK[host] = block.number;\n', '        uint256 baseEarned = _calculateEarn(elapsed, STAKED_AMOUNT[host]);\n', '        CUMULATED_REWARD[host] = baseEarned.mul(95).div(100).add(CUMULATED_REWARD[host]);\n', '        CUMULATED_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100).add(CUMULATED_REWARD[TEAM_POOL]);\n', '    }\n', '\n', '    function _elapsedBlock (uint256 updated) internal view returns (uint256) {\n', '        uint256 open = _max(updated, poolStart);\n', '        uint256 close = _min(block.number, poolEnd);\n', '        return open >= close ? 0 : close - open;\n', '    }\n', '\n', '    function _calculateEarn (uint256 elapsed, uint256 staked) internal view returns (uint256) {\n', '        if(staked == 0){return 0;}\n', '        return elapsed.mul(staked).mul(rewardPerBlock).div(TOTAL_STAKED);\n', '    }\n', '\n', '\n', '    function _max(uint a, uint b) private pure returns (uint) {\n', '        return a > b ? a : b;\n', '    }\n', '    function _min(uint a, uint b) private pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '}']