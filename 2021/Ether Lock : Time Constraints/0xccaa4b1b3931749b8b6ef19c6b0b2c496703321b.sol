['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface CTokenInterface {\n', '    function exchangeRateStored() external view returns (uint);\n', '    function borrowRatePerBlock() external view returns (uint);\n', '    function supplyRatePerBlock() external view returns (uint);\n', '    function borrowBalanceStored(address) external view returns (uint);\n', '    function totalBorrows() external view returns (uint);\n', '    \n', '    function underlying() external view returns (address);\n', '    function balanceOf(address) external view returns (uint);\n', '    function getCash() external view returns (uint);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function decimals() external view returns (uint);\n', '    function balanceOf(address) external view returns (uint);\n', '}\n', '\n', '\n', 'interface OrcaleComp {\n', '    function getUnderlyingPrice(address) external view returns (uint);\n', '}\n', '\n', 'interface ComptrollerLensInterface {\n', '    function markets(address) external view returns (bool, uint, bool);\n', '    function getAccountLiquidity(address) external view returns (uint, uint, uint);\n', '    function claimComp(address) external;\n', '    function compAccrued(address) external view returns (uint);\n', '    function borrowCaps(address) external view returns (uint);\n', '    function borrowGuardianPaused(address) external view returns (bool);\n', '    function oracle() external view returns (address);\n', '    function compSpeeds(address) external view returns (uint);\n', '}\n', '\n', 'interface CompReadInterface {\n', '    struct CompBalanceMetadataExt {\n', '        uint balance;\n', '        uint votes;\n', '        address delegate;\n', '        uint allocated;\n', '    }\n', '\n', '    function getCompBalanceMetadataExt(\n', '        TokenInterface comp,\n', '        ComptrollerLensInterface comptroller,\n', '        address account\n', '    ) external returns (CompBalanceMetadataExt memory);\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '}\n', '\n', 'contract Helpers is DSMath {\n', '    /**\n', '     * @dev get Compound Comptroller\n', '     */\n', '    function getComptroller() public pure returns (ComptrollerLensInterface) {\n', '        return ComptrollerLensInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n', '    }\n', '\n', '    /**\n', '     * @dev get Compound Open Feed Oracle Address\n', '     */\n', '    function getOracleAddress() public view returns (address) {\n', '        return getComptroller().oracle();\n', '    }\n', '\n', '    /**\n', '     * @dev get Comp Read Address\n', '     */\n', '    function getCompReadAddress() public pure returns (address) {\n', '        return 0xd513d22422a3062Bd342Ae374b4b9c20E0a9a074;\n', '    }\n', '\n', '    /**\n', '     * @dev get ETH Address\n', '     */\n', '    function getCETHAddress() public pure returns (address) {\n', '        return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '    }\n', '\n', '    /**\n', '     * @dev get Comp Token Address\n', '     */\n', '    function getCompToken() public pure returns (TokenInterface) {\n', '        return TokenInterface(0xc00e94Cb662C3520282E6f5717214004A7f26888);\n', '    }\n', '\n', '\n', '    struct CompData {\n', '        uint tokenPriceInEth;\n', '        uint tokenPriceInUsd;\n', '        uint exchangeRateStored;\n', '        uint balanceOfUser;\n', '        uint borrowBalanceStoredUser;\n', '        uint totalBorrows;\n', '        uint totalSupplied;\n', '        uint borrowCap;\n', '        uint supplyRatePerBlock;\n', '        uint borrowRatePerBlock;\n', '        uint collateralFactor;\n', '        uint compSpeed;\n', '        bool isComped;\n', '        bool isBorrowPaused;\n', '    }\n', '}\n', '\n', '\n', 'contract Resolver is Helpers {\n', '\n', '    function getPriceInEth(CTokenInterface cToken) public view returns (uint priceInETH, uint priceInUSD) {\n', '        uint decimals = getCETHAddress() == address(cToken) ? 18 : TokenInterface(cToken.underlying()).decimals();\n', '        uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(address(cToken));\n', '        uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());\n', '        priceInUSD = price / 10 ** (18 - decimals);\n', '        priceInETH = wdiv(priceInUSD, ethPrice);\n', '    }\n', '\n', '    function getCompoundData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {\n', '        CompData[] memory tokensData = new CompData[](cAddress.length);\n', '        ComptrollerLensInterface troller = getComptroller();\n', '        for (uint i = 0; i < cAddress.length; i++) {\n', '            CTokenInterface cToken = CTokenInterface(cAddress[i]);\n', '            (uint priceInETH, uint priceInUSD) = getPriceInEth(cToken);\n', '            (,uint collateralFactor, bool isComped) = troller.markets(address(cToken));\n', '            uint _totalBorrowed = cToken.totalBorrows();\n', '            tokensData[i] = CompData(\n', '                priceInETH,\n', '                priceInUSD,\n', '                cToken.exchangeRateStored(),\n', '                cToken.balanceOf(owner),\n', '                cToken.borrowBalanceStored(owner),\n', '                _totalBorrowed,\n', '                add(_totalBorrowed, cToken.getCash()),\n', '                troller.borrowCaps(cAddress[i]),\n', '                cToken.supplyRatePerBlock(),\n', '                cToken.borrowRatePerBlock(),\n', '                collateralFactor,\n', '                troller.compSpeeds(cAddress[i]),\n', '                isComped,\n', '                troller.borrowGuardianPaused(cAddress[i])\n', '            );\n', '        }\n', '\n', '        return tokensData;\n', '    }\n', '\n', '    function getPosition(\n', '        address owner,\n', '        address[] memory cAddress\n', '    )\n', '        public\n', '        returns (CompData[] memory, CompReadInterface.CompBalanceMetadataExt memory)\n', '    {\n', '        return (\n', '            getCompoundData(owner, cAddress),\n', '            CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(\n', '                getCompToken(),\n', '                getComptroller(),\n', '                owner\n', '            )\n', '        );\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract InstaCompoundResolver is Resolver {\n', '    string public constant name = "Compound-Resolver-v1.4";\n', '}']