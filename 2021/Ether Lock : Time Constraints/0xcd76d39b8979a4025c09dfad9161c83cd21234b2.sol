['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafuInvestmentsPresale.sol";\n', 'import "./SafuInvestmentsInfo.sol";\n', 'import "./SafuInvestmentsLiquidityLock.sol";\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'contract SafuInvestmentsFactory {\n', '    using SafeMath for uint256;\n', '\n', '    event PresaleCreated(bytes32 title, uint256 safuId, address creator);\n', '\n', '    IUniswapV2Factory private constant uniswapFactory =\n', '        IUniswapV2Factory(address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f));\n', '    address private constant wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    SafuInvestmentsInfo public immutable SAFU;\n', '\n', '    constructor(address _safuInfoAddress) public {\n', '        SAFU = SafuInvestmentsInfo(_safuInfoAddress);\n', '    }\n', '\n', '    struct PresaleInfo {\n', '        address tokenAddress;\n', '        address unsoldTokensDumpAddress;\n', '        address[] whitelistedAddresses;\n', '        uint256 tokenPriceInWei;\n', '        uint256 hardCapInWei;\n', '        uint256 softCapInWei;\n', '        uint256 maxInvestInWei;\n', '        uint256 minInvestInWei;\n', '        uint256 openTime;\n', '        uint256 closeTime;\n', '    }\n', '\n', '    struct PresaleUniswapInfo {\n', '        uint256 listingPriceInWei;\n', '        uint256 liquidityAddingTime;\n', '        uint256 lpTokensLockDurationInDays;\n', '        uint256 liquidityPercentageAllocation;\n', '    }\n', '\n', '    struct PresaleStringInfo {\n', '        bytes32 saleTitle;\n', '        bytes32 linkTelegram;\n', '        bytes32 linkDiscord;\n', '        bytes32 linkTwitter;\n', '        bytes32 linkWebsite;\n', '    }\n', '\n', '    // copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function uniV2LibPairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    function initializePresale(\n', '        SafuInvestmentsPresale _presale,\n', '        uint256 _totalTokens,\n', '        uint256 _finalTokenPriceInWei,\n', '        PresaleInfo calldata _info,\n', '        PresaleUniswapInfo calldata _uniInfo,\n', '        PresaleStringInfo calldata _stringInfo\n', '    ) internal {\n', '        _presale.setAddressInfo(msg.sender, _info.tokenAddress, _info.unsoldTokensDumpAddress);\n', '        _presale.setGeneralInfo(\n', '            _totalTokens,\n', '            _finalTokenPriceInWei,\n', '            _info.hardCapInWei,\n', '            _info.softCapInWei,\n', '            _info.maxInvestInWei,\n', '            _info.minInvestInWei,\n', '            _info.openTime,\n', '            _info.closeTime\n', '        );\n', '        _presale.setUniswapInfo(\n', '            _uniInfo.listingPriceInWei,\n', '            _uniInfo.liquidityAddingTime,\n', '            _uniInfo.lpTokensLockDurationInDays,\n', '            _uniInfo.liquidityPercentageAllocation\n', '        );\n', '        _presale.setStringInfo(\n', '            _stringInfo.saleTitle,\n', '            _stringInfo.linkTelegram,\n', '            _stringInfo.linkDiscord,\n', '            _stringInfo.linkTwitter,\n', '            _stringInfo.linkWebsite\n', '        );\n', '\n', '        _presale.addwhitelistedAddresses(_info.whitelistedAddresses);\n', '    }\n', '\n', '    function createPresale(\n', '        PresaleInfo calldata _info,\n', '        PresaleUniswapInfo calldata _uniInfo,\n', '        PresaleStringInfo calldata _stringInfo\n', '    ) external {\n', '        IERC20 token = IERC20(_info.tokenAddress);\n', '\n', '        SafuInvestmentsPresale presale = new SafuInvestmentsPresale(address(this), SAFU.owner());\n', '\n', '        address existingPairAddress = uniswapFactory.getPair(address(token), wethAddress);\n', '        require(existingPairAddress == address(0)); // token should not be listed in Uniswap\n', '\n', '        uint256 maxEthPoolTokenAmount = _info.hardCapInWei.mul(_uniInfo.liquidityPercentageAllocation).div(100);\n', '        uint256 maxLiqPoolTokenAmount = maxEthPoolTokenAmount.mul(1e18).div(_uniInfo.listingPriceInWei);\n', '\n', '        uint256 maxTokensToBeSold = _info.hardCapInWei.mul(1e18).div(_info.tokenPriceInWei);\n', '        uint256 requiredTokenAmount = maxLiqPoolTokenAmount.add(maxTokensToBeSold);\n', '        token.transferFrom(msg.sender, address(presale), requiredTokenAmount);\n', '\n', '        initializePresale(presale, maxTokensToBeSold, _info.tokenPriceInWei, _info, _uniInfo, _stringInfo);\n', '\n', '        address pairAddress = uniV2LibPairFor(address(uniswapFactory), address(token), wethAddress);\n', '        SafuInvestmentsLiquidityLock liquidityLock = new SafuInvestmentsLiquidityLock(\n', '                IERC20(pairAddress),\n', '                msg.sender,\n', '                _uniInfo.liquidityAddingTime + (_uniInfo.lpTokensLockDurationInDays * 1 days)\n', '            );\n', '\n', '        uint256 safuId = SAFU.addPresaleAddress(address(presale));\n', '        presale.setSafuInfo(address(liquidityLock), SAFU.getDevFeePercentage(), SAFU.getMinDevFeeInWei(), safuId);\n', '\n', '        emit PresaleCreated(_stringInfo.saleTitle, safuId, msg.sender);\n', '    }\n', '}']