['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-13\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract ComptrollerLike {\n', '    function getAssetsIn(address account) public view returns(address[] memory);\n', '}\n', '\n', 'contract BComptrollerLike {\n', '    function c2b(address ctoken) public view returns(address);\n', '}\n', '\n', 'contract RegistryLike {\n', '    function getAvatar(address user) public returns(address);\n', '}\n', '\n', 'contract UserInfoLike {\n', '    struct TokenInfo {\n', '        address[] btoken;\n', '        address[] ctoken;\n', '        uint[] ctokenDecimals;\n', '        address[] underlying;\n', '        uint[] underlyingDecimals;\n', '        uint[] ctokenExchangeRate;\n', '        uint[] underlyingPrice;\n', '        uint[] borrowRate;\n', '        uint[] supplyRate;\n', '        bool[] listed;\n', '        uint[] collateralFactor;\n', '        uint[] bTotalSupply;\n', '    }\n', '    \n', '    struct PerUserInfo {\n', '        uint[] ctokenBalance;\n', '        uint[] ctokenBorrowBalance;\n', '        uint[] underlyingWalletBalance;\n', '        uint[] underlyingAllowance;\n', '    }\n', '\n', '    struct ScoreInfo {\n', '        uint userScore;\n', '        uint userScoreProgressPerSec;        \n', '        uint totalScore;\n', '    }\n', '\n', '    struct ImportInfo {\n', '        address avatar;\n', '        uint[]  ctokenAllowance;\n', '        uint    availableEthBalance; \n', '    }\n', '\n', '    struct CompTokenInfo {\n', '        uint    compBalance;\n', '        address comp;\n', '    }\n', '\n', '    struct JarInfo {\n', '        uint[] ctokenBalance;\n', '    }\n', '    \n', '    struct TvlInfo {\n', '        uint numAccounts;\n', '        uint[] ctokenBalance;\n', '    }\n', '\n', '    struct Info {\n', '        TokenInfo     tokenInfo;\n', '        PerUserInfo   cUser; // data on compound\n', '        PerUserInfo   bUser; // data on B\n', '        ImportInfo    importInfo;\n', '        ScoreInfo     scoreInfo;\n', '        CompTokenInfo compTokenInfo;\n', '        JarInfo       jarInfo;\n', '        TvlInfo       tvlInfo;\n', '    }\n', '    \n', '    function getTokenInfo(address comptroller, address bComptroller) public returns(TokenInfo memory info);\n', '    function getPerUserInfo(address user, address[] memory ctoken, address[] memory assetsIn, address[] memory underlying) public returns(PerUserInfo memory info);\n', '    function getImportInfo(address user, address[] memory ctoken, address registry, address sugarDaddy) public returns(ImportInfo memory info);\n', '    function getScoreInfo(address user, address jarConnector) public view returns(ScoreInfo memory info);\n', '    function getCompTokenInfo(address user, address comptroller, address registry) public returns(CompTokenInfo memory info);\n', '    function getJarInfo(address jar, address[] memory ctoken) public returns(JarInfo memory info);\n', '    function getTvlInfo(address[] memory ctokens, address registry) public returns(TvlInfo memory info);\n', '}\n', '\n', 'contract UserInfo {\n', '    UserInfoLike constant USER_INFO = UserInfoLike(0x907403DA04EB05EFd47eB0BA0C7a7d00d4f233EA);\n', '    \n', '    function getUserInfo(address user,\n', '                         address comptroller,\n', '                         address bComptroller,\n', '                         address registry,\n', '                         address sugarDaddy,\n', '                         address jarConnector,\n', '                         address jar,\n', '                         bool    getTvl) public returns(UserInfoLike.Info memory info) {\n', '        info.tokenInfo = USER_INFO.getTokenInfo(comptroller, bComptroller);\n', '        // check which assets are in\n', '        address avatar = RegistryLike(registry).getAvatar(user);\n', '        address[] memory assetsIn = ComptrollerLike(comptroller).getAssetsIn(avatar);\n', '        address[] memory bAssetsIn = new address[](assetsIn.length);\n', '        for(uint i = 0 ; i < assetsIn.length ; i++) {\n', '            bAssetsIn[i] = BComptrollerLike(bComptroller).c2b(assetsIn[i]);\n', '        }\n', '        info.bUser = USER_INFO.getPerUserInfo(user, info.tokenInfo.btoken, bAssetsIn, info.tokenInfo.underlying);\n', '        // all tokens are assumed to be in - since we want to import all of them\n', '        info.cUser = USER_INFO.getPerUserInfo(user, info.tokenInfo.ctoken, info.tokenInfo.ctoken, info.tokenInfo.underlying);\n', '        info.importInfo = USER_INFO.getImportInfo(user, info.tokenInfo.ctoken, registry, sugarDaddy);\n', '\n', '        info.scoreInfo = USER_INFO.getScoreInfo(user, jarConnector);\n', '        info.compTokenInfo = USER_INFO.getCompTokenInfo(user, comptroller, registry);\n', '        info.jarInfo = USER_INFO.getJarInfo(jar, info.tokenInfo.ctoken);\n', '        if(getTvl) info.tvlInfo = USER_INFO.getTvlInfo(info.tokenInfo.ctoken, registry);\n', '    }\n', '}']