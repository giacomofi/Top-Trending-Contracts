['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./MerkleProof.sol";\n', '\n', 'import "./MerkleDistributor.sol";\n', '\n', 'contract MerkleDistributorWithRecover is MerkleDistributor {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address immutable public owner;\n', '    uint256 immutable public startTime;\n', '    uint256 constant public DELAY = 1 days * 45;\n', '\n', '    constructor(address owner_, address token_, bytes32 merkleRoot_) MerkleDistributor(token_, merkleRoot_) {\n', '        owner = owner_;\n', '        startTime = block.timestamp;\n', '    }\n', '\n', '    function recoverERC20(address _token) public {\n', '        require(msg.sender == owner, "only-owner");\n', '        require(block.timestamp >= startTime + DELAY, "not-recoverable");\n', '\n', '        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}']