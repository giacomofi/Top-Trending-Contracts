['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', 'pragma solidity =0.8.0;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) { c = a + b; require(c >= a); }\n', '    function sub(uint a, uint b) internal pure returns (uint c) { require(a >= b); c = a - b; }\n', '    function mul(uint a, uint b) internal pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); }\n', '    function div(uint a, uint b) internal pure returns (uint c) { require(b > 0); c = a / b; }\n', '}\n', '\n', '\n', 'contract NBU_WETH {\n', '    using SafeMath for uint;\n', '    string public name     = "Nimbus Wrapped Ether";\n', '    string public symbol   = "NWETH";\n', '    uint8  public decimals = 18;\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint wad);\n', '    event  Deposit(address indexed dst, uint wad);\n', '    event  Withdrawal(address indexed src, uint wad);\n', '\n', '    mapping (address => uint)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint))  public  allowance;\n', '    \n', '    receive() payable external {\n', '        deposit();\n', '    }\n', '    \n', '    function deposit() public payable {\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(msg.value);\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function withdraw(uint wad) public {\n', '        require(balanceOf[msg.sender] >= wad);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(wad);\n', '        payable(msg.sender).transfer(wad);\n', '        emit Withdrawal(msg.sender, wad);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        emit Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n', '        require(balanceOf[src] >= wad);\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(2 ** 256-1 )) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] -= wad;\n', '        }\n', '        balanceOf[src] = balanceOf[src].sub(wad);\n', '        balanceOf[dst] = balanceOf[dst].add(wad);\n', '        emit Transfer(src, dst, wad);\n', '        return true;\n', '    }    \n', '}']