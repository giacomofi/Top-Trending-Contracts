['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-06\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract LiquidationEngineLike {\n', '    function addAuthorization(address) external virtual;\n', '    function currentOnAuctionSystemCoins() virtual public view returns (uint256);\n', '    function modifyParameters(bytes32, uint256) virtual external;    \n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '    function setTotalAllowance(address, uint256) external virtual;\n', '    function setPerBlockAllowance(address, uint256) external virtual;    \n', '}\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function globalDebt() virtual public view returns (uint256);\n', '    function globalUnbackedDebt() virtual public view returns (uint256);\n', '    function coinBalance(address) virtual public view returns (uint256);\n', '}\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\n', '    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        // If the rewards are null or if the time of the last update is in the future or present, return 0\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '\n', '        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '\n', '        // If too much time elapsed, return the max reward\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '\n', '        // Calculate the reward\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '\n', '        // If the reward is higher than max, set it to max\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '\n', '        // Determine the actual receiver and send funds\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'contract CollateralAuctionThrottler is IncreasingTreasuryReimbursement {\n', '    // --- Variables ---\n', '    // Minimum delay between consecutive updates\n', '    uint256 public updateDelay;                     // [seconds]\n', '    // Delay since the last update time after which backupLimitRecompute can be called\n', '    uint256 public backupUpdateDelay;               // [seconds]\n', '    // Percentage of global debt taken into account in order to set LiquidationEngine.onAuctionSystemCoinLimit\n', '    uint256 public globalDebtPercentage;            // [hundred]\n', '    // The minimum auction limit\n', '    uint256 public minAuctionLimit;                 // [rad]\n', '    // Last timestamp when the onAuctionSystemCoinLimit was updated\n', '    uint256 public lastUpdateTime;                  // [unix timestamp]\n', '\n', '    LiquidationEngineLike    public liquidationEngine;\n', '    SAFEEngineLike           public safeEngine;\n', '\n', '    // List of surplus holders\n', '    address[]                public surplusHolders;\n', '\n', '    constructor(\n', '      address safeEngine_,\n', '      address liquidationEngine_,\n', '      address treasury_,\n', '      uint256 updateDelay_,\n', '      uint256 backupUpdateDelay_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_,\n', '      uint256 globalDebtPercentage_,\n', '      address[] memory surplusHolders_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        require(safeEngine_ != address(0), "CollateralAuctionThrottler/null-safe-engine");\n', '        require(liquidationEngine_ != address(0), "CollateralAuctionThrottler/null-liquidation-engine");\n', '        require(updateDelay_ > 0, "CollateralAuctionThrottler/null-update-delay");\n', '        require(backupUpdateDelay_ > updateDelay_, "CollateralAuctionThrottler/invalid-backup-update-delay");\n', '        require(both(globalDebtPercentage_ > 0, globalDebtPercentage_ <= HUNDRED), "CollateralAuctionThrottler/invalid-global-debt-percentage");\n', '        require(surplusHolders_.length <= HOLDERS_ARRAY_LIMIT, "CollateralAuctionThrottler/invalid-holder-array-length");\n', '\n', '        safeEngine             = SAFEEngineLike(safeEngine_);\n', '        liquidationEngine      = LiquidationEngineLike(liquidationEngine_);\n', '        updateDelay            = updateDelay_;\n', '        backupUpdateDelay      = backupUpdateDelay_;\n', '        globalDebtPercentage   = globalDebtPercentage_;\n', '        surplusHolders         = surplusHolders_;\n', '\n', '        emit ModifyParameters(bytes32("updateDelay"), updateDelay);\n', '        emit ModifyParameters(bytes32("globalDebtPercentage"), globalDebtPercentage);\n', '        emit ModifyParameters(bytes32("backupUpdateDelay"), backupUpdateDelay);\n', '    }\n', '\n', '    // --- Math ---\n', '    uint256 internal constant ONE                 = 1;\n', '    uint256 internal constant HOLDERS_ARRAY_LIMIT = 10;\n', '    uint256 internal constant HUNDRED             = 100;\n', '\n', '    // --- Boolean Logic ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Administration ---\n', '    /*\n', '    * @notify Modify a uint256 parameter\n', '    * @param parameter The name of the parameter to modify\n', '    * @param data The new parameter value\n', '    */\n', '    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n', '        if (parameter == "baseUpdateCallerReward") {\n', '          require(data <= maxUpdateCallerReward, "CollateralAuctionThrottler/invalid-min-reward");\n', '          baseUpdateCallerReward = data;\n', '        }\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(data >= baseUpdateCallerReward, "CollateralAuctionThrottler/invalid-max-reward");\n', '          maxUpdateCallerReward = data;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(data >= RAY, "CollateralAuctionThrottler/invalid-reward-increase");\n', '          perSecondCallerRewardIncrease = data;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(data > 0, "CollateralAuctionThrottler/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = data;\n', '        }\n', '        else if (parameter == "updateDelay") {\n', '          require(data > 0, "CollateralAuctionThrottler/null-update-delay");\n', '          updateDelay = data;\n', '        }\n', '        else if (parameter == "backupUpdateDelay") {\n', '          require(data > updateDelay, "CollateralAuctionThrottler/invalid-backup-update-delay");\n', '          backupUpdateDelay = data;\n', '        }\n', '        else if (parameter == "globalDebtPercentage") {\n', '          require(both(data > 0, data <= HUNDRED), "CollateralAuctionThrottler/invalid-global-debt-percentage");\n', '          globalDebtPercentage = data;\n', '        }\n', '        else if (parameter == "minAuctionLimit") {\n', '          minAuctionLimit = data;\n', '        }\n', '        else revert("CollateralAuctionThrottler/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, data);\n', '    }\n', '    /*\n', '    * @notify Modify the address of a contract param\n', '    * @param parameter The name of the parameter to change the address for\n', '    * @param addr The new address\n', '    */\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        require(addr != address(0), "CollateralAuctionThrottler/null-addr");\n', '        if (parameter == "treasury") {\n', '          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), "CollateralAuctionThrottler/treasury-coin-not-set");\n', '      \t  treasury = StabilityFeeTreasuryLike(addr);\n', '        }\n', '        else if (parameter == "liquidationEngine") {\n', '          liquidationEngine = LiquidationEngineLike(addr);\n', '        }\n', '        else revert("CollateralAuctionThrottler/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, addr);\n', '    }\n', '\n', '    // --- Recompute Logic ---\n', '    /*\n', '    * @notify Recompute and set the new onAuctionSystemCoinLimit\n', '    * @param feeReceiver The address that will receive the reward for recomputing the onAuctionSystemCoinLimit\n', '    */\n', '    function recomputeOnAuctionSystemCoinLimit(address feeReceiver) public {\n', '        // Check delay between calls\n', '        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), "CollateralAuctionThrottler/wait-more");\n', "        // Get the caller's reward\n", '        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\n', '        // Store the timestamp of the update\n', '        lastUpdateTime = now;\n', '        // Compute total surplus\n', '        uint256 totalSurplus;\n', '        for (uint i = 0; i < surplusHolders.length; i++) {\n', '          totalSurplus = addition(totalSurplus, safeEngine.coinBalance(surplusHolders[i]));\n', '        }\n', '        // Remove surplus from global debt\n', '        uint256 rawGlobalDebt               = subtract(safeEngine.globalDebt(), totalSurplus);\n', '        rawGlobalDebt                       = subtract(rawGlobalDebt, safeEngine.globalUnbackedDebt());\n', '        // Calculate and set the onAuctionSystemCoinLimit\n', '        uint256 newAuctionLimit             = multiply(rawGlobalDebt / HUNDRED, globalDebtPercentage);\n', '        uint256 currentOnAuctionSystemCoins = liquidationEngine.currentOnAuctionSystemCoins();\n', '        newAuctionLimit                     = (newAuctionLimit <= minAuctionLimit) ? minAuctionLimit : newAuctionLimit;\n', '        newAuctionLimit                     = (newAuctionLimit == 0) ? uint(-1) : newAuctionLimit;\n', '        newAuctionLimit                     = (newAuctionLimit < currentOnAuctionSystemCoins) ? currentOnAuctionSystemCoins : newAuctionLimit;\n', '        liquidationEngine.modifyParameters("onAuctionSystemCoinLimit", newAuctionLimit);\n', '        // Pay the caller for updating the rate\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '    /*\n', '    * @notify Backup function for recomputing the onAuctionSystemCoinLimit in case of a severe delay since the last update\n', '    */\n', '    function backupRecomputeOnAuctionSystemCoinLimit() public {\n', '        // Check delay between calls\n', '        require(both(subtract(now, lastUpdateTime) >= backupUpdateDelay, lastUpdateTime > 0), "CollateralAuctionThrottler/wait-more");\n', '        // Store the timestamp of the update\n', '        lastUpdateTime = now;\n', '        // Set the onAuctionSystemCoinLimit\n', '        liquidationEngine.modifyParameters("onAuctionSystemCoinLimit", uint(-1));\n', '    }\n', '}\n', '\n', 'contract DeployCollateralAuctionThottler {\n', '    // --- Variables ---\n', '    uint256 public constant RAY = 10**27;\n', '    uint256 public constant RAD = 10**45;\n', '\n', '    function execute(\n', '        address _safeEngine,\n', '        address _liquidationEngine,\n', '        address _treasury\n', '    ) public returns (address) {\n', '        // Define params\n', '        uint256 updateDelay                   = 1 weeks;\n', '        uint256 backupUpdateDelay             = 8 days;\n', '        uint256 maxRewardIncreaseDelay        = 3 hours;\n', '        uint256 baseUpdateCallerReward        = 0;\n', '        uint256 maxUpdateCallerReward         = 10 ether;\n', '        uint256 perSecondCallerRewardIncrease = RAY;\n', '        uint256 globalDebtPercentage          = 20;\n', '        uint256 minAuctionLimit               = 500000 * RAD;\n', '\n', '        address[] memory surplusHolders;\n', '\n', '        // deploy the throttler\n', '        CollateralAuctionThrottler throttler = new CollateralAuctionThrottler(\n', '            _safeEngine,\n', '            _liquidationEngine,\n', '            _treasury,\n', '            updateDelay,\n', '            backupUpdateDelay,\n', '            baseUpdateCallerReward,\n', '            maxUpdateCallerReward,\n', '            perSecondCallerRewardIncrease,\n', '            globalDebtPercentage,\n', '            surplusHolders\n', '        );\n', '\n', '        // setting params\n', '        throttler.modifyParameters("maxRewardIncreaseDelay", maxRewardIncreaseDelay);\n', '        throttler.modifyParameters("minAuctionLimit", minAuctionLimit);\n', '\n', '        // setting allowances in the SF treasury\n', '        StabilityFeeTreasuryLike(_treasury).setPerBlockAllowance(address(throttler), maxUpdateCallerReward * RAY);\n', '        StabilityFeeTreasuryLike(_treasury).setTotalAllowance(address(throttler), uint(-1));\n', '\n', '        // auth throttler in LiquidationEngine\n', '        LiquidationEngineLike(_liquidationEngine).addAuthorization(address(throttler));\n', '\n', '        return address(throttler);\n', '    }\n', '}']