['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'library SafeMathLib {\n', '  function times(uint a, uint b) public pure returns (uint) {\n', '    uint c = a * b;\n', "    require(a == 0 || c / a == b, 'Overflow detected');\n", '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) public pure returns (uint) {\n', "    require(b <= a, 'Underflow detected');\n", '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) public pure returns (uint) {\n', '    uint c = a + b;\n', "    require(c>=a && c>=b, 'Overflow detected');\n", '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract MostBasicYield {\n', '    using SafeMathLib for uint;\n', '\n', '    struct Receipt {\n', '        uint id;\n', '        uint amountDeposited;\n', '        uint timeDeposited;\n', '        uint timeWithdrawn;\n', '        address owner;\n', '    }\n', '\n', '    uint[] public tokensPerSecondPerToken;\n', '    uint public maximumDeposit;\n', '    uint public totalDeposits = 0;\n', '    uint[] public rewardsClaimed;\n', '    uint public numReceipts = 0;\n', '    uint public startTime;\n', '    uint public endTime;\n', '\n', '    address public management;\n', '\n', '    IERC20 public depositToken;\n', '    IERC20[] public rewardTokens;\n', '    mapping (uint => Receipt) public receipts;\n', '\n', '    event DepositOccurred(uint indexed id, address indexed owner);\n', '    event WithdrawalOccurred(uint indexed id, address indexed owner);\n', '    event ExcessRewardsWithdrawn();\n', '\n', '    constructor(\n', '        uint _startTime,\n', '        uint maxDeposit,\n', '        uint[] memory rewards,\n', '        uint programLengthDays,\n', '        address depositTokenAddress,\n', '        address[] memory rewardTokenAddresses,\n', '        address mgmt)\n', '    {\n', '        tokensPerSecondPerToken = rewards;\n', '        startTime = _startTime > 0 ? _startTime : block.timestamp;\n', '        endTime = startTime.plus(programLengthDays * 1 days);\n', '        depositToken = IERC20(depositTokenAddress);\n', "        require(tokensPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n", '\n', '        for (uint i = 0; i < rewardTokenAddresses.length; i++) {\n', '            rewardTokens.push(IERC20(rewardTokenAddresses[i]));\n', '            rewardsClaimed.push(0);\n', '        }\n', '\n', '        maximumDeposit = maxDeposit;\n', '        management = mgmt;\n', '    }\n', '\n', '    function getRewards(uint receiptId) public view returns (uint[] memory) {\n', '        Receipt memory receipt = receipts[receiptId];\n', '        uint nowish = block.timestamp;\n', '        if (nowish > endTime) {\n', '            nowish = endTime;\n', '        }\n', '\n', '        uint secondsDiff = nowish.minus(receipt.timeDeposited);\n', '        uint[] memory rewardsLocal = new uint[](tokensPerSecondPerToken.length);\n', '        for (uint i = 0; i < tokensPerSecondPerToken.length; i++) {\n', '            rewardsLocal[i] = (secondsDiff.times(tokensPerSecondPerToken[i]).times(receipt.amountDeposited)) / 1e18;\n', '        }\n', '\n', '        return rewardsLocal;\n', '    }\n', '\n', '    function deposit(uint amount) external {\n', "        require(block.timestamp > startTime, 'Cannot deposit before pool start');\n", "        require(block.timestamp < endTime, 'Cannot deposit after pool ends');\n", "        require(totalDeposits < maximumDeposit, 'Maximum deposit already reached');\n", '        if (totalDeposits.plus(amount) > maximumDeposit) {\n', '            amount = maximumDeposit.minus(totalDeposits);\n', '        }\n', '        depositToken.transferFrom(msg.sender, address(this), amount);\n', '        totalDeposits = totalDeposits.plus(amount);\n', '\n', '        Receipt storage receipt = receipts[++numReceipts];\n', '        receipt.id = numReceipts;\n', '        receipt.amountDeposited = amount;\n', '        receipt.timeDeposited = block.timestamp;\n', '        receipt.owner = msg.sender;\n', '\n', '        emit DepositOccurred(numReceipts, msg.sender);\n', '    }\n', '\n', '    function withdraw(uint receiptId) external {\n', '        Receipt storage receipt = receipts[receiptId];\n', "        require(receipt.id == receiptId, 'Can only withdraw real receipts');\n", "        require(receipt.owner == msg.sender || block.timestamp > endTime, 'Can only withdraw your own deposit');\n", "        require(receipt.timeWithdrawn == 0, 'Can only withdraw once per receipt');\n", '        receipt.timeWithdrawn = block.timestamp;\n', '        uint[] memory rewards = getRewards(receiptId);\n', '        totalDeposits = totalDeposits.minus(receipt.amountDeposited);\n', '\n', '        for (uint i = 0; i < rewards.length; i++) {\n', '            rewardsClaimed[i] = rewardsClaimed[i].plus(rewards[i]);\n', '            rewardTokens[i].transfer(receipt.owner, rewards[i]);\n', '        }\n', '        depositToken.transfer(receipt.owner, receipt.amountDeposited);\n', '        emit WithdrawalOccurred(receiptId, receipt.owner);\n', '    }\n', '\n', '    function withdrawExcessRewards() external {\n', "        require(totalDeposits == 0, 'Cannot withdraw until all deposits are withdrawn');\n", "        require(block.timestamp > endTime, 'Contract must reach maturity');\n", '\n', '        for (uint i = 0; i < rewardTokens.length; i++) {\n', '            uint rewards = rewardTokens[i].balanceOf(address(this));\n', '            rewardTokens[i].transfer(management, rewards);\n', '        }\n', '\n', '        depositToken.transfer(management, depositToken.balanceOf(address(this)));\n', '        emit ExcessRewardsWithdrawn();\n', '    }\n', '}']