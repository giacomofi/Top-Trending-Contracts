['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-29\n', '*/\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interface/ILiquidityProtection.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'interface IConverterAnchor {\n', '\n', '}\n', '\n', 'interface ILiquidityProtection {\n', '    function addLiquidity(\n', '        IConverterAnchor _poolAnchor,\n', '        IERC20 _reserveToken,\n', '        uint256 _amount\n', '    ) external payable returns(uint);\n', '    // returns id of deposit\n', '\n', '    function removeLiquidity(uint256 _id, uint32 _portion) external;\n', '\n', '    function removeLiquidityReturn(\n', '        uint256 _id,\n', '        uint32 _portion,\n', '        uint256 _removeTimestamp\n', '    ) external view returns (uint256, uint256, uint256);\n', '    // returns amount in the reserve token\n', '    // returns actual return amount in the reserve token\n', '    // returns compensation in the network token\n', '\n', '    // call 24 hours after removing liquidity\n', '    function claimBalance(uint256 _startIndex, uint256 _endIndex) external;\n', '}\n', '\n', '// File: contracts/interface/IStakingRewards.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IDSToken {\n', '\n', '}\n', '\n', 'interface IStakingRewards {\n', '    // claims all rewards from providing address\n', '    function claimRewards() external returns (uint256);\n', '    // returns pending rewards from providing address\n', '    function pendingRewards(address provider) external view returns (uint256);\n', '    // returns all staked rewards and the ID of the new position\n', '    function stakeRewards(uint256 maxAmount, IDSToken poolToken) external returns (uint256, uint256);\n', '}\n', '\n', '// File: contracts/interface/IContractRegistry.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IContractRegistry {\n', '    function addressOf(bytes32 contractName) external view returns(address);\n', '}\n', '\n', '// File: contracts/interface/IxBNT.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'interface IxBNT {\n', '    function getProxyAddressDepositIds(address proxyAddress) external view returns(uint256[] memory);\n', '}\n', '\n', '// File: contracts/helpers/LiquidityProvider.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquidityProvider {\n', '    bool private initialized;\n', '\n', '    IContractRegistry private contractRegistry;\n', '    IERC20 private bnt;\n', '    IERC20 private vbnt;\n', '\n', '    address private xbnt;\n', '    uint256 public nextDepositIndexToClaimBalance;\n', '\n', '    function initializeAndAddLiquidity(\n', '        IContractRegistry _contractRegistry,\n', '        address _xbnt,\n', '        IERC20 _bnt,\n', '        IERC20 _vbnt,\n', '        address _poolToken,\n', '        uint256 _amount\n', '    ) external returns(uint256) {\n', '        require(msg.sender == _xbnt, "Invalid caller");\n', '        require(!initialized, "Already initialized");\n', '        initialized = true;\n', '\n', '        contractRegistry = _contractRegistry;\n', '        xbnt = _xbnt;\n', '        bnt = _bnt;\n', '        vbnt = _vbnt;\n', '\n', '        return _addLiquidity(_poolToken, _amount);\n', '    }\n', '\n', '    function _addLiquidity(\n', '        address _poolToken,\n', '        uint256 _amount\n', '    ) private returns(uint256 id) {\n', '        ILiquidityProtection lp = getLiquidityProtectionContract();\n', '        bnt.approve(address(lp), uint(-1));\n', '\n', '        id = lp.addLiquidity(IConverterAnchor(_poolToken), bnt, _amount);\n', '\n', '        _retrieveVbntBalance();\n', '    }\n', '\n', '    /*\n', "     * @notice Restake this proxy's rewards\n", '     */\n', '    function claimAndRestake(address _poolToken) external onlyXbntContract returns(uint256 newDepositId, uint256 restakedBal){\n', '        (, newDepositId) = getStakingRewardsContract().stakeRewards(uint(-1), IDSToken(_poolToken));\n', '        restakedBal = _retrieveVbntBalance();\n', '    }\n', '\n', '    function claimRewards() external onlyXbntContract returns(uint256 rewardsAmount){\n', '        rewardsAmount = _claimRewards();\n', '    }\n', '\n', '    function _claimRewards() private returns(uint256 rewards){\n', '        rewards = getStakingRewardsContract().claimRewards();\n', '        _retrieveBntBalance();\n', '    }\n', '\n', '    function _removeLiquidity(ILiquidityProtection _lp, uint256 _id) private {\n', '        _lp.removeLiquidity(_id, 1000000); // full PPM resolution\n', '    }\n', '\n', '    /*\n', '     * @notice Initiate final exit from this proxy\n', '     */\n', '    function claimRewardsAndRemoveLiquidity() external onlyXbntContract returns(uint256 rewards) {\n', '        rewards = _claimRewards();\n', '        uint256[] memory depositIds = getDepositIds();\n', '\n', '        ILiquidityProtection lp = getLiquidityProtectionContract();\n', '        vbnt.approve(address(lp), uint(-1));\n', '\n', '        for(uint256 i = 0; i < depositIds.length; i++){\n', '            _removeLiquidity(lp, depositIds[i]);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @notice Called 24 hours after `claimRewardsAndRemoveLiquidity`\n', '     */\n', '    function claimBalance() external onlyXbntContract {\n', '        getLiquidityProtectionContract().claimBalance(0, getDepositIds().length);\n', '        _retrieveBntBalance();\n', '    }\n', '\n', '    function _retrieveBntBalance() private {\n', '        bnt.transfer(xbnt, bnt.balanceOf(address(this)));\n', '    }\n', '\n', '    function _retrieveVbntBalance() private returns(uint256 vbntBal) {\n', '        vbntBal = vbnt.balanceOf(address(this));\n', '        vbnt.transfer(xbnt, vbntBal);\n', '    }\n', '\n', '    function pendingRewards() external view returns(uint){\n', '        return getStakingRewardsContract().pendingRewards(address(this));\n', '    }\n', '\n', '    function getStakingRewardsContract() private view returns(IStakingRewards){\n', '        return IStakingRewards(contractRegistry.addressOf("StakingRewards"));\n', '    }\n', '\n', '    function getLiquidityProtectionContract() private view returns(ILiquidityProtection){\n', '        return ILiquidityProtection(contractRegistry.addressOf("LiquidityProtection"));\n', '    }\n', '\n', '    function getDepositIds() private view returns(uint256[] memory){\n', '        return IxBNT(xbnt).getProxyAddressDepositIds(address(this));\n', '    }\n', '\n', '    modifier onlyXbntContract {\n', '        require(msg.sender == xbnt, "Invalid caller");\n', '        _;\n', '    }\n', '}']