['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', ' \n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: localhost/contract/library/ErrorCode.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'library ErrorCode {\n', '\n', "    string constant FORBIDDEN = 'YouSwap:FORBIDDEN';\n", "    string constant IDENTICAL_ADDRESSES = 'YouSwap:IDENTICAL_ADDRESSES';\n", "    string constant ZERO_ADDRESS = 'YouSwap:ZERO_ADDRESS';\n", "    string constant INVALID_ADDRESSES = 'YouSwap:INVALID_ADDRESSES';\n", "    string constant BALANCE_INSUFFICIENT = 'YouSwap:BALANCE_INSUFFICIENT';\n", "    string constant REWARDTOTAL_LESS_THAN_REWARDPROVIDE = 'YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE';\n", "    string constant PARAMETER_TOO_LONG = 'YouSwap:PARAMETER_TOO_LONG';\n", "    string constant REGISTERED = 'YouSwap:REGISTERED';\n", "    string constant MINING_NOT_STARTED = 'YouSwap:MINING_NOT_STARTED';\n", "    string constant END_OF_MINING = 'YouSwap:END_OF_MINING';\n", "    string constant POOL_NOT_EXIST_OR_END_OF_MINING = 'YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING';\n", '    \n', '}\n', '// File: localhost/contract/interface/IYouswapInviteV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'interface IYouswapInviteV1 {\n', '\n', '    struct UserInfo {\n', '        address upper;//上级\n', '        address[] lowers;//下级\n', '        uint256 startBlock;//邀请块高\n', '    }\n', '\n', '    event InviteV1(address indexed owner, address indexed upper, uint256 indexed height);//被邀请人的地址，邀请人的地址，邀请块高\n', '\n', '    function inviteCount() external view returns (uint256);//邀请人数\n', '\n', '    function inviteUpper1(address) external view returns (address);//上级邀请\n', '\n', '    function inviteUpper2(address) external view returns (address, address);//上级邀请\n', '\n', '    function inviteLower1(address) external view returns (address[] memory);//下级邀请\n', '\n', '    function inviteLower2(address) external view returns (address[] memory, address[] memory);//下级邀请\n', '\n', '    function inviteLower2Count(address) external view returns (uint256, uint256);//下级邀请\n', '    \n', '    function register() external returns (bool);//注册邀请关系\n', '\n', '    function acceptInvitation(address) external returns (bool);//注册邀请关系\n', '    \n', '    function inviteBatch(address[] memory) external returns (uint, uint);//注册邀请关系：输入数量，成功数量\n', '\n', '}\n', '// File: localhost/contract/implement/YouswapInviteV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', 'contract YouswapInviteV1 is IYouswapInviteV1 {\n', '\n', '    address public constant ZERO = address(0);\n', '    uint256 public startBlock;\n', '    address[] public inviteUserInfoV1;\n', '    mapping(address => UserInfo) public inviteUserInfoV2;\n', '\n', '    constructor () {\n', '        startBlock = block.number;\n', '    }\n', '    \n', '    function inviteCount() override external view returns (uint256) {\n', '        return inviteUserInfoV1.length;\n', '    }\n', '\n', '    function inviteUpper1(address _owner) override external view returns (address) {\n', '        return inviteUserInfoV2[_owner].upper;\n', '    }\n', '\n', '    function inviteUpper2(address _owner) override external view returns (address, address) {\n', '        address upper1 = inviteUserInfoV2[_owner].upper;\n', '        address upper2 = address(0);\n', '        if (address(0) != upper1) {\n', '            upper2 = inviteUserInfoV2[upper1].upper;\n', '        }\n', '\n', '        return (upper1, upper2);\n', '    }\n', '\n', '    function inviteLower1(address _owner) override external view returns (address[] memory) {\n', '        return inviteUserInfoV2[_owner].lowers;\n', '    }\n', '\n', '    function inviteLower2(address _owner) override external view returns (address[] memory, address[] memory) {\n', '        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\n', '        uint256 count = 0;\n', '        uint256 lowers1Len = lowers1.length;\n', '        for (uint256 i = 0; i < lowers1Len; i++) {\n', '            count += inviteUserInfoV2[lowers1[i]].lowers.length;\n', '        }\n', '        address[] memory lowers;\n', '        address[] memory lowers2 = new address[](count);\n', '        count = 0;\n', '        for (uint256 i = 0; i < lowers1Len; i++) {\n', '            lowers = inviteUserInfoV2[lowers1[i]].lowers;\n', '            for (uint256 j = 0; j < lowers.length; j++) {\n', '                lowers2[count] = lowers[j];\n', '                count++;\n', '            }\n', '        }\n', '        \n', '        return (lowers1, lowers2);\n', '    }\n', '\n', '    function inviteLower2Count(address _owner) override external view returns (uint256, uint256) {\n', '        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\n', '        uint256 lowers2Len = 0;\n', '        uint256 len = lowers1.length;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            lowers2Len += inviteUserInfoV2[lowers1[i]].lowers.length;\n', '        }\n', '        \n', '        return (lowers1.length, lowers2Len);\n', '    }\n', '\n', '    function register() override external returns (bool) {\n', '        UserInfo storage user = inviteUserInfoV2[tx.origin];\n', '        require(0 == user.startBlock, ErrorCode.REGISTERED);\n', '        user.upper = ZERO;\n', '        user.startBlock = block.number;\n', '        inviteUserInfoV1.push(tx.origin);\n', '        \n', '        emit InviteV1(tx.origin, user.upper, user.startBlock);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function acceptInvitation(address _inviter) override external returns (bool) {\n', '        require(msg.sender != _inviter, ErrorCode.FORBIDDEN);\n', '        UserInfo storage user = inviteUserInfoV2[msg.sender];\n', '        require(0 == user.startBlock, ErrorCode.REGISTERED);\n', '        UserInfo storage upper = inviteUserInfoV2[_inviter];\n', '        if (0 == upper.startBlock) {\n', '            upper.upper = ZERO;\n', '            upper.startBlock = block.number;\n', '            inviteUserInfoV1.push(_inviter);\n', '            \n', '            emit InviteV1(_inviter, upper.upper, upper.startBlock);\n', '        }\n', '        user.upper = _inviter;\n', '        upper.lowers.push(msg.sender);\n', '        user.startBlock = block.number;\n', '        inviteUserInfoV1.push(msg.sender);\n', '        \n', '        emit InviteV1(msg.sender, user.upper, user.startBlock);\n', '\n', '        return true;\n', '    }\n', '\n', '    function inviteBatch(address[] memory _invitees) override external returns (uint, uint) {\n', '        uint len = _invitees.length;\n', '        require(len <= 100, ErrorCode.PARAMETER_TOO_LONG);\n', '        UserInfo storage user = inviteUserInfoV2[msg.sender];\n', '        if (0 == user.startBlock) {\n', '            user.upper = ZERO;\n', '            user.startBlock = block.number;\n', '            inviteUserInfoV1.push(msg.sender);\n', '                        \n', '            emit InviteV1(msg.sender, user.upper, user.startBlock);\n', '        }\n', '        uint count = 0;\n', '        for (uint i = 0; i < len; i++) {\n', '            if ((address(0) != _invitees[i]) && (msg.sender != _invitees[i])) {\n', '                UserInfo storage lower = inviteUserInfoV2[_invitees[i]];\n', '                if (0 == lower.startBlock) {\n', '                    lower.upper = msg.sender;\n', '                    lower.startBlock = block.number;\n', '                    user.lowers.push(_invitees[i]);\n', '                    inviteUserInfoV1.push(_invitees[i]);\n', '                    count++;\n', '\n', '                    emit InviteV1(_invitees[i], msg.sender, lower.startBlock);\n', '                }\n', '            }\n', '        }\n', '\n', '        return (len, count);\n', '    }\n', '\n', '}\n', '// File: localhost/contract/interface/ITokenYou.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'interface ITokenYou {\n', '    \n', '    function mint(address recipient, uint256 amount) external;\n', '    \n', '    function decimals() external view returns (uint8);\n', '    \n', '}\n', '\n', '// File: localhost/contract/interface/IYouswapFactoryV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', '/**\n', '挖矿\n', ' */\n', 'interface IYouswapFactoryV1 {\n', '    \n', '    /**\n', '    用户挖矿信息\n', '     */\n', '    struct RewardInfo {\n', '        uint256 receiveReward;//总领取奖励\n', '        uint256 inviteReward;//总邀请奖励\n', '        uint256 pledgeReward;//总质押奖励\n', '    }\n', '\n', '    /**\n', '    质押用户信息\n', '     */\n', '    struct UserInfo {\n', '        uint256 startBlock;//质押开始块高\n', '        uint256 amount;//质押数量\n', '        uint256 invitePower;//邀请算力\n', '        uint256 pledgePower;//质押算力\n', '        uint256 pendingReward;//待领取奖励\n', '        uint256 inviteRewardDebt;//邀请负债\n', '        uint256 pledgeRewardDebt;//质押负债\n', '    }\n', '\n', '    /**\n', '    矿池信息（可视化）\n', '     */\n', '    struct PoolViewInfo {\n', '        address lp;//LP地址\n', '        string name;//名称\n', '        uint256 multiple;//奖励倍数\n', '        uint256 priority;//排序\n', '    }\n', '\n', '    /**\n', '    矿池信息\n', '     */\n', '    struct PoolInfo {\n', '        uint256 startBlock;//挖矿开始块高\n', '        uint256 rewardTotal;//矿池总奖励\n', '        uint256 rewardProvide;//矿池已发放奖励\n', '        address lp;//lp合约地址\n', '        uint256 amount;//质押数量\n', '        uint256 lastRewardBlock;//最后发放奖励块高\n', '        uint256 rewardPerBlock;//单个区块奖励\n', '        uint256 totalPower;//总算力\n', '        uint256 endBlock;//挖矿结束块高\n', '        uint256 rewardPerShare;//单位算力奖励\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '    /**\n', '    自邀请\n', '    self：Sender地址\n', '     */\n', '    event InviteRegister(address indexed self);\n', '\n', '    /**\n', '    更新矿池信息\n', '\n', '    action：true(新建矿池)，false(更新矿池)\n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    name：矿池名称\n', '    startBlock：矿池开始挖矿块高\n', '    rewardTotal：矿池总奖励\n', '    rewardPerBlock：区块奖励\n', '    multiple：矿池奖励倍数\n', '    priority：矿池排序\n', '     */\n', '    event UpdatePool(bool action, uint256 pool, address indexed lp, string name, uint256 startBlock, uint256 rewardTotal, uint256 rewardPerBlock, uint256 multiple, uint256 priority);\n', '\n', '    /**\n', '    矿池挖矿结束\n', '    \n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '     */\n', '    event EndPool(uint256 pool, address indexed lp);\n', '    \n', '    /**\n', '    质押\n', '\n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    from：质押转出地址\n', '    amount：质押数量\n', '     */\n', '    event Stake(uint256 pool, address indexed lp, address indexed from, uint256 amount);\n', '\n', '    /**\n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    totalPower：矿池总算力\n', '    owner：用户地址\n', '    ownerInvitePower：用户邀请算力\n', '    ownerPledgePower：用户质押算力\n', '    upper1：上1级地址\n', '    upper1InvitePower：上1级邀请算力\n', '    upper2：上2级地址\n', '    upper2InvitePower：上2级邀请算力\n', '     */\n', '    event UpdatePower(uint256 pool, address lp, uint256 totalPower, address indexed owner, uint256 ownerInvitePower, uint256 ownerPledgePower, address indexed upper1, uint256 upper1InvitePower, address indexed upper2, uint256 upper2InvitePower);\n', '\n', '    //算力\n', '\n', '    /**\n', '    解质押\n', '    \n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    to：解质押转入地址\n', '    amount：解质押数量\n', '     */\n', '    event UnStake(uint256 pool, address indexed lp, address indexed to, uint256 amount);\n', '    \n', '    /**\n', '    提取奖励\n', '\n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    to：奖励转入地址\n', '    amount：奖励数量\n', '     */\n', '    event WithdrawReward(uint256 pool, address indexed lp, address indexed to, uint256 amount);\n', '    \n', '    /**\n', '    挖矿\n', '\n', '    pool：矿池序号\n', '    lp：lp合约地址\n', '    amount：奖励数量\n', '     */\n', '    event Mint(uint256 pool, address indexed lp, uint256 amount);\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    /**\n', '    修改OWNER\n', '     */\n', '    function transferOwnership(address) external;\n', '\n', '    /**\n', '    设置YOU\n', '     */\n', '    function setYou(ITokenYou) external;\n', '\n', '    /**\n', '    设置邀请关系\n', '     */\n', '    function setInvite(YouswapInviteV1) external;\n', '    \n', '    /**\n', '    质押\n', '    */\n', '    function deposit(uint256, uint256) external;\n', '    \n', '    /**\n', '    解质押、提取奖励\n', '     */\n', '    function withdraw(uint256, uint256) external;\n', '\n', '    /**\n', '    矿池质押地址\n', '     */\n', '    function poolPledgeAddresss(uint256) external view returns (address[] memory);\n', '\n', '    /**\n', '    算力占比\n', '     */\n', '    function powerScale(uint256, address) external view returns (uint256);\n', '\n', '    /**\n', '    待领取的奖励\n', '     */\n', '    function pendingReward(uint256, address) external view returns (uint256);\n', '\n', '    /**\n', '    下级收益贡献\n', '     */\n', '    function rewardContribute(address, address) external view returns (uint256);\n', '\n', '    /**\n', '    个人收益加成\n', '     */\n', '    function selfReward(address) external view returns (uint256);\n', '\n', '    /**\n', '    通过lp查询矿池编号\n', '     */\n', '    function poolNumbers(address) external view returns (uint256[] memory);\n', '\n', '    /**\n', '    设置运营权限\n', '     */\n', '    function setOperateOwner(address, bool) external;\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////    \n', '    \n', '    /**\n', '    新建矿池\n', '     */\n', '    function addPool(string memory, address, uint256, uint256) external returns (bool);\n', '        \n', '    /**\n', '    修改矿池区块奖励\n', '     */\n', '    function setRewardPerBlock(uint256, uint256) external;\n', '\n', '    /**\n', '    修改矿池总奖励\n', '     */\n', '    function setRewardTotal(uint256, uint256) external;\n', '\n', '    /**\n', '    修改矿池名称\n', '     */\n', '    function setName(uint256, string memory) external;\n', '    \n', '    /**\n', '    修改矿池倍数\n', '     */\n', '    function setMultiple(uint256, uint256) external;\n', '    \n', '    /**\n', '    修改矿池排序\n', '     */\n', '    function setPriority(uint256, uint256) external;\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '    \n', '}\n', '// File: localhost/contract/implement/YouswapFactoryV1.sol\n', '\n', ' \n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', '\n', '\n', 'contract YouswapFactoryV1 is IYouswapFactoryV1 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    uint256 public deployBlock;//合约部署块高\n', '    address public owner;//所有权限\n', '    mapping(address => bool) public operateOwner;//运营权限\n', '    ITokenYou public you;//you contract\n', '    YouswapInviteV1 public invite;//invite contract\n', '\n', '    uint256 public poolCount = 0;//矿池数量\n', '    mapping(address => RewardInfo) public rewardInfos;//用户挖矿信息\n', '    mapping(uint256 => PoolInfo) public poolInfos;//矿池信息\n', '    mapping(uint256 => PoolViewInfo) public poolViewInfos;//矿池信息\n', '    mapping(uint256 => address[]) public pledgeAddresss;//矿池质押地址\n', '    mapping(uint256 => mapping(address => UserInfo)) public pledgeUserInfo;//矿池质押用户信息\n', '\n', '    uint256 public constant inviteSelfReward = 5;//质押自奖励，5%\n', '    uint256 public constant invite1Reward = 15;//1级邀请奖励，15%\n', '    uint256 public constant invite2Reward = 10;//2级邀请奖励，10%\n', '    uint256 public constant rewardPerBlock = 267094;//区块奖励\n', '    uint256 public rewardTotal = 0;//总挖矿奖励\n', '\n', '    constructor (ITokenYou _you, YouswapInviteV1 _invite) {\n', '        deployBlock = block.number;\n', '        owner = msg.sender;\n', '        invite = _invite;\n', '        _setOperateOwner(owner, true);\n', '        _setYou(_you);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function transferOwnership(address _owner) override external {\n', '        require(owner == msg.sender, ErrorCode.FORBIDDEN);\n', '        require((address(0) != _owner) && (owner != _owner), ErrorCode.INVALID_ADDRESSES);\n', '        address oldOwner = owner;\n', '        owner = _owner;\n', '        _setOperateOwner(oldOwner, false);\n', '        _setOperateOwner(owner, true);\n', '    }\n', '\n', '    function setYou(ITokenYou _you) override external {\n', '        _setYou(_you);\n', '    }\n', '    \n', '    function _setYou(ITokenYou _you) internal {\n', '        require(owner == msg.sender, ErrorCode.FORBIDDEN);\n', '        you = _you;\n', '    }\n', '\n', '    function setInvite(YouswapInviteV1 _invite) override external {\n', '        require(owner == msg.sender, ErrorCode.FORBIDDEN);\n', '        invite = _invite;\n', '    }\n', '    \n', '    function deposit(uint256 _pool, uint256 _amount) override external {\n', '        require(0 < _amount, ErrorCode.FORBIDDEN);\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        require((address(0) != poolInfo.lp) && (poolInfo.startBlock <= block.number), ErrorCode.MINING_NOT_STARTED);\n', '        //require(0 == poolInfo.endBlock, ErrorCode.END_OF_MINING);\n', '        (, uint256 startBlock) = invite.inviteUserInfoV2(msg.sender);\n', '        if (0 == startBlock) {\n', '            invite.register();\n', '            \n', '            emit InviteRegister(msg.sender);\n', '        }\n', '\n', '        IERC20(poolInfo.lp).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\n', '\n', '        computeReward(_pool);\n', '\n', '        provideReward(_pool, poolInfo.rewardPerShare, poolInfo.lp, msg.sender, upper1, upper2);\n', '\n', '        addPower(_pool, msg.sender, _amount, upper1, upper2);\n', '\n', '        setRewardDebt(_pool, poolInfo.rewardPerShare, msg.sender, upper1, upper2);\n', '\n', '        emit Stake(_pool, poolInfo.lp, msg.sender, _amount);\n', '    }\n', '\n', '    function withdraw(uint256 _pool, uint256 _amount) override external {\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        require((address(0) != poolInfo.lp) && (poolInfo.startBlock <= block.number), ErrorCode.MINING_NOT_STARTED);\n', '        if (0 < _amount) {\n', '            UserInfo storage userInfo = pledgeUserInfo[_pool][msg.sender];\n', '            require(_amount <= userInfo.amount, ErrorCode.BALANCE_INSUFFICIENT);\n', '            IERC20(poolInfo.lp).safeTransfer(msg.sender, _amount);\n', '\n', '            emit UnStake(_pool, poolInfo.lp, msg.sender, _amount);\n', '        }\n', '\n', '        (address _upper1, address _upper2) = invite.inviteUpper2(msg.sender);\n', '\n', '        computeReward(_pool);\n', '\n', '        provideReward(_pool, poolInfo.rewardPerShare, poolInfo.lp, msg.sender, _upper1, _upper2);\n', '\n', '        if (0 < _amount) {\n', '            subPower(_pool, msg.sender, _amount, _upper1, _upper2);\n', '        }\n', '\n', '        setRewardDebt(_pool, poolInfo.rewardPerShare, msg.sender, _upper1, _upper2);\n', '    }\n', '\n', '    function poolPledgeAddresss(uint256 _pool) override external view returns (address[] memory) {\n', '        return pledgeAddresss[_pool];\n', '    }\n', '\n', '    function computeReward(uint256 _pool) internal {\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        if ((0 < poolInfo.totalPower) && (poolInfo.rewardProvide < poolInfo.rewardTotal)) {\n', '            uint256 reward = (block.number - poolInfo.lastRewardBlock).mul(poolInfo.rewardPerBlock);\n', '            if (poolInfo.rewardProvide.add(reward) > poolInfo.rewardTotal) {\n', '                reward = poolInfo.rewardTotal.sub(poolInfo.rewardProvide);\n', '                poolInfo.endBlock = block.number;\n', '            }\n', '\n', '            rewardTotal = rewardTotal.add(reward);\n', '            poolInfo.rewardProvide = poolInfo.rewardProvide.add(reward);\n', '            poolInfo.rewardPerShare = poolInfo.rewardPerShare.add(reward.mul(1e24).div(poolInfo.totalPower));\n', '            poolInfo.lastRewardBlock = block.number;\n', '\n', '            emit Mint(_pool, poolInfo.lp, reward);\n', '\n', '            if (0 < poolInfo.endBlock) {\n', '                emit EndPool(_pool, poolInfo.lp);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addPower(uint256 _pool, address _user, uint256 _amount, address _upper1, address _upper2) internal {\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        poolInfo.amount = poolInfo.amount.add(_amount);\n', '\n', '        uint256 pledgePower = _amount;\n', '        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];            \n', '        userInfo.amount = userInfo.amount.add(_amount);\n', '        userInfo.pledgePower = userInfo.pledgePower.add(pledgePower);\n', '        poolInfo.totalPower = poolInfo.totalPower.add(pledgePower);\n', '        if (0 == userInfo.startBlock) {\n', '            userInfo.startBlock = block.number;\n', '            pledgeAddresss[_pool].push(msg.sender);\n', '        }\n', '        \n', '        uint256 upper1InvitePower = 0;\n', '        uint256 upper2InvitePower = 0;\n', '\n', '        if (address(0) != _upper1) {\n', '            uint256 inviteSelfPower = pledgePower.mul(inviteSelfReward).div(100);\n', '            userInfo.invitePower = userInfo.invitePower.add(inviteSelfPower);\n', '            poolInfo.totalPower = poolInfo.totalPower.add(inviteSelfPower);\n', '\n', '            uint256 invite1Power = pledgePower.mul(invite1Reward).div(100);\n', '            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];            \n', '            upper1Info.invitePower = upper1Info.invitePower.add(invite1Power);\n', '            upper1InvitePower = upper1Info.invitePower;\n', '            poolInfo.totalPower = poolInfo.totalPower.add(invite1Power);\n', '            if (0 == upper1Info.startBlock) {\n', '                upper1Info.startBlock = block.number;\n', '                pledgeAddresss[_pool].push(_upper1);\n', '            }\n', '        }\n', '\n', '        if (address(0) != _upper2) {\n', '            uint256 invite2Power = pledgePower.mul(invite2Reward).div(100);\n', '            UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];            \n', '            upper2Info.invitePower = upper2Info.invitePower.add(invite2Power);\n', '            upper2InvitePower = upper2Info.invitePower;\n', '            poolInfo.totalPower = poolInfo.totalPower.add(invite2Power);\n', '            if (0 == upper2Info.startBlock) {\n', '                upper2Info.startBlock = block.number;\n', '                pledgeAddresss[_pool].push(_upper2);\n', '            }\n', '        }\n', '        \n', '        emit UpdatePower(_pool, poolInfo.lp, poolInfo.totalPower, _user, userInfo.invitePower, userInfo.pledgePower, _upper1, upper1InvitePower, _upper2, upper2InvitePower);\n', '    }\n', '\n', '    function subPower(uint256 _pool, address _user, uint256 _amount, address _upper1, address _upper2) internal {\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\n', '        poolInfo.amount = poolInfo.amount.sub(_amount);\n', '\n', '        uint256 pledgePower = _amount;\n', '        userInfo.amount = userInfo.amount.sub(_amount);\n', '        userInfo.pledgePower = userInfo.pledgePower.sub(pledgePower);\n', '        poolInfo.totalPower = poolInfo.totalPower.sub(pledgePower);\n', '\n', '        uint256 upper1InvitePower = 0;\n', '        uint256 upper2InvitePower = 0;\n', '\n', '        if (address(0) != _upper1) {\n', '            uint256 inviteSelfPower = pledgePower.mul(inviteSelfReward).div(100);\n', '            userInfo.invitePower = userInfo.invitePower.sub(inviteSelfPower);\n', '            poolInfo.totalPower = poolInfo.totalPower.sub(inviteSelfPower);\n', '\n', '            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\n', '            if (0 < upper1Info.startBlock) {\n', '                uint256 invite1Power = pledgePower.mul(invite1Reward).div(100);\n', '                upper1Info.invitePower = upper1Info.invitePower.sub(invite1Power);\n', '                upper1InvitePower = upper1Info.invitePower;\n', '                poolInfo.totalPower = poolInfo.totalPower.sub(invite1Power);\n', '\n', '                if (address(0) != _upper2) {\n', '                    UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\n', '                    if (0 < upper2Info.startBlock) {\n', '                        uint256 invite2Power = pledgePower.mul(invite2Reward).div(100);\n', '                        upper2Info.invitePower = upper2Info.invitePower.sub(invite2Power);\n', '                        upper2InvitePower = upper2Info.invitePower;\n', '                        poolInfo.totalPower = poolInfo.totalPower.sub(invite2Power);\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        emit UpdatePower(_pool, poolInfo.lp, poolInfo.totalPower, _user, userInfo.invitePower, userInfo.pledgePower, _upper1, upper1InvitePower, _upper2, upper2InvitePower);\n', '    }\n', '\n', '    function provideReward(uint256 _pool, uint256 _rewardPerShare, address _lp, address _user, address _upper1, address _upper2) internal {\n', '        uint256 inviteReward = 0;\n', '        uint256 pledgeReward = 0;\n', '        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\n', '        if ((0 < userInfo.invitePower) || (0 < userInfo.pledgePower)) {\n', '            inviteReward = userInfo.invitePower.mul(_rewardPerShare).sub(userInfo.inviteRewardDebt).div(1e24);\n', '            pledgeReward = userInfo.pledgePower.mul(_rewardPerShare).sub(userInfo.pledgeRewardDebt).div(1e24);\n', '\n', '            userInfo.pendingReward = userInfo.pendingReward.add(inviteReward.add(pledgeReward));\n', '\n', '            RewardInfo storage userRewardInfo = rewardInfos[_user];\n', '            userRewardInfo.inviteReward = userRewardInfo.inviteReward.add(inviteReward);\n', '            userRewardInfo.pledgeReward = userRewardInfo.pledgeReward.add(pledgeReward);\n', '        }\n', '\n', '        if (0 < userInfo.pendingReward) {\n', '            you.mint(_user, userInfo.pendingReward);\n', '            \n', '            RewardInfo storage userRewardInfo = rewardInfos[_user];\n', '            userRewardInfo.receiveReward = userRewardInfo.inviteReward;\n', '            \n', '            emit WithdrawReward(_pool, _lp, _user, userInfo.pendingReward);\n', '\n', '            userInfo.pendingReward = 0;\n', '        }\n', '\n', '        if (address(0) != _upper1) {\n', '            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\n', '            if ((0 < upper1Info.invitePower) || (0 < upper1Info.pledgePower)) {\n', '                inviteReward = upper1Info.invitePower.mul(_rewardPerShare).sub(upper1Info.inviteRewardDebt).div(1e24);\n', '                pledgeReward = upper1Info.pledgePower.mul(_rewardPerShare).sub(upper1Info.pledgeRewardDebt).div(1e24);\n', '                \n', '                upper1Info.pendingReward = upper1Info.pendingReward.add(inviteReward.add(pledgeReward));\n', '\n', '                RewardInfo storage upper1RewardInfo = rewardInfos[_upper1];\n', '                upper1RewardInfo.inviteReward = upper1RewardInfo.inviteReward.add(inviteReward);\n', '                upper1RewardInfo.pledgeReward = upper1RewardInfo.pledgeReward.add(pledgeReward);\n', '            }\n', '\n', '            if (address(0) != _upper2) {\n', '                UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\n', '                if ((0 < upper2Info.invitePower) || (0 < upper2Info.pledgePower)) {\n', '                    inviteReward = upper2Info.invitePower.mul(_rewardPerShare).sub(upper2Info.inviteRewardDebt).div(1e24);\n', '                    pledgeReward = upper2Info.pledgePower.mul(_rewardPerShare).sub(upper2Info.pledgeRewardDebt).div(1e24);\n', '\n', '                    upper2Info.pendingReward = upper2Info.pendingReward.add(inviteReward.add(pledgeReward));\n', '\n', '                    RewardInfo storage upper2RewardInfo = rewardInfos[_upper2];\n', '                    upper2RewardInfo.inviteReward = upper2RewardInfo.inviteReward.add(inviteReward);\n', '                    upper2RewardInfo.pledgeReward = upper2RewardInfo.pledgeReward.add(pledgeReward);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function setRewardDebt(uint256 _pool, uint256 _rewardPerShare, address _user, address _upper1, address _upper2) internal {\n', '        UserInfo storage userInfo = pledgeUserInfo[_pool][_user];\n', '        userInfo.inviteRewardDebt = userInfo.invitePower.mul(_rewardPerShare);\n', '        userInfo.pledgeRewardDebt = userInfo.pledgePower.mul(_rewardPerShare);\n', '\n', '        if (address(0) != _upper1) {\n', '            UserInfo storage upper1Info = pledgeUserInfo[_pool][_upper1];\n', '            upper1Info.inviteRewardDebt = upper1Info.invitePower.mul(_rewardPerShare);\n', '            upper1Info.pledgeRewardDebt = upper1Info.pledgePower.mul(_rewardPerShare);\n', '\n', '            if (address(0) != _upper2) {\n', '                UserInfo storage upper2Info = pledgeUserInfo[_pool][_upper2];\n', '                upper2Info.inviteRewardDebt = upper2Info.invitePower.mul(_rewardPerShare);\n', '                upper2Info.pledgeRewardDebt = upper2Info.pledgePower.mul(_rewardPerShare);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function powerScale(uint256 _pool, address _user) override external view returns (uint256) {\n', '        PoolInfo memory poolInfo = poolInfos[_pool];\n', '        if (0 == poolInfo.totalPower) {\n', '            return 0;\n', '        }\n', '\n', '        UserInfo memory userInfo = pledgeUserInfo[_pool][_user];\n', '        return (userInfo.invitePower.add(userInfo.pledgePower).mul(100)).div(poolInfo.totalPower);\n', '    }\n', '\n', '    function pendingReward(uint256 _pool, address _user) override external view returns (uint256) {\n', '        uint256 totalReward = 0;\n', '        PoolInfo memory poolInfo = poolInfos[_pool];\n', '        if (address(0) != poolInfo.lp && (poolInfo.startBlock <= block.number)) {\n', '            uint256 rewardPerShare = 0;\n', '            if (0 < poolInfo.totalPower) {\n', '                uint256 reward = (block.number - poolInfo.lastRewardBlock).mul(poolInfo.rewardPerBlock);\n', '                if (poolInfo.rewardProvide.add(reward) > poolInfo.rewardTotal) {\n', '                    reward = poolInfo.rewardTotal.sub(poolInfo.rewardProvide);\n', '                }\n', '                rewardPerShare = reward.mul(1e24).div(poolInfo.totalPower);\n', '            }\n', '            rewardPerShare = rewardPerShare.add(poolInfo.rewardPerShare);\n', '\n', '            UserInfo memory userInfo = pledgeUserInfo[_pool][_user];\n', '            totalReward = userInfo.pendingReward;\n', '            totalReward = totalReward.add(userInfo.invitePower.mul(rewardPerShare).sub(userInfo.inviteRewardDebt).div(1e24));\n', '            totalReward = totalReward.add(userInfo.pledgePower.mul(rewardPerShare).sub(userInfo.pledgeRewardDebt).div(1e24));\n', '        }\n', '\n', '        return totalReward;\n', '    }\n', '\n', '    function rewardContribute(address _user, address _lower) override external view returns (uint256) {\n', '        if ((address(0) == _user) || (address(0) == _lower)) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 inviteReward = 0;\n', '        (address upper1, address upper2) = invite.inviteUpper2(_lower);\n', '        if (_user == upper1) {\n', '            inviteReward = rewardInfos[_lower].pledgeReward.mul(invite1Reward).div(100);\n', '        }else if (_user == upper2) {\n', '            inviteReward = rewardInfos[_lower].pledgeReward.mul(invite2Reward).div(100);\n', '        }\n', '        \n', '        return inviteReward;\n', '    }\n', '\n', '    function selfReward(address _user) override external view returns (uint256) {\n', '        address upper1 = invite.inviteUpper1(_user);\n', '        if (address(0) == upper1) {\n', '            return 0;\n', '        }\n', '\n', '        RewardInfo memory userRewardInfo = rewardInfos[_user];\n', '        return userRewardInfo.pledgeReward.mul(inviteSelfReward).div(100);\n', '    }\n', '\n', '    function poolNumbers(address _lp) override external view returns (uint256[] memory) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < poolCount; i++) {\n', '            if (_lp == poolViewInfos[i].lp) {\n', '                count = count.add(1);\n', '            }\n', '        }\n', '        \n', '        uint256[] memory numbers = new uint256[](count);\n', '        count = 0;\n', '        for (uint256 i = 0; i < poolCount; i++) {\n', '            if (_lp == poolViewInfos[i].lp) {\n', '                numbers[count] = i;\n', '                count = count.add(1);\n', '            }\n', '        }\n', '\n', '        return numbers;\n', '    }\n', '\n', '    function setOperateOwner(address _address, bool _bool) override external {\n', '        _setOperateOwner(_address, _bool);\n', '    }\n', '    \n', '    function _setOperateOwner(address _address, bool _bool) internal {\n', '        require(owner == msg.sender, ErrorCode.FORBIDDEN);\n', '        operateOwner[_address] = _bool;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function addPool(string memory _name, address _lp, uint256 _startBlock, uint256 _rewardTotal) override external returns (bool) {\n', '        require(operateOwner[msg.sender] && (address(0) != _lp) && (address(this) != _lp), ErrorCode.FORBIDDEN);\n', '        _startBlock = _startBlock < block.number ? block.number : _startBlock;\n', '        uint256 _pool = poolCount;\n', '        poolCount = poolCount.add(1);\n', '\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\n', '        poolViewInfo.lp = _lp;\n', '        poolViewInfo.name = _name;\n', '        poolViewInfo.multiple = 1;\n', '        poolViewInfo.priority = _pool.mul(100);\n', '        \n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        poolInfo.startBlock = _startBlock;\n', '        poolInfo.rewardTotal = _rewardTotal;\n', '        poolInfo.rewardProvide = 0;\n', '        poolInfo.lp = _lp;\n', '        poolInfo.amount = 0;\n', '        poolInfo.lastRewardBlock = _startBlock.sub(1);\n', '        poolInfo.rewardPerBlock = rewardPerBlock;\n', '        poolInfo.totalPower = 0;\n', '        poolInfo.endBlock = 0;\n', '        poolInfo.rewardPerShare = 0;\n', '\n', '        emit UpdatePool(true, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setRewardPerBlock(uint256 _pool, uint256 _rewardPerBlock) override external {\n', '        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        require((address(0) != poolInfo.lp) && (0 == poolInfo.endBlock), ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\n', '        poolInfo.rewardPerBlock = _rewardPerBlock;\n', '\n', '        PoolViewInfo memory poolViewInfo = poolViewInfos[_pool];\n', '\n', '        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '    }\n', '    \n', '    function setRewardTotal(uint256 _pool, uint256 _rewardTotal) override external {\n', '        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\n', '        PoolInfo storage poolInfo = poolInfos[_pool];\n', '        require((address(0) != poolInfo.lp) && (0 == poolInfo.endBlock), ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\n', '        require(poolInfo.rewardProvide < _rewardTotal, ErrorCode.REWARDTOTAL_LESS_THAN_REWARDPROVIDE);\n', '        poolInfo.rewardTotal = _rewardTotal;\n', '\n', '        PoolViewInfo memory poolViewInfo = poolViewInfos[_pool];\n', '\n', '        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '   }\n', '\n', '   function setName(uint256 _pool, string memory _name) override external {\n', '        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\n', '        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\n', '        poolViewInfo.name = _name;\n', '\n', '        PoolInfo memory poolInfo = poolInfos[_pool];\n', '\n', '        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '   }\n', '\n', '   function setMultiple(uint256 _pool, uint256 _multiple) override external {\n', '        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\n', '        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\n', '        poolViewInfo.multiple = _multiple;\n', '\n', '        PoolInfo memory poolInfo = poolInfos[_pool];\n', '\n', '        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '    }\n', '\n', '    function setPriority(uint256 _pool, uint256 _priority) override external {\n', '        require(operateOwner[msg.sender], ErrorCode.FORBIDDEN);\n', '        PoolViewInfo storage poolViewInfo = poolViewInfos[_pool];\n', '        require(address(0) != poolViewInfo.lp, ErrorCode.POOL_NOT_EXIST_OR_END_OF_MINING);\n', '        poolViewInfo.priority = _priority;\n', '\n', '        PoolInfo memory poolInfo = poolInfos[_pool];\n', '\n', '        emit UpdatePool(false, _pool, poolInfo.lp, poolViewInfo.name, poolInfo.startBlock, poolInfo.rewardTotal, poolInfo.rewardPerBlock, poolViewInfo.multiple, poolViewInfo.priority);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////\n', '\n', '}']