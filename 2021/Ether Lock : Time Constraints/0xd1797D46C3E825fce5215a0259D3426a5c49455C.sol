['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'import "./IConfigurableReserve.sol";\n', 'import "./IPrizePool.sol";\n', '\n', '/// @title Implementation of IConfigurable reserve\n', '/// @notice Provides an Ownable configurable reserve for prize pools. This includes an opt-out default rate for prize pools. \n', '/// For flexibility this includes a specified withdraw Strategist address which can be set by the owner.\n', '/// The prize pool Reserve can withdrawn by the owner or the reserve strategist. \n', 'contract ConfigurableReserve is IConfigurableReserve, Ownable {\n', '    \n', '    /// @notice Storage of Reserve Rate Mantissa associated with a Prize Pool\n', '    mapping(address => ReserveRate) public prizePoolMantissas;\n', '\n', '    /// @notice Storage of the address of a withdrawal strategist \n', '    address public withdrawStrategist;\n', '\n', '    /// @notice Storage of the default rate mantissa\n', '    uint224 public defaultReserveRateMantissa;\n', '\n', '    constructor() Ownable(){\n', '\n', '    }\n', '\n', '    /// @notice Returns the reserve rate for a particular source\n', '    /// @param source The source for which the reserve rate should be return.  These are normally prize pools.\n', '    /// @return The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000\n', '    function reserveRateMantissa(address source) external override view returns (uint256){\n', '        if(!prizePoolMantissas[source].useCustom){\n', '            return uint256(defaultReserveRateMantissa);\n', '        }\n', '        // else return the custom rate\n', '        return prizePoolMantissas[source].rateMantissa;\n', '    }\n', '\n', '    /// @notice Allows the owner of the contract to set the reserve rates for a given set of sources.\n', '    /// @dev Length must match sources param.\n', '    /// @param sources The sources for which to set the reserve rates.\n', '    /// @param _reserveRates The respective ReserveRates for the sources.  \n', '    function setReserveRateMantissa(address[] calldata sources,  uint224[] calldata _reserveRates, bool[] calldata useCustom) external override onlyOwner{\n', '        for(uint256 i = 0; i <  sources.length; i++){\n', '            prizePoolMantissas[sources[i]].rateMantissa = _reserveRates[i];\n', '            prizePoolMantissas[sources[i]].useCustom = useCustom[i];\n', '            emit ReserveRateMantissaSet(sources[i], _reserveRates[i], useCustom[i]);\n', '        }\n', '    }\n', '\n', '    /// @notice Allows the owner of the contract to set the withdrawal strategy address\n', '    /// @param _strategist The new withdrawal strategist address\n', '    function setWithdrawStrategist(address _strategist) external override onlyOwner{\n', '        withdrawStrategist = _strategist;\n', '        emit ReserveWithdrawStrategistChanged(_strategist);\n', '    }\n', '\n', '    /// @notice Calls withdrawReserve on the Prize Pool\n', '    /// @param prizePool The Prize Pool to withdraw reserve\n', '    /// @param to The reserve transfer destination address\n', '    /// @return The amount of reserve withdrawn from the prize pool\n', '    function withdrawReserve(address prizePool, address to) external override onlyOwnerOrWithdrawStrategist returns (uint256){\n', '        return PrizePoolInterface(prizePool).withdrawReserve(to);\n', '    }\n', '\n', '    /// @notice Sets the default ReserveRate mantissa\n', '    /// @param _reserveRateMantissa The new default reserve rate mantissa\n', '    function setDefaultReserveRateMantissa(uint224 _reserveRateMantissa) external override onlyOwner{\n', '        defaultReserveRateMantissa = _reserveRateMantissa;\n', '        emit DefaultReserveRateMantissaSet(_reserveRateMantissa);\n', '    }\n', '\n', '    /// @notice Only allows the owner or current strategist to call a function\n', '    modifier onlyOwnerOrWithdrawStrategist(){\n', '        require(msg.sender == owner() || msg.sender == withdrawStrategist, "!onlyOwnerOrWithdrawStrategist");\n', '        _;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'interface IConfigurableReserve {\n', '  \n', '  ///@notice struct to store the reserve rate mantissa for an address and a flag to indicate to use the default reserve rate\n', '  struct ReserveRate{\n', '      uint224 rateMantissa;\n', '      bool useCustom;\n', '  }\n', '\n', '  /// @notice Returns the reserve rate for a particular source\n', '  /// @param source The source for which the reserve rate should be return.  These are normally prize pools.\n', '  /// @return The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000\n', '  function reserveRateMantissa(address source) external view returns (uint256);\n', '\n', '  /// @notice Allows the owner of the contract to set the reserve rates for a given set of sources.\n', '  /// @dev Length must match sources param.\n', '  /// @param sources The sources for which to set the reserve rates.\n', '  /// @param _reserveRates The respective ReserveRates for the sources.  \n', '  function setReserveRateMantissa(address[] calldata sources,  uint224[] calldata _reserveRates, bool[] calldata useCustom) external;\n', '\n', '  /// @notice Allows the owner of the contract to set the withdrawal strategy address\n', '  /// @param strategist The new withdrawal strategist address\n', '  function setWithdrawStrategist(address strategist) external;\n', '\n', '  /// @notice Calls withdrawReserve on the Prize Pool\n', '  /// @param prizePool The Prize Pool to withdraw reserve\n', '  /// @param to The reserve transfer destination address\n', '  function withdrawReserve(address prizePool, address to) external returns (uint256);\n', '\n', '  /// @notice Sets the default ReserveRate mantissa\n', '  /// @param _reserveRateMantissa The new default reserve rate mantissa\n', '  function setDefaultReserveRateMantissa(uint224 _reserveRateMantissa) external;\n', '  \n', '  /// @notice Emitted when the reserve rate mantissa was updated for a prize pool\n', '  /// @param prizePool The prize pool address for which the rate was set\n', '  /// @param reserveRateMantissa The respective reserve rate for the prizepool.\n', '  /// @param useCustom Whether to use the custom reserve rate (true) or the default (false)\n', '  event ReserveRateMantissaSet(address indexed prizePool, uint256 reserveRateMantissa, bool useCustom);\n', '\n', '  /// @notice Emitted when the withdraw strategist is changed\n', '  /// @param strategist The updated strategist address\n', '  event ReserveWithdrawStrategistChanged(address indexed strategist);\n', '\n', '  /// @notice Emitted when the default reserve rate mantissa was updated\n', '  /// @param rate The new updated default mantissa rate\n', '  event DefaultReserveRateMantissaSet(uint256 rate);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.7.6;\n', '\n', '/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\n', '/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\n', '/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\n', 'interface PrizePoolInterface {\n', '    function withdrawReserve(address to) external returns (uint256);\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']