['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-06\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface UpgradedPriceAble {\n', '    function getAmountsOutToken(uint value, uint8 rate) external view returns (uint balance);\n', '    function getAmountsOutEth(uint value, uint8 rate) external view returns (uint balance);\n', '}\n', '\n', '\n', 'interface ERC20 {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external;\n', '//    function approve(address spender, uint256 value) public;\n', '//    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external;\n', '//    event Transfer(address indexed from, address indexed to, uint256 value);\n', '//    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract UsdgMarket is Ownable{\n', '    using SafeMath for uint;\n', '\n', '    uint oneEth = 1000000000000000000;\n', '    uint8  public buyTokenRate = 100;\n', '    uint8  public saleTokenRate = 100;\n', '\n', '    IUniswapV2Router01 public uniswapRouter;\n', '    ERC20 public usdg;\n', '\n', '    address[] pathEth2Usdg;\n', '    address public upgradedAddress;\n', '    bool public upgraded = false;\n', '\n', '    event BuyToken(address indexed from,uint inValue, uint outValue);\n', '    event SaleToken(address indexed from,uint inValue, uint outValue);\n', '    event GovWithdrawEth(address indexed to, uint256 value);\n', '    event GovWithdrawToken(address indexed to, uint256 value);\n', '\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'Market: EXPIRED');\n", '        _;\n', '    }\n', '\n', '    constructor(address _usdg, address _usdt, address _uniswap)public {\n', '        _setPath(_usdg,_usdt,_uniswap);\n', '    }\n', '\n', '    function _setPath(address _usdg, address _usdt,address _uniswap)private {\n', '        uniswapRouter = IUniswapV2Router01(_uniswap);\n', '        address _weth = uniswapRouter.WETH();\n', '        usdg = ERC20(_usdg);\n', '        pathEth2Usdg.push(_weth);\n', '        pathEth2Usdg.push(_usdt);\n', '    }\n', '\n', '    function getEthPrice()public view returns (uint balance) {\n', '        uint[] memory amounts = uniswapRouter.getAmountsOut( oneEth, pathEth2Usdg);\n', '        return amounts[1];\n', '    }\n', '    function _getAmountsOutToken(uint value, uint8 rate) private view returns (uint balance) {\n', '        uint rs = getEthPrice();  \n', '        rs = rs.mul(value).div(oneEth);\n', '        if(rate > 0){\n', '            rs = rs.mul(rate).div(100);\n', '        }\n', '        rs = rs.mul(1000); \n', '        return rs;\n', '    }\n', '\n', '    function _getAmountsOutEth(uint value, uint8 rate) private view returns (uint balance) {\n', '        uint ePrice = getEthPrice();   \n', '        uint uPrice = oneEth.div(ePrice);  \n', '        uint rs = uPrice.mul(value);\n', '        if(rate > 0){\n', '            rs = rs.mul(rate).div(100);\n', '        }\n', '        rs = rs.div(1000); \n', '        return rs;\n', '    }\n', '\n', '    function getAmountsOutToken(uint _value) public view returns (uint balance) {\n', '        uint amount;\n', '        if (upgraded) {\n', '            amount = UpgradedPriceAble(upgradedAddress).getAmountsOutToken(_value,buyTokenRate);\n', '        } else {\n', '            amount = _getAmountsOutToken(_value,buyTokenRate);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function getAmountsOutEth(uint _value) public view returns (uint balance) {\n', '        uint amount;\n', '        if (upgraded) {\n', '            amount = UpgradedPriceAble(upgradedAddress).getAmountsOutToken(_value,saleTokenRate);\n', '        } else {\n', '            amount = _getAmountsOutEth(_value,saleTokenRate);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function buyTokenSafe(uint amountOutMin,  uint deadline)payable ensure(deadline) public {\n', '        require(msg.value > 0, "!value");\n', '        uint amount = getAmountsOutToken(msg.value);\n', "        require(amount >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\n", '        uint balanced = usdg.balanceOf(address(this));\n', '        require(balanced >= amount, "!contract balanced");\n', '        usdg.transfer(msg.sender, amount);\n', '        BuyToken(msg.sender,msg.value, amount);\n', '    }\n', '\n', '    function saleTokenSafe(uint256 _value,uint amountOutMin,  uint deadline) ensure(deadline) public {\n', '        require(_value > 0, "!value");\n', '        uint amount = getAmountsOutEth(_value);\n', "        require(amount >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\n", '        msg.sender.transfer(amount);\n', '        uint allowed = usdg.allowance(msg.sender,address(this));\n', '        uint balanced = usdg.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        usdg.transferFrom( msg.sender,address(this), _value);\n', '        SaleToken(msg.sender,_value, amount);\n', '    }\n', '\n', '    function buyToken()payable  public {\n', '        require(msg.value > 0, "!value");\n', '        uint amount = getAmountsOutToken(msg.value);\n', '        uint balanced = usdg.balanceOf(address(this));\n', '        require(balanced >= amount, "!contract balanced");\n', '        usdg.transfer(msg.sender, amount);\n', '        BuyToken(msg.sender,msg.value, amount);\n', '    }\n', '\n', '    function saleToken(uint256 _value) public {\n', '        require(_value > 0, "!value");\n', '        uint amount = getAmountsOutEth(_value);\n', '        msg.sender.transfer(amount);\n', '        uint allowed = usdg.allowance(msg.sender,address(this));\n', '        uint balanced = usdg.balanceOf(msg.sender);\n', '        require(allowed >= _value, "!allowed");\n', '        require(balanced >= _value, "!balanced");\n', '        usdg.transferFrom( msg.sender,address(this), _value);\n', '        SaleToken(msg.sender,_value, amount);\n', '    }\n', '\n', '    function govWithdrawToken(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '\n', '        usdg.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(msg.sender, _amount);\n', '    }\n', '\n', '    function govWithdrawEth(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        msg.sender.transfer(_amount);\n', '        emit GovWithdrawEth(msg.sender, _amount);\n', '    }\n', '\n', '    function changeRates(uint8 _buyTokenRate, uint8 _saleTokenRate)onlyOwner public {\n', '        require(201 > buyTokenRate, "_buyTokenRate big than 200");\n', '        require(201 > _saleTokenRate, "_saleTokenRate big than 200");\n', '        buyTokenRate = _buyTokenRate;\n', '        saleTokenRate = _saleTokenRate;\n', '    }\n', '\n', '    fallback() external payable {}\n', '}']