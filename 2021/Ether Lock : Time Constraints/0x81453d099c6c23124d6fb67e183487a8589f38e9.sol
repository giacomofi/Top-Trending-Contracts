['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-15\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '// Copyright (c) 2021 0xdev0 - All rights reserved\n', '// https://twitter.com/0xdev0\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '  function initialize() external;\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '  function mint(address account, uint amount) external;\n', '  function burn(address account, uint amount) external;\n', '  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface IInterestRateModel {\n', '  function systemRate(ILendingPair _pair) external view returns(uint);\n', '  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\n', '  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\n', '}\n', '\n', 'interface IController {\n', '  function interestRateModel() external view returns(IInterestRateModel);\n', '  function feeRecipient() external view returns(address);\n', '  function liqMinHealth() external view returns(uint);\n', '  function liqFeePool() external view returns(uint);\n', '  function liqFeeSystem() external view returns(uint);\n', '  function liqFeeCaller() external view returns(uint);\n', '  function liqFeesTotal() external view returns(uint);\n', '  function tokenPrice(address _token) external view returns(uint);\n', '  function depositLimit(address _lendingPair, address _token) external view returns(uint);\n', '}\n', '\n', 'interface ILendingPair {\n', '  function checkAccountHealth(address _account) external view;\n', '  function accrueAccount(address _account) external;\n', '  function accrue() external;\n', '  function accountHealth(address _account) external view returns(uint);\n', '  function totalDebt(address _token) external view returns(uint);\n', '  function tokenA() external view returns(address);\n', '  function tokenB() external view returns(address);\n', '  function lpToken(address _token) external view returns(IERC20);\n', '  function debtOf(address _account, address _token) external view returns(uint);\n', '  function deposit(address _token, uint _amount) external;\n', '  function withdraw(address _token, uint _amount) external;\n', '  function borrow(address _token, uint _amount) external;\n', '  function repay(address _token, uint _amount) external;\n', '  function withdrawRepay(address _token, uint _amount) external;\n', '  function withdrawBorrow(address _token, uint _amount) external;\n', '  function controller() external view returns(IController);\n', '\n', '  function convertTokenValues(\n', '    address _fromToken,\n', '    address _toToken,\n', '    uint    _inputAmount\n', '  ) external view returns(uint);\n', '}\n', '\n', 'contract InterestRateModel {\n', '\n', '  // Per block\n', '  uint public constant MIN_RATE  = 0;\n', '  uint public constant LOW_RATE  = 8371385083713;   // 20%    / year = 20e18   / 365 / 86400 * 13.2 (block time)\n', '  uint public constant HIGH_RATE = 418569254185692; // 1,000% / year = 1000e18 / 365 / 86400 * 13.2 (block time)\n', '\n', '  uint public constant TARGET_UTILIZATION = 80e18; // 80%\n', '  uint public constant SYSTEM_RATE        = 50e18; // share of fees earned by the system\n', '\n', '  function supplyRatePerBlock(ILendingPair _pair, address _token) public view returns(uint) {\n', '    return borrowRatePerBlock(_pair, _token) * (100e18 - SYSTEM_RATE) / 100e18;\n', '  }\n', '\n', '  function borrowRatePerBlock(ILendingPair _pair, address _token) public view returns(uint) {\n', '    uint debt = _pair.totalDebt(_token);\n', '    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\n', '\n', '    if (supply == 0 || debt == 0) { return MIN_RATE; }\n', '\n', '    uint utilization = _max(debt * 100e18 / supply, 100e18);\n', '\n', '    if (utilization < TARGET_UTILIZATION) {\n', '      uint rate = LOW_RATE * utilization / 100e18;\n', '      return (rate < MIN_RATE) ? MIN_RATE : rate;\n', '    } else {\n', '      utilization = 100e18 * ( debt - (supply * TARGET_UTILIZATION / 100e18) ) / (supply * (100e18 - TARGET_UTILIZATION) / 100e18);\n', '      utilization = _max(utilization, 100e18);\n', '      return LOW_RATE + (HIGH_RATE - LOW_RATE) * utilization / 100e18;\n', '    }\n', '  }\n', '\n', '  function utilizationRate(ILendingPair _pair, address _token) public view returns(uint) {\n', '    uint debt = _pair.totalDebt(_token);\n', '    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\n', '\n', '    if (supply == 0 || debt == 0) { return 0; }\n', '\n', '    return _max(debt * 100e18 / supply, 100e18);\n', '  }\n', '\n', '  // InterestRateModel can later be replaced for more granular fees per _lendingPair\n', '  function systemRate(ILendingPair _pair) public pure returns(uint) {\n', '    return SYSTEM_RATE;\n', '  }\n', '\n', '  function _max(uint _valueA, uint _valueB) internal pure returns(uint) {\n', '    return _valueA > _valueB ? _valueB : _valueA;\n', '  }\n', '}']