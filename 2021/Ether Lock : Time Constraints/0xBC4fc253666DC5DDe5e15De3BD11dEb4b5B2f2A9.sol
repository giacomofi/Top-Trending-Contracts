['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol";\n', 'import "@boringcrypto/boring-solidity/contracts/BoringBatchable.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./libraries/SignedSafeMath.sol";\n', 'import "./interfaces/IRewarder.sol";\n', 'import "./interfaces/IRewardsSchedule.sol";\n', '\n', '/************************************************************************************************\n', 'Originally from\n', 'https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChefV2.sol\n', 'and\n', 'https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\n', '\n', 'This source code has been modified from the original, which was copied from the github repository\n', 'at commit hash 10148a31d9192bc803dac5d24fe0319b52ae99a4.\n', '*************************************************************************************************/\n', '\n', '\n', 'contract MultiTokenStaking is Ownable, BoringBatchable {\n', '  using BoringMath for uint256;\n', '  using BoringMath128 for uint128;\n', '  using BoringERC20 for IERC20;\n', '  using SignedSafeMath for int256;\n', '\n', '/** ==========  Constants  ========== */\n', '\n', '  uint256 private constant ACC_REWARDS_PRECISION = 1e12;\n', '\n', '  /**\n', '   * @dev ERC20 token used to distribute rewards.\n', '   */\n', '  IERC20 public immutable rewardsToken;\n', '\n', '  /**\n', '   * @dev Contract that determines the amount of rewards distributed per block.\n', '   * Note: This contract MUST always return the exact same value for any\n', '   * combination of `(from, to)` IF `from` is less than `block.number`.\n', '   */\n', '  IRewardsSchedule public immutable rewardsSchedule;\n', '\n', '/** ==========  Structs  ========== */\n', '\n', '  /**\n', '   * @dev Info of each user.\n', '   * @param amount LP token amount the user has provided.\n', '   * @param rewardDebt The amount of rewards entitled to the user.\n', '   */\n', '  struct UserInfo {\n', '    uint256 amount;\n', '    int256 rewardDebt;\n', '  }\n', '\n', '  /**\n', '   * @dev Info of each rewards pool.\n', '   * @param accRewardsPerShare Total rewards accumulated per staked token.\n', '   * @param lastRewardBlock Last time rewards were updated for the pool.\n', '   * @param allocPoint The amount of allocation points assigned to the pool.\n', '   */\n', '  struct PoolInfo {\n', '    uint128 accRewardsPerShare;\n', '    uint64 lastRewardBlock;\n', '    uint64 allocPoint;\n', '  }\n', '\n', '/** ==========  Events  ========== */\n', '\n', '  event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n', '  event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n', '  event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\n', '  event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\n', '  event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accRewardsPerShare);\n', '  event RewardsAdded(uint256 amount);\n', '  event PointsAllocatorSet(address pointsAllocator);\n', '\n', '/** ==========  Storage  ========== */\n', '\n', '  /**\n', '   * @dev Indicates whether a staking pool exists for a given staking token.\n', '   */\n', '  mapping(address => bool) public stakingPoolExists;\n', '\n', '  /**\n', '   * @dev Info of each staking pool.\n', '   */\n', '  PoolInfo[] public poolInfo;\n', '\n', '  /**\n', '   * @dev Address of the LP token for each staking pool.\n', '   */\n', '  mapping(uint256 => IERC20) public lpToken;\n', '\n', '  /**\n', '   * @dev Address of each `IRewarder` contract.\n', '   */\n', '  mapping(uint256 => IRewarder) public rewarder;\n', '\n', '  /**\n', '   * @dev Info of each user that stakes tokens.\n', '   */\n', '  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '\n', '  /**\n', '   * @dev Total allocation points. Must be the sum of all allocation points in all pools.\n', '   */\n', '  uint256 public totalAllocPoint = 0;\n', '\n', '  /**\n', '   * @dev Account allowed to allocate points.\n', '   */\n', '  address public pointsAllocator;\n', '\n', '  /**\n', '   * @dev Total rewards received from governance for distribution.\n', '   * Used to return remaining rewards if staking is canceled.\n', '   */\n', '  uint256 public totalRewardsReceived;\n', '\n', '  function poolLength() external view returns (uint256) {\n', '    return poolInfo.length;\n', '  }\n', '\n', '/** ==========  Modifiers  ========== */\n', '\n', '  /**\n', '   * @dev Ensure the caller is allowed to allocate points.\n', '   */\n', '  modifier onlyPointsAllocatorOrOwner {\n', '    require(\n', '      msg.sender == pointsAllocator || msg.sender == owner(),\n', '      "MultiTokenStaking: not authorized to allocate points"\n', '    );\n', '    _;\n', '  }\n', '\n', '/** ==========  Constructor  ========== */\n', '\n', '  constructor(address _rewardsToken, address _rewardsSchedule) public {\n', '    rewardsToken = IERC20(_rewardsToken);\n', '    rewardsSchedule = IRewardsSchedule(_rewardsSchedule);\n', '  }\n', '\n', '/** ==========  Governance  ========== */\n', '\n', '  /**\n', '   * @dev Set the address of the points allocator.\n', '   * This account will have the ability to set allocation points for LP rewards.\n', '   */\n', '  function setPointsAllocator(address _pointsAllocator) external onlyOwner {\n', '    pointsAllocator = _pointsAllocator;\n', '    emit PointsAllocatorSet(_pointsAllocator);\n', '  }\n', '\n', '  /**\n', '   * @dev Add rewards to be distributed.\n', '   *\n', '   * Note: This function must be used to add rewards if the owner\n', '   * wants to retain the option to cancel distribution and reclaim\n', '   * undistributed tokens.\n', '   */\n', '  function addRewards(uint256 amount) external onlyPointsAllocatorOrOwner {\n', '    rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    totalRewardsReceived = totalRewardsReceived.add(amount);\n', '    emit RewardsAdded(amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the early end block for rewards on the rewards\n', '   * schedule contract and return any tokens which will not\n', '   * be distributed by the early end block.\n', '   */\n', '  function setEarlyEndBlock(uint256 earlyEndBlock) external onlyOwner {\n', '    // Rewards schedule contract must assert that an early end block has not\n', '    // already been set, otherwise this can be used to drain the staking\n', '    // contract, meaning users will not receive earned rewards.\n', '    uint256 totalRewards = rewardsSchedule.getRewardsForBlockRange(\n', '      rewardsSchedule.startBlock(),\n', '      earlyEndBlock\n', '    );\n', '    uint256 undistributedAmount = totalRewardsReceived.sub(totalRewards);\n', '    rewardsSchedule.setEarlyEndBlock(earlyEndBlock);\n', '    rewardsToken.safeTransfer(owner(), undistributedAmount);\n', '  }\n', '\n', '/** ==========  Pools  ========== */\n', '  /**\n', '   * @dev Add a new LP to the pool.\n', '   * Can only be called by the owner or the points allocator.\n', '   * @param _allocPoint AP of the new pool.\n', '   * @param _lpToken Address of the LP ERC-20 token.\n', '   * @param _rewarder Address of the rewarder delegate.\n', '   */\n', '  function add(uint256 _allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyPointsAllocatorOrOwner {\n', '    require(!stakingPoolExists[address(_lpToken)], "MultiTokenStaking: Staking pool already exists.");\n', '    uint256 pid = poolInfo.length;\n', '    totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '    lpToken[pid] = _lpToken;\n', '    if (address(_rewarder) != address(0)) {\n', '      rewarder[pid] = _rewarder;\n', '    }\n', '    poolInfo.push(PoolInfo({\n', '      allocPoint: _allocPoint.to64(),\n', '      lastRewardBlock: block.number.to64(),\n', '      accRewardsPerShare: 0\n', '    }));\n', '    stakingPoolExists[address(_lpToken)] = true;\n', '\n', '    emit LogPoolAddition(pid, _allocPoint, _lpToken, _rewarder);\n', '  }\n', '\n', '  /**\n', "   * @dev Update the given pool's allocation points.\n", '   * Can only be called by the owner or the points allocator.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _allocPoint New AP of the pool.\n', '   * @param _rewarder Address of the rewarder delegate.\n', '   * @param _overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n', '   */\n', '  function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool _overwrite) public onlyPointsAllocatorOrOwner {\n', '    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '    poolInfo[_pid].allocPoint = _allocPoint.to64();\n', '    if (_overwrite) {\n', '      rewarder[_pid] = _rewarder;\n', '    }\n', '    emit LogSetPool(_pid, _allocPoint, _overwrite ? _rewarder : rewarder[_pid], _overwrite);\n', '  }\n', '\n', '  /**\n', '   * @dev Update reward variables for all pools in `pids`.\n', '   * Note: This can become very expensive.\n', '   * @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n', '   */\n', '  function massUpdatePools(uint256[] calldata pids) external {\n', '    uint256 len = pids.length;\n', '    for (uint256 i = 0; i < len; ++i) {\n', '      updatePool(pids[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Update reward variables of the given pool.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @return pool Returns the pool that was updated.\n', '   */\n', '  function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n', '    pool = poolInfo[_pid];\n', '    if (block.number > pool.lastRewardBlock) {\n', '      uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n', '      if (lpSupply > 0) {\n', '        uint256 rewardsTotal = rewardsSchedule.getRewardsForBlockRange(pool.lastRewardBlock, block.number);\n', '        uint256 poolReward = rewardsTotal.mul(pool.allocPoint) / totalAllocPoint;\n', '        pool.accRewardsPerShare = pool.accRewardsPerShare.add((poolReward.mul(ACC_REWARDS_PRECISION) / lpSupply).to128());\n', '      }\n', '      pool.lastRewardBlock = block.number.to64();\n', '      poolInfo[_pid] = pool;\n', '      emit LogUpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accRewardsPerShare);\n', '    }\n', '  }\n', '\n', '/** ==========  Users  ========== */\n', '\n', '  /**\n', '   * @dev View function to see pending rewards on frontend.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _user Address of user.\n', '   * @return pending rewards for a given user.\n', '   */\n', '  function pendingRewards(uint256 _pid, address _user) external view returns (uint256 pending) {\n', '    PoolInfo memory pool = poolInfo[_pid];\n', '    UserInfo storage user = userInfo[_pid][_user];\n', '    uint256 accRewardsPerShare = pool.accRewardsPerShare;\n', '    uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n', '    if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '      uint256 rewardsTotal = rewardsSchedule.getRewardsForBlockRange(pool.lastRewardBlock, block.number);\n', '      uint256 poolReward = rewardsTotal.mul(pool.allocPoint) / totalAllocPoint;\n', '      accRewardsPerShare = accRewardsPerShare.add(poolReward.mul(ACC_REWARDS_PRECISION) / lpSupply);\n', '    }\n', '    pending = int256(user.amount.mul(accRewardsPerShare) / ACC_REWARDS_PRECISION).sub(user.rewardDebt).toUInt256();\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit LP tokens to earn rewards.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _amount LP token amount to deposit.\n', '   * @param _to The receiver of `_amount` deposit benefit.\n', '   */\n', '  function deposit(uint256 _pid, uint256 _amount, address _to) public {\n', '    PoolInfo memory pool = updatePool(_pid);\n', '    UserInfo storage user = userInfo[_pid][_to];\n', '\n', '    // Effects\n', '    user.amount = user.amount.add(_amount);\n', '    user.rewardDebt = user.rewardDebt.add(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\n', '\n', '    // Interactions\n', '    lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '    emit Deposit(msg.sender, _pid, _amount, _to);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw LP tokens from the staking contract.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _amount LP token amount to withdraw.\n', '   * @param _to Receiver of the LP tokens.\n', '   */\n', '  function withdraw(uint256 _pid, uint256 _amount, address _to) public {\n', '    PoolInfo memory pool = updatePool(_pid);\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '\n', '    // Effects\n', '    user.rewardDebt = user.rewardDebt.sub(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\n', '    user.amount = user.amount.sub(_amount);\n', '\n', '    // Interactions\n', '    lpToken[_pid].safeTransfer(_to, _amount);\n', '\n', '    emit Withdraw(msg.sender, _pid, _amount, _to);\n', '  }\n', '\n', '  /**\n', '   * @dev Harvest proceeds for transaction sender to `_to`.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _to Receiver of rewards.\n', '   */\n', '  function harvest(uint256 _pid, address _to) public {\n', '    PoolInfo memory pool = updatePool(_pid);\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '    int256 accumulatedRewards = int256(user.amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION);\n', '    uint256 _pendingRewards = accumulatedRewards.sub(user.rewardDebt).toUInt256();\n', '\n', '    // Effects\n', '    user.rewardDebt = accumulatedRewards;\n', '\n', '    // Interactions\n', '    rewardsToken.safeTransfer(_to, _pendingRewards);\n', '\n', '    address _rewarder = address(rewarder[_pid]);\n', '    if (_rewarder != address(0)) {\n', '      IRewarder(_rewarder).onStakingReward(_pid, msg.sender, _pendingRewards);\n', '    }\n', '    emit Harvest(msg.sender, _pid, _pendingRewards);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw LP tokens and harvest accumulated rewards, sending both to `to`.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _amount LP token amount to withdraw.\n', '   * @param _to Receiver of the LP tokens and rewards.\n', '   */\n', '  function withdrawAndHarvest(uint256 _pid, uint256 _amount, address _to) public {\n', '    PoolInfo memory pool = updatePool(_pid);\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '    int256 accumulatedRewards = int256(user.amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION);\n', '    uint256 _pendingRewards = accumulatedRewards.sub(user.rewardDebt).toUInt256();\n', '\n', '    // Effects\n', '    user.rewardDebt = accumulatedRewards.sub(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\n', '    user.amount = user.amount.sub(_amount);\n', '\n', '    // Interactions\n', '    rewardsToken.safeTransfer(_to, _pendingRewards);\n', '    lpToken[_pid].safeTransfer(_to, _amount);\n', '    address _rewarder = address(rewarder[_pid]);\n', '    if (_rewarder != address(0)) {\n', '      IRewarder(_rewarder).onStakingReward(_pid, msg.sender, _pendingRewards);\n', '    }\n', '\n', '    emit Harvest(msg.sender, _pid, _pendingRewards);\n', '    emit Withdraw(msg.sender, _pid, _amount, _to);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\n', '   * @param _pid The index of the pool. See `poolInfo`.\n', '   * @param _to Receiver of the LP tokens.\n', '   */\n', '  function emergencyWithdraw(uint256 _pid, address _to) public {\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '    uint256 amount = user.amount;\n', '    user.amount = 0;\n', '    user.rewardDebt = 0;\n', '    // Note: transfer can fail or succeed if `amount` is zero.\n', '    lpToken[_pid].safeTransfer(_to, amount);\n', '    emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, "BoringMath: Underflow");}\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, "BoringMath: Mul Overflow");}\n', '    function to128(uint256 a) internal pure returns (uint128 c) {\n', '        require(a <= uint128(-1), "BoringMath: uint128 Overflow");\n', '        c = uint128(a);\n', '    }\n', '    function to64(uint256 a) internal pure returns (uint64 c) {\n', '        require(a <= uint64(-1), "BoringMath: uint64 Overflow");\n', '        c = uint64(a);\n', '    }\n', '    function to32(uint256 a) internal pure returns (uint32 c) {\n', '        require(a <= uint32(-1), "BoringMath: uint32 Overflow");\n', '        c = uint32(a);\n', '    }\n', '}\n', '\n', 'library BoringMath128 {\n', '    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}\n', '    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, "BoringMath: Underflow");}\n', '}\n', '\n', 'library BoringMath64 {\n', '    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}\n', '    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, "BoringMath: Underflow");}\n', '}\n', '\n', 'library BoringMath32 {\n', '    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}\n', '    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, "BoringMath: Underflow");}\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '// Audit on 5-Jan-2021 by Keno and BoringCrypto\n', '\n', '// P1 - P3: OK\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '// solhint-disable avoid-low-level-calls\n', '\n', 'import "./libraries/BoringERC20.sol";\n', '\n', '// T1 - T4: OK\n', 'contract BaseBoringBatchable {\n', '    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n', '        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n', '        if (_returnData.length < 68) return "Transaction reverted silently";\n', '\n', '        assembly {\n', '            // Slice the sighash.\n', '            _returnData := add(_returnData, 0x04)\n', '        }\n', '        return abi.decode(_returnData, (string)); // All that remains is the revert string\n', '    }    \n', '    \n', '    // F3 - F9: OK\n', '    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\n', '    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\n', '    // C1 - C21: OK\n', "    // C3: The length of the loop is fully under user control, so can't be exploited\n", "    // C7: Delegatecall is only used on the same contract, so it's safe\n", '    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\n', '        // Interactions\n', '        successes = new bool[](calls.length);\n', '        results = new bytes[](calls.length);\n', '        for (uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\n', '            require(success || !revertOnFail, _getRevertMsg(result));\n', '            successes[i] = success;\n', '            results[i] = result;\n', '        }\n', '    }\n', '}\n', '\n', '// T1 - T4: OK\n', 'contract BoringBatchable is BaseBoringBatchable {\n', '    // F1 - F9: OK\n', "    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\n", '    //     if part of a batch this could be used to grief once as the second call would not need the permit\n', '    // C1 - C21: OK\n', '    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        // Interactions\n', '        // X1 - X5\n', '        token.permit(from, to, amount, deadline, v, r, s);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'library SignedSafeMath {\n', '  int256 constant private _INT256_MIN = -2**255;\n', '\n', '  /**\n', '    * @dev Returns the multiplication of two signed integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Multiplication cannot overflow.\n', '    */\n', '  function mul(int256 a, int256 b) internal pure returns (int256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '    int256 c = a * b;\n', '    require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two signed integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(int256 a, int256 b) internal pure returns (int256) {\n', '    require(b != 0, "SignedSafeMath: division by zero");\n', '    require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '    int256 c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two signed integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(int256 a, int256 b) internal pure returns (int256) {\n', '    int256 c = a - b;\n', '    require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the addition of two signed integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Addition cannot overflow.\n', '    */\n', '  function add(int256 a, int256 b) internal pure returns (int256) {\n', '    int256 c = a + b;\n', '    require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  function toUInt256(int256 a) internal pure returns (uint256) {\n', '    require(a >= 0, "Integer < 0");\n', '    return uint256(a);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IRewarder {\n', '  function onStakingReward(uint256 pid, address user, uint256 rewardAmount) external;\n', '  function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external returns (address[] memory, uint256[] memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IRewardsSchedule {\n', '  event EarlyEndBlockSet(uint256 earlyEndBlock);\n', '\n', '  function startBlock() external view returns (uint256);\n', '  function endBlock() external view returns (uint256);\n', '  function getRewardsForBlockRange(uint256 from, uint256 to) external view returns (uint256);\n', '  function setEarlyEndBlock(uint256 earlyEndBlock) external;\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.6.12;\n', '\n', 'import "../interfaces/IERC20.sol";\n', '\n', 'library BoringERC20 {\n', '    function safeSymbol(IERC20 token) internal view returns(string memory) {\n', '        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\n', '        return success && data.length > 0 ? abi.decode(data, (string)) : "???";\n', '    }\n', '\n', '    function safeName(IERC20 token) internal view returns(string memory) {\n', '        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\n', '        return success && data.length > 0 ? abi.decode(data, (string)) : "???";\n', '    }\n', '\n', '    function safeDecimals(IERC20 token) internal view returns (uint8) {\n', '        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\n', '        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n', '    }\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    // EIP 2612\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']