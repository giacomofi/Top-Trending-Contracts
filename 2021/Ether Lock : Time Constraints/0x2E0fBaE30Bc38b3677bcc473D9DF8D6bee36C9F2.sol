['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', '/**\n', ' * @title ITokenRegistry\n', ' * @notice TokenRegistry interface\n', ' */\n', 'interface ITokenRegistry {\n', '    function isTokenTradable(address _token) external view returns (bool _isTradable);\n', '    function areTokensTradable(address[] calldata _tokens) external view returns (bool _areTradable);\n', '}\n', '\n', '// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./ITokenRegistry.sol";\n', 'import "./base/Managed.sol";\n', '\n', '/**\n', ' * @title TokenRegistry\n', ' * @notice Contract storing a list of tokens that can be safely traded.\n', ' * @notice Only the owner can make a token tradable. Managers can make a token untradable.\n', ' */\n', 'contract TokenRegistry is ITokenRegistry, Managed {\n', '\n', '    // Tradable flag per token\n', '    mapping(address => bool) public isTradable;\n', '\n', '    function isTokenTradable(address _token) external override view returns (bool _isTradable) {\n', '        _isTradable = isTradable[_token];\n', '    }\n', '\n', '    function areTokensTradable(address[] calldata _tokens) external override view returns (bool _areTradable) {\n', '        for (uint256 i = 0; i < _tokens.length; i++) {\n', '            if(!isTradable[_tokens[i]]) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function getTradableForTokenList(address[] calldata _tokens) external view returns (bool[] memory _tradable) {\n', '        _tradable = new bool[](_tokens.length);\n', '        for (uint256 i = 0; i < _tokens.length; i++) {\n', '            _tradable[i] = isTradable[_tokens[i]];\n', '        }\n', '    }\n', '\n', '    function setTradableForTokenList(address[] calldata _tokens, bool[] calldata _tradable) external {\n', '        require(_tokens.length == _tradable.length, "TR: Array length mismatch");\n', '        if(msg.sender == owner) {\n', '            for (uint256 i = 0; i < _tokens.length; i++) {\n', '                isTradable[_tokens[i]] = _tradable[i];\n', '            }\n', '        } else {\n', '            require(managers[msg.sender], "TR: Unauthorised");\n', '            for (uint256 i = 0; i < _tokens.length; i++) {\n', '                require(_tradable[i] == false, "TR: Unauthorised operation");\n', '                isTradable[_tokens[i]] = _tradable[i];\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./Owned.sol";\n', '\n', '/**\n', ' * @title Managed\n', ' * @notice Basic contract that defines a set of managers. Only the owner can add/remove managers.\n', ' * @author Julien Niset, Olivier VDB - <[email\xa0protected]>, <[email\xa0protected]>\n', ' */\n', 'contract Managed is Owned {\n', '\n', '    // The managers\n', '    mapping (address => bool) public managers;\n', '\n', '    /**\n', '     * @notice Throws if the sender is not a manager.\n', '     */\n', '    modifier onlyManager {\n', '        require(managers[msg.sender] == true, "M: Must be manager");\n', '        _;\n', '    }\n', '\n', '    event ManagerAdded(address indexed _manager);\n', '    event ManagerRevoked(address indexed _manager);\n', '\n', '    /**\n', '    * @notice Adds a manager.\n', '    * @param _manager The address of the manager.\n', '    */\n', '    function addManager(address _manager) external onlyOwner {\n', '        require(_manager != address(0), "M: Address must not be null");\n', '        if (managers[_manager] == false) {\n', '            managers[_manager] = true;\n', '            emit ManagerAdded(_manager);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Revokes a manager.\n', '    * @param _manager The address of the manager.\n', '    */\n', '    function revokeManager(address _manager) external virtual onlyOwner {\n', '        // solhint-disable-next-line reason-string\n', '        require(managers[_manager] == true, "M: Target must be an existing manager");\n', '        delete managers[_manager];\n', '        emit ManagerRevoked(_manager);\n', '    }\n', '}\n', '\n', '// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity >=0.5.4 <0.9.0;\n', '\n', '/**\n', ' * @title Owned\n', ' * @notice Basic contract to define an owner.\n', ' * @author Julien Niset - <[email\xa0protected]>\n', ' */\n', 'contract Owned {\n', '\n', '    // The owner\n', '    address public owner;\n', '\n', '    event OwnerChanged(address indexed _newOwner);\n', '\n', '    /**\n', '     * @notice Throws if the sender is not the owner.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Must be owner");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @notice Lets the owner transfer ownership of the contract to a new owner.\n', '     * @param _newOwner The new owner.\n', '     */\n', '    function changeOwner(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "Address must not be null");\n', '        owner = _newOwner;\n', '        emit OwnerChanged(_newOwner);\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {\n', '    "": {}\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']