['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: contracts\\ENERGY.sol\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', 'contract ENERGY is ERC20Burnable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant initialSupply = 89099136 * 10 ** 3;\n', '  uint256 public lastWeekTime;\n', '  uint256 public weekCount;\n', '  //staking start when week count set to 1 -> rewards calculated before just updating week\n', '  uint256 public constant totalWeeks = 100;\n', '  address public stakingContrAddr;\n', '  address public liquidityContrAddr;\n', '  uint256 public constant timeStep = 1 weeks;\n', '  \n', '  modifier onlyStaking() {\n', '    require(_msgSender() == stakingContrAddr, "Not staking contract");\n', '    _;\n', '  }\n', '\n', '  constructor (address _liquidityContrAddr) ERC20("ENERGY", "NRGY") {\n', '    //89099.136 coins\n', '    _setupDecimals(6);\n', '    lastWeekTime = block.timestamp;\n', '    liquidityContrAddr = _liquidityContrAddr;\n', '    _mint(_msgSender(), initialSupply.mul(4).div(10)); //40%\n', '    _mint(liquidityContrAddr, initialSupply.mul(6).div(10)); //60%\n', '  }\n', '\n', '  function mintNewCoins(uint256[3] memory lastWeekRewards) public onlyStaking returns(bool) {\n', '    if(weekCount >= 1) {\n', '        uint256 newMint = lastWeekRewards[0].add(lastWeekRewards[1]).add(lastWeekRewards[2]);\n', '        uint256 liquidityMint = (newMint.mul(20)).div(100);\n', '        _mint(liquidityContrAddr, liquidityMint);\n', '        _mint(stakingContrAddr, newMint);\n', '    } else {\n', '        _mint(liquidityContrAddr, initialSupply);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  //updates only at end of week\n', '  function updateWeek() public onlyStaking {\n', '    weekCount++;\n', '    lastWeekTime = block.timestamp;\n', '  }\n', '\n', '  function updateStakingContract(address _stakingContrAddr) public {\n', '    require(stakingContrAddr == address(0), "Staking contract is already set");\n', '    stakingContrAddr = _stakingContrAddr;\n', '  }\n', '\n', '  function burnOnUnstake(address account, uint256 amount) public onlyStaking {\n', '      _burn(account, amount);\n', '  }\n', '\n', '  function getLastWeekUpdateTime() public view returns(uint256) {\n', '    return lastWeekTime;\n', '  }\n', '\n', '  function isMintingCompleted() public view returns(bool) {\n', '    if(weekCount > totalWeeks) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function isGreaterThanAWeek() public view returns(bool) {\n', '    if(block.timestamp > getLastWeekUpdateTime().add(timeStep)) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts\\NRGYMarketMaker.sol\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', 'contract NRGYMarketMaker  {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    \n', '    struct UserData {\n', '        address user;\n', '        bool isActive;\n', '        uint256 rewards;\n', '        uint256 feeRewards;\n', '        uint256 depositTime;\n', '        uint256 share;\n', '        //update when user came first time or after unstaking to stake\n', '        uint256 startedWeek;\n', '        //update everytime whenever user comes to unstake\n', '        uint256 endedWeek;\n', '        mapping(uint256 => uint256) shareByWeekNo;\n', '    }\n', '    \n', '    struct FeeRewardData {\n', '        uint256 value;\n', '        uint256 timeStamp;\n', '        uint256 totalStakersAtThatTime;\n', '        uint256 weekGiven;\n', '        mapping(address => bool) isClaimed;\n', '    }\n', '\n', '    ENERGY public energy;\n', '    IERC20 public lpToken;\n', '    uint256 public totalShares;\n', '    //initially it will be 27000\n', '    uint256[] public stakingLimit;\n', '    uint256 public constant minStakeForFeeRewards = 25 * 10 ** 6;\n', '    uint256 public totalRewards;\n', '    uint256 public totalFeeRewards;\n', '    uint256 public rewardsAvailableInContract;\n', '    uint256 public feeRewardsAvailableInContract;\n', '    uint256 public feeRewardsCount;\n', '    uint256 public totalStakeUsers;\n', '    uint256 public constant percentageDivider = 100;\n', '    //10%, 30%, 60%\n', '    uint256[3] private rewardPercentages = [10, 30, 60];\n', '    //7.5%\n', '    uint256 public constant unstakeFees = 75;\n', '    //total weeks\n', '    uint256 public totalWeeks;\n', '    \n', '    //user informations\n', '    mapping(uint256 => address) public userList;\n', '    mapping(address => UserData) public userInfo;\n', '    mapping (address => bool) public smartContractStakers;\n', '    \n', '    //contract info\n', '    mapping(uint256 => uint256) private stakePerWeek;\n', '    mapping(uint256 => uint256) private totalSharesByWeek;\n', '    mapping(uint256 => uint256[3]) private rewardByWeek;\n', '    mapping(uint256 => FeeRewardData) private feeRewardData;\n', '\n', '    event Staked(address indexed _user, uint256 _amountStaked, uint256 _balanceOf);\n', '    event Withdrawn(address indexed _user,\n', '                    uint256 _amountTransferred,\n', '                    uint256 _amountUnstaked,\n', '                    uint256 _shareDeducted,\n', '                    uint256 _rewardsDeducted,\n', '                    uint256 _feeRewardsDeducted);\n', '    event RewardDistributed(uint256 _weekNo, uint256[3] _lastWeekRewards);\n', '    event FeeRewardDistributed(uint256 _amount, uint256 _totalFeeRewards);\n', '\n', '    constructor(address _energy) {\n', '        energy = ENERGY(_energy);\n', '        lpToken = IERC20(_energy);\n', '        totalWeeks = energy.totalWeeks();\n', '        stakingLimit.push(27000 * 10 ** 6);\n', '    }\n', '\n', '    // stake the coins\n', '    function stake(uint256 amount) public {\n', '        _stake(amount, tx.origin);\n', '    }\n', '    \n', '    function stakeOnBehalf(uint256 amount, address _who) public {\n', '        _stake(amount, _who);\n', '    }\n', '\n', '    function _stake(uint256 _amount, address _who) internal {\n', '        uint256 _weekCount = energy.weekCount();\n', '        bool isWeekOver = energy.isGreaterThanAWeek();\n', '\n', '        if((_weekCount >= 1 && !isWeekOver) || _weekCount == 0) {\n', '            require(!isStakingLimitReached(_amount, _weekCount), "Stake limit has been reached");\n', '        }\n', '\n', '        //if week over or week is 0\n', '        if(!isWeekOver || _weekCount == 0) {\n', '            //add current week stake\n', '            stakePerWeek[_weekCount] = getStakeByWeekNo(_weekCount).add(_amount);\n', '            // update current week cumulative stake\n', '            //store total shares by week no at time of stake\n', '            totalSharesByWeek[_weekCount] = totalShares.add(_amount);\n', '            userInfo[_who].shareByWeekNo[_weekCount] = getUserShareByWeekNo(_who, _weekCount).add(_amount);\n', '\n', '            //if current week share is 0 get share for previous week\n', '            if(_weekCount == 0) {\n', '                if(stakingLimit[0] == totalShares.add(_amount)) {\n', '                    setStakingLimit(_weekCount, stakingLimit[0]);\n', '                    energy.mintNewCoins(getRewardsByWeekNo(0));\n', '                    energy.updateWeek();\n', '                }\n', '            }\n', '        } else/*is week is greater than 1 and is over */ {\n', '            //update this week shae by adding previous week share\n', '            userInfo[_who].shareByWeekNo[_weekCount.add(1)] = getUserShareByWeekNo(_who, _weekCount).add(_amount);\n', '            //update next week stake\n', '            stakePerWeek[_weekCount.add(1)] = getStakeByWeekNo(_weekCount.add(1)).add(_amount);\n', '            //update next week cumulative stake\n', '            //store total shares of next week no at time of stake\n', '            totalSharesByWeek[_weekCount.add(1)] = totalShares.add(_amount);\n', '            setStakingLimit(_weekCount, totalShares);\n', '            energy.updateWeek();\n', '            //if week over update followings and greater than 1\n', '            /*give rewards only after week end and till 3 more weeks of total weeks */\n', '            if(_weekCount <= totalWeeks.add(3)) {\n', '                //store rewards generated that week by week no at end of week\n', '                //eg: when week 1 is over, it will store rewards generated that week before week changed from 1 to 2\n', '                setRewards(_weekCount);\n', '                uint256 rewardDistributed = (rewardByWeek[_weekCount][0])\n', '                                .add(rewardByWeek[_weekCount][1])\n', '                                .add(rewardByWeek[_weekCount][2]);\n', '                totalRewards = totalRewards.add(rewardDistributed);\n', '                energy.mintNewCoins(getRewardsByWeekNo(_weekCount));\n', '                rewardsAvailableInContract = rewardsAvailableInContract.add(rewardDistributed);\n', '                emit RewardDistributed(_weekCount, getRewardsByWeekNo(_weekCount));\n', '            }\n', '        }\n', '        \n', '        //if user not active, set current week as his start week\n', '        if(!getUserStatus(_who)) {\n', '            userInfo[_who].isActive = true;\n', '            if(getUserShare(_who) < minStakeForFeeRewards) {\n', '                userInfo[_who].startedWeek = _weekCount;\n', '                userInfo[_who].depositTime = block.timestamp;\n', '            }\n', '        }\n', '        \n', '        if(!isUserPreviouslyStaked(_who)) {\n', '            userList[totalStakeUsers] = _who;\n', '            totalStakeUsers++;\n', '            smartContractStakers[_who] = true;\n', '            userInfo[_who].user = _who;\n', '        }\n', '        \n', '        userInfo[_who].share = userInfo[_who].share.add(_amount);\n', '        //update total shares in the end\n', '        totalShares = totalShares.add(_amount);\n', '        \n', '        //if-> user is directly staking\n', '        if(msg.sender == tx.origin) {\n', '            // now we can issue shares\n', '            lpToken.safeTransferFrom(_who, address(this), _amount);\n', '        } else /*through liquity contract */ {\n', '            // now we can issue shares\n', '            //transfer from liquidty contract\n', '            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '        }\n', '        emit Staked(_who, _amount, claimedBalanceOf(_who));\n', '    }\n', '    \n', '    function setStakingLimit(uint256 _weekCount, uint256 _share) internal {\n', '        uint256 lastWeekStakingLeft = stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount));\n', '        // first 4 weeks are: 0,1,2,3\n', '        if(_weekCount <= 3) {\n', '            //32%\n', '            stakingLimit.push((_share.mul(32)).div(percentageDivider));\n', '        }\n', '        if(_weekCount > 3) {\n', '            //0.04%\n', '            stakingLimit.push((_share.mul(4)).div(percentageDivider));\n', '        }\n', '        stakingLimit[_weekCount.add(1)] = stakingLimit[_weekCount.add(1)].add(lastWeekStakingLeft);\n', '    }\n', '    \n', '    function setRewards(uint256 _weekCount) internal {\n', '        (rewardByWeek[_weekCount][0],\n', '        rewardByWeek[_weekCount][1],\n', '        rewardByWeek[_weekCount][2]) = calculateRewardsByWeekCount(_weekCount);\n', '    }\n', '    \n', '    function calculateRewards() public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {\n', '        return calculateRewardsByWeekCount(energy.weekCount());\n', '    }\n', '    \n', '    function calculateRewardsByWeekCount(uint256 _weekCount) public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {\n', '        bool isLastWeek = (_weekCount >= totalWeeks);\n', '        if(isLastWeek) {\n', '            if(_weekCount.sub(totalWeeks) == 0) {\n', '                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\n', '                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\n', '                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\n', '            } else if(_weekCount.sub(totalWeeks) == 1) {\n', '                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\n', '                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\n', '            } else if(_weekCount.sub(totalWeeks) == 2) {\n', '                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\n', '            }\n', '        } else {\n', '            if(_weekCount == 1) {\n', '                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\n', '            } else if(_weekCount == 2) {\n', '                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\n', '                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\n', '            } else if(_weekCount >= 3) {\n', '                _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);\n', '                _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);\n', '                _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);\n', '            }\n', '        }\n', '    }\n', '    function isStakingLimitReached(uint256 _amount, uint256 _weekCount) public view returns(bool) {\n', '        return (getStakeByWeekNo(_weekCount).add(_amount) > stakingLimit[_weekCount]);\n', '    }\n', '\n', '    function remainingStakingLimit(uint256 _weekCount) public view returns(uint256) {\n', '        return (stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount)));\n', '    }\n', '\n', '    function distributeFees(uint256 _amount) public {\n', '        uint256 _weekCount = energy.weekCount();\n', '        FeeRewardData storage _feeRewardData = feeRewardData[feeRewardsCount];\n', '        _feeRewardData.value = _amount;\n', '        _feeRewardData.timeStamp = block.timestamp;\n', '        _feeRewardData.totalStakersAtThatTime = totalStakeUsers;\n', '        _feeRewardData.weekGiven = _weekCount;\n', '        feeRewardsCount++;\n', '        totalFeeRewards = totalFeeRewards.add(_amount);\n', '        feeRewardsAvailableInContract = feeRewardsAvailableInContract.add(_amount);\n', '        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '        emit FeeRewardDistributed(_amount, totalFeeRewards);\n', '    }\n', '\n', '    ///unstake the coins\n', '    function unstake(uint256 _amount) public {\n', '        UserData storage _user = userInfo[msg.sender];\n', '        uint256 _weekCount = energy.weekCount();\n', '        //get user rewards till date(week) and add to claimed rewards\n', '        userInfo[msg.sender].rewards = _user.rewards\n', '                                        .add(getUserRewardsByWeekNo(msg.sender, _weekCount));\n', '        //get user fee rewards till date(week) and add to claimed fee rewards\n', '        userInfo[msg.sender].feeRewards = _user.feeRewards.add(_calculateFeeRewards(msg.sender));\n', '        require(_amount <= claimedBalanceOf(msg.sender), "Unstake amount is greater than user balance");\n', '        //calculate unstake fee\n', '        uint256 _fees = (_amount.mul(unstakeFees)).div(1000);\n', '        //calulcate amount to transfer to user\n', '        uint256 _toTransfer = _amount.sub(_fees);\n', '        //burn unstake fees\n', '        energy.burnOnUnstake(address(this), _fees);\n', '        lpToken.safeTransfer(msg.sender, _toTransfer);\n', '        //if amount can be paid from rewards\n', '        if(_amount <= getUserTotalRewards(msg.sender)) {\n', '            //if amount can be paid from rewards\n', '            if(_user.rewards >= _amount) {\n', '                _user.rewards = _user.rewards.sub(_amount);\n', '                rewardsAvailableInContract = rewardsAvailableInContract.sub(_amount);\n', '                emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _amount, 0);\n', '            } else/*else take sum of fee rewards and rewards */ {\n', '                //get remaining amount less than rewards\n', '                uint256 remAmount = _amount.sub(_user.rewards);\n', '                rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);\n', '                feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(remAmount);\n', '                emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _user.rewards, remAmount);\n', '                //update fee rewards from remaining amount\n', '                _user.rewards = 0;\n', '                _user.feeRewards = _user.feeRewards.sub(remAmount);\n', '            }\n', '        } else/* take from total shares*/ {\n', '            //get remaining amount less than rewards\n', '            uint256 remAmount = _amount.sub(getUserTotalRewards(msg.sender));\n', '            rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);\n', '            feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(_user.feeRewards);\n', '            emit Withdrawn(msg.sender, _toTransfer, _amount, remAmount, _user.rewards, _user.feeRewards);\n', '            _user.rewards = 0;\n', '            _user.feeRewards = 0;\n', '            //update user share from remaining amount\n', '            _user.share = _user.share.sub(remAmount);\n', '            //update total shares\n', '            totalShares = totalShares.sub(remAmount);\n', '            //update total shares by week no at time of unstake\n', '            totalSharesByWeek[_weekCount] = totalSharesByWeek[_weekCount].sub(remAmount);\n', '        }\n', '        lpToken.safeApprove(address(this), 0);\n', '        //set user status to false\n', '        _user.isActive = false;\n', '        //update user end(unstake) week\n', '        _user.endedWeek = _weekCount == 0 ? _weekCount : _weekCount.sub(1);\n', '    }\n', '    \n', '    function _calculateFeeRewards(address _who) internal returns(uint256) {\n', '        uint256 _accumulatedRewards;\n', '        //check if user have minimum share too claim fee rewards\n', '        if(getUserShare(_who) >= minStakeForFeeRewards) {\n', '            //loop through all the rewards\n', '            for(uint256 i = 0; i < feeRewardsCount; i++) {\n', '                //if rewards week and timestamp is greater than user deposit time and rewards. \n', '                //Also only if user has not claimed particular fee rewards\n', '                if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven\n', '                    && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp \n', '                    && !feeRewardData[i].isClaimed[_who]) {\n', '                    _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));\n', '                    feeRewardData[i].isClaimed[_who] = true;\n', '                }\n', '            }\n', '        }\n', '        return _accumulatedRewards;\n', '    }\n', '\n', '    /*\n', '    *   ------------------Getter inteface for user---------------------\n', '    *\n', '    */\n', '    \n', '    function getUserUnclaimedFeesRewards(address _who) public view returns(uint256) {\n', '        uint256 _accumulatedRewards;\n', '        //check if user have minimum share too claim fee rewards\n', '        if(getUserShare(_who) >= minStakeForFeeRewards) {\n', '            //loop through all the rewards\n', '            for(uint256 i = 0; i < feeRewardsCount; i++) {\n', '                //if rewards week and timestamp is greater than user deposit time and rewards. \n', '                //Also only if user has not claimed particular fee rewards\n', '                if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven\n', '                    && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp \n', '                    && !feeRewardData[i].isClaimed[_who]) {\n', '                    _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));\n', '                }\n', '            }\n', '        }\n', '        return _accumulatedRewards;\n', '    }\n', '    \n', '    //return rewards till weekcount passed\n', '    function getUserCurrentRewards(address _who) public view returns(uint256) {\n', '        uint256 _weekCount = energy.weekCount();\n', '        uint256[3] memory thisWeekReward;\n', '        (thisWeekReward[0],\n', '        thisWeekReward[1],\n', '        thisWeekReward[2]) = calculateRewardsByWeekCount(_weekCount);\n', '        uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, _weekCount);\n', '        return getUserRewardsByWeekNo(_who, _weekCount)\n', '                .add(_calculateRewardByUserShare(thisWeekReward, userShareAtThatWeek))\n', '                .add(getUserRewards(_who));\n', '    }\n', '    \n', '    //return rewards till one week less than the weekcount passed\n', '    //calculate rewards till previous week and deduct rewards claimed at time of unstake\n', '    //return rewards available to claim\n', '    function getUserRewardsByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\n', '        uint256 rewardsAccumulated;\n', '        uint256 userEndWeek = getUserEndedWeek(_who);\n', '        //clculate rewards only if user is active or user share is greater than 1\n', '        if(getUserStatus(_who) || (getUserShare(_who) > 0)) {\n', '            for(uint256 i = userEndWeek.add(1); i < _weekCount; i++) {\n', '                uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, i);\n', '                rewardsAccumulated = rewardsAccumulated.add(_calculateRewardByUserShare(getRewardsByWeekNo(i), userShareAtThatWeek));\n', '            }\n', '        }\n', '        return rewardsAccumulated;\n', '    }\n', '    \n', '    function _calculateRewardByUserShare(uint256[3] memory rewardAtThatWeek, uint256 userShareAtThatWeek) internal pure returns(uint256) {\n', '        return (((rewardAtThatWeek[0]\n', '                    .add(rewardAtThatWeek[1])\n', '                    .add(rewardAtThatWeek[2]))\n', '                    .mul(userShareAtThatWeek))\n', '                    .div(percentageDivider.mul(percentageDivider)));\n', '    }\n', '\n', '    function getUserPercentageShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\n', '        return _getUserPercentageShareByValue(getSharesByWeekNo(_weekCount), getUserShareByWeekNo(_who, _weekCount));\n', '    }\n', '\n', '    function _getUserPercentageShareByValue(uint256 _totalShares, uint256 _userShare) internal pure returns(uint256) {\n', '        if(_totalShares == 0 || _userShare == 0) {\n', '            return 0;\n', '        } else {\n', '            //two times percentageDivider multiplied because of decimal percentage which are less than 1\n', '            return (_userShare.mul(percentageDivider.mul(percentageDivider))).div(_totalShares);\n', '        }\n', '    }\n', '\n', '    //give sum of share(staked amount) + rewards is user have a claimed it through unstaking\n', '    function claimedBalanceOf(address _who) public view returns(uint256) {\n', '        return getUserShare(_who).add(getUserRewards(_who)).add(getUserFeeRewards(_who));\n', '    }\n', '    \n', '    function getUserRewards(address _who) public view returns(uint256) {\n', '        return userInfo[_who].rewards;\n', '    }\n', '\n', '    function getUserFeeRewards(address _who) public view returns(uint256) {\n', '        return userInfo[_who].feeRewards;\n', '    }\n', '    \n', '    function getUserTotalRewards(address _who) public view returns(uint256) {\n', '        return userInfo[_who].feeRewards.add(userInfo[_who].rewards);\n', '    }\n', '\n', '    function getUserShare(address _who) public view returns(uint256) {\n', '        return userInfo[_who].share;\n', '    }\n', '    \n', '    function getUserShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {\n', '        if(getUserStatus(_who)) {\n', '            return (_userShareByWeekNo(_who, _weekCount) > 0 || _weekCount == 0)\n', '                    ? _userShareByWeekNo(_who, _weekCount)\n', '                    : getUserShareByWeekNo(_who, _weekCount.sub(1));\n', '        } else if(getUserShare(_who) > 0) {\n', '            return getUserShare(_who);            \n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function _userShareByWeekNo(address _who, uint256 _weekCount) internal view returns(uint256) {\n', '        return userInfo[_who].shareByWeekNo[_weekCount];\n', '    }\n', '\n', '    function getUserStatus(address _who) public view returns(bool) {\n', '        return userInfo[_who].isActive;\n', '    }\n', '    \n', '    function getUserStartedWeek(address _who) public view returns(uint256) {\n', '        return userInfo[_who].startedWeek;\n', '    }\n', '    \n', '    function getUserEndedWeek(address _who) public view returns(uint256) {\n', '        return userInfo[_who].endedWeek;\n', '    }\n', '    \n', '    function getUserLastDepositTime(address _who) public view returns(uint256) {\n', '        return userInfo[_who].depositTime;\n', '    }\n', '\n', '    function isUserPreviouslyStaked(address _who) public view returns(bool) {\n', '        return smartContractStakers[_who];\n', '    }\n', '    \n', '    function getUserFeeRewardClaimStatus(address _who, uint256 _index) public view returns(bool) {\n', '        return feeRewardData[_index].isClaimed[_who];\n', '    }\n', '    \n', '    /*\n', '    *   ------------------Getter inteface for contract---------------------\n', '    *\n', '    */\n', '    \n', '    function getRewardsByWeekNo(uint256 _weekCount) public view returns(uint256[3] memory) {\n', '        return rewardByWeek[_weekCount];\n', '    }\n', '    \n', '    function getFeeRewardsByIndex(uint256 _index) public view returns(uint256, uint256, uint256, uint256) {\n', '        return (feeRewardData[_index].value,\n', '                feeRewardData[_index].timeStamp,\n', '                feeRewardData[_index].totalStakersAtThatTime,\n', '                feeRewardData[_index].weekGiven);\n', '    }\n', '    \n', '    function getRewardPercentages() public view returns(uint256[3] memory) {\n', '        return rewardPercentages;\n', '    }\n', '    \n', '    function getStakeByWeekNo(uint256 _weekCount) public view returns(uint256) {\n', '        return stakePerWeek[_weekCount];\n', '    }\n', '    \n', '    function getSharesByWeekNo(uint256 _weekCount) public view returns(uint256) {\n', '        return totalSharesByWeek[_weekCount];\n', '    }\n', '}']