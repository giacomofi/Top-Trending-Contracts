['pragma solidity 0.6.12;\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'import "./ERC20.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract WRAToken is ERC20("WrapFi", "WRA"), Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public NUMBER_BLOCKS_PER_YEAR;\n', '    uint256 public startAtBlock;\n', '\n', '    address public genesisLaunchAddress;\n', '    address public stakingReserveAddress;\n', '    address public wrapFiUsersAddress;\n', '    address public devFundAddress;\n', '    address public ecoFundAddress;\n', '\n', '    mapping (address => mapping (uint256 => bool)) public unLockResult;\n', '    mapping (address => mapping (uint256 => uint256)) public unLockInfo;\n', '\n', '    constructor(\n', '        uint256 _numberBlocksPerYear,\n', '        address _genesisLaunchAddress,\n', '        address _stakingReserveAddress,\n', '        address _wrapFiUsersAddress,\n', '        address _devFundAddress,\n', '        address _ecoFundAddress) public {\n', '        NUMBER_BLOCKS_PER_YEAR = _numberBlocksPerYear > 0 ? _numberBlocksPerYear : 2254114;\n', '        genesisLaunchAddress = _genesisLaunchAddress;\n', '        stakingReserveAddress = _stakingReserveAddress;\n', '        wrapFiUsersAddress = _wrapFiUsersAddress;\n', '        devFundAddress = _devFundAddress;\n', '        ecoFundAddress = _ecoFundAddress;\n', '        startAtBlock = block.number;\n', '        initUnLockInfo();\n', '        _mint(msg.sender, 90000000e18);\n', '        _mint(genesisLaunchAddress, 10000000e18);\n', '    }\n', '\n', '    function initUnLockInfo() internal {\n', '        unLockInfo[stakingReserveAddress][1] = 60;\n', '        unLockInfo[stakingReserveAddress][2] = 45;\n', '        unLockInfo[stakingReserveAddress][3] = 30;\n', '        unLockInfo[stakingReserveAddress][4] = 15;\n', '\n', '        unLockInfo[wrapFiUsersAddress][1] = 240;\n', '        unLockInfo[wrapFiUsersAddress][2] = 180;\n', '        unLockInfo[wrapFiUsersAddress][3] = 120;\n', '        unLockInfo[wrapFiUsersAddress][4] = 60;\n', '\n', '        unLockInfo[devFundAddress][1] = 40;\n', '        unLockInfo[devFundAddress][2] = 30;\n', '        unLockInfo[devFundAddress][3] = 20;\n', '        unLockInfo[devFundAddress][4] = 10;\n', '\n', '        unLockInfo[ecoFundAddress][1] = 20;\n', '        unLockInfo[ecoFundAddress][2] = 15;\n', '        unLockInfo[ecoFundAddress][3] = 10;\n', '        unLockInfo[ecoFundAddress][4] = 5;\n', '    }\n', '\n', '    function unLockForStakingReserve() public onlyOwner {\n', '        unLockFor(stakingReserveAddress);\n', '    }\n', '\n', '    function unLockForWrapFiUsers() public onlyOwner {\n', '        unLockFor(wrapFiUsersAddress);\n', '    }\n', '\n', '    function unLockForDevFund() public onlyOwner {\n', '        unLockFor(devFundAddress);\n', '    }\n', '\n', '    function unLockForEcoFund() public onlyOwner {\n', '        unLockFor(ecoFundAddress);\n', '    }\n', '\n', '    function unLockFor(address _to) private {\n', '        uint256 blockNow = block.number;\n', '        uint256 yearNow = blockNow.sub(startAtBlock).div(NUMBER_BLOCKS_PER_YEAR);\n', '        uint256 amount;\n', '        for (uint256 i = 1; i < 5; i++) {\n', '            if (i > yearNow) {\n', '                break;\n', '            }\n', '            if (!unLockResult[_to][i]) {\n', '                amount = amount.add(totalSupply().mul(unLockInfo[_to][i]).div(1000));\n', '                unLockResult[_to][i] = true;\n', '            }\n', '        }\n', '        if (amount > 0){\n', '            transfer(_to, amount);\n', '        }\n', '    }\n', '}']