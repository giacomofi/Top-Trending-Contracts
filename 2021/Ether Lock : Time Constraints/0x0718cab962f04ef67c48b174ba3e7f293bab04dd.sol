['pragma solidity ^0.5.0;\n', 'import "./ERC20Detailed.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./Stopable.sol";\n', '\n', '/// @author \n', '/// @title Token contract\n', 'contract LFToken is ERC20Detailed, ERC20Burnable, Stoppable {\n', '\n', '    constructor (\n', '            string memory name,\n', '            string memory symbol,\n', '            uint256 totalSupply,\n', '            uint8 decimals\n', '    ) ERC20Detailed(name, symbol, decimals)\n', '    public {\n', '        _mint(owner(), totalSupply * 10**uint(decimals));\n', '    }\n', '\n', "    // Don't accept ETH\n", '    function () payable external {\n', '        revert();\n', '    }\n', '    \n', '    //------------------------\n', '    // Lock account transfer \n', '\n', '    mapping (address => uint256) private _lockTimes;\n', '    mapping (address => uint256) private _lockAmounts;\n', '\n', '    event LockChanged(address indexed account, uint256 releaseTime, uint256 amount);\n', '\n', '    /// Lock user amount.  (run only owner)\n', '    /// @param account account to lock\n', '    /// @param releaseTime Time to release from lock state.\n', '    /// @param amount  amount to lock.\n', '    /// @return Boolean\n', '    function setLock(address account, uint256 releaseTime, uint256 amount) onlyOwner public {\n', '        //require(now < releaseTime, "ERC20 : Current time is greater than release time");\n', '        require(block.timestamp < releaseTime, "ERC20 : Current time is greater than release time");\n', '        require(amount != 0, "ERC20: Amount error");\n', '        _lockTimes[account] = releaseTime; \n', '        _lockAmounts[account] = amount;\n', '        emit LockChanged( account, releaseTime, amount ); \n', '    }\n', '\n', '    /// Get Lock information  (run anyone)\n', '    /// @param account user acount\n', '    /// @return lokced time and locked amount.\n', '    function getLock(address account) public view returns (uint256 lockTime, uint256 lockAmount) {\n', '        return (_lockTimes[account], _lockAmounts[account]);\n', '    }\n', '\n', '    /// Check lock state  (run anyone)\n', '    /// @param account user acount\n', '    /// @param amount amount to check.\n', "    /// @return Boolean : Don't use balance (true)\n", '    function _isLocked(address account, uint256 amount) internal view returns (bool) {\n', '        return _lockAmounts[account] != 0 && \n', '            _lockTimes[account] > block.timestamp &&\n', '            (\n', '                balanceOf(account) <= _lockAmounts[account] ||\n', '                balanceOf(account).sub(_lockAmounts[account]) < amount\n', '            );\n', '    }\n', '\n', '    /// Transfer token  (run anyone)\n', '    /// @param recipient Token trasfer destination acount.\n', '    /// @param amount Token transfer amount.\n', '    /// @return Boolean \n', '    function transfer(address recipient, uint256 amount) enabled public returns (bool) {\n', '        require( !_isLocked( msg.sender, amount ) , "ERC20: Locked balance");\n', '        return super.transfer(recipient, amount);\n', '    }\n', '\n', '    /// Transfer token  (run anyone)\n', '    /// @param sender Token trasfer source acount.\n', '    /// @param recipient Token transfer destination acount.\n', '    /// @param amount Token transfer amount.\n', '    /// @return Boolean \n', '    function transferFrom(address sender, address recipient, uint256 amount) enabled public returns (bool) {\n', '        require( !_isLocked( sender, amount ) , "ERC20: Locked balance");\n', '        return super.transferFrom(sender, recipient, amount);\n', '    }\n', '\n', '    /// Decrease token balance (run only owner)\n', '    /// @param value Amount to decrease.\n', '    function burn(uint256 value) onlyOwner public {\n', '        require( !_isLocked( msg.sender, value ) , "ERC20: Locked balance");\n', '        super.burn(value);\n', '    }\n', '}']