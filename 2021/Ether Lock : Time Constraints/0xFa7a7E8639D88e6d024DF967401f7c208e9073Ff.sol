['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-26\n', '*/\n', '\n', '// File: contracts/interfaces/marketManagerInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface marketManagerInterface  {\n', '\tfunction setBreakerTable(address _target, bool _status) external returns (bool);\n', '\n', '\tfunction getCircuitBreaker() external view returns (bool);\n', '\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\n', '\n', '\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address, string memory);\n', '\n', '\tfunction handlerRegister(uint256 handlerID, address tokenHandlerAddr) external returns (bool);\n', '\n', '\tfunction applyInterestHandlers(address payable userAddr, uint256 callerID, bool allFlag) external returns (uint256, uint256, uint256, uint256, uint256, uint256);\n', '\n', '\tfunction getTokenHandlerPrice(uint256 handlerID) external view returns (uint256);\n', '\tfunction getTokenHandlerBorrowLimit(uint256 handlerID) external view returns (uint256);\n', '\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\n', '\n', '\tfunction getTokenHandlersLength() external view returns (uint256);\n', '\tfunction setTokenHandlersLength(uint256 _tokenHandlerLength) external returns (bool);\n', '\n', '\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\n', '\tfunction getTokenHandlerMarginCallLimit(uint256 handlerID) external view returns (uint256);\n', '\n', '\tfunction getUserIntraHandlerAssetWithInterest(address payable userAddr, uint256 handlerID) external view returns (uint256, uint256);\n', '\n', '\tfunction getUserTotalIntraCreditAsset(address payable userAddr) external view returns (uint256, uint256);\n', '\n', '\tfunction getUserLimitIntraAsset(address payable userAddr) external view returns (uint256, uint256);\n', '\n', '\tfunction getUserCollateralizableAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\n', '\n', '\tfunction getUserExtraLiquidityAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\n', '\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 liquidateHandlerID, uint256 rewardHandlerID) external returns (uint256, uint256, uint256);\n', '\n', '\tfunction getMaxLiquidationReward(address payable delinquentBorrower, uint256 liquidateHandlerID, uint256 liquidateAmount, uint256 rewardHandlerID, uint256 rewardRatio) external view returns (uint256);\n', '\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 rewardAmount, address payable liquidator, uint256 handlerID) external returns (uint256);\n', '\n', '\tfunction setLiquidationManager(address liquidationManagerAddr) external returns (bool);\n', '\n', '\tfunction rewardClaimAll(address payable userAddr) external returns (bool);\n', '\n', '\tfunction updateRewardParams(address payable userAddr) external returns (bool);\n', '\tfunction interestUpdateReward() external returns (bool);\n', '\tfunction getGlobalRewardInfo() external view returns (uint256, uint256, uint256);\n', '\n', '\tfunction setOracleProxy(address oracleProxyAddr) external returns (bool);\n', '\n', '\tfunction rewardUpdateOfInAction(address payable userAddr, uint256 callerID) external returns (bool);\n', '\tfunction ownerRewardTransfer(uint256 _amount) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/proxyContractInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface proxyContractInterface  {\n', '\tfunction handlerProxy(bytes memory data) external returns (bool, bytes memory);\n', '\tfunction handlerViewProxy(bytes memory data) external view returns (bool, bytes memory);\n', '\tfunction siProxy(bytes memory data) external returns (bool, bytes memory);\n', '\tfunction siViewProxy(bytes memory data) external view returns (bool, bytes memory);\n', '}\n', '\n', '// File: contracts/front/callProxy.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', " * @title BiFi's proxy interface\n", ' * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\n', ' */\n', 'contract callProxyManagerCallProxyHandlerCallProxyMarketCallProxyUserCallProxySISafeMath  {\n', '\tmarketManagerInterface callProxyManager_marketManager;\n', '\n', '\tstruct callProxyHandler_ProxyInfo {\n', '\t\tbool result;\n', '\t\tbytes returnData;\n', '\t\tbytes data;\n', '\t\tbytes proxyData;\n', '\t}\n', '\n', '\tstruct callProxyMarket_HandlerAsset {\n', '\t\tuint256 handlerID;\n', '\t\taddress handlerAddr;\n', '\t\tuint256 tokenPrice;\n', '\t\tuint256 depositTotalAmount;\n', '\t\tuint256 borrowTotalAmount;\n', '\t\tuint256 depositInterestRate;\n', '\t\tuint256 borrowInterestRate;\n', '\t}\n', '\n', '\tstruct callProxyUser_UserHandlerAsset {\n', '\t\tuint256 handlerID;\n', '\t\taddress handlerAddr;\n', '\t\tuint256 tokenPrice;\n', '\t\tuint256 depositAmount;\n', '\t\tuint256 borrowAmount;\n', '\t\tuint256 depositInterestAmount;\n', '\t\tuint256 borrowInterestAmount;\n', '\t\tuint256 depositInterestRate;\n', '\t\tuint256 borrowInterestRate;\n', '\t\tuint256 borrowLimit;\n', '\t\tuint256 userMaxWithdrawAmount;\n', '\t\tuint256 userMaxBorrowAmount;\n', '\t\tuint256 userMaxRepayAmount;\n', '\t\tuint256 limitOfAction;\n', '\t}\n', '\n', '\tstruct callProxyUser_UserAsset {\n', '\t\tuint256 userTotalBorrowLimitAsset;\n', '\t\tuint256 userTotalMarginCallLimitAsset;\n', '\t\tuint256 userDepositCreditAsset;\n', '\t\tuint256 userBorrowCreditAsset;\n', '\t}\n', '\n', '\tuint256 callProxySI_blocksPerDay = 6646;\n', '\n', '\tstruct callProxySI_HandlerInfo {\n', '\t\tbool support;\n', '\t\taddress tokenHandlerAddr;\n', '\t\tstring tokenName;\n', '\t\tuint256 betaRate;\n', '\t\tuint256 betaBaseTotal;\n', '\t}\n', '\n', '\tstruct callProxySI_MarketRewardInfo {\n', '\t\tuint256 handlerID;\n', '\t\tuint256 tokenPrice;\n', '\t\tuint256 dailyReward;\n', '\t\tuint256 claimedReward;\n', '\t\tuint256 depositReward;\n', '\t\tuint256 borrowReward;\n', '\t}\n', '\n', '\tstruct callProxySI_GlobalRewardInfo {\n', '\t\tuint256 totalReward;\n', '\t\tuint256 dailyReward;\n', '\t\tuint256 claimedReward;\n', '\t\tuint256 remainReward;\n', '\t}\n', '\n', '\tstruct callProxySI_ManagerGlobalReward {\n', '\t\tuint256 perBlock;\n', '\t\tuint256 decrement;\n', '\t\tuint256 totalAmount;\n', '\t\tuint256 claimableReward;\n', '\t}\n', '\n', '\tstruct callProxySI_HandlerMarketReward {\n', '\t\tuint256 rewardLane;\n', '\t\tuint256 rewardLaneUpdateAt;\n', '\t\tuint256 rewardPerBlock;\n', '\t}\n', '\n', '\tstruct callProxySI_UserReward {\n', '\t\tuint256 rewardLane;\n', '\t\tuint256 rewardLaneUpdateAt;\n', '\t\tuint256 rewardAmount;\n', '\t}\n', '\n', '\tuint256 constant safeMath_unifiedPoint = 10 ** 18;\n', '\n', '\tconstructor (address _marketManagerAddr) public\n', '\t{\n', '\t\tcallProxyManager_marketManager = marketManagerInterface(_marketManagerAddr);\n', '\t}\n', '\n', '\tfunction callProxyManager_getTokenHandlerInfo(uint256 handlerID) public view returns (bool, address, string memory)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getTokenHandlerInfo(handlerID);\n', '\t}\n', '\n', '\tfunction callProxyManager_getManagerAddr() public view returns (address)\n', '\t{\n', '\t\treturn address(callProxyManager_marketManager);\n', '\t}\n', '\n', '\tfunction callProxyManager_getTokenPrice(uint256 handlerID) public view returns (uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getTokenHandlerPrice(handlerID);\n', '\t}\n', '\n', '\tfunction callProxyManager_getUserTotalIntraCreditAsset(address payable userAddr) public view returns (uint256, uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getUserTotalIntraCreditAsset(userAddr);\n', '\t}\n', '\n', '\tfunction callProxyManager_getTokenHandlersLength() public view returns (uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getTokenHandlersLength();\n', '\t}\n', '\n', '\tfunction callProxyManager_getTokenHandlerID(uint256 index) public view returns (uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getTokenHandlerID(index);\n', '\t}\n', '\n', '\tfunction callProxyManager_getGlobalRewardInfo() public view returns (uint256, uint256, uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getGlobalRewardInfo();\n', '\t}\n', '\n', '\tfunction callProxyManager_getCircuitBreaker() public view returns (bool)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getCircuitBreaker();\n', '\t}\n', '\n', '\tfunction callProxyManager_getUserLimitIntraAsset(address payable userAddr) public view returns (uint256, uint256)\n', '\t{\n', '\t\treturn callProxyManager_marketManager.getUserLimitIntraAsset(userAddr);\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserAmount(address tokenHandlerAddr, address payable userAddr) public view returns (uint256, uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserAmount(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256, uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getDepositTotalAmount(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getDepositTotalAmount()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getBorrowTotalAmount(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getBorrowTotalAmount()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserMaxWithdrawAmount(address tokenHandlerAddr, address payable userAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserMaxWithdrawAmount(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserMaxBorrowAmount(address tokenHandlerAddr, address payable userAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserMaxBorrowAmount(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserMaxRepayAmount(address tokenHandlerAddr, address payable userAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserMaxRepayAmount(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserAmountWithInterest(address tokenHandlerAddr, address payable userAddr) public view returns (uint256, uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserAmountWithInterest(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256, uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getSIRandBIR(address tokenHandlerAddr) public view returns (uint256, uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getSIRandBIR()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256, uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getMarketRewardInfo(address tokenHandlerAddr) public view returns (uint256, uint256, uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getMarketRewardInfo()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.siViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256, uint256, uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getUserRewardInfo(address tokenHandlerAddr, address payable userAddr) public view returns (uint256, uint256, uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getUserRewardInfo(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.siViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256, uint256, uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getBetaRate(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getBetaRate()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.siViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getBetaRateBaseTotalAmount(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getBetaRateBaseTotalAmount()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.siViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getBetaRateBaseUserAmount(address tokenHandlerAddr, address payable userAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getBetaRateBaseUserAmount(address)", userAddr);\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.siViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getBorrowLimit(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getTokenHandlerBorrowLimit()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyHandler_getLimitOfAction(address tokenHandlerAddr) public view returns (uint256)\n', '\t{\n', '\t\tcallProxyHandler_ProxyInfo memory proxyInfo;\n', '\t\tproxyContractInterface tokenHandler = proxyContractInterface(tokenHandlerAddr);\n', '\t\tproxyInfo.data = abi.encodeWithSignature("getLimitOfAction()");\n', '\t\t(proxyInfo.result, proxyInfo.returnData) = tokenHandler.handlerViewProxy(proxyInfo.data);\n', '\t\trequire(proxyInfo.result, string(proxyInfo.returnData));\n', '\t\treturn abi.decode(proxyInfo.returnData, (uint256));\n', '\t}\n', '\n', '\tfunction callProxyMarket_getMarket() public view returns (callProxyMarket_HandlerAsset[] memory, bool)\n', '\t{\n', '\t\tuint256 tokenHandlerLength = callProxyManager_getTokenHandlersLength();\n', '\t\tcallProxyMarket_HandlerAsset[] memory handlerAssets = new callProxyMarket_HandlerAsset[](tokenHandlerLength);\n', '\t\tfor (uint256 handlerID = 0; handlerID < tokenHandlerLength; handlerID++)\n', '\t\t{\n', '\t\t\tbool support;\n', '\t\t\taddress handlerAddr;\n', '\t\t\tstring memory tokenName;\n', '\t\t\t(support, handlerAddr, tokenName) = callProxyManager_getTokenHandlerInfo(handlerID);\n', '\t\t\tif (!support)\n', '\t\t\t{\n', '\t\t\t\tcontinue;\n', '\t\t\t}\n', '\n', '\t\t\thandlerAssets[handlerID].tokenPrice = callProxyManager_getTokenPrice(handlerID);\n', '\t\t\thandlerAssets[handlerID].depositTotalAmount = callProxyHandler_getDepositTotalAmount(handlerAddr);\n', '\t\t\thandlerAssets[handlerID].borrowTotalAmount = callProxyHandler_getBorrowTotalAmount(handlerAddr);\n', '\t\t\t(handlerAssets[handlerID].depositInterestRate, handlerAssets[handlerID].borrowInterestRate) = callProxyHandler_getSIRandBIR(handlerAddr);\n', '\t\t\thandlerAssets[handlerID].handlerID = handlerID;\n', '\t\t\thandlerAssets[handlerID].handlerAddr = handlerAddr;\n', '\t\t}\n', '\n', '\t\treturn (handlerAssets, callProxyManager_getCircuitBreaker());\n', '\t}\n', '\n', '\tfunction callProxyUser_getUser(address payable userAddr) public view returns (callProxyUser_UserHandlerAsset[] memory, callProxyUser_UserAsset memory)\n', '\t{\n', '\t\tcallProxyUser_UserAsset memory userAsset;\n', '\t\t(userAsset.userTotalBorrowLimitAsset, userAsset.userTotalMarginCallLimitAsset) = callProxyManager_getUserLimitIntraAsset(userAddr);\n', '\t\t(userAsset.userDepositCreditAsset, userAsset.userBorrowCreditAsset) = callProxyManager_getUserTotalIntraCreditAsset(userAddr);\n', '\t\tuint256 tokenHandlerLength = callProxyManager_getTokenHandlersLength();\n', '\t\tcallProxyUser_UserHandlerAsset[] memory userHandlerAssets = new callProxyUser_UserHandlerAsset[](tokenHandlerLength);\n', '\t\tfor (uint256 handlerID = 0; handlerID < tokenHandlerLength; handlerID++)\n', '\t\t{\n', '\t\t\tbool support;\n', '\t\t\taddress tokenHandlerAddr;\n', '\t\t\tstring memory tokenName;\n', '\t\t\t(support, tokenHandlerAddr, tokenName) = callProxyManager_getTokenHandlerInfo(handlerID);\n', '\t\t\tif (!support)\n', '\t\t\t{\n', '\t\t\t\tcontinue;\n', '\t\t\t}\n', '\n', '\t\t\tuserHandlerAssets[handlerID].handlerID = handlerID;\n', '\t\t\tuserHandlerAssets[handlerID].tokenPrice = callProxyManager_getTokenPrice(handlerID);\n', '\t\t\t(userHandlerAssets[handlerID].depositAmount, userHandlerAssets[handlerID].borrowAmount) = callProxyHandler_getUserAmount(tokenHandlerAddr, userAddr);\n', '\t\t\t(userHandlerAssets[handlerID].depositInterestRate, userHandlerAssets[handlerID].borrowInterestRate) = callProxyHandler_getSIRandBIR(tokenHandlerAddr);\n', '\t\t\t(userHandlerAssets[handlerID].depositInterestAmount, userHandlerAssets[handlerID].borrowInterestAmount) = callProxyHandler_getUserAmountWithInterest(tokenHandlerAddr, userAddr);\n', '\t\t\t/* multi actions in 1 blocks */\n', '\t\t\tif (userHandlerAssets[handlerID].depositAmount > userHandlerAssets[handlerID].depositInterestAmount)\n', '\t\t\t{\n', '\t\t\t\tuserHandlerAssets[handlerID].depositInterestAmount = 0;\n', '\t\t\t}\n', '\t\t\telse\n', '\t\t\t{\n', '\t\t\t\tuserHandlerAssets[handlerID].depositInterestAmount = userHandlerAssets[handlerID].depositInterestAmount - userHandlerAssets[handlerID].depositAmount;\n', '\t\t\t}\n', '\n', '\t\t\tif (userHandlerAssets[handlerID].borrowAmount > userHandlerAssets[handlerID].borrowInterestAmount)\n', '\t\t\t{\n', '\t\t\t\tuserHandlerAssets[handlerID].borrowInterestAmount = 0;\n', '\t\t\t}\n', '\t\t\telse\n', '\t\t\t{\n', '\t\t\t\tuserHandlerAssets[handlerID].borrowInterestAmount = userHandlerAssets[handlerID].borrowInterestAmount - userHandlerAssets[handlerID].borrowAmount;\n', '\t\t\t}\n', '\n', '\t\t\tuserHandlerAssets[handlerID].handlerAddr = tokenHandlerAddr;\n', '\t\t\tuserHandlerAssets[handlerID].borrowLimit = callProxyHandler_getBorrowLimit(tokenHandlerAddr);\n', '\t\t\tuserHandlerAssets[handlerID].userMaxWithdrawAmount = callProxyHandler_getUserMaxWithdrawAmount(tokenHandlerAddr, userAddr);\n', '\t\t\tuserHandlerAssets[handlerID].userMaxBorrowAmount = callProxyHandler_getUserMaxBorrowAmount(tokenHandlerAddr, userAddr);\n', '\t\t\tuserHandlerAssets[handlerID].userMaxRepayAmount = callProxyHandler_getUserMaxRepayAmount(tokenHandlerAddr, userAddr);\n', '\t\t\tuserHandlerAssets[handlerID].limitOfAction = callProxyHandler_getLimitOfAction(tokenHandlerAddr);\n', '\t\t}\n', '\n', '\t\treturn (userHandlerAssets, userAsset);\n', '\t}\n', '\n', '\tfunction callProxySI_getSI(address payable userAddr) public view returns (address, callProxySI_MarketRewardInfo[] memory, callProxySI_GlobalRewardInfo memory, uint256)\n', '\t{\n', '\t\tcallProxySI_HandlerInfo memory handlerInfo;\n', '\t\tcallProxySI_GlobalRewardInfo memory globalRewardInfo;\n', '\t\tcallProxySI_ManagerGlobalReward memory managerGlobalReward;\n', '\t\t(managerGlobalReward.perBlock, managerGlobalReward.decrement, managerGlobalReward.totalAmount) = callProxyManager_getGlobalRewardInfo();\n', '\t\tglobalRewardInfo.totalReward = 400000000 * (10 ** 18);\n', '\t\tglobalRewardInfo.dailyReward = safeMath_mul(managerGlobalReward.perBlock, callProxySI_blocksPerDay);\n', '\t\tglobalRewardInfo.remainReward = managerGlobalReward.totalAmount;\n', '\t\tglobalRewardInfo.claimedReward = globalRewardInfo.totalReward - globalRewardInfo.remainReward;\n', '\t\tuint256 tokenHandlerLength = callProxyManager_getTokenHandlersLength();\n', '\t\tcallProxySI_MarketRewardInfo[] memory marketRewardInfo = new callProxySI_MarketRewardInfo[](tokenHandlerLength);\n', '\t\tfor (uint256 handlerID = 0; handlerID < tokenHandlerLength; handlerID++)\n', '\t\t{\n', '\t\t\t(handlerInfo.support, handlerInfo.tokenHandlerAddr, handlerInfo.tokenName) = callProxyManager_getTokenHandlerInfo(handlerID);\n', '\t\t\tif (!handlerInfo.support)\n', '\t\t\t{\n', '\t\t\t\tcontinue;\n', '\t\t\t}\n', '\n', '\t\t\tcallProxySI_HandlerMarketReward memory handlerMarketReward;\n', '\t\t\t(handlerMarketReward.rewardLane, handlerMarketReward.rewardLaneUpdateAt, handlerMarketReward.rewardPerBlock) = callProxyHandler_getMarketRewardInfo(handlerInfo.tokenHandlerAddr);\n', '\t\t\tmanagerGlobalReward.claimableReward = safeMath_add(managerGlobalReward.claimableReward, callProxySI_rewardClaimView(handlerInfo.tokenHandlerAddr, userAddr, handlerMarketReward.rewardLane, handlerMarketReward.rewardLaneUpdateAt, handlerMarketReward.rewardPerBlock));\n', '\t\t\thandlerInfo.betaRate = callProxyHandler_getBetaRate(handlerInfo.tokenHandlerAddr);\n', '\t\t\thandlerInfo.betaBaseTotal = callProxyHandler_getBetaRateBaseTotalAmount(handlerInfo.tokenHandlerAddr);\n', '\t\t\tmarketRewardInfo[handlerID].handlerID = handlerID;\n', '\t\t\tmarketRewardInfo[handlerID].tokenPrice = callProxyManager_getTokenPrice(handlerID);\n', '\t\t\tmarketRewardInfo[handlerID].dailyReward = safeMath_mul(handlerMarketReward.rewardPerBlock, callProxySI_blocksPerDay);\n', '\t\t\tmarketRewardInfo[handlerID].claimedReward = 0;\n', '\t\t\tif (handlerInfo.betaBaseTotal == 0)\n', '\t\t\t{\n', '\t\t\t\tmarketRewardInfo[handlerID].depositReward = 0;\n', '\t\t\t\tmarketRewardInfo[handlerID].borrowReward = 0;\n', '\t\t\t}\n', '\t\t\telse\n', '\t\t\t{\n', '\t\t\t\tuint256 rewardUnit = safeMath_unifiedMul(safeMath_unifiedDiv(10 ** 18, handlerInfo.betaBaseTotal), marketRewardInfo[handlerID].dailyReward);\n', '\t\t\t\tmarketRewardInfo[handlerID].depositReward = safeMath_unifiedMul(handlerInfo.betaRate, rewardUnit);\n', '\t\t\t\tmarketRewardInfo[handlerID].borrowReward = safeMath_unifiedMul(safeMath_sub(10 ** 18, handlerInfo.betaRate), rewardUnit);\n', '\t\t\t}\n', '\n', '\t\t}\n', '\n', '\t\treturn (callProxyManager_getManagerAddr(), marketRewardInfo, globalRewardInfo, managerGlobalReward.claimableReward);\n', '\t}\n', '\n', '\tfunction callProxySI_rewardClaimView(address handlerAddr, address payable userAddr, uint256 marketRewardLane, uint256 marketRewardLaneUpdateAt, uint256 marketRewardPerBlock) public view returns (uint256)\n', '\t{\n', '\t\tcallProxySI_UserReward memory userReward;\n', '\t\t(userReward.rewardLane, userReward.rewardLaneUpdateAt, userReward.rewardAmount) = callProxyHandler_getUserRewardInfo(handlerAddr, userAddr);\n', '\t\tuint256 deltaBlocks = safeMath_sub(block.number, marketRewardLaneUpdateAt);\n', '\t\tuint256 lane = callProxySI_calcLane(handlerAddr, marketRewardLane, marketRewardPerBlock, deltaBlocks);\n', '\t\tuint256 uncollectedReward = callProxySI_calcRewardAmount(handlerAddr, lane, userReward.rewardLane, userAddr);\n', '\t\tuint256 totalReward = safeMath_add(userReward.rewardAmount, uncollectedReward);\n', '\t\treturn totalReward;\n', '\t}\n', '\n', '\tfunction callProxySI_calcLane(address handlerAddr, uint256 currentLane, uint256 rewardPerBlock, uint256 deltaBlocks) internal view returns (uint256)\n', '\t{\n', '\t\tuint256 betaRateBaseTotalAmount = callProxyHandler_getBetaRateBaseTotalAmount(handlerAddr);\n', '\t\tif (betaRateBaseTotalAmount != 0)\n', '\t\t{\n', '\t\t\tuint256 distance = safeMath_mul(deltaBlocks, safeMath_unifiedDiv(rewardPerBlock, betaRateBaseTotalAmount));\n', '\t\t\treturn safeMath_add(currentLane, distance);\n', '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t\treturn currentLane;\n', '\t\t}\n', '\n', '\t}\n', '\n', '\tfunction callProxySI_calcRewardAmount(address handlerAddr, uint256 lane, uint256 userLane, address payable userAddr) internal view returns (uint256)\n', '\t{\n', '\t\tuint256 betaRateBaseUserAmount = callProxyHandler_getBetaRateBaseUserAmount(handlerAddr, userAddr);\n', '\t\treturn safeMath_unifiedMul(betaRateBaseUserAmount, safeMath_sub(lane, userLane));\n', '\t}\n', '\n', '\tfunction safeMath_add(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "add overflow");\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeMath_sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__sub(a, b, "sub overflow");\n', '\t}\n', '\n', '\tfunction safeMath_mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__mul(a, b);\n', '\t}\n', '\n', '\tfunction safeMath_div(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__div(a, b, "div by zero");\n', '\t}\n', '\n', '\tfunction safeMath_mod(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__mod(a, b, "mod by zero");\n', '\t}\n', '\n', '\tfunction safeMath__sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '\t{\n', '\t\trequire(b <= a, errorMessage);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction safeMath__mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tif (a == 0)\n', '\t\t{\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire((c / a) == b, "mul overflow");\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeMath__div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '\t{\n', '\t\trequire(b > 0, errorMessage);\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\tfunction safeMath__mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '\t{\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '\n', '\tfunction safeMath_unifiedDiv(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__div(safeMath__mul(a, safeMath_unifiedPoint), b, "unified div by zero");\n', '\t}\n', '\n', '\tfunction safeMath_unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\treturn safeMath__div(safeMath__mul(a, b), safeMath_unifiedPoint, "unified mul by zero");\n', '\t}\n', '\n', '\tfunction safeMath_signedAdd(int256 a, int256 b) internal pure returns (int256)\n', '\t{\n', '\t\tint256 c = a + b;\n', '\t\trequire(((b >= 0) && (c >= a)) || ((b < 0) && (c < a)), "SignedSafeMath: addition overflow");\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeMath_signedSub(int256 a, int256 b) internal pure returns (int256)\n', '\t{\n', '\t\tint256 c = a - b;\n', '\t\trequire(((b >= 0) && (c <= a)) || ((b < 0) && (c > a)), "SignedSafeMath: subtraction overflow");\n', '\t\treturn c;\n', '\t}\n', '}']