['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-06\n', '*/\n', '\n', '// File contracts/GenArt721Minter3.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-12-20\n', '*/\n', '\n', '// File contracts/libs/SafeMath.sol\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '// File contracts/libs/Strings.sol\n', '\n', '// File: contracts/Strings.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', 'library Strings {\n', '\n', '    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        uint i = 0;\n', '        for (i = 0; i < _ba.length; i++) {\n', '            babcde[k++] = _ba[i];\n', '        }\n', '        for (i = 0; i < _bb.length; i++) {\n', '            babcde[k++] = _bb[i];\n', '        }\n', '        for (i = 0; i < _bc.length; i++) {\n', '            babcde[k++] = _bc[i];\n', '        }\n', '        for (i = 0; i < _bd.length; i++) {\n', '            babcde[k++] = _bd[i];\n', '        }\n', '        for (i = 0; i < _be.length; i++) {\n', '            babcde[k++] = _be[i];\n', '        }\n', '        return string(babcde);\n', '    }\n', '\n', '    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint j = _i;\n', '        uint len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = byte(uint8(48 + _i % 10));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'interface GenArt721CoreContract {\n', '  function isWhitelisted(address sender) external view returns (bool);\n', '  function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\n', '  function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\n', '  function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\n', '  function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\n', '  function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\n', '  function projectIdToAdditionalPayeePercentage(uint256 _projectId) external view returns (uint256);\n', '  function artblocksAddress() external view returns (address payable);\n', '  function artblocksPercentage() external view returns (uint256);\n', '  function mint(address _to, uint256 _projectId, address _by) external returns (uint256 tokenId);\n', '}\n', '\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address _owner) external view returns (uint balance);\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '  function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '}\n', '\n', 'interface BonusContract {\n', '  function triggerBonus(address _to) external returns (bool);\n', '  function bonusIsActive() external view returns (bool);\n', '}\n', '\n', '\n', '\n', '\n', 'contract GenArt721Minter3 {\n', '  using SafeMath for uint256;\n', '\n', '  GenArt721CoreContract public artblocksContract;\n', '\n', '  address payable public ownerAddress;\n', '  uint256 public ownerPercentage;\n', '\n', '  mapping(uint256 => bool) public projectIdToBonus;\n', '  mapping(uint256 => address) public projectIdToBonusContractAddress;\n', '  mapping(uint256 => bool) public contractFilterProject;\n', '  mapping(address => mapping (uint256 => uint256)) public projectMintCounter;\n', '  mapping(uint256 => uint256) public projectMintLimit;\n', '\n', '  constructor(address _genArt721Address) public {\n', '    artblocksContract=GenArt721CoreContract(_genArt721Address);\n', '  }\n', '\n', '  function getYourBalanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\n', '    uint256 balance = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender);\n', '    return balance;\n', '  }\n', '\n', '  function checkYourAllowanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\n', '    uint256 remaining = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this));\n', '    return remaining;\n', '  }\n', '\n', '  function setProjectMintLimit(uint256 _projectId,uint8 _limit) public {\n', '    require(artblocksContract.isWhitelisted(msg.sender), "can only be set by admin");\n', '    projectMintLimit[_projectId] = _limit;\n', '  }\n', '\n', '  function setOwnerAddress(address payable _ownerAddress) public {\n', '    require(artblocksContract.isWhitelisted(msg.sender), "can only be set by admin");\n', '    ownerAddress = _ownerAddress;\n', '  }\n', '\n', '  function setOwnerPercentage(uint256 _ownerPercentage) public {\n', '    require(artblocksContract.isWhitelisted(msg.sender), "can only be set by admin");\n', '    ownerPercentage = _ownerPercentage;\n', '  }\n', '\n', '  function toggleContractFilter(uint256 _projectId) public {\n', '    require(artblocksContract.isWhitelisted(msg.sender), "can only be set by admin");\n', '    contractFilterProject[_projectId]=!contractFilterProject[_projectId];\n', '  }\n', '\n', '  function artistToggleBonus(uint256 _projectId) public {\n', '    require(msg.sender==artblocksContract.projectIdToArtistAddress(_projectId), "can only be set by artist");\n', '    projectIdToBonus[_projectId]=!projectIdToBonus[_projectId];\n', '  }\n', '\n', '  function artistSetBonusContractAddress(uint256 _projectId, address _bonusContractAddress) public {\n', '    require(msg.sender==artblocksContract.projectIdToArtistAddress(_projectId), "can only be set by artist");\n', '    projectIdToBonusContractAddress[_projectId]=_bonusContractAddress;\n', '  }\n', '\n', '  function purchase(uint256 _projectId) public payable returns (uint256 _tokenId) {\n', '    return purchaseTo(msg.sender, _projectId);\n', '  }\n', '//remove public and payable to prevent public use of purchaseTo function\n', '  function purchaseTo(address _to, uint256 _projectId) public payable returns(uint256 _tokenId){\n', '    if (keccak256(abi.encodePacked(artblocksContract.projectIdToCurrencySymbol(_projectId))) != keccak256(abi.encodePacked("ETH"))){\n', '      require(msg.value==0, "this project accepts a different currency and cannot accept ETH");\n', '      require(ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this)) >= artblocksContract.projectIdToPricePerTokenInWei(_projectId), "Insufficient Funds Approved for TX");\n', '      require(ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender) >= artblocksContract.projectIdToPricePerTokenInWei(_projectId), "Insufficient balance.");\n', '      _splitFundsERC20(_projectId);\n', '    } else {\n', '      require(msg.value>=artblocksContract.projectIdToPricePerTokenInWei(_projectId), "Must send minimum value to mint!");\n', '      _splitFundsETH(_projectId);\n', '    }\n', '\n', '    // if contract filter is active prevent calls from another contract\n', '    if (contractFilterProject[_projectId]) require(msg.sender == tx.origin, "No Contract Buys");\n', '\n', '    // limit mints per address by project\n', '    if (projectMintLimit[_projectId] > 0) {\n', '        require(projectMintCounter[msg.sender][_projectId] < projectMintLimit[_projectId], "Reached minting limit");\n', '        projectMintCounter[msg.sender][_projectId]++;\n', '    }\n', '\n', '    uint256 tokenId = artblocksContract.mint(_to, _projectId, msg.sender);\n', '\n', '    if (projectIdToBonus[_projectId]){\n', '      require(BonusContract(projectIdToBonusContractAddress[_projectId]).bonusIsActive(), "bonus must be active");\n', '      BonusContract(projectIdToBonusContractAddress[_projectId]).triggerBonus(msg.sender);\n', '    }\n', '\n', '    return tokenId;\n', '  }\n', '\n', '  function _splitFundsETH(uint256 _projectId) internal {\n', '    if (msg.value > 0) {\n', '      uint256 pricePerTokenInWei = artblocksContract.projectIdToPricePerTokenInWei(_projectId);\n', '      uint256 refund = msg.value.sub(artblocksContract.projectIdToPricePerTokenInWei(_projectId));\n', '      if (refund > 0) {\n', '        msg.sender.transfer(refund);\n', '      }\n', '      uint256 artBlocksAmount = pricePerTokenInWei.div(100).mul(artblocksContract.artblocksPercentage());\n', '      if (artBlocksAmount > 0) {\n', '        artblocksContract.artblocksAddress().transfer(artBlocksAmount);\n', '      }\n', '\n', '      uint256 remainingFunds = pricePerTokenInWei.sub(artBlocksAmount);\n', '\n', '      uint256 ownerFunds = remainingFunds.div(100).mul(ownerPercentage);\n', '      if (ownerFunds > 0) {\n', '        ownerAddress.transfer(ownerFunds);\n', '      }\n', '\n', '      uint256 projectFunds = pricePerTokenInWei.sub(artBlocksAmount).sub(ownerFunds);\n', '      uint256 additionalPayeeAmount;\n', '      if (artblocksContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\n', '        additionalPayeeAmount = projectFunds.div(100).mul(artblocksContract.projectIdToAdditionalPayeePercentage(_projectId));\n', '        if (additionalPayeeAmount > 0) {\n', '          artblocksContract.projectIdToAdditionalPayee(_projectId).transfer(additionalPayeeAmount);\n', '        }\n', '      }\n', '      uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\n', '      if (creatorFunds > 0) {\n', '        artblocksContract.projectIdToArtistAddress(_projectId).transfer(creatorFunds);\n', '      }\n', '    }\n', '  }\n', '\n', '  function _splitFundsERC20(uint256 _projectId) internal {\n', '      uint256 pricePerTokenInWei = artblocksContract.projectIdToPricePerTokenInWei(_projectId);\n', '      uint256 artBlocksAmount = pricePerTokenInWei.div(100).mul(artblocksContract.artblocksPercentage());\n', '      if (artBlocksAmount > 0) {\n', '        ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, artblocksContract.artblocksAddress(), artBlocksAmount);\n', '      }\n', '      uint256 remainingFunds = pricePerTokenInWei.sub(artBlocksAmount);\n', '\n', '      uint256 ownerFunds = remainingFunds.div(100).mul(ownerPercentage);\n', '      if (ownerFunds > 0) {\n', '        ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, ownerAddress, ownerFunds);\n', '      }\n', '\n', '      uint256 projectFunds = pricePerTokenInWei.sub(artBlocksAmount).sub(ownerFunds);\n', '      uint256 additionalPayeeAmount;\n', '      if (artblocksContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\n', '        additionalPayeeAmount = projectFunds.div(100).mul(artblocksContract.projectIdToAdditionalPayeePercentage(_projectId));\n', '        if (additionalPayeeAmount > 0) {\n', '          ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, artblocksContract.projectIdToAdditionalPayee(_projectId), additionalPayeeAmount);\n', '        }\n', '      }\n', '      uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\n', '      if (creatorFunds > 0) {\n', '        ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, artblocksContract.projectIdToArtistAddress(_projectId), creatorFunds);\n', '      }\n', '    }\n', '\n', '}']