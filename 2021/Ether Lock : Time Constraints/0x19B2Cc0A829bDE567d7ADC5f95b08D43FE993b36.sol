['// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.7.6;\n', '\n', 'import "./interfaces/IPoolMulti.sol";\n', 'import "./interfaces/IPoolSingle.sol";\n', '\n', 'contract PoolsInitializer {\n', '    IPoolMulti[] public poolsMulti;\n', '    IPoolSingle[] public poolsSingle;\n', '\n', '    constructor(address[] memory _poolsMulti, address[] memory _poolsSingle) {\n', '        for (uint256 i = 0; i < _poolsMulti.length; i++) {\n', '            poolsMulti.push(IPoolMulti(_poolsMulti[i]));\n', '        }\n', '\n', '        for (uint256 i = 0; i < _poolsSingle.length; i++) {\n', '            poolsSingle.push(IPoolSingle(_poolsSingle[i]));\n', '        }\n', '    }\n', '\n', '    function pullAll() public {\n', '        for (uint256 i = 0; i < poolsMulti.length; i++) {\n', '            poolsMulti[i].pullRewardFromSource_allTokens();\n', '        }\n', '\n', '        for (uint256 i = 0; i < poolsSingle.length; i++) {\n', '            poolsSingle[i].pullRewardFromSource();\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IPoolMulti {\n', '    function pullRewardFromSource_allTokens() external;\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IPoolSingle {\n', '    function pullRewardFromSource() external;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 9999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']