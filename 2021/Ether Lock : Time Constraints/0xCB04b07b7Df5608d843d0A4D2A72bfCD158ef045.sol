['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name ERC20 interface\n', '// @Desc https://eips.ethereum.org/EIPS/eip-20\n', '// ----------------------------------------------------------------------------\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external  returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name Ownable\n', '// ----------------------------------------------------------------------------\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name AmazonFinanceRewardPool\n', '// @Desc Contract Of Reward For Writing\n', '// ----------------------------------------------------------------------------\n', 'contract AmazonFinanceRewardPool is Ownable {\n', '    event eventChangeOwnerAddress(address previousOwner, address newOwner);\n', '    event eventChangeTokenCAEvent(address previousCA, address newCA);\n', '    event eventChangeRewardAmountEvent(uint256 indexed previousAmount, uint256 indexed newAmount);\n', '    event eventFundTransfer(address backer, uint256 amount);\n', '    event eventTokenWithdrawEvent(address withdrawAddress, uint256 amount);\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    IERC20 private TOKEN_CONTRACT_ADDRESS;\n', '    address public OWNER_ADDRESS;\n', '    uint256 public REWARD_RATE;\n', '    \n', '    constructor() public {\n', '        TOKEN_CONTRACT_ADDRESS = IERC20(0x0B5aC384a35d029cDa75b8675ACe96Dfe670f54c);\n', '        REWARD_RATE = 5000000000000000000;\n', '        OWNER_ADDRESS = 0x9D2b30FB5EE941Cb59AE71Bb7Ef1C6f06dfeB6c7;\n', '    }\n', '    \n', '    function () payable public {\n', '        uint256 amount = msg.value;\n', '        amount = amount.mul(REWARD_RATE);\n', '        \n', '        require(amount <= TOKEN_CONTRACT_ADDRESS.balanceOf(this));\n', '    \n', '        address(OWNER_ADDRESS).transfer(msg.value);\n', '        tokenTransfer(amount);\n', '    }\n', '    \n', '    function withdrawToken(address _to, uint256 _amount) external onlyOwner {\n', '        require(TOKEN_CONTRACT_ADDRESS.transfer(_to, _amount));        \n', '        emit eventTokenWithdrawEvent(_to, _amount);\n', '    }\n', '\n', '    function changeTokenAddress(IERC20 _tokenCA) external onlyOwner {\n', '        require(_tokenCA != address(0));\n', '        emit eventChangeTokenCAEvent(TOKEN_CONTRACT_ADDRESS, _tokenCA);\n', '        TOKEN_CONTRACT_ADDRESS = _tokenCA;\n', '    }\n', '    \n', '    // 1 ETH : _amount Token\n', '    function changeRewardRate(uint256 _rate) external onlyOwner {\n', '        emit eventChangeRewardAmountEvent(REWARD_RATE, _rate);\n', '        REWARD_RATE = _rate;\n', '    }\n', '    \n', '    function changOwnerAddress(address _ownerAddress) external onlyOwner {\n', '        emit eventChangeOwnerAddress(OWNER_ADDRESS, _ownerAddress);\n', '        OWNER_ADDRESS = _ownerAddress;\n', '    }\n', '\n', '    function tokenTransfer(uint256 _amount) internal {\n', '        require(TOKEN_CONTRACT_ADDRESS.transfer(msg.sender, _amount));\n', '        emit eventFundTransfer(msg.sender, _amount);\n', '    }\n', '}']