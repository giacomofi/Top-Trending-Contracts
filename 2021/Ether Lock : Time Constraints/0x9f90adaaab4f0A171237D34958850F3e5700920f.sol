['// SPDX-License-Identifier: P-P-P-PONZO!!!\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/* ROOTKIT:\n', 'A transfer gate (GatedERC20) for use with RootKit tokens\n', '\n', 'It:\n', '    Allows customization of tax and burn rates\n', '    Allows transfer to/from approved Uniswap pools\n', '    Disallows transfer to/from non-approved Uniswap pools\n', "    (doesn't interfere with other crappy AMMs)\n", '    Allows transfer to/from anywhere else\n', '    Allows for free transfers if permission granted\n', '    Allows for unrestricted transfers if permission granted\n', '    Provides a safe and tax-free liquidity adding function\n', '*/\n', '\n', 'import "./Owned.sol";\n', 'import "./IUniswapV2Factory.sol";\n', 'import "./IUniswapV2Pair.sol";\n', 'import "./EliteToken.sol";\n', 'import "./Address.sol";\n', 'import "./IUniswapV2Router02.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./TokensRecoverable.sol";\n', 'import "./ITransferGateLite.sol";\n', '\n', 'contract TransferGateLite is TokensRecoverable, ITransferGateLite //a.k.a. KETH/Elite Transfer Door\n', '{   \n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => bool) public participantControllers;\n', '    mapping (address => bool) public freeParticipant;\n', '    uint16 public burnRate;   \n', '\n', '    function setParticipantController(address participantController, bool allow) public ownerOnly()\n', '    {\n', '        participantControllers[participantController] = allow;\n', '    }\n', '\n', '    function setFreeParticipant(address participant, bool free) public\n', '    {\n', '        require (msg.sender == owner || participantControllers[msg.sender], "Not an Owner or Free Participant");\n', '        freeParticipant[participant] = free;\n', '    }\n', '\n', '    function setBurnRate(uint16 _burnRate) public // 10000 = 100%\n', '    {\n', '        require (msg.sender == owner || participantControllers[msg.sender], "Not an Owner or Free Participant");\n', '        require (_burnRate <= 10000, "> 100%");\n', '       \n', '        burnRate = _burnRate;\n', '    }\n', '  \n', '    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256 burn)\n', '    {       \n', '        if (freeParticipant[from] || freeParticipant[to]) \n', '        { \n', '            return (0); \n', '        }\n', '        // "amount" will never be > totalSupply so these multiplications will never overflow\n', '        burn = amount * burnRate / 10000;\n', '    }\n', '}']