['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./interfaces/IStakingRewards.sol";\n', '\n', '\n', '/// @author Conjure Team\n', '/// @title ConjureRouter\n', '/// @notice The ConjureRouter which distributes the conjure fees\n', 'contract ConjureRouter {\n', '\n', '    // event for distribution\n', '    event FeeDistribution(address treasury, address stakingrewards, uint256 amount);\n', '    // event for new threshold\n', '    event NewThreshold(uint256 value);\n', '\n', '    IStakingRewards public stakingRewards;\n', '    address payable public treasury;\n', '    address public owner;\n', '    uint256 public threshold = 0.1 ether;\n', '\n', '    constructor(IStakingRewards _stakingRewards, address payable _treasury) {\n', '        require(_treasury != address(0), "not zero address");\n', '    \n', '        stakingRewards = _stakingRewards;\n', '        treasury = _treasury;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @notice distributes the fees if the balance is 0.1 or higher\n', '    * sends 50% to the treasury\n', '    * sends 50% to the staking rewards contract\n', '    * calls notifyRewardAmount on the staking contract\n', '    */\n', '    function distribute() internal {\n', '        uint256 amount = address(this).balance;\n', '\n', '        if (amount > threshold) {\n', '            emit FeeDistribution(treasury, address(stakingRewards), amount);\n', '            \n', '            treasury.transfer(amount / 2);\n', '            payable(address(stakingRewards)).transfer(amount / 2);\n', '            stakingRewards.notifyRewardAmount(amount / 2);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * deposit function for collection funds\n', '    * only executes the distribution logic if the contract balance is more than 0.1 ETH\n', '    */\n', '    function deposit() external payable {\n', '        distribute();\n', '    }\n', '\n', '    /**\n', '    * fallback function for collection funds\n', '    * only executes the distribution logic if the contract balance is more than 0.1 ETH\n', '    */\n', '    fallback() external payable {\n', '        distribute();\n', '    }\n', '\n', '    /**\n', '    * fallback function for collection funds\n', '    * only executes the distribution logic if the contract balance is more than 0.1 ETH\n', '    */\n', '    receive() external payable {\n', '        distribute();\n', '    }\n', '\n', '    function newStakingrewards(IStakingRewards newRewards) external {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(address(newRewards) != address(0), "not zero address");\n', '        stakingRewards = newRewards;\n', '    }\n', '\n', '    function newTreasury(address payable newTreasuryAddress) external {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(newTreasuryAddress != address(0), "not zero address");\n', '        treasury = newTreasuryAddress;\n', '    }\n', '\n', '    function setNewOwner(address newOwner) external {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(newOwner != address(0), "not zero address");\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setNewThreshold(uint256 newthreshold) external {\n', '        require(msg.sender == owner, "Only owner");\n', '        threshold = newthreshold;\n', '        emit NewThreshold(threshold);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.4.24;\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function getRewardForDuration() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // Mutative\n', '\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function getReward() external;\n', '\n', '    function exit() external;\n', '\n', '    function notifyRewardAmount(uint256 reward) external;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']