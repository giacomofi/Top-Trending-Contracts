['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-08\n', '*/\n', '\n', 'pragma solidity ^0.4.18;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', '\n', ' /**\n', '  * @title SafeMath\n', '  * @dev Math operations with safety checks that throw on error\n', '  */\n', ' library SafeMath {\n', '   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     if (a == 0) {\n', '       return 0;\n', '     }\n', '     uint256 c = a * b;\n', '     assert(c / a == b);\n', '     return c;\n', '   }\n', '\n', '   function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '     uint256 c = a / b;\n', "     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '     return c;\n', '   }\n', '\n', '   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     assert(b <= a);\n', '     return a - b;\n', '   }\n', '\n', '   function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     uint256 c = a + b;\n', '     assert(c >= a);\n', '     return c;\n', '   }\n', ' }\n', '\n', ' library SafeERC20 {\n', '   function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '     assert(token.transfer(to, value));\n', '   }\n', '\n', '   function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '     assert(token.transferFrom(from, to, value));\n', '   }\n', '\n', '   function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '     assert(token.approve(spender, value));\n', '   }\n', ' }\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  mapping(address => address) internal addresses;\n', '  address[] internal addressArray;\n', '\n', '  function getAddressCount() constant public returns (uint256 length) {\n', '    return addressArray.length;\n', '  }\n', '\n', '  function getAddressById(uint256 id) constant public returns (address length) {\n', '    return addressArray[id];\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    //our code\n', '    if (addresses[_to] != _to) {\n', '      addresses[_to] = _to;\n', '      addressArray.push(_to);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    \n', '    if (addresses[_to] != _to) {\n', '      addresses[_to] = _to;\n', '      addressArray.push(_to);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  using SafeERC20 for ERC20;\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    \n', '    if (addresses[_to] != _to) {\n', '      addresses[_to] = _to;\n', '      addressArray.push(_to);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public startTimeStage2;\n', '  uint256 public startTimeStage3;\n', '  uint256 public startTimeStage4;\n', '  uint256 public startTimeStage5;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // contract address\n', '  address public contractAddress;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // tokens for team, advicers etc.\n', '  uint256 public rewardRate;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _startTimeStage2, uint256 _startTimeStage3,\n', '    uint256 _startTimeStage4, uint256 _startTimeStage5, uint256 _endTime, uint256 _rate,\n', '    uint256 _rewardRate, address _wallet, address _contractAddress) public {\n', '    require(_startTime >= now);\n', '    require(_startTimeStage2 >= _startTime);\n', '    require(_startTimeStage3 >= _startTimeStage2);\n', '    require(_startTimeStage4 >= _startTimeStage3);\n', '    require(_startTimeStage5 >= _startTimeStage4);\n', '    require(_endTime >= _startTimeStage5);\n', '    require(_rate > 0);\n', '    require(_rewardRate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    startTimeStage2 = _startTimeStage2;\n', '    startTimeStage3 = _startTimeStage3;\n', '    startTimeStage4 = _startTimeStage4;\n', '    startTimeStage5 = _startTimeStage5;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    rewardRate = _rewardRate;\n', '    wallet = _wallet;\n', '    contractAddress = _contractAddress;\n', '  }\n', '\n', '  function calculateTokenCount(uint256 count, uint256 rateBonus) private view returns (uint256) {\n', '    uint256 result = count.mul(rateBonus);\n', '    if (now >= startTime && now <= startTimeStage2) {\n', '      result = result.mul(13).div(10); // 30%\n', '    } else if (now >= startTimeStage2 && now <= startTimeStage3) {\n', '      result = result.mul(115).div(100); // 15%\n', '    } else if (now >= startTimeStage3 && now <= startTimeStage4) {\n', '      result = result.mul(11).div(10); // 10%\n', '    } else if (now >= startTimeStage4 && now <= startTimeStage5) {\n', '      result = result.mul(105).div(100); // 5%\n', '    }\n', '    return result;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    if (now >= endTime) {\n', '     contractAddress.transfer(msg.value);\n', '    } else {\n', '        buyTokens(msg.sender);\n', '    }\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = calculateTokenCount(weiAmount, rate);\n', '    // tokens for team, advicers etc.\n', '    uint256 tokensReward = calculateTokenCount(weiAmount, rewardRate);\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    token.mint(wallet, tokensReward);\n', '    uint256 tokensTotal = tokens.add(tokensReward);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokensTotal);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract SplitPayment {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 0;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n', '    require(_payees.length == _shares.length);\n', '\n', '    for (uint256 i = 0; i < _payees.length; i++) {\n', '      addPayee(_payees[i], _shares[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '    totalShares = totalShares.add(_shares);\n', '  }\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim(address payee, address ginexIcoContract) public returns (uint256 paymentDiv) {\n', '\n', '    require(shares[payee] > 0);\n', '\n', '    uint256 totalReceived = ginexIcoContract.balance.add(totalReleased);\n', '    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\n', '\n', '    require(payment != 0);\n', '    require(ginexIcoContract.balance >= payment);\n', '\n', '    released[payee] = released[payee].add(payment);\n', '    totalReleased = totalReleased.add(payment);\n', '\n', '    return payment;\n', '  }\n', '\n', '  /**\n', '   * @dev payable fallback\n', '   */\n', '  function () external payable {}\n', '}\n', '\n', 'contract GinexToken is MintableToken {\n', '  string public constant name = "Aiko Inu";\n', '  string public constant symbol = "AIKO";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant _totalSupply = 0;\n', '\n', '/** Constructor GINEXToken */\n', '  function GinexToken() public {\n', '    totalSupply = _totalSupply;\n', '  }\n', '}\n', '\n', 'contract GinexICO is Crowdsale, Ownable{\n', '  address myAddress = this;\n', '  uint256 _startTime = 1623114000; // 07.06.18 00:00:00 GMT\n', '  uint256 _startTimeStage2 = 1623124800; // 08.06.18 00:00:00 GMT\n', '  uint256 _startTimeStage3 = 1623135600; // 08.07.18 00:00:00 GMT\n', '  uint256 _startTimeStage4 = 1623146400; // 08.08.18 00:00:00 GMT\n', '  uint256 _startTimeStage5 = 1623157200; // 08.09.18 00:00:00 GMT\n', '  uint256 _endTime = 1623168000; // 08.10.18 00:00:00 GMT\n', '  uint256 _rate = 800;\n', '  uint256 _rewardRate = 200;\n', '  address _wallet = 0x93930aa40f83a7d2307258A9dB1E898400aA29b3;\n', '\n', '  address[] _payees;\n', '  uint256[] _shares;\n', '\n', '  SplitPayment public splitPayment;\n', '\n', '\n', '\n', '  function GinexICO() public\n', '  Crowdsale(_startTime, _startTimeStage2, _startTimeStage3, _startTimeStage4,\n', '    _startTimeStage5, _endTime, _rate, _rewardRate, _wallet, myAddress)\n', '  {\n', '  }\n', '\n', 'function createTokenContract() internal returns (MintableToken) {\n', '  return new GinexToken();\n', '}\n', '\n', 'function getBalance() view public returns (uint256) {\n', '  return myAddress.balance;\n', '}\n', '\n', 'function createSplitPayment() public payable onlyOwner {\n', '    require(now > _endTime);\n', '\n', '    uint256 addrCount = token.getAddressCount();\n', '    if (_payees.length < addrCount) {\n', '        for (uint256 j = _payees.length; j < addrCount; j++) {\n', '        _payees.push(address(0));\n', '        _shares.push(0);\n', '        }\n', '    }\n', '\n', '     for (uint256 i = 0; i < addrCount; i++) {\n', '       if (token.balanceOf(token.getAddressById(i)) > 0) {\n', '         _payees[i] = token.getAddressById(i);\n', '         _shares[i] = token.balanceOf(token.getAddressById(i));\n', '       }\n', '       else {\n', '         _payees[i] = token.getAddressById(i);\n', '         _shares[i] = 0;\n', '       }\n', '\n', '    }\n', '    splitPayment = new SplitPayment(_payees, _shares);\n', '  }\n', '\n', '  function getDividend() public payable {\n', '    require(now > _endTime);\n', '    uint256 payment = splitPayment.claim(msg.sender, myAddress);\n', '    msg.sender.transfer(payment);\n', '  }\n', '\n', '}']