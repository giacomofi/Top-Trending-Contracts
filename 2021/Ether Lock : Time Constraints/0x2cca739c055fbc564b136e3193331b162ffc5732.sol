['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface Token {\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '}\n', '\n', 'contract Pool_4 is Ownable {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    \n', '    event RewardsTransferred(address holder, uint256 amount);\n', '    \n', '    // YPro token contract address\n', '    address public tokenAddress = 0xAc9C0F1bFD12cf5c4daDbeAb943473c4C45263A0;\n', '    \n', '    // LP token contract address\n', '    address public LPtokenAddress = 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11;\n', '    \n', '    // reward rate 100 % per year\n', '    uint256 public rewardRate = 502700 ;\n', '    uint256 public rewardInterval = 365 days;\n', '    \n', '    // staking fee 0%\n', '    uint256 public stakingFeeRate = 0;\n', '    \n', '    // unstaking fee 0%\n', '    uint256 public unstakingFeeRate = 0;\n', '    \n', '    // unstaking possible after 0 days\n', '    uint256 public cliffTime = 0 days;\n', '    \n', '    uint256 public farmEnableat;\n', '    uint256 public totalClaimedRewards = 0;\n', '    uint256 private stakingAndDaoTokens = 100000e18;\n', '    \n', '    bool public farmEnabled = false;\n', '    \n', '    EnumerableSet.AddressSet private holders;\n', '    \n', '    mapping (address => uint256) public depositedTokens;\n', '    mapping (address => uint256) public stakingTime;\n', '    mapping (address => uint256) public lastClaimedTime;\n', '    mapping (address => uint256) public totalEarnedTokens;\n', '    \n', '    function updateAccount(address account) private {\n', '        uint256 pendingDivs = getPendingDivs(account);\n', '        if (pendingDivs > 0) {\n', '            require(Token(tokenAddress).transfer(account, pendingDivs), "Could not transfer tokens.");\n', '            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\n', '            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\n', '            emit RewardsTransferred(account, pendingDivs);\n', '        }\n', '        lastClaimedTime[account] = now;\n', '    }\n', '    \n', '    function getPendingDivs(address _holder) public view returns (uint256) {\n', '        if (!holders.contains(_holder)) return 0;\n', '        if (depositedTokens[_holder] == 0) return 0;\n', '        \n', '        uint256 timeDiff = now.sub(lastClaimedTime[_holder]);\n', '        uint256 stakedAmount = depositedTokens[_holder];\n', '\n', '        if (now > farmEnableat + 7 days) {\n', '            \n', '            uint256 pendingDivs = stakedAmount.mul(2010797).mul(timeDiff).div(rewardInterval).div(1e4);\n', '            \n', '            return pendingDivs;\n', '        } else if (now <= farmEnableat + 7 days) {\n', '            \n', '            uint256 pendingDivs = stakedAmount.mul(rewardRate).mul(timeDiff).div(rewardInterval).div(1e4);\n', '            \n', '            return pendingDivs;\n', '        }\n', '        \n', '    }\n', '    \n', '    function getNumberOfHolders() public view returns (uint256) {\n', '        return holders.length();\n', '    }\n', '    \n', '    \n', '    function deposit(uint256 amountToStake) public {\n', '        require(amountToStake > 0, "Cannot deposit 0 Tokens");\n', '        require(farmEnabled, "Farming is not enabled");\n', '        require(Token(LPtokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        uint256 fee = amountToStake.mul(stakingFeeRate).div(1e4);\n', '        uint256 amountAfterFee = amountToStake.sub(fee);\n', '        require(Token(LPtokenAddress).transfer(owner, fee), "Could not transfer deposit fee.");\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\n', '        \n', '        if (!holders.contains(msg.sender)) {\n', '            holders.add(msg.sender);\n', '            stakingTime[msg.sender] = now;\n', '        }\n', '    }\n', '    \n', '    function withdraw(uint256 amountToWithdraw) public {\n', '        require(depositedTokens[msg.sender] >= amountToWithdraw, "Invalid amount to withdraw");\n', '        \n', '        require(now.sub(stakingTime[msg.sender]) > cliffTime, "You recently staked, please wait before withdrawing.");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        uint256 fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\n', '        uint256 amountAfterFee = amountToWithdraw.sub(fee);\n', '        \n', '        require(Token(LPtokenAddress).transfer(owner, fee), "Could not transfer deposit fee.");\n', '        require(Token(LPtokenAddress).transfer(msg.sender, amountAfterFee), "Could not transfer tokens.");\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n', '        \n', '        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\n', '            holders.remove(msg.sender);\n', '        }\n', '    }\n', '    \n', '    function claimDivs() public {\n', '        updateAccount(msg.sender);\n', '    }\n', '    \n', '    function getStakingAndDaoAmount() public view returns (uint256) {\n', '        if (totalClaimedRewards >= stakingAndDaoTokens) {\n', '            return 0;\n', '        }\n', '        uint256 remaining = stakingAndDaoTokens.sub(totalClaimedRewards);\n', '        return remaining;\n', '    }\n', '    \n', '    function setTokenAddress(address _tokenAddressess) public onlyOwner {\n', '        tokenAddress = _tokenAddressess;\n', '    }\n', '    \n', '    function setLPTokenAddress(address _LPtokenAddressess) public onlyOwner {\n', '        LPtokenAddress = _LPtokenAddressess;\n', '    }\n', '    \n', '    function setCliffTime(uint256 _time) public onlyOwner {\n', '        cliffTime = _time;\n', '    }\n', '    \n', '    function setRewardInterval(uint256 _rewardInterval) public onlyOwner {\n', '        rewardInterval = _rewardInterval;\n', '    }\n', '    \n', '    function setStakingAndDaoTokens(uint256 _stakingAndDaoTokens) public onlyOwner {\n', '        stakingAndDaoTokens = _stakingAndDaoTokens;\n', '    }\n', '    \n', '    function setStakingFeeRate(uint256 _Fee) public onlyOwner {\n', '        stakingFeeRate = _Fee;\n', '    }\n', '    \n', '    function setUnstakingFeeRate(uint256 _Fee) public onlyOwner {\n', '        unstakingFeeRate = _Fee;\n', '    }\n', '    \n', '    function setRewardRate(uint256 _rewardRate) public onlyOwner {\n', '        rewardRate = _rewardRate;\n', '    }\n', '    \n', '    function enableFarming() external onlyOwner() {\n', '        farmEnabled = true;\n', '        farmEnableat = now;\n', '    }\n', '    \n', '    // function to allow admin to claim *any* ERC20 tokens sent to this contract\n', '    function transferAnyERC20Tokens(address _tokenAddress, address _to, uint256 _amount) public onlyOwner {\n', '        require(_tokenAddress != LPtokenAddress);\n', '        \n', '        Token(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '}']