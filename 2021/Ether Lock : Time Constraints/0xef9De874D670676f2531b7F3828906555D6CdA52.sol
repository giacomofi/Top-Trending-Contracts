['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/erc20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/utils/AddressArray.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library AddressArray{\n', '  function exists(address[] memory self, address addr) public pure returns(bool){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function index_of(address[] memory self, address addr) public pure returns(uint){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return i;\n', '      }\n', '    }\n', '    require(false, "AddressArray:index_of, not exist");\n', '  }\n', '\n', '  function remove(address[] storage self, address addr) public returns(bool){\n', '    uint index = index_of(self, addr);\n', '    self[index] = self[self.length - 1];\n', '\n', '    delete self[self.length-1];\n', '    self.length--;\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/erc20/ERC20Impl.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes memory _data\n', '    ) public;\n', '}\n', 'contract TransferEventCallBack{\n', '  function onTransfer(address _from, address _to, uint256 _amount) public;\n', '}\n', '\n', 'contract ERC20Base {\n', "    string public name;                //The Token's name: e.g. GTToken\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "GTT_0.1"; //An arbitrary versioning scheme\n', '\n', '    using AddressArray for address[];\n', '    address[] public transferListeners;\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '    event NewTransferListener(address _addr);\n', '    event RemoveTransferListener(address _addr);\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    ERC20Base public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a ERC20Base\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    constructor(\n', '        ERC20Base _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled\n', '    )  public\n', '    {\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // The standard ERC 20 transferFrom functionality\n', '        if (allowed[_from][msg.sender] < _amount)\n', '            return false;\n', '        allowed[_from][msg.sender] -= _amount;\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '        require(parentSnapShotBlock < block.number);\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != address(0)) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\n', '        require(approve(address(_spender), _amount));\n', '\n', '        _spender.receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            address(this),\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function _generateTokens(address _owner, uint _amount) internal returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(address(0), _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function _destroyTokens(address _owner, uint _amount) internal returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        emit Transfer(_owner, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function _enableTransfers(bool _transfersEnabled) internal {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    function onTransferDone(address _from, address _to, uint256 _amount) internal {\n', '      for(uint i = 0; i < transferListeners.length; i++){\n', '        TransferEventCallBack t = TransferEventCallBack(transferListeners[i]);\n', '        t.onTransfer(_from, _to, _amount);\n', '      }\n', '    }\n', '\n', '    function _addTransferListener(address _addr) internal {\n', '      transferListeners.push(_addr);\n', '      emit NewTransferListener(_addr);\n', '    }\n', '    function _removeTransferListener(address _addr) internal{\n', '      transferListeners.remove(_addr);\n', '      emit RemoveTransferListener(_addr);\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    //function () external payable {\n', '        //require(false, "cannot transfer ether to this contract");\n', '    //}\n', '}\n', '\n', '// File: contracts/ystream/IYieldStream.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract IYieldStream{\n', '\n', '  string public name;\n', '\n', '  function target_token() public view returns(address);\n', '\n', '  function getVirtualPrice() public view returns(uint256);\n', '\n', '  function getDecimal() public pure returns(uint256);\n', '\n', '  function getPriceDecimal() public pure returns(uint256);\n', '}\n', '\n', '// File: contracts/core/HEnv.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract HEnv is Ownable{\n', '\n', '  address public token_addr;\n', '\n', '  address public fee_pool_addr;\n', '\n', '  uint256 public ratio_base;\n', '  uint256 public bid_fee_ratio;\n', '  uint256 public withdraw_fee_ratio;\n', '  uint256 public cancel_fee_ratio;\n', '\n', '  constructor(address _target_token) public{\n', '    token_addr = _target_token;\n', '    ratio_base = 100000000;\n', '  }\n', '\n', '  function changeFeePoolAddr(address _new) public onlyOwner{\n', '    fee_pool_addr = _new;\n', '  }\n', '\n', '  function changeBidFeeRatio(uint256 _ratio) public onlyOwner{\n', '    bid_fee_ratio = _ratio;\n', '  }\n', '\n', '  function changeWithdrawFeeRatio(uint256 _ratio) public onlyOwner{\n', '    withdraw_fee_ratio = _ratio;\n', '  }\n', '\n', '  function changeCancelFeeRatio(uint256 _ratio) public onlyOwner{\n', '    cancel_fee_ratio = _ratio;\n', '  }\n', '}\n', '\n', '\n', 'contract HEnvFactory{\n', '  event NewHEnv(address addr);\n', '  function createHEnv(address _target_token) public returns (address){\n', '    HEnv env = new HEnv(_target_token);\n', '    env.transferOwnership(msg.sender);\n', '    emit NewHEnv(address(env));\n', '    return address(env);\n', '  }\n', '}\n', '\n', '// File: contracts/core/HPeriod.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract HPeriod{\n', '  using SafeMath for uint;\n', '\n', '  uint256 period_start_block;\n', '  uint256 period_block_num;\n', '  uint256 period_gap_block;\n', '\n', '  struct period_info{\n', '    uint256 period;\n', '    uint256 start_block;\n', '    uint256 end_block;    // [start_block, end_block)\n', '  }\n', '\n', '  mapping (uint256 => period_info) all_periods;\n', '  uint256 current_period;\n', '\n', '  bool is_gapping;\n', '\n', '  constructor(uint256 _start_block, uint256 _period_block_num, uint256 _gap_block_num) public{\n', '    period_start_block = _start_block;\n', '    period_block_num = _period_block_num;\n', '\n', '    period_gap_block = _gap_block_num;\n', '    current_period = 0;\n', '    is_gapping = true;\n', '  }\n', '\n', '  function _end_current_and_start_new_period() internal returns(bool){\n', '    require(block.number >= period_start_block, "1st period not start yet");\n', '\n', '    if(is_gapping){\n', '      if(current_period == 0 || block.number.safeSub(all_periods[current_period].end_block) >= period_gap_block){\n', '        current_period = current_period + 1;\n', '        all_periods[current_period].period = current_period;\n', '        all_periods[current_period].start_block = block.number;\n', '        is_gapping = false;\n', '        return true;\n', '      }\n', '    }else{\n', '      if(block.number.safeSub(all_periods[current_period].start_block) >= period_block_num){\n', '        all_periods[current_period].end_block = block.number;\n', '        is_gapping = true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '\n', '  event HPeriodChanged(uint256 old, uint256 new_period);\n', '  function _change_period(uint256 _period) internal{\n', '    uint256 old = period_block_num;\n', '    period_block_num = _period;\n', '    emit HPeriodChanged(old, period_block_num);\n', '  }\n', '\n', '  function getCurrentPeriodStartBlock() public view returns(uint256){\n', '    (, uint256 s, ) = getPeriodInfo(current_period);\n', '    return s;\n', '  }\n', '\n', '  function getPeriodInfo(uint256 period) public view returns(uint256 p, uint256 s, uint256 e){\n', '    p = all_periods[period].period;\n', '    s = all_periods[period].start_block;\n', '    e = all_periods[period].end_block;\n', '  }\n', '\n', '  function getParamPeriodStartBlock() public view returns(uint256){\n', '    return period_start_block;\n', '  }\n', '\n', '  function getParamPeriodBlockNum() public view returns(uint256){\n', '    return period_block_num;\n', '  }\n', '\n', '  function getParamPeriodGapNum() public view returns(uint256){\n', '    return period_gap_block;\n', '  }\n', '\n', '  function getCurrentPeriod() public view returns(uint256){\n', '    return current_period;\n', '  }\n', '\n', '  function isPeriodEnd(uint256 _period) public view returns(bool){\n', '    return all_periods[_period].end_block != 0;\n', '  }\n', '\n', '  function isPeriodStart(uint256 _period) public view returns(bool){\n', '    return all_periods[_period].start_block != 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/core/HPeriodToken.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract HTokenFactoryInterface{\n', '  function createFixedRatioToken(address _token_addr, uint256 _period, uint256 _ratio, string memory _postfix) public returns(address);\n', '  function createFloatingToken(address _token_addr, uint256 _period, string memory _postfix) public returns(address);\n', '}\n', '\n', 'contract HTokenInterface{\n', '  function mint(address addr, uint256 amount)public;\n', '  function burnFrom(address addr, uint256 amount) public;\n', '  uint256 public period_number;\n', '  uint256 public ratio; // 0 is for floating\n', '  uint256 public underlying_balance;\n', '  function setUnderlyingBalance(uint256 _balance) public;\n', '  function setTargetToken(address _target) public;\n', '}\n', '\n', 'contract HPeriodToken is HPeriod, Ownable{\n', '\n', '  struct period_token_info{\n', '    address[] period_tokens;\n', '\n', '    mapping(bytes32 => address) hash_to_tokens;\n', '  }\n', '\n', '  mapping (uint256 => period_token_info) all_period_tokens;\n', '\n', '  HTokenFactoryInterface public token_factory;\n', '  address public target_token;\n', '\n', '\n', '  constructor(address _target_token, uint256 _start_block, uint256 _period, uint256 _gap, address _factory)\n', '    HPeriod(_start_block, _period, _gap) public{\n', '    target_token = _target_token;\n', '    token_factory = HTokenFactoryInterface(_factory);\n', '  }\n', '\n', '  function uint2str(uint256 i) internal pure returns (string memory c) {\n', '    if (i == 0) return "0";\n', '    uint256 j = i;\n', '    uint256 length;\n', '    while (j != 0){\n', '        length++;\n', '        j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(length);\n', '    uint256 k = length - 1;\n', '    while (i != 0){\n', '      bstr[k--] = byte(48 + uint8(i % 10));\n', '      i /= 10;\n', '    }\n', '    c = string(bstr);\n', '  }\n', '\n', '  function getOrCreateToken(uint ratio) public onlyOwner returns(address, bool){\n', '\n', '    _end_current_and_start_new_period();\n', '\n', '    uint256 p = getCurrentPeriod();\n', '    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), ratio, p + 1));\n', '    address c = address(0x0);\n', '\n', '    period_token_info storage pi = all_period_tokens[p + 1];\n', '\n', '    bool s  = false;\n', '    if(pi.hash_to_tokens[h] == address(0x0)){\n', '      if(ratio == 0){\n', '        c = token_factory.createFloatingToken(target_token, p + 1, uint2str(getParamPeriodBlockNum()));\n', '      }\n', '      else{\n', '        c = token_factory.createFixedRatioToken(target_token, p + 1, ratio, uint2str(getParamPeriodBlockNum()));\n', '      }\n', '      HTokenInterface(c).setTargetToken(target_token);\n', '      Ownable ow = Ownable(c);\n', '      ow.transferOwnership(owner());\n', '      pi.period_tokens.push(c);\n', '      pi.hash_to_tokens[h] = c;\n', '      s = true;\n', '    }\n', '    c = pi.hash_to_tokens[h];\n', '\n', '    return(c, s);\n', '  }\n', '\n', '  function updatePeriodStatus() public onlyOwner returns(bool){\n', '    return _end_current_and_start_new_period();\n', '  }\n', '\n', '  function isPeriodTokenValid(address _token_addr) public view returns(bool){\n', '    HTokenInterface hti = HTokenInterface(_token_addr);\n', '    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), hti.ratio(), hti.period_number()));\n', '    period_token_info storage pi = all_period_tokens[hti.period_number()];\n', '    if(pi.hash_to_tokens[h] == _token_addr){\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function totalAtPeriodWithRatio(uint256 _period, uint256 _ratio) public view returns(uint256) {\n', '    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), _ratio, _period));\n', '    period_token_info storage pi = all_period_tokens[_period];\n', '    address c = pi.hash_to_tokens[h];\n', '    if(c == address(0x0)) return 0;\n', '\n', '    IERC20 e = IERC20(c);\n', '    return e.totalSupply();\n', '  }\n', '\n', '  function htokenAtPeriodWithRatio(uint256 _period, uint256 _ratio) public view returns(address){\n', '    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), _ratio, _period));\n', '    period_token_info storage pi = all_period_tokens[_period];\n', '    address c = pi.hash_to_tokens[h];\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HPeriodTokenFactory{\n', '\n', '  event NewPeriodToken(address addr);\n', '  function createPeriodToken(address _target_token, uint256 _start_block, uint256 _period, uint256 _gap, address _token_factory) public returns(address){\n', '    HPeriodToken pt = new HPeriodToken(_target_token, _start_block, _period, _gap, _token_factory);\n', '\n', '    pt.transferOwnership(msg.sender);\n', '    emit NewPeriodToken(address(pt));\n', '    return address(pt);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/core/HGateKeeper.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract HDispatcherInterface{\n', '  function getYieldStream(address _token_addr) public view returns (IYieldStream);\n', '}\n', 'contract TokenBankInterface{\n', '  function issue(address payable _to, uint _amount) public returns(bool success);\n', '}\n', '\n', 'contract ClaimHandlerInterface{\n', '  function handle_create_contract(address from, address lop_token_addr) public;\n', '  function handle_claim(address from, address lp_token_addr, uint256 amount) public;\n', '}\n', '\n', 'contract HGateKeeper is Ownable{\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  HDispatcherInterface public dispatcher;\n', '  address public target_token;\n', '  HEnv public env;\n', '\n', '  HPeriodToken public period_token;\n', '  ClaimHandlerInterface public claim_handler;\n', '  address public yield_interest_pool;\n', '\n', '  uint256 public settled_period;\n', '  uint256 public max_amount;\n', '  struct period_price_info{\n', '    uint256 start_price;\n', '    uint256 end_price;\n', '  }\n', '\n', '  mapping (uint256 => uint256) public period_token_amount;\n', '  mapping (uint256 => period_price_info) public period_prices;\n', '\n', '\n', '  constructor(address _token_addr, address _env, address _dispatcher, address _period_token) public{\n', '    target_token = _token_addr;\n', '    env = HEnv(_env);\n', '    dispatcher = HDispatcherInterface(_dispatcher);\n', '    period_token = HPeriodToken(_period_token);\n', '    settled_period = 0;\n', '  }\n', '\n', '  event ChangeClaimHandler(address old, address _new);\n', '  function changeClaimHandler(address handler) public onlyOwner{\n', '    address old = address(claim_handler);\n', '    claim_handler = ClaimHandlerInterface(handler);\n', '    emit ChangeClaimHandler(old, handler);\n', '  }\n', '\n', '  event ChangeMaxAmount(uint256 old, uint256 _new);\n', '  function set_max_amount(uint _amount) public onlyOwner{\n', '    uint256 old = max_amount;\n', '    max_amount = _amount;\n', '    emit ChangeMaxAmount(old, max_amount);\n', '  }\n', '\n', '  event HorizonBid(address from, uint256 amount, uint256 ratio, address lp_token_addr);\n', '  function bidRatio(uint256 _amount, uint256 _ratio) public returns(address lp_token_addr){\n', '    require(_ratio == 0 || isSupportRatio(_ratio), "not support ratio");\n', '    (address addr, bool created) = period_token.getOrCreateToken(_ratio);\n', '\n', '    if(created){\n', '      if(claim_handler != ClaimHandlerInterface(0x0)){\n', '        claim_handler.handle_create_contract(msg.sender, addr);\n', '      }\n', '    }\n', '\n', '    if(max_amount > 0){\n', '      require(_amount <= max_amount, "too large amount");\n', '      require(_amount.safeAdd(IERC20(addr).balanceOf(msg.sender)) <= max_amount, "please use another wallet");\n', '    }\n', '\n', '\n', '    _check_period();\n', '\n', '    ///*\n', '    require(IERC20(target_token).allowance(msg.sender, address(this)) >= _amount, "not enough allowance");\n', '    uint _before = IERC20(target_token).balanceOf(address(this));\n', '    IERC20(target_token).safeTransferFrom(msg.sender, address(this), _amount);\n', '    uint256 _after = IERC20(target_token).balanceOf(address(this));\n', '    _amount = _after.safeSub(_before); // Additional check for deflationary tokens\n', '\n', '    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\n', '    require(decimal <= 1e18, "decimal too large");\n', '    uint256 shares = _amount.safeMul(1e18).safeDiv(decimal);\n', '\n', '    uint256 period = HTokenInterface(addr).period_number();\n', '    period_token_amount[period] = period_token_amount[period].safeAdd(_amount);\n', '\n', '\n', '    HTokenInterface(addr).mint(msg.sender, shares);\n', '\n', '    emit HorizonBid(msg.sender, _amount, _ratio, addr);\n', '    return addr;\n', '    //*/\n', '  }\n', '\n', '  function bidFloating(uint256 _amount) public returns(address lp_token_addr){\n', '    return bidRatio(_amount, 0);\n', '  }\n', '\n', '  event CancelBid(address from, uint256 amount, uint256 fee, address _lp_token_addr);\n', '  function cancelBid(address _lp_token_addr) public{\n', '    bool is_valid = period_token.isPeriodTokenValid(_lp_token_addr);\n', '    require(is_valid, "invalid lp token address");\n', '    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\n', '    require(amount > 0, "no bid at this period");\n', '\n', '    _check_period();\n', '\n', '    uint256 period = HTokenInterface(_lp_token_addr).period_number();\n', '    require(period_token.getCurrentPeriod() < period,\n', '           "period sealed already");\n', '\n', '    HTokenInterface(_lp_token_addr).burnFrom(msg.sender, amount);\n', '\n', '    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\n', '\n', '    uint256 target_amount = amount.safeMul(decimal).safeDiv(1e18);\n', '\n', '    period_token_amount[period] = period_token_amount[period].safeSub(target_amount);\n', '    if(env.cancel_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\n', '      uint256 fee = target_amount.safeMul(env.cancel_fee_ratio()).safeDiv(env.ratio_base());\n', '      uint256 recv = target_amount.safeSub(fee);\n', '      IERC20(target_token).safeTransfer(msg.sender, recv);\n', '      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\n', '      emit CancelBid(msg.sender, recv, fee, _lp_token_addr);\n', '    }else{\n', '      IERC20(target_token).safeTransfer(msg.sender, target_amount);\n', '      emit CancelBid(msg.sender, target_amount, 0, _lp_token_addr);\n', '    }\n', '\n', '  }\n', '\n', '  function changeBid(address _lp_token_addr, uint256 _new_amount, uint256 _new_ratio) public{\n', '    cancelBid(_lp_token_addr);\n', '    bidRatio(_new_amount, _new_ratio);\n', '  }\n', '\n', '  event HorizonClaim(address from, address _lp_token_addr, uint256 amount, uint256 fee);\n', '  function claim(address _lp_token_addr, uint256 _amount) public {\n', '    bool is_valid = period_token.isPeriodTokenValid(_lp_token_addr);\n', '    require(is_valid, "invalid lp token address");\n', '    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\n', '    require(amount >= _amount, "no enough bid at this period");\n', '\n', '    _check_period();\n', '    require(period_token.isPeriodEnd(HTokenInterface(_lp_token_addr).period_number()), "period not end");\n', '\n', '    uint total = IERC20(_lp_token_addr).totalSupply();\n', '    uint underly = HTokenInterface(_lp_token_addr).underlying_balance();\n', '    HTokenInterface(_lp_token_addr).burnFrom(msg.sender, _amount);\n', '    uint t = _amount.safeMul(underly).safeDiv(total);\n', '    HTokenInterface(_lp_token_addr).setUnderlyingBalance(underly.safeSub(t));\n', '\n', '    if(env.withdraw_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\n', '      uint256 fee = t.safeMul(env.withdraw_fee_ratio()).safeDiv(env.ratio_base());\n', '      uint256 recv = t.safeSub(fee);\n', '      IERC20(target_token).safeTransfer(msg.sender, recv);\n', '      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\n', '      emit HorizonClaim(msg.sender, _lp_token_addr, recv, fee);\n', '    }else{\n', '      IERC20(target_token).safeTransfer(msg.sender, t);\n', '      emit HorizonClaim(msg.sender, _lp_token_addr, t, 0);\n', '    }\n', '\n', '    if(claim_handler != ClaimHandlerInterface(0x0)){\n', '      claim_handler.handle_claim(msg.sender, _lp_token_addr, _amount);\n', '    }\n', '  }\n', '\n', '  function claimAllAndBidForNext(address _lp_token_addr,  uint256 _ratio, uint256 _next_bid_amount) public{\n', '\n', '    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\n', '    claim(_lp_token_addr, amount);\n', '\n', '    uint256 new_amount = IERC20(target_token).balanceOf(msg.sender);\n', '    if(new_amount > _next_bid_amount){\n', '      new_amount = _next_bid_amount;\n', '    }\n', '    bidRatio(new_amount, _ratio);\n', '  }\n', '\n', '  function _check_period() internal{\n', '    period_token.updatePeriodStatus();\n', '\n', '    uint256 new_period = period_token.getCurrentPeriod();\n', '    if(period_prices[new_period].start_price == 0){\n', '      period_prices[new_period].start_price = dispatcher.getYieldStream(target_token).getVirtualPrice();\n', '    }\n', '    if(period_token.isPeriodEnd(settled_period + 1)){\n', '      _settle_period(settled_period + 1);\n', '    }\n', '  }\n', '\n', '  mapping (uint256 => bool) public support_ratios;\n', '  uint256[] public sratios;\n', '\n', '  event SupportRatiosChanged(uint256[] rs);\n', '  function resetSupportRatios(uint256[] memory rs) public onlyOwner{\n', '    for(uint i = 0; i < sratios.length; i++){\n', '      delete support_ratios[sratios[i]];\n', '    }\n', '    delete sratios;\n', '    for(uint i = 0; i < rs.length; i++){\n', '      if(i > 0){\n', '        require(rs[i] > rs[i-1], "should be ascend");\n', '      }\n', '      sratios.push(rs[i]);\n', '      support_ratios[rs[i]] = true;\n', '    }\n', '    emit SupportRatiosChanged(sratios);\n', '  }\n', '\n', '  function isSupportRatio(uint256 r) public view returns(bool){\n', '    for(uint i = 0; i < sratios.length; i++){\n', '      if(sratios[i] == r){\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function updatePeriodStatus() public{\n', '    _check_period();\n', '  }\n', '\n', '  function _settle_period(uint256 _period) internal{\n', '    if(period_prices[_period].end_price== 0){\n', '      period_prices[_period].end_price= dispatcher.getYieldStream(target_token).getVirtualPrice();\n', '    }\n', '\n', '\n', '    uint256 tdecimal = dispatcher.getYieldStream(target_token).getDecimal();\n', '    uint256 left = period_token_amount[_period].safeMul(period_prices[_period].end_price.safeSub(period_prices[_period].start_price));\n', '\n', '    uint256 s = 0;\n', '    address fht = period_token.htokenAtPeriodWithRatio(_period, 0);\n', '\n', '    for(uint256 i = 0; i < sratios.length; i++){\n', '      uint256 t = period_token.totalAtPeriodWithRatio(_period, sratios[i]).safeMul(tdecimal).safeDiv(1e18);\n', '      uint256 nt = t.safeMul(period_prices[_period].start_price).safeMul(sratios[i]).safeDiv(env.ratio_base());\n', '\n', '      address c = period_token.htokenAtPeriodWithRatio(_period, sratios[i]);\n', '      if(c != address(0x0)){\n', '        if(nt > left){\n', '          nt = left;\n', '        }\n', '        left = left.safeSub(nt);\n', '        t = t.safeMul(period_prices[_period].start_price).safeAdd(nt).safeDiv(period_prices[_period].end_price);\n', '        HTokenInterface(c).setUnderlyingBalance(t);\n', '        s = s.safeAdd(t);\n', '      }\n', '    }\n', '\n', '    if(fht != address(0x0)){\n', '      left = period_token_amount[_period].safeSub(s);\n', '      HTokenInterface(fht).setUnderlyingBalance(left);\n', '      s = s.safeAdd(left);\n', '    }\n', '    if(s < period_token_amount[_period]){\n', '      s = period_token_amount[_period].safeSub(s);\n', '      require(yield_interest_pool != address(0x0), "invalid yield interest pool");\n', '      IERC20(target_token).safeTransfer(yield_interest_pool, s);\n', '    }\n', '\n', '    settled_period = _period;\n', '  }\n', '\n', '  event ChangeYieldInterestPool(address old, address _new);\n', '  function changeYieldPool(address _pool) onlyOwner public{\n', '    require(_pool != address(0x0), "invalid pool");\n', '    address old = yield_interest_pool;\n', '    yield_interest_pool = _pool;\n', '    emit ChangeYieldInterestPool(old, _pool);\n', '  }\n', '\n', '}\n', '\n', 'contract HGateKeeperFactory is Ownable{\n', '  event NewGateKeeper(address addr);\n', '\n', '  function createGateKeeperForPeriod(address _env_addr, address _dispatcher, address _period_token) public returns(address){\n', '    HEnv e = HEnv(_env_addr);\n', '    HGateKeeper gk = new HGateKeeper(e.token_addr(), _env_addr, _dispatcher, _period_token);\n', '    gk.transferOwnership(msg.sender);\n', '    emit NewGateKeeper(address(gk));\n', '    return address(gk);\n', '  }\n', '}']