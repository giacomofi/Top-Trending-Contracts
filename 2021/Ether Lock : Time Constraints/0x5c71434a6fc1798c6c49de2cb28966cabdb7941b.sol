['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-04\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Only allowed by owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0),"Invalid address passed");\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', 'contract PLSRewardsWallet is Owned{\n', '    \n', '    mapping(address => bool) public allowedStakingPools;\n', '    \n', '    IERC20 public PLS;\n', '    \n', '    constructor() public{\n', '        owner = 0x225e09C5702Ba1E1957D089CB0eb98cFaE721181;\n', '    }\n', '    \n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        PLS = IERC20(_tokenAddress);\n', '    }\n', '    \n', '    function addPool(address _poolAddress) external onlyOwner{\n', '        allowedStakingPools[_poolAddress] = true;\n', '    }\n', '    \n', '    function removePool(address _poolAddress) external onlyOwner{\n', '        allowedStakingPools[_poolAddress] = false;\n', '    }\n', '    \n', '    function sendRewards(address to, uint256 tokens) public{\n', '        require(allowedStakingPools[msg.sender], "UnAuthorized");\n', '        \n', '        // transfer rewards tokens\n', '        require(PLS.transfer(to, tokens));\n', '    }\n', '}']