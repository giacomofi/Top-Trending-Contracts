['# @version 0.2.8\n', '# @notice A manager contract for the StakingRewards contract from Arcx.\n', '# @author skozin, kadmil\n', '# @license MIT\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface StakingRewards:\n', '    def collabPeriodFinish() -> uint256: view\n', '    def notifyRewardAmount(reward: uint256, rewardToken: address): nonpayable\n', '\n', '\n', 'owner: public(address)\n', 'rewards_contract: public(address)\n', 'ldo_token: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\n', '\n', '\n', '@external\n', 'def __init__():\n', '    self.owner = msg.sender\n', '\n', '\n', '@external\n', 'def transfer_ownership(_to: address):\n', '    """\n', '    @notice Changes the contract owner. Can only be called by the current owner.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '    self.owner = _to\n', '\n', '\n', '@external\n', 'def set_rewards_contract(_rewards_contract: address):\n', '    """\n', '    @notice Sets the StakingRewards contract. Can only be called by the owner.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '    self.rewards_contract = _rewards_contract\n', '\n', '\n', '@view\n', '@internal\n', 'def _is_rewards_period_finished(rewards_contract: address) -> bool:\n', '    return block.timestamp >= StakingRewards(rewards_contract).collabPeriodFinish()\n', '\n', '\n', '@view\n', '@external\n', 'def is_rewards_period_finished() -> bool:\n', '    """\n', '    @notice Whether the current rewards period has finished.\n', '    """\n', '    return self._is_rewards_period_finished(self.rewards_contract)\n', '\n', '\n', '@external\n', 'def start_next_rewards_period():\n', '    """\n', '    @notice\n', '        Starts the next rewards period of duration `rewards_contract.rewardsDuration()`,\n', '        distributing `ldo_token.balanceOf(self)` tokens throughout the period. The current\n', '        rewards period must be finished by this time.\n', '    """\n', '    rewards: address = self.rewards_contract\n', '    amount: uint256 = ERC20(ldo_token).balanceOf(self)\n', '\n', '    assert rewards != ZERO_ADDRESS and amount != 0, "manager: rewards disabled"\n', '    assert self._is_rewards_period_finished(rewards), "manager: rewards period not finished"\n', '\n', '    ERC20(ldo_token).approve(rewards, amount)\n', '    StakingRewards(rewards).notifyRewardAmount(amount, ldo_token)\n', '\n', '\n', '@external\n', 'def recover_erc20(_token: address, _recipient: address = msg.sender):\n', '    """\n', '    @notice\n', '        Transfers the whole balance of the given ERC20 token from self\n', '        to the recipient. Can only be called by the owner.\n', '    """\n', '    assert msg.sender == self.owner, "not permitted"\n', '    token_balance: uint256 = ERC20(_token).balanceOf(self)\n', '    if token_balance != 0:\n', '        assert ERC20(_token).transfer(_recipient, token_balance), "token transfer failed"']