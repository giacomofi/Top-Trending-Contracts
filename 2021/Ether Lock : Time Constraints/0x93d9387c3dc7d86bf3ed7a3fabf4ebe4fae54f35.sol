['pragma solidity >=0.7.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', 'import "./IMintedBeforeReveal.sol";\n', '\n', 'contract Picklz is ERC721, Ownable, IMintedBeforeReveal {\n', '\n', '    // This is the original provenance record of all Picklz in existence at the time.\n', '    string public constant ORIGINAL_PROVENANCE = "";\n', '\n', '    // Time of when the sale starts.\n', '    uint256 public constant SALE_START_TIMESTAMP = 1617202800;\n', '\n', '    // Time after which the Picklz are randomized and revealed 7 days from initial launch).\n', '    uint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 7);\n', '\n', '    // Maximum amount of Picklz in existance.\n', '    uint256 public constant MAX_PICKLZ_SUPPLY = 4269;\n', '\n', '    // Truth.\n', '    string public constant R = "Some of our pickles are looking for love, others just want to watch the world burn.";\n', '\n', '    // The block in which the starting index was created.\n', '    uint256 public startingIndexBlock;\n', '\n', '    // The index of the item that will be #1.\n', '    uint256 public startingIndex;\n', '\n', '    mapping (uint256 => bool) private _mintedBeforeReveal;\n', '\n', '    constructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) {\n', '        _setBaseURI(baseURI);\n', '    }\n', '\n', '    function isMintedBeforeReveal(uint256 index) public view override returns (bool) {\n', '        return _mintedBeforeReveal[index];\n', '    }\n', '\n', ' \n', '    function getPicklzMaxAmount() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started yet so you can\'t get a price yet.");\n', '        require(totalSupply() < MAX_PICKLZ_SUPPLY, "Sale has already ended, no more Picklz left to sell.");\n', '\n', '        uint currentSupply = totalSupply();\n', '        \n', '        if (currentSupply >= 201) {\n', '            return 20; // After 200, do it per 20.\n', '       } else {\n', '            return 5; // First 200 can only be bought per 5.\n', '        }\n', '    }\n', '\n', '    function getPicklzPrice() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started yet so you can\'t get a price yet.");\n', '        require(totalSupply() < MAX_PICKLZ_SUPPLY, "Sale has already ended, no more Picklz left to sell.");\n', '\n', '        uint currentSupply = totalSupply();\n', '\n', '        if (currentSupply > 4200) {\n', '            return 690000000000000000; // 4200-4269: 0.69 ETH\n', '        } else if (currentSupply > 4000) {\n', '            return 500000000000000000; // 4000-4200: 0.50 ETH\n', '        } else if (currentSupply > 3200) {\n', '            return 400000000000000000; // 3200-4000: 0.40 ETH\n', '        } else if (currentSupply > 2200) {\n', '            return 300000000000000000; // 2200-3200: 0.30 ETH\n', '        } else if (currentSupply > 1200) {\n', '            return 200000000000000000; // 1200-2200: 0.20 ETH\n', '        } else if (currentSupply > 200) {\n', '            return 100000000000000000; // 200-1200:  0.10 ETH\n', '        } else {\n', '            return 50000000000000000;  // 0 - 200:   0.05 ETH\n', '        }\n', '    }\n', '\n', '    function mintAPicklz(uint256 numberOfPicklz) public payable {\n', '        // Some exceptions that need to be handled.\n', '        require(totalSupply() < MAX_PICKLZ_SUPPLY, "Sale has already ended.");\n', '        require(numberOfPicklz > 0, "You cannot mint 0 Picklz.");\n', '        require(numberOfPicklz <= getPicklzMaxAmount(), "You are not allowed to buy this many Picklz at once in this price tier.");\n', '        require(SafeMath.add(totalSupply(), numberOfPicklz) <= MAX_PICKLZ_SUPPLY, "Exceeds maximum Picklz supply. Please try to mint less Picklz.");\n', '        require(SafeMath.mul(getPicklzPrice(), numberOfPicklz) == msg.value, "Amount of Ether sent is not correct.");\n', '\n', '        for (uint i = 0; i < numberOfPicklz; i++) {\n', '            uint mintIndex = totalSupply();\n', '            if (block.timestamp < REVEAL_TIMESTAMP) {\n', '                _mintedBeforeReveal[mintIndex] = true;\n', '            }\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '\n', '        // Source of randomness. Theoretical miner withhold manipulation possible but should be sufficient in a pragmatic sense\n', '        // Set the starting block index when the sale concludes either time-wise or the supply runs out.\n', '        if (startingIndexBlock == 0 && (totalSupply() == MAX_PICKLZ_SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)) {\n', '            startingIndexBlock = block.number;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Finalize starting index\n', '    */\n', '    function finalizeStartingIndex() public {\n', '        require(startingIndex == 0, "Starting index is already set");\n', '        require(startingIndexBlock != 0, "Starting index block must be set");\n', '        \n', '        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_PICKLZ_SUPPLY;\n', '\n', '        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes).\n', '        if (SafeMath.sub(block.number, startingIndexBlock) > 255) {\n', '            startingIndex = uint(blockhash(block.number-1)) % MAX_PICKLZ_SUPPLY;\n', '        }\n', '\n', '        // Prevent default sequence because that would be a bit boring.\n', '        if (startingIndex == 0) {\n', '            startingIndex = SafeMath.add(startingIndex, 1);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw ether from this contract (Callable by owner only)\n', '    */\n', '    function withdraw() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function changeBaseURI(string memory baseURI) onlyOwner public {\n', '       _setBaseURI(baseURI);\n', '    }\n', '       /**\n', '    * @dev Reserved for people who helped this project and giveaways. Max 10\n', '    */\n', '      function reserveGiveaway(uint256 numPicklz) public onlyOwner {\n', '        uint currentSupply = totalSupply();\n', '        require(totalSupply() + numPicklz <= 10, "Exceeded giveaway supply");\n', '        uint256 index;\n', '        // Reserved for people who helped this project and giveaways\n', '        for (index = 0; index < numPicklz; index++) {\n', '            _safeMint(owner(), currentSupply + index);\n', '        }\n', '    }\n', '}']