['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-11\n', '*/\n', '\n', 'pragma solidity 0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract WanFarmErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    /**\n', '      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n', '      */\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract UniFarmAdminStorage {\n', '    /**\n', '    * @notice Administrator for this contract\n', '    */\n', '    address public admin;\n', '\n', '    /**\n', '    * @notice Pending administrator for this contract\n', '    */\n', '    address public pendingAdmin;\n', '\n', '    /**\n', '    * @notice Active brains of WanFarm\n', '    */\n', '    address public wanFarmImplementation;\n', '\n', '    /**\n', '    * @notice Pending brains of WanFarm\n', '    */\n', '    address public pendingWanFarmImplementation;\n', '}\n', '\n', 'contract WanFarmV1Storage is UniFarmAdminStorage {\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        uint256 extRewardDebt; \n', '    }\n', '\n', '    struct ExtFarmInfo{\n', '        address extFarmAddr;  \n', '        bool extEnableDeposit;\n', '        uint256 extPid;\n', '        uint256 extRewardPerShare;\n', '        uint256 extTotalDebtReward;  //\n', '        bool extEnableClaim;\n', '    }\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20  lpToken;          // Address of LP token contract.\n', '        uint256 currentSupply;    //\n', '        uint256 bonusStartBlock;  //\n', '        uint256 newStartBlock;    //\n', '        uint256 bonusEndBlock;    // Block number when bonus wanWan period ends.\n', '\n', '        uint256 lastRewardBlock;  // Last block number that wanWans distribution occurs.\n', '        uint256 accwanWanPerShare;// Accumulated wanWans per share, times 1e12. See below.\n', '        uint256 wanWanPerBlock;   // wanWan tokens created per block.\n', '        uint256 totalDebtReward;  //\n', '\n', '        ExtFarmInfo extFarmInfo;\n', '    }\n', '\n', '    PoolInfo[] public poolInfo;   // Info of each pool.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;// Info of each user that stakes LP tokens.\n', '\n', '}\n', '\n', 'contract WanFarmInterface {\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    function pendingwanWan(uint256 _pid, address _user) public view returns (uint256,uint256);\n', '    function allPendingReward(uint256 _pid,address _user) public view returns(uint256,uint256,uint256);\n', '    function pendingExtReward(uint256 _pid, address _user) public view returns(uint256);\n', '\n', '    function deposit(uint256 _pid, uint256 _amount) public;\n', '    function withdraw(uint256 _pid, uint256 _amount) public;\n', '    function emergencyWithdraw(uint256 _pid) public;\n', '}\n', '\n', '/**\n', ' * @title ComptrollerCore\n', ' * @dev Storage for the comptroller is at this address, while execution is delegated to the `wanFarmImplementation`.\n', ' * CTokens should reference this contract as their comptroller.\n', ' */\n', 'contract UniFarm is UniFarmAdminStorage, WanFarmErrorReporter {\n', '\n', '    /**\n', '      * @notice Emitted when pendingWanFarmImplementation is changed\n', '      */\n', '    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingWanFarmImplementation is accepted, which means comptroller implementation is updated\n', '      */\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is changed\n', '      */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n', '      */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    constructor() public {\n', '        // Set admin to caller\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /*** Admin Functions ***/\n', '    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n', '\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n', '        }\n', '\n', '        address oldPendingImplementation = pendingWanFarmImplementation;\n', '\n', '        pendingWanFarmImplementation = newPendingImplementation;\n', '\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n', "    * @dev Admin function for new implementation to accept it's role as implementation\n", '    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '    */\n', '    function _acceptImplementation() public returns (uint) {\n', '        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n', '        if (msg.sender != pendingWanFarmImplementation || pendingWanFarmImplementation == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldImplementation = wanFarmImplementation;\n', '        address oldPendingImplementation = pendingWanFarmImplementation;\n', '\n', '        wanFarmImplementation = pendingWanFarmImplementation;\n', '\n', '        pendingWanFarmImplementation = address(0);\n', '\n', '        emit NewImplementation(oldImplementation, wanFarmImplementation);\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '\n', '    /**\n', '      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @param newPendingAdmin New pending admin.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n', '        // Check caller = admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value, if any, for inclusion in log\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n', '      * @dev Admin function for pending admin to accept role and update admin\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _acceptAdmin() public returns (uint) {\n', '        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n', '        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates execution to an implementation contract.\n', '     * It returns to the external caller whatever the implementation returns\n', '     * or forwards reverts.\n', '     */\n', '    function () payable external {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = wanFarmImplementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '              let free_mem_ptr := mload(0x40)\n', '              returndatacopy(free_mem_ptr, 0, returndatasize)\n', '\n', '              switch success\n', '              case 0 { revert(free_mem_ptr, returndatasize) }\n', '              default { return(free_mem_ptr, returndatasize) }\n', '        }\n', '    }\n', '}\n', '\n', 'interface ISushiChef {\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '    function emergencyWithdraw(uint256 _pid) external;\n', '    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\n', '    function pendingSushi(uint256 _pid, address _user)  external view returns (uint256);\n', '    function sushi() external view returns (address);\n', '    function sushiPerBlock() external view returns (uint256);\n', '    function poolInfo(uint256) external  view returns ( address lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accsushiPerShare);\n', '    function poolLength() external view returns (uint256);\n', '    function totalAllocPoint() external view returns (uint256);\n', '    function userInfo(uint256, address) external view returns (uint256 amount, uint256 rewardDebt);\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '}\n', '\n', 'contract WanFarm is WanFarmV1Storage, WanFarmInterface{\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public constant wanWan = IERC20(0x135B810e48e4307AB2a59ea294A6f1724781bD3C);\n', '\n', '    event QuitWanwan(address to, uint256 amount);\n', '    event QuitExtReward(address extFarmAddr, address rewardToken, address to, uint256 amount);\n', '    event UpdatePoolInfo(uint256 pid, uint256 bonusEndBlock, uint256 wanWanPerBlock);\n', '    event WithdrawwanWan(address to, uint256 amount);\n', '    event DoubleFarmingEnable(uint256 pid, bool flag);\n', '    event SetExtFarm(uint256 pid, address extFarmAddr, uint256 extPid );\n', '    event EmergencyWithdraw(uint256 indexed pid);\n', '\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == admin, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function _poolInfo(uint256 _pid) external view returns (\n', '        address lpToken,         // Address of LP token contract.\n', '        uint256 currentSupply,    //\n', '        uint256 bonusStartBlock,  //\n', '        uint256 newStartBlock,    //\n', '        uint256 bonusEndBlock,    // Block number when bonus wanWan period ends.\n', '\n', '        uint256 lastRewardBlock,  // Last block number that wanWans distribution occurs.\n', '        uint256 accwanWanPerShare,// Accumulated wanWans per share, times 1e12. See below.\n', '        uint256 wanWanPerBlock,   // wanWan tokens created per block.\n', '        uint256 totalDebtReward){\n', '\n', '            require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '            PoolInfo storage pool = poolInfo[_pid]; \n', '\n', '            return (\n', '                address(pool.lpToken),\n', '                pool.currentSupply,\n', '                pool.bonusStartBlock,\n', '                pool.newStartBlock,\n', '                pool.bonusEndBlock,\n', '\n', '                pool.lastRewardBlock,\n', '                pool.accwanWanPerShare,\n', '                pool.wanWanPerBlock,\n', '                pool.totalDebtReward\n', '                );\n', '        }\n', '    \n', '    function _extFarmInfo(uint256 _pid) external view returns (\n', '\t\taddress extFarmAddr,  \n', '        bool extEnableDeposit,\n', '        uint256 extPid,\n', '        uint256 extRewardPerShare,\n', '        uint256 extTotalDebtReward,  //\n', '        bool extEnableClaim){\n', '\n', '            require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '            PoolInfo storage pool = poolInfo[_pid]; \n', '\n', '            return (\n', '                pool.extFarmInfo.extFarmAddr,\n', '                pool.extFarmInfo.extEnableDeposit,\n', '                pool.extFarmInfo.extPid,\n', '                pool.extFarmInfo.extRewardPerShare,\n', '                pool.extFarmInfo.extTotalDebtReward,\n', '                pool.extFarmInfo.extEnableClaim);\n', '        }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(IERC20 _lpToken,\n', '                 uint256 _bonusStartBlock,\n', '                 uint256 _bonusEndBlock,\n', '                 uint256 _wanWanPerBlock\n', '                 ) public onlyOwner {\n', '        require(block.number < _bonusEndBlock, "block.number >= bonusEndBlock");\n', '        require(_bonusStartBlock < _bonusEndBlock, "_bonusStartBlock >= _bonusEndBlock");\n', '        require(address(_lpToken) != address(0), "_lpToken == 0");\n', '        uint256 lastRewardBlock = block.number > _bonusStartBlock ? block.number : _bonusStartBlock;\n', '\n', '        ExtFarmInfo memory extFarmInfo = ExtFarmInfo({\n', '                extFarmAddr:address(0x0),\n', '                extEnableDeposit:false,\n', '                extPid: 0,\n', '                extRewardPerShare: 0,\n', '                extTotalDebtReward:0,\n', '                extEnableClaim:false\n', '                });\n', '\n', '\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            currentSupply: 0,\n', '            bonusStartBlock: _bonusStartBlock,\n', '            newStartBlock: _bonusStartBlock,\n', '            bonusEndBlock: _bonusEndBlock,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accwanWanPerShare: 0,\n', '            wanWanPerBlock: _wanWanPerBlock,\n', '            totalDebtReward: 0,\n', '            extFarmInfo:extFarmInfo\n', '        }));\n', '        \n', '    }\n', '\n', '    function updatePoolInfo(uint256 _pid, uint256 _bonusEndBlock, uint256 _wanWanPerBlock) public onlyOwner {\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        require(_bonusEndBlock > block.number, "_bonusEndBlock <= block.number");\n', '        updatePool(_pid);\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if(pool.bonusEndBlock <= block.number){\n', '            pool.newStartBlock = block.number;\n', '        }\n', '\n', '        pool.bonusEndBlock = _bonusEndBlock;\n', '        pool.wanWanPerBlock = _wanWanPerBlock;\n', '        emit UpdatePoolInfo(_pid, _bonusEndBlock, _wanWanPerBlock);\n', '    }\n', '\n', '    function getMultiplier(uint256 _pid) internal view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if(block.number <= pool.bonusStartBlock){\n', '            return 0;// no begin\n', '        }\n', '\n', '        if(pool.lastRewardBlock >= pool.bonusEndBlock){\n', '            return 0;// ended\n', '        }\n', '\n', '        if(block.number >= pool.bonusEndBlock){\n', '            // ended, but no update, lastRewardBlock < bonusEndBlock\n', '            return pool.bonusEndBlock.sub(pool.lastRewardBlock);\n', '        }\n', '\n', '        return block.number.sub(pool.lastRewardBlock);\n', '    }\n', '\n', '    // View function to see pending wanWans on frontend.\n', '    function pendingwanWan(uint256 _pid, address _user) public view returns (uint256,uint256) {\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accwanWanPerShare = pool.accwanWanPerShare;\n', '        if (block.number > pool.lastRewardBlock && pool.currentSupply != 0) {\n', '            uint256 multiplier = getMultiplier(_pid);\n', '            uint256 wanWanReward = multiplier.mul(pool.wanWanPerBlock);\n', '            accwanWanPerShare = accwanWanPerShare.add(wanWanReward.mul(1e12).div(pool.currentSupply));\n', '        }\n', '        return (user.amount, user.amount.mul(accwanWanPerShare).div(1e12).sub(user.rewardDebt));\n', '    }\n', '\n', '    /////////////////////////////////////////////////////////////////////////////////////////\n', '    function totalUnclaimedExtFarmReward(address extFarmAddr) public view returns(uint256){\n', '        \n', '        uint256 allTotalUnclaimed = 0; \n', '        \n', '        for (uint256 index = 0; index < poolInfo.length; index++) {\n', '            PoolInfo storage pool = poolInfo[index];\n', '\n', '            if(pool.extFarmInfo.extFarmAddr == address(0x0) || pool.extFarmInfo.extFarmAddr != extFarmAddr) continue;\n', '\n', '            allTotalUnclaimed = pool.currentSupply.mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(pool.extFarmInfo.extTotalDebtReward).add(allTotalUnclaimed);\n', '            \n', '        }\n', '\n', '        return allTotalUnclaimed;\n', '    }\n', '\n', '    function distributeFinalExtReward(uint256 _pid, uint256 _amount) public onlyOwner{\n', '\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.extFarmInfo.extFarmAddr != address(0x0),"pool not supports double farming");\n', '\n', '        uint256 allUnClaimedExtReward = totalUnclaimedExtFarmReward(pool.extFarmInfo.extFarmAddr);\n', '\n', '        uint256 extRewardCurrentBalance = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\n', '\n', '        uint256 maxDistribute = extRewardCurrentBalance.sub(allUnClaimedExtReward);\n', '\n', '        require(_amount <= maxDistribute,"distibute too much external rewards");\n', '\n', '        pool.extFarmInfo.extRewardPerShare = _amount.mul(1e12).div(pool.currentSupply).add(pool.extFarmInfo.extRewardPerShare);\n', '    }\n', '\n', '    function getExtFarmRewardRate(ISushiChef sushiChef,IERC20 lpToken, uint256 extPid) internal view returns(uint256 rate){\n', '\n', '        uint256 multiplier = sushiChef.getMultiplier(block.number-1, block.number);\n', '        uint256 sushiPerBlock = sushiChef.sushiPerBlock();\n', '        (,uint256 allocPoint,,) = sushiChef.poolInfo(extPid);\n', '        uint256 totalAllocPoint = sushiChef.totalAllocPoint();\n', '        uint256 totalSupply = lpToken.balanceOf(address(sushiChef));\n', '\n', '        rate = multiplier.mul(sushiPerBlock).mul(allocPoint).mul(1e12).div(totalAllocPoint).div(totalSupply);\n', '    }\n', '    function extRewardPerBlock(uint256 _pid) public view returns(uint256){\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        if(!pool.extFarmInfo.extEnableDeposit) return 0;\n', '\n', '        ISushiChef sushiChef = ISushiChef(pool.extFarmInfo.extFarmAddr);\n', '        uint256 rate = getExtFarmRewardRate(sushiChef, pool.lpToken,pool.extFarmInfo.extPid);\n', '        (uint256 amount,) = sushiChef.userInfo(_pid,address(this));\n', '        uint256 extReward = rate.mul(amount).div(1e12);\n', '\n', '        return extReward;\n', '    }\n', '    \n', '    function allPendingReward(uint256 _pid,address _user) public view returns(uint256,uint256,uint256){\n', '        uint256 depositAmount;\n', '        uint256 wanWanReward;\n', '        uint256 sushiReward;\n', '        \n', '        (depositAmount,wanWanReward) = pendingwanWan(_pid,_user);\n', '        sushiReward = pendingExtReward(_pid,_user);\n', '        \n', '        return (depositAmount,wanWanReward,sushiReward);\n', '    }\n', '\n', '    function enableDoubleFarming(uint256 _pid, bool enable)public onlyOwner{\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.extFarmInfo.extFarmAddr != address(0x0),"pool not supports double farming yet");\n', '\n', '        if(pool.extFarmInfo.extEnableDeposit != enable){\n', '\n', '            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\n', '            \n', '            if(enable){\n', '                pool.lpToken.approve(pool.extFarmInfo.extFarmAddr,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n', '                if(pool.currentSupply > 0) {\n', '                    ISushiChef(pool.extFarmInfo.extFarmAddr).deposit(pool.extFarmInfo.extPid,pool.currentSupply);\n', '                }\n', '\n', '                pool.extFarmInfo.extEnableClaim = true;\n', '                \n', '            }else{\n', '                pool.lpToken.approve(pool.extFarmInfo.extFarmAddr,0);\n', '                (uint256 amount,) = ISushiChef(pool.extFarmInfo.extFarmAddr).userInfo(pool.extFarmInfo.extPid,address(this));\n', '                if(amount > 0){\n', '                    ISushiChef(pool.extFarmInfo.extFarmAddr).withdraw(pool.extFarmInfo.extPid,amount);\n', '                }\n', '            }\n', '\n', '            if(pool.currentSupply > 0){\n', '                uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this)).sub(oldSuShiRewarad);\n', '\n', '                pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(pool.currentSupply).add(pool.extFarmInfo.extRewardPerShare);\n', '            }\n', '        \n', '            pool.extFarmInfo.extEnableDeposit = enable;\n', '\n', '            emit DoubleFarmingEnable(_pid,enable);\n', '        }\n', '    }\n', '\n', '    function setDoubleFarming(uint256 _pid,address extFarmAddr,uint256 _extPid) public onlyOwner{\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        require(extFarmAddr != address(0x0),"extFarmAddr == 0x0");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        require(pool.extFarmInfo.extFarmAddr == address(0x0),"cannot set extFramAddr again");\n', '\n', '        uint256 extPoolLength = ISushiChef(extFarmAddr).poolLength();\n', '        require(_extPid < extPoolLength,"bad _extPid");\n', '\n', '        (address lpToken,,,) = ISushiChef(extFarmAddr).poolInfo(_extPid);\n', '        require(lpToken == address(pool.lpToken),"pool mismatch between WanFarm and extFarm");\n', '\n', '        pool.extFarmInfo.extFarmAddr = extFarmAddr;\n', '        pool.extFarmInfo.extPid = _extPid;\n', '\n', '        emit SetExtFarm(_pid, extFarmAddr, _extPid);\n', '        \n', '    }\n', '\n', '    function disableExtEnableClaim(uint256 _pid)public onlyOwner{\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        require(pool.extFarmInfo.extEnableDeposit == false, "can only disable extEnableClaim when extEnableDeposit is disabled");\n', '\n', '        pool.extFarmInfo.extEnableClaim = false;\n', '    }\n', '\n', '    function pendingExtReward(uint256 _pid, address _user) public view returns(uint256){\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if(pool.extFarmInfo.extFarmAddr == address(0x0)){\n', '            return 0;\n', '        }\n', '\n', '        if(pool.currentSupply <= 0) return 0;\n', '\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        if(user.amount <= 0) return 0;\n', '        \n', '        uint256 extRewardPerShare = pool.extFarmInfo.extRewardPerShare;\n', '\n', '        if(pool.extFarmInfo.extEnableDeposit){\n', '            uint256 totalPendingSushi = ISushiChef(pool.extFarmInfo.extFarmAddr).pendingSushi(pool.extFarmInfo.extPid,address(this));\n', '            extRewardPerShare = totalPendingSushi.mul(1e12).div(pool.currentSupply).add(extRewardPerShare);\n', '        }\n', '\n', '        uint256 userPendingSuShi = user.amount.mul(extRewardPerShare).div(1e12).sub(user.extRewardDebt);\n', '\n', '        return userPendingSuShi;\n', '    }\n', '\n', '    function depositLPToSuShiChef(uint256 _pid,uint256 _amount) internal {\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\n', '        \n', '        UserInfo storage user =  userInfo[_pid][msg.sender];\n', '\n', '        if(pool.extFarmInfo.extEnableDeposit){\n', '            \n', '            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\n', '            uint256 oldTotalDeposit = pool.currentSupply.sub(_amount);\n', '            \n', '            ISushiChef(pool.extFarmInfo.extFarmAddr).deposit(pool.extFarmInfo.extPid, _amount);\n', '\n', '            uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\n', '            deltaSuShiReward = deltaSuShiReward.sub(oldSuShiRewarad);\n', '\n', '            if(oldTotalDeposit > 0 && deltaSuShiReward > 0){\n', '                pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(oldTotalDeposit).add(pool.extFarmInfo.extRewardPerShare);\n', '            }\n', '\n', '        }\n', '\n', '        if(pool.extFarmInfo.extEnableClaim) {\n', '            uint256 transferSuShiAmount = user.amount.sub(_amount).mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(user.extRewardDebt);\n', '            \n', '            if(transferSuShiAmount > 0){\n', '                address sushiToken = ISushiChef(pool.extFarmInfo.extFarmAddr).sushi();\n', '                IERC20(sushiToken).safeTransfer(msg.sender,transferSuShiAmount);\n', '            }\n', '        }\n', '\n', '        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.sub(user.extRewardDebt);\n', '        user.extRewardDebt = user.amount.mul(pool.extFarmInfo.extRewardPerShare).div(1e12);\n', '        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.add(user.extRewardDebt);\n', '        \n', '    }\n', '\n', '    function withDrawLPFromSuShi(uint256 _pid,uint256 _amount) internal{\n', '        require(_pid < poolInfo.length,"pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user =  userInfo[_pid][msg.sender];\n', '\n', '        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\n', '\n', '        if(pool.extFarmInfo.extEnableDeposit){\n', '            \n', '            require(user.amount >= _amount,"withdraw too much lpToken");\n', '\n', '            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\n', '            uint256 oldTotalDeposit = pool.currentSupply;\n', '            \n', '            ISushiChef(pool.extFarmInfo.extFarmAddr).withdraw(pool.extFarmInfo.extPid, _amount);\n', '\n', '            uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this)).sub(oldSuShiRewarad);\n', '            if(oldTotalDeposit > 0 && deltaSuShiReward > 0) pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(oldTotalDeposit).add(pool.extFarmInfo.extRewardPerShare);\n', '            \n', '        }\n', '\n', '        if(pool.extFarmInfo.extEnableClaim) {\n', '            uint256 transferSuShiAmount = user.amount.mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(user.extRewardDebt);\n', '\n', '            if(transferSuShiAmount > 0){\n', '                address sushiToken = ISushiChef(pool.extFarmInfo.extFarmAddr).sushi();\n', '                IERC20(sushiToken).safeTransfer(msg.sender,transferSuShiAmount);\n', '            }\n', '        }\n', '        \n', '        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.sub(user.extRewardDebt);\n', '        user.extRewardDebt = user.amount.sub(_amount).mul(pool.extFarmInfo.extRewardPerShare).div(1e12);\n', '        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.add(user.extRewardDebt);\n', '    }\n', '\n', '    //////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        if (pool.currentSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        uint256 multiplier = getMultiplier(_pid);\n', '        uint256 wanWanReward = multiplier.mul(pool.wanWanPerBlock);\n', '        pool.accwanWanPerShare = pool.accwanWanPerShare.add(wanWanReward.mul(1e12).div(pool.currentSupply));\n', '        pool.lastRewardBlock = block.number;\n', '\n', '    }\n', '\n', '    // Deposit LP tokens to MasterChef for wanWan allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public  {\n', '        require(_pid < poolInfo.length, "pid >= poolInfo.length");\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        updatePool(_pid);\n', '\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accwanWanPerShare).div(1e12).sub(user.rewardDebt);\n', '            if(pending > 0) {\n', '                wanWan.transfer(msg.sender, pending);\n', '            }\n', '        }\n', '\n', '        if(_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '            pool.currentSupply = pool.currentSupply.add(_amount);\n', '        }\n', '        \n', '        // must excute after lpToken has beem transfered from user to this contract and the amount of user depoisted is updated.\n', '        depositLPToSuShiChef(_pid,_amount); \n', '            \n', '        pool.totalDebtReward = pool.totalDebtReward.sub(user.rewardDebt);\n', '        user.rewardDebt = user.amount.mul(pool.accwanWanPerShare).div(1e12);\n', '        pool.totalDebtReward = pool.totalDebtReward.add(user.rewardDebt);\n', '\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid, uint256 _amount) public  {\n', '        require(_pid < poolInfo.length, "pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '\n', '        withDrawLPFromSuShi(_pid,_amount);\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accwanWanPerShare).div(1e12).sub(user.rewardDebt);\n', '        if(pending > 0) {\n', '            wanWan.transfer(msg.sender, pending);\n', '        }\n', '        if(_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.currentSupply = pool.currentSupply.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '\n', '        pool.totalDebtReward = pool.totalDebtReward.sub(user.rewardDebt);\n', '        user.rewardDebt = user.amount.mul(pool.accwanWanPerShare).div(1e12);\n', '        pool.totalDebtReward = pool.totalDebtReward.add(user.rewardDebt);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '\n', '    function emergencyWithdraw(uint256 _pid) public onlyOwner  {\n', '        require(_pid < poolInfo.length, "pid >= poolInfo.length");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\n', '\n', '        ISushiChef(pool.extFarmInfo.extFarmAddr).emergencyWithdraw(pool.extFarmInfo.extPid);\n', '\n', '        pool.extFarmInfo.extEnableDeposit = false;            \n', '\n', '        emit EmergencyWithdraw(_pid);\n', '    }\n', '\n', '    // Safe wanWan transfer function, just in case if rounding error causes pool to not have enough wanWan.\n', '    function safewanWanTransfer(address _to, uint256 _amount) internal {\n', '        uint256 wanWanBal = wanWan.balanceOf(address(this));\n', '        if (_amount > wanWanBal) {\n', '            wanWan.transfer(_to, wanWanBal);\n', '        } else {\n', '            wanWan.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function quitwanWan(address _to) public onlyOwner {\n', '        require(_to != address(0), "_to == 0");\n', '        uint256 wanWanBal = wanWan.balanceOf(address(this));\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            PoolInfo storage pool = poolInfo[pid];\n', '            require(block.number > pool.bonusEndBlock, "quitWanwan block.number <= pid.bonusEndBlock");\n', '            updatePool(pid);\n', '            uint256 wanWanReward = pool.currentSupply.mul(pool.accwanWanPerShare).div(1e12).sub(pool.totalDebtReward);\n', '            wanWanBal = wanWanBal.sub(wanWanReward);\n', '        }\n', '        safewanWanTransfer(_to, wanWanBal);\n', '        emit QuitWanwan(_to, wanWanBal);\n', '    }\n', '\n', '    function quitExtFarm(address extFarmAddr, address _to) public onlyOwner{\n', '        require(_to != address(0), "_to == 0");\n', '        require(extFarmAddr != address(0), "extFarmAddr == 0");\n', '\n', '        IERC20 sushiToken = IERC20(ISushiChef(extFarmAddr).sushi());\n', '\n', '        uint256 sushiBalance = sushiToken.balanceOf(address(this));\n', '\n', '        uint256 totalUnclaimedReward = totalUnclaimedExtFarmReward(extFarmAddr);\n', '\n', '        require(totalUnclaimedReward <= sushiBalance, "extreward shortage");\n', '\n', '        uint256 quitBalance = sushiBalance.sub(totalUnclaimedReward);\n', '\n', '        sushiToken.safeTransfer(_to, quitBalance);\n', '        emit QuitExtReward(extFarmAddr,address(sushiToken),_to, quitBalance);\n', '    }\n', '\n', '    function _become(UniFarm uniFarm) public {\n', '        require(msg.sender == uniFarm.admin(), "only uniFarm admin can change brains");\n', '        require(uniFarm._acceptImplementation() == 0, "change not authorized");\n', '    }\n', '\n', '}']