['pragma solidity 0.7.6;\n', '\n', 'import "./complifi-amm/libs/complifi/tokens/IERC20Metadata.sol";\n', 'import "./ILiquidityMining.sol";\n', '\n', '//import "hardhat/console.sol";\n', '\n', 'contract ProxyActionsLiquidityMining {\n', '\n', '    /// @notice Direct liquidity mining method deposit\n', '    function deposit(\n', '        address _liquidityMining,\n', '        address _token,\n', '        uint256 _tokenAmount\n', '    ) external {\n', '\n', '        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\n', '        require(liquidityMining.isTokenAdded(_token), "TOKEN_NOT_ADDED");\n', '\n', '        require(\n', '            IERC20(_token).transferFrom(msg.sender, address(this), _tokenAmount),\n', '            "TOKEN_IN"\n', '        );\n', '\n', '        IERC20(_token).approve(_liquidityMining, _tokenAmount);\n', '\n', '        uint256 pid = liquidityMining.poolPidByAddress(_token);\n', '        liquidityMining.deposit(pid, _tokenAmount);\n', '    }\n', '\n', '    /// @notice Direct liquidity mining method withdraw\n', '    function withdraw(\n', '        address _liquidityMining,\n', '        address _token,\n', '        uint256 _tokenAmount\n', '    ) external {\n', '\n', '        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\n', '        require(liquidityMining.isTokenAdded(_token), "TOKEN_NOT_ADDED");\n', '\n', '        uint256 pid = liquidityMining.poolPidByAddress(_token);\n', '        liquidityMining.withdraw(pid, _tokenAmount);\n', '\n', '        uint tokenBalance = IERC20(_token).balanceOf(address(this));\n', '        if(tokenBalance > 0) {\n', '            require(\n', '                IERC20(_token).transfer(msg.sender, tokenBalance),\n', '                "TOKEN_OUT"\n', '            );\n', '        }\n', '    }\n', '\n', '    /// @notice Direct liquidity mining method claim\n', '    function claim(\n', '        address _liquidityMining\n', '    ) external {\n', '\n', '        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\n', '        liquidityMining.claim();\n', '\n', '        uint rewardClaimedBalance = IERC20(liquidityMining.rewardToken()).balanceOf(address(this));\n', '        if(rewardClaimedBalance > 0) {\n', '            require(\n', '                IERC20(liquidityMining.rewardToken()).transfer(msg.sender, rewardClaimedBalance),\n', '                "REWARD_OUT"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IERC20Metadata {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function allowance(address src, address dst) external view returns (uint);\n', '\n', '    function approve(address dst, uint amt) external returns (bool);\n', '    function transfer(address dst, uint amt) external returns (bool);\n', '    function transferFrom(\n', '        address src, address dst, uint amt\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface ILiquidityMining {\n', '\n', '    function rewardToken() external view returns(address);\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '    function claim() external;\n', '    function poolPidByAddress(address) external view returns(uint256);\n', '    function isTokenAdded(address _token) external view returns (bool);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']