['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract ComptrollerLike {\n', '    function getAllMarkets() public view returns (address[] memory);\n', '    function allMarkets(uint m) public view returns(address);\n', '    function markets(address cTokenAddress) public view returns (bool, uint, bool);\n', '    function oracle() public view returns(address);\n', '    function claimComp(address holder) public;    \n', '    function compAccrued(address holder) public view returns(uint);\n', '    function getCompAddress() public view returns (address);\n', '    function getAssetsIn(address account) public view returns(address[] memory);\n', '}\n', '\n', 'contract BComptrollerLike {\n', '    function c2b(address ctoken) public view returns(address);\n', '}\n', '\n', 'contract OracleLike {\n', '    function getUnderlyingPrice(address cToken) external view returns (uint);\n', '}\n', '\n', 'contract ERC20Like {\n', '    function decimals() public returns(uint);\n', '    function name() public returns(string memory);\n', '    function balanceOf(address user) public returns(uint);\n', '    function allowance(address owner, address spender) public returns(uint);\n', '}\n', '\n', 'contract CTokenLike {\n', '    function underlying() public returns(address);\n', '    function exchangeRateCurrent() public returns (uint);\n', '    function borrowRatePerBlock() public returns (uint);\n', '    function supplyRatePerBlock() public returns (uint);\n', '    function borrowBalanceCurrent(address account) public returns (uint);\n', '    function totalSupply() public returns (uint);\n', '}\n', '\n', 'contract RegistryLike {\n', '    function getAvatar(address user) public returns(address);\n', '    function avatarLength() public view returns(uint);\n', '    function avatars(uint i) public view returns(address);\n', '    function comptroller() public view returns(address);\n', '    function score() public view returns(address);\n', '}\n', '\n', 'contract JarConnectorLike {\n', '    function getUserScore(address user) external view returns (uint);\n', '    function getGlobalScore() external view returns (uint);    \n', '    function getUserScoreProgressPerSec(address user) external view returns (uint);\n', '}\n', '\n', 'contract ScoreLike {\n', '    function updateIndex(address[] calldata cTokens) external;\n', '}\n', '\n', '\n', 'contract UserInfo {\n', '    struct TvlInfo {\n', '        uint numAccounts;\n', '        uint[] ctokenBalance;\n', '        uint[] ctokenBorrow;\n', '    }\n', '\n', '    function getTvlInfo(address[] memory ctokens, address registry) public returns(TvlInfo memory info) {\n', '        info.ctokenBalance = new uint[](ctokens.length);\n', '        uint numAvatars = RegistryLike(registry).avatarLength();\n', '        for(uint i = 0 ; i < numAvatars ; i++) {\n', '            address avatar = RegistryLike(registry).avatars(i);\n', '            for(uint j = 0 ; j < ctokens.length ; j++) {\n', '                info.ctokenBalance[j] += ERC20Like(ctokens[j]).balanceOf(avatar);\n', '                info.ctokenBorrow[j] += CTokenLike(ctokens[j]).borrowBalanceCurrent(avatar);\n', '            }\n', '        }\n', '        \n', '        info.numAccounts = numAvatars;\n', '    }\n', '}\n', '\n', 'contract FakeBComptroller {\n', '    function c2b(address a) pure public returns(address) { return a;}\n', '}']