['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "./lib/@defiat-crypto/interfaces/IDeFiatPoints.sol";\n', 'import "./interfaces/IAnyStake.sol";\n', 'import "./interfaces/IAnyStakeMigrator.sol";\n', 'import "./interfaces/IAnyStakeVault.sol";\n', 'import "./utils/AnyStakeUtils.sol";\n', '\n', 'contract AnyStake is IAnyStake, AnyStakeUtils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // EVENTS\n', '    event Initialized(address indexed user, address vault);\n', '    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Migrate(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event PoolAdded(address indexed user, uint256 indexed pid, address indexed stakedToken, address lpToken, uint256 allocPoints);\n', '    event MigratorUpdated(address indexed user, address migrator);\n', '    event VaultUpdated(address indexed user, address vault);\n', '    event PoolAllocPointsUpdated(address indexed user, uint256 indexed pid, uint256 allocPoints);\n', '    event PoolVipAmountUpdated(address indexed user, uint256 indexed pid, uint256 vipAmount);\n', '    event PoolStakingFeeUpdated(address indexed user, uint256 indexed pid, uint256 stakingFee);\n', '    event PointStipendUpdated(address indexed user, uint256 stipend);\n', '\n', '    // STRUCTS\n', '    // UserInfo - User metrics, pending reward = (user.amount * pool.DFTPerShare) - user.rewardDebt\n', '    struct UserInfo {\n', '        uint256 amount; // How many tokens the user has provided.\n', '        uint256 rewardDebt; // Token rewards paid out to user\n', '        uint256 lastRewardBlock; // last pool interaction\n', '    }\n', '\n', '    // PoolInfo - Pool metrics\n', '    struct PoolInfo {\n', '        address stakedToken; // Address of staked token contract.\n', '        address lpToken; // uniswap LP token corresponding to the trading pair needed for price calculation\n', '        uint256 totalStaked; // total tokens staked\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. DFTs to distribute per block. (ETH = 2.3M blocks per year)\n', '        uint256 rewardsPerShare; // Accumulated DFTs per share, times 1e18. See below.\n', '        uint256 lastRewardBlock; // last pool update\n', '        uint256 vipAmount; // amount of DFT tokens that must be staked to access the pool\n', '        uint256 stakingFee; // the % withdrawal fee charged. base 1000, 50 = 5%\n', '    }\n', '\n', '    address public migrator; // contract where we may migrate too\n', '    address public vault; // where rewards are stored for distribution\n', '    bool public initialized;\n', '\n', '    PoolInfo[] public poolInfo; // array of AnyStake pools\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping of (pid => (userAddress => userInfo))\n', '    mapping(address => uint256) public pids; // quick mapping for pool ids (staked_token => pid)\n', '\n', '    uint256 public lastRewardBlock; // last block the pool was updated\n', "    uint256 public pendingRewards; // pending DFT rewards awaiting anyone to be distro'd to pools\n", '    uint256 public pointStipend; // amount of DFTP awarded per deposit\n', '    uint256 public totalAllocPoint; // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalBlockDelta; // Total blocks since last update\n', '    uint256 public totalEligiblePools; // Amount of pools eligible for rewards\n', '\n', '    modifier NoReentrant(uint256 pid, address user) {\n', '        require(\n', '            block.number > userInfo[pid][user].lastRewardBlock,\n', '            "AnyStake: Must wait 1 block"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyVault() {\n', '        require(msg.sender == vault, "AnyStake: Only Vault allowed");\n', '        _;\n', '    }\n', '\n', '    modifier activated() {\n', '        require(initialized, "AnyStake: Not initialized yet");\n', '        _;\n', '    }\n', '\n', '    constructor(address _router, address _gov, address _points, address _token) \n', '        public \n', '        AnyStakeUtils(_router, _gov, _points, _token)\n', '    {\n', '        pointStipend = 1e18;\n', '    }\n', '    \n', '    // Initialize pools/rewards after the Vault has been setup\n', '    function initialize(address _vault) public onlyGovernor {\n', '        require(_vault != address(0), "Initalize: Must pass in Vault");\n', '        require(!initialized, "Initialize: AnyStake already initialized");\n', '\n', '        vault = _vault;\n', '        initialized = true;\n', '        emit Initialized(msg.sender, _vault);\n', '    }\n', '\n', '    // Pool - Get any incoming rewards, called during Vault.distributeRewards()\n', '    function addReward(uint256 amount) external override onlyVault {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        pendingRewards = pendingRewards.add(amount);\n', '    }\n', '\n', '    // Pool - Updates the reward variables of the given pool\n', '    function updatePool(uint256 pid) external {\n', '        _updatePool(pid);\n', '    }\n', '\n', '    // Pool - Update internal\n', '    function _updatePool(uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (pool.totalStaked == 0 || pool.lastRewardBlock >= block.number || pool.allocPoint == 0) {\n', '            return;\n', '        }\n', '\n', '        // calculate total reward blocks since last update call\n', '        if (lastRewardBlock < block.number) {\n', '            totalBlockDelta = totalBlockDelta.add(block.number.sub(lastRewardBlock).mul(totalEligiblePools));\n', '            lastRewardBlock = block.number;\n', '        }\n', '\n', '        // calculate rewards, returns if already done this block\n', '        IAnyStakeVault(vault).calculateRewards();        \n', '\n', "        // Calculate pool's share of pending rewards, using blocks since last reward and alloc points\n", '        uint256 poolBlockDelta = block.number.sub(pool.lastRewardBlock);\n', '        uint256 poolRewards = pendingRewards\n', '            .mul(poolBlockDelta)\n', '            .div(totalBlockDelta)\n', '            .mul(pool.allocPoint)\n', '            .div(totalAllocPoint);\n', '        \n', '        // update reward variables\n', '        totalBlockDelta = poolBlockDelta > totalBlockDelta ? 0 : totalBlockDelta.sub(poolBlockDelta);\n', '        pendingRewards = poolRewards > pendingRewards ? 0 : pendingRewards.sub(poolRewards);\n', '        \n', '        // update pool variables\n', '        pool.rewardsPerShare = pool.rewardsPerShare.add(poolRewards.mul(1e18).div(pool.totalStaked));\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Pool - Claim rewards\n', '    function claim(uint256 pid) external override NoReentrant(pid, msg.sender) {\n', '        _updatePool(pid);\n', '        _claim(pid, msg.sender);\n', '    }\n', '\n', '    // Pool - Claim internal, called during deposit() and withdraw()\n', '    function _claim(uint256 _pid, address _user) internal {\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '\n', '        uint256 rewards = pending(_pid, _user);\n', '        if (rewards == 0) {\n', '            return;\n', '        }\n', '\n', '        // update pool / user metrics\n', '        user.rewardDebt = user.amount.mul(poolInfo[_pid].rewardsPerShare).div(1e18);\n', '        user.lastRewardBlock = block.number;\n', '\n', '        // transfer DFT rewards\n', '        IAnyStakeVault(vault).distributeRewards(_user, rewards);\n', '        emit Claim(_user, _pid, rewards);\n', '    }\n', '\n', '    // Pool - Deposit Tokens\n', '    function deposit(uint256 pid, uint256 amount) external override NoReentrant(pid, msg.sender) {\n', '        _deposit(msg.sender, pid, amount);\n', '    }\n', '\n', '    // Pool - Deposit internal\n', '    function _deposit(address _user, uint256 _pid, uint256 _amount) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        \n', '        require(_amount > 0, "Deposit: Cannot deposit zero tokens");\n', '        require(pool.allocPoint > 0, "Deposit: Pool is not active");\n', '        require(pool.vipAmount <= userInfo[0][_user].amount, "Deposit: VIP Only");\n', '\n', '        // add pool to reward calculation if previously no tokens staked\n', '        if (pool.totalStaked == 0) {\n', '            totalEligiblePools = totalEligiblePools.add(1);\n', '            pool.lastRewardBlock = block.number; // reset reward block\n', '\n', '            // begin computing rewards from this block if the first\n', '            if (lastRewardBlock == 0) {\n', '                lastRewardBlock = block.number;\n', '            }\n', '        }\n', '\n', '        // Update and claim rewards\n', '        _updatePool(_pid);\n', '        _claim(_pid, _user);\n', '\n', '        // Get tokens from user, balance check to support Fee-On-Transfer tokens\n', '        uint256 amount = IERC20(pool.stakedToken).balanceOf(address(this));\n', '        IERC20(pool.stakedToken).safeTransferFrom(_user, address(this), _amount);\n', '        amount = IERC20(pool.stakedToken).balanceOf(address(this)).sub(amount);\n', '\n', '        // Finalize, update user metrics\n', '        pool.totalStaked = pool.totalStaked.add(amount);\n', '        user.amount = user.amount.add(amount);\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '        \n', '        // reward user\n', '        IDeFiatPoints(DeFiatPoints).addPoints(_user, IDeFiatPoints(DeFiatPoints).viewTxThreshold(), pointStipend);\n', '\n', '        // Transfer the total amounts from user and update pool user.amount into the AnyStake contract\n', '        emit Deposit(_user, _pid, amount);\n', '    }\n', '\n', '    // Pool - Withdraw staked tokens\n', '    function withdraw(uint256 pid, uint256 amount) external override NoReentrant(pid, msg.sender) {\n', '        _withdraw(msg.sender, pid, amount);\n', '    }\n', '    \n', '    // Pool - Withdraw Internal\n', '    function _withdraw(\n', '        address _user,\n', '        uint256 _pid,\n', '        uint256 _amount\n', '    ) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '\n', '        require(_amount > 0, "Withdraw: amount must be greater than zero");\n', '        require(user.amount >= _amount, "Withdraw: user amount insufficient");\n', '        require(pool.vipAmount <= userInfo[0][_user].amount, "Withdraw: VIP Only");\n', '        \n', '        // claim rewards\n', '        _updatePool(_pid);\n', '        _claim(_pid, _user);\n', '\n', '        // update pool / user metrics\n', '        pool.totalStaked = pool.totalStaked.sub(_amount);\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '\n', '        // reduce eligible pools only if done by user actions\n', '        if (pool.totalStaked == 0 && pool.allocPoint > 0) {\n', '            totalEligiblePools = totalEligiblePools.sub(1);\n', '        }\n', '\n', '        // PID = 0 : DFT-LP\n', '        // PID = 1 : DFTP-LP\n', '        // PID = 2 : weth (price = 1e18)\n', '        // PID > 2 : all other tokens\n', '        // No fee on DFT-ETH, DFTP-ETH pools\n', '        uint256 stakingFeeAmount = _amount.mul(pool.stakingFee).div(1000);\n', '        uint256 remainingUserAmount = _amount.sub(stakingFeeAmount);\n', '\n', '        if(stakingFeeAmount > 0){\n', '            // Send Fee to Vault and buy DFT, balance check to support Fee-On-Transfer tokens\n', '            uint256 balance = IERC20(pool.stakedToken).balanceOf(vault);\n', '            safeTokenTransfer(vault, pool.stakedToken, stakingFeeAmount);\n', '            balance = IERC20(pool.stakedToken).balanceOf(vault);\n', '            IAnyStakeVault(vault).buyDeFiatWithTokens(pool.stakedToken, balance);\n', '        }\n', '\n', '        // withdraw user tokens\n', '        safeTokenTransfer(_user, pool.stakedToken, remainingUserAmount);        \n', '        emit Withdraw(_user, _pid, remainingUserAmount);\n', '    }\n', '\n', '    // Pool - migrate stake to a new contract, should only be called after \n', '    function migrate(uint256 pid) external NoReentrant(pid, msg.sender) {\n', '        _migrate(msg.sender, pid);\n', '    }\n', '\n', '    // Pool - migrate internal\n', '    function _migrate(address _user, uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 balance = user.amount;\n', '\n', '        require(migrator != address(0), "Migrate: No migrator set");\n', '        require(balance > 0, "Migrate: No tokens to migrate");\n', '        require(pool.allocPoint == 0, "Migrate: Pool is still active");\n', '\n', '        _claim(_pid, _user);\n', '\n', '        IERC20(pool.stakedToken).safeApprove(migrator, balance);\n', '        IAnyStakeMigrator(migrator).migrateTo(_user, pool.stakedToken, balance);\n', '        emit Migrate(_user, _pid, balance);\n', '    }\n', '\n', '    // Pool - withdraw all stake and forfeit rewards, skips pool update\n', '    function emergencyWithdraw(uint256 pid) external NoReentrant(pid, msg.sender) {\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '\n', '        require(user.amount > 0, "EmergencyWithdraw: user amount insufficient");\n', '\n', '        uint256 stakingFeeAmount = user.amount.mul(pool.stakingFee).div(1000);\n', '        uint256 remainingUserAmount = user.amount.sub(stakingFeeAmount);\n', '        pool.totalStaked = pool.totalStaked.sub(user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        user.lastRewardBlock = block.number;\n', '\n', '        if (pool.totalStaked == 0) {\n', '            totalEligiblePools = totalEligiblePools.sub(1);\n', '        }\n', '\n', '        safeTokenTransfer(vault, pool.stakedToken, stakingFeeAmount);\n', '        safeTokenTransfer(msg.sender, pool.stakedToken, remainingUserAmount);\n', '        emit EmergencyWithdraw(msg.sender, pid, remainingUserAmount);\n', '    }\n', '\n', '    // View - gets stakedToken price from the Vault\n', '    function getPrice(uint256 pid) external view returns (uint256) {\n', '        address token = poolInfo[pid].stakedToken;\n', '        address lpToken = poolInfo[pid].lpToken;\n', '\n', '        return IAnyStakeVault(vault).getTokenPrice(token, lpToken);\n', '    }\n', '\n', '    // View - Pending DFT Rewards for user in pool\n', '    function pending(uint256 _pid, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        UserInfo memory user = userInfo[_pid][_user];\n', '\n', '        // not sure if this will work with tokens non-1e18 decimals\n', '        return user.amount.mul(pool.rewardsPerShare).div(1e18).sub(user.rewardDebt);\n', '    }\n', '\n', '    // View - View Pool Length\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length; // number of pools (pids)\n', '    }\n', '\n', '    // Governance - Add Multiple Token Pools\n', '    function addPoolBatch(\n', '        address[] calldata tokens,\n', '        address[] calldata lpTokens,\n', '        uint256[] calldata allocPoints,\n', '        uint256[] calldata vipAmounts,\n', '        uint256[] calldata stakingFees\n', '    ) external onlyGovernor {\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            _addPool(tokens[i], lpTokens[i], allocPoints[i], vipAmounts[i], stakingFees[i]);\n', '        }\n', '    }\n', '\n', '    // Governance - Add Single Token Pool\n', '    function addPool(\n', '        address token,\n', '        address lpToken, \n', '        uint256 allocPoint,\n', '        uint256 vipAmount,\n', '        uint256 stakingFee\n', '    ) external onlyGovernor {\n', '        _addPool(token, lpToken, allocPoint, vipAmount, stakingFee);\n', '    }\n', '\n', '    // Governance - Add Token Pool Internal\n', '    function _addPool(\n', '        address stakedToken,\n', '        address lpToken,\n', '        uint256 allocPoint,\n', '        uint256 vipAmount,\n', '        uint256 stakingFee\n', '    ) internal {\n', '        require(pids[stakedToken] == 0, "AddPool: Token pool already added");\n', '\n', '        pids[stakedToken] = poolInfo.length;\n', '        _blacklistedAdminWithdraw[stakedToken] = true; // stakedToken now non-withrawable by admins\n', '        totalAllocPoint = totalAllocPoint.add(allocPoint);\n', '\n', '        // Add new pool\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                stakedToken: stakedToken,\n', '                lpToken: lpToken,\n', '                allocPoint: allocPoint,\n', '                lastRewardBlock: block.number,\n', '                totalStaked: 0,\n', '                rewardsPerShare: 0,\n', '                vipAmount: vipAmount,\n', '                stakingFee: stakingFee\n', '            })\n', '        );\n', '\n', '        emit PoolAdded(msg.sender, pids[stakedToken], stakedToken, lpToken, allocPoint);\n', '    }\n', '\n', '    // Governance - Set Migrator\n', '    function setMigrator(address _migrator) external onlyGovernor {\n', '        require(_migrator != address(0), "SetMigrator: No migrator change");\n', '\n', '        migrator = _migrator;\n', '        emit MigratorUpdated(msg.sender, _migrator);\n', '    }\n', '\n', '    // Governance - Set Vault\n', '    function setVault(address _vault) external onlyGovernor {\n', '        require(_vault != address(0), "SetVault: No migrator change");\n', '\n', '        vault = _vault;\n', '        emit VaultUpdated(msg.sender, vault);\n', '    }\n', '\n', '    // Governance - Set Pool Allocation Points\n', '    function setPoolAllocPoints(uint256 _pid, uint256 _allocPoint) external onlyGovernor {\n', '        require(poolInfo[_pid].allocPoint != _allocPoint, "SetAllocPoints: No points change");\n', '\n', '        if (_allocPoint == 0) {\n', '            totalEligiblePools = totalEligiblePools.sub(1);\n', '        }\n', '\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '        emit PoolAllocPointsUpdated(msg.sender, _pid, _allocPoint);\n', '    }\n', '\n', '    // Governance - Set Pool Charge Fee\n', '    function setPoolVipAmount(uint256 _pid, uint256 _vipAmount) external onlyGovernor {\n', '        require(poolInfo[_pid].vipAmount != _vipAmount, "SetVipAmount: No amount change");\n', '\n', '        poolInfo[_pid].vipAmount = _vipAmount;\n', '        emit PoolVipAmountUpdated(msg.sender, _pid, _vipAmount);\n', '    }\n', '\n', '    // Governance - Set Pool Charge Fee\n', '    function setPoolChargeFee(uint256 _pid, uint256 _stakingFee) external onlyGovernor {\n', '        require(poolInfo[_pid].stakingFee != _stakingFee, "SetStakingFee: No fee change");\n', '\n', '        poolInfo[_pid].stakingFee = _stakingFee;\n', '        emit PoolStakingFeeUpdated(msg.sender, _pid, _stakingFee);\n', '    }\n', '\n', '    // Governance - Set Pool Allocation Points\n', '    function setPointStipend(uint256 _pointStipend) external onlyGovernor {\n', '        require(_pointStipend != pointStipend, "SetStipend: No stipend change");\n', '\n', '        pointStipend = _pointStipend;\n', '        emit PointStipendUpdated(msg.sender, pointStipend);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "./lib/@defiat-crypto/interfaces/IDeFiatPoints.sol";\n', 'import "./interfaces/IAnyStake.sol";\n', 'import "./interfaces/IAnyStakeMigrator.sol";\n', 'import "./interfaces/IAnyStakeVault.sol";\n', 'import "./utils/AnyStakeUtils.sol";\n', 'import "./AnyStake.sol";\n', '\n', 'contract AnyStakeV2 is IAnyStakeMigrator, IAnyStake, AnyStakeUtils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // EVENTS\n', '    event Initialized(address indexed user, address vault);\n', '    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event ClaimAll(address indexed user, uint256 amount);\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Migrate(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event PoolAdded(address indexed user, uint256 indexed pid, address indexed stakedToken, address lpToken, uint256 allocPoints);\n', '    event MigratorUpdated(address indexed user, address migrator);\n', '    event VaultUpdated(address indexed user, address vault);\n', '    event PoolAllocPointsUpdated(address indexed user, uint256 indexed pid, uint256 allocPoints);\n', '    event PoolVipAmountUpdated(address indexed user, uint256 indexed pid, uint256 vipAmount);\n', '    event PoolStakingFeeUpdated(address indexed user, uint256 indexed pid, uint256 stakingFee);\n', '    event PointStipendUpdated(address indexed user, uint256 stipend);\n', '\n', '    // STRUCTS\n', '    // UserInfo - User metrics, pending reward = (user.amount * pool.DFTPerShare) - user.rewardDebt\n', '    struct UserInfo {\n', '        uint256 amount; // How many tokens the user has provided.\n', '        uint256 rewardDebt; // Token rewards paid out to user\n', '        uint256 lastRewardBlock; // last pool interaction\n', '    }\n', '\n', '    // PoolInfo - Pool metrics\n', '    struct PoolInfo {\n', '        address stakedToken; // Address of staked token contract.\n', '        address lpToken; // uniswap LP token corresponding to the trading pair needed for price calculation\n', '        uint256 totalStaked; // total tokens staked\n', '        uint256 allocPoint; // How many allocation points assigned to this pool. DFTs to distribute per block. (ETH = 2.3M blocks per year)\n', '        uint256 rewardsPerShare; // Accumulated DFTs per share, times 1e18. See below.\n', '        uint256 lastRewardBlock; // last pool update\n', '        uint256 vipAmount; // amount of DFT tokens that must be staked to access the pool\n', '        uint256 stakingFee; // the % withdrawal fee charged. base 1000, 50 = 5%\n', '        uint256 rewardDebt; // rewards paid out to the pool\n', '    }\n', '\n', '    address public anystake; // AnyStake V1 contract\n', '    address public migrator; // contract where we may migrate too\n', '    address public vault; // where rewards are stored for distribution\n', '\n', '    PoolInfo[] public poolInfo; // array of AnyStake pools\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping of (pid => (userAddress => userInfo))\n', '    mapping(address => uint256) public pids; // quick mapping for pool ids (staked_token => pid)\n', '\n', '    uint256 public pointStipend; // amount of DFTP awarded per deposit\n', '    uint256 public rewardsPerAllocPoint; // rewards per pool allocPoint, times 1e18 to maintain precision\n', '    uint256 public totalAllocPoint; // Total allocation points. Must be the sum of all allocation points in all pools.\n', '\n', '    modifier NoReentrant(uint256 pid, address user) {\n', '        require(\n', '            block.number > userInfo[pid][user].lastRewardBlock,\n', '            "AnyStake: Must wait 1 block"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyAnyStake {\n', '        require(msg.sender == anystake, "AnyStake: Only previous AnyStake allowed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyVault() {\n', '        require(msg.sender == vault, "AnyStake: Only Vault allowed");\n', '        _;\n', '    }\n', '\n', '    constructor(address _anystake, address _router, address _gov, address _points, address _token) \n', '        public \n', '        AnyStakeUtils(_router, _gov, _points, _token)\n', '    {\n', '        anystake = _anystake;\n', '        pointStipend = 1e18;\n', '    }\n', '\n', '    // Pool - Get any incoming rewards, called during Vault.distributeRewards()\n', '    function addReward(uint256 amount) external override onlyVault {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        rewardsPerAllocPoint = rewardsPerAllocPoint.add(amount.mul(1e18).div(totalAllocPoint));\n', '    }\n', '\n', '    // Pool - Updates the reward variables of the given pool\n', '    function updatePool(uint256 pid) external {\n', '        _updatePool(pid);\n', '    }\n', '\n', '    // Pool - Update internal\n', '    function _updatePool(uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        if (pool.totalStaked == 0 || pool.lastRewardBlock >= block.number || pool.allocPoint == 0) {\n', '            return;\n', '        }\n', '\n', '        // calculate rewards, returns if already done this block\n', '        IAnyStakeVault(vault).calculateRewards();     \n', '\n', "        // Calculate pool's share of pending rewards \n", '        uint256 poolRewards = pendingPool(_pid);\n', '        \n', '        // update pool variables\n', '        if (poolRewards > 0) {\n', '            pool.rewardsPerShare = pool.rewardsPerShare.add(poolRewards.mul(1e18).div(pool.totalStaked));\n', '            pool.rewardDebt = pool.rewardDebt.add(poolRewards);\n', '        }\n', '        \n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Pool - Update all pool reward variables\n', '    // NOTE: Must call before any change to totalAllocPoint (addPool, updatePoolAllocPoints)\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; pid++) {\n', '            _updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Pool - Claim rewards\n', '    function claim(uint256 pid) external override NoReentrant(pid, msg.sender) {\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '\n', '        _updatePool(pid);\n', '        _claim(pid, msg.sender);\n', '\n', '        // set user metrics, reward block\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '        user.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Pool - Claim internal, called during deposit() and withdraw()\n', '    function _claim(uint256 _pid, address _user) internal {\n', '        uint256 rewards = pending(_pid, _user);\n', '        if (rewards == 0) {\n', '            return;\n', '        }\n', '\n', '        // transfer DFT rewards from Vault\n', '        IAnyStakeVault(vault).distributeRewards(_user, rewards);\n', '        emit Claim(_user, _pid, rewards);\n', '    }\n', '\n', '    // Pool - Claim all rewards, only perform one transfer to save gas\n', '    function claimAll() external {\n', '        uint256 totalClaimable;\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; pid++) {\n', '            PoolInfo storage pool = poolInfo[pid];\n', '            UserInfo storage user = userInfo[pid][msg.sender];\n', '            if (user.lastRewardBlock < block.number && user.amount > 0) {\n', '                _updatePool(pid);\n', '                uint256 rewards = pending(pid, msg.sender);\n', '                if (rewards > 0) {\n', '                    totalClaimable = totalClaimable.add(rewards);\n', '                    user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '                    user.lastRewardBlock = block.number;\n', '                    emit Claim(msg.sender, pid, rewards);\n', '                }\n', '            }\n', '        }\n', '\n', '        if (totalClaimable > 0) {\n', '            IAnyStakeVault(vault).distributeRewards(msg.sender, totalClaimable);\n', '            emit ClaimAll(msg.sender, totalClaimable);\n', '        }\n', '    }\n', '\n', '    // Pool - Deposit Tokens\n', '    function deposit(uint256 pid, uint256 amount) external override NoReentrant(pid, msg.sender) {\n', '        _deposit(msg.sender, pid, amount);\n', '    }\n', '\n', '    // Pool - Deposit internal\n', '    function _deposit(address _user, uint256 _pid, uint256 _amount) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        \n', '        require(_amount > 0, "Deposit: Cannot deposit zero tokens");\n', '        require(pool.allocPoint > 0, "Deposit: Pool is not active");\n', '        require(pool.vipAmount <= userInfo[0][_user].amount, "Deposit: VIP Only");\n', '\n', '        // Update and claim rewards\n', '        _updatePool(_pid);\n', '        _claim(_pid, _user);\n', '\n', '        // Get tokens from user, balance check to support Fee-On-Transfer tokens\n', '        uint256 amountBefore = IERC20(pool.stakedToken).balanceOf(address(this));\n', '        IERC20(pool.stakedToken).safeTransferFrom(_user, address(this), _amount);\n', '        uint256 amountAfter = IERC20(pool.stakedToken).balanceOf(address(this));\n', '        uint256 amount = amountAfter.sub(amountBefore);\n', '\n', '        // Finalize, update user metrics\n', '        pool.totalStaked = pool.totalStaked.add(amount);\n', '        user.amount = user.amount.add(amount);\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '        user.lastRewardBlock = block.number;\n', '        \n', '        // reward user\n', '        IDeFiatPoints(DeFiatPoints).addPoints(_user, IDeFiatPoints(DeFiatPoints).viewTxThreshold(), pointStipend);\n', '\n', '        // Transfer the total amounts from user and update pool user.amount into the AnyStake contract\n', '        emit Deposit(_user, _pid, amount);\n', '    }\n', '\n', '    // Pool - Withdraw staked tokens\n', '    function withdraw(uint256 pid, uint256 amount) external override NoReentrant(pid, msg.sender) {\n', '        _withdraw(msg.sender, pid, amount);\n', '    }\n', '    \n', '    // Pool - Withdraw Internal\n', '    function _withdraw(\n', '        address _user,\n', '        uint256 _pid,\n', '        uint256 _amount\n', '    ) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '\n', '        require(_amount > 0, "Withdraw: amount must be greater than zero");\n', '        require(user.amount >= _amount, "Withdraw: user amount insufficient");\n', '        require(pool.vipAmount <= userInfo[0][_user].amount, "Withdraw: VIP Only");\n', '        \n', '        // claim rewards\n', '        _updatePool(_pid);\n', '        _claim(_pid, _user);\n', '\n', '        // update pool / user metrics\n', '        pool.totalStaked = pool.totalStaked.sub(_amount);\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '        user.lastRewardBlock = block.number;\n', '\n', '        // find the staking fee amount\n', '        uint256 stakingFeeAmount = _amount.mul(pool.stakingFee).div(1000);\n', "        // get user's remaining shares after fee\n", '        uint256 remainingUserAmount = _amount.sub(stakingFeeAmount);\n', '\n', '        if(stakingFeeAmount > 0){\n', '            // Send Fee to Vault and buy DFT, balance check to support Fee-On-Transfer tokens\n', '            uint256 balanceBefore = IERC20(pool.stakedToken).balanceOf(vault);\n', '            safeTokenTransfer(vault, pool.stakedToken, stakingFeeAmount);\n', '            uint256 balanceAfter = IERC20(pool.stakedToken).balanceOf(vault);\n', '            uint256 balance = balanceAfter.sub(balanceBefore);\n', '            // perform the buyback\n', '            IAnyStakeVault(vault).buyDeFiatWithTokens(pool.stakedToken, balance);\n', '        }\n', '\n', '        // withdraw user tokens\n', '        safeTokenTransfer(_user, pool.stakedToken, remainingUserAmount);        \n', '        emit Withdraw(_user, _pid, remainingUserAmount);\n', '    }\n', '\n', '    // Pool - migrate stake to a new contract, should only be called after \n', '    function migrate(uint256 pid) external NoReentrant(pid, msg.sender) {\n', '        _migrate(msg.sender, pid);\n', '    }\n', '\n', '    // Pool - migrate internal\n', '    function _migrate(address _user, uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 balance = user.amount;\n', '\n', '        require(migrator != address(0), "Migrate: No migrator set");\n', '        require(balance > 0, "Migrate: No tokens to migrate");\n', '        require(pool.allocPoint == 0, "Migrate: Pool is still active");\n', '\n', '        _claim(_pid, _user);\n', '\n', '        pool.totalStaked = pool.totalStaked.sub(balance);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        user.lastRewardBlock = block.number;\n', '\n', '        IERC20(pool.stakedToken).safeApprove(migrator, balance);\n', '        IAnyStakeMigrator(migrator).migrateTo(_user, pool.stakedToken, balance);\n', '        emit Migrate(_user, _pid, balance);\n', '    }\n', '\n', '    function migrateTo(address _user, address _token, uint256 _amount) \n', '        external\n', '        override\n', '        onlyAnyStake\n', '    {\n', '        uint256 pid = pids[_token];\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        UserInfo storage user = userInfo[pid][_user];\n', '\n', '        _claim(pid, _user);\n', '\n', '        // transfer user stake from AnyStake, do the balance check\n', '        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n', '        IERC20(_token).transferFrom(anystake, address(this), _amount);\n', '        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n', '        uint256 userDeposit = balanceAfter.sub(balanceBefore);\n', '\n', '        // update user / pool metrics\n', '        pool.totalStaked = pool.totalStaked.add(userDeposit);\n', '        user.amount = user.amount.add(userDeposit);\n', '        user.rewardDebt = user.amount.mul(pool.rewardsPerShare).div(1e18);\n', '        user.lastRewardBlock = block.number;\n', '\n', '        IDeFiatPoints(DeFiatPoints).addPoints(_user, IDeFiatPoints(DeFiatPoints).viewTxThreshold(), pointStipend);\n', '    }\n', '\n', '    // Pool - withdraw all stake and forfeit rewards, skips pool update\n', '    function emergencyWithdraw(uint256 pid) external NoReentrant(pid, msg.sender) {\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        UserInfo storage user = userInfo[pid][msg.sender];\n', '        require(user.amount > 0, "EmergencyWithdraw: user amount insufficient");\n', '\n', '        // find the fee amount and remaining user share\n', '        uint256 stakingFeeAmount = user.amount.mul(pool.stakingFee).div(1000);\n', '        uint256 remainingUserAmount = user.amount.sub(stakingFeeAmount);\n', '\n', '        // update pool / user metrics\n', '        pool.totalStaked = pool.totalStaked.sub(user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '        user.lastRewardBlock = block.number;\n', '\n', '        // transfer vault the fee for admins to perform buyback, send user share\n', '        safeTokenTransfer(vault, pool.stakedToken, stakingFeeAmount);\n', '        safeTokenTransfer(msg.sender, pool.stakedToken, remainingUserAmount);\n', '        emit EmergencyWithdraw(msg.sender, pid, remainingUserAmount);\n', '    }\n', '\n', '    // View - gets stakedToken price from the Vault\n', '    function getPrice(uint256 pid) external view returns (uint256) {\n', '        address token = poolInfo[pid].stakedToken;\n', '        address lpToken = poolInfo[pid].lpToken;\n', '\n', '        return IAnyStakeVault(vault).getTokenPrice(token, lpToken);\n', '    }\n', '\n', '    // View - Pending DFT Rewards for user in pool\n', '    function pending(uint256 _pid, address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '\n', '        return user.amount.mul(pool.rewardsPerShare).div(1e18).sub(user.rewardDebt);\n', '    }\n', '\n', '    // View - Pending DFT Rewards for a given pool\n', '    function pendingPool(uint256 _pid)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        return rewardsPerAllocPoint.mul(pool.allocPoint).div(1e18).sub(pool.rewardDebt);\n', '    }\n', '\n', '    // View - View Pool Length\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length; // number of pools (pids)\n', '    }\n', '\n', '    // Governance - Add Multiple Token Pools\n', '    function addPoolBatch(\n', '        address[] calldata tokens,\n', '        address[] calldata lpTokens,\n', '        uint256[] calldata allocPoints,\n', '        uint256[] calldata vipAmounts,\n', '        uint256[] calldata stakingFees\n', '    ) external onlyGovernor {\n', '        massUpdatePools();\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            _addPool(tokens[i], lpTokens[i], allocPoints[i], vipAmounts[i], stakingFees[i]);\n', '        }\n', '    }\n', '\n', '    // Governance - Add Single Token Pool\n', '    function addPool(\n', '        address token,\n', '        address lpToken, \n', '        uint256 allocPoint,\n', '        uint256 vipAmount,\n', '        uint256 stakingFee\n', '    ) external onlyGovernor {\n', '        massUpdatePools();\n', '        _addPool(token, lpToken, allocPoint, vipAmount, stakingFee);\n', '    }\n', '\n', '    // Governance - Add Token Pool Internal\n', '    function _addPool(\n', '        address stakedToken,\n', '        address lpToken,\n', '        uint256 allocPoint,\n', '        uint256 vipAmount,\n', '        uint256 stakingFee\n', '    ) internal {\n', '        require(pids[stakedToken] == 0, "AddPool: Token pool already added");\n', '\n', '        // add token to pids\n', '        pids[stakedToken] = poolInfo.length;\n', '        // stakedToken now non-withrawable by admins\n', '        _blacklistedAdminWithdraw[stakedToken] = true;\n', '        // update total pool points\n', '        totalAllocPoint = totalAllocPoint.add(allocPoint);\n', '        // find reward debt for the pool\n', '        uint256 rewardDebt = rewardsPerAllocPoint.mul(allocPoint).div(1e18);\n', '\n', '        // Add new pool\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                stakedToken: stakedToken,\n', '                lpToken: lpToken,\n', '                allocPoint: allocPoint,\n', '                lastRewardBlock: block.number,\n', '                totalStaked: 0,\n', '                rewardsPerShare: 0,\n', '                vipAmount: vipAmount,\n', '                stakingFee: stakingFee,\n', '                rewardDebt: rewardDebt\n', '            })\n', '        );\n', '\n', '        emit PoolAdded(msg.sender, pids[stakedToken], stakedToken, lpToken, allocPoint);\n', '    }\n', '\n', '    // Governance - Set Migrator\n', '    function setMigrator(address _migrator) external onlyGovernor {\n', '        require(_migrator != address(0), "SetMigrator: No migrator change");\n', '\n', '        migrator = _migrator;\n', '        emit MigratorUpdated(msg.sender, _migrator);\n', '    }\n', '\n', '    // Governance - Set Vault\n', '    function setVault(address _vault) external onlyGovernor {\n', '        require(_vault != address(0), "SetVault: No migrator change");\n', '\n', '        vault = _vault;\n', '        emit VaultUpdated(msg.sender, vault);\n', '    }\n', '\n', '    // Governance - Set Pool Allocation Points, updates all pools to maintain reward distribution\n', '    function setPoolAllocPoints(uint256[] calldata _pids, uint256[] calldata _allocPoints) external onlyGovernor {\n', '        massUpdatePools();\n', '\n', '        for (uint256 i = 0; i < _pids.length; i++) {\n', '            _setPoolAllocPoints(_pids[i], _allocPoints[i]);\n', '        }\n', '    }\n', '\n', '    // Governance - Internal, set one pool alloc points\n', '    function _setPoolAllocPoints(uint256 _pid, uint256 _allocPoint) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.allocPoint != _allocPoint, "SetAllocPoints: No points change");\n', '\n', '        // update alloc points\n', '        totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\n', '        pool.allocPoint = _allocPoint;\n', '        emit PoolAllocPointsUpdated(msg.sender, _pid, _allocPoint);\n', '    }\n', '\n', '    // Governance - Set Pool VIP Amount, DFT staking requirement to enter the pool\n', '    function setPoolVipAmount(uint256[] calldata _pids, uint256[] calldata _vipAmounts) external onlyGovernor {\n', '        for (uint256 i = 0; i < _pids.length; i++) {\n', '            _setPoolVipAmount(_pids[i], _vipAmounts[i]);\n', '        }\n', '    }\n', '\n', '    // Governance - Internal, Set Pool VIP Amount\n', '    function _setPoolVipAmount(uint256 _pid, uint256 _vipAmount) internal {\n', '        require(poolInfo[_pid].vipAmount != _vipAmount, "SetVipAmount: No amount change");\n', '\n', '        poolInfo[_pid].vipAmount = _vipAmount;\n', '        emit PoolVipAmountUpdated(msg.sender, _pid, _vipAmount);\n', '    }\n', '\n', '    // Governance - Set Pool Staking Fee, % of basis taken on withdrawal to buyback DFT\n', '    function setPoolStakingFee(uint256[] calldata _pids, uint256[] calldata _stakingFees) external onlyGovernor {\n', '        for (uint256 i = 0; i < _pids.length; i++) {\n', '            _setPoolStakingFee(_pids[i], _stakingFees[i]);\n', '        }\n', '    }\n', '\n', '    // Governance - Internal, Set Pool Fee\n', '    function _setPoolStakingFee(uint256 _pid, uint256 _stakingFee) internal {\n', '        require(_stakingFee != poolInfo[_pid].stakingFee, "SetStakingFee: No fee change");\n', '        require(_stakingFee <= 1000, "SetFee: Fee cannot exceed 100%");\n', '\n', '        poolInfo[_pid].stakingFee = _stakingFee;\n', '        emit PoolStakingFeeUpdated(msg.sender, _pid, _stakingFee);\n', '    }\n', '\n', '    // Governance - Set Point Stipend for the contract\n', '    function setPointStipend(uint256 _pointStipend) external onlyGovernor {\n', '        require(_pointStipend != pointStipend, "SetStipend: No stipend change");\n', '\n', '        pointStipend = _pointStipend;\n', '        emit PointStipendUpdated(msg.sender, pointStipend);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStake {\n', '    function addReward(uint256 amount) external;\n', '    function claim(uint256 pid) external;\n', '    function deposit(uint256 pid, uint256 amount) external;\n', '    function withdraw(uint256 pid, uint256 amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStakeMigrator {\n', '    function migrateTo(address user, address token, uint256 amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStakeVault {\n', '    function buyDeFiatWithTokens(address token, uint256 amount) external;\n', '    function buyPointsWithTokens(address token, uint256 amount) external;\n', '\n', '    function calculateRewards() external;\n', '    function distributeRewards(address recipient, uint256 amount) external;\n', '    function getTokenPrice(address token, address lpToken) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IDeFiatGov {\n', '    function mastermind() external view returns (address);\n', '    function viewActorLevelOf(address _address) external view returns (uint256);\n', '    function viewFeeDestination() external view returns (address);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewBurnRate() external view returns (uint256);\n', '    function viewFeeRate() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IDeFiatPoints {\n', '    function viewDiscountOf(address _address) external view returns (uint256);\n', '    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\n', '    function discountPointsNeeded(uint256 _tranche) external view returns (uint256 pointsNeeded);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewRedirection(address _address) external view returns (bool);\n', '\n', '    function overrideLoyaltyPoints(address _address, uint256 _points) external;\n', '    function addPoints(address _address, uint256 _txSize, uint256 _points) external;\n', '    function burn(uint256 _amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "./DeFiatUtils.sol";\n', 'import "../interfaces/IDeFiatGov.sol";\n', '\n', 'abstract contract DeFiatGovernedUtils is DeFiatUtils {\n', '    event GovernanceUpdated(address indexed user, address governance);\n', '\n', '    address public governance;\n', '\n', '    modifier onlyMastermind {\n', '        require(\n', '            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\n', '            "Gov: Only Mastermind"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernor {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\n', '            "Gov: Only Governors"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyPartner {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\n', '            "Gov: Only Partners"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function _setGovernance(address _governance) internal {\n', '        require(_governance != governance, "SetGovernance: No governance change");\n', '\n', '        governance = _governance;\n', '        emit GovernanceUpdated(msg.sender, governance);\n', '    }\n', '\n', '    function setGovernance(address _governance) external onlyGovernor {\n', '        _setGovernance(_governance);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "../../@openzeppelin/token/ERC20/IERC20.sol";\n', 'import "../../@openzeppelin/access/Ownable.sol";\n', '\n', 'abstract contract DeFiatUtils is Ownable {\n', '    event TokenSweep(address indexed user, address indexed token, uint256 amount);\n', '\n', '    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\n', '    function sweep(address token) public virtual onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        require(amount > 0, "Sweep: No token balance");\n', '\n', '        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\n', '\n', '        if (address(this).balance > 0) {\n', '            payable(msg.sender).transfer(address(this).balance);\n', '        }\n', '\n', '        emit TokenSweep(msg.sender, token, amount);\n', '    }\n', '\n', '    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\n', '    function kill() external onlyOwner {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    // Standard\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', 'import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "../lib/@defiat-crypto/utils/DeFiatUtils.sol";\n', 'import "../lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol";\n', 'import "../lib/@openzeppelin/token/ERC20/SafeERC20.sol";\n', 'import "../lib/@uniswap/interfaces/IUniswapV2Factory.sol";\n', 'import "../lib/@uniswap/interfaces/IUniswapV2Router02.sol";\n', '\n', 'abstract contract AnyStakeUtils is DeFiatGovernedUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    event PointsUpdated(address indexed user, address points);\n', '    event TokenUpdated(address indexed user, address token);\n', '    event UniswapUpdated(address indexed user, address router, address weth, address factory);\n', '  \n', '    address public router;\n', '    address public factory;\n', '    address public weth;\n', '    address public DeFiatToken;\n', '    address public DeFiatPoints;\n', '    address public DeFiatTokenLp;\n', '    address public DeFiatPointsLp;\n', '\n', '    mapping (address => bool) internal _blacklistedAdminWithdraw;\n', '\n', '    constructor(address _router, address _gov, address _points, address _token) public {\n', '        _setGovernance(_gov);\n', '\n', '        router = _router;\n', '        DeFiatPoints = _points;\n', '        DeFiatToken = _token;\n', '         \n', '        weth = IUniswapV2Router02(router).WETH();\n', '        factory = IUniswapV2Router02(router).factory();\n', '        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\n', '        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\n', '    }\n', '\n', '    function sweep(address _token) public override onlyOwner {\n', '        require(!_blacklistedAdminWithdraw[_token], "Sweep: Cannot withdraw blacklisted token");\n', '\n', '        DeFiatUtils.sweep(_token);\n', '    }\n', '\n', '    function isBlacklistedAdminWithdraw(address _token)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _blacklistedAdminWithdraw[_token];\n', '    }\n', '\n', '    // Method to avoid underflow on token transfers\n', '    function safeTokenTransfer(address user, address token, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\n', '        if (amount > tokenBalance) {\n', '            IERC20(token).safeTransfer(user, tokenBalance);\n', '        } else {\n', '            IERC20(token).safeTransfer(user, amount);\n', '        }\n', '    }\n', '\n', '    function setToken(address _token) external onlyGovernor {\n', '        require(_token != DeFiatToken, "SetToken: No token change");\n', '        require(_token != address(0), "SetToken: Must set token value");\n', '\n', '        DeFiatToken = _token;\n', '        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\n', '        emit TokenUpdated(msg.sender, DeFiatToken);\n', '    }\n', '\n', '    function setPoints(address _points) external onlyGovernor {\n', '        require(_points != DeFiatPoints, "SetPoints: No points change");\n', '        require(_points != address(0), "SetPoints: Must set points value");\n', '\n', '        DeFiatPoints = _points;\n', '        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\n', '        emit PointsUpdated(msg.sender, DeFiatPoints);\n', '    }\n', '\n', '    function setUniswap(address _router) external onlyGovernor {\n', '        require(_router != router, "SetUniswap: No uniswap change");\n', '        require(_router != address(0), "SetUniswap: Must set uniswap value");\n', '\n', '        router = _router;\n', '        weth = IUniswapV2Router02(router).WETH();\n', '        factory = IUniswapV2Router02(router).factory();\n', '        emit UniswapUpdated(msg.sender, router, weth, factory);\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 150\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']