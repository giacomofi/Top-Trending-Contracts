['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-07-26\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ManagerLike {\n', '    function ilks(uint) external view returns (bytes32);\n', '    function owns(uint) external view returns (address);\n', '    function urns(uint) external view returns (address);\n', '    function vat() external view returns (address);\n', '}\n', '\n', 'interface CdpsLike {\n', '    function getCdpsAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\n', '}\n', '\n', 'interface VatLike {\n', '    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n', '    function dai(address) external view returns (uint);\n', '    function urns(bytes32, address) external view returns (uint, uint);\n', '    function gem(bytes32, address) external view returns (uint);\n', '}\n', '\n', 'interface JugLike {\n', '    function ilks(bytes32) external view returns (uint, uint);\n', '    function base() external view returns (uint);\n', '}\n', '\n', 'interface PotLike {\n', '    function dsr() external view returns (uint);\n', '    function pie(address) external view returns (uint);\n', '    function chi() external view returns (uint);\n', '}\n', '\n', 'interface SpotLike {\n', '    function ilks(bytes32) external view returns (PipLike, uint);\n', '}\n', '\n', 'interface PipLike {\n', '    function peek() external view returns (bytes32, bool);\n', '}\n', '\n', 'interface InstaMcdAddress {\n', '    function manager() external view returns (address);\n', '    function vat() external view returns (address);\n', '    function jug() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function pot() external view returns (address);\n', '    function getCdps() external view returns (address);\n', '}\n', '\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        z = x - y <= x ? x - y : 0;\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Helpers is DSMath {\n', '    /**\n', '     * @dev get MakerDAO MCD Address contract\n', '     */\n', '    function getMcdAddresses() public pure returns (address) {\n', '        return 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\n', '    }\n', '\n', '    struct VaultData {\n', '        uint id;\n', '        bytes32 colType;\n', '        uint collateral;\n', '        uint art;\n', '        address owner;\n', '    }\n', '\n', '    struct VaultIds {\n', '        address owner;\n', '        uint[] id;\n', '    }\n', '\n', '    struct ColInfo {\n', '        uint price;\n', '        uint rate;\n', '        bytes32 ilk;\n', '    }\n', '\n', '    /**\n', '     * @dev Convert String to bytes32.\n', '    */\n', '    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n', '        require(bytes(str).length != 0, "String-Empty");\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '\n', '    function getColPrice(bytes32 ilk) internal view returns (uint price, uint rate) {\n', '        address spot = InstaMcdAddress(getMcdAddresses()).spot();\n', '        address vat = InstaMcdAddress(getMcdAddresses()).vat();\n', '        (, uint mat) = SpotLike(spot).ilks(ilk);\n', '        (,uint _rate,uint spotPrice,,) = VatLike(vat).ilks(ilk);\n', '        rate = _rate;\n', '        price = rmul(mat, spotPrice);\n', '    }\n', '}\n', '\n', '\n', 'contract VaultResolver is Helpers {\n', '    function getVaultByIds(uint[] calldata ids) external view returns (VaultData[] memory) {\n', '        address manager = InstaMcdAddress(getMcdAddresses()).manager();\n', '        VatLike vat = VatLike(ManagerLike(manager).vat());\n', '        uint len = ids.length;\n', '        VaultData[] memory vaults = new VaultData[](len);\n', '        for (uint i = 0; i < len; i++) {\n', '            address urn = ManagerLike(manager).urns(ids[i]);\n', '            bytes32 ilk = ManagerLike(manager).ilks(ids[i]);\n', '            (uint ink, uint art) = vat.urns(ilk, urn);\n', '            vaults[i] = VaultData(\n', '                ids[i],\n', '                ilk,\n', '                ink,\n', '                art,\n', '                ManagerLike(manager).owns(ids[i])\n', '            );\n', '        }\n', '        return vaults;\n', '    }\n', '\n', '\n', '    function getIds(address[] calldata owners) external view returns (VaultIds[] memory) {\n', '        address manager = InstaMcdAddress(getMcdAddresses()).manager();\n', '        address cdpManger = InstaMcdAddress(getMcdAddresses()).getCdps();\n', '        uint len = owners.length;\n', '        VaultIds[] memory vaultIds = new VaultIds[](len);\n', '        for (uint i = 0; i < len; i++) {\n', '            (uint[] memory ids,,) = CdpsLike(cdpManger).getCdpsAsc(manager, owners[i]);\n', '            vaultIds[i] = VaultIds(\n', '                owners[i],\n', '                ids\n', '            );\n', '        }\n', '        return vaultIds;\n', '    }\n', '\n', '    function getColInfo(string[] memory name) public view returns (ColInfo[] memory) {\n', '        ColInfo[] memory colInfo = new ColInfo[](name.length);\n', '\n', '        for (uint i = 0; i < name.length; i++) {\n', '            bytes32 ilk = stringToBytes32(name[i]);\n', '            (uint price, uint rate) = getColPrice(ilk);\n', '            colInfo[i] = ColInfo(\n', '                price,\n', '                rate,\n', '                ilk\n', '            );\n', '        }\n', '        return colInfo;\n', '    }\n', '\n', '}']