['// SPDX-License-Identifier: MIT\n', "// Degen'$ Farm: Collectible NFT game (https://degens.farm)\n", 'pragma solidity ^0.7.4;\n', '\n', 'import "./SafeMath.sol";\n', '\n', 'interface Dung {\n', '    function mint(address to, uint256 amount) external;\n', '}\n', '\n', 'interface Creatures {\n', '    enum AnimalType {\n', '        Cow, Horse, Rabbit, Chicken, Pig, Cat, Dog, Goose, Goat, Sheep,\n', '        Snake, Fish, Frog, Worm, Lama, Mouse, Camel, Donkey, Bee, Duck,\n', '        GenesisEgg // 20\n', '    }\n', '    enum Rarity     {\n', '        Normie, // 0\n', '        Chad,   // 1\n', '        Degen,  // 2\n', '        Unique // 3\n', '    }\n', '\n', '    function animals(uint256 tokenId) external view returns (AnimalType atype,\n', '        Rarity     rarity,\n', '        uint32     index,\n', '        uint64     birthday,\n', '        string   memory  name);\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '}\n', '\n', 'contract DungGathering {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint public constant NORMIE_DUNG_PER_SEC =   465_000_000_000 ether;\n', '    uint public constant CHAD_DUNG_PER_SEC   = 1_400_000_000_000 ether;\n', '    uint public constant DEGEN_DUNG_PER_SEC  = 7_000_000_000_000 ether;\n', '\n', '    mapping(uint => uint) public lastGatherTime;\n', '\n', '    Creatures public creatures;\n', '    Dung public dung;\n', '\n', '    constructor (Creatures _creatures, Dung _dung) {\n', '        creatures = _creatures;\n', '        dung = _dung;\n', '    }\n', '\n', '    function gather(uint creatureId) external {\n', '        address owner = creatures.ownerOf(creatureId);\n', '        require(owner == msg.sender, "Wrong creature owner");\n', '        uint unclaimedDung = getUnclaimedDung(creatureId);\n', '        markCreatureAsClaimed(creatureId);\n', '\n', '        dung.mint(msg.sender, unclaimedDung);\n', '    }\n', '\n', '    function gatherBatch(uint[] calldata creatureIds) external {\n', '        uint unclaimedDung = 0;\n', '        for (uint i = 0; i < creatureIds.length; i++) {\n', '            uint creatureId = creatureIds[i];\n', '            address owner = creatures.ownerOf(creatureId);\n', '            require(owner == msg.sender, "Wrong creature owner");\n', '            unclaimedDung = unclaimedDung.add(getUnclaimedDung(creatureId));\n', '            markCreatureAsClaimed(creatureId);\n', '        }\n', '        dung.mint(msg.sender, unclaimedDung);\n', '    }\n', '\n', '    function markCreatureAsClaimed(uint creatureId) internal {\n', '        lastGatherTime[creatureId] = block.timestamp;\n', '    }\n', '\n', '    function getUnclaimedDung(uint creatureId) public view returns (uint) {\n', '        uint lastTime = lastGatherTime[creatureId];\n', '\n', '        (, Creatures.Rarity rarity, , uint64 birthday,) = creatures.animals(creatureId);\n', '\n', '        if (lastTime == 0) {\n', '            if (birthday == 0) {\n', '                // creature does not exist\n', '                return 0;\n', '            }\n', '            lastTime = birthday;\n', '        }\n', '        uint timeDelta = block.timestamp - lastTime;\n', '        uint dung_reward_per_sec;\n', '\n', '        if (rarity == Creatures.Rarity.Normie) dung_reward_per_sec = NORMIE_DUNG_PER_SEC;\n', '        else if (rarity == Creatures.Rarity.Chad) dung_reward_per_sec = CHAD_DUNG_PER_SEC;\n', '        else if (rarity == Creatures.Rarity.Degen) dung_reward_per_sec = DEGEN_DUNG_PER_SEC;\n', '        else dung_reward_per_sec = 0;\n', '\n', '        return dung_reward_per_sec.mul(timeDelta);\n', '    }\n', '}']