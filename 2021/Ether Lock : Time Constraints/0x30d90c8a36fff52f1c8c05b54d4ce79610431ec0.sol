['pragma solidity 0.5.16;\n', '\n', 'import "./MorpherState.sol";\n', 'import "./MorpherTradeEngine.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract MorpherMintingLimiter {\n', '    using SafeMath for uint256; \n', '\n', '    uint256 public mintingLimitPerUser;\n', '    uint256 public mintingLimitDaily;\n', '    uint256 public timeLockingPeriod;\n', '\n', '    mapping(address => uint256) public escrowedTokens;\n', '    mapping(address => uint256) public lockedUntil;\n', '    mapping(uint256 => uint256) public dailyMintedTokens;\n', '\n', '    address tradeEngineAddress; \n', '    MorpherState state;\n', '\n', '    event MintingEscrowed(address _user, uint256 _tokenAmount);\n', '    event EscrowReleased(address _user, uint256 _tokenAmount);\n', '    event MintingDenied(address _user, uint256 _tokenAmount);\n', '    event MintingLimitUpdatedPerUser(uint256 _mintingLimitOld, uint256 _mintingLimitNew);\n', '    event MintingLimitUpdatedDaily(uint256 _mintingLimitOld, uint256 _mintingLimitNew);\n', '    event TimeLockPeriodUpdated(uint256 _timeLockPeriodOld, uint256 _timeLockPeriodNew);\n', '    event TradeEngineAddressSet(address _tradeEngineAddress);\n', '    event DailyMintedTokensReset();\n', '\n', '    modifier onlyTradeEngine() {\n', '        require(msg.sender == tradeEngineAddress, "MorpherMintingLimiter: Only Trade Engine is allowed to call this function");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdministrator() {\n', '        require(msg.sender == state.getAdministrator(), "MorpherMintingLimiter: Only Administrator can call this function");\n', '        _;\n', '    }\n', '\n', '    constructor(address _stateAddress, uint256 _mintingLimitPerUser, uint256 _mintingLimitDaily, uint256 _timeLockingPeriodInSeconds) public {\n', '        state = MorpherState(_stateAddress);\n', '        mintingLimitPerUser = _mintingLimitPerUser;\n', '        mintingLimitDaily = _mintingLimitDaily;\n', '        timeLockingPeriod = _timeLockingPeriodInSeconds;\n', '    }\n', '\n', '    function setTradeEngineAddress(address _tradeEngineAddress) public onlyAdministrator {\n', '        emit TradeEngineAddressSet(_tradeEngineAddress);\n', '        tradeEngineAddress = _tradeEngineAddress;\n', '    }\n', '    \n', '\n', '    function setMintingLimitDaily(uint256 _newMintingLimit) public onlyAdministrator {\n', '        emit MintingLimitUpdatedDaily(mintingLimitDaily, _newMintingLimit);\n', '        mintingLimitDaily = _newMintingLimit;\n', '    }\n', '    function setMintingLimitPerUser(uint256 _newMintingLimit) public onlyAdministrator {\n', '        emit MintingLimitUpdatedPerUser(mintingLimitDaily, _newMintingLimit);\n', '        mintingLimitPerUser = _newMintingLimit;\n', '    }\n', '\n', '    function setTimeLockingPeriod(uint256 _newTimeLockingPeriodInSeconds) public onlyAdministrator {\n', '        emit TimeLockPeriodUpdated(timeLockingPeriod, _newTimeLockingPeriodInSeconds);\n', '        timeLockingPeriod = _newTimeLockingPeriodInSeconds;\n', '    }\n', '\n', '    function mint(address _user, uint256 _tokenAmount) public onlyTradeEngine {\n', '        uint256 mintingDay = block.timestamp / 1 days;\n', '        if((mintingLimitDaily == 0 || dailyMintedTokens[mintingDay].add(_tokenAmount) <= mintingLimitDaily) && (mintingLimitPerUser == 0 || _tokenAmount <= mintingLimitPerUser )) {\n', '            state.mint(_user, _tokenAmount);\n', '            dailyMintedTokens[mintingDay] = dailyMintedTokens[mintingDay].add(_tokenAmount);\n', '        } else {\n', '            escrowedTokens[_user] = escrowedTokens[_user].add(_tokenAmount);\n', '            lockedUntil[_user] = block.timestamp + timeLockingPeriod;\n', '            emit MintingEscrowed(_user, _tokenAmount);\n', '        }\n', '    }\n', '\n', '    function delayedMint(address _user) public {\n', '        require(lockedUntil[_user] <= block.timestamp, "MorpherMintingLimiter: Funds are still time locked");\n', '        uint256 sendAmount = escrowedTokens[_user];\n', '        escrowedTokens[_user] = 0;\n', '        state.mint(_user, sendAmount);\n', '        emit EscrowReleased(_user, sendAmount);\n', '    }\n', '\n', '    function adminApprovedMint(address _user, uint256 _tokenAmount) public onlyAdministrator {\n', '        escrowedTokens[_user] = escrowedTokens[_user].sub(_tokenAmount);\n', '        state.mint(_user, _tokenAmount);\n', '        emit EscrowReleased(_user, _tokenAmount);\n', '    }\n', '\n', '    function adminDisapproveMint(address _user, uint256 _tokenAmount) public onlyAdministrator {\n', '        escrowedTokens[_user] = escrowedTokens[_user].sub(_tokenAmount);\n', '        emit MintingDenied(_user, _tokenAmount);\n', '    }\n', '\n', '    function resetDailyMintedTokens() public onlyAdministrator {\n', '        dailyMintedTokens[block.timestamp / 1 days] = 0;\n', '        emit DailyMintedTokensReset();\n', '    }\n', '\n', '    function getDailyMintedTokens() public view returns(uint256) {\n', '        return dailyMintedTokens[block.timestamp / 1 days];\n', '    }\n', '}']