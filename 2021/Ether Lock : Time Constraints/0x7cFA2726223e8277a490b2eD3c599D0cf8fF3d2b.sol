['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-12\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/TokenSwap.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', 'contract TokenSwap is Ownable {\n', '\n', '    event AdminWalletUpdated(address addr);\n', '    event LockIntervalUpdated(uint256 interval);\n', '    event LockPercentageUpdated(uint256 percentage);\n', '    event MinDepositUpdated(uint256 amount);\n', '\n', '    event TokenWithdrawed(uint256 amount);\n', '\n', '    event PhaseCreated(uint256 startTime, uint256 endTime, uint256 swapRate);\n', '    event PhaseTimeUpdated(uint256 phaseId, uint256 startTime, uint256 endTime);\n', '    event SwapRateUpdated(uint256 phaseId, uint256 swapRate);\n', '\n', '    event Swapped(uint256 phaseId, address account, uint256 ethDeposit, uint256 ethRefund, uint256 tokenSwap, uint256 tokenLock, string referralCode);\n', '\n', '    event TokenClaimed(uint256 phaseId, address account, uint256 amount);\n', '    event TotalTokenClaimed(address account, uint256 amount);\n', '\n', '    IERC20 private _token;\n', '\n', '    address private _adminWallet;\n', '\n', '    uint256 private _lockInterval;\n', '\n', '    uint256 private _lockPercentage;\n', '\n', '    uint256 private _minDeposit;\n', '\n', '    struct ReferralCodeInfo {\n', '        uint128 amount; // ETH\n', '        uint128 numSwap;\n', '    }\n', '\n', '    // Mapping referral code to statistics information\n', '    mapping(string => ReferralCodeInfo) private _referralCodes;\n', '\n', '    struct PhaseInfo {\n', '        uint128 startTime;\n', '        uint128 endTime;\n', '        uint256 swapRate;\n', '    }\n', '\n', '    uint256 private _totalPhases;\n', '\n', '    // Mapping phase id to phase information\n', '    mapping(uint256 => PhaseInfo) private _phases;\n', '\n', '    struct LockedBalanceInfo {\n', '        uint128 amount; // Token\n', '        uint128 releaseTime;\n', '    }\n', '\n', '    uint256 private _totalLockedBalance;\n', '\n', '    // Mapping phase id to user address and locked balance information\n', '    mapping(uint256 => mapping(address => LockedBalanceInfo)) private _lockedBalances;\n', '\n', '    mapping(address => uint256[]) private _boughtPhases;\n', '\n', '    /**\n', "     * @dev Throws if phase doesn't exist\n", '     */\n', '    modifier phaseExist(uint256 phaseId) {\n', '        require(_phases[phaseId].swapRate > 0, "TokenSwap: phase doesn\'t exist");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets initial values\n', '     */\n', '    constructor(address token, address adminWallet)\n', '    {\n', '        _token = IERC20(token);\n', '\n', '        _adminWallet = adminWallet;\n', '\n', '        _lockInterval = 6 * 30 days; // 6 months\n', '\n', '        _lockPercentage = 75; // 75%\n', '\n', '        _minDeposit = 0.5 ether;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns smart contract information\n', '     */\n', '    function getContractInfo()\n', '        public\n', '        view\n', '        returns (uint256, uint256, uint256, uint256, uint256, uint256, address, address)\n', '    {\n', '        return (\n', '            _lockInterval, _lockPercentage, _totalLockedBalance, _totalPhases, _token.balanceOf(address(this)), _minDeposit,\n', '            _adminWallet, address(_token)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Updates admin wallet address where contains ETH user deposited\n', '     * to smart contract for swapping\n', '     */\n', '    function updateAdminWallet(address adminWallet)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(adminWallet != address(0), "TokenSwap: address is invalid");\n', '\n', '        _adminWallet = adminWallet;\n', '\n', '        emit AdminWalletUpdated(adminWallet);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates lock interval\n', '     */\n', '    function updateLockInterval(uint256 lockInterval)\n', '        public\n', '        onlyOwner\n', '    {\n', '        _lockInterval = lockInterval;\n', '\n', '        emit LockIntervalUpdated(lockInterval);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates lock percentage\n', '     */\n', '    function updateLockPercentage(uint256 lockPercentage)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(lockPercentage <= 100, "TokenSwap: percentage is invalid");\n', '\n', '        _lockPercentage = lockPercentage;\n', '\n', '        emit LockPercentageUpdated(lockPercentage);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates minimum deposit amount\n', '     */\n', '    function updateMinDeposit(uint256 minDeposit)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(minDeposit > 0, "TokenSwap: amount is invalid");\n', '\n', '        _minDeposit = minDeposit;\n', '\n', '        emit MinDepositUpdated(minDeposit);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws token out of this smart contract and transfer to \n', '     * admin wallet\n', '     *\n', '     * Admin can withdraw all tokens that includes locked token of user in case emergency\n', '     */\n', '    function withdrawToken(uint256 amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(amount > 0, "TokenSwap: amount is invalid");\n', '\n', '        _token.transfer(_adminWallet, amount);\n', '\n', '        emit TokenWithdrawed(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates new phase\n', '     */\n', '    function createPhase(uint256 startTime, uint256 endTime, uint256 swapRate)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(startTime >= block.timestamp && startTime > _phases[_totalPhases].endTime && startTime < endTime, "TokenSwap: time is invalid");\n', '\n', '        require(swapRate > 0, "TokenSwap: rate is invalid");\n', '\n', '        _totalPhases++;\n', '\n', '        _phases[_totalPhases] = PhaseInfo(uint128(startTime), uint128(endTime), swapRate);\n', '\n', '        emit PhaseCreated(startTime, endTime, swapRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates phase time\n', '     */\n', '    function updatePhaseTime(uint256 phaseId, uint256 startTime, uint256 endTime)\n', '        public\n', '        onlyOwner\n', '        phaseExist(phaseId)\n', '    {\n', '        PhaseInfo storage phase = _phases[phaseId];\n', '\n', '        if (startTime != 0) {\n', '            phase.startTime = uint128(startTime);\n', '        }\n', '\n', '        if (endTime != 0) {\n', '            phase.endTime = uint128(endTime);\n', '        }\n', '\n', '        require((startTime == 0 || startTime >= block.timestamp) && phase.startTime < phase.endTime, "TokenSwap: time is invalid");\n', '\n', '        emit PhaseTimeUpdated(phaseId, startTime, endTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates swap rate\n', '     */\n', '    function updateSwapRate(uint256 phaseId, uint256 swapRate)\n', '        public\n', '        onlyOwner\n', '        phaseExist(phaseId)\n', '    {\n', '        require(swapRate > 0, "TokenSwap: rate is invalid");\n', '\n', '        _phases[phaseId].swapRate = swapRate;\n', '\n', '        emit SwapRateUpdated(phaseId, swapRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns phase information\n', '     */\n', '    function getPhaseInfo(uint256 phaseId)\n', '        public\n', '        view\n', '        returns (PhaseInfo memory)\n', '    {\n', '        return _phases[phaseId];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns current active phase information\n', '     */\n', '    function getActivePhaseInfo()\n', '        public\n', '        view\n', '        returns (uint256, PhaseInfo memory)\n', '    {\n', '        uint256 currentTime = block.timestamp;\n', '\n', '        for (uint256 i = 1; i <= _totalPhases; i++) {\n', '            PhaseInfo memory phase = _phases[i];\n', '\n', '            if (currentTime < phase.endTime) {\n', '                return (i, phase);\n', '            }\n', '        }\n', '\n', '        return (0, _phases[0]);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns referral code information\n', '     */\n', '    function getReferralCodeInfo(string memory referralCode)\n', '        public\n', '        view\n', '        returns (ReferralCodeInfo memory)\n', '    {\n', '        return _referralCodes[referralCode];\n', '    }\n', '\n', '    /**\n', '     * @dev Swaps ETH to token\n', '     */\n', '    function swap(uint256 phaseId, string memory referralCode)\n', '        public\n', '        payable\n', '    {\n', '        require(msg.value >= _minDeposit, "TokenSwap: msg.value is invalid");\n', '\n', '        PhaseInfo memory phase = _phases[phaseId];\n', '\n', '        require(block.timestamp >= phase.startTime && block.timestamp < phase.endTime, "TokenSwap: not in swapping time");\n', '\n', '        uint256 remain = _token.balanceOf(address(this)) - _totalLockedBalance;\n', '\n', '        require(remain > 0, "TokenSwap: not enough token");\n', '\n', '        uint256 amount = msg.value * phase.swapRate / 1 ether;\n', '\n', '        uint refund;\n', '\n', '        // Calculates redundant money\n', '        if (amount > remain) {\n', '            refund = (amount - remain) * 1 ether / phase.swapRate;\n', '            amount = remain;\n', '        }\n', '\n', '        // Refunds redundant money for user\n', '        if (refund > 0) {\n', '            payable(_msgSender()).transfer(refund);\n', '        }\n', '\n', '        // Transfers money to admin wallet\n', '        payable(_adminWallet).transfer(msg.value - refund);\n', '\n', '        // Calculates number of tokens that will be locked\n', '        uint256 locked = amount * _lockPercentage / 100;\n', '\n', '        // Transfers token for user\n', '        _token.transfer(_msgSender(), amount - locked);\n', '\n', '        // Manages total locked tokens in smart contract\n', '        _totalLockedBalance += locked;\n', '\n', '        // Manages locked tokens by user\n', '        LockedBalanceInfo storage balance = _lockedBalances[phaseId][_msgSender()];\n', '        balance.amount += uint128(locked);\n', '        balance.releaseTime = uint128(phase.startTime + _lockInterval);\n', '\n', '        // Manages referral codes\n', '        ReferralCodeInfo storage referral = _referralCodes[referralCode];\n', '        referral.amount += uint128(msg.value - refund);\n', '        referral.numSwap++;\n', '\n', '        uint256[] storage phases = _boughtPhases[_msgSender()];\n', '\n', '        if (phases.length == 0 || phases[phases.length - 1] != phaseId) {\n', '            phases.push(phaseId);\n', '        }\n', '\n', '        emit Swapped(phaseId, _msgSender(), msg.value, refund, amount, locked, referralCode);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns token balance of user in smart contract that includes\n', '     * claimable and unclaimable\n', '     */\n', '    function getTokenBalance(address account)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        uint256 currentTime = block.timestamp;\n', '\n', '        uint256 balance;\n', '\n', '        uint256 lockedBalance;\n', '\n', '        uint256[] memory phases = _boughtPhases[account];\n', '\n', '        for (uint256 i = 0; i < phases.length; i++) {\n', '            LockedBalanceInfo memory info = _lockedBalances[phases[i]][account];\n', '\n', '            if (info.amount == 0) {\n', '                continue;\n', '            }\n', '\n', '            if (info.releaseTime <= currentTime) {\n', '                balance += info.amount;\n', '\n', '            } else {\n', '                lockedBalance += info.amount;\n', '            }\n', '        }\n', '\n', '        return (balance, lockedBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev Claims the remainning token after lock time end\n', '     */\n', '    function claimToken()\n', '        public\n', '    {\n', '        address msgSender = _msgSender();\n', '\n', '        uint256 currentTime = block.timestamp;\n', '\n', '        uint256 balance;\n', '\n', '        uint256[] memory phases = _boughtPhases[msgSender];\n', '\n', '        uint256 length = phases.length;\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            LockedBalanceInfo memory info = _lockedBalances[phases[i]][msgSender];\n', '\n', '            uint256 amount = info.amount;\n', '\n', '            if (amount == 0) {\n', '                continue;\n', '            }\n', '\n', '            if (info.releaseTime <= currentTime) {\n', '                balance += amount;\n', '\n', '                emit TokenClaimed(phases[i], msgSender, amount);\n', '\n', '                delete _lockedBalances[phases[i]][msgSender];\n', '            }\n', '        }\n', '\n', '        require(balance > 0, "TokenSwap: balance isn\'t enough");\n', '\n', '        _totalLockedBalance -= balance;\n', '\n', '        _token.transfer(msgSender, balance);\n', '\n', '        emit TotalTokenClaimed(msgSender, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns locked balance information\n', '     */\n', '    function getLockedBalanceInfo(uint256 phaseId, address account)\n', '        public\n', '        view\n', '        returns (LockedBalanceInfo memory)\n', '    {\n', '        return _lockedBalances[phaseId][account];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns phases that user bought\n', '     */\n', '    function getBoughtPhases(address account)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        return _boughtPhases[account];\n', '    }\n', '\n', '}']