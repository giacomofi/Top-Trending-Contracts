['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.2;\n', '\n', '\n', '\n', '// File: ManagementList.sol\n', '\n', 'contract ManagementList {\n', '    string public name;\n', '    address public owner;\n', '    uint256 public managersCount;\n', '    mapping(uint256 => address) public managerAddressByIdx;\n', '    mapping(address => uint256) public managerIdxByAddress;\n', '\n', '    constructor(string memory _name, address _owner) {\n', '        name = _name;\n', '        owner = _owner;\n', '        managersCount = 1;\n', '        managerAddressByIdx[1] = owner;\n', '        managerIdxByAddress[owner] = 1;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "ManagementList: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyManagers() {\n', '        require(\n', '            isManager(msg.sender),\n', '            "ManagementList: caller is not a manager"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function managersList() external view returns (address[] memory) {\n', '        address[] memory managersAddresses = new address[](managersCount);\n', '        for (uint256 i = 0; i < managersCount; i++) {\n', '            address managerAddress = managerAddressByIdx[i + 1];\n', '            managersAddresses[i] = managerAddress;\n', '        }\n', '        return managersAddresses;\n', '    }\n', '\n', '    function isManager(address managerAddress) public view returns (bool) {\n', '        return managerIdxByAddress[managerAddress] > 0;\n', '    }\n', '\n', '    function addManager(address managerAddress) public onlyManagers {\n', '        require(\n', '            isManager(managerAddress) == false,\n', '            "ManagementList: user is already a manager"\n', '        );\n', '        managersCount += 1;\n', '        managerAddressByIdx[managersCount] = managerAddress;\n', '        managerIdxByAddress[managerAddress] = managersCount;\n', '    }\n', '\n', '    function removeManager(address managerAddress) public onlyManagers {\n', '        require(\n', '            isManager(managerAddress),\n', '            "ManagementList: non-managers cannot be removed"\n', '        );\n', '        require(\n', '            managerAddress != owner,\n', '            "ManagemenetList: owner cannot be removed"\n', '        );\n', '        uint256 managerIdx = managerIdxByAddress[managerAddress];\n', '        delete managerAddressByIdx[managerIdx];\n', '        delete managerIdxByAddress[managerAddress];\n', '        managersCount -= 1;\n', '    }\n', '\n', '    function resetManagers() public onlyOwner {\n', '        for (uint256 i = 0; i < managersCount; i++) {\n', '            address managerAddress = managerAddressByIdx[i + 2];\n', '            removeManager(managerAddress);\n', '        }\n', '    }\n', '}']