['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', 'pragma solidity >=0.8.0;\n', '//SPDX-License-Identifier: MIT\n', '\n', '//\n', '// https://github.com/austintgriffith/scaffold-eth/tree/simple-stream\n', '// @austingriffith\n', '//\n', '\n', 'contract SimpleStream {\n', '\n', '  event Withdraw( address indexed to, uint256 amount, string reason );\n', '  event Deposit( address indexed from, uint256 amount, string reason );\n', '\n', '  address payable public toAddress;\n', '  uint256 public cap;\n', '  uint256 public frequency;\n', '  uint256 public last = block.timestamp - frequency; //stream starts full\n', '  //uint256 public last = block.timestamp; //stream starts empty\n', '\n', '  constructor(address payable _toAddress, uint256 _cap, uint256 _frequency, bool _startsFull) public {\n', '    toAddress = _toAddress;\n', '    cap = _cap;\n', '    frequency = _frequency;\n', '    if(_startsFull){\n', '      last = block.timestamp - frequency;\n', '    }else{\n', '      last = block.timestamp;\n', '    }\n', '  }\n', '\n', '  function streamBalance() public view returns (uint256){\n', '    if(block.timestamp-last > frequency){\n', '      return cap;\n', '    }\n', '    return (cap * (block.timestamp-last)) / frequency;\n', '  }\n', '\n', '  function streamWithdraw(uint256 amount, string memory reason) public {\n', '       require(msg.sender==toAddress,"this stream is not for you");\n', '       uint256 totalAmountCanWithdraw = streamBalance();\n', '       require(totalAmountCanWithdraw>=amount,"not enough in the stream");\n', '       last = last + ((block.timestamp - last) * amount / totalAmountCanWithdraw);\n', '       emit Withdraw( msg.sender, amount, reason );\n', '       toAddress.transfer(amount);\n', '   }\n', '\n', '   function streamDeposit(string memory reason) public payable {\n', '      require(msg.value>=cap/10,"Not big enough, sorry.");\n', '      emit Deposit( msg.sender, msg.value, reason );\n', '    }\n', '\n', '   receive() external payable { streamDeposit(""); }\n', '}']