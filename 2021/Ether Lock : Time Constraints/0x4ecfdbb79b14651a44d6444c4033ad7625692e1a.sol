['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '/**\n', ' * @dev Interface of the ERC20 , add some function for gToken and cToken\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newowner;\n', '    address public admin;\n', '    address public dev;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNewOwner {\n', '        require(msg.sender == newowner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newowner = _newOwner;\n', '    }\n', '    \n', '    function takeOwnership() public onlyNewOwner {\n', '        owner = newowner;\n', '    }    \n', '    \n', '    function setAdmin(address _admin) public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '    \n', '    function setDev(address _dev) public onlyOwner {\n', '        dev = _dev;\n', '    }\n', '    \n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDev {\n', '        require(msg.sender == dev || msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }    \n', '}\n', '\n', '\n', 'contract PledgeDeposit is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    \n', '    struct PoolInfo {\n', '        IERC20 token;\n', '        string symbol;\n', '    }\n', '\n', '    struct DepositInfo {\n', '        uint256 userOrderId;\n', '        uint256 depositAmount;\n', '        uint256 pledgeAmount;\n', '        uint256 depositTime;\n', '        uint256 depositBlock;\n', '        uint256 expireBlock;\n', '    }\n', '    \n', '\n', '    IERC20 public zild;\n', '\n', '    /**\n', '     * @dev  Guard variable for re-entrancy checks\n', '     */\n', '    bool internal _notEntered;\n', '\n', '    uint256 public minDepositBlock = 1;\n', '\n', ' \n', '    PoolInfo[] public poolArray;\n', '\n', '\n', '    // poolId , user address, DepositInfo\n', '    mapping (uint256 => mapping (address => DepositInfo[])) public userDepositMap;\n', '\n', '    mapping (address => uint256) public lastUserOrderIdMap;\n', '\n', '    uint256 public pledgeBalance;    \n', '\n', '    event NewPool(address addr, string symbol);\n', '\n', '    event UpdateMinDepositBlock(uint256 dblock,address  who,uint256 time);\n', '\n', '    event ZildBurnDeposit(address  userAddress,uint256 userOrderId, uint256 burnAmount);\n', '    event Deposit(address  userAddress,uint256 userOrderId, uint256 poolId,string symbol,uint256 depositId, uint256 depositAmount,uint256 pledgeAmount);\n', '    event Withdraw(address  userAddress,uint256 userOrderId, uint256 poolId,string symbol,uint256 depositId, uint256 depositAmount,uint256 pledgeAmount);\n', '    \n', '    constructor(address _zild,address _usdt) public {\n', '        zild = IERC20(_zild);\n', '\n', '        // poolArray[0] :  ETH \n', "        addPool(address(0),'ETH');  \n", '\n', '        // poolArray[1] : ZILD  \n', "        addPool(_zild,'ZILD');  \n", '\n', '        // poolArray[2] : USDT  \n', "        addPool(_usdt,'USDT');  \n", '\n', '        _notEntered = true;\n', '  \n', '    }\n', '\n', '        /*** Reentrancy Guard ***/\n', '\n', '    /**\n', '     * Prevents a contract from calling itself, directly or indirectly.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(_notEntered, "re-entered");\n', '        _notEntered = false;\n', '        _;\n', '        _notEntered = true; // get a gas-refund post-Istanbul\n', '    }\n', '    \n', '\n', '    function addPool(address  _token, string memory _symbol) public onlyAdmin {\n', '        poolArray.push(PoolInfo({token: IERC20(_token),symbol: _symbol}));\n', '        emit NewPool(_token, _symbol);\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolArray.length;\n', '    }\n', '\n', '    function updateMinDepositBlock(uint256 _minDepositBlock) public onlyAdmin {\n', '        require(_minDepositBlock > 0,"Desposit: New deposit time must be greater than 0");\n', '        minDepositBlock = _minDepositBlock;\n', '        emit UpdateMinDepositBlock(minDepositBlock,msg.sender,now);\n', '    }\n', '      \n', '    function tokenDepositCount(address _user, uint256 _poolId)  view public returns(uint256) {\n', '        require(_poolId < poolArray.length, "invalid _poolId");\n', '        return userDepositMap[_poolId][_user].length;\n', '    }\n', '\n', '    function burnDeposit(uint256 _userOrderId, uint256 _burnAmount) public{\n', '       require(_userOrderId > lastUserOrderIdMap[msg.sender], "_userOrderId should greater than lastUserOrderIdMap[msg.sender]");\n', '       \n', '       lastUserOrderIdMap[msg.sender]  = _userOrderId;\n', '       \n', '       zild.transferFrom(address(msg.sender), address(1024), _burnAmount);       \n', '  \n', '       emit ZildBurnDeposit(msg.sender, _userOrderId, _burnAmount);\n', '    }\n', '\n', '    function deposit(uint256 _userOrderId, uint256 _poolId, uint256 _depositAmount,uint256 _pledgeAmount) public nonReentrant  payable{\n', '       require(_poolId < poolArray.length, "invalid _poolId");\n', '       require(_userOrderId > lastUserOrderIdMap[msg.sender], "_userOrderId should greater than lastUserOrderIdMap[msg.sender]");\n', '       \n', '       lastUserOrderIdMap[msg.sender]  = _userOrderId;\n', '       PoolInfo storage poolInfo = poolArray[_poolId];\n', '\n', '       // ETH\n', '       if(_poolId == 0){\n', '            require(_depositAmount == msg.value, "invald  _depositAmount for ETH");\n', '            zild.safeTransferFrom(address(msg.sender), address(this), _pledgeAmount);\n', '       }\n', '       // ZILD\n', '       else if(_poolId == 1){\n', '            uint256 zildAmount = _pledgeAmount.add(_depositAmount);\n', '            zild.safeTransferFrom(address(msg.sender), address(this), zildAmount);\n', '       }\n', '       else{\n', '            zild.safeTransferFrom(address(msg.sender), address(this), _pledgeAmount);\n', '            poolInfo.token.safeTransferFrom(address(msg.sender), address(this), _depositAmount);\n', '       }\n', '\n', '       pledgeBalance = pledgeBalance.add(_pledgeAmount);\n', '\n', '       uint256 depositId = userDepositMap[_poolId][msg.sender].length;\n', '       userDepositMap[_poolId][msg.sender].push(\n', '            DepositInfo({\n', '                userOrderId: _userOrderId,\n', '                depositAmount: _depositAmount,\n', '                pledgeAmount: _pledgeAmount,\n', '                depositTime: now,\n', '                depositBlock: block.number,\n', '                expireBlock: block.number.add(minDepositBlock)\n', '            })\n', '        );\n', '    \n', '        emit Deposit(msg.sender, _userOrderId, _poolId, poolInfo.symbol, depositId, _depositAmount, _pledgeAmount);\n', '    }\n', '\n', '    function getUserDepositInfo(address _user, uint256 _poolId,uint256 _depositId) public view returns (\n', '        uint256 _userOrderId, uint256 _depositAmount,uint256 _pledgeAmount,uint256 _depositTime,uint256 _depositBlock,uint256 _expireBlock) {\n', '        require(_poolId < poolArray.length, "invalid _poolId");\n', '        require(_depositId < userDepositMap[_poolId][_user].length, "invalid _depositId");\n', '\n', '        DepositInfo memory depositInfo = userDepositMap[_poolId][_user][_depositId];\n', '        \n', '        _userOrderId = depositInfo.userOrderId;\n', '        _depositAmount = depositInfo.depositAmount;\n', '        _pledgeAmount = depositInfo.pledgeAmount;\n', '        _depositTime = depositInfo.depositTime;\n', '        _depositBlock = depositInfo.depositBlock;\n', '        _expireBlock = depositInfo.expireBlock;\n', '    }\n', '\n', '    function withdraw(uint256 _poolId,uint256 _depositId) public nonReentrant {\n', '        require(_poolId < poolArray.length, "invalid _poolId");\n', '        require(_depositId < userDepositMap[_poolId][msg.sender].length, "invalid _depositId");\n', '\n', '        PoolInfo storage poolInfo = poolArray[_poolId];\n', '        DepositInfo storage depositInfo = userDepositMap[_poolId][msg.sender][_depositId];\n', '\n', '        require(block.number > depositInfo.expireBlock, "The withdrawal block has not arrived");\n', '        uint256 depositAmount =  depositInfo.depositAmount;\n', '        require( depositAmount > 0, "There is no deposit available!");\n', '\n', '        uint256 pledgeAmount = depositInfo.pledgeAmount;\n', '\n', '        pledgeBalance = pledgeBalance.sub(pledgeAmount);\n', '        depositInfo.depositAmount =  0;    \n', '        depositInfo.pledgeAmount = 0;\n', '\n', '        // ETH\n', '        if(_poolId == 0) {\n', '            msg.sender.transfer(depositAmount);\n', '            zild.safeTransfer(msg.sender,pledgeAmount);\n', '        }\n', '        // ZILD\n', '        else if(_poolId == 1){\n', '            zild.safeTransfer(msg.sender, depositAmount.add(pledgeAmount));\n', '        }\n', '        else{\n', '            poolInfo.token.safeTransfer(msg.sender, depositAmount);\n', '            zild.safeTransfer(msg.sender,pledgeAmount);\n', '        }   \n', '      \n', '        emit Withdraw(msg.sender, depositInfo.userOrderId, _poolId, poolInfo.symbol, _depositId, depositAmount, pledgeAmount);\n', '      }\n', '}']