['// SPDX-License-Identifier: U-U-U-UPPPP\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "./Ownable.sol";\n', 'import "./IERC1155.sol";\n', 'import "./SafeMath.sol";\n', 'import "./ERC1155TokenReceiver.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeERC20.sol";\n', '\n', 'contract NFTClaimStation is ERC1155TokenReceiver, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC1155 public nftToken;\n', '\n', '    uint256 public artId;\n', '    uint256 public recoverUnclaimedNftTime;\n', '\n', '    mapping (address => bool) public eligibleUsers;\n', '\n', '    event ClaimedNFT(address ClaimedBy);\n', '\n', '    constructor(uint256 _artId, IERC1155 _nftToken) public {\n', '        artId = _artId;\n', '        nftToken = _nftToken;        \n', '    }\n', '\n', '    function setRecoverUnclaimedNftTime() public onlyOwner {  \n', '        recoverUnclaimedNftTime = block.timestamp + 696969; //you will have 8 days to claim, unclaimed NFTs will be shattered into a million pieces\n', '    }\n', '\n', '    function setClaimAddresses(address[] memory addresses) public onlyOwner {  \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            eligibleUsers[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function claimNFT() public {\n', '        address claimer = msg.sender;\n', '        require(eligibleUsers[claimer], "Not eligible or your address has not been added yet" );\n', '        require(nftToken.balanceOf(address(this), artId) > 0, "NFTs not yet added");\n', '        nftToken.safeTransferFrom(address(this), claimer, artId, 1, "");\n', '        eligibleUsers[claimer] = false;\n', '        emit ClaimedNFT(claimer);\n', '    }\n', '\n', '    function recoverUnclaimedNFTs() public onlyOwner {\n', '        require (block.timestamp > recoverUnclaimedNftTime);\n', '        uint256 amountRemaining = nftToken.balanceOf(address(this), artId);\n', '        nftToken.safeTransferFrom(address(this), owner(), artId, amountRemaining, "");\n', '    }\n', '\n', '    function recoverTokens(IERC20 token) public onlyOwner {\n', '        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\n', '    }\n', '}']