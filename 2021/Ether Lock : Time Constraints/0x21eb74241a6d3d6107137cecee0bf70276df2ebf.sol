['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-18\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/*\n', '\n', 'XAdspace - Dutch auction digital advertisement spaces \n', '\n', '  v0.15.4\n', '\n', '*/\n', '                                                                                 \n', '  \n', ' \n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '  \n', '  \n', '/**\n', ' * \n', ' * \n', ' *  Dutch auction digital advertisement spaces\n', ' *\n', ' * \n', ' */\n', 'contract XAdspace {\n', '\n', '   mapping(bytes32 => AdProgram) public adPrograms;  \n', '\n', '   mapping(address => uint256) public adProgramNonces;  \n', '   \n', '\n', '   //polygon network, 50000 blocks per day approx\n', '   uint256 public adspaceAuctionTimeBlocks = 50000 * 7;\n', ' \n', '   struct AdProgram {\n', '\n', '     address programOwner;\n', '     string programName;\n', '     address paymentDelegate; //address to recieve payment      \n', '     address token;\n', '\n', '     address renter;\n', '     uint256 startPrice;\n', '     uint256 rentStartBlock;\n', '     string adURL; \n', '\n', '     bool newRentalsAllowed;\n', '      \n', '   }\n', '\n', '   event BoughtAdspace(bytes32 programId, address programOwner, address token, uint256 tokens, string adURL, address renter);\n', '   event CreatedAdProgram(bytes32 programId, address programOwner, address token, uint256 tokens, string adURL);\n', '\n', '\n', '   \n', '  constructor( uint256 _timeBlocks )   {  \n', '    adspaceAuctionTimeBlocks = _timeBlocks;\n', '  }\n', '\n', '   \n', '   \n', '\n', '  function createAdProgram(address token, uint256 startPrice, string calldata programName, string calldata initialUrl ) public returns (bool) {\n', '    \n', '    address from = msg.sender; \n', ' \n', '    bytes32 programId = keccak256(abi.encodePacked(from, adProgramNonces[from]++));\n', '\n', '    require( !adspaceIsDefined(programId) );\n', '\n', '    adPrograms[programId] = AdProgram( from, programName, from, token, address(0), startPrice, block.number, initialUrl, true);\n', '\n', '    require( adspaceIsDefined(programId) );\n', '\n', '    emit CreatedAdProgram(programId, from, token, startPrice, initialUrl);\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  function buyAdspace(bytes32 programId, address token, uint256 tokens, string calldata adURL) public returns (bool) {\n', '     \n', '\n', '    address from = msg.sender;\n', '\n', "    require(adspaceIsDefined(programId), 'That adspace does not exist');\n", "    require(adPrograms[programId].newRentalsAllowed == true, 'New rentals disallowed');\n", '\n', '\n', '    uint256 remainingAdspaceValue = getRemainingAdspaceValue(programId);\n', ' \n', '    if( remainingAdspaceValue > 0  ){  \n', '      //need to pay off the previous owner to refund   for the rest of their time that remained \n', '       IERC20(adPrograms[programId].token).transferFrom(from, adPrograms[programId].renter, remainingAdspaceValue );\n', '    }\n', ' \n', '    uint256 rentalPremium = getAdspaceRentalPremium(programId);\n', '\n', '    if( rentalPremium > 0 ){ \n', '      //need to pay the adspace owner the rental premium \n', '      IERC20(adPrograms[programId].token).transferFrom(from, adPrograms[programId].paymentDelegate, rentalPremium );\n', '    }\n', '\n', '    adPrograms[programId].renter = from;\n', '    adPrograms[programId].adURL = adURL;\n', '    adPrograms[programId].startPrice = remainingAdspaceValue + rentalPremium;\n', '    adPrograms[programId].rentStartBlock = block.number;\n', '\n', '    //make sure the buyer explicity authorizes these values in the input parameters \n', '    require( token == adPrograms[programId].token );\n', '    require( tokens >= remainingAdspaceValue + rentalPremium );\n', '\n', '    emit BoughtAdspace(programId, adPrograms[programId].programOwner, token, remainingAdspaceValue + rentalPremium, adURL, from);\n', '\n', '\n', '    return true;\n', '   \n', '\n', '  }\n', '\n', '\n', '  function setPaymentDelegate( bytes32 programId, address delegate ) public returns (bool) {\n', '     \n', '      require(adPrograms[programId].programOwner == msg.sender);\n', '\n', '      require(adspaceIsDefined(programId));\n', '      \n', '      adPrograms[programId].paymentDelegate = delegate;\n', '\n', '      return true; \n', '  }\n', '\n', '  function setNewRentalsAllowed(  bytes32 programId, bool allowed ) public returns (bool) {\n', '     \n', '      require(adPrograms[programId].programOwner == msg.sender);\n', '\n', '      require(adspaceIsDefined(programId));\n', '      \n', '      adPrograms[programId].newRentalsAllowed = allowed;\n', '\n', '      return true; \n', '  }\n', '\n', '\n', "  //can always set price, but can never be lower than what the  current space owners's \n", '  function setPriceForAdspace(bytes32 programId, uint256 newPrice) public returns (bool) {\n', '     \n', '       \n', '      require(adPrograms[programId].programOwner == msg.sender);\n', '\n', '      require(adspaceIsDefined(programId));\n', '     \n', '      //must be expired, or must be no bounty to pay to the previous renter \n', '      require ( getRemainingAdspaceValue(programId) == 0);\n', '\n', '      adPrograms[programId].startPrice = newPrice;\n', '\n', '      return true; \n', '  }\n', '\n', '  function setTokenForAdspace(bytes32 programId, address newToken) public returns (bool) {\n', ' \n', '      require(adPrograms[programId].programOwner == msg.sender);\n', '\n', '      require(adspaceIsDefined(programId));\n', '      \n', '      //must be expired, or must be no bounty to pay to the previous renter \n', '      require ( getRemainingAdspaceValue(programId) == 0);\n', '\n', '      adPrograms[programId].token = newToken;\n', '\n', '      return true; \n', '  }\n', '\n', '\n', '  function adspaceTimeRemaining( bytes32 programId ) public view returns (uint256){\n', '\n', '      uint256 expirationBlock = adPrograms[programId].rentStartBlock + adspaceAuctionTimeBlocks;\n', '\n', '\n', '       if(block.number <= expirationBlock){\n', '         return expirationBlock - block.number; \n', '       }\n', '\n', '       return 0;\n', '     \n', '  }\n', ' \n', '  function adspaceIsDefined( bytes32 programId ) public view returns (bool){\n', '     \n', '      return adPrograms[programId].token != address(0x0)  ;\n', '  }\n', '\n', '  \n', '   \n', '  function getRemainingAdspaceValue( bytes32 programId ) public view returns (uint256){\n', '      if(adspaceIsDefined(programId) && adPrograms[programId].renter != address(0x0)){\n', '  \n', '        uint256 blocksRemaining = adspaceTimeRemaining(programId);\n', ' \n', '        return (2 * adPrograms[programId].startPrice * blocksRemaining / adspaceAuctionTimeBlocks);\n', '         \n', '      }\n', '\n', '      return 0;\n', '  }\n', ' \n', '  function getAdspaceRentalPremium( bytes32 programId ) public view returns (uint256){\n', '      if(adspaceIsDefined(programId) && adPrograms[programId].renter != address(0x0)){\n', '\n', '             uint256 blocksRemaining = adspaceTimeRemaining(programId);\n', '  \n', '        return (adPrograms[programId].startPrice /2) +  (adPrograms[programId].startPrice  )  * (  blocksRemaining / adspaceAuctionTimeBlocks);\n', '         \n', '      }\n', '\n', '      return  adPrograms[programId].startPrice  ;\n', '  }\n', ' \n', '    \n', '   \n', '     // ------------------------------------------------------------------------\n', '\n', "    // Don't accept ETH\n", '\n', '    // ------------------------------------------------------------------------\n', ' \n', '    fallback() external payable { revert(); }\n', '    receive() external payable { revert(); }\n', '   \n', '\n', '}']