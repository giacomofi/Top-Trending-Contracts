['pragma solidity 0.6.12; // optimization runs: 200, evm version: istanbul\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface DharmaTradeBotV1Interface {\n', '  struct LimitOrderArguments {\n', '    address account;\n', '    address assetToSupply;        // Ether = address(0)\n', '    address assetToReceive;       // Ether = address(0)\n', '    uint256 maximumAmountToSupply;\n', '    uint256 maximumPriceToAccept; // represented as a mantissa (n * 10^18)\n', '    uint256 expiration;\n', '    bytes32 salt;\n', '  }\n', '\n', '  struct LimitOrderExecutionArguments {\n', '    uint256 amountToSupply; // will be lower than maximum for partial fills\n', '    bytes signatures;\n', '    address tradeTarget;\n', '    bytes tradeData;\n', '  }\n', '\n', '  function processLimitOrder(\n', '    LimitOrderArguments calldata args,\n', '    LimitOrderExecutionArguments calldata executionArgs\n', '  ) external returns (uint256 amountReceived);\n', '}\n', '\n', '\n', 'contract BasicTradeBotCommanderStaging {\n', '  DharmaTradeBotV1Interface _TRADE_BOT = DharmaTradeBotV1Interface(\n', '    0x0f36f2DA9F935a7802a4f1Af43A3740A73219A9e\n', '  );\n', '    \n', '  function processLimitOrder(\n', '    DharmaTradeBotV1Interface.LimitOrderArguments calldata args,\n', '    DharmaTradeBotV1Interface.LimitOrderExecutionArguments calldata executionArgs\n', '  ) external returns (uint256 amountReceived) {\n', '    amountReceived = _TRADE_BOT.processLimitOrder(\n', '      args, executionArgs\n', '    );\n', '  }\n', '}']