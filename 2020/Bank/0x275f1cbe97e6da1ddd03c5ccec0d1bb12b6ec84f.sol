['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'contract ParsiqDistributor {\n', '  using SafeMath for uint256;\n', '  uint256 private constant _NOT_ENTERED = 1;\n', '  uint256 private constant _ENTERED = 2;\n', '\n', '  uint256 private _status;\n', '\n', '  constructor () public {\n', '      _status = _NOT_ENTERED;\n', '  }\n', '\n', '  function distributeTokensAndEth(\n', '    address token,\n', '    address[] calldata recipients,\n', '    uint256[] calldata shares,\n', '    uint256 tokensToDistribute\n', '  )\n', '    external\n', '    payable\n', '    nonReentrant\n', '  {\n', '    require(recipients.length == shares.length, "Invalid array length");\n', '\n', '    IERC20TransferMany(token).transferFrom(\n', '      msg.sender,\n', '      address(this),\n', '      tokensToDistribute\n', '    );\n', '\n', '    uint256[] memory tokens = new uint256[](recipients.length);\n', '    uint256 ethToDistribute = msg.value;\n', '\n', '    uint256 totalShares = 0;\n', '    for (uint256 i = 0; i < shares.length; i++) {\n', '      totalShares = totalShares.add(shares[i]);\n', '    }\n', '    require(totalShares > 0, "Zero shares");\n', '\n', '    for (uint256 i = 0; i < shares.length; i++) {\n', '      tokens[i] = shares[i].mul(tokensToDistribute).div(totalShares);\n', '      uint256 ethers = shares[i].mul(ethToDistribute).div(totalShares);\n', '      if (ethers > 0) {\n', '        payable(recipients[i]).transfer(ethers);\n', '      }\n', '    }\n', '\n', '    IERC20TransferMany(token).transferMany(recipients, tokens);\n', '  }\n', '\n', '  modifier nonReentrant() {\n', '      require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '      _status = _ENTERED;\n', '      _;\n', '      _status = _NOT_ENTERED;\n', '  }\n', '}\n', 'interface IERC20TransferMany {\n', '  function transferMany(\n', '    address[] calldata recipients,\n', '    uint256[] calldata amounts\n', '  ) external;\n', '  \n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}']