['/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-05\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '\n', 'contract TDRouter {\n', '    using SafeMath for uint;\n', '    address public immutable  factory;\n', '    address public immutable  WETH;\n', '    address admin;\n', '    mapping(address=>address) public tokenAd;\n', '    uint tradeFeeScale; //denominator is 10000;\n', '    uint256 public totalETH;\n', '    uint256 public transactions;\n', '    \n', '    struct RocordInfo {\n', '        uint256 totalETH;\n', '        uint256 transactions;\n', '        uint256 totalTD;\n', '    }\n', '    mapping(address=>RocordInfo) public swapInfo;\n', '    \n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'TDRouter: Dealline too low');\n", '        _;\n', '    }\n', '    \n', '    modifier onlyAdmin () {\n', "        require(msg.sender == admin, 'You are not admin.');\n", '        _;\n', '    }\n', '    \n', '    function addTokenPair(address tokenA, address tokenB, uint256 _totalETH, uint256 _totalTD, uint256 _transactions) external onlyAdmin {\n', '        tokenAd[tokenA] = tokenB; // taokenA is real token,such like DAI USDT,tokenB is TD-DAI/TD-USDT\n', '        swapInfo[tokenA].totalETH = _totalETH.mul(1e18);\n', '        swapInfo[tokenA].totalTD = _totalTD.mul(1e18); \n', '        swapInfo[tokenA].transactions = _transactions;\n', '        totalETH = totalETH.add(_totalETH);\n', '    }\n', '\n', '    constructor() public {\n', '        factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '        WETH    = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '        admin = 0xAB4537a2BF87E9F3B1CE44590fd0d67C48f7c95a;\n', '        tradeFeeScale = 5;  // unit: 1/10000\n', '    }\n', '    \n', '    \n', '    event print(string str, uint256 a);\n', '    event printadd(string str,address a);\n', '\n', '    receive() external payable {\n', '    }\n', '    \n', '    \n', '    function dividend() public onlyAdmin {\n', '        uint256 bonus;\n', '        address payable holder;\n', '        uint256 scale;\n', '        require(msg.sender == admin, "TDrouter: The function you requested does not exist");\n', '\n', '        uint256 amount = address(this).balance;\n', '        \n', "        require(amount>0,'ShareHolder: Invaild amount');\n", '        \n', '        holder = 0x2Dc11a0A66810cd9ff57ef5c852284A6E3B394eb;\n', '        scale  = 90;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x0B815939cF211AE89229e79C175d04C824293dCb;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x18d98Da67be252479393481c8ECd96f50DBDa69f;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0xd5683465475418576bB1209531cAD625f5CE20b6;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x223055E9F4015f7f20d1d66abb098BEB89d0B366;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x5a4472C8371425A6611DEBA611E83d9844328c72;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x7f588fC81FdE30b0CCC569E06D39b42fe5deaA48;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x5d1dd7C0145587F837bB1Fa35CD83dB0b2BC0D75;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x62c0007cd68512EF6c38C3a648Bb74752873c090;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0xAdd411fa15f86425bfc820F6Cd0bCBE750F3D327;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '        \n', '        holder = 0x025c00265CA53553038d493d4caA4D18c481851a;\n', '        scale  = 1;\n', '        bonus = amount.mul(scale).div(uint256(100));\n', '        holder.transfer(bonus);\n', '    }\n', '\n', '    function _userReward(address token, address to, uint value) internal {\n', '        require (value > 0 && to != address(0), "TDrouter: Address or value error.");\n', '        require(tokenAd[token] != address(0), "TDrouter: Token address error.");\n', '        uint amount = value.mul(swapInfo[token].totalTD).div(swapInfo[token].totalETH);\n', '        address userTdAdd = tokenAd[token];\n', '        TransferHelper.safeTransfer(userTdAdd, to , amount);\n', '        swapInfo[token].totalTD = swapInfo[token].totalTD.add(amount);\n', '    }\n', '    \n', '    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = UniswapV2Library.sortTokens(input, output);\n', '            uint amountOut = amounts[i + 1];\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n', '            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n', '                amount0Out, amount1Out, to, new bytes(0)\n', '            );\n', '        }\n', '    }\n', '    \n', '    event Buy(uint256 amountOutMin, address path,address to, uint256 deadline);\n', '    event Sell(uint amountIn, uint amountOutMin, address path,address to, uint256 deadline);\n', '    \n', '    function buy(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        payable\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[0] == WETH, 'TDRouter: INVALID_PATH');\n", '        \n', '        uint unm = msg.value;\n', '        uint fz = unm.mul(tradeFeeScale);\n', '        uint fee= fz.div(10000);\n', '       \n', '        amounts = UniswapV2Library.getAmountsOut(factory, msg.value - fee, path);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'TDRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n', '        _swap(amounts, path, to);\n', '        {\n', '            totalETH = totalETH.add(amounts[0]);\n', '            transactions++;\n', '            swapInfo[path[1]].totalETH = swapInfo[path[1]].totalETH.add(amounts[0]);\n', '            swapInfo[path[1]].transactions++;\n', '            uint val = msg.value;\n', '            _userReward(path[1], to, val);  //send TD token.\n', '        }\n', '        emit Buy(amountOutMin,path[1],to,deadline);\n', '    }\n', '\n', '\n', '    function sell(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        virtual\n', '        ensure(deadline)\n', '        returns (uint[] memory amounts)\n', '    {\n', "        require(path[path.length - 1] == WETH, 'TDRouter: INVALID_PATH');\n", '        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'TDRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        TransferHelper.safeTransferFrom(\n', '            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this));\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '\n', '        uint unm = amounts[amounts.length - 1];\n', '        uint fz = unm.mul(tradeFeeScale);\n', '        uint fee= fz.div(10000);\n', '\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1] - fee);  //transfer ETH for user.\n', '        {\n', '            totalETH = totalETH.add(amounts[amounts.length - 1]);\n', '            transactions++;\n', '            swapInfo[path[0]].totalETH = swapInfo[path[0]].totalETH.add(amounts[amounts.length - 1]);\n', '            swapInfo[path[0]].transactions++;\n', '            _userReward(path[0], to, amounts[amounts.length - 1]);  //reward trander.\n', '        }\n', '        emit Sell(amountIn, amountOutMin,path[0],to,deadline);\n', '    }\n', '\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB) {\n', '        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n', '    }\n', '\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n', '        public\n', '        pure\n', '        returns (uint amountOut)\n', '    {\n', '        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n', '    }\n', '\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n', '        public\n', '        pure\n', '        returns (uint amountIn)\n', '    {\n', '        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n', '    }\n', '\n', '    function getAmountsOut(uint amountIn, address[] memory path)\n', '        public\n', '        view\n', '        returns (uint[] memory amounts)\n', '    {\n', '        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '    }\n', '\n', '    function getAmountsIn(uint amountOut, address[] memory path)\n', '        public\n', '        view\n', '        returns (uint[] memory amounts)\n', '    {\n', '        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n', '    }\n', '}\n', '\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '       function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}']