['// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', "// import '/Users/train/Documents/Work/Decent/unitrade/unitrade/node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', '// pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/UniTradeIncinerator.sol\n', '\n', '// pragma solidity ^0.6.6;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";\n', '// import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";\n', '\n', 'contract UniTradeIncinerator {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant UINT256_MAX = ~uint256(0);\n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    address public immutable unitrade;\n', '    uint256 lastIncinerated;\n', '\n', '    event UniTradeToBurn(uint256 etherIn);\n', '    event UniTradeBurned(uint256 etherIn, uint256 tokensBurned);\n', '\n', '    constructor(IUniswapV2Router02 _uniswapV2Router, address _unitrade) public {\n', '        uniswapV2Router = _uniswapV2Router;\n', '        unitrade = _unitrade;\n', '        lastIncinerated = block.timestamp;\n', '    }\n', '\n', '    function burn() external payable returns (bool) {\n', '        require(msg.value > 0, "Nothing to burn");\n', '\n', '        emit UniTradeToBurn(msg.value);\n', '\n', '        if (block.timestamp < lastIncinerated + 1 days) {\n', '            return true;\n', '        }\n', '\n', '        lastIncinerated = block.timestamp;\n', '\n', '        address[] memory _tokenPair = new address[](2);\n', '        _tokenPair[0] = uniswapV2Router.WETH();\n', '        _tokenPair[1] = unitrade;\n', '\n', '        uint256[] memory _swapResult = uniswapV2Router.swapExactETHForTokens{\n', '            value: address(this).balance\n', '        }(\n', '            0, // take any\n', '            _tokenPair,\n', '            address(this),\n', '            UINT256_MAX\n', '        );\n', '\n', '        emit UniTradeBurned(_swapResult[0], _swapResult[1]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/IUniTradeStaker.sol\n', '\n', '// pragma solidity ^0.6.6;\n', '\n', 'interface IUniTradeStaker\n', '{\n', '    function deposit() external payable;\n', '}\n', '\n', '\n', '// Root file: contracts/UniTradeOrderBook.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '// import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";\n', '// import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";\n', '// import "@uniswap/lib/contracts/libraries/TransferHelper.sol";\n', '// import "contracts/UniTradeIncinerator.sol";\n', '// import "contracts/IUniTradeStaker.sol";\n', '\n', 'contract UniTradeOrderBook is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant UINT256_MAX = ~uint256(0);\n', '    IUniswapV2Router02 public immutable uniswapV2Router;\n', '    IUniswapV2Factory public immutable uniswapV2Factory;\n', '    UniTradeIncinerator public immutable incinerator;\n', '    IUniTradeStaker public staker;\n', '    uint16 public feeMul;\n', '    uint16 public feeDiv;\n', '    uint16 public splitMul;\n', '    uint16 public splitDiv;\n', '\n', '    enum OrderType {TokensForTokens, EthForTokens, TokensForEth}\n', '    enum OrderState {Placed, Cancelled, Executed}\n', '\n', '    struct Order {\n', '        OrderType orderType;\n', '        address payable maker;\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint256 amountInOffered;\n', '        uint256 amountOutExpected;\n', '        uint256 executorFee;\n', '        uint256 totalEthDeposited;\n', '        uint256 activeOrderIndex;\n', '        OrderState orderState;\n', '        bool deflationary;\n', '    }\n', '\n', '    uint256 private orderNumber;\n', '    uint256[] private activeOrders;\n', '    mapping(uint256 => Order) private orders;\n', '    mapping(address => uint256[]) private ordersForAddress;\n', '\n', '    event OrderPlaced(\n', '        uint256 indexed orderId,\n', '        OrderType orderType,\n', '        address payable indexed maker,\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint256 amountInOffered,\n', '        uint256 amountOutExpected,\n', '        uint256 executorFee,\n', '        uint256 totalEthDeposited\n', '    );\n', '    event OrderUpdated(\n', '        uint256 indexed orderId,\n', '        uint256 amountInOffered,\n', '        uint256 amountOutExpected,\n', '        uint256 executorFee\n', '    );\n', '    event OrderCancelled(uint256 indexed orderId);\n', '    event OrderExecuted(\n', '        uint256 indexed orderId,\n', '        address indexed executor,\n', '        uint256[] amounts,\n', '        uint256 unitradeFee\n', '    );\n', '    event StakerUpdated(address newStaker);\n', '\n', '    modifier exists(uint256 orderId) {\n', '        require(orders[orderId].maker != address(0), "Order not found");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        IUniswapV2Router02 _uniswapV2Router,\n', '        UniTradeIncinerator _incinerator,\n', '        IUniTradeStaker _staker,\n', '        uint16 _feeMul,\n', '        uint16 _feeDiv,\n', '        uint16 _splitMul,\n', '        uint16 _splitDiv\n', '    ) public {\n', '        uniswapV2Router = _uniswapV2Router;\n', '        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\n', '        incinerator = _incinerator;\n', '        staker = _staker;\n', '        feeMul = _feeMul;\n', '        feeDiv = _feeDiv;\n', '        splitMul = _splitMul;\n', '        splitDiv = _splitDiv;\n', '    }\n', '\n', '    function placeOrder(\n', '        OrderType orderType,\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint256 amountInOffered,\n', '        uint256 amountOutExpected,\n', '        uint256 executorFee\n', '    ) external payable nonReentrant returns (uint256) {\n', '        require(amountInOffered > 0, "Invalid offered amount");\n', '        require(amountOutExpected > 0, "Invalid expected amount");\n', '        require(executorFee > 0, "Invalid executor fee");\n', '\n', '        address _wethAddress = uniswapV2Router.WETH();\n', '        bool deflationary = false;\n', '\n', '        if (orderType != OrderType.EthForTokens) {\n', '            require(\n', '                msg.value == executorFee,\n', '                "Transaction value must match executor fee"\n', '            );\n', '            if (orderType == OrderType.TokensForEth) {\n', '                require(tokenOut == _wethAddress, "Token out must be WETH");\n', '            } else {\n', '                getPair(tokenIn, _wethAddress);\n', '            }\n', '            uint256 beforeBalance = IERC20(tokenIn).balanceOf(address(this));\n', '            // transfer tokenIn funds in necessary for order execution\n', '            TransferHelper.safeTransferFrom(\n', '                tokenIn,\n', '                msg.sender,\n', '                address(this),\n', '                amountInOffered\n', '            );\n', '            uint256 afterBalance = IERC20(tokenIn).balanceOf(address(this));\n', '            if (afterBalance.sub(beforeBalance) != amountInOffered) {\n', '                amountInOffered = afterBalance.sub(beforeBalance);\n', '                deflationary = true;\n', '            }\n', '            require(amountInOffered > 0, "Invalid final offered amount");\n', '        } else {\n', '            require(tokenIn == _wethAddress, "Token in must be WETH");\n', '            require(\n', '                msg.value == amountInOffered.add(executorFee),\n', '                "Transaction value must match offer and fee"\n', '            );\n', '        }\n', '\n', '        // get canonical uniswap pair address\n', '        address _pairAddress = getPair(tokenIn, tokenOut);\n', '\n', '        (uint256 _orderId, Order memory _order) = registerOrder(\n', '            orderType,\n', '            msg.sender,\n', '            tokenIn,\n', '            tokenOut,\n', '            _pairAddress,\n', '            amountInOffered,\n', '            amountOutExpected,\n', '            executorFee,\n', '            msg.value,\n', '            deflationary\n', '        );\n', '\n', '        emit OrderPlaced(\n', '            _orderId,\n', '            _order.orderType,\n', '            _order.maker,\n', '            _order.tokenIn,\n', '            _order.tokenOut,\n', '            _order.amountInOffered,\n', '            _order.amountOutExpected,\n', '            _order.executorFee,\n', '            _order.totalEthDeposited\n', '        );\n', '\n', '        return _orderId;\n', '    }\n', '\n', '    function updateOrder(\n', '        uint256 orderId,\n', '        uint256 amountInOffered,\n', '        uint256 amountOutExpected,\n', '        uint256 executorFee\n', '    ) external payable exists(orderId) nonReentrant returns (bool) {\n', '        Order memory _updatingOrder = orders[orderId];\n', '        require(msg.sender == _updatingOrder.maker, "Permission denied");\n', '        require(\n', '            _updatingOrder.orderState == OrderState.Placed,\n', '            "Cannot update order"\n', '        );\n', '        require(amountInOffered > 0, "Invalid offered amount");\n', '        require(amountOutExpected > 0, "Invalid expected amount");\n', '        require(executorFee > 0, "Invalid executor fee");\n', '\n', '        if (_updatingOrder.orderType == OrderType.EthForTokens) {\n', '            uint256 newTotal = amountInOffered.add(executorFee);\n', '            if (newTotal > _updatingOrder.totalEthDeposited) {\n', '                require(\n', '                    msg.value == newTotal.sub(_updatingOrder.totalEthDeposited),\n', '                    "Additional deposit must match"\n', '                );\n', '            } else if (newTotal < _updatingOrder.totalEthDeposited) {\n', '                TransferHelper.safeTransferETH(\n', '                    _updatingOrder.maker,\n', '                    _updatingOrder.totalEthDeposited.sub(newTotal)\n', '                );\n', '            }\n', '            _updatingOrder.totalEthDeposited = newTotal;\n', '        } else {\n', '            if (executorFee > _updatingOrder.executorFee) {\n', '                require(\n', '                    msg.value == executorFee.sub(_updatingOrder.executorFee),\n', '                    "Additional fee must match"\n', '                );\n', '            } else if (executorFee < _updatingOrder.executorFee) {\n', '                TransferHelper.safeTransferETH(\n', '                    _updatingOrder.maker,\n', '                    _updatingOrder.executorFee.sub(executorFee)\n', '                );\n', '            }\n', '            _updatingOrder.totalEthDeposited = executorFee;\n', '            if (amountInOffered > _updatingOrder.amountInOffered) {\n', '                uint256 beforeBalance = IERC20(_updatingOrder.tokenIn)\n', '                    .balanceOf(address(this));\n', '                TransferHelper.safeTransferFrom(\n', '                    _updatingOrder.tokenIn,\n', '                    msg.sender,\n', '                    address(this),\n', '                    amountInOffered.sub(_updatingOrder.amountInOffered)\n', '                );\n', '                uint256 afterBalance = IERC20(_updatingOrder.tokenIn).balanceOf(\n', '                    address(this)\n', '                );\n', '                amountInOffered = _updatingOrder.amountInOffered.add(\n', '                    afterBalance.sub(beforeBalance)\n', '                );\n', '            } else if (amountInOffered < _updatingOrder.amountInOffered) {\n', '                TransferHelper.safeTransfer(\n', '                    _updatingOrder.tokenIn,\n', '                    _updatingOrder.maker,\n', '                    _updatingOrder.amountInOffered.sub(amountInOffered)\n', '                );\n', '            }\n', '        }\n', '\n', '        // update order record\n', '        _updatingOrder.amountInOffered = amountInOffered;\n', '        _updatingOrder.amountOutExpected = amountOutExpected;\n', '        _updatingOrder.executorFee = executorFee;\n', '        orders[orderId] = _updatingOrder;\n', '\n', '        emit OrderUpdated(\n', '            orderId,\n', '            amountInOffered,\n', '            amountOutExpected,\n', '            executorFee\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function cancelOrder(uint256 orderId)\n', '        external\n', '        exists(orderId)\n', '        nonReentrant\n', '        returns (bool)\n', '    {\n', '        Order memory _cancellingOrder = orders[orderId];\n', '        require(msg.sender == _cancellingOrder.maker, "Permission denied");\n', '        require(\n', '            _cancellingOrder.orderState == OrderState.Placed,\n', '            "Cannot cancel order"\n', '        );\n', '\n', '        proceedOrder(orderId, OrderState.Cancelled);\n', '\n', '        // Revert token allocation, funds, and fees\n', '        if (_cancellingOrder.orderType != OrderType.EthForTokens) {\n', '            TransferHelper.safeTransfer(\n', '                _cancellingOrder.tokenIn,\n', '                _cancellingOrder.maker,\n', '                _cancellingOrder.amountInOffered\n', '            );\n', '        }\n', '\n', '        TransferHelper.safeTransferETH(\n', '            _cancellingOrder.maker,\n', '            _cancellingOrder.totalEthDeposited\n', '        );\n', '\n', '        emit OrderCancelled(orderId);\n', '        return true;\n', '    }\n', '\n', '    function executeOrder(uint256 orderId)\n', '        external\n', '        exists(orderId)\n', '        nonReentrant\n', '        returns (uint256[] memory amounts)\n', '    {\n', '        Order memory _executingOrder = orders[orderId];\n', '        require(\n', '            _executingOrder.orderState == OrderState.Placed,\n', '            "Cannot execute order"\n', '        );\n', '\n', '        proceedOrder(orderId, OrderState.Executed);\n', '\n', '        address[] memory _addressPair = createPair(\n', '            _executingOrder.tokenIn,\n', '            _executingOrder.tokenOut\n', '        );\n', '        uint256 unitradeFee = 0;\n', '\n', '        if (_executingOrder.orderType == OrderType.TokensForTokens) {\n', '            TransferHelper.safeApprove(\n', '                _executingOrder.tokenIn,\n', '                address(uniswapV2Router),\n', '                _executingOrder.amountInOffered\n', '            );\n', '            uint256 _tokenFee = _executingOrder.amountInOffered.mul(feeMul).div(\n', '                feeDiv\n', '            );\n', '            if (_executingOrder.deflationary) {\n', '                uint256 beforeBalance = IERC20(_executingOrder.tokenOut)\n', '                    .balanceOf(_executingOrder.maker);\n', '                uniswapV2Router\n', '                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '                    _executingOrder.amountInOffered.sub(_tokenFee),\n', '                    _executingOrder.amountOutExpected,\n', '                    _addressPair,\n', '                    _executingOrder.maker,\n', '                    UINT256_MAX\n', '                );\n', '                uint256 afterBalance = IERC20(_executingOrder.tokenOut)\n', '                    .balanceOf(_executingOrder.maker);\n', '                amounts = new uint256[](2);\n', '                amounts[0] = _executingOrder.amountInOffered.sub(_tokenFee);\n', '                amounts[1] = afterBalance.sub(beforeBalance);\n', '            } else {\n', '                amounts = uniswapV2Router.swapExactTokensForTokens(\n', '                    _executingOrder.amountInOffered.sub(_tokenFee),\n', '                    _executingOrder.amountOutExpected,\n', '                    _addressPair,\n', '                    _executingOrder.maker,\n', '                    UINT256_MAX\n', '                );\n', '            }\n', '\n', '            if (_tokenFee > 0) {\n', '                // Convert x% of tokens to ETH as fee\n', '                address[] memory _wethPair = createPair(\n', '                    _executingOrder.tokenIn,\n', '                    uniswapV2Router.WETH()\n', '                );\n', '                if (_executingOrder.deflationary) {\n', '                    uint256 beforeBalance = IERC20(uniswapV2Router.WETH())\n', '                        .balanceOf(address(this));\n', '                    uniswapV2Router\n', '                        .swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '                        _tokenFee,\n', '                        0, //take any\n', '                        _wethPair,\n', '                        address(this),\n', '                        UINT256_MAX\n', '                    );\n', '                    uint256 afterBalance = IERC20(uniswapV2Router.WETH())\n', '                        .balanceOf(address(this));\n', '                    unitradeFee = afterBalance.sub(beforeBalance);\n', '                } else {\n', '                    uint256[] memory _ethSwapResult = uniswapV2Router\n', '                        .swapExactTokensForETH(\n', '                        _tokenFee,\n', '                        0, //take any\n', '                        _wethPair,\n', '                        address(this),\n', '                        UINT256_MAX\n', '                    );\n', '                    unitradeFee = _ethSwapResult[1];\n', '                }\n', '            }\n', '        } else if (_executingOrder.orderType == OrderType.TokensForEth) {\n', '            TransferHelper.safeApprove(\n', '                _executingOrder.tokenIn,\n', '                address(uniswapV2Router),\n', '                _executingOrder.amountInOffered\n', '            );\n', '            if (_executingOrder.deflationary) {\n', '                uint256 beforeBalance = address(this).balance;\n', '                uniswapV2Router\n', '                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '                    _executingOrder.amountInOffered,\n', '                    _executingOrder.amountOutExpected,\n', '                    _addressPair,\n', '                    address(this),\n', '                    UINT256_MAX\n', '                );\n', '                uint256 afterBalance = address(this).balance;\n', '                amounts = new uint256[](2);\n', '                amounts[0] = _executingOrder.amountInOffered;\n', '                amounts[1] = afterBalance.sub(beforeBalance);\n', '            } else {\n', '                amounts = uniswapV2Router.swapExactTokensForETH(\n', '                    _executingOrder.amountInOffered,\n', '                    _executingOrder.amountOutExpected,\n', '                    _addressPair,\n', '                    address(this),\n', '                    UINT256_MAX\n', '                );\n', '            }\n', '\n', '            unitradeFee = amounts[1].mul(feeMul).div(feeDiv);\n', '            if (amounts[1].sub(unitradeFee) > 0) {\n', '                // Transfer to maker after post swap fee split\n', '                TransferHelper.safeTransferETH(\n', '                    _executingOrder.maker,\n', '                    amounts[1].sub(unitradeFee)\n', '                );\n', '            }\n', '        } else if (_executingOrder.orderType == OrderType.EthForTokens) {\n', '            // Subtract fee from initial swap\n', '            uint256 amountEthOffered = _executingOrder.totalEthDeposited.sub(\n', '                _executingOrder.executorFee\n', '            );\n', '            unitradeFee = amountEthOffered.mul(feeMul).div(feeDiv);\n', '\n', '            uint256 beforeBalance = IERC20(_executingOrder.tokenOut).balanceOf(\n', '                _executingOrder.maker\n', '            );\n', '            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n', '                value: amountEthOffered.sub(unitradeFee)\n', '            }(\n', '                _executingOrder.amountOutExpected,\n', '                _addressPair,\n', '                _executingOrder.maker,\n', '                UINT256_MAX\n', '            );\n', '            uint256 afterBalance = IERC20(_executingOrder.tokenOut).balanceOf(\n', '                _executingOrder.maker\n', '            );\n', '            amounts = new uint256[](2);\n', '            amounts[0] = amountEthOffered.sub(unitradeFee);\n', '            amounts[1] = afterBalance.sub(beforeBalance);\n', '        }\n', '\n', '        // Transfer fee to incinerator/staker\n', '        if (unitradeFee > 0) {\n', '            uint256 burnAmount = unitradeFee.mul(splitMul).div(splitDiv);\n', '            if (burnAmount > 0) {\n', '                incinerator.burn{value: burnAmount}(); //no require\n', '            }\n', '            staker.deposit{value: unitradeFee.sub(burnAmount)}(); //no require\n', '        }\n', '\n', '        // transfer fee to executor\n', '        TransferHelper.safeTransferETH(msg.sender, _executingOrder.executorFee);\n', '\n', '        emit OrderExecuted(orderId, msg.sender, amounts, unitradeFee);\n', '    }\n', '\n', '    function registerOrder(\n', '        OrderType orderType,\n', '        address payable maker,\n', '        address tokenIn,\n', '        address tokenOut,\n', '        address pairAddress,\n', '        uint256 amountInOffered,\n', '        uint256 amountOutExpected,\n', '        uint256 executorFee,\n', '        uint256 totalEthDeposited,\n', '        bool deflationary\n', '    ) internal returns (uint256 orderId, Order memory) {\n', '        uint256 _orderId = orderNumber;\n', '        orderNumber++;\n', '\n', '        // create order entries\n', '        Order memory _order = Order({\n', '            orderType: orderType,\n', '            maker: maker,\n', '            tokenIn: tokenIn,\n', '            tokenOut: tokenOut,\n', '            amountInOffered: amountInOffered,\n', '            amountOutExpected: amountOutExpected,\n', '            executorFee: executorFee,\n', '            totalEthDeposited: totalEthDeposited,\n', '            activeOrderIndex: activeOrders.length,\n', '            orderState: OrderState.Placed,\n', '            deflationary: deflationary\n', '        });\n', '\n', '        activeOrders.push(_orderId);\n', '        orders[_orderId] = _order;\n', '        ordersForAddress[maker].push(_orderId);\n', '        ordersForAddress[pairAddress].push(_orderId);\n', '\n', '        return (_orderId, _order);\n', '    }\n', '\n', '    function proceedOrder(uint256 orderId, OrderState nextState)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        Order memory _proceedingOrder = orders[orderId];\n', '        require(\n', '            _proceedingOrder.orderState == OrderState.Placed,\n', '            "Cannot proceed order"\n', '        );\n', '\n', '        if (activeOrders.length > 1) {\n', '            uint256 _availableIndex = _proceedingOrder.activeOrderIndex;\n', '            uint256 _lastOrderId = activeOrders[activeOrders.length - 1];\n', '            Order memory _lastOrder = orders[_lastOrderId];\n', '            _lastOrder.activeOrderIndex = _availableIndex;\n', '            orders[_lastOrderId] = _lastOrder;\n', '            activeOrders[_availableIndex] = _lastOrderId;\n', '        }\n', '\n', '        activeOrders.pop();\n', '        _proceedingOrder.orderState = nextState;\n', "        _proceedingOrder.activeOrderIndex = UINT256_MAX; // indicate that it's not active\n", '        orders[orderId] = _proceedingOrder;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        address _pairAddress = uniswapV2Factory.getPair(tokenA, tokenB);\n', '        require(_pairAddress != address(0), "Unavailable pair address");\n', '        return _pairAddress;\n', '    }\n', '\n', '    function getOrder(uint256 orderId)\n', '        external\n', '        view\n', '        exists(orderId)\n', '        returns (\n', '            OrderType orderType,\n', '            address payable maker,\n', '            address tokenIn,\n', '            address tokenOut,\n', '            uint256 amountInOffered,\n', '            uint256 amountOutExpected,\n', '            uint256 executorFee,\n', '            uint256 totalEthDeposited,\n', '            OrderState orderState,\n', '            bool deflationary\n', '        )\n', '    {\n', '        Order memory _order = orders[orderId];\n', '        return (\n', '            _order.orderType,\n', '            _order.maker,\n', '            _order.tokenIn,\n', '            _order.tokenOut,\n', '            _order.amountInOffered,\n', '            _order.amountOutExpected,\n', '            _order.executorFee,\n', '            _order.totalEthDeposited,\n', '            _order.orderState,\n', '            _order.deflationary\n', '        );\n', '    }\n', '\n', '    function updateStaker(IUniTradeStaker newStaker) external onlyOwner {\n', '        staker = newStaker;\n', '        emit StakerUpdated(address(newStaker));\n', '    }\n', '\n', '    function updateFee(uint16 _feeMul, uint16 _feeDiv) external onlyOwner {\n', '        require(_feeMul < _feeDiv, "!fee");\n', '        feeMul = _feeMul;\n', '        feeDiv = _feeDiv;\n', '    }\n', '\n', '    function updateSplit(uint16 _splitMul, uint16 _splitDiv)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_splitMul < _splitDiv, "!split");\n', '        splitMul = _splitMul;\n', '        splitDiv = _splitDiv;\n', '    }\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        address[] memory _addressPair = new address[](2);\n', '        _addressPair[0] = tokenA;\n', '        _addressPair[1] = tokenB;\n', '        return _addressPair;\n', '    }\n', '\n', '    function getActiveOrdersLength() external view returns (uint256) {\n', '        return activeOrders.length;\n', '    }\n', '\n', '    function getActiveOrderId(uint256 index) external view returns (uint256) {\n', '        return activeOrders[index];\n', '    }\n', '\n', '    function getOrdersForAddressLength(address _address)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ordersForAddress[_address].length;\n', '    }\n', '\n', '    function getOrderIdForAddress(address _address, uint256 index)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ordersForAddress[_address][index];\n', '    }\n', '\n', '    receive() external payable {} // to receive ETH from Uniswap\n', '}']