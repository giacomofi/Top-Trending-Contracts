['pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', 'contract Sonergy_Survey_System_v1 is Ownable{\n', 'address private sonergyTokenAddress;\n', 'address private messenger;\n', 'enum ChangeTypes{ SURVEY, REGISTRATION, ADVERT, FEE }\n', 'mapping (uint256 => uint256) private surveyPlans;\n', 'mapping (uint256 => uint256) private advertPlans;\n', 'mapping(address => bool) isAValidator;\n', '\n', 'uint public fees;\n', 'uint public validatorRegistrationFee;\n', '\n', '     struct ValidatedAnswers{\n', '      uint participantID;\n', '      uint[] validators;\n', '      uint surveyID;\n', '      address messenger;\n', '    }\n', 'ValidatedAnswers[] validatedAns; \n', 'mapping(uint => ValidatedAnswers[]) listOfValidatedAns;\n', 'using SafeMath for uint256;\n', '\n', 'constructor(address _sonergyTokenAddress, uint _fee, uint _validatorRegistrationFee) public{\n', '   sonergyTokenAddress = _sonergyTokenAddress;\n', '   fees = _fee;\n', '   validatorRegistrationFee = _validatorRegistrationFee;\n', '   \n', '}\n', 'event PriceChanged(address initiator, uint _from, uint _to, uint _duration, ChangeTypes _type);\n', 'event NewValidator(uint _userID, address _validator);\n', 'event ValidatedQuestionByUser(uint[] _validators, uint _participantID, uint _survey_id, uint _newID);\n', 'event Paid(address creator, uint amount, uint fee, uint _duration, uint survey_id, ChangeTypes _type);\n', 'event MessengerChanged(address _from, address _to);\n', 'modifier onlyMessenger() {\n', '        require(msg.sender == messenger, "caller is not a messenger");\n', '        _;\n', '}\n', '\n', '\n', 'function payForSurvey(uint256 survey_id, uint _duration) public {\n', 'IERC20 sonergyToken = IERC20(sonergyTokenAddress);\n', 'uint amount = surveyPlans[_duration];\n', 'require(amount > 0, "Invalid plan");\n', 'uint fee = uint(int256(amount) / int256(10000) * int256(fees));\n', 'require(sonergyToken.allowance(msg.sender, address(this)) >= amount.add(fee), "Non-sufficient funds");\n', 'require(sonergyToken.transferFrom(msg.sender, address(this), amount.add(fee)), "Fail to tranfer fund");\n', 'emit Paid(msg.sender, amount, fee, _duration, survey_id,  ChangeTypes.SURVEY);\n', '\n', '}\n', '\n', 'function payForAdvert(uint256 advert_id, uint _duration) public {\n', 'IERC20 sonergyToken = IERC20(sonergyTokenAddress);\n', 'uint amount = advertPlans[_duration];\n', 'require(amount > 0, "Invalid plan");\n', '\n', 'require(sonergyToken.allowance(msg.sender, address(this)) >= amount, "Non-sufficient funds");\n', 'require(sonergyToken.transferFrom(msg.sender, address(this), amount), "Fail to tranfer fund");\n', 'emit Paid(msg.sender, amount,0, _duration, advert_id, ChangeTypes.ADVERT);\n', '\n', '}\n', '\n', '\n', 'function updateSurveyfee(uint256 _fee) public onlyOwner{\n', '    uint256 currentSurveyFee = fees;\n', '    fees = _fee;\n', '    emit PriceChanged(msg.sender, currentSurveyFee, _fee, 0, ChangeTypes.FEE);\n', '}\n', '\n', 'function updateRegistrationFee(uint256 _fee) public onlyOwner{\n', '    uint256 currentRegistrationFee = validatorRegistrationFee;\n', '    validatorRegistrationFee = _fee;\n', '    emit PriceChanged(msg.sender, currentRegistrationFee, _fee, 0, ChangeTypes.REGISTRATION);\n', '}\n', '\n', 'function updateSurveyPlan(uint256 _price, uint _duration) public onlyOwner{\n', '    uint256 currentSurveyPlanPrice = surveyPlans[_duration];\n', '    surveyPlans[_duration] = _price;\n', '    emit PriceChanged(msg.sender, currentSurveyPlanPrice, _price, _duration, ChangeTypes.SURVEY);\n', '}\n', '\n', 'function updateAdvertPlan(uint256 _price, uint _duration) public onlyOwner{\n', '    uint256 currentAdvertPlanPrice = advertPlans[_duration];\n', '     advertPlans[_duration] = _price;\n', '     emit PriceChanged(msg.sender, currentAdvertPlanPrice, _price, _duration, ChangeTypes.ADVERT);\n', '   \n', '}\n', '\n', '\n', 'function setMessenger(address _messenger) public onlyOwner{\n', '    address currentMessenger = messenger;\n', '    messenger = _messenger;\n', '    emit MessengerChanged(currentMessenger, _messenger);\n', '}\n', '\n', 'function withdrawEarning() public onlyOwner{\n', '    IERC20 sonergyToken = IERC20(sonergyTokenAddress);\n', '    require(sonergyToken.transfer(owner(), sonergyToken.balanceOf(address(this))), "Fail to empty vault");\n', '}\n', '\n', 'function becomeAValidator(uint _userID) public{\n', '     require(!isAValidator[msg.sender], "Already a validator");\n', '     IERC20 sonergyToken = IERC20(sonergyTokenAddress);\n', '     require(sonergyToken.allowance(msg.sender, address(this)) >= validatorRegistrationFee, "Non-sufficient funds");\n', '     require(sonergyToken.transferFrom(msg.sender, address(this), validatorRegistrationFee), "Fail to tranfer fund");\n', '     isAValidator[msg.sender] = true;\n', '     emit NewValidator(_userID, msg.sender);\n', '}\n', '\n', '\n', 'function validatedAnswers(uint _participantID, uint[] memory _validators, uint _surveyID) public onlyMessenger{\n', '    ValidatedAnswers memory _validatedAnswers = ValidatedAnswers({\n', '      participantID: _participantID,\n', '      validators: _validators,\n', '      surveyID: _surveyID,\n', '      messenger: msg.sender\n', '    });\n', '    \n', '    validatedAns.push(_validatedAnswers);\n', '    uint256 newID = validatedAns.length - 1;\n', '   emit ValidatedQuestionByUser(_validators, _participantID, _surveyID, newID);\n', '}\n', '\n', '  function getvalidatedAnswersByID(uint _id) external view returns(uint _participantID, uint[] memory _validators, uint _surveyID,  address _messenger){\n', '         ValidatedAnswers memory _validatedAnswers = validatedAns[_id];\n', '         return (_validatedAnswers.participantID, _validatedAnswers.validators,_validatedAnswers.surveyID, _validatedAnswers.messenger);\n', '     }\n', '\n', 'function getPriceOfPlan(uint _duration) public view returns (uint256 _price) {\n', '   return surveyPlans[_duration];\n', '}\n', '\n', 'function getFees() public view returns (uint256 _reg, uint256 _survey) {\n', '   return (validatorRegistrationFee, fees);\n', '}\n', '\n', '\n', 'function getPriceOfAdevert(uint _duration) public view returns (uint256 _price) {\n', '   return advertPlans[_duration];\n', '}\n', 'function setSonergyTokenAddress(address _sonergyTokenAddress) public onlyOwner{\n', '     sonergyTokenAddress = _sonergyTokenAddress;\n', '    }\n', '\n', '   \n', '\n', '    function getSonergyTokenAddress() public view returns (address _sonergyTokenAddress) {\n', '        return(sonergyTokenAddress);\n', '    }\n', '\n', '}']