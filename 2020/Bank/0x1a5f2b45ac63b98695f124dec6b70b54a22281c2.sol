['pragma solidity 0.5.17;\n', '\n', '   \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'interface tokenRecipient { \n', '    function receiveTokens(address _from, uint256 _value, bytes calldata _extraData) external;\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function _burn(address burner, uint256 _value) internal {\n', '        require(_value > 0);\n', '        require(_value <= balances[burner]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Transfer(burner, address(0), _value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function burn(uint _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '}\n', '\n', 'contract IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setMigrator(address) external;\n', '}\n', '\n', 'contract IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'contract IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'contract IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '\n', 'contract Protocore is BurnableToken, Ownable {\n', '    \n', '    event LiquidityAddition(address indexed dst, uint value);\n', '    event LPTokenClaimed(address dst, uint value);\n', '    \n', '    uint256 public contractStartTimestamp;\n', '    \n', '    address public feeDistributorAddress;\n', '    address public reserveAddress;\n', '    address public devAddress;\n', '    \n', '    uint public reserveFeePercentX100 = 20;\n', '    uint public devFeePercentX100 = 10;\n', '    uint public disburseFeePercentX100 = 100;\n', '    \n', '    uint public liquidityGenerationDuration = 3 days;\n', '    uint public adminCanDrainContractAfter = 4 days;\n', '    \n', '    IUniswapV2Router02 public uniswapRouterV2;\n', '    IUniswapV2Factory public uniswapFactory;\n', '    uint256 public lastTotalSupplyOfLPTokens;\n', '\n', '    address public tokenUniswapPair;\n', '    \n', '    mapping (address => bool) public voidFeeList;\n', '    mapping (address => bool) public voidFeeRecipientList;\n', '    \n', '    uint256 public totalLPTokensMinted;\n', '    uint256 public totalETHContributed;\n', '    uint256 public LPperETHUnit;\n', '\n', '    string public constant name = "Protocore";\n', '    string public constant symbol = "pCORE";\n', '    uint public constant decimals = 18;\n', '    // there is no problem in using * here instead of .mul()\n', '    uint256 public constant initialSupply = 10000 * (10 ** uint256(decimals));\n', '    \n', '    uint public limitBuyAmount = 50e18;\n', '    bool public isLimitBuyOn = true;\n', '    \n', '    function setLimitBuyAmount(uint _limitBuyAmount) public onlyOwner {\n', '        limitBuyAmount = _limitBuyAmount;\n', '    }\n', '    \n', '    function turnLimitBuyOff() public onlyOwner {\n', '        isLimitBuyOn = false;\n', '    }\n', '    function turnLimitBuyOn() public onlyOwner {\n', '        isLimitBuyOn = true;\n', '    }\n', '    \n', '    function canTransfer(address sender, address recipient, uint amount) public view returns(bool) {\n', '        // if pair is sending (buys are happening)\n', '        if ((isLimitBuyOn) && (sender == tokenUniswapPair) && (amount > limitBuyAmount)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function setFeeDistributor(address _feeDistributorAddress) public onlyOwner {\n', '        feeDistributorAddress = _feeDistributorAddress;\n', '    }\n', '    function setReserveAddress(address _reserveAddress) public onlyOwner {\n', '        reserveAddress = _reserveAddress;\n', '    }\n', '    function setDevAddress(address _devAddress) public onlyOwner {\n', '        devAddress = _devAddress;\n', '    }\n', '    \n', '    function setDisburseFeePercentX100(uint _disburseFeePercentX100) public onlyOwner {\n', '        disburseFeePercentX100 = _disburseFeePercentX100;\n', '    }\n', '    function setReserveFeePercentX100(uint _reserveFeePercentX100) public onlyOwner {\n', '        reserveFeePercentX100 = _reserveFeePercentX100;\n', '    }\n', '    function setDevFeePercentX100(uint _devFeePercentX100) public onlyOwner {\n', '        devFeePercentX100 = _devFeePercentX100;\n', '    }\n', '    \n', '    function editVoidFeeList(address _address, bool _noFee) public onlyOwner {\n', '        voidFeeList[_address] = _noFee;\n', '    }\n', '    function editVoidFeeRecipientList(address _address, bool _noFee) public onlyOwner {\n', '        voidFeeRecipientList[_address] = _noFee;\n', '    }\n', '    \n', '    // -------------- fee approver functions ---------------\n', '    \n', '    function sync() public {\n', '        uint256 _LPSupplyOfPairTotal = ERC20(tokenUniswapPair).totalSupply();\n', '        lastTotalSupplyOfLPTokens = _LPSupplyOfPairTotal;\n', '    }\n', '    \n', '    function calculateAmountsAfterFee(        \n', '        address sender, // unusused maby used future\n', '        address recipient, // unusued maybe use din future\n', '        uint256 amount\n', '        ) private returns (uint256 _amountToReserve, uint256 _amountToDisburse, uint256 _amountToDev) \n', '        {\n', '\n', '            uint256 _LPSupplyOfPairTotal = ERC20(tokenUniswapPair).totalSupply();\n', '\n', '            if(sender == tokenUniswapPair) \n', '                require(lastTotalSupplyOfLPTokens <= _LPSupplyOfPairTotal, "Liquidity withdrawals forbidden");\n', '\n', '\n', '            if(sender == feeDistributorAddress  \n', '                || sender == tokenUniswapPair \n', '                || voidFeeList[sender]\n', '                || voidFeeRecipientList[recipient]\n', '                || sender == address(this)\n', '                ) { // Dont have a fee when corevault is sending, or infinite loop\n', '                                     // And when pair is sending ( buys are happening, no tax on it)\n', '                _amountToReserve = 0;\n', '                _amountToDisburse = 0;\n', '                _amountToDev = 0;\n', '            } \n', '            else {\n', '                \n', '                _amountToReserve = amount.mul(reserveFeePercentX100).div(10000);\n', '                _amountToDisburse = amount.mul(disburseFeePercentX100).div(10000);\n', '                _amountToDev = amount.mul(devFeePercentX100).div(10000);\n', '                \n', '            }\n', '\n', '\n', '           lastTotalSupplyOfLPTokens = _LPSupplyOfPairTotal;\n', '        }\n', '    \n', '    // --------------- end fee approver functions ---------------\n', '    \n', '\n', '    function createUniswapPairMainnet() public returns (address) {\n', '        require(tokenUniswapPair == address(0), "Token: pool already created");\n', '        tokenUniswapPair = uniswapFactory.createPair(\n', '            address(uniswapRouterV2.WETH()),\n', '            address(this)\n', '        );\n', '        return tokenUniswapPair;\n', '    }\n', '    \n', '    \n', '    \n', '    // Constructors\n', '    constructor (address router, address factory) public {\n', '        totalSupply = initialSupply;\n', '        balances[address(this)] = initialSupply; // Send all tokens to owner\n', '        emit Transfer(address(0), address(this), initialSupply);\n', '        \n', '        contractStartTimestamp = now;\n', '        \n', '        uniswapRouterV2 = IUniswapV2Router02(router != address(0) ? router : 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // For testing\n', '        uniswapFactory = IUniswapV2Factory(factory != address(0) ? factory : 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); // For testing\n', '        createUniswapPairMainnet();\n', '    }\n', '    \n', '    function transfer(address to, uint amount) public returns (bool) {\n', '        // uint _amountToReserve = amount.mul(reserveFeePercentX100).div(10000);\n', '        // uint _amountToDisburse = amount.mul(disburseFeePercentX100).div(10000);\n', '        // uint _amountToDev = amount.mul(devFeePercentX100).div(10000);\n', '        \n', '        require(canTransfer(msg.sender, to, amount), "Limit buys are on!");\n', '        \n', '        (uint _amountToReserve, uint _amountToDisburse, uint _amountToDev) = calculateAmountsAfterFee(msg.sender, to, amount);\n', '        \n', '        \n', '        uint _amountAfterFee = amount.sub(_amountToReserve).sub(_amountToDisburse).sub(_amountToDev);\n', '\n', '        require(super.transfer(feeDistributorAddress, _amountToDisburse), "Cannot disburse rewards.");        \n', '        require(super.transfer(reserveAddress, _amountToReserve), "Cannot send tokens to reserve!");\n', '        require(super.transfer(devAddress, _amountToDev), "Cannot transfer dev fee!");\n', '\n', '        if (feeDistributorAddress != address(0) && _amountToDisburse > 0) {\n', '            tokenRecipient(feeDistributorAddress).receiveTokens(msg.sender, _amountToDisburse, "");\n', '        }\n', '        require(super.transfer(to, _amountAfterFee), "Cannot transfer tokens.");\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint amount) public returns (bool) {\n', '        \n', '        require(canTransfer(from, to, amount), "Limit buys are on!");\n', '        \n', '        require(to != address(0));\n', '        // uint _amountToReserve = amount.mul(reserveFeePercentX100).div(10000);\n', '        // uint _amountToDev = amount.mul(devFeePercentX100).div(10000);\n', '        // uint _amountToDisburse = amount.mul(disburseFeePercentX100).div(10000);\n', '        \n', '        (uint _amountToReserve, uint _amountToDisburse, uint _amountToDev) = calculateAmountsAfterFee(from, to, amount);\n', '        \n', '        \n', '        uint _amountAfterFee = amount.sub(_amountToReserve).sub(_amountToDisburse).sub(_amountToDev);\n', '        \n', '        uint256 _allowance = allowed[from][msg.sender];\n', '    \n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[from] = balances[from].sub(_amountAfterFee);\n', '        balances[to] = balances[to].add(_amountAfterFee);\n', '        \n', '        balances[from] = balances[from].sub(_amountToDisburse);\n', '        balances[feeDistributorAddress] = balances[feeDistributorAddress].add(_amountToDisburse);\n', '        \n', '        balances[from] = balances[from].sub(_amountToDev);\n', '        balances[devAddress] = balances[devAddress].add(_amountToDev);\n', '        \n', '        balances[from] = balances[from].sub(_amountToReserve);\n', '        balances[reserveAddress] = balances[reserveAddress].add(_amountToReserve);\n', '        \n', '        \n', '        allowed[from][msg.sender] = _allowance.sub(amount);\n', '        \n', '\n', '        emit Transfer(from, feeDistributorAddress, _amountToDisburse);\n', '        emit Transfer(from, reserveAddress, _amountToReserve);\n', '        emit Transfer(from, devAddress, _amountToDev);\n', '        emit Transfer(from, to, _amountAfterFee);\n', '        \n', '        if (feeDistributorAddress != address(0) && _amountToDisburse > 0) {\n', '            tokenRecipient(feeDistributorAddress).receiveTokens(msg.sender, _amountToDisburse, "");\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    // --------------- Liquidity Generation Event Scripts ---------------\n', '    \n', '    //// Liquidity generation logic\n', '    /// Steps - All tokens tat will ever exist go to this contract\n', '    /// This contract accepts ETH as payable\n', '    /// ETH is mapped to people\n', '    /// When liquidity generationevent is over veryone can call\n', '    /// the mint LP function\n', '    // which will put all the ETH and tokens inside the uniswap contract\n', '    /// without any involvement\n', '    /// This LP will go into this contract\n', '    /// And will be able to proportionally be withdrawn baed on ETH put in\n', '    /// A emergency drain function allows the contract owner to drain all ETH and tokens from this contract\n', '    /// After the liquidity generation event happened. In case something goes wrong, to send ETH back\n', '\n', '\n', '    string public liquidityGenerationParticipationAgreement = "I agree that the developers and affiliated parties of the Protocore team are not responsible for my funds";\n', '\n', '    function liquidityGenerationOngoing() public view returns (bool) {\n', '        return contractStartTimestamp.add(liquidityGenerationDuration) > block.timestamp;\n', '    }\n', '    function canAdminDrainContract() public view returns (bool) {\n', '        return contractStartTimestamp.add(adminCanDrainContractAfter) < block.timestamp;\n', '    }\n', '    \n', '    // Emergency drain in case of a bug\n', '    // Adds all funds to owner to refund people\n', '    // Designed to be as simple as possible\n', '    function emergencyDrain24hAfterLiquidityGenerationEventIsDone() public onlyOwner {\n', '        require(canAdminDrainContract(), "Liquidity generation grace period still ongoing"); // About 24h after liquidity generation happens\n', '        (bool success, ) = msg.sender.call.value(address(this).balance)("");\n', '        require(success, "Transfer failed.");\n', '        emit Transfer(address(this), msg.sender, balances[address(this)]);\n', '        balances[msg.sender] = balances[address(this)];\n', '        balances[address(this)] = 0;\n', '    }\n', '    \n', '    bool public LPGenerationCompleted;\n', '    // Sends all avaibile balances and mints LP tokens\n', '    // Possible ways this could break addressed\n', '    // 1) Multiple calls and resetting amounts - addressed with boolean\n', '    // 2) Failed WETH wrapping/unwrapping addressed with checks\n', '    // 3) Failure to create LP tokens, addressed with checks\n', '    // 4) Unacceptable division errors . Addressed with multiplications by 1e18\n', '    // 5) Pair not set - impossible since its set in constructor\n', '    function addLiquidityToUniswapPROTOCORExWETHPair() public onlyOwner {\n', '        require(liquidityGenerationOngoing() == false, "Liquidity generation onging");\n', '        require(LPGenerationCompleted == false, "Liquidity generation already finished");\n', '        totalETHContributed = address(this).balance;\n', '        IUniswapV2Pair pair = IUniswapV2Pair(tokenUniswapPair);\n', '        \n', '        //Wrap eth\n', '        address WETH = uniswapRouterV2.WETH();\n', '        IWETH(WETH).deposit.value(totalETHContributed)();\n', '        require(address(this).balance == 0 , "Transfer Failed");\n', '        IWETH(WETH).transfer(address(pair),totalETHContributed);\n', '        emit Transfer(address(this), address(pair), balances[address(this)]);\n', '        balances[address(pair)] = balances[address(this)];\n', '        balances[address(this)] = 0;\n', '        pair.mint(address(this));\n', '        totalLPTokensMinted = pair.balanceOf(address(this));\n', '        \n', '        require(totalLPTokensMinted != 0 , "LP creation failed");\n', '        LPperETHUnit = totalLPTokensMinted.mul(1e18).div(totalETHContributed); // 1e18x for  change\n', '        \n', '        require(LPperETHUnit != 0 , "LP creation failed");\n', '        LPGenerationCompleted = true;\n', '        sync();\n', '    }\n', '    \n', '    mapping (address => uint)  public ethContributed;\n', '    // Possible ways this could break addressed\n', '    // 1) No ageement to terms - added require\n', '    // 2) Adding liquidity after generaion is over - added require\n', '    // 3) Overflow from uint - impossible there isnt that much ETH aviable\n', '    // 4) Depositing 0 - not an issue it will just add 0 to tally\n', '    function addLiquidity(bool agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement) public payable {\n', '        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");\n', '        require(agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement, "No agreement provided");\n', '        ethContributed[msg.sender] += msg.value; // Overflow protection from safemath is not neded here\n', '        totalETHContributed = totalETHContributed.add(msg.value); // for front end display during LGE. This resets with definietly correct balance while calling pair.\n', '        emit LiquidityAddition(msg.sender, msg.value);\n', '    }\n', '\n', '    // Possible ways this could break addressed\n', '    // 1) Accessing before event is over and resetting eth contributed -- added require\n', '    // 2) No uniswap pair - impossible at this moment because of the LPGenerationCompleted bool\n', '    // 3) LP per unit is 0 - impossible checked at generation function\n', '    function claimLPTokens() public {\n', '        require(LPGenerationCompleted, "Event not over yet");\n', '        require(ethContributed[msg.sender] > 0 , "Nothing to claim, move along");\n', '        IUniswapV2Pair pair = IUniswapV2Pair(tokenUniswapPair);\n', '        uint256 amountLPToTransfer = ethContributed[msg.sender].mul(LPperETHUnit).div(1e18);\n', '        pair.transfer(msg.sender, amountLPToTransfer); // stored as 1e18x value for change\n', '        ethContributed[msg.sender] = 0;\n', '        emit LPTokenClaimed(msg.sender, amountLPToTransfer);\n', '    }\n', '    \n', '    // --------------- End Liquidity Generation Event Scripts ---------------\n', '    \n', '    // token recovery function\n', '    function transferAnyERC20Token(address _tokenAddress, address _to, uint _amount) public onlyOwner {\n', '        require(_tokenAddress != tokenUniswapPair, "Admin Cannot transfer out pCORE/WETH LP Tokens from this contract!");\n', '        require(canAdminDrainContract(), "Liquidity generation grace period still ongoing");\n', '        ERC20(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '    \n', '}']