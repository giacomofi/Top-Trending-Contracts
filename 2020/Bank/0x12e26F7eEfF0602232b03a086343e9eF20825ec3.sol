['pragma solidity 0.5.16;\n', '\n', 'interface ERC20Interface {\n', '    function balanceOf(address owner)  external view returns(uint256 balance);\n', '    function transfer(address to, uint value) external returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 value)  external returns(bool success);\n', '    function Exchange_Price() external view returns(uint256 actual_Price);\n', '}\n', '\n', 'contract WBCATM {\n', '\n', '    address public _owner;\n', '    address public TOKEN_SC;\n', '    address public EXCHNG;\n', '    \n', '    uint8 public Provision;\n', '    uint256 public TOKEN_PRICE;\n', '\n', '    mapping ( address => uint256 ) public Token_Safe;\n', '    mapping ( address => uint256 ) public ETH_Deposit;\n', '\n', '    event Deposit(address user, uint256 amountETH);\n', '    event Exchange(address buyer, uint256 amount, uint paid, uint provision);\n', '    event withdrawBalance(address user, uint256 balanceETH );\n', '    event calculatedAmount(uint256 amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "only Owner");\n', '        _;\n', '    }\n', '\n', '   constructor() public {\n', '        _owner = msg.sender;\n', '        TOKEN_SC = 0x79C90021A36250BcE01f11CFd847Ba30E05488B1;\n', '        TOKEN_PRICE = 0.001 ether;\n', '        Provision = 10;\n', '   }\n', '\n', '    function () external payable {\n', '        require(msg.value > 0);\n', '        ETH_Deposit[msg.sender] += msg.value;\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function deposit(uint256 amount) payable public {\n', '        require(msg.value == amount);\n', '        require(amount > 0);\n', '        ETH_Deposit[msg.sender] += msg.value;\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function exchangeToken2ETH(uint256 _amountWei) payable public {  \n', '        require(_amountWei > 0,"Value must more then 0 !");\n', '        ERC20Interface ERC20Token = ERC20Interface(TOKEN_SC);\n', '        ERC20Token.transferFrom(msg.sender, address(this), _amountWei);\n', '\n', '        Token_Safe[TOKEN_SC] = Token_Safe[TOKEN_SC] + _amountWei ;\n', '        \n', '        uint256 Prov = ((_amountWei* TOKEN_PRICE)/(10**18)) * Provision / 100 ;\n', '        uint256 amountWeiETH = ((_amountWei * TOKEN_PRICE)/(10**18)) - Prov ;\n', '        msg.sender.transfer(amountWeiETH);\n', '        emit Exchange ( msg.sender, _amountWei, amountWeiETH, Prov);\n', '    }\n', '\n', '    function withdrawETH(uint256 amountWeiETH) public payable onlyOwner {\n', '        require(amountWeiETH > 0,"Value must more then 0 !");\n', '        uint256 balanceETH;\n', '        balanceETH = address(this).balance;\n', '        require(balanceETH >= amountWeiETH);\n', '        address(uint160(msg.sender)).transfer(amountWeiETH);\n', '    }\n', '\n', '    function withdrawQPON() public onlyOwner {\n', '        require(Token_Safe[TOKEN_SC] > 0,"Token Safe is empty !");\n', '        ERC20Interface ERC20Token = ERC20Interface(TOKEN_SC);\n', '        ERC20Token.transfer(msg.sender, Token_Safe[TOKEN_SC]);\n', '        Token_Safe[TOKEN_SC] = 0;\n', '    }\n', '\n', '    function balanceOf() public onlyOwner view returns(uint256 balanceETH) {\n', '        balanceETH = address(this).balance;\n', '    }\n', '\n', '    function balanceOfToken() public view returns(uint256 balanceToken) {\n', '        balanceToken = Token_Safe[TOKEN_SC];\n', '    }\n', '\n', '    function Exchange_Price() public view returns (uint256 actual_Price) {\n', '        return TOKEN_PRICE;\n', '    }\n', '\n', '    function calcul(uint256 a, uint256 b, uint256 precision) internal pure returns (uint256 result) {\n', '        result = a*(10**precision)/b;\n', '    }\n', '\n', '    function set_TOKEN_SCAddress (address _TOKEN_SCAddress) public onlyOwner { \n', '        TOKEN_SC = _TOKEN_SCAddress;\n', '    }\n', '\n', '    function set_EXCHNGAddress (address _exchngSCAddress) public onlyOwner { \n', '        EXCHNG = _exchngSCAddress;\n', '    }\n', '\n', '    function set_Exchange_Price() public onlyOwner {\n', '        ERC20Interface ERC20Exchng = ERC20Interface(EXCHNG);\n', '        TOKEN_PRICE = ERC20Exchng.Exchange_Price();\n', '    }\n', '\n', '    function set_TokenPrice (uint256 _newPrice) public onlyOwner {\n', '        require(_newPrice > 0);\n', '        TOKEN_PRICE = _newPrice;\n', '    }\n', '\n', '    function set_Provision(uint8 setProvision) public onlyOwner {\n', '        Provision = setProvision;\n', '    }\n', '\n', '    function get_ETHDeposit(address _user) public view onlyOwner returns (uint256 BalanceOfUser){\n', '        BalanceOfUser = ETH_Deposit[_user];\n', '    }\n', '    function reset_ETHDeposit(address _user, uint256 BalanceOfUser) public onlyOwner {\n', '        ETH_Deposit[_user] = BalanceOfUser;\n', '    }\n', '}']