['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-23\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '\n', 'interface ITitanSwapV1LimitOrder {\n', '    \n', '     // event Transfer(address indexed from, address indexed to, uint value);\n', '     event Deposit(uint orderId,address indexed router,address indexed pair,address indexed user,uint amountIn,uint amountOut,uint fee);\n', '    \n', '     function setDepositAccount(address) external;\n', '     function depositExactTokenForTokenOrder(address router,address sellToken,address pair,uint amountIn,uint amountOut) external payable; \n', '     // deposit swapExactEthForTokens\n', '     function depositExactEthForTokenOrder(address router,address pair,uint amountIn,uint amountOut) external payable;\n', '      // deposit swapExactTokenForETH\n', '     function depositExactTokenForEth(address router,address sellToken,address pair,uint amountIn,uint amountOut) external payable;\n', '     \n', '     function cancelTokenOrder(uint orderId) external; \n', '   \n', '     \n', '     function executeExactTokenForTokenOrder(uint orderId, address[] calldata path, uint deadline) external;\n', '     function executeExactETHForTokenOrder(uint orderId, address[] calldata path, uint deadline) external payable;\n', '     function executeExactTokenForETHOrder(uint orderId, address[] calldata path, uint deadline) external;\n', '      \n', '     \n', '     function queryOrder(uint orderId) external view returns(address,address,address,uint,uint,uint);\n', '     function existOrder(uint orderId) external view returns(bool);\n', '     function withdrawFee(address payable to) external;\n', '     function setEthFee(uint _ethFee) external;\n', '    \n', '   \n', '    \n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface ITitanSwapV1Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '\n', 'contract TitanSwapV1LimitOrder is ITitanSwapV1LimitOrder {\n', '    \n', '    using SafeMath for uint;\n', '    address public depositAccount;\n', '    address public immutable WETH;\n', '    uint public userBalance;\n', '    mapping (uint => Order) private depositOrders;\n', '    // to deposit order count\n', '    uint public orderCount;\n', '    // total order count\n', '    uint public orderIds;\n', '    // eth fee,defualt 0.01 eth\n', '    uint public ethFee = 10000000000000000;\n', '   \n', '    constructor(address _depositAccount,address _WETH,uint _ethFee) public{\n', '        depositAccount = _depositAccount;\n', '        WETH = _WETH;\n', '        ethFee = _ethFee;\n', '    }\n', '    \n', '   \n', '    \n', '    struct Order {\n', '        bool exist;\n', '        address router;\n', '        address pair;\n', '        address payable user; // 用户地址\n', '        address sellToken;\n', '        // uint direct; // 0 或 1,默认根据pair的token地址升序排,0- token0, token1 1- token1 token0\n', '        uint amountIn;\n', '        uint amountOut;\n', '        uint ethValue;\n', '       \n', '    }\n', '    \n', '     function setDepositAccount(address _depositAccount)  external override{\n', "        require(msg.sender == depositAccount, 'TitanSwapV1: FORBIDDEN');\n", '        depositAccount = _depositAccount;\n', '    }\n', '    \n', '\n', '    function depositExactTokenForTokenOrder(address router,address sellToken,address pair,uint amountIn,uint amountOut) external override payable {\n', '        // call swap method cost fee.\n', '        uint fee = ethFee;\n', '        require(msg.value >= fee,"TitanSwapV1 : no fee enough");\n', '        orderIds = orderIds.add(1);\n', '        uint _orderId = orderIds;\n', '        // need transfer eth fee. need msg.sender send approve trx first.\n', '        TransferHelper.safeTransferFrom(sellToken,msg.sender,address(this),amountIn);\n', '       \n', '        depositOrders[_orderId] = Order(true,router,pair,msg.sender,sellToken,amountIn,amountOut,msg.value);\n', '        emit Deposit(_orderId,router,pair,msg.sender,amountIn,amountOut,msg.value);\n', '        orderCount = orderCount.add(1);\n', '        userBalance = userBalance.add(msg.value);\n', '    }\n', '    \n', '     function depositExactEthForTokenOrder(address router,address pair,uint amountIn,uint amountOut) external override payable {\n', '        uint fee = ethFee;\n', '        uint calFee = msg.value.sub(amountIn);\n', '        require(calFee >= fee,"TitanSwapV1 : no fee enough");\n', '        \n', '        orderIds = orderIds.add(1);\n', '        uint _orderId = orderIds;\n', '        \n', '        depositOrders[_orderId] = Order(true,router,pair,msg.sender,address(0),amountIn,amountOut,msg.value);\n', '        emit Deposit(_orderId,router,pair,msg.sender,amountIn,amountOut,msg.value);\n', '        orderCount = orderCount.add(1);\n', '        userBalance = userBalance.add(msg.value);\n', '     }\n', '     \n', '      function depositExactTokenForEth(address router,address sellToken,address pair,uint amountIn,uint amountOut) external override payable {\n', '        uint fee = ethFee;\n', '        require(msg.value >= fee,"TitanSwapV1 : no fee enough");\n', '        orderIds = orderIds.add(1);\n', '        uint _orderId = orderIds;\n', '        \n', '         // need transfer eth fee. need msg.sender send approve trx first.\n', '        TransferHelper.safeTransferFrom(sellToken,msg.sender,address(this),amountIn);\n', '        depositOrders[_orderId] = Order(true,router,pair,msg.sender,sellToken,amountIn,amountOut,msg.value);\n', '        emit Deposit(_orderId,router,pair,msg.sender,amountIn,amountOut,msg.value);\n', '        orderCount = orderCount.add(1);\n', '        userBalance = userBalance.add(msg.value);\n', '      }\n', '     \n', '     \n', '     \n', '    \n', '    function cancelTokenOrder(uint orderId) external override {\n', '        Order memory order = depositOrders[orderId];\n', '        require(order.exist,"order not exist.");\n', '        require(msg.sender == order.user,"no auth to cancel.");\n', '        \n', '        // revert eth\n', '        TransferHelper.safeTransferETH(order.user,order.ethValue);\n', '        \n', '        if(order.sellToken != address(0)) {\n', '            // revert token\n', '            TransferHelper.safeTransfer(order.sellToken,order.user,order.amountIn);\n', '        }\n', '        \n', '        userBalance = userBalance.sub(order.ethValue);\n', '      \n', '        delete(depositOrders[orderId]);\n', '        orderCount = orderCount.sub(1);\n', '    }\n', '    \n', '    function queryOrder(uint orderId) external override view returns(address,address,address,uint,uint,uint) {\n', '        Order memory order = depositOrders[orderId];\n', '        return (order.router,order.pair,order.user,order.amountIn,order.amountOut,order.ethValue);\n', '    }\n', '    \n', '    function existOrder(uint orderId) external override view returns(bool) {\n', '        return depositOrders[orderId].exist;\n', '    }\n', '    \n', '     function executeExactTokenForTokenOrder(\n', '        uint orderId,\n', '        address[] calldata path,\n', '        uint deadline\n', '   ) external override {\n', "       require(msg.sender == depositAccount, 'TitanSwapV1 executeOrder: FORBIDDEN');\n", '      \n', '       Order memory order = depositOrders[orderId];\n', '       require(order.exist,"order not exist!");\n', '       // approve to router \n', '       TransferHelper.safeApprove(path[0],order.router,order.amountIn);\n', '   \n', '       \n', '       delete(depositOrders[orderId]);\n', '       orderCount = orderCount.sub(1);\n', '       userBalance = userBalance.sub(order.ethValue);\n', '       \n', '       ITitanSwapV1Router01(order.router).swapExactTokensForTokens(order.amountIn,order.amountOut,path,order.user,deadline);\n', '    }\n', '    \n', '     // requires the initial amount to have already been sent to the first pair\n', '    function _swap(address factory,uint[] memory amounts, address[] memory path, address _to) internal virtual {\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = TitanSwapV1Library.sortTokens(input, output);\n', '            uint amountOut = amounts[i + 1];\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '            address to = i < path.length - 2 ? TitanSwapV1Library.pairFor(factory, output, path[i + 2]) : _to;\n', '            IUniswapV2Pair(TitanSwapV1Library.pairFor(factory, input, output)).swap(\n', '                amount0Out, amount1Out, to, new bytes(0)\n', '            );\n', '        }\n', '    }\n', '    \n', '    \n', '    function executeExactETHForTokenOrder(uint orderId, address[] calldata path, uint deadline) external override payable {\n', "        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n", "        require(msg.sender == depositAccount, 'TitanSwapV1 executeOrder: FORBIDDEN');\n", '        Order memory order = depositOrders[orderId];\n', '        require(order.exist,"order not exist!");\n', '        delete(depositOrders[orderId]);\n', '        orderCount = orderCount.sub(1);\n', '        \n', '        userBalance = userBalance.sub(order.ethValue);\n', '        address factory = ITitanSwapV1Router01(order.router).factory();\n', '        // call with msg.value = amountIn\n', "        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n", '        uint[]  memory amounts = TitanSwapV1Library.getAmountsOut(factory, order.amountIn, path);\n', "        require(amounts[amounts.length - 1] >= order.amountOut, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        \n', '        IWETH(WETH).deposit{value: order.amountIn}();\n', '         assert(IWETH(WETH).transfer(order.pair, amounts[0]));\n', '        _swap(factory,amounts, path, order.user);\n', '    }\n', '    \n', '    \n', '    function executeExactTokenForETHOrder(uint orderId, address[] calldata path, uint deadline) external override {\n', "         require(msg.sender == depositAccount, 'TitanSwapV1 executeOrder: FORBIDDEN');\n", '         \n', '        Order memory order = depositOrders[orderId];\n', '        require(order.exist,"order not exist!");\n', '        // approve to router \n', '        TransferHelper.safeApprove(path[0],order.router,order.amountIn);\n', '        delete(depositOrders[orderId]);\n', '        orderCount = orderCount.sub(1);\n', '        userBalance = userBalance.sub(order.ethValue);\n', '        ITitanSwapV1Router01(order.router).swapExactTokensForETH(order.amountIn,order.amountOut,path,order.user,deadline);\n', '    }\n', '    \n', '    \n', '    function withdrawFee(address payable to) external override {\n', "        require(msg.sender == depositAccount, 'TitanSwapV1 : FORBIDDEN');\n", '        uint amount = address(this).balance.sub(userBalance);\n', "        require(amount > 0,'TitanSwapV1 : amount = 0');\n", '        TransferHelper.safeTransferETH(to,amount);\n', '    }\n', '    \n', '    function setEthFee(uint _ethFee) external override {\n', "        require(msg.sender == depositAccount, 'TitanSwapV1 : FORBIDDEN');\n", "        require(_ethFee >= 10000000,'TitanSwapV1: fee wrong');\n", '        ethFee = _ethFee;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface ITitanSwapV1Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '    external\n', '    returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '    external\n', '    payable\n', '    returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library TitanSwapV1Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'TitanSwapV1Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'TitanSwapV1Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\n', '       pair = ITitanSwapV1Factory(factory).getPair(tokenA,tokenB);\n', '    }\n', '   \n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'TitanSwapV1Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'TitanSwapV1Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'TitanSwapV1Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'TitanSwapV1Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'TitanSwapV1Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'TitanSwapV1Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}']