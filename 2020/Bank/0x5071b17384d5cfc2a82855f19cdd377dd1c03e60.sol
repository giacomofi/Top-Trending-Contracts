['pragma solidity =0.6.6;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address owner) external view returns (uint);\n', '}\n', '\n', 'interface UniswapOracleProxy {\n', '    function quote(address tokenIn, address tokenOut, uint amountIn) external view returns (uint);\n', '}\n', '\n', 'interface UniswapRouter {\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external view returns (uint amountB);\n', '}\n', '\n', 'contract UniswapInsuranceQuote {\n', '    using SafeMath for uint;\n', '    UniswapOracleProxy constant ORACLE = UniswapOracleProxy(0x0b5A6b318c39b60e7D8462F888e7fbA89f75D02F);\n', '    UniswapRouter constant ROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    \n', '    function getReserves(IUniswapV2Pair pair, address tokenOut) public view returns (uint, uint) {\n', '        (uint _reserve0, uint _reserve1,) = pair.getReserves();\n', '        if (tokenOut == pair.token1()) {\n', '            return (_reserve0, _reserve1);\n', '        } else {\n', '            return (_reserve1, _reserve0);\n', '        }\n', '    }\n', '    \n', '    function oracleQuoteOnly(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\n', '        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\n', '        \n', '        if (_tokenIn == tokenOut) {\n', '            _tokenIn = pair.token1();\n', '            uint _temp = _amountIn;\n', '            _amountIn = _baseOut;\n', '            _baseOut = _temp;\n', '        }\n', '        return ORACLE.quote(_tokenIn, tokenOut, _amountIn);\n', '    }\n', '    \n', '    function routerQuoteOnly(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\n', '        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\n', '        (uint _reserveA, uint _reserveB) = getReserves(pair, tokenOut);\n', '        \n', '        if (_tokenIn == tokenOut) {\n', '            _tokenIn = pair.token1();\n', '            uint _temp = _amountIn;\n', '            _amountIn = _baseOut;\n', '            _baseOut = _temp;\n', '        }\n', '        return ROUTER.quote(_amountIn, _reserveA, _reserveB);\n', '    }\n', '    \n', '    function calculateReturn(IUniswapV2Pair pair, uint amountIn) public view returns (uint balanceA, uint balanceB, address tokenA) {\n', '        tokenA = pair.token0();\n', '        address _tokenB = pair.token1();\n', '        balanceA = IERC20(tokenA).balanceOf(address(pair));\n', '        balanceB = IERC20(_tokenB).balanceOf(address(pair));\n', '        uint _totalSupply = pair.totalSupply();\n', '        \n', '        balanceA = balanceA.mul(amountIn).div(_totalSupply);\n', '        balanceB = balanceB.mul(amountIn).div(_totalSupply);\n', '    }\n', '    \n', '    function quote(IUniswapV2Pair pair, address tokenOut, uint amountIn) external view returns (uint) {\n', '        (uint _amountIn, uint _baseOut, address _tokenIn) = calculateReturn(pair, amountIn);\n', '        (uint _reserveA, uint _reserveB) = getReserves(pair, tokenOut);\n', '        \n', '        if (_tokenIn == tokenOut) {\n', '            _tokenIn = pair.token1();\n', '            uint _temp = _amountIn;\n', '            _amountIn = _baseOut;\n', '            _baseOut = _temp;\n', '        }\n', '        uint _quote1 = ORACLE.quote(_tokenIn, tokenOut, _amountIn);\n', '        uint _quote2 = ROUTER.quote(_amountIn, _reserveA, _reserveB);\n', '        uint _quote = Math.max(_quote1, _quote2);\n', '        return _baseOut.add(_quote);\n', '    }\n', '}']