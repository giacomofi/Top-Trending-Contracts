['//.----------------.  .----------------.  .----------------.  .----------------. \n', '//| .--------------. || .--------------. || .--------------. || .--------------. |\n', '//| |  ________    | || |    ______    | || |  _________   | || |     _____    | |\n', '//| | |_   ___ `.  | || |   / ____ `.  | || | |_   ___  |  | || |    |_   _|   | |\n', "//| |   | |   `. \\ | || |   `'  __) |  | || |   | |_  \\_|  | || |      | |     | |\n", "//| |   | |    | | | || |   _  |__ '.  | || |   |  _|      | || |      | |     | |\n", "//| |  _| |___.' / | || |  | \\____) |  | || |  _| |_       | || |     _| |_    | |\n", "//| | |________.'  | || |   \\______.'  | || | |_____|      | || |    |_____|   | |\n", '//| |              | || |              | || |              | || |              | |\n', "//| '--------------' || '--------------' || '--------------' || '--------------' |\n", "//'----------------'  '----------------'  '----------------'  '----------------'\n", '\n', '\n', '// This is a defi experiment\n', '\n', '// I hate bots. I hope you do too. Bots whose only intention is to buy and dump will get rekt, and we want to make sure they do \n', '\n', '// Tokenomics:\n', '\n', '// You can buy as many D3fi as you want However, you cannot dump a large enough amount of D3fi to significantly impact the price at any one time.\n', '// You CAN sell your tokens, if you have trouble on uniswap then enter a lesser token amount that has less price significance - because the contract hates any dumping\n', '// There will be no presale - we want no dumping remember?\n', '// There will be a fair launch at no specified time\n', '// Please add liquidity if you can to help this experiment along\n', '// Dev will add a small starting amount of liquidity\n', '// Expect wild west swings at the beginning as there will be a little liquidity, do add more if you so wish\n', '// Dev will lock liquidity\n', '// Dev cannot dump tokens on you due to the tokenomics, no one escapes the dump protection \n', '// Come play this game with us \n', '\n', '\n', '\n', "// Let's all be friends at...\n", '// Telegram:  https://t.me/d3fied\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract D3fi {\n', '\n', '    string public constant name = "D3fi";\n', '    string public constant symbol = "DEFI";\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    uint256 totalSupply_;\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '   constructor() public {\n', '\ttotalSupply_ = 10000000e18;\n', '\tD3fiContract = msg.sender;\n', '\tbalances[msg.sender] = totalSupply_;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\treturn totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        if (msg.sender != uniPair && uniPair != address(0x0)) {\n', '            uint256 currPrice = getLastPrice();\n', '            if (currPrice < STARTING_PRICE) {\n', '                require(STARTING_PRICE.div(currPrice).mul(numTokens) < 400000e18 || numTokens < 800e18);\n', '            }\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address delegate, uint numTokens) public returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '        if (owner != uniPair && uniPair != address(0x0)) {\n', '            uint256 currPrice = getLastPrice();\n', '            if (currPrice < STARTING_PRICE) {\n', '                require(STARTING_PRICE.div(currPrice).mul(numTokens) < 400000e18 || numTokens < 800e18);\n', '            }\n', '        }\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '\n', '    address public D3fiContract;\n', '\n', '    address public uniPair = address(0x0);\n', '\n', '     function migrateUniPairAddress(address _uniPair) public {\n', '        require(msg.sender == D3fiContract);\n', '        uniPair = _uniPair;\n', '     }\n', '\n', '    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    uint256 STARTING_PRICE = 800000;\n', '    IUniswapV2Router02 public uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n', '\n', '\n', '    function getLastPrice() public view returns (uint) {\n', '        if (uniPair == address(0x0)) {\n', '            return 0;\n', '        } else {\n', '            return uniswapRouter.getAmountsIn(1, getPairPath())[0];\n', '        }\n', '    }\n', '\n', '    function getPairPath() private view returns (address[] memory) {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapRouter.WETH();\n', '        return path;\n', '\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, ":divErr");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '}']