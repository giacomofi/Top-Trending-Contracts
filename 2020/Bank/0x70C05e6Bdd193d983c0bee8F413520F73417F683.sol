['pragma solidity ^0.4.26;\n', '\n', 'contract Fisso {\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '   \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        uint256 totalSupply,\n', '        address indexed referredBy\n', '    );\n', '   \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '   \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '   \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '   \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '   \n', '   \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Fisso";\n', '    string public symbol = "FSO";\n', '    uint256 constant public totalSupply_ = 50000000;\n', '    uint8 constant public decimals = 0;\n', '    uint256 constant internal tokenPriceInitial_ = 27027027;\n', '    uint256 constant internal tokenPriceIncremental_ = 216216;\n', '    uint256 public percent = 300;\n', '    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\n', '    uint256 public communityFunds = 0;\n', '    address dev1; //management fees\n', '    address dev2; //development and progress account\n', '    address dev3; //marketing expenditure\n', '    address dev4; //running cost and other expenses\n', '   \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal rewardBalanceLedger_;\n', '    address[] public holders_=new address[](0);\n', '    address sonk;\n', '    uint256 internal tokenSupply_ = 0;\n', '    mapping(address => bool) public administrators;\n', '    mapping(address => address) public genTree;\n', '   \n', '    constructor() public\n', '    {\n', '        sonk = msg.sender;\n', '        administrators[sonk] = true;\n', '    }\n', '   \n', '    function upgradeContract(address[] _users, uint256[] _balances, uint256[] _rewardBalances, address[] _refers, uint modeType)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        if(modeType == 1)\n', '        {\n', '            for(uint i = 0; i<_users.length;i++)\n', '            {\n', '                 genTree[_users[i]] = _refers[i];\n', '                if(_balances[i] > 0)\n', '                {\n', '                    tokenBalanceLedger_[_users[i]] += _balances[i];\n', '                    rewardBalanceLedger_[_users[i]] += _rewardBalances[i];\n', '                    tokenSupply_ += _balances[i];\n', '                    holders_.push(_users[i]);\n', '                    emit Transfer(address(this),_users[i],_balances[i]);\n', '                }\n', '            }\n', '        }\n', '        if(modeType == 2)\n', '        {\n', '            for(i = 0; i<_users.length;i++)\n', '            {\n', '                rewardBalanceLedger_[_users[i]] += _balances[i];\n', '            }\n', '        }\n', '    }\n', '    \n', '    function upgradeDetails(uint256 _currentPrice, uint256 _commFunds)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        currentPrice_ = _currentPrice;\n', '        communityFunds = _commFunds;\n', '    }\n', '    \n', '    function fundsInjection() public payable returns(bool)\n', '    {\n', '        return true;\n', '    }\n', '   \n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        genTree[msg.sender] = _referredBy;\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '   \n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '   \n', '    function withdrawRewards()\n', '        public\n', '    {\n', '        address customerAddress_ = msg.sender;\n', '        if(rewardBalanceLedger_[customerAddress_]>1000000000)\n', '        {\n', '            customerAddress_.transfer(rewardBalanceLedger_[customerAddress_]);\n', '            rewardBalanceLedger_[customerAddress_] = 0;\n', '        }\n', '    }\n', '   \n', '    function reInvest()\n', '        public\n', '        returns(uint256)\n', '    {\n', '        address customerAddress_ = msg.sender;\n', "        require(rewardBalanceLedger_[customerAddress_] >= (currentPrice_*2), 'Your rewards are too low yet');\n", '        uint256 tokensBought_ = purchaseTokens(rewardBalanceLedger_[customerAddress_], genTree[msg.sender]);\n', '        rewardBalanceLedger_[customerAddress_] = 0;\n', '        return tokensBought_;\n', '    }\n', '   \n', '    function distributeRewards(uint256 amountToDistribute)\n', '    public\n', '    onlyAdministrator()\n', '    {\n', '        if(communityFunds >= amountToDistribute)\n', '        {\n', '            for(uint i = 0; i<holders_.length;i++)\n', '            {\n', '                uint256 _balance = tokenBalanceLedger_[holders_[i]];\n', '                if(_balance>0)\n', '                {\n', '                    rewardBalanceLedger_[holders_[i]] += ((_balance*10000000/tokenSupply_)*(amountToDistribute))/10000000;\n', '                }\n', '            }\n', '            communityFunds -= amountToDistribute;\n', '        }\n', '    }\n', '   \n', '    function exit()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        if(rewardBalanceLedger_[_customerAddress]>0)\n', '        {\n', '            _customerAddress.transfer(rewardBalanceLedger_[_customerAddress]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens,true);\n', '        uint256 _dividends = _ethereum * 200/1000;\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        uint256 rewardsToDistribute = _dividends*1000/2000;\n', '        rewardBalanceLedger_[dev1] = rewardBalanceLedger_[dev1]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev2] = rewardBalanceLedger_[dev2]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev3] = rewardBalanceLedger_[dev3]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev4] = rewardBalanceLedger_[dev4]+(rewardsToDistribute*250/1000);\n', '        communityFunds += rewardsToDistribute;\n', '        rewardBalanceLedger_[feeHolder_] += _dividends-(2*rewardsToDistribute);\n', '        // fire event\n', '        emit Transfer(_customerAddress,address(this), _amountOfTokens);\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        _customerAddress.transfer(_taxedEthereum);\n', '    }\n', '    address feeHolder_;\n', '    function registerDev234(address _devAddress1, address _devAddress2, address _devAddress3,address _devAddress4,address _feeHolder)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        dev1 = _devAddress1;\n', '        dev2 = _devAddress2;\n', '        dev3 = _devAddress3;\n', '        dev4 = _devAddress4;\n', '        feeHolder_ = _feeHolder;\n', '        administrators[feeHolder_] = true;\n', '    }\n', '   \n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '       \n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = _amountOfTokens * 10/100;\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        tokenBalanceLedger_[feeHolder_] += _tokenFee;\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '       \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '   \n', '    function destruct() onlyAdministrator() public{\n', '        selfdestruct(feeHolder_);\n', '    }\n', '   \n', '    function setPercent(uint256 newPercent) onlyAdministrator() public {\n', '        percent = newPercent * 10;\n', '    }\n', '   \n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '   \n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '   \n', '    function totalSupply()\n', '        public\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    function tokenSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '   \n', '    function getCommunityFunds()\n', '    public\n', '    view\n', '    returns(uint256)\n', '    {\n', '        return communityFunds;\n', '    }\n', '   \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '   \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '   \n', '    //check the ethereum reward balance\n', '     function rewardOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return rewardBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(2,false);\n', '            uint256 _dividends = _ethereum * 200/1000;\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '   \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return currentPrice_;\n', '    }\n', '   \n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell,false);\n', '        uint256 _dividends = _ethereum * 200/1000;\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '   \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '   \n', '    event testLog(\n', '        uint256 currBal\n', '    );\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = _ethereumToSpend * percent/1000;\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum, currentPrice_, false);\n', '        return _amountOfTokens;\n', '    }\n', '   \n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = _incomingEthereum * percent/1000;\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum , currentPrice_, true);\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        if(tokenBalanceLedger_[_customerAddress] == _amountOfTokens)\n', '        {\n', '            holders_.push(_customerAddress);\n', '        }\n', '        uint256 rewardsToDistribute = _dividends*325/1000;\n', '        communityFunds += rewardsToDistribute;\n', '        rewardBalanceLedger_[_referredBy] += (rewardsToDistribute * 150) / 100;\n', '        rewardBalanceLedger_[feeHolder_] += _dividends-(3*rewardsToDistribute);\n', '        rewardsToDistribute = (rewardsToDistribute * 50) / 100;\n', '        rewardBalanceLedger_[dev1] = rewardBalanceLedger_[dev1]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev2] = rewardBalanceLedger_[dev2]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev3] = rewardBalanceLedger_[dev3]+(rewardsToDistribute*250/1000);\n', '        rewardBalanceLedger_[dev4] = rewardBalanceLedger_[dev4]+(rewardsToDistribute*250/1000);\n', '        require(SafeMath.add(_amountOfTokens,tokenSupply_) <= totalSupply_);\n', '        // fire event\n', '        emit Transfer(address(this),_customerAddress, _amountOfTokens);\n', '        return _amountOfTokens;\n', '    }\n', '   \n', '    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, bool buy)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\n', '        uint256 _tokenSupply = tokenSupply_;\n', '        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(3**(_tokenSupply/5000000)));\n', '        uint256 _totalTokens = 0;\n', '        uint256 _tokensReceived = (\n', '            (\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            _tempad**2\n', '                            + (8*_tokenPriceIncremental*_ethereum)\n', '                        )\n', '                    ), _tempad\n', '                )\n', '            )/(2*_tokenPriceIncremental)\n', '        );\n', '        uint256 tempbase = ((_tokenSupply/5000000)+1)*5000000;\n', '        while((_tokensReceived + _tokenSupply) > tempbase){\n', '            _tokensReceived = tempbase - _tokenSupply;\n', '            _ethereum = SafeMath.sub(\n', '                _ethereum,\n', '                ((_tokensReceived)/2)*\n', '                ((2*_currentPrice)+((_tokensReceived-1)\n', '                *_tokenPriceIncremental))\n', '            );\n', '            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\n', '            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**((_tokensReceived + _tokenSupply)/5000000)));\n', '            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\n', '            uint256 _tempTokensReceived = (\n', '                (\n', '                    SafeMath.sub(\n', '                        (sqrt\n', '                            (\n', '                                _tempad**2\n', '                                + (8*_tokenPriceIncremental*_ethereum)\n', '                            )\n', '                        ), _tempad\n', '                    )\n', '                )/(2*_tokenPriceIncremental)\n', '            );\n', '            _tokenSupply = _tokenSupply + _tokensReceived;\n', '            _totalTokens = _totalTokens + _tokensReceived;\n', '            _tokensReceived = _tempTokensReceived;\n', '            tempbase = ((_tokenSupply/5000000)+1)*5000000;\n', '        }\n', '        _totalTokens = _totalTokens + _tokensReceived;\n', '        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\n', '        if(buy == true)\n', '        {\n', '            currentPrice_ = _currentPrice;\n', '        }\n', '        return _totalTokens;\n', '    }\n', '   \n', '     function tokensToEthereum_(uint256 _tokens, bool sell)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenSupply = tokenSupply_;\n', '        uint256 _etherReceived = 0;\n', '        uint256 tempbase = ((_tokenSupply/5000000))*5000000;\n', '        uint256 _currentPrice = currentPrice_;\n', '        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_tokenSupply/5000000)));\n', '        while((_tokenSupply - _tokens) < tempbase)\n', '        {\n', '            uint256 tokensToSell = _tokenSupply - tempbase;\n', '            if(tokensToSell == 0)\n', '            {\n', '                _tokenSupply = _tokenSupply - 1;\n', '                tempbase = ((_tokenSupply/5000000))*5000000;\n', '                continue;\n', '            }\n', '            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\n', '            uint256 a = _currentPrice - b;\n', '            _tokens = _tokens - tokensToSell;\n', '            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\n', '            _currentPrice = a;\n', '            _tokenSupply = _tokenSupply - tokensToSell;\n', '            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**((_tokenSupply-1)/5000000)));\n', '            tempbase = (((_tokenSupply-1)/5000000))*5000000;\n', '        }\n', '        if(_tokens > 0)\n', '        {\n', '             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\n', '             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\n', '             _tokenSupply = _tokenSupply - _tokens;\n', '             _currentPrice = a;\n', '        }\n', '        if(sell == true)\n', '        {\n', '            currentPrice_ = _currentPrice;\n', '        }\n', '        return _etherReceived;\n', '    }\n', '   \n', '   \n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']