['pragma solidity ^0.4.26;\n', '\n', 'contract DTT_Exchange {\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '   \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '   \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '   \n', '   \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "DTT Exchange";\n', '    string public symbol = "DTT";\n', '    uint8 constant public decimals = 0;\n', '    uint256 public totalSupply_ = 900000;\n', '    uint256 constant internal tokenPriceInitial_ = 270000000000000;\n', '    uint256 constant internal tokenPriceIncremental_ = 270000000;\n', '    uint256 public percent = 75;\n', '    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\n', '    uint256 public grv = 1;\n', '\n', '    address commissionHolder; // holds commissions fees\n', '    address stakeHolder; // holds stake\n', '    address dev2; // Growth funds\n', '    address dev3; // Compliance funds\n', '    address dev4; // Marketing Funds\n', '    address dev5; // Development funds\n', '    address dev6; // Research Funds\n', '   \n', '   \n', '   \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal etherBalanceLedger_;\n', '    address sonk;\n', '    uint256 internal tokenSupply_ = 0;\n', '    // uint256 internal profitPerShare_;\n', '    mapping(address => bool) public administrators;\n', '    uint256 commFunds=0;\n', '   \n', '   \n', '    constructor() public\n', '    {\n', '        sonk = msg.sender;\n', '        administrators[sonk] = true;\n', '        commissionHolder = sonk;\n', '        stakeHolder = sonk;\n', '        commFunds = 0;\n', '    }\n', '   \n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '   \n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '   \n', '    function holdStake(uint256 _amount)\n', '        onlyBagholders()\n', '        public\n', '        {\n', '            tokenBalanceLedger_[msg.sender] = SafeMath.sub(tokenBalanceLedger_[msg.sender], _amount);\n', '            tokenBalanceLedger_[stakeHolder] = SafeMath.add(tokenBalanceLedger_[stakeHolder], _amount);\n', '        }\n', '       \n', '    function unstake(uint256 _amount, address _customerAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amount);\n', '        tokenBalanceLedger_[stakeHolder] = SafeMath.sub(tokenBalanceLedger_[stakeHolder], _amount);\n', '    }\n', '   \n', '    function withdrawRewards(uint256 _amount, address _customerAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amount);\n', '        tokenSupply_ = SafeMath.add (tokenSupply_,_amount);\n', '    }\n', '   \n', '    function withdrawComm(uint256 _amount, address _customerAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amount);\n', '        tokenBalanceLedger_[commissionHolder] = SafeMath.sub(tokenBalanceLedger_[commissionHolder], _amount);\n', '    }\n', '   \n', '    function withdrawEthers()\n', '    public\n', '    {\n', '        msg.sender.transfer(etherBalanceLedger_[msg.sender]);\n', '        etherBalanceLedger_[msg.sender] = 0;\n', '    }\n', '   \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens,true);\n', '        uint256 _dividends = _ethereum * percent/1000;//SafeMath.div(_ethereum, dividendFee_); // 7.5% sell fees\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        commFunds += _dividends;\n', '       \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        _customerAddress.transfer(_taxedEthereum);\n', '        emit Transfer(_customerAddress, address(this), _tokens);\n', '    }\n', '   \n', '    function registerDev234(address _devAddress2, address _devAddress3, address _devAddress4,address _devAddress5, address _devAddress6,address _commHolder)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        dev2 = _devAddress2;\n', '        dev3 = _devAddress3;\n', '        dev4 = _devAddress4;\n', '        dev5 = _devAddress5;\n', '        dev6 = _devAddress6;\n', '        commissionHolder = _commHolder;\n', '        administrators[commissionHolder] = true;\n', '    }\n', '   \n', '    function totalCommFunds()\n', '        onlyAdministrator()\n', '        public view\n', '        returns(uint256)\n', '    {\n', '        return commFunds;    \n', '    }\n', '   \n', '    function getCommFunds(uint256 _amount)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        if(_amount <= commFunds)\n', '        {\n', '            etherBalanceLedger_[dev2]+=(_amount*20/100);\n', '            etherBalanceLedger_[dev3]+=(_amount*20/100);\n', '            etherBalanceLedger_[dev4]+=(_amount*25/100);\n', '            etherBalanceLedger_[dev5]+=(_amount*10/100);\n', '            etherBalanceLedger_[dev6]+=(_amount*25/100);\n', '            commFunds = SafeMath.sub(commFunds,_amount);\n', '        }\n', '    }\n', '\n', '   \n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '   \n', '    function destruct() onlyAdministrator() public{\n', '        uint256 _amount = address(this).balance;\n', '        dev2.transfer(_amount*20/100);\n', '        dev3.transfer(_amount*20/100);\n', '        dev4.transfer(_amount*25/100);\n', '        dev5.transfer(_amount*10/100);\n', '        dev6.transfer(_amount*25/100);\n', '        selfdestruct(commissionHolder);\n', '    }\n', '   \n', '   \n', '    function setPercent(uint256 newPercent) onlyAdministrator() public {\n', '        percent = newPercent * 10;\n', '    }\n', '\n', '   \n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '   \n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setupCommissionHolder(address _commissionHolder)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        commissionHolder = _commissionHolder;\n', '    }\n', '\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '   \n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return totalSupply_;\n', '    }\n', '   \n', '    function tokenSupply()\n', '    public\n', '    view\n', '    returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '   \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '   \n', '   \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '   \n', '\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(2,false);\n', '            uint256 _dividends = _ethereum * percent/1000;\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '   \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return currentPrice_;\n', '    }\n', '   \n', '   \n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell,false);\n', '        uint256 _dividends = _ethereum * percent/1000;//SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '   \n', '   \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '   \n', '    event testLog(\n', '        uint256 currBal\n', '    );\n', '\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = _ethereumToSpend * percent/1000;\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum, currentPrice_, grv, false);\n', '        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * 20/100);\n', '        return _amountOfTokens;\n', '    }\n', '   \n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = _incomingEthereum * percent/1000;\n', '        commFunds += _dividends;\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum , currentPrice_, grv, true);\n', '        tokenBalanceLedger_[commissionHolder] += _amountOfTokens * 20/100;\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '       \n', '        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '        require(SafeMath.add(_amountOfTokens,tokenSupply_) < totalSupply_);\n', '        //deduct commissions for referrals\n', '        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * 20/100);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '       \n', '        // fire event\n', '        emit Transfer(address(this), _customerAddress, _amountOfTokens);\n', '       \n', '        return _amountOfTokens;\n', '    }\n', '   \n', '    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv, bool buy)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(2**(_grv-1)));\n', '        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\n', '        uint256 _tokenSupply = tokenSupply_;\n', '        uint256 _tokensReceived = (\n', '            (\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            _tempad**2\n', '                            + (8*_tokenPriceIncremental*_ethereum)\n', '                        )\n', '                    ), _tempad\n', '                )\n', '            )/(2*_tokenPriceIncremental)\n', '        );\n', '        uint256 tempbase = upperBound_(_grv);\n', '        if((_tokensReceived + _tokenSupply) < tempbase && _tokenSupply < tempbase){\n', '            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\n', '        }\n', '        if((_tokensReceived + _tokenSupply) > tempbase && _tokenSupply < tempbase){\n', '            _tokensReceived = tempbase - _tokenSupply;\n', '            _ethereum = SafeMath.sub(\n', '                _ethereum,\n', '                ((_tokensReceived)/2)*\n', '                ((2*_currentPrice)+((_tokensReceived-1)\n', '                *_tokenPriceIncremental))\n', '            );\n', '            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\n', '            _grv = _grv + 1;\n', '            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\n', '            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\n', '            uint256 _tempTokensReceived = (\n', '                (\n', '                    SafeMath.sub(\n', '                        (sqrt\n', '                            (\n', '                                _tempad**2\n', '                                + (8*_tokenPriceIncremental*_ethereum)\n', '                            )\n', '                        ), _tempad\n', '                    )\n', '                )/(2*_tokenPriceIncremental)\n', '            );\n', '            _currentPrice = _currentPrice+((_tempTokensReceived-1)*_tokenPriceIncremental);\n', '            _tokensReceived = _tokensReceived + _tempTokensReceived;\n', '        }\n', '        if(buy == true)\n', '        {\n', '            currentPrice_ = _currentPrice;\n', '            grv = _grv;\n', '        }\n', '        return _tokensReceived;\n', '    }\n', '   \n', '    function upperBound_(uint256 _grv)\n', '    internal\n', '    view\n', '    returns(uint256)\n', '    {\n', '        if(_grv <= 5)\n', '        {\n', '            return (60000 * _grv);\n', '        }\n', '        if(_grv > 5 && _grv <= 10)\n', '        {\n', '            return (50000 * _grv);\n', '        }\n', '        if(_grv > 10 && _grv <= 15)\n', '        {\n', '            return (40000 * _grv);\n', '        }\n', '        if(_grv > 15 && _grv <= 20)\n', '        {\n', '            return (30000 * _grv);\n', '        }\n', '        return 0;\n', '    }\n', '   \n', '     function tokensToEthereum_(uint256 _tokens, bool sell)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenSupply = tokenSupply_;\n', '        uint256 _etherReceived = 0;\n', '        uint256 _grv = grv;\n', '        uint256 tempbase = upperBound_(_grv-1);\n', '        uint256 _currentPrice = currentPrice_;\n', '        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\n', '        if((_tokenSupply - _tokens) < tempbase)\n', '        {\n', '            uint256 tokensToSell = _tokenSupply - tempbase;\n', '            uint256 a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\n', '            _tokens = _tokens - tokensToSell;\n', '            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\n', '            _currentPrice = _currentPrice-((tokensToSell-1)*_tokenPriceIncremental);\n', '            _tokenSupply = _tokenSupply - tokensToSell;\n', '            _grv = _grv-1 ;\n', '            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\n', '            tempbase = upperBound_(_grv-1);\n', '        }\n', '        if((_tokenSupply - _tokens) < tempbase)\n', '        {\n', '            tokensToSell = _tokenSupply - tempbase;\n', '            _tokens = _tokens - tokensToSell;\n', '             a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\n', '            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\n', '            _currentPrice = a;\n', '            _tokenSupply = _tokenSupply - tokensToSell;\n', '            _grv = _grv-1 ;\n', '            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\n', '            tempbase = upperBound_(_grv);\n', '        }\n', '        if(_tokens > 0)\n', '        {\n', '             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\n', '             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\n', '             _tokenSupply = _tokenSupply - _tokens;\n', '             _currentPrice = a;\n', '        }\n', '        if(sell == true)\n', '        {\n', '            grv = _grv;\n', '            currentPrice_ = _currentPrice;\n', '        }\n', '        return _etherReceived;\n', '    }\n', '   \n', '   \n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']