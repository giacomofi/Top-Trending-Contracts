['pragma solidity >=0.4.22 <0.7.0;\n', '// SPDX-License-Identifier: MIT\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ComisionBolution {\n', '    \n', '    address public owner;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert("ONLY_OWNER_ALLOWED");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transfer(address payable _to, uint256 _amount, uint256 _comision) public payable returns(bool){\n', '        require(_to != msg.sender, "NOT_ALLOWED_AUTO_TRANSFER");\n', '        require(_amount.add(_comision) == msg.value, "INSUFFICIENT_VALUE_TO_TRANSFER_WITH_COMISION");\n', '        _to.transfer(_amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner returns(bool) {\n', '        owner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    function withdraw() public onlyOwner returns (bool) {\n', '        msg.sender.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '    \n', '}']