['pragma solidity >=0.5.6 <0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DigiExchange {\n', '    using SafeMath for *;\n', '\n', '    struct Roadmap {\n', '        uint256 supply;\n', '        uint256 startPrice;\n', '        uint256 incPrice;\n', '    }\n', '\n', '    string constant public _name = "Digi Exchange";\n', '    string constant public _symbol = "DIGIX";\n', '    uint8 constant public _decimals = 0;\n', '    uint256 public _totalSupply = 1600000;\n', '    uint256 public _rewardsSupply = 240000;\n', '    uint256 public circulatingSupply = 514538;\n', '\n', '    mapping(address => bool) private administrators;\n', '\n', '    address commissionHolder;\n', '    address stakeHolder;\n', '    uint256 commissionFunds = 0;\n', '    uint256 public commissionPercent = 400;\n', '    uint256 public sellCommission = 600;\n', '    uint256 public tokenCommissionPercent = 250;\n', '    uint256 public buyPrice;\n', '    uint256 public sellPrice;\n', '    uint8 public currentRoadmap = 3;\n', '    uint8 public sellRoadmap = 3;\n', '    uint8 constant public LAST_ROADMAP = 18;\n', '    uint256 public currentRoadmapUsedSupply = 14538;\n', '    uint256 public sellRoadmapUsedSupply = 14538;\n', '    uint256 public totalStakeTokens = 0;\n', '    uint256 public totalLockInTokens = 0;\n', '    uint256 public locakablePercent = 750;\n', '    bool buyLimit = true;\n', '    uint256 buyLimitToken = 2100;\n', '    uint256 minBuyToken = 10;\n', '\n', '    address dev; //Backend Operation\n', '    address dev1; //  Operations\n', '    address dev2; // Research Funds\n', '    address dev3; //Marketing\n', '    address dev4; // Development\n', '    address dev5; //Compliance\n', '\n', '    uint256 dev1Com;\n', '    uint256 dev2Com;\n', '    uint256 dev3Com;\n', '    uint256 dev4Com;\n', '    uint256 dev5Com;\n', '\n', '\n', '    mapping(address => uint256) commissionOf;\n', '    mapping(address => uint256) userIncomes;\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => uint256) public stakeBalanceOf;\n', '    mapping(uint8 => Roadmap) public priceRoadmap;\n', '    mapping(address => uint256) public _lockInBalances;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Stake(address indexed staker, uint256 value, uint256 totalInStake);\n', '    event UnStake(address indexed staker, uint256 value, uint256 totalInStake);\n', '    event CommissionWithdraw(address indexed user, uint256 amount);\n', '    event WithdrawTokenCommission(address indexed user, uint256 amount, uint256 nonce);\n', '    event WithdrawStakingCommission(address indexed user, uint256 amount, uint256 nonce);\n', '    event Price(uint256 buyPrice, uint256 sellPrice, uint256 circulatingSupply);\n', '    event StakeUser(address indexed user, uint256 value, uint256 totalInStake, uint256 nonce);\n', '    event LockIn(address indexed from, address indexed to, uint256 value);\n', '    event TransactionFees(address to, uint256 totalValue);\n', '\n', '    constructor(address _commissionHolder, address _stakeHolder) public {\n', '        administrators[msg.sender] = true;\n', '        administrators[_commissionHolder] = true;\n', '        dev = msg.sender;\n', '        commissionHolder = _commissionHolder;\n', '        stakeHolder = _stakeHolder;\n', '        createRoadmap();\n', '        buyPrice = 867693750000000;\n', '        sellPrice = 867688750000000;\n', '    }\n', '\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    modifier onlyAdministrators{\n', '        require(administrators[msg.sender], "Only administrators can execute this function");\n', '        _;\n', '    }\n', '\n', '    function upgradeContract(address[] memory users) public onlyAdministrators {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            _balances[users[i]] += 500;\n', '            _lockInBalances[users[i]] += 1500;\n', '            _balances[commissionHolder] += 666;\n', '            emit Transfer(address(this), users[i], _balances[users[i]]);\n', '            emit LockIn(users[i], address(this), _lockInBalances[users[i]]);\n', '        }\n', '    }\n', '\n', '    function upgradeDetails(uint256 _bp, uint256 _sp, uint256 _circSup, uint8 _currentRp, uint8 _sellRp, uint256 _crs, uint256 _srs, uint256 _commFunds) public onlyAdministrators {\n', '        buyPrice = _bp;\n', '        sellPrice = _sp;\n', '        circulatingSupply = _circSup;\n', '        currentRoadmap = _currentRp;\n', '        sellRoadmap = _sellRp;\n', '        currentRoadmapUsedSupply = _crs;\n', '        sellRoadmapUsedSupply = _srs;\n', '        commissionFunds = _commFunds;\n', '    }\n', '\n', '    function stake(address _user, uint256 _tokens, uint256 nonce) public onlyAdministrators {\n', '        require(_tokens <= _balances[_user], "User dont have enough tokens to stake");\n', '        _balances[_user] -= _tokens;\n', '        stakeBalanceOf[_user] += _tokens;\n', '        totalStakeTokens += _tokens;\n', '        emit StakeUser(_user, _tokens, totalStakeTokens, nonce);\n', '    }\n', '\n', '    function stakeExt(address _user, uint256 _tokens) private {\n', '        require(_tokens <= _balances[_user], "You dont have enough tokens to stake");\n', '        _balances[_user] -= _tokens;\n', '        stakeBalanceOf[_user] += _tokens;\n', '        totalStakeTokens += _tokens;\n', '        emit Stake(_user, _tokens, totalStakeTokens);\n', '    }\n', '\n', '    function unStake(address _user, uint256 _tokens) public onlyAdministrators {\n', '        require(_tokens <= stakeBalanceOf[_user], "User doesnt have amount of token in stake");\n', '        stakeBalanceOf[_user] -= _tokens;\n', '        totalStakeTokens -= _tokens;\n', '        _balances[_user] += _tokens;\n', '        emit UnStake(_user, _tokens, totalStakeTokens);\n', '    }\n', '\n', '    function lockInExt(address _user, uint256 _tokens) private {\n', '        _lockInBalances[_user] += _tokens;\n', '        totalLockInTokens += _tokens;\n', '    }\n', '\n', '    function releaseLockIn(address _user, uint256 _tokens) public onlyAdministrators {\n', '        require(_tokens <= _lockInBalances[_user], "User dont have enough balance in Tokens");\n', '        _lockInBalances[_user] = _lockInBalances[_user] - _tokens;\n', '        _balances[_user] = _balances[_user] + _tokens;\n', '\n', '        totalLockInTokens = totalLockInTokens - _tokens;\n', '        emit LockIn(address(this), _user, _tokens);\n', '    }\n', '\n', '    function addLiquidity() external payable returns (bool){\n', '        return true;\n', '    }\n', '\n', '    function purchase(uint256 tokens) external payable {\n', '        purchaseExt(msg.sender, tokens, msg.value);\n', '    }\n', '\n', '    function sell(uint256 _tokens) public {\n', '        require(_tokens > 0, "Tokens can not be zero");\n', '        require(_tokens <= _balances[msg.sender], "You dont have enough amount of token");\n', '        sellExt(msg.sender, _tokens);\n', '\n', '    }\n', '\n', '    function sellExt(address _user, uint256 _tokens) private {\n', '        uint256 saleAmount = updateSale(_tokens);\n', '        _balances[_user] -= _tokens;\n', '        uint256 _commission = saleAmount.mul(sellCommission).div(10000);\n', '        uint256 _balanceAfterCommission = saleAmount.sub(_commission);\n', '        uint256 txnFees = _commission * 200 / 1000;\n', '        commissionOf[dev] += txnFees;\n', '        uint256 userInc = _commission * 50 / 10000;\n', '        userIncomes[commissionHolder] += userInc;\n', '        commissionFunds += (_commission - txnFees) - userInc;\n', '\n', '        emit Transfer(_user, address(this), _tokens);\n', '        emit Price(buyPrice, sellPrice, circulatingSupply);\n', '        emit TransactionFees(address(this), _commission);\n', '        sendBalanceAmount(_user, _balanceAfterCommission);\n', '    }\n', '\n', '    function purchaseExt(address _user, uint256 _tokens, uint256 _amountInEth) private {\n', '        require(_tokens >= minBuyToken, "Minimum tokens should be buy");\n', '        require(_tokens + circulatingSupply <= _totalSupply, "All tokens has purchased");\n', '        require(_amountInEth > 0 ether, "amount can not be zero");\n', '\n', '\n', '        if (buyLimit) {\n', '            uint256 tokenWithoutComm = _tokens.sub(_tokens.mul(tokenCommissionPercent).div(1000));\n', '            require(_balances[_user] + stakeBalanceOf[_user] + tokenWithoutComm + _lockInBalances[_user] <= buyLimitToken, "Exceeding buy Limit");\n', '        }\n', '\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(_user)\n', '        }\n', '        require(size == 0, "cannot be a contract");\n', '\n', '        uint256 _commission = _amountInEth.mul(commissionPercent).div(10000);\n', '        uint256 _balanceEthAfterCommission = _amountInEth - _commission;\n', '        uint256 purchaseAmount = updatePurchase(_tokens, _balanceEthAfterCommission);\n', '        uint256 txnFees = _commission * 200 / 1000;\n', '        uint256 userInc = _commission * 100 / 10000;\n', '        commissionOf[dev] += txnFees;\n', '        userIncomes[commissionHolder] += userInc;\n', '        commissionFunds += (_commission - txnFees) - userInc;\n', '        uint256 _tokenCommission = _tokens.mul(tokenCommissionPercent).div(1000);\n', '        uint256 _tokensAfterCommission = _tokens - _tokenCommission;\n', '        if (buyLimit) {\n', '            uint256 lockableTokens = _tokensAfterCommission.mul(locakablePercent).div(1000);\n', '            _balances[commissionHolder] += _tokenCommission;\n', '            _balances[_user] += _tokensAfterCommission - lockableTokens;\n', '            lockInExt(_user, lockableTokens);\n', '\n', '            emit Transfer(address(this), _user, _tokensAfterCommission.sub(lockableTokens));\n', '            emit Price(buyPrice, sellPrice, circulatingSupply);\n', '            emit LockIn(_user, address(this), lockableTokens);\n', '\n', '\n', '        } else {\n', '            _balances[commissionHolder] += _tokenCommission;\n', '            _balances[_user] += _tokens - _tokenCommission;\n', '\n', '            emit Transfer(address(this), _user, _tokens.sub(_tokenCommission));\n', '            emit Price(buyPrice, sellPrice, circulatingSupply);\n', '        }\n', '        emit TransactionFees(address(this), _commission);\n', '\n', '        if (purchaseAmount < _balanceEthAfterCommission) {\n', '            sendBalanceAmount(_user, _balanceEthAfterCommission - purchaseAmount);\n', '        }\n', '    }\n', '\n', '\n', '    function updateSale(uint256 _tokens) private returns (uint256 saleAmount){\n', '        uint256 _saleAmount = uint256(0);\n', '\n', '        Roadmap memory _roadmap = priceRoadmap[sellRoadmap];\n', '\n', '        uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;\n', '\n', '        uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\n', '\n', '        _roadmap = priceRoadmap[sellRoadmap];\n', '        if (_tokens < _balanceSupplyInCurrentRoadmap) {\n', '            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '\n', '            sellPrice = _roadmap.startPrice + ((_balanceSupplyInCurrentRoadmap - _tokens) * _roadmap.incPrice) - _roadmap.incPrice;\n', '            buyPrice = _roadmap.startPrice + (((_balanceSupplyInCurrentRoadmap + 1) - _tokens) * _roadmap.incPrice) - _roadmap.incPrice;\n', '            sellRoadmapUsedSupply -= _tokens;\n', '            currentRoadmapUsedSupply = sellRoadmapUsedSupply;\n', '            circulatingSupply -= _tokens;\n', '            currentRoadmap = sellRoadmap;\n', '            return _saleAmount;\n', '\n', '        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\n', '            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            if (sellRoadmap == 1) {\n', '                sellPrice = priceRoadmap[1].startPrice;\n', '                buyPrice = priceRoadmap[1].startPrice;\n', '                currentRoadmap = 1;\n', '                sellRoadmapUsedSupply = 0;\n', '                currentRoadmapUsedSupply = 0;\n', '            } else {\n', '                sellPrice = priceRoadmap[sellRoadmap - 1].startPrice + (priceRoadmap[sellRoadmap - 1].supply * priceRoadmap[sellRoadmap - 1].incPrice) - priceRoadmap[sellRoadmap - 1].incPrice;\n', '                buyPrice = priceRoadmap[sellRoadmap].startPrice;\n', '                currentRoadmap = sellRoadmap;\n', '                sellRoadmap -= 1;\n', '                sellRoadmapUsedSupply = priceRoadmap[sellRoadmap].supply;\n', '                currentRoadmapUsedSupply = 0;\n', '            }\n', '            circulatingSupply -= _tokens;\n', '            return _saleAmount;\n', '        }\n', '\n', '        uint256 noOfTokensToSell = _tokens;\n', '        uint256 _sellPrice = uint256(0);\n', '        for (uint8 i = sellRoadmap; i > 0; i--) {\n', '            _roadmap = priceRoadmap[i];\n', '            _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\n', '            if (i == sellRoadmap) {\n', '                _sellPrice = sellPrice;\n', '            } else {\n', '                _sellPrice = _roadmap.startPrice + (_roadmap.supply * _roadmap.incPrice) - _roadmap.incPrice;\n', '            }\n', '            if (noOfTokensToSell > _balanceSupplyInCurrentRoadmap) {\n', '                _saleAmount += ((2 * _sellPrice * _balanceSupplyInCurrentRoadmap) - (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\n', '                noOfTokensToSell -= _balanceSupplyInCurrentRoadmap;\n', '                _sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\n', '            } else if (noOfTokensToSell < _balanceSupplyInCurrentRoadmap) {\n', '                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\n', '\n', '                sellPrice = _roadmap.startPrice + ((_balanceSupplyInCurrentRoadmap - noOfTokensToSell) * _roadmap.incPrice) - _roadmap.incPrice;\n', '                buyPrice = _roadmap.startPrice + (((_balanceSupplyInCurrentRoadmap + 1) - noOfTokensToSell) * _roadmap.incPrice) - _roadmap.incPrice;\n', '                sellRoadmapUsedSupply = _balanceSupplyInCurrentRoadmap - noOfTokensToSell;\n', '                currentRoadmapUsedSupply = sellRoadmapUsedSupply;\n', '\n', '                circulatingSupply -= _tokens;\n', '                currentRoadmap = i;\n', '                sellRoadmap = i;\n', '                return _saleAmount;\n', '\n', '            } else {\n', '                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\n', '\n', '                sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;\n', '                buyPrice = priceRoadmap[i].startPrice;\n', '                sellRoadmap = i - 1;\n', '                sellRoadmapUsedSupply = priceRoadmap[sellRoadmap].supply;\n', '                currentRoadmapUsedSupply = 0;\n', '                circulatingSupply -= _tokens;\n', '                currentRoadmap = i;\n', '                return _saleAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '    function updatePurchase(uint256 _tokens, uint256 _userEthAmount) private returns (uint256 purchaseAmount){\n', '        uint256 _purchaseAmount = uint256(0);\n', '\n', '        Roadmap memory _roadmap = priceRoadmap[currentRoadmap];\n', '\n', '        uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;\n', '\n', '        uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\n', '        if (_tokens < _balanceSupplyInCurrentRoadmap) {\n', '            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");\n', '\n', '            sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;\n', '            buyPrice = buyPrice + (_tokens * _roadmap.incPrice);\n', '\n', '            currentRoadmapUsedSupply += _tokens;\n', '            sellRoadmapUsedSupply = currentRoadmapUsedSupply;\n', '            circulatingSupply += _tokens;\n', '            sellRoadmap = currentRoadmap;\n', '            return _purchaseAmount;\n', '\n', '        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\n', '            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");\n', '\n', '            sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;\n', '            buyPrice = priceRoadmap[currentRoadmap + 1].startPrice;\n', '            currentRoadmapUsedSupply = 0;\n', '            sellRoadmapUsedSupply = priceRoadmap[currentRoadmap].supply;\n', '            currentRoadmap += 1;\n', '            sellRoadmap = currentRoadmap;\n', '            circulatingSupply += _tokens;\n', '            return _purchaseAmount;\n', '        }\n', '\n', '\n', '        uint256 noOfTokensToBuy = _tokens;\n', '        uint256 _buyPrice = uint256(0);\n', '        for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {\n', '            _roadmap = priceRoadmap[i];\n', '            _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\n', '            if (i == currentRoadmap) {\n', '                _buyPrice = buyPrice;\n', '            } else {\n', '                _buyPrice = _roadmap.startPrice;\n', '            }\n', '            if (noOfTokensToBuy > _balanceSupplyInCurrentRoadmap) {\n', '                _purchaseAmount += ((2 * _buyPrice * _balanceSupplyInCurrentRoadmap) + (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\n', '                require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");\n', '                noOfTokensToBuy -= _balanceSupplyInCurrentRoadmap;\n', '                _currentRoadmapUsedSupply = 0;\n', '\n', '            } else if (noOfTokensToBuy < _balanceSupplyInCurrentRoadmap) {\n', '                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\n', '                require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");\n', '                if (noOfTokensToBuy == 1) {\n', '                    sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;\n', '                    buyPrice = priceRoadmap[i].startPrice + (noOfTokensToBuy * priceRoadmap[i].incPrice);\n', '                    sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\n', '                    sellRoadmap = i - 1;\n', '                } else {\n', '                    sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;\n', '                    buyPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice);\n', '                    sellRoadmapUsedSupply = noOfTokensToBuy;\n', '                    sellRoadmap = i;\n', '\n', '                }\n', '\n', '                currentRoadmap = i;\n', '                currentRoadmapUsedSupply = noOfTokensToBuy;\n', '                circulatingSupply += _tokens;\n', '                return _purchaseAmount;\n', '            } else {\n', '                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\n', '                require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");\n', '                sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;\n', '                buyPrice = priceRoadmap[i + 1].startPrice;\n', '                currentRoadmapUsedSupply = 0;\n', '                sellRoadmapUsedSupply = priceRoadmap[i].supply;\n', '                circulatingSupply += _tokens;\n', '                currentRoadmap = i + 1;\n', '                sellRoadmap = i;\n', '                return _purchaseAmount;\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    function releaseUserIncome(address _user, uint256 _etherAmount) public onlyAdministrators {\n', '        require(_etherAmount <= userIncomes[commissionHolder], "Not enough amount");\n', '        commissionOf[_user] += _etherAmount;\n', '    }\n', '\n', '    function addCommissionFunds(uint256 _amount) private {\n', '        commissionFunds += _amount;\n', '    }\n', '\n', '    function getSaleSummary(uint256 _tokens) public view returns (uint256 saleAmount){\n', '        uint256 _saleAmount = uint256(0);\n', '\n', '        Roadmap memory _roadmap = priceRoadmap[sellRoadmap];\n', '\n', '        uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;\n', '\n', '        uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\n', '\n', '        _roadmap = priceRoadmap[sellRoadmap];\n', '        if (_tokens < _balanceSupplyInCurrentRoadmap) {\n', '            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            return _saleAmount;\n', '\n', '\n', '        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\n', '            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            return _saleAmount;\n', '        }\n', '\n', '        uint256 noOfTokensToSell = _tokens;\n', '        uint256 _sellPrice = uint256(0);\n', '        for (uint8 i = sellRoadmap; i > 0; i--) {\n', '            _roadmap = priceRoadmap[i];\n', '            _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\n', '            if (i == sellRoadmap) {\n', '                _sellPrice = sellPrice;\n', '            } else {\n', '                _sellPrice = _roadmap.startPrice + (_roadmap.supply * _roadmap.incPrice) - _roadmap.incPrice;\n', '            }\n', '            if (noOfTokensToSell > _balanceSupplyInCurrentRoadmap) {\n', '                _saleAmount += ((2 * _sellPrice * _balanceSupplyInCurrentRoadmap) - (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\n', '                noOfTokensToSell -= _balanceSupplyInCurrentRoadmap;\n', '                _sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\n', '            } else if (noOfTokensToSell < _balanceSupplyInCurrentRoadmap) {\n', '                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\n', '                return _saleAmount;\n', '\n', '            } else {\n', '                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\n', '                return _saleAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getPurchaseSummary(uint256 _tokens) public view returns (uint256){\n', '        uint256 _purchaseAmount = uint256(0);\n', '\n', '        Roadmap memory _roadmap = priceRoadmap[currentRoadmap];\n', '\n', '        uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;\n', '\n', '        uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\n', '        if (_tokens < _balanceSupplyInCurrentRoadmap) {\n', '            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            return _purchaseAmount;\n', '\n', '        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\n', '            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\n', '            return _purchaseAmount;\n', '        }\n', '\n', '\n', '        uint256 noOfTokensToBuy = _tokens;\n', '        uint256 _buyPrice = uint256(0);\n', '        for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {\n', '            _roadmap = priceRoadmap[i];\n', '            _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\n', '            if (i == currentRoadmap) {\n', '                _buyPrice = buyPrice;\n', '            } else {\n', '                _buyPrice = _roadmap.startPrice;\n', '            }\n', '            if (noOfTokensToBuy > _balanceSupplyInCurrentRoadmap) {\n', '                _purchaseAmount += ((2 * _buyPrice * _balanceSupplyInCurrentRoadmap) + (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\n', '                noOfTokensToBuy -= _balanceSupplyInCurrentRoadmap;\n', '                _currentRoadmapUsedSupply = 0;\n', '\n', '            } else if (noOfTokensToBuy < _balanceSupplyInCurrentRoadmap) {\n', '                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\n', '                return _purchaseAmount;\n', '            } else {\n', '                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\n', '                return _purchaseAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '    function kill(address payable addr) public onlyAdministrators {\n', '        selfdestruct(addr);\n', '    }\n', '\n', '    function totalCommissionFunds() public onlyAdministrators view returns (uint256){\n', '        return commissionFunds;\n', '    }\n', '\n', '    function addAdministrator(address admin) public onlyAdministrators {\n', '        require(administrators[admin] != true, "address already exists");\n', '        administrators[admin] = true;\n', '    }\n', '\n', '    function removeAdministrator(address admin) public onlyAdministrators {\n', '        require(administrators[admin] == true, "address not exists");\n', '        administrators[admin] = false;\n', '    }\n', '\n', '    function updateCommissionHolders(address _dev1, address _dev2, address _dev3, address _dev4, address _dev5) public onlyAdministrators {\n', '        dev1 = _dev1;\n', '        dev2 = _dev2;\n', '        dev3 = _dev3;\n', '        dev4 = _dev4;\n', '        dev5 = _dev5;\n', '    }\n', '\n', '    function updateCommissionPercent(uint256 _percent) public onlyAdministrators {\n', '        commissionPercent = _percent;\n', '    }\n', '\n', '    function updateSellCommissionPercentage(uint256 _percent) public onlyAdministrators {\n', '        sellCommission = _percent;\n', '    }\n', '\n', '    function updateTokenCommissionPercent(uint256 _percent) public onlyAdministrators {\n', '        tokenCommissionPercent = _percent;\n', '    }\n', '\n', '    function getCommBalance() public view returns (uint256){\n', '        return commissionOf[msg.sender];\n', '    }\n', '\n', '    function getCommBalanceAdmin(address _address) public onlyAdministrators view returns (uint256){\n', '        return commissionOf[_address];\n', '    }\n', '\n', '    function distributeCommission(uint256 _amount) public onlyAdministrators {\n', '        require(_amount <= commissionFunds, "Dont have enough funds to distribute");\n', '        uint256 totalComPer = dev1Com + dev2Com + dev3Com + dev4Com + dev5Com;\n', '        require(totalComPer == 1000, "Invalid Percent structure");\n', '\n', '\n', '        commissionOf[dev1] += (_amount * dev1Com) / 1000;\n', '        commissionOf[dev2] += (_amount * dev2Com) / 1000;\n', '        commissionOf[dev3] += (_amount * dev3Com) / 1000;\n', '        commissionOf[dev4] += (_amount * dev4Com) / 1000;\n', '        commissionOf[dev5] += (_amount * dev5Com) / 1000;\n', '\n', '        commissionFunds -= _amount;\n', '\n', '    }\n', '\n', '    function upgradeContract(uint256 _dev1, uint256 _dev2, uint256 _dev3, uint256 _dev4, uint256 _dev5) public onlyAdministrators {\n', '        dev1Com = _dev1;\n', '        dev2Com = _dev2;\n', '        dev3Com = _dev3;\n', '        dev4Com = _dev4;\n', '        dev5Com = _dev5;\n', '    }\n', '\n', '    function updateTransFeesAdd(address _address) public onlyAdministrators {\n', '        require(dev != _address, "Address already added");\n', '        dev = _address;\n', '    }\n', '\n', '    function withdrawCommission(uint256 _amount) public {\n', '        require(_amount <= commissionOf[msg.sender], "Dont have funds to withdraw");\n', '        commissionOf[msg.sender] -= _amount;\n', '        sendBalanceAmount(msg.sender, _amount);\n', '        emit CommissionWithdraw(msg.sender, _amount);\n', '    }\n', '\n', '    function withdrawTokenCommission(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {\n', '        require(_amount <= _balances[commissionHolder], "Dont have enough tokens");\n', '        _balances[commissionHolder] -= _amount;\n', '        _balances[_user] += _amount;\n', '        emit WithdrawTokenCommission(_user, _amount, nonce);\n', '    }\n', '\n', '    function withdrawStakeEarning(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {\n', '        require(_amount <= _balances[stakeHolder], "Dont have enough tokens");\n', '        _balances[_user] += _amount;\n', '        _balances[stakeHolder] -= _amount;\n', '        emit WithdrawStakingCommission(_user, _amount, nonce);\n', '    }\n', '\n', '    function updateTokenCommHolder(address _address) public onlyAdministrators {\n', '        require(commissionHolder != _address, "Holder already exist");\n', '        _balances[_address] = _balances[commissionHolder];\n', '        _balances[commissionHolder] -= _balances[_address];\n', '\n', '    }\n', '\n', '    function updateStakeHolder(address _address) public onlyAdministrators {\n', '        require(stakeHolder != _address, "Holder already exist");\n', '        _balances[_address] = _balances[stakeHolder];\n', '        _balances[stakeHolder] -= _balances[_address];\n', '    }\n', '\n', '    function createRoadmap() private {\n', '\n', '\n', '        Roadmap memory roadmap = Roadmap({\n', '        supply : 100000,\n', '        startPrice : 0.00027 ether,\n', '        incPrice : 0.00000000125 ether\n', '        });\n', '\n', '        priceRoadmap[1] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 400000,\n', '        startPrice : 0.00039499975 ether,\n', '        incPrice : 0.000000001 ether\n', '        });\n', '\n', '        priceRoadmap[2] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 100000,\n', '        startPrice : 0.00079500375 ether,\n', '        incPrice : 0.000000005 ether\n', '        });\n', '\n', '        priceRoadmap[3] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 100000,\n', '        startPrice : 0.00129500875 ether,\n', '        incPrice : 0.00000001 ether\n', '        });\n', '\n', '        priceRoadmap[4] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 100000,\n', '        startPrice : 0.00229501875 ether,\n', '        incPrice : 0.00000002 ether\n', '        });\n', '\n', '        priceRoadmap[5] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 90000,\n', '        startPrice : 0.00429504375 ether,\n', '        incPrice : 0.000000045 ether\n', '        });\n', '\n', '        priceRoadmap[6] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 90000,\n', '        startPrice : 0.00834507875 ether,\n', '        incPrice : 0.00000008 ether\n', '        });\n', '\n', '        priceRoadmap[7] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 70000,\n', '        startPrice : 0.01554517875 ether,\n', '        incPrice : 0.00000018 ether\n', '        });\n', '\n', '        priceRoadmap[8] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 70000,\n', '        startPrice : 0.02814534875 ether,\n', '        incPrice : 0.00000035 ether\n', '        });\n', '\n', '        priceRoadmap[9] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 70000,\n', '        startPrice : 0.052645748750 ether,\n', '        incPrice : 0.00000075 ether\n', '        });\n', '\n', '        priceRoadmap[10] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 60000,\n', '        startPrice : 0.10514679875 ether,\n', '        incPrice : 0.0000018 ether\n', '        });\n', '\n', '        priceRoadmap[11] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 60000,\n', '        startPrice : 0.21314779875 ether,\n', '        incPrice : 0.0000028 ether\n', '        });\n', '\n', '        priceRoadmap[12] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 60000,\n', '        startPrice : 0.38115099875 ether,\n', '        incPrice : 0.000006 ether\n', '        });\n', '\n', '        priceRoadmap[13] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 50000,\n', '        startPrice : 0.74115699875 ether,\n', '        incPrice : 0.000012 ether\n', '        });\n', '\n', '        priceRoadmap[14] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 50000,\n', '        startPrice : 1.34116999875 ether,\n', '        incPrice : 0.000025 ether\n', '        });\n', '\n', '        priceRoadmap[15] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 50000,\n', '        startPrice : 2.59118999875 ether,\n', '        incPrice : 0.000045 ether\n', '        });\n', '\n', '        priceRoadmap[16] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 40000,\n', '        startPrice : 4.841234998750 ether,\n', '        incPrice : 0.00009 ether\n', '        });\n', '\n', '        priceRoadmap[17] = roadmap;\n', '\n', '        roadmap = Roadmap({\n', '        supply : 40000,\n', '        startPrice : 8.44126499875 ether,\n', '        incPrice : 0.00012 ether\n', '        });\n', '\n', '        priceRoadmap[18] = roadmap;\n', '\n', '    }\n', '\n', '    function sendBalanceAmount(address _receiver, uint256 _amount) private {\n', '        if (!address(uint160(_receiver)).send(_amount)) {\n', '            address(uint160(_receiver)).transfer(_amount);\n', '        }\n', '    }\n', '\n', '    function getBuyPrice() public view returns (uint256){\n', '        return buyPrice;\n', '    }\n', '\n', '    function getSellPrice() public view returns (uint256){\n', '        return sellPrice;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function totalEthBalance() public view returns (uint256){\n', '        return address(this).balance;\n', '    }\n', '\n', '    function updateBuyLimit(bool limit) public onlyAdministrators {\n', '        buyLimit = limit;\n', '    }\n', '\n', '    function updateBuyLimitToken(uint256 _noOfTokens) public onlyAdministrators {\n', '        buyLimitToken = _noOfTokens;\n', '    }\n', '\n', '    function updateMinBuyToken(uint256 _tokens) public onlyAdministrators {\n', '        minBuyToken = _tokens;\n', '    }\n', '\n', '    function updateLockablePercent(uint256 _percent) public onlyAdministrators {\n', '        locakablePercent = _percent;\n', '    }\n', '}']