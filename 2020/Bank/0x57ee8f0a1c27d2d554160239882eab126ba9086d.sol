['// SPDX-License-Identifier: MIT\n', '/*SPDX-License-Identifier: MIT\n', '\n', '\n', '███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\n', '██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\n', '█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\n', '██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\n', '███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\n', '╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\n', '\n', 'Brought to you by Kryptual Team */\n', 'pragma solidity ^0.6.0;\n', 'import "./EcoSub2.sol";\n', '\n', '\n', 'contract EcoceliumSub is Initializable { \n', '\n', '    IAbacusOracle abacus;\n', '    EcoceliumTokenManager ETM;\n', '    EcoceliumSub1 ES1;\n', '    enum Status {OPEN,CLOSED}\n', '    /*============Mappings=============\n', '    ----------------------------------*/\n', '    mapping (address => User) public users;\n', '    uint [] public orderIds;\n', '    mapping (string => uint) public YieldForTokens;\n', '    mapping (uint64 => Order) public Orders;\n', '    mapping (string => uint ) public borrowCollection;\n', '    \n', '    /*=========Structs================\n', '    --------------------------------*/    \n', '    \n', '    struct Order{\n', '        address creator;\n', '        address [] borrowers;\n', '        uint time;\n', '        uint expiryDate;\n', '        uint duration;\n', '        uint amount;\n', '        uint amountLeft;\n', '        uint yield;\n', '        uint earnings;\n', '        mapping (address => BorrowatOrder) borrows;\n', '        string token;\n', '        Status status;\n', '    }\n', '    \n', '    struct BorrowatOrder{\n', '        uint64 orderId;\n', '        uint amount;\n', '        uint duration;\n', '        uint dated;\n', '        uint duesPaid;\n', '    }\n', '    \n', '    struct freeStorage{\n', '        uint amount;\n', '        uint time;\n', '        string wtoken;\n', '        uint usdvalue;\n', '    }\n', '    \n', '    struct User{\n', '        uint ecoWithdrawls;\n', '        uint totalDeposit;\n', '        uint totalBorrowed;\n', '        freeStorage [] myDeposits;\n', '        freeStorage [] myBorrows;\n', '        mapping(string => uint) deposits;\n', '        mapping(string => uint) borrows;\n', '        uint64 [] borrowedOrders;\n', '        uint64 [] createdOrders;\n', '        mapping(string => uint) tokenYield;\n', '    }\n', '    \n', '    function initializeAddress(address ETMaddress,address AbacusAddress, address ES1address) external {\n', '            ETM = EcoceliumTokenManager(ETMaddress);\n', '            abacus = IAbacusOracle(AbacusAddress); \n', '            ES1 = EcoceliumSub1(ES1address);\n', '    }\n', '\n', '\n', '    /*============Main Functions===============\n', '    ---------------------------------*/\n', '   \n', '    function zeroDepositorPush(address userAddress, string memory _tokenSymbol, uint _amount) external {\n', '        if(ES1.friendlyaddress(msg.sender)){\n', '            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\n', '            users[userAddress].totalDeposit += tokenUsdValue;\n', '            freeStorage memory newDeposit = freeStorage({     amount: _amount,\n', '                                                        time: now,\n', '                                                        wtoken: _tokenSymbol,\n', '                                                        usdvalue: tokenUsdValue   });\n', '            users[userAddress].myDeposits.push(newDeposit);\n', '            users[userAddress].deposits[_tokenSymbol] += _amount;\n', '        }\n', '    }\n', '    \n', '    /*function getUsersOrders(address userAddress) public view returns(uint64 [] memory){\n', '        return users[userAddress].createdOrders;\n', '    }*/\n', '    \n', '    function getUserDepositsbyToken(address userAddress, string memory wtoken) public view returns(uint) {\n', '        return users[userAddress].deposits[wtoken];\n', '    }\n', '    \n', '    function getbuyPower(address userAddress) public view returns (uint){\n', '        uint buyPower;\n', '        if(!ES1.isRegistrar(userAddress)) {\n', '            if(ES1.isUserLocked(userAddress)) { return 0; }\n', '            buyPower += users[userAddress].totalDeposit - ((users[userAddress].totalDeposit*ES1.CDSpercent())/100);\n', '            buyPower -= users[userAddress].totalBorrowed;\n', '        } else {    buyPower = (10**20);        }\n', '        return buyPower;\n', '    }\n', '\n', '    function createOrder(address userAddress,string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield,address _contractAddress) external{\n', '        //_order(userAddress,_tokenSymbol,_amount,_duration,_yield,_contractAddress);\n', '        if(ES1.friendlyaddress(msg.sender)){\n', '        wERC20 token = wERC20(ETM.getwTokenAddress(_tokenSymbol));\n', '        // uint amount = _amount*(10**uint(token.decimals()));\n', '        require(token.availableAmount(userAddress)>= (_amount*(10**uint(token.decimals()))),"insufficient balance");\n', '        (uint64 _orderId,uint newAmount,uint fee) = _ordersub(_amount*(10**uint(token.decimals())),userAddress,_duration,_tokenSymbol);\n', '        address [] memory _borrowers;\n', '        Orders[_orderId] = Order({       \n', '                                            creator : userAddress,\n', '                                            borrowers : _borrowers,\n', '                                            time : now,\n', '                                            duration : _duration,\n', '                                            amount : newAmount,\n', '                                            amountLeft : newAmount,    \n', '                                            token : _tokenSymbol,\n', '                                            yield : _yield,\n', '                                            earnings : 0,\n', '                                            status : Status.OPEN,\n', '                                            expiryDate : now + _duration*(30 days)\n', '        });\n', '        token.burnFrom(userAddress,fee);\n', '        token.lock(userAddress,newAmount);\n', '        ES1.setOwnerFeeVault(_tokenSymbol, fee);\n', '        orderIds.push(_orderId);\n', '        users[userAddress].totalDeposit += _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\n', '        users[userAddress].createdOrders.push(_orderId);\n', '        scheduleExpiry(_orderId, _contractAddress);\n', '        ES1.emitOrderCreated(userAddress,_duration,_yield,newAmount,_tokenSymbol); \n', '        }\n', '    }\n', '\n', '    function _ordersub(uint amount,address userAddress,uint _duration,string memory _tokenSymbol) internal view returns (uint64, uint, uint){\n', '        uint newAmount = amount - (amount*ES1.tradeFee())/100;\n', '        uint fee = (amount*ES1.tradeFee())/100;\n', '        uint64 _orderId = uint64(uint(keccak256(abi.encodePacked(userAddress,_tokenSymbol,_duration,now))));\n', '        return (_orderId,newAmount,fee);\n', '    }\n', '    \n', '    /*function getTokenByOrderID(uint64 _orderId) public view returns (uint, string memory) {\n', '        return (Orders[_orderId].earnings,Orders[_orderId].token);\n', '    }*/\n', '    \n', '    function borrow(uint64 _orderId,uint _amount,uint _duration,address msgSender,address _contractAddress) external {\n', '        if((ES1.friendlyaddress(msg.sender)) && Orders[_orderId].creator != address(0)) {\n', '            if((Orders[_orderId].expiryDate -  now > _duration*(30 days) && _duration>0 && _duration%1 == 0 && Orders[_orderId].status == Status.OPEN)){\n', '                uint usdValue = _amount*fetchTokenPrice(Orders[_orderId].token)/(10**8);\n', '                if((getbuyPower(msgSender) >= usdValue && Orders[_orderId].amountLeft >= _amount)){\n', '                    wERC20 token = wERC20(ETM.getwTokenAddress(Orders[_orderId].token));\n', '                    uint amount = _amount*(10**uint(token.decimals()));\n', '                    token.release(Orders[_orderId].creator,amount);\n', '                    token.burnFrom(Orders[_orderId].creator,amount);\n', '                    token.mint(msgSender,_amount);\n', '                    Orders[_orderId].amountLeft -=  _amount;\n', '                    users[msgSender].borrowedOrders.push(_orderId);\n', '                    users[msgSender].totalBorrowed += usdValue;\n', '                    Orders[_orderId].borrowers.push(msgSender);\n', '                    Orders[_orderId].borrows[msgSender] =  BorrowatOrder({\n', '                                                                orderId : _orderId,\n', '                                                                amount : _amount,\n', '                                                                duration : _duration,\n', '                                                                dated : now,\n', '                                                                duesPaid : 0\n', '                                                            }); \n', '                    scheduleCheck(_orderId,msgSender,1,_contractAddress);\n', '                    if(Orders[_orderId].amountLeft == 0){\n', '                        Orders[_orderId].status = Status.CLOSED;    }       \n', '                    ES1.emitBorrowed(_orderId,msgSender,_amount,_duration);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function payDue(uint64 _orderId,uint _duration,address msgSender) public{\n', '        if((ES1.friendlyaddress(msg.sender) && (Orders[_orderId].borrows[msgSender].duesPaid <= Orders[_orderId].borrows[msgSender].duration ))){\n', '        wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\n', '        uint due = orderMonthlyDue(_orderId,msgSender,_duration)*(10**uint(ecoToken.decimals()));\n', '        uint fee = (due*ES1.rewardFee())/100;\n', '        ecoToken.burnFrom(msgSender,due);\n', '        ES1.setOwnerFeeVault(ES1.WRAP_ECO_SYMBOL(), fee);\n', '        ecoToken.mint(Orders[_orderId].creator,due-fee);\n', '        users[Orders[_orderId].creator].tokenYield[Orders[_orderId].token] += due - fee;\n', '        Orders[_orderId].borrows[msgSender].duesPaid += 1;\n', '        Orders[_orderId].earnings += due - fee;\n', '        YieldForTokens[Orders[_orderId].token] += due;\n', '        if(Orders[_orderId].borrows[msgSender].duesPaid == Orders[_orderId].borrows[msgSender].duration) {\n', '            ES1.setUserLocked(msgSender,false);\n', '        }\n', '        ES1.emitDuePaid(_orderId,msgSender,orderMonthlyDue(_orderId,msgSender,_duration));\n', '        }\n', '    }\n', '    \n', '    function orderExpired(uint64 _orderId) external {\n', '        if(ES1.friendlyaddress(msg.sender) && (Orders[_orderId].expiryDate <= now)){\n', '            wERC20(ETM.getwTokenAddress(Orders[_orderId].token)).release(Orders[_orderId].creator,Orders[_orderId].amountLeft);\n', '            users[Orders[_orderId].creator].totalDeposit -= Orders[_orderId].amount*fetchTokenPrice(Orders[_orderId].token)/(10**8);\n', '            Orders[_orderId].status = Status.CLOSED;\n', '        }\n', '    }    \n', '\n', '    function scheduleExpiry(uint64 _orderId,address _contractAddress) internal{\n', '        uint time = Orders[_orderId].expiryDate - Orders[_orderId].time;\n', "        bytes memory data = abi.encodeWithSelector(bytes4(keccak256('orderExpired(uint256)')),_orderId);\n", '        uint callCost = 300000*1e9 + abacus.callFee();\n', '        abacus.scheduleFunc{value:callCost}(_contractAddress, time ,data , abacus.callFee() ,300000 , 1e9 );\n', '    }    \n', '    \n', '    function scheduleCheck(uint _orderId,address borrower,uint month,address _contractAddress) internal{\n', "        bytes memory data = abi.encodeWithSelector(bytes4(keccak256('dueCheck(uint256,address,uint256)')),_orderId,borrower,month, _contractAddress);\n", '        uint callCost = 300000*1e9 + abacus.callFee();\n', '        abacus.scheduleFunc{value:callCost}(_contractAddress, 30 days ,data , abacus.callFee() ,300000 , 1e9 );\n', '    } \n', '    \n', '    function cancelOrder(uint64 _orderId) external{\n', '        if(ES1.friendlyaddress(msg.sender) && Orders[_orderId].amount == Orders[_orderId].amountLeft){\n', '            wERC20(ETM.getwTokenAddress(Orders[_orderId].token)).release(Orders[_orderId].creator,Orders[_orderId].amountLeft);\n', '            Orders[_orderId].status = Status.CLOSED;\n', '        }\n', '    }\n', '    \n', '    function dueCheck(uint64 _orderId,address borrower,uint month, address _contractAddress) public {\n', '        if(ES1.friendlyaddress(msg.sender) && (now >= Orders[_orderId].time * Orders[_orderId].borrows[borrower].duesPaid + 30 days)){\n', '            if(Orders[_orderId].borrows[borrower].duesPaid < month && !ES1.isRegistrar(borrower) && !ES1.isUserLocked(borrower)){\n', '                wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\n', '                uint due = orderMonthlyDue(_orderId,borrower,1)*(10**uint(ecoToken.decimals()));\n', '                uint fee = (due*ES1.rewardFee())/100;\n', '                ES1.setUserLocked(borrower, true);\n', '                ecoToken.mint(Orders[_orderId].creator,due-fee);\n', '                ES1.setOwnerFeeVault(Orders[_orderId].token, fee);\n', '                ecoToken.mint(Orders[_orderId].creator,due-fee);\n', '                users[Orders[_orderId].creator].tokenYield[Orders[_orderId].token] += due - fee;\n', '                Orders[_orderId].earnings += due -fee;    \n', '                YieldForTokens[Orders[_orderId].token] += due;\n', '                ES1.emitDuePaid(_orderId,borrower,orderMonthlyDue(_orderId,borrower,1));\n', '            }\n', '            if(Orders[_orderId].borrows[borrower].duesPaid != Orders[_orderId].borrows[borrower].duration){\n', '                scheduleCheck(_orderId,borrower,1,_contractAddress);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function orderMonthlyDue(uint64 _orderId, address _borrower,uint _duration) public view returns(uint){\n', '        if (Orders[_orderId].creator != address(0)) {\n', '            (uint ecoPrice,uint tokenPrice ) = (fetchTokenPrice(ES1.WRAP_ECO_SYMBOL()), fetchTokenPrice(Orders[_orderId].token));\n', '            uint principle = (Orders[_orderId].borrows[_borrower].amount*_duration)/Orders[_orderId].borrows[_borrower].duration;\n', '            uint tokendue = principle +  (principle*Orders[_orderId].yield*_duration)/(100*Orders[_orderId].borrows[_borrower].duration);\n', '            return (tokendue*tokenPrice)/ecoPrice;\n', '        }\n', '    }\n', '    \n', '    function borrowZero(uint _amount, string memory token, address userAddress, address _contractAddress) public {\n', '        uint usdValue = _amount*fetchTokenPrice(token)/(10**8);\n', '        require(getbuyPower(userAddress) >= usdValue,"power insufficient"); \n', '        require(!ES1.isUserLocked(userAddress) && ES1.friendlyaddress(msg.sender), "UserLocked Pay Dues");\n', '        //users[userAddress].buyingPower -= usdValue;\n', '        users[userAddress].borrows[token] += _amount;\n', '        freeStorage memory newBorrow = freeStorage({  amount: _amount,\n', '                                                    time: now,\n', '                                                    wtoken: token,\n', '                                                    usdvalue: usdValue   });\n', '        users[userAddress].myBorrows.push(newBorrow);\n', '        uint amount = _amount*(10**uint(wERC20(ETM.getwTokenAddress(token)).decimals()));\n', '        wERC20(ETM.getwTokenAddress(token)).mint(userAddress,amount);\n', '        if(!ES1.isRegistrar(userAddress)){\n', '            scheduleCheck(0,userAddress,1,_contractAddress);\n', '        }\n', '    }\n', '    \n', '    function zeroDepositorPop(address userAddress, string memory _tokenSymbol, uint _amount) public {\n', '        require(ES1.friendlyaddress(msg.sender),"Not Friendly Address");\n', '        if(users[userAddress].deposits[_tokenSymbol]>0) {\n', '            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\n', '            users[userAddress].deposits[_tokenSymbol] -= _amount;\n', '            users[userAddress].totalDeposit -= tokenUsdValue;\n', '            uint amountLeft= _amount;\n', '            uint counter = users[userAddress].myDeposits.length;\n', '            for( uint i= counter-1; amountLeft >0 ; i--){\n', '                if (users[userAddress].myDeposits[i].amount < amountLeft){   \n', '                    amountLeft -= users[userAddress].myDeposits[i].amount;\n', '                    issueReward(userAddress, _tokenSymbol, users[userAddress].myDeposits[i].time, users[userAddress].myDeposits[i].amount*fetchTokenPrice(_tokenSymbol)/(10**8));\n', '                    users[userAddress].myDeposits.pop(); \n', '                } else {\n', '                    users[userAddress].myDeposits[i].amount -= amountLeft;\n', '                    issueReward(userAddress, _tokenSymbol, users[userAddress].myDeposits[i].time, amountLeft*fetchTokenPrice(_tokenSymbol)/(10**8));\n', '                    amountLeft = 0;\n', '                }\n', '            }    \n', '        }\n', '    }\n', '    \n', '    function zeroBorrowPop(address userAddress, string memory _tokenSymbol, uint _amount) public returns (uint) {\n', '        require(ES1.friendlyaddress(msg.sender),"Not Friendly Address");\n', '        if(users[userAddress].borrows[_tokenSymbol]>0) {\n', '            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\n', '            users[userAddress].borrows[_tokenSymbol] -= _amount;\n', '            users[userAddress].totalBorrowed -= tokenUsdValue;\n', '            uint amountLeft= _amount;\n', '            uint dues;\n', '            uint counter = users[userAddress].myBorrows.length;\n', '            for( uint i= counter-1; amountLeft >0 ; i--){\n', '                if (users[userAddress].myBorrows[i].amount < amountLeft){\n', '                    uint a = users[userAddress].myBorrows[i].amount;\n', '                    amountLeft -= a;\n', '                    dues+= calculateECOEarning(a*fetchTokenPrice(_tokenSymbol)/(10**8), _tokenSymbol, users[userAddress].myBorrows[i].time);\n', '                    users[userAddress].myBorrows.pop(); \n', '                } else {\n', '                    users[userAddress].myDeposits[i].amount -= amountLeft;\n', '                    dues += calculateECOEarning(amountLeft*fetchTokenPrice(_tokenSymbol)/(10**8), _tokenSymbol, users[userAddress].myBorrows[i].time);\n', '                    amountLeft = 0;\n', '                }\n', '            } \n', '            ES1.setOwnerFeeVault(_tokenSymbol, (dues*ES1.rewardFee()/100));\n', '            return (dues*(ES1.rewardFee()+100)/100);\n', '        }\n', '    }\n', '    \n', '    function issueReward(address userAddress, string memory _tokenSymbol, uint time, uint tokenUsdValue) internal {\n', '        wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\n', '        uint reward = calculateECOEarning(tokenUsdValue, _tokenSymbol, time);\n', '        ecoToken.mint(userAddress, reward);\n', '    }\n', '    \n', '    function calculateECOEarning(uint usdvalue, string memory _tokenSymbol, uint time) private view returns (uint){\n', '        uint _amount = usdvalue*fetchTokenPrice(ES1.WRAP_ECO_SYMBOL());\n', '        uint reward = (_amount * ES1.slabRateDeposit(_tokenSymbol) * (time - now))/3155695200; //decimal from Abacus is setoff by decimal from Eco\n', '        return reward;\n', '    }\n', '    \n', '    function getECOEarnings(address userAddress) public view returns (uint){\n', '        uint ecobalance;\n', '        for(uint i=1; i<users[userAddress].myDeposits.length && i<users[userAddress].myBorrows.length; i++) {\n', '            ecobalance += calculateECOEarning(users[userAddress].myDeposits[i].usdvalue, users[userAddress].myDeposits[i].wtoken, users[userAddress].myDeposits[i].time);\n', '            ecobalance -= calculateECOEarning(users[userAddress].myBorrows[i].usdvalue, users[userAddress].myBorrows[i].wtoken, users[userAddress].myBorrows[i].time);\n', '        }\n', '        return ecobalance - users[userAddress].ecoWithdrawls;\n', '    }\n', '    \n', '    function redeemEcoEarning(address userAddress, uint amount) external {\n', '        require(ES1.friendlyaddress(msg.sender),"Not Friendly Address");\n', '        users[userAddress].ecoWithdrawls += amount;\n', '    }\n', '    \n', '     /*==============Helpers============\n', '    ---------------------------------*/    \n', ' \n', ' \n', '    function getOrderIds() public view returns(uint [] memory){\n', '        return orderIds;\n', '    }\n', '    \n', '    /*function getUserBorrowedOrders(address userAddress) public view returns(uint64 [] memory borrowedOrders){\n', '        return users[userAddress].borrowedOrders;\n', '    }*/\n', '    \n', '    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint64){ //Put any Token Wrapped or Direct\n', '            return abacus.getJobResponse(ETM.getFetchId(_tokenSymbol))[0];\n', '    }\n', '    \n', '}\n']
['// SPDX-License-Identifier: MIT\n', '\n', '/*\n', '\n', '███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\n', '██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\n', '█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\n', '██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\n', '███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\n', '╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\n', '\n', 'Brought to you by Kryptual Team */\n', '\n', 'pragma solidity ^0.6.0;\n', 'import "./EcoSub.sol";\n', '\n', 'contract Ecocelium is Initializable{\n', '\n', '    address public owner;\n', '    IAbacusOracle abacus;\n', '    EcoceliumTokenManager ETM;\n', '    EcoceliumSub ES;\n', '    EcoceliumSub1 ES1;\n', '    string public ECO;\n', '    \n', '    function initialize(address _owner,address ETMaddress,address AbacusAddress,address ESaddress, address ES1address, string memory _ECO)public payable initializer {\n', '        owner = _owner;\n', '        ETM = EcoceliumTokenManager(ETMaddress);\n', '        abacus = IAbacusOracle(AbacusAddress);//0x323f81D9F57d2c3d5555b14d90651aCDc03F9d52\n', '        ES = EcoceliumSub(ESaddress);\n', '        ES1 = EcoceliumSub1(ES1address);\n', '        ES.initializeAddress(ETMaddress,AbacusAddress,ES1address);\n', '        ECO = _ECO;\n', '    }\n', '    \n', '    function changeETMaddress(address ETMaddress) public{\n', '        require(msg.sender == owner,"not owner");\n', '        ETM = EcoceliumTokenManager(ETMaddress);\n', '    }    \n', '    function changeAbacusaddress(address Abacusaddress) public{\n', '        require(msg.sender == owner,"not owner");\n', '        abacus = IAbacusOracle(Abacusaddress);\n', '    }   \n', '    \n', '    function changeESaddress(address ESaddress) public{\n', '        require(msg.sender == owner,"not owner");\n', '        ES = EcoceliumSub(ESaddress);\n', '    }\n', '    \n', '     function changeES1address(address ES1address) public{\n', '        require(msg.sender == owner,"not owner");\n', '        ES1 = EcoceliumSub1(ES1address);\n', '    }\n', '    \n', '    function changeOwner(address _owner) public{\n', '        require(msg.sender==owner);\n', '        owner = _owner;\n', '    }\n', '    \n', '     /*===========Main functions============\n', '    -------------------------------------*/   \n', '\n', '    function Deposit(string memory rtoken, uint _amount) external {\n', '        address _msgSender = msg.sender;\n', '        address _contractAddress = address(this);\n', '        string memory wtoken = ETM.getWrapped(rtoken);\n', '        uint amount = _deposit(rtoken, _amount, _msgSender, _contractAddress, wtoken);\n', '        ES.zeroDepositorPush(_msgSender, wtoken, _amount);\n', '        wERC20(ETM.getwTokenAddress(ETM.getWrapped(rtoken))).mint(_msgSender, amount);\n', '        wERC20(ETM.getwTokenAddress(ETM.getWrapped(rtoken))).lock(_msgSender, amount);\n', '    }\n', '    \n', '    function _deposit(string memory rtoken,uint _amount, address msgSender, address _contractAddress, string memory wtoken) internal returns(uint) {\n', '        require(ETM.getrTokenAddress(rtoken) != address(0) && ETM.getwTokenAddress(wtoken) != address(0),"not supported");\n', '        (wERC20 wToken,ERC20Basic rToken)=(wERC20(ETM.getwTokenAddress(wtoken)),ERC20Basic(ETM.getrTokenAddress(rtoken))); \n', '        uint amount = _amount*(10**uint(wToken.decimals()));\n', '        require(rToken.allowance(msgSender,_contractAddress) >= amount,"set allowance");\n', '        rToken.transferFrom(msgSender,_contractAddress,amount);\n', '        ES1.emitSwap(msgSender,rtoken,wtoken,_amount);\n', '        return amount;\n', '    }\n', '    \n', '    function depositAndOrder(address userAddress,string memory rtoken ,uint _amount,uint _duration,uint _yield) external {\n', '        require(msg.sender == userAddress);\n', '        _deposit(rtoken, _amount, userAddress, address(this), ETM.getWrapped(rtoken));\n', '        ES.createOrder(userAddress, ETM.getWrapped(rtoken), _amount, _duration, _yield, address(this));\n', '    }\n', '    \n', '    function createOrder(address userAddress,string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield) public {\n', '        require(msg.sender == userAddress);\n', '        string memory wtoken = ETM.getWrapped(_tokenSymbol);\n', '        if(ES.getUserDepositsbyToken(userAddress, wtoken)  > _amount )  {  \n', '            ES.zeroDepositorPop(userAddress, wtoken , _amount);\n', '            ES.createOrder(userAddress, wtoken, _amount, _duration, _yield, address(this));\n', '        }\n', '    }\n', '    \n', '    function getAggEcoBalance(address userAddress) public view returns(uint) {\n', '        return wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL())).balanceOf(userAddress) + ES.getECOEarnings(userAddress);\n', '    }\n', '    \n', '    function _borrowOrder(uint64 _orderId, uint _amount, uint _duration) public {\n', '        ES.borrow(_orderId,_amount,_duration,msg.sender,address(this));\n', '    }\n', '    \n', '    function payDueOrder(uint64 _orderId,uint _duration) external{\n', '        ES.payDue(_orderId,_duration,msg.sender);\n', '    }\n', '    \n', '    function clearBorrow(string memory rtoken, uint _amount) external{\n', '        address msgSender = msg.sender;\n', '        address _contractAddress = address(this);\n', '        string memory wtoken = ETM.getWrapped(rtoken);\n', '        require(ETM.getrTokenAddress(rtoken) != address(0) && ETM.getwTokenAddress(wtoken) != address(0),"not supported");\n', '        (wERC20 wToken,ERC20Basic rToken)=(wERC20(ETM.getwTokenAddress(wtoken)),ERC20Basic(ETM.getrTokenAddress(rtoken)));\n', '        uint amount = _amount*(10**uint(wToken.decimals()));\n', '        require(rToken.allowance(msgSender,_contractAddress) >= amount,"set allowance");\n', '        rToken.transferFrom(msgSender,_contractAddress,amount);\n', '        uint dues = ES.zeroBorrowPop(msgSender, wtoken, _amount);\n', '        ERC20Basic(ETM.getrTokenAddress(ECO)).transferFrom(msgSender, _contractAddress, dues);\n', '    }\n', '    \n', '    function Borrow(uint _amount, string memory _tokenSymbol) public {\n', '        ES.borrowZero(_amount, ETM.getWrapped(_tokenSymbol) ,msg.sender,address(this));\n', '    }\n', '    \n', '    function SwapWrapToWrap(string memory token1,string memory token2, uint token1amount)  external returns(uint) {\n', '        address msgSender = msg.sender;\n', '        (uint token1price,uint token2price) = (fetchTokenPrice(token1),fetchTokenPrice(token2));\n', '        uint token2amount = (token1amount*token1price*(100-ES1.swapFee()))/token2price/100;\n', '        (wERC20 Token1,wERC20 Token2) = (wERC20(ETM.getwTokenAddress(token1)),wERC20(ETM.getwTokenAddress(token2)));\n', '        ES1.unlockDeposit(msgSender, token1amount, token1);\n', '        Token1.burnFrom(msgSender,token1amount*(10**uint(Token1.decimals())));\n', '        ES.zeroDepositorPop(msgSender,token1,token1amount);\n', '        Token2.mint(msgSender,token2amount*(10**uint(Token2.decimals())));\n', '        Token2.lock(msgSender, token2amount*(10**uint(Token2.decimals())));\n', '        ES1.setOwnerFeeVault(token1, token1price*ES1.swapFee()/100);\n', '        ES.zeroDepositorPush(msgSender, token2,token2amount);\n', '        ES1.emitSwap(msgSender,token1,token2,token2amount);\n', '        return token2amount;\n', '    }\n', '    \n', '    function orderExpired(uint64 _orderId) external {\n', '        ES.orderExpired(_orderId);\n', '    }    \n', '\n', '    function dueCheck(uint64 _orderId,address borrower,uint month) external {\n', '        ES.dueCheck(_orderId,borrower,month,address(this));\n', '    }\n', '    \n', '    function cancelOrder(uint64 _orderId) public{\n', '        ES.cancelOrder(_orderId);\n', '    }\n', '    \n', '    receive() external payable {  }\n', '\n', '    /*==============Helpers============\n', '    ---------------------------------*/    \n', '    \n', '    function orderMonthlyDue(uint64 _orderId, address _borrower,uint _duration) public view returns(uint){\n', '        return ES.orderMonthlyDue(_orderId,_borrower,_duration);\n', '    }\n', '    \n', '    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\n', '        require(msg.sender == owner);\n', '        ES1.updateFees(_swapFee,_tradeFee,_rewardFee);\n', '    }\n', '\n', '    function setCSDpercent(uint percent) public {\n', '        require(msg.sender == owner);        \n', '        ES1.setCSDpercent(percent);\n', '    }\n', '    \n', '    function setWRAP_ECO_SYMBOL(string memory _symbol) internal {\n', '        require(msg.sender == owner);\n', '        ECO = _symbol;\n', '        ES1.setWRAP_ECO_SYMBOL(_symbol);\n', '    }\n', '    \n', '    function getOrderIds() public view returns(uint [] memory){\n', '        return ES.getOrderIds();\n', '    }\n', '    \n', '    // function getOrder( uint64 investmentId) public view returns(uint time, uint duration, uint amount,  uint yield, string memory token, Status isActive){\n', '    //     return (Orders[investmentId].time,Orders[investmentId].duration,Orders[investmentId].amount,Orders[investmentId].yield,Orders[investmentId].token,Orders[investmentId].status);\n', '    // }\n', '    \n', '    /*function getUserBorrowedOrders(address userAddress) public view returns(uint64 [] memory borrowedOrders){\n', '        return ES.getUserBorrowedOrders(userAddress);\n', '    } */\n', '    \n', '    /*function getBorrowersOfOrder(uint64 _orderId) public view returns(address[] memory borrowers){\n', '        return ES.getBorrowersOfOrder(_orderId);\n', '    }\n', '    \n', '    function getBorrowDetails(uint64 _orderId,address borrower) public view returns(uint amount,uint duration,uint dated,uint _duesPaid ){\n', '        (amount,duration,dated,_duesPaid)=ES.getBorrowDetails(_orderId,borrower);\n', '        return (amount,duration,dated,_duesPaid);\n', '    } */\n', '    \n', '    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint64){\n', '        return ES.fetchTokenPrice(_tokenSymbol);\n', '    }\n', '    \n', '    /*function isWithdrawEligible(address _msgSender, string memory _token, uint _amount) public view returns (bool) {\n', '        require(msg.sender == owner);        \n', '        //to be written\n', '        uint tokenUsdValue = _amount*fetchTokenPrice(_token)/(10**8);\n', '        uint buypower = ES.getbuyPower(_msgSender);\n', '        if((buypower*(100+ES1.CDSpercent())/100) > tokenUsdValue )\n', '            return true;\n', '    }*/\n', '    \n', '    function Withdraw(string memory to, uint _amount) external {\n', '        address msgSender = msg.sender;\n', '        string memory from = ETM.getWrapped(to);\n', '        require(ETM.getwTokenAddress(from) != address(0) && ETM.getrTokenAddress(to) != address(0),"not supported");\n', '        require(!ES1.isUserLocked(msgSender), "Your Address is Locked Pay Dues");\n', '        //require(isWithdrawEligible(msgSender, to, _amount) , "Not Eligible for Withdraw");\n', '        require(((ES.getbuyPower(msgSender)*(100+ES1.CDSpercent())/100) > (_amount*fetchTokenPrice(to)/(10**8)) ), "Not Eligible for Withdraw");\n', '        wERC20 wToken = wERC20(ETM.getwTokenAddress(to));\n', '        uint amount = _amount*(10**uint(wToken.decimals()));\n', '        uint amountLeft;\n', '        if(keccak256(abi.encodePacked(to)) == keccak256(abi.encodePacked(ES1.WRAP_ECO_SYMBOL()))) {\n', '            require(wToken.balanceOf(msgSender) + ES.getECOEarnings(msgSender) >= amount,"Insufficient Balance");\n', '            if(wToken.balanceOf(msgSender)>=amount) {\n', '                _withdraw(msgSender, from, amount, to, _amount);\n', '            } else {\n', '                if(wToken.balanceOf(msgSender)<amount)    \n', '                    amountLeft = amount - wToken.balanceOf(msgSender);\n', '                    _withdraw(msgSender, from, wToken.balanceOf(msgSender), to, (wToken.balanceOf(msgSender)/(10**uint(wToken.decimals()))));\n', '                    ES.redeemEcoEarning(msgSender,amountLeft);\n', '            }\n', '        }\n', '        else {\n', '            //uint locked = ES.getUserLockedAmount(from, msgSender);\n', '            require(wToken.balanceOf(msgSender) >= amount,"Insufficient Balance");\n', '            _withdraw(msgSender, from, amount, to, _amount);\n', '        }\n', '        ES1.emitSwap(msgSender,from,to,_amount);\n', '    }\n', '    \n', '    function _withdraw(address msgSender, string memory from, uint amount, string memory to, uint _amount ) internal {\n', '                \n', '        (wERC20 wToken,ERC20Basic rToken) = (wERC20(ETM.getwTokenAddress(to)),ERC20Basic(ETM.getrTokenAddress(from)));         \n', '        ES1.unlockDeposit(msgSender,amount, from);\n', '        wToken.burnFrom(msgSender,amount);\n', '        ES1.setOwnerFeeVault(to,(amount*ES1.swapFee())/100);\n', '        ES.zeroDepositorPop(msgSender,from,_amount);\n', '        uint newAmount = amount - (amount*ES1.swapFee())/100;\n', '        rToken.transfer(msgSender,newAmount);\n', '    }\n', '}\n', '    ']
['/*SPDX-License-Identifier: MIT\n', '\n', '\n', '███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\n', '██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\n', '█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\n', '██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\n', '███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\n', '╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\n', '\n', 'Brought to you by Kryptual Team */\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '\n', '    \n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '    \n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint public _totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    function totalSupply() public view  returns (uint){}\n', '    function balanceOf(address who) public view returns (uint){}\n', '    function transfer(address to, uint value) public {}\n', '    function transferFrom(address _from, address _to, uint _value) public{}\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {}\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => uint256) public  lockedAmount;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol,uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function availableAmount(address owner) public view returns(uint256){\n', '        return balanceOf(owner).sub(lockedAmount[owner]);\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount <= availableAmount(sender),"ERC20 : amount exceeds available amount");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        require(amount <= availableAmount(account),"ERC20 : burn exceeds available amount");\n', '        \n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        require(amount <= availableAmount(owner),"ERC20 : approve amount exceeds available amount");\n', '        \n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    function _lock(address owner,uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: lock for zero address");\n', '        require(amount <= availableAmount(owner),"ERC20: lock value more tha available amount");\n', '        \n', '        lockedAmount[owner] = lockedAmount[owner].add(amount);\n', '    }\n', '    function _release(address owner,uint256 amount) internal virtual{\n', '        require(owner != address(0), "ERC20: release for zero address");\n', '        require(amount <= lockedAmount[owner],"ERC20 : release value more then locked value");\n', '        \n', '        lockedAmount[owner] = lockedAmount[owner].sub(amount);\n', '    }\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ERC20Pausable is ERC20, Pausable {\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the contract must not be paused.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '    }\n', '}\n', '\n', '\n', 'contract wERC20 is Context, AccessControl, ERC20, ERC20Pausable {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '    bytes32 public constant ETMOWNER_ROLE = keccak256("ETM_ROLE");\n', '\n', '    /**\n', '     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n', '     * account that deploys the contract.\n', '     *\n', '     * See {ERC20-constructor}.\n', '     */\n', '    constructor(string memory name, string memory symbol,uint8 decimals,address admin,address etmOwner) public ERC20(name, symbol,decimals) {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n', '        _setupRole(ETMOWNER_ROLE, etmOwner);\n', '        _setupRole(MINTER_ROLE, admin);\n', '        _setupRole(PAUSER_ROLE, admin);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` new tokens for `to`.\n', '     *\n', '     * See {ERC20-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MINTER_ROLE`.\n', '     */\n', '    function mint(address to, uint256 amount) public virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint");\n', '        _mint(to, amount);\n', '    }\n', '    \n', '    function burnFrom(address _from,uint256 amount) public virtual{\n', '     require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have admin role to burn");\n', '     _burn(_from,amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Pauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_pause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function pause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause");\n', '        _pause();\n', '    }\n', '    function changeAdmin(address admin) public virtual{\n', '        require(hasRole(ETMOWNER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have admin role");\n', '        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n', '        _setupRole(MINTER_ROLE, admin);\n', '        _setupRole(PAUSER_ROLE, admin);        \n', '    }\n', '    /**\n', '     * @dev Unpauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_unpause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function unpause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause");\n', '        _unpause();\n', '    }\n', '    \n', '    function lock(address account , uint256 amount) public virtual{\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have admin role to lock");\n', '        _lock(account,amount);\n', '    }\n', '    \n', '    function release(address account , uint256 amount) public virtual{\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have admin role to release");\n', '        _release(account,amount);\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}\n', '\n', '\n']
['/*SPDX-License-Identifier: MIT\n', '\n', '\n', '███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\n', '██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\n', '█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\n', '██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\n', '███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\n', '╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\n', '\n', 'Brought to you by Kryptual Team */\n', '\n', 'pragma solidity ^0.6.0;\n', 'import "./helpers.sol";\n', '\n', 'contract IAbacusOracle{\n', '    uint public callFee;\n', '    function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }\n', '    function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}\n', '}\n', '\n', '\n', 'contract EcoceliumTokenManager is Initializable{\n', '    \n', '    address public owner;\n', '    address public EcoceliumAddress;\n', '    address [] public TokenAddresses;\n', '    mapping (string => address) rTokens;    \n', '    mapping (string => string)  rTokensTowToken;\n', '    mapping (string => TokenConfig)  wTokens;\n', '    \n', '    struct TokenConfig{\n', '        address tokenAddress;\n', '        uint64 fetchId;\n', '    }\n', '    \n', '    function initialize(address _owner) public initializer{\n', '        owner = _owner;\n', '    }\n', '    event WrapTokenCreated(\n', '        address TokenAddress,\n', '        string  TokenName,\n', '        string  TokenSymbol,\n', '        uint    Decimals\n', '        );\n', '        \n', '    function updateEcoceliumAddress(address ecoAddress) public {\n', '        require(msg.sender == owner);\n', '        EcoceliumAddress = ecoAddress;\n', '        for(uint i = 0;i<TokenAddresses.length;i++){\n', '            wERC20(TokenAddresses[i]).changeAdmin(ecoAddress);\n', '            \n', '        }\n', '    }\n', '    \n', '    function addToken(address tokenAddress) public {\n', '        require(msg.sender == owner);\n', '        \n', '        ERC20Basic token = ERC20Basic(tokenAddress);\n', '        require(getrTokenAddress(token.symbol())== address(0),"token exist");\n', '        rTokens[token.symbol()] = tokenAddress;  \n', '        TokenAddresses.push(tokenAddress);\n', '    } \n', '\n', '    function createWrapToken(string memory name,string memory symbol,uint64 _fetchId,string memory wrapOf) public  returns(address TokenAddress){\n', '        require(msg.sender == owner);\n', '        require(EcoceliumAddress != address(0),"update Ecocelium Address");\n', '        ERC20Basic rToken = ERC20Basic(getrTokenAddress(wrapOf));\n', '        require(getrTokenAddress(wrapOf) != address(0),"counterpart not supported");\n', '\n', '        wERC20  token = new wERC20(name,symbol,uint8(rToken.decimals()),EcoceliumAddress,address(this));        \n', '        // token.initialize(name,symbol,uint8(rToken.decimals()),EcoceliumAddress,address(this));\n', '        rTokensTowToken[wrapOf] = symbol;\n', '        TokenAddresses.push(address(token));\n', '        wTokens[symbol] = TokenConfig({\n', '                                        tokenAddress:address(token),\n', '                                        fetchId : _fetchId\n', '                                    });\n', '        emit WrapTokenCreated(address(token),name,symbol,token.decimals());                            \n', '        return address(token);\n', '    } \n', '    function changeOwner(address _owner) public{\n', '        require(owner == msg.sender);\n', '        owner =_owner;\n', '    }    \n', '    function getwTokenAddress(string memory symbol) public view returns(address){\n', '        return wTokens[symbol].tokenAddress;\n', '    }\n', '    \n', '    function getFetchId(string memory symbol ) public view returns(uint64){\n', '        return wTokens[symbol].fetchId;\n', '    }\n', '    \n', '    function getrTokenAddress(string memory symbol) public view returns(address){\n', '        return rTokens[symbol];\n', '    }\n', '    \n', '    function getTokenAddresses() public view returns(address[] memory){\n', '        return TokenAddresses;\n', '    }\n', '    \n', '    function getWrapped(string memory symbol) public view returns(string memory){\n', '        return rTokensTowToken[symbol];\n', '    }\n', '    \n', '    function getTokenID(string memory symbol) public view returns(uint){\n', '        for(uint i=0; i< TokenAddresses.length; i++) {\n', '            if(TokenAddresses[i] == wTokens[symbol].tokenAddress) {\n', '                return i;\n', '            }\n', '        }\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', '\n', 'contract EcoceliumSub1 is Initializable {\n', '\n', '    address public owner;\n', '    EcoceliumTokenManager ETM;\n', '    string public WRAP_ECO_SYMBOL;\n', '    uint public swapFee;\n', '    uint public rewardFee;\n', '    uint public tradeFee;\n', '    uint public CDSpercent;\n', '    string [] rtokenlist;\n', '    string [] wtokenlist;\n', '    mapping (string => uint) public rcurrencyID;\n', '    mapping (string => uint) public wcurrencyID;\n', '    mapping (address => bool)  public isRegistrar;\n', '    mapping (address => bool) public isUserLocked;\n', '    mapping (string => uint ) public ownerFeeVault;\n', '    mapping (string => uint) public slabRateDeposit;\n', '    mapping (address => bool) public friendlyaddress;\n', '    \n', '    event OrderCreated(\n', '        address userAddress,\n', '        uint duration,\n', '        uint yield,\n', '        uint amount,\n', '        string token\n', '        );\n', '        \n', '    event Swap(\n', '        address userAddress,\n', '        string from,\n', '        string to,\n', '        uint amount\n', '        );\n', '        \n', '    event Borrowed(\n', '        uint64 orderId,\n', '        address borrower,\n', '        uint amount,\n', '        uint duration\n', '        );\n', '        \n', '    event Deposit(\n', '         address userAddress,\n', '         string token,\n', '         uint tokenAmount,\n', '         uint collateralValue\n', '         );\n', '         \n', '    event DuePaid(\n', '        uint64 orderId,\n', '        address borrower,\n', '        uint amount\n', '        );\n', '        \n', '    function initializeAddress(address _owner) public initializer {\n', '        owner = _owner;\n', '\tfriendlyaddress[_owner] = true;\n', '    }\n', '       \n', '    function addCurrency(string memory rtoken) public{\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        if(rcurrencyID[rtoken] != 0) {\n', '            rtokenlist.push(rtoken);\n', '            rcurrencyID[rtoken] = rtokenlist.length+1;\n', '            wtokenlist.push(ETM.getWrapped(rtoken));\n', '            wcurrencyID[ETM.getWrapped(rtoken)] = wtokenlist.length+1;\n', '        }\n', '    }\n', '    \n', '    function changeOwner(address _owner) public{\n', '        (msg.sender == owner,"not owner");\n', '        owner = _owner;\n', '    }\n', '    \n', '    function setSlabRate(string memory WToken, uint rate) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        slabRateDeposit[WToken] = rate;\n', '    }\n', '    \n', '    function setUserLocked(address userAddress, bool value) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        isUserLocked[userAddress] = value;\n', '    }\n', '    \n', '    function setFriendlyAddress(address Address) public {\n', '        (msg.sender == owner,"not owner");\n', '        friendlyaddress[Address] = true;\n', '    }\n', '    \n', '    function addRegistrar(address _registrar) public{\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        isRegistrar[_registrar] = true;\n', '    }\n', '    \n', '    function setOwnerFeeVault(string memory add,uint value) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        ownerFeeVault[add] += value; \n', '    }\n', '       \n', '    function emitOrderCreated(address userAddress, uint _duration, uint _yield, uint newAmount,string  memory _tokenSymbol) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        emit OrderCreated(userAddress,_duration,_yield,newAmount,_tokenSymbol);        \n', '    }\n', '    \n', '    function emitSwap(address msgSender, string memory from, string memory to,uint _amount) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        emit Swap(msgSender,from,to,_amount);\n', '    }\n', '    \n', '    function emitBorrowed(uint64 _orderId, address msgSender, uint _amount,uint _duration) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        emit Borrowed(_orderId,msgSender,_amount,_duration);\n', '    }\n', '    \n', '    function emitDeposit(address msgSender, string memory _tokenSymbol, uint amount, uint tokenUsdValue) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        emit Deposit(msgSender,_tokenSymbol,amount,tokenUsdValue);\n', '    }\n', '    \n', '    function emitDuePaid(uint64 _orderId, address msgSender, uint due) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        emit DuePaid(_orderId,msgSender,due);\n', '    }\n', '    \n', '    function setWRAP_ECO_SYMBOL(string memory _symbol) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        WRAP_ECO_SYMBOL = _symbol;\n', '    }\n', '    \n', '    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        (swapFee,tradeFee,rewardFee) = (_swapFee,_tradeFee,_rewardFee);\n', '    }\n', '    \n', '    function setCSDpercent(uint percent) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        CDSpercent = percent;\n', '    }\n', '    \n', '    function unlockDeposit(address _userAddress, uint amount, string memory WToken) public {\n', '        require(friendlyaddress[msg.sender],"Not Friendly Address");\n', '        wERC20 wtoken = wERC20(ETM.getwTokenAddress(WToken));\n', '        wtoken.release(_userAddress,amount);\n', '    }\n', '        \n', '}\n', '\n']
