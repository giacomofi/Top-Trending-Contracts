['// File: contracts/interfaces/IUniswapV2ERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2ERC20 {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IUniswapV2Pair.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/IUniswapV2Router2.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Router2 {\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function WETH() external pure returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/IUniswapV2Factory.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', '// File: contracts/PickleMigrator.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '// Migrate from SUSHISWAP to UNISWAP for the PICKLES\n', 'contract PickleMigrator {\n', '    IUniswapV2Factory factory = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '\n', '    IUniswapV2Router2 router = IUniswapV2Router2(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '\n', '    IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(\n', '        0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\n', '    );\n', '\n', '    IUniswapV2Router2 sushiswapRouter = IUniswapV2Router2(\n', '        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\n', '    );\n', '\n', '    function migrateToUniswapWithPermit(\n', '        address token0,\n', '        address token1,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        address pair = sushiswapFactory.getPair(token0, token1);\n', '\n', '        // Permit\n', '        IUniswapV2ERC20(pair).permit(\n', '            msg.sender,\n', '            address(this),\n', '            value,\n', '            deadline,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        migrateToUniswap(token0, token1, value);\n', '    }\n', '\n', '    function migrateToUniswap(\n', '        address token0,\n', '        address token1,\n', '        uint256 value\n', '    ) public {\n', '        // Removes liquidity from sushiswap\n', '        address sushiPair = sushiswapFactory.getPair(token0, token1);\n', '        IUniswapV2ERC20(sushiPair).transferFrom(msg.sender, address(this), value);\n', '        IUniswapV2ERC20(sushiPair).approve(address(sushiswapRouter), value);\n', '        sushiswapRouter.removeLiquidity(\n', '            token0,\n', '            token1,\n', '            value,\n', '            0,\n', '            0,\n', '            address(this),\n', '            now + 60\n', '        );\n', '\n', '        // Adds liquidity to Uniswap\n', '        uint256 bal0 = IUniswapV2ERC20(token0).balanceOf(address(this));\n', '        uint256 bal1 = IUniswapV2ERC20(token1).balanceOf(address(this));\n', '        IUniswapV2ERC20(token0).approve(address(router), bal0);\n', '        IUniswapV2ERC20(token1).approve(address(router), bal1);\n', '        router.addLiquidity(\n', '            token0,\n', '            token1,\n', '            bal0,\n', '            bal1,\n', '            0,\n', '            0,\n', '            msg.sender,\n', '            now + 60\n', '        );\n', '\n', '        // Refund sender any remaining tokens\n', '        IUniswapV2ERC20(token0).transfer(\n', '            msg.sender,\n', '            IUniswapV2ERC20(token0).balanceOf(address(this))\n', '        );\n', '        IUniswapV2ERC20(token1).transfer(\n', '            msg.sender,\n', '            IUniswapV2ERC20(token1).balanceOf(address(this))\n', '        );\n', '    }\n', '}']