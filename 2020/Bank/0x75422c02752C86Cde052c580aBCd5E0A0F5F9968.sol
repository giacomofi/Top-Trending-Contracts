['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity ^0.5.15;\n', '\n', 'contract RaffleSignatureVerifier {\n', '    struct Participant {\n', '        address wallet;\n', '        uint256 raffle;\n', '    }\n', '\n', '    string private constant PARTICIPANT_TYPE = "Participant(address wallet,uint256 raffle)";\n', '    bytes32 private constant PARTICIPANT_TYPEHASH = keccak256(abi.encodePacked(PARTICIPANT_TYPE));\n', '\n', '    uint256 constant chainId = 1;\n', '    bytes32 constant salt = 0xb857c3bb801294f2c8a1a75673b4d63e1550f30e0ee556df6867a5a853b86047;\n', '    string private constant EIP712_DOMAIN = "EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)";\n', '    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\n', '    bytes32 private constant DOMAIN_SEPARATOR = keccak256(abi.encode(\n', '        EIP712_DOMAIN_TYPEHASH,\n', '        keccak256("POAP.fun"),\n', '        keccak256("1"),\n', '        chainId,\n', '        salt\n', '    ));\n', '\n', '    function hashParticipant(Participant memory participant) private pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(\n', '            "\\x19\\x01",\n', '           DOMAIN_SEPARATOR,\n', '            keccak256(abi.encode(\n', '                PARTICIPANT_TYPEHASH,\n', '                participant.wallet,\n', '                participant.raffle\n', '            ))\n', '        ));\n', '    }\n', '\n', '    function verify(Participant memory participant, bytes32 r, bytes32 s, uint8 v) public pure returns (address) {\n', '        return ecrecover(hashParticipant(participant), v, r, s);\n', '    }\n', '}']