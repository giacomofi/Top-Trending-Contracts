['/**\n', ' * www.the8020.ch\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '   /*==================================================================================\n', '    =  The 80/20 is a Wealth Distribution system that is open for anyone to use.      =  \n', '    =  We created this application with hopes that it will provide a steady stream    =\n', '    =  of passive income for generations to come. The foundation that stands behind   =\n', '    =  this product would like you to live happy, free, and prosperous.               =\n', '    =  Stay tuned for more dApps from the GSG Global Marketing Group.                 =\n', '    =  #LuckyRico #LACGold #JCunn24 #BoHarvey #LennyBones #WealthWithPhelps \t      =\n', '    =  #ShahzainTariq >= developer of this smart contract\t\t \t\t\t\t      =\n', '    ================================================================================*/\n', '\n', 'interface IERC20 {\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract auto_pool is IERC20{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlybelievers () {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyhodler() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', ' \n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint256 time,\n', '        uint256 totalTokens\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned,\n', '        uint256 time,\n', '        uint256 totalTokens\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    event distrubuteBonusFund(\n', '        address,\n', '        uint256\n', '        );\n', '        \n', '    event amountDistributedToSponsor(\n', '        address,\n', '        address,\n', '        uint256\n', '        );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens,\n', '        uint256 time\n', '    );\n', '    \n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name ;\n', '    string public symbol ;\n', '    uint8 public decimals ;\n', '    uint8 internal dividendFee_ ;\n', '    uint256 internal tokenPriceInitial_ ;\n', '    uint256 internal tokenPriceIncremental_ ;\n', '    uint256 internal magnitude;\n', '\n', '    uint256 public tokenPool;\n', '    uint256 public loyaltyPool;\n', '    uint256 public developmentFund;\n', '    uint256 public sponsorsPaid;\n', '    uint256 public gsg_foundation;\n', '    address dev1;\n', '    address dev2;\n', '    address GSGO_Official_LoyaltyPlan;\n', '    uint256 public currentId;\n', '    uint256 public day;\n', '    uint256 public claimedLoyalty;\n', '    uint256 public totalDeposited;    \n', '    uint256 public totalWithdraw;\n', '  \n', '  \n', '    \n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) public tokenBalanceLedger_;\n', '    mapping(address => uint256) public  referralBalance_;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping(address => int256) public payoutsTo_;\n', '    mapping(address => basicData) public users;\n', '    mapping(uint256 => address) public userList;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    uint256 internal profitperLoyalty;\n', '    \n', "    //Users's data set\n", '    struct basicData{\n', '        bool isExist;\n', '        uint256 id;\n', '        uint256 referrerId;\n', '        address referrerAdd;\n', '    }\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    constructor() public{\n', '        name = "The-Eighty-Twenty";\n', '        symbol = "GS20";\n', '        decimals = 18;\n', '        dividendFee_ = 10;\n', '        tokenPriceInitial_ = 0.0000001 ether;\n', '        tokenPriceIncremental_ = 0.00000001 ether;\n', '        magnitude = 2**64;\n', '        // "This is the distribution contract for holders of the GSG-Official (GSGO) Token."\n', '        GSGO_Official_LoyaltyPlan = address(0x727395b95C90DEab2F220Ce42615d9dD0F44e187);\n', '        dev1 = address(0x88F2E544359525833f606FB6c63826E143132E7b);\n', '        dev2 = address(0x7cF196415CDD1eF08ca2358a8282D33Ba089B9f3);\n', '        currentId = 0;\n', '        day = now;\n', '    \n', '    }\n', '    \n', '     \n', '    /**\n', '     * Converts all incoming Ethereum to tokens for the caller, and passes down the referral address (if any)\n', '     */\n', '    function buy(address _referredAdd)\n', '        public  \n', '        payable\n', '        returns(uint256)\n', '    {\n', '        require(msg.value >= 0.1 ether, "ERROR: minimun 0.1 ethereum ");\n', '        require(_referredAdd != msg.sender,"ERROR: cannot become own ref");\n', '        \n', '        if(!users[msg.sender].isExist) register(msg.sender,_referredAdd);\n', '        \n', '        purchaseTokens(msg.value,_referredAdd);\n', '         \n', '        //Distributing Ethers\n', '        loyaltyPool += ((msg.value.mul(12)).div(100));\n', '        developmentFund += ((msg.value.mul(2)).div(100));\n', '        gsg_foundation += ((msg.value.mul(2)).div(100));\n', '        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\n', '        payable(dev1).transfer((msg.value.mul(1)).div(100));\n', '        payable(dev2).transfer((msg.value.mul(1)).div(100));\n', '        totalDeposited += msg.value;\n', '\n', '    }\n', '    \n', '    receive() external payable {\n', '         require(msg.value >= 0.1 ether, "ERROR: minimun 0.1 ethereum .");\n', '\n', '     if(!users[msg.sender].isExist) register(msg.sender,address(0));\n', '\n', '        purchaseTokens(msg.value,address(0));\n', '         \n', '        //Distributing Ethers\n', '        loyaltyPool += ((msg.value.mul(12)).div(100));\n', '        developmentFund += ( (msg.value.mul(2)).div(100));\n', '        gsg_foundation += ((msg.value.mul(2)).div(100));\n', '        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\n', '        payable(dev1).transfer((msg.value.mul(1)).div(100));\n', '        payable(dev2).transfer((msg.value.mul(1)).div(100)); \n', '    }\n', '    \n', '    fallback()\n', '        payable\n', '        external\n', '    {\n', '    require(msg.value >= 0.1 ether, "ERROR: minimun 0.1 ethereum .");\n', '\n', '     if(!users[msg.sender].isExist) register(msg.sender,address(0));\n', '\n', '        purchaseTokens(msg.value,address(0));\n', '         \n', '        //Distributing Ethers\n', '        loyaltyPool += ((msg.value.mul(12)).div(100));\n', '        developmentFund += ( (msg.value.mul(2)).div(100));\n', '        gsg_foundation += ((msg.value.mul(2)).div(100));\n', '        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\n', '        payable(dev1).transfer((msg.value.mul(1)).div(100));\n', '        payable(dev2).transfer((msg.value.mul(1)).div(100));    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyhodler()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '        \n', '        uint256 _loyaltyEth = loyaltyOf();\n', '        if(_loyaltyEth > 0 ether){\n', '            payable(address(_customerAddress)).transfer(_loyaltyEth);\n', '                loyaltyPool -= _loyaltyEth;\n', '                claimedLoyalty += _loyaltyEth;\n', '                totalWithdraw += _loyaltyEth;\n', '        }       \n', '        \n', '        // pay out the dividends virtually\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        \n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        address refAdd = users[_customerAddress].referrerAdd;\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends,refAdd);\n', '        loyaltyPool += ((_dividends.mul(12)).div(100));\n', '        developmentFund += ((_dividends.mul(2)).div(100));\n', '        gsg_foundation += ((_dividends.mul(2)).div(100));\n', '        payable(GSGO_Official_LoyaltyPlan).transfer((_dividends.mul(2)).div(100));\n', '        payable(dev1).transfer((_dividends.mul(1)).div(100));\n', '        payable(dev2).transfer((_dividends.mul(1)).div(100));\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        \n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyhodler()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '        uint256 _loyaltyEth = loyaltyOf();\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        if(_loyaltyEth > 0 ether) {\n', '            _dividends += _loyaltyEth;\n', '            loyaltyPool -= _loyaltyEth;\n', '            claimedLoyalty += _loyaltyEth;\n', '        }       \n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        \n', '        totalWithdraw += _dividends;\n', '\n', '        // delivery service\n', '        payable(address(_customerAddress)).transfer(_dividends);\n', '        \n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlybelievers ()\n', '        public\n', '    {\n', '      \n', '        address _customerAddress = msg.sender;\n', '       \n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        //initializating values; \n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 tax = (_ethereum.mul(5)).div(100);\n', '        loyaltyPool = SafeMath.add(loyaltyPool,tax);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, tax);\n', '    \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        \n', '       //updates dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        payoutsTo_[_customerAddress] += (int256) (_taxedEthereum*magnitude);       \n', '     \n', '        totalWithdraw += _taxedEthereum; \n', '   \n', '        //tranfer amout of ethers to user\n', '        payable(address(_customerAddress)).transfer(_taxedEthereum);\n', '        \n', '        if(_ethereum < tokenPool) {\n', '            tokenPool = SafeMath.sub(tokenPool, _ethereum);   \n', '        }\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum,now,tokenBalanceLedger_[_customerAddress]);\n', '    }\n', '    \n', '    \n', '    function approve(address spender, uint amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    \n', '     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    \n', '     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlybelievers ()\n', '        public\n', '        override\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // make sure we have the requested tokens\n', '     \n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '        \n', '       // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _amountOfTokens,now);\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '    \n', '    function transferFrom(address sender, address _toAddress, uint _amountOfTokens) public override returns (bool) {\n', '        // setup\n', '        address _customerAddress = sender;\n', '        \n', '        // make sure we have the requested tokens\n', '     \n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '        \n', '       // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _amountOfTokens,now);\n', '        \n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(_amountOfTokens, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', ' \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        override\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '       */ \n', '    function myDividends(bool _includeReferralBonus) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        override\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '       \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 tax = (_ethereum.mul(5)).div(100);\n', '            uint256 _dividends = SafeMath.div(_ethereum, tax);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '   \n', '    function calculateTokensReceived(uint256 _ethToSpend) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        uint256 _ethereumToSpend = (_ethToSpend.mul(64)).div(100);\n', '        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    \n', '    function getReferrer() public view returns(address){\n', '        return users[msg.sender].referrerAdd;\n', '    }\n', '   \n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 tax = (_ethereum.mul(5)).div(100);\n', '        uint256 _dividends = SafeMath.div(_ethereum, tax);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '   \n', '    function loyaltyOf() public view returns(uint256){\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // user should hold 2500 tokens for qualify for loyalty bonus;\n', '        if(tokenBalanceLedger_[_customerAddress] >= 2000*10**uint256(decimals)){\n', '            // return loyalty bonus users\n', '            return ((uint256) ((int256)((profitperLoyalty) * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude)*14/5;\n', '        }\n', '        else{\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function userReferrer(address _address) public view returns(address){\n', '        return userList[users[_address].referrerId];\n', '    }\n', ' \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _eth, address _referredBy)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        uint256 _incomingEthereum = (_eth.mul(64)).div(100);\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '        tokenPool += _taxedEthereum;\n', '\n', '      \n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '       \n', '        // is the user referred by a karmalink?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress \n', '            \n', '        ){\n', '            // wealth redistribution\n', '            \n', '            distributeToSponsor(_referredBy,_eth);\n', '            \n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        \n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '            profitperLoyalty += ((_dividends) * magnitude / (tokenSupply_));\n', '\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        \n', '        //update dividends tracker\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '            \n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy,now,tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '       \n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '         _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '  \n', '    /**\n', '     * Calculate token sell value.\n', '          */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '    \n', '    \n', '    function register(address _sender, address _referredBy) internal {\n', '        \n', '        uint256 _id = users[_referredBy].id; \n', '        \n', '        basicData memory UserStruct;\n', '        currentId++;\n', '        \n', '        //add users data\n', '        UserStruct = basicData({\n', '            isExist: true,\n', '            id: currentId,\n', '            referrerId: _id,\n', '            referrerAdd: _referredBy\n', '        });\n', '        \n', '\n', '        userList[currentId] = _sender;\n', '        users[msg.sender] = UserStruct;\n', '    }\n', '    \n', '    function distributeToSponsor(address _address,uint256 _eth) internal {\n', '        uint256 _sp1 = (_eth.mul(10)).div(100);\n', '        uint256 _sp2 = (_eth.mul(7)).div(100);\n', '        uint256 _sp3 = (_eth.mul(3)).div(100);\n', '        \n', '        address add1 = _address;\n', '        address add2 = users[_address].referrerAdd;\n', '        address add3 = users[add2].referrerAdd;\n', '        \n', '        //add amount of ref bonus to referrer\n', '        referralBalance_[add1] +=  (_sp1);\n', '        \n', '        sponsorsPaid += _sp1;\n', '        //fire event on distributionToSponsor\n', '        emit amountDistributedToSponsor(msg.sender, add1,_sp1);\n', '        \n', '        //add amount of ref bonus to referrer\n', '        referralBalance_[add2] += (_sp2);\n', '        \n', '        sponsorsPaid += _sp2;\n', '        //fire event on distributionToSponsor\n', '        emit amountDistributedToSponsor(msg.sender, add2, _sp2);\n', '\n', '        //add amount of ref bonus to referrer\n', '        referralBalance_[add3] +=  (_sp3);\n', '        \n', '        sponsorsPaid += _sp3;\n', '        //fire event on distributionToSponsor\n', '        emit amountDistributedToSponsor(msg.sender, add3, _sp3);\n', '    }\n', '    \n', '    \n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}']