['pragma solidity ^0.6.6;\n', '\n', 'interface IUniswapV2Router02 {\n', '\tfunction factory() external pure returns (address);\n', '\tfunction WETH() external pure returns (address);\n', '\n', '\tfunction addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\n', '\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '\tfunction removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\n', '\tfunction removeLiquidityETH(address token,uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\n', '\tfunction removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\n', '\tfunction removeLiquidityETHWithPermit(address token,uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountETH);\n', '\tfunction swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n', '\tfunction swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n', '\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n', '\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n', '\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n', '\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n', '\n', '\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountETH);\n', '\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountETH);\n', '\n', '\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\n', '\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\n', '\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\n', '}\n', '\n', 'interface IERC20 {\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ScamChecker  {\n', '\taddress payable public contractOwner;\n', '\n', '\tconstructor() public {\n', '\t\tcontractOwner = msg.sender;\n', '\t}\n', '\n', '\tfunction execute(bytes calldata data) external payable {\t\t\n', '\t}\n', '\t\n', '\tfunction withdraw(address atoken) public {\n', '\t\trequire(msg.sender == contractOwner, "Nope");\n', '\n', '\t\tIERC20 token = IERC20(atoken);\n', '\t\tuint256 bal = token.balanceOf(address(this));\n', '\t\tif (bal > 0)\n', '\t\t\ttoken.transfer(contractOwner, bal);\n', '\n', '\t\tbal = address(this).balance;\n', '\t\tif (bal > 0)\n', '\t\t\tcontractOwner.send(bal);\n', '\t}\n', '\n', '\tfunction testTokenWeth(address tokenAddr) public {\n', '\t\ttestToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, tokenAddr);\n', '\t}\n', '\n', '\tfunction testToken(address tokenAddr0, address tokenAddr1) public {\n', '\t\tIERC20 token0 = IERC20(tokenAddr0);\n', '\t\tIERC20 token1 = IERC20(tokenAddr1);\n', '\n', '\t\ttoken0.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, uint(-1));\n', '\t\ttoken1.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, uint(-1));\n', '\n', '\t\tIUniswapV2Router02 exchange = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\t\taddress[] memory path = new address[](2);\n', '\t\tpath[0] = tokenAddr0;\n', '\t\tpath[1] = tokenAddr1;\n', '\t\tuint256 bal = token0.balanceOf(address(this));\n', '\t\texchange.swapExactTokensForTokens(bal, 1, path, address(this), block.timestamp);\n', '\n', '\t\tbal = token1.balanceOf(address(this));\n', '\t\tpath[0] = tokenAddr1;\n', '\t\tpath[1] = tokenAddr0;\n', '\t\texchange.swapExactTokensForTokens(bal, 1, path, address(this), block.timestamp);\n', '\t}\n', '}']