['//   _    _ _   _                __ _                            \n', '//  | |  (_) | | |              / _(_)                           \n', '//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \n', "//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\n", '//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\n', '//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\n', '//\n', 'pragma solidity ^0.5.16;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface kBASEv0 {\n', '  function allowance ( address owner, address spender ) external view returns ( uint256 );\n', '  function approve ( address spender, uint256 amount ) external returns ( bool );\n', '  function balanceOf ( address account ) external view returns ( uint256 );\n', '  function decimals (  ) external view returns ( uint8 );\n', '  function decreaseAllowance ( address spender, uint256 subtractedValue ) external returns ( bool );\n', '  function governance (  ) external view returns ( address );\n', '  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool );\n', '  function monetaryPolicy (  ) external view returns ( address );\n', '  function name (  ) external view returns ( string memory );\n', '  function rebase ( uint256 epoch, int256 supplyDelta ) external returns ( uint256 );\n', '  function setGovernance ( address _governance ) external;\n', '  function setMonetaryPolicy ( address monetaryPolicy_ ) external;\n', '  function symbol (  ) external view returns ( string memory );\n', '  function totalSupply (  ) external view returns ( uint256 );\n', '  function transfer ( address recipient, uint256 amount ) external returns ( bool );\n', '  function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\n', '}\n', '\n', 'contract kBASEPolicyV0 {\n', '    using SafeMath for uint;\n', '\n', '    uint public constant PERIOD = 10 minutes; // will be 10 minutes in REAL CONTRACT\n', '\n', '    IUniswapV2Pair public pair;\n', '    kBASEv0 public token;\n', '\n', '    uint    public price0CumulativeLast = 0;\n', '    uint32  public blockTimestampLast = 0;\n', '    uint224 public price0RawAverage = 0;\n', '    \n', '    uint    public epoch = 0;\n', '\n', '    constructor(address _pair) public {\n', '        pair = IUniswapV2Pair(_pair);\n', '        token = kBASEv0(pair.token0());\n', '        price0CumulativeLast = pair.price0CumulativeLast();\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');\n", '    }\n', '    \n', '    uint private constant MAX_INT256 = ~(uint(1) << 255);\n', '    function toInt256Safe(uint a) internal pure returns (int) {\n', '        require(a <= MAX_INT256);\n', '        return int(a);\n', '    }\n', '\n', '    function rebase() external {\n', '        uint timestamp = block.timestamp;\n', '        require(timestamp % 3600 < 3 * 60); // rebase can only happen between XX:00:00 ~ XX:02:59 of every hour\n', '        \n', '        uint price0Cumulative = pair.price0CumulativeLast();\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        uint32 blockTimestamp;\n', '        (reserve0, reserve1, blockTimestamp) = pair.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');\n", '        \n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // ensure that at least one full period has passed since the last update\n', "        require(timeElapsed >= PERIOD, 'PERIOD_NOT_ELAPSED');\n", '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        price0RawAverage = uint224((price0Cumulative - price0CumulativeLast) / timeElapsed);\n', '\n', '        price0CumulativeLast = price0Cumulative;\n', '        blockTimestampLast = blockTimestamp;\n', '        \n', '        // compute rebase\n', '        \n', '        uint price = price0RawAverage;\n', '        price = price.mul(10 ** 17).div(2 ** 112); // USDC decimals = 6, 100000 = 10^5, 18 - 6 + 5 = 17\n', ' \n', "        require(price != 100000, 'NO_NEED_TO_REBASE'); // don't rebase if price = 1.00000\n", '        \n', '        // rebase & sync\n', '        \n', '        if (price > 100000) { // positive rebase\n', '            uint delta = price.sub(100000);\n', '            token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta\n', '        } \n', '        else { // negative rebase\n', '            uint delta = 100000;\n', '            delta = delta.sub(price);\n', '            token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP\n', '        }\n', '        \n', '        pair.sync();\n', '        epoch = epoch.add(1);\n', '    }\n', '}']