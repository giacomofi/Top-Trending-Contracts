['pragma solidity 0.5.15;\n', '\n', 'interface IUniswapRouter {\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y > 0);\n', '        z = x / y;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'interface IYAMIncentivizer {\n', '    function DURATION() external view returns (uint256);\n', '\n', '    function rewardRate() external view returns (uint256);\n', '\n', '    function uni_lp() external view returns (IERC20);\n', '}\n', '\n', 'interface IUniswap {\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '}\n', '\n', 'contract CalculateApy {\n', '    using SafeMath for uint256;\n', '    bool private initialized;\n', '\n', '    address public owner;\n', '    address private uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    // Stable coin: USDx.\n', '    address private reserveAddress = 0xeb269732ab75A6fD61Ea60b06fE994cD32a83549;\n', '    address private yuanAddress;\n', '\n', '    mapping(address => address[]) poolPath;\n', '    uint256 constant BASE = 10 ** 18;\n', '    uint256 constant year_seconds = 3600 * 24 * 365;\n', '\n', '    constructor(address _yuanAddress) public {\n', '        initialize(_yuanAddress);\n', '    }\n', '\n', '    function initialize(address _yuanAddress) public {\n', '        require(!initialized, "initialize: Already initialized!");\n', '        yuanAddress = _yuanAddress;\n', '        owner = msg.sender;\n', '        initialized = true;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = x.mul(y) / BASE;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = x.mul(BASE).div(y);\n', '    }\n', '\n', '    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = x.mul(BASE).add(y.sub(1)).div(y);\n', '    }\n', '\n', '    function getTokenPrice(address _token) internal view returns (uint256) {\n', '        uint256[] memory res = IUniswapRouter(uniRouter).getAmountsOut(\n', '            BASE,\n', '            poolPath[_token]\n', '        );\n', '        uint256 price = res[res.length - 1];\n', '        return price;\n', '    }\n', '\n', '    function setPoolPath(address[] calldata _path) external {\n', '        require(msg.sender == owner, "setPath: Permission denied!");\n', '        poolPath[_path[0]] = _path;\n', '    }\n', '\n', '    function setYuanAddress(address _token) external {\n', '        require(msg.sender == owner, "setYuanAddress: Permission denied!");\n', '        yuanAddress = _token;\n', '    }\n', '\n', '    function setReserveAddress(address _token) external {\n', '        require(msg.sender == owner, "setReserveAddress: Permission denied!");\n', '        reserveAddress = _token;\n', '    }\n', '\n', '    function getUniAddress(address _pool) public view returns (address) {\n', '        IYAMIncentivizer _contract = IYAMIncentivizer(_pool);\n', '        IERC20 uniswapFactory = _contract.uni_lp();\n', '        return address(uniswapFactory);\n', '    }\n', '\n', '    function getLpPrice(address _uniPool)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            address,\n', '            address\n', '        )\n', '    {\n', '        address token0 = IUniswap(_uniPool).token0();\n', '        address token1 = IUniswap(_uniPool).token1();\n', '        uint256 totalValue;\n', '        address token;\n', '        if (token0 == reserveAddress || token1 == reserveAddress) {\n', '            if (token0 == reserveAddress) {\n', '                totalValue = (IERC20(token0)).balanceOf(_uniPool) << 1;\n', '            } else {\n', '                totalValue = (IERC20(token1)).balanceOf(_uniPool) << 1;\n', '            }\n', '        } else {\n', '            if (poolPath[token0].length != 0) {\n', '                token = token0;\n', '            } else if (poolPath[token1].length != 0) {\n', '                token = token1;\n', '            } else {\n', '                return (0, 0, 0, token0, token1);\n', '            }\n', '            uint256 tokenPrice = getTokenPrice(token);\n', '            uint256 _totalSupply = (IERC20(token)).balanceOf(_uniPool) << 1;\n', '            totalValue = rmul(_totalSupply, tokenPrice);\n', '        }\n', '        uint256 lpUniBalance = (IERC20(_uniPool)).totalSupply();\n', '        uint256 lpPrice = rdiv(totalValue, lpUniBalance);\n', '        return (lpPrice, totalValue, lpUniBalance, token0, token1);\n', '    }\n', '\n', '    function calcuateApy(address _pool)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        IYAMIncentivizer totalIncentive_contract = IYAMIncentivizer(_pool);\n', '        uint256 yuanPrice = getTokenPrice(yuanAddress);\n', '        address uniPool = getUniAddress(_pool);\n', '        (uint256 lpPrice, , , , ) = getLpPrice(uniPool);\n', '        uint256 rewardRate = totalIncentive_contract.rewardRate();\n', '        uint256 lpStakingBalance = (IERC20(uniPool)).balanceOf(_pool);\n', '        if (lpStakingBalance == 0) {\n', '            return (uint256(0), uint256(0), uint256(0));\n', '        }\n', '        uint256 apy = rdiv(\n', '            rmul(rewardRate, yuanPrice),\n', '            rmul(lpStakingBalance, lpPrice)\n', '        );\n', '        return (apy.mul(year_seconds), rewardRate, yuanPrice);\n', '    }\n', '}']