['// File: contracts\\sakeswap\\interfaces\\ISakeSwapERC20.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ISakeSwapERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '// File: contracts\\tools\\SakeSwapMigrator.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IRouter {\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '}\n', '\n', 'interface IFactory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', '// Migrate from SUSHISWAP/UNISWAP to SAKESWAP\n', 'contract SakeSwapMigrator {\n', '    IFactory public uniFactory = IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '    IRouter public uniRouter = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    IFactory public sushiFactory = IFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\n', '    IRouter public sushiRouter = IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n', '    IRouter public sakeRouter = IRouter(0x9C578b573EdE001b95d51a55A3FAfb45f5608b1f);\n', '\n', '    // constructor(\n', '    //     address _uniFactory, \n', '    //     address _uniRouter, \n', '    //     address _sushiFactory, \n', '    //     address _sushiRouter, \n', '    //     address _sakeRouter\n', '    // ) public {\n', '    //     uniFactory = IFactory(_uniFactory);\n', '    //     uniRouter = IRouter(_uniRouter);\n', '    //     sushiFactory = IFactory(_sushiFactory);\n', '    //     sushiRouter = IRouter(_sushiRouter);\n', '    //     sakeRouter = IRouter(_sakeRouter);\n', '    // }\n', '\n', '    function migrateUniswapWithPermit(\n', '        address token0,\n', '        address token1,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        address pair = uniFactory.getPair(token0, token1);\n', '\n', '        // Permit\n', '        ISakeSwapERC20(pair).permit(\n', '            msg.sender,\n', '            address(this),\n', '            value,\n', '            deadline,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        _migrate(uniRouter, ISakeSwapERC20(pair), token0, token1, value);\n', '    }\n', '\n', '    function migrateSushiSwapWithPermit(\n', '        address token0,\n', '        address token1,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        address pair = sushiFactory.getPair(token0, token1);\n', '\n', '        // Permit\n', '        ISakeSwapERC20(pair).permit(\n', '            msg.sender,\n', '            address(this),\n', '            value,\n', '            deadline,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        _migrate(sushiRouter, ISakeSwapERC20(pair), token0, token1, value);\n', '    }\n', '\n', '    function migrateUniswap(address token0, address token1, uint256 value) public {\n', '        address pair = uniFactory.getPair(token0, token1);\n', '        _migrate(uniRouter, ISakeSwapERC20(pair), token0, token1, value);\n', '    }\n', '\n', '    function migrateSushiSwap(address token0, address token1, uint256 value) public {\n', '        address pair = sushiFactory.getPair(token0, token1);\n', '        _migrate(sushiRouter, ISakeSwapERC20(pair), token0, token1, value);\n', '    }\n', '\n', '    function _migrate(IRouter router, ISakeSwapERC20 pair, address token0, address token1, uint256 value) internal {\n', '        // Removes liquidity\n', '        pair.transferFrom(msg.sender, address(this), value);\n', '        pair.approve(address(router), value);\n', '        router.removeLiquidity(\n', '            token0,\n', '            token1,\n', '            value,\n', '            0,\n', '            0,\n', '            address(this),\n', '            now + 60\n', '        );\n', '\n', '        // Adds liquidity to SakeSwap\n', '        uint256 bal0 = ISakeSwapERC20(token0).balanceOf(address(this));\n', '        uint256 bal1 = ISakeSwapERC20(token1).balanceOf(address(this));\n', '        ISakeSwapERC20(token0).approve(address(sakeRouter), bal0);\n', '        ISakeSwapERC20(token1).approve(address(sakeRouter), bal1);\n', '        sakeRouter.addLiquidity(\n', '            token0,\n', '            token1,\n', '            bal0,\n', '            bal1,\n', '            0,\n', '            0,\n', '            msg.sender,\n', '            now + 60\n', '        );\n', '\n', '        // Refund sender any remaining tokens\n', '        uint256 remainBal0 = ISakeSwapERC20(token0).balanceOf(address(this));\n', '        uint256 remainBal1 = ISakeSwapERC20(token1).balanceOf(address(this));\n', '        if (remainBal0 > 0) ISakeSwapERC20(token0).transfer(msg.sender, remainBal0);\n', '        if (remainBal1 > 0) ISakeSwapERC20(token1).transfer(msg.sender, remainBal1);\n', '    }\n', '}']