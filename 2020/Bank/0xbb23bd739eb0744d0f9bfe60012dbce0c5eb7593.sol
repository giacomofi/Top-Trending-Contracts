['/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-06\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract UniversalFinance {\n', '   \n', '   /**\n', '   * using safemath for uint256\n', '    */\n', '     using SafeMath for uint256;\n', '\n', '   \n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '   \n', '    /**\n', '    events for transfer\n', '     */\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '    /**\n', '    * Approved Events\n', '     */\n', '\n', '    event Approved(\n', '        address indexed spender,\n', '        address indexed recipient,\n', '        uint256 tokens\n', '    );\n', '\n', '    /**\n', '    * buy Event\n', '     */\n', '\n', '     event Buy(\n', '         address buyer,\n', '         uint256 tokensTransfered\n', '     );\n', '   \n', '   /**\n', '    * sell Event\n', '     */\n', '\n', '     event Sell(\n', '         address seller,\n', '         uint256 calculatedEtherTransfer\n', '     );\n', '     \n', '     event Reward(\n', '       address indexed to,\n', '       uint256 rewardAmount,\n', '       uint256 level\n', '    );\n', '\n', '   /** configurable variables\n', '   *  name it should be decided on constructor\n', '    */\n', '    string public tokenName;\n', '\n', '    /** configurable variables\n', '   *  symbol it should be decided on constructor\n', '    */\n', '\n', '    string public tokenSymbol;\n', '   \n', '    /** configurable variables\n', '   *  decimal it should be decided on constructor\n', '    */\n', '\n', '    uint8 internal decimal;\n', '\n', '    /** configurable variables\n', ' \n', '   \n', '    /**\n', '    * owner address\n', '     */\n', '\n', '     address public owner;\n', '\n', '     /**\n', '     current price\n', '      */\n', '    uint256 internal ethDecimal = 1000000000000000000;\n', '    uint256 public currentPrice;\n', '    uint256 public initialPrice = 10000000000000;\n', '    uint256 public initialPriceIncrement = 0;\n', '    uint256 public basePrice = 400;\n', '    /**\n', '    totalSupply\n', '     */\n', '\n', '    uint256 public _totalSupply;\n', '   \n', '    uint256 public _circulatedSupply = 0;\n', '    uint256 public basePrice1 = 10000000000000;\n', '    uint256 public basePrice2 = 250000000000000;\n', '    uint256 public basePrice3 = 450000000000000;\n', '    uint256 public basePrice4 = 800000000000000;\n', '    uint256 public basePrice5 = 1375000000000000;\n', '    uint256 public basePrice6 = 2750000000000000;\n', '    uint256 public basePrice7 = 4500000000000000;\n', '    uint256 public basePrice8 = 8250000000000000;\n', '    uint256 public basePrice9 = 13250000000000000;\n', '    uint256 public basePrice10 = 20500000000000000;\n', '    uint256 public basePrice11 = 32750000000000000;\n', '    uint256 public basePrice12 = 56250000000000000;\n', '    uint256 public basePrice13 = 103750000000000000;\n', '    uint256 public basePrice14 = 179750000000000000;\n', '    uint256 public basePrice15 = 298350000000000000;\n', '    uint256 public basePrice16 = 533350000000000000;\n', '    uint256 public basePrice17 = 996250000000000000;\n', '    uint256 public basePrice18 = 1780750000000000000;\n', '    uint256 public basePrice19 = 2983350000000000000;\n', '    uint256 public basePrice20 = 5108000000000000000;\n', '    uint256 public basePrice21 = 8930500000000000000;\n', '    uint256 public basePrice22 = 15136500000000000000;\n', '   \n', '   \n', '       \n', '         \n', '\n', '   mapping(address => uint256) private tokenBalances;\n', '   mapping(address => uint256) private allTimeTokenBal;\n', '\n', '//   mapping (address => mapping (address => uint256 )) private _allowances;\n', '   mapping(address => address) public genTree;\n', '//   mapping(address => uint256) internal rewardBalanceLedger_;\n', '//   mapping (address => mapping (uint256 => uint256 )) private levelCommission;\n', '\n', '    /**\n', '    modifier for checking onlyOwner\n', '     */\n', '\n', '     modifier onlyOwner() {\n', '         require(msg.sender == owner,"Caller is not the owner");\n', '         _;\n', '     }\n', '\n', '    constructor(string memory _tokenName, string  memory _tokenSymbol, uint256 totalSupply) public\n', '    {\n', '        //sonk = msg.sender;\n', '       \n', '        /**\n', '        * set owner value msg.sender\n', '         */\n', '        owner = msg.sender;\n', '\n', '        /**\n', '        * set name for contract\n', '         */\n', '\n', '         tokenName = _tokenName;\n', '\n', '         /**\n', '        * set symbol for contract\n', '         */\n', '\n', '        /**\n', '        * set decimals\n', '         */\n', '\n', '         decimal = 0;\n', '\n', '         /**\n', '         set tokenSymbol\n', '          */\n', '\n', '        tokenSymbol =  _tokenSymbol;\n', '\n', '         /**\n', '         set Current Price\n', '          */\n', '\n', '          currentPrice = initialPrice + initialPriceIncrement;\n', '\n', '         \n', '          _totalSupply = totalSupply;\n', '          //_mint(owner,_totalSupply);\n', '\n', '       \n', '    }\n', '   \n', '    function geAllTimeTokenBalane(address _hodl) external view returns(uint256) {\n', '            return allTimeTokenBal[_hodl];\n', '     }\n', '   \n', '    /*function getRewardBalane(address _hodl) external view returns(uint256) {\n', '            return rewardBalanceLedger_[_hodl];\n', '     }*/\n', '   \n', '   function taxDeduction(uint256 incomingEther) public pure returns(uint256)  {\n', '         \n', '        uint256 deduction = incomingEther * 22500/100000;\n', '        return deduction;\n', '         \n', '    }\n', '   \n', '    function getTaxedEther(uint256 incomingEther) public pure returns(uint256)  {\n', '         \n', '        uint256 deduction = incomingEther * 22500/100000;\n', '        uint256 taxedEther = incomingEther - deduction;\n', '        return taxedEther;\n', '         \n', '    }\n', '   \n', '   function etherToToken(uint256 incomingEther) public view returns(uint256)  {\n', '         \n', '        uint256 deduction = incomingEther * 22500/100000;\n', '        uint256 taxedEther = incomingEther - deduction;\n', '        uint256 tokenToTransfer = taxedEther.div(currentPrice);\n', '        return tokenToTransfer;\n', '         \n', '    }\n', '   \n', '   \n', '    function tokenToEther(uint256 tokenToSell) public view returns(uint256)  {\n', '         \n', '        uint256 convertedEther = tokenToSell * (currentPrice - (currentPrice/100));\n', '        return convertedEther;\n', '         \n', '    }\n', '   \n', '   \n', '    function transferEther(address payable receiver,uint256 _value) external onlyOwner returns (bool) {\n', "        require(msg.sender == owner, 'You are not owner');\n", '        receiver.transfer(_value);\n', '        return true;\n', '     }\n', '     \n', '     \n', '    /**\n', '    get TokenName\n', '     */\n', '    function name() public view returns(string memory) {\n', '        return tokenName;\n', '    }\n', '\n', '    /**\n', '    get symbol\n', '     */\n', '\n', '     function symbol() public view returns(string memory) {\n', '         return tokenSymbol;\n', '     }\n', '\n', '     /**\n', '     get decimals\n', '      */\n', '\n', '      function decimals() public view returns(uint8){\n', '            return decimal;\n', '      }\n', '     \n', '      /**\n', '      getTotalsupply of contract\n', '       */\n', '\n', '    function totalSupply() external view returns(uint256) {\n', '            return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * balance of of token hodl.\n', '     */\n', '\n', '     function balanceOf(address _hodl) external view returns(uint256) {\n', '            return tokenBalances[_hodl];\n', '     }\n', '\n', '    /**\n', '    get current price\n', '     */\n', '\n', '     function getCurrentPrice() external view returns(uint256) {\n', '         return currentPrice;\n', '     }\n', '\n', '     /**\n', '     * update current price\n', '     * notice this is only done by owner  \n', '      */\n', '\n', '      function updateCurrentPrice(uint256 _newPrice) external onlyOwner returns (bool) {\n', '          currentPrice = _newPrice;\n', '          return true;\n', '      }\n', '      \n', '     \n', '     \n', '     /*function contractAddress() public view returns(address) {\n', '         return address(this);\n', '     }*/\n', '\n', '     /* function levelWiseBalance(address _hodl, uint256 level) external view returns (uint256) {\n', '        return levelCommission[_hodl][level];\n', '      }*/\n', '      /**\n', '      buy Tokens from Ethereum.\n', '       */\n', '\n', '     function buy(address _referredBy) external payable returns (bool) {\n', '         require(_referredBy != msg.sender, "Self reference not allowed");\n', '        /* if(_referredBy == msg.sender){\n', '             return false;\n', '         }else{\n', '         if(tokenBalances[msg.sender] > 5000){\n', '             return false;\n', '         }\n', '         else{*/\n', '         address buyer = msg.sender;\n', '         uint256 etherValue = msg.value;\n', '         uint256 circulation = etherValue.div(currentPrice);\n', '         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue);\n', '         require(taxedTokenAmount > 0, "Can not buy 0 tokens.");\n', '         require(taxedTokenAmount <= 5000, "Maximum Buying Reached.");\n', '         require(taxedTokenAmount.add(allTimeTokenBal[msg.sender]) <= 5000, "Maximum Buying Reached.");\n', '         genTree[msg.sender] = _referredBy;\n', '         _mint(buyer,taxedTokenAmount,circulation);\n', '         emit Buy(buyer,taxedTokenAmount);\n', '         return true;\n', '         /*}\n', '         }*/\n', '     }\n', '     \n', '     receive() external payable {\n', '         require((allTimeTokenBal[msg.sender] + msg.value) <= 5000, "Maximum Buying Reached.");\n', '         genTree[msg.sender] = address(0);\n', '         address buyer = msg.sender;\n', '         uint256 etherValue = msg.value;\n', '         uint256 actualTokenQty = etherValue.div(currentPrice);\n', '         uint256 calculatedTokens = taxedTokenTransfer(etherValue);\n', '         require(calculatedTokens <= 5000, "Maximum Buying Reached.");\n', '         _mint(buyer,calculatedTokens,actualTokenQty);\n', '         emit Buy(buyer,calculatedTokens);\n', '         \n', '     }\n', '     \n', '     function priceAlgoBuy(uint256 tokenQty) internal{\n', '         if(_circulatedSupply >= 0 && _circulatedSupply <= 600000){\n', '             currentPrice = basePrice1;\n', '             basePrice1 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 600000 && _circulatedSupply <= 1100000){\n', '             initialPriceIncrement = tokenQty*300000000;\n', '             currentPrice = basePrice2 + initialPriceIncrement;\n', '             basePrice2 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 1100000 && _circulatedSupply <= 1550000){\n', '             initialPriceIncrement = tokenQty*450000000;\n', '             currentPrice = basePrice3 + initialPriceIncrement;\n', '             basePrice3 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 1550000 && _circulatedSupply <= 1960000){\n', '             initialPriceIncrement = tokenQty*675000000;\n', '             currentPrice = basePrice4 + initialPriceIncrement;\n', '             basePrice4 = currentPrice;\n', '         }if(_circulatedSupply > 1960000 && _circulatedSupply <= 2310000){\n', '             initialPriceIncrement = tokenQty*2350000000;\n', '             currentPrice = basePrice5 + initialPriceIncrement;\n', '             basePrice5 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2310000 && _circulatedSupply <= 2640000){\n', '             initialPriceIncrement = tokenQty*3025000000;\n', '             currentPrice = basePrice6 + initialPriceIncrement;\n', '             basePrice6 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2640000 && _circulatedSupply <= 2950000){\n', '             initialPriceIncrement = tokenQty*5725000000;\n', '             currentPrice = basePrice7 + initialPriceIncrement;\n', '             basePrice7 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2950000 && _circulatedSupply <= 3240000){\n', '             initialPriceIncrement = tokenQty*8525000000;\n', '             currentPrice = basePrice8 + initialPriceIncrement;\n', '             basePrice8 = currentPrice;\n', '         }\n', '         \n', '         if(_circulatedSupply > 3240000 && _circulatedSupply <= 3510000){\n', '             initialPriceIncrement = tokenQty*13900000000;\n', '             currentPrice = basePrice9 + initialPriceIncrement;\n', '             basePrice9 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 3510000 && _circulatedSupply <= 3770000){\n', '             initialPriceIncrement = tokenQty*20200000000;\n', '             currentPrice = basePrice10 + initialPriceIncrement;\n', '             basePrice10 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 3770000 && _circulatedSupply <= 4020000){\n', '             initialPriceIncrement = tokenQty*50000000000;\n', '             currentPrice = basePrice11 + initialPriceIncrement;\n', '             basePrice11 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 4020000 && _circulatedSupply <= 4260000){\n', '             initialPriceIncrement = tokenQty*133325000000;\n', '             currentPrice = basePrice12 + initialPriceIncrement;\n', '             basePrice12 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 4260000 && _circulatedSupply <= 4490000){\n', '             initialPriceIncrement = tokenQty*239125000000;\n', '             currentPrice = basePrice13 + initialPriceIncrement;\n', '             basePrice13 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4490000 && _circulatedSupply <= 4700000){\n', '             initialPriceIncrement = tokenQty*394050000000;\n', '             currentPrice = basePrice14 + initialPriceIncrement;\n', '             basePrice14 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4700000 && _circulatedSupply <= 4900000){\n', '             initialPriceIncrement = tokenQty*689500000000;\n', '             currentPrice = basePrice15 + initialPriceIncrement;\n', '             basePrice15 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4900000 && _circulatedSupply <= 5080000){\n', '             initialPriceIncrement = tokenQty*1465275000000;\n', '             currentPrice = basePrice16 + initialPriceIncrement;\n', '             basePrice16 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5080000 && _circulatedSupply <= 5220000){\n', '             initialPriceIncrement = tokenQty*3158925000000;\n', '             currentPrice = basePrice17 + initialPriceIncrement;\n', '             basePrice17 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5220000 && _circulatedSupply <= 5350000){\n', '             initialPriceIncrement = tokenQty*5726925000000;\n', '             currentPrice = basePrice18 + initialPriceIncrement;\n', '             basePrice18 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5350000 && _circulatedSupply <= 5460000){\n', '             initialPriceIncrement = tokenQty*13108175000000;\n', '             currentPrice = basePrice19 + initialPriceIncrement;\n', '             basePrice19 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5460000 && _circulatedSupply <= 5540000){\n', '             initialPriceIncrement = tokenQty*34687500000000;\n', '             currentPrice = basePrice20 + initialPriceIncrement;\n', '             basePrice20 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 5540000 && _circulatedSupply <= 5580000){\n', '             initialPriceIncrement = tokenQty*120043750000000;\n', '             currentPrice = basePrice21 + initialPriceIncrement;\n', '             basePrice21 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 5580000 && _circulatedSupply <= 5600000){\n', '             initialPriceIncrement = tokenQty*404100000000000;\n', '             currentPrice = basePrice22 + initialPriceIncrement;\n', '             basePrice22 = currentPrice;\n', '         }\n', '     }\n', '     \n', '     \n', '      function priceAlgoSell(uint256 tokenQty) internal{\n', '         if(_circulatedSupply >= 0 && _circulatedSupply < 600000){\n', '             initialPriceIncrement = tokenQty*300000;\n', '             currentPrice = basePrice1 - initialPriceIncrement;\n', '             basePrice1 = currentPrice;\n', '         }\n', '         if(_circulatedSupply >= 600000 && _circulatedSupply <= 1100000){\n', '             initialPriceIncrement = tokenQty*300000000;\n', '             currentPrice = basePrice2 - initialPriceIncrement;\n', '             basePrice2 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 1100000 && _circulatedSupply <= 1550000){\n', '             initialPriceIncrement = tokenQty*450000000;\n', '             currentPrice = basePrice3 - initialPriceIncrement;\n', '             basePrice3 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 1550000 && _circulatedSupply <= 1960000){\n', '             initialPriceIncrement = tokenQty*675000000;\n', '             currentPrice = basePrice4 - initialPriceIncrement;\n', '             basePrice4 = currentPrice;\n', '         }if(_circulatedSupply > 1960000 && _circulatedSupply <= 2310000){\n', '             initialPriceIncrement = tokenQty*2350000000;\n', '             currentPrice = basePrice5 - initialPriceIncrement;\n', '             basePrice5 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2310000 && _circulatedSupply <= 2640000){\n', '             initialPriceIncrement = tokenQty*3025000000;\n', '             currentPrice = basePrice6 - initialPriceIncrement;\n', '             basePrice6 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2640000 && _circulatedSupply <= 2950000){\n', '             initialPriceIncrement = tokenQty*5725000000;\n', '             currentPrice = basePrice7 - initialPriceIncrement;\n', '             basePrice7 = currentPrice;\n', '         }\n', '         if(_circulatedSupply > 2950000 && _circulatedSupply <= 3240000){\n', '             initialPriceIncrement = tokenQty*8525000000;\n', '             currentPrice = basePrice8 - initialPriceIncrement;\n', '             basePrice8 = currentPrice;\n', '         }\n', '         \n', '         if(_circulatedSupply > 3240000 && _circulatedSupply <= 3510000){\n', '             initialPriceIncrement = tokenQty*13900000000;\n', '             currentPrice = basePrice9 - initialPriceIncrement;\n', '             basePrice9 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 3510000 && _circulatedSupply <= 3770000){\n', '             initialPriceIncrement = tokenQty*20200000000;\n', '             currentPrice = basePrice10 - initialPriceIncrement;\n', '             basePrice10 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 3770000 && _circulatedSupply <= 4020000){\n', '             initialPriceIncrement = tokenQty*50000000000;\n', '             currentPrice = basePrice11 - initialPriceIncrement;\n', '             basePrice11 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 4020000 && _circulatedSupply <= 4260000){\n', '             initialPriceIncrement = tokenQty*133325000000;\n', '             currentPrice = basePrice12 - initialPriceIncrement;\n', '             basePrice12 = currentPrice;\n', '             \n', '         }if(_circulatedSupply > 4260000 && _circulatedSupply <= 4490000){\n', '             initialPriceIncrement = tokenQty*239125000000;\n', '             currentPrice = basePrice13 - initialPriceIncrement;\n', '             basePrice13 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4490000 && _circulatedSupply <= 4700000){\n', '             initialPriceIncrement = tokenQty*394050000000;\n', '             currentPrice = basePrice14 - initialPriceIncrement;\n', '             basePrice14 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4700000 && _circulatedSupply <= 4900000){\n', '             initialPriceIncrement = tokenQty*689500000000;\n', '             currentPrice = basePrice15 - initialPriceIncrement;\n', '             basePrice15 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 4900000 && _circulatedSupply <= 5080000){\n', '             initialPriceIncrement = tokenQty*1465275000000;\n', '             currentPrice = basePrice16 - initialPriceIncrement;\n', '             basePrice16 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5080000 && _circulatedSupply <= 5220000){\n', '             initialPriceIncrement = tokenQty*3158925000000;\n', '             currentPrice = basePrice17 - initialPriceIncrement;\n', '             basePrice17 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5220000 && _circulatedSupply <= 5350000){\n', '             initialPriceIncrement = tokenQty*5726925000000;\n', '             currentPrice = basePrice18 - initialPriceIncrement;\n', '             basePrice18 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5350000 && _circulatedSupply <= 5460000){\n', '             initialPriceIncrement = tokenQty*13108175000000;\n', '             currentPrice = basePrice19 - initialPriceIncrement;\n', '             basePrice19 = currentPrice;\n', '             \n', '         }\n', '         \n', '          if(_circulatedSupply > 5460000 && _circulatedSupply <= 5540000){\n', '             initialPriceIncrement = tokenQty*34687500000000;\n', '             currentPrice = basePrice20 - initialPriceIncrement;\n', '             basePrice20 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 5540000 && _circulatedSupply <= 5580000){\n', '             initialPriceIncrement = tokenQty*120043750000000;\n', '             currentPrice = basePrice21 - initialPriceIncrement;\n', '             basePrice21 = currentPrice;\n', '             \n', '         }\n', '         if(_circulatedSupply > 5580000 && _circulatedSupply <= 5600000){\n', '             initialPriceIncrement = tokenQty*404100000000000;\n', '             currentPrice = basePrice22 - initialPriceIncrement;\n', '             basePrice22 = currentPrice;\n', '         }\n', '     }\n', '     \n', '     \n', '   /* function distributeRewards(uint256 _amountToDistribute, address _idToDistribute)\n', '    internal\n', '    {\n', '       \n', '        for(uint256 i=0; i<15; i++)\n', '        {\n', '            address referrer = genTree[_idToDistribute];\n', '            uint256 holdingAmount = ((currentPrice/ethDecimal) * basePrice) *tokenBalances[referrer];\n', '            if(referrer != address(0))\n', '            {\n', '                if(i == 0 && holdingAmount>=100){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[0]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[0]/10000);\n', '                }else if((i == 1) && holdingAmount>=200){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[1]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[1]/10000);\n', '                }else if((i == 2) && holdingAmount>=200){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[2]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[2]/10000);\n', '                }else if((i == 3) && holdingAmount>=300){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[3]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[3]/10000);\n', '                }else if((i >= 4 && i<= 9) && holdingAmount>=300){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[4]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[4]/10000);\n', '                }else if((i >= 10 && i<= 12) && holdingAmount>=400){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[5]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[5]/10000);\n', '                }else if((i >= 13 && i<15) && holdingAmount>=500){\n', '                    rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[6]/10000);\n', '                    levelCommission[referrer][i+1].add(_amountToDistribute*percent_[6]/10000);\n', '                }else{\n', '                   \n', '                }\n', '               \n', '                _idToDistribute = referrer;\n', '                //emit Reward(referrer,(_amountToDistribute*_amountToDistribute[i]*100)/10,i);\n', '            }else{\n', '               \n', '            }\n', '        }\n', '       \n', '    }*/\n', '\n', '    /**\n', '    calculation logic for buy function\n', '     */\n', '\n', '     function taxedTokenTransfer(uint256 incomingEther) internal view returns(uint256) {\n', '            uint256 deduction = incomingEther * 22500/100000;\n', '            uint256 taxedEther = incomingEther - deduction;\n', '            uint256 tokenToTransfer = taxedEther.div(currentPrice);\n', '            return tokenToTransfer;\n', '     }\n', '\n', '     /**\n', '     * sell method for ether.\n', '      */\n', '\n', '     function sell(uint256 tokenToSell) external returns(bool){\n', '          require(_circulatedSupply > 0, "no circulated tokens");\n', '          require(tokenToSell > 0, "can not sell 0 token");\n', '          require(tokenToSell <= tokenBalances[msg.sender], "not enough tokens to transact");\n', '          require(tokenToSell.add(_circulatedSupply) <= _totalSupply, "exceeded total supply");\n', '          uint256 convertedEthers = etherValueTransfer(tokenToSell);\n', '          msg.sender.transfer(convertedEthers);\n', '          _burn(msg.sender,tokenToSell);\n', '          emit Sell(msg.sender,convertedEthers);\n', '          return true;\n', '     }\n', '     \n', '     \n', '     \n', '\n', '     function etherValueTransfer(uint256 tokenToSell) internal view returns(uint256) {\n', '         uint256 convertedEther = tokenToSell * (currentPrice - currentPrice/100);\n', '        return convertedEther;\n', '     }\n', '\n', '\n', '    function accumulatedEther() external onlyOwner view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '   \n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        emit Transfer(sender, recipient, amount);\n', '        tokenBalances[sender] = tokenBalances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        tokenBalances[recipient] = tokenBalances[recipient].add(amount);\n', '    }\n', '\n', '   \n', '     /*function _approve(address spender, address recipient, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[spender][recipient] = amount;\n', '        emit Approved(spender, recipient, amount);\n', '    }*/\n', '\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '\n', '    function _mint(address account, uint256 amount, uint256 circulation) internal  {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '       /* if(account == owner){\n', '            emit Transfer(address(0), account, amount);\n', '            tokenBalances[owner] = tokenBalances[owner].add(amount);\n', '        }else{*/\n', '            emit Transfer(address(this), account, amount);\n', '            tokenBalances[account] = tokenBalances[account].add(amount);\n', '            allTimeTokenBal[account] = allTimeTokenBal[account].add(amount);\n', '            _circulatedSupply = _circulatedSupply.add(circulation);\n', '            priceAlgoBuy(circulation);\n', '        /*}*/\n', '       \n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        emit Transfer(account, address(this), amount);\n', '        tokenBalances[account] = tokenBalances[account].sub(amount);\n', '        //tokenBalances[owner] = tokenBalances[owner].add(amount);\n', '        _circulatedSupply = _circulatedSupply.sub(amount);\n', '        allTimeTokenBal[account] = allTimeTokenBal[account].sub(amount);\n', '        priceAlgoSell(amount);\n', '    }\n', '\n', '    function _msgSender() internal view returns (address ){\n', '        return msg.sender;\n', '    }\n', ' \n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']