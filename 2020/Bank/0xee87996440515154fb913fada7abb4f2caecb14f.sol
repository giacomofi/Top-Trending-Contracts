['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IQualifyLP {\n', '    function qualified(address lpToken) external view returns(uint256);\n', '    function qualifyUniswapLP(address lpToken, address token0, address token1) external returns (bool);\n', '    function qualifyBalancerLP(address lpToken) external returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'interface BFactory {\n', '\n', '    function isBPool(address b) external view returns (bool);\n', '    function newBPool() external returns (BPool);\n', '    \n', '}\n', '\n', 'interface BPool {\n', '\n', '    function isPublicSwap() external view returns (bool);\n', '    function isFinalized() external view returns (bool);\n', '    function isBound(address t) external view returns (bool);\n', '    function getNumTokens() external view returns (uint);\n', '    function getCurrentTokens() external view returns (address[] memory tokens);\n', '    function getFinalTokens() external view returns (address[] memory tokens);\n', '    function getDenormalizedWeight(address token) external view returns (uint);\n', '    function getTotalDenormalizedWeight() external view returns (uint);\n', '    function getNormalizedWeight(address token) external view returns (uint);\n', '    function getBalance(address token) external view returns (uint);\n', '    function getSwapFee() external view returns (uint);\n', '    function getController() external view returns (address);\n', '    \n', '    function setSwapFee(uint swapFee) external;\n', '    function setController(address manager) external;\n', '    function setPublicSwap(bool external_) external;\n', '    function finalize() external;\n', '    function bind(address token, uint balance, uint denorm) external;\n', '    function rebind(address token, uint balance, uint denorm) external;\n', '    function unbind(address token) external;\n', '    function gulp(address token) external;\n', '\n', '    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        address tokenOut,\n', '        uint minAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '    \n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint maxAmountIn,\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n', '\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '\n', '    function joinswapPoolAmountOut(\n', '        address tokenIn,\n', '        uint poolAmountOut,\n', '        uint maxAmountIn\n', '    ) external returns (uint tokenAmountIn);\n', '    \n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint poolAmountIn,\n', '        uint minAmountOut\n', '    ) external returns (uint tokenAmountOut);\n', '\n', '    function exitswapExternAmountOut(\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPoolAmountIn\n', '    ) external returns (uint poolAmountIn);\n', '    \n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function allowance(address src, address dst) external view returns (uint);\n', '\n', '    function approve(address dst, uint amt) external returns (bool);\n', '    function transfer(address dst, uint amt) external returns (bool);\n', '    function transferFrom(\n', '        address src, address dst, uint amt\n', '    ) external returns (bool);\n', '    \n', '    function calcSpotPrice(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint swapFee\n', '    ) external pure returns (uint spotPrice);\n', '    \n', '    function calcOutGivenIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '    \n', '    function calcInGivenOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '    \n', '    function calcPoolOutGivenSingleIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountOut);\n', '    \n', '    function calcSingleInGivenPoolOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '    \n', '    function calcSingleOutGivenPoolIn(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '    \n', '    function calcPoolInGivenSingleOut(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountIn);\n', '\n', '}\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface BExchangeProxy {\n', '\n', '    struct Swap {\n', '        address pool;\n', '        uint    tokenInParam; // tokenInAmount / maxAmountIn / limitAmountIn\n', '        uint    tokenOutParam; // minAmountOut / tokenAmountOut / limitAmountOut\n', '        uint    maxPrice;\n', '    }\n', '\n', '    function batchSwapExactIn(\n', '        Swap[] memory swaps,\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    ) external returns (uint totalAmountOut);\n', '    \n', '    function batchSwapExactOut(\n', '        Swap[] memory swaps,\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint maxTotalAmountIn\n', '    ) external returns (uint totalAmountIn);\n', '    \n', '    function batchEthInSwapExactIn(\n', '        Swap[] memory swaps,\n', '        address tokenOut,\n', '        uint minTotalAmountOut\n', '    ) external payable returns (uint totalAmountOut);\n', '    \n', '    function batchEthOutSwapExactIn(\n', '        Swap[] memory swaps,\n', '        address tokenIn,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    ) external returns (uint totalAmountOut);\n', '    \n', '    function batchEthInSwapExactOut(\n', '        Swap[] memory swaps,\n', '        address tokenOut\n', '    ) external payable returns (uint totalAmountIn);\n', '    \n', '    function batchEthOutSwapExactOut(\n', '        Swap[] memory swaps,\n', '        address tokenIn,\n', '        uint maxTotalAmountIn\n', '    ) external returns (uint totalAmountIn);\n', '    \n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', 'contract QualifyLP is IQualifyLP {\n', '    mapping(address => uint256) private lps;\n', '    uint256 constant LP_UNISWAP = 1;\n', '    uint256 constant LP_BALANCER = 2;\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function qualified(address lpToken) external override view returns(uint256) {\n', '        return lps[lpToken];\n', '    }\n', '\n', '    function qualifyUniswapLP(address lpToken, address token0, address token1) external override returns (bool) {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\n', '\n', '\trequire(pair.decimals() == 18);\n', '\trequire(pair.totalSupply() > 0);\n', '\trequire(token0 != token1);\n', '\trequire(pair.token0() == token0 || pair.token1() == token0);\n', '\trequire(pair.token0() == token1 || pair.token1() == token1);\n', '\n', '\t(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =\n', '\t    pair.getReserves();\n', '\trequire(reserve0 > 0);\n', '\trequire(reserve1 > 0);\n', '        require(blockTimestampLast > 0);\n', '\n', '\tlps[lpToken] = LP_UNISWAP;\n', '\n', '\treturn true;\n', '    }\n', '\n', '    function qualifyBalancerLP(address lpToken) external override returns (bool) {\n', '\tBPool bpool = BPool(lpToken);\n', '\n', '\trequire(bpool.totalSupply() > 0);\n', '\trequire(bpool.isPublicSwap() == true);\n', '\trequire(bpool.isFinalized() == true);\n', '\trequire(bpool.getNumTokens() >= 2);\n', '\trequire(bpool.getSwapFee() > 0);\n', '\n', '\tlps[lpToken] = LP_BALANCER;\n', '\n', '\treturn true;\n', '    }\n', '}']