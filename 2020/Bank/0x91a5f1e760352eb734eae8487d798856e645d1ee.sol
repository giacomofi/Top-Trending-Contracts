['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.1;\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '        \n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '        \n', '    function getAmountsIn(uint amountOut, address[] memory path)\n', '        external\n', '        view\n', '        returns (uint[] memory amounts);\n', '        \n', '    function getAmountsOut(uint amountIn, address[] memory path) \n', '        external \n', '        view \n', '        returns (uint[] memory amounts);\n', '        \n', '    function WETH() external pure returns (address);\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IERC20 {\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract CulaProject {\n', '    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\n', '    address internal constant UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f ;\n', '    IUniswapV2Router02 uniswap;\n', '    IUniswapV2Factory factory;\n', '    \n', '    constructor() {\n', '        uniswap = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n', '        factory = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS);\n', '    }\n', '    \n', '    // Transfer\n', '    function transfer(address tokenAddress, address receipment, uint tokenAmount) external {\n', '        IERC20(tokenAddress).transferFrom(msg.sender, receipment, tokenAmount);\n', '    }\n', '    \n', '    /************* Trade from Token to ETH *************/\n', '    // Swap ERC20 token to ETH\n', '    function tradeTokenToEth(address tokenAddress, uint amountIn, uint amountOutMin) external {\n', "        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amountIn), 'transferFrom failed.');\n", '        \n', "        require(IERC20(tokenAddress).approve(address(uniswap), amountIn), 'approve failed.');\n", '        \n', '        uniswap.swapExactTokensForETH(amountIn, amountOutMin, getPathForTokenToETH(tokenAddress), msg.sender, block.timestamp);\n', '    } \n', '    \n', '    // Amount of ETH required for the amount of Tokens\n', '    function estimateTokenToEth(address tokenAddress, uint amount) public view returns (uint[] memory) {\n', '        return uniswap.getAmountsOut(amount, getPathForTokenToETH(tokenAddress));\n', '    }\n', '    \n', '    // Path ETH to Token\n', '    function getPathForTokenToETH(address tokenAddress) private view returns (address[] memory) {\n', '        address[] memory path = new address[](2);\n', '        path[0] = tokenAddress;\n', '        path[1] = uniswap.WETH();\n', '        \n', '        return path;\n', '    }\n', '    \n', '    /************* Trade from ETH to Token *************/\n', '    // Swap ETH to ERC20 token\n', '    function tradeEthToToken(address tokenAddress, uint amount) external payable {\n', '        uniswap.swapETHForExactTokens{ value: msg.value }(amount, getPathForETHtoToken(tokenAddress), msg.sender, block.timestamp);\n', '        \n', '        (bool success,) = msg.sender.call{ value: address(this).balance }("");\n', '        require(success, "refund failed");\n', '    }\n', '    \n', '    // Amount of ETH required for the amount of Tokens\n', '    function estimateEthToToken(address tokenAddress, uint amount) public view returns (uint[] memory) {\n', '        return uniswap.getAmountsIn(amount, getPathForETHtoToken(tokenAddress));\n', '    }\n', '    \n', '    // Path ETH to Token\n', '    function getPathForETHtoToken(address tokenAddress) private view returns (address[] memory) {\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswap.WETH();\n', '        path[1] = tokenAddress;\n', '        \n', '        return path;\n', '    }\n', '    \n', '    /************* Create Pairs *************/\n', '    // Register Pair to token\n', '    function createPair(address token1, address token2) external {\n', '        factory.createPair(token1, token2);\n', '    }\n', '    \n', '    // Register Pair to ETH\n', '    function createPair(address token1) external {\n', '        address token2 = uniswap.WETH();\n', '        factory.createPair(token1, token2);\n', '    }\n', '}']