['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Babylonian.sol\n', '\n', '// import "@uniswap/lib/contracts/libraries/Babylonian.sol";\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library Babylonian {\n', '    function sqrt(uint256 y) internal pure returns (uint256 z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint256 x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// File: interfaces/IUniswapV2Router.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Router {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '    function approve(address guy, uint wad) external returns (bool);\n', '}\n', '\n', '// File: interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', '// File: interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external pure returns (address);\n', '\n', '    function token1() external pure returns (address);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint32 _blockTimestampLast\n', '        );\n', '}\n', '\n', '// File: interfaces/TransferHelper.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x095ea7b3, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: APPROVE_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0xa9059cbb, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x23b872dd, from, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FROM_FAILED"\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/ReefUniswap.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library ReefUniswap {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    address public constant uniswapV2RouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    IUniswapV2Router private constant uniswapV2Router = IUniswapV2Router(\n', '        uniswapV2RouterAddress\n', '    );\n', '\n', '    IUniswapV2Factory private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '\n', '\n', '    function _investIntoUniswapPool(\n', '        address _FromTokenContractAddress,\n', '        address _ToUnipoolToken0,\n', '        address _ToUnipoolToken1,\n', '        address _toAccount,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        uint256 token0Bought;\n', '        uint256 token1Bought;\n', '\n', '        if (canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)) {\n', '            (token0Bought, token1Bought) = exchangeTokensV2(\n', '                _FromTokenContractAddress,\n', '                _ToUnipoolToken0,\n', '                _ToUnipoolToken1,\n', '                _amount\n', '            );\n', '        }\n', '\n', '        require(token0Bought > 0 && token1Bought > 0, "Could not exchange");\n', '\n', '        TransferHelper.safeApprove(\n', '            _ToUnipoolToken0,\n', '            address(uniswapV2Router),\n', '            token0Bought\n', '        );\n', '\n', '        TransferHelper.safeApprove(\n', '            _ToUnipoolToken1,\n', '            address(uniswapV2Router),\n', '            token1Bought\n', '        );\n', '\n', '        (uint256 amountA, uint256 amountB, uint256 LP) = uniswapV2Router\n', '            .addLiquidity(\n', '            _ToUnipoolToken0,\n', '            _ToUnipoolToken1,\n', '            token0Bought,\n', '            token1Bought,\n', '            1,\n', '            1,\n', '            _toAccount,\n', '            now + 60\n', '        );\n', '\n', '        uint256 residue;\n', '        if (SafeMath.sub(token0Bought, amountA) > 0) {\n', '            if (canSwapFromV2(_ToUnipoolToken0, _FromTokenContractAddress)) {\n', '                residue = swapFromV2(\n', '                    _ToUnipoolToken0,\n', '                    _FromTokenContractAddress,\n', '                    SafeMath.sub(token0Bought, amountA)\n', '                );\n', '            } else {\n', '                TransferHelper.safeTransfer(\n', '                    _ToUnipoolToken0,\n', '                    msg.sender,\n', '                    SafeMath.sub(token0Bought, amountA)\n', '                );\n', '            }\n', '        }\n', '\n', '        if (SafeMath.sub(token1Bought, amountB) > 0) {\n', '            if (canSwapFromV2(_ToUnipoolToken1, _FromTokenContractAddress)) {\n', '                residue += swapFromV2(\n', '                    _ToUnipoolToken1,\n', '                    _FromTokenContractAddress,\n', '                    SafeMath.sub(token1Bought, amountB)\n', '                );\n', '            } else {\n', '                TransferHelper.safeTransfer(\n', '                    _ToUnipoolToken1,\n', '                    msg.sender,\n', '                    SafeMath.sub(token1Bought, amountB)\n', '                );\n', '            }\n', '        }\n', '\n', '        if (residue > 0) {\n', '            TransferHelper.safeTransfer(\n', '                _FromTokenContractAddress,\n', '                msg.sender,\n', '                residue\n', '            );\n', '        }\n', '\n', '        return LP;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to zapout of given Uniswap pair in the bounded tokens\n', '    @param _token0 Token 0 address\n', '    @param _token1 Token 1 address\n', '    @param _IncomingLP The amount of LP\n', '    @return amountA the amount of first token received after zapout\n', '    @return amountB the amount of second token received after zapout\n', '     */\n', '    function _disinvestFromUniswapPool(\n', '        address _ToTokenContractAddress,\n', '        address _token0,\n', '        address _token1,\n', '        uint256 _IncomingLP\n', '    ) internal returns (uint256 amountA, uint256 amountB) {\n', '        address _FromUniPoolAddress = UniSwapV2FactoryAddress.getPair(\n', '            _token0,\n', '            _token1\n', '        );\n', '        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);\n', '        require(address(pair) != address(0), "Error: Invalid Unipool Address");\n', '\n', '        TransferHelper.safeApprove(\n', '            _FromUniPoolAddress,\n', '            address(uniswapV2Router),\n', '            _IncomingLP\n', '        );\n', '\n', '        if (_token0 == wethTokenAddress || _token1 == wethTokenAddress) {\n', '            address _token = _token0 == wethTokenAddress ? _token1 : _token0;\n', '            address _wethToken = _token0 != wethTokenAddress\n', '                ? _token1\n', '                : _token0;\n', '            (amountA, amountB) = uniswapV2Router.removeLiquidityETH(\n', '                _token,\n', '                _IncomingLP,\n', '                1,\n', '                1,\n', '                address(this),\n', '                now + 60\n', '            );\n', '\n', '            if (canSwapFromV2(_token1, _ToTokenContractAddress)) {\n', '                swapFromV2(_token, _ToTokenContractAddress, amountA);\n', '            } else {\n', '                TransferHelper.safeTransfer(_token, msg.sender, amountA);\n', '            }\n', '        } else {\n', '            (amountA, amountB) = uniswapV2Router.removeLiquidity(\n', '                _token0,\n', '                _token1,\n', '                _IncomingLP,\n', '                1,\n', '                1,\n', '                address(this),\n', '                now + 60\n', '            );\n', '\n', '            if (canSwapFromV2(_token0, _ToTokenContractAddress)) {\n', '                swapFromV2(_token0, _ToTokenContractAddress, amountA);\n', '            } else {\n', '                TransferHelper.safeTransfer(_token0, msg.sender, amountA);\n', '            }\n', '\n', '            if (canSwapFromV2(_token1, _ToTokenContractAddress)) {\n', '                swapFromV2(_token1, _ToTokenContractAddress, amountB);\n', '            } else {\n', '                TransferHelper.safeTransfer(_token1, msg.sender, amountB);\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function exchangeTokensV2(\n', '        address _FromTokenContractAddress,\n', '        address _ToUnipoolToken0,\n', '        address _ToUnipoolToken1,\n', '        uint256 _amount\n', '    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(\n', '            UniSwapV2FactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1)\n', '        );\n', '        (uint256 res0, uint256 res1, ) = pair.getReserves();\n', '        if (\n', '            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken0) &&\n', '            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\n', '        ) {\n', '            token0Bought = swapFromV2(\n', '                _FromTokenContractAddress,\n', '                _ToUnipoolToken0,\n', '                _amount\n', '            );\n', '            uint256 amountToSwap = calculateSwapInAmount(res0, token0Bought);\n', '            //if no reserve or a new pair is created\n', '            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token0Bought, 2);\n', '            token1Bought = swapFromV2(\n', '                _ToUnipoolToken0,\n', '                _ToUnipoolToken1,\n', '                amountToSwap\n', '            );\n', '            token0Bought = SafeMath.sub(token0Bought, amountToSwap);\n', '        } else if (\n', '            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken1) &&\n', '            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\n', '        ) {\n', '            token1Bought = swapFromV2(\n', '                _FromTokenContractAddress,\n', '                _ToUnipoolToken1,\n', '                _amount\n', '            );\n', '            uint256 amountToSwap = calculateSwapInAmount(res1, token1Bought);\n', '            //if no reserve or a new pair is created\n', '            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token1Bought, 2);\n', '            token0Bought = swapFromV2(\n', '                _ToUnipoolToken1,\n', '                _ToUnipoolToken0,\n', '                amountToSwap\n', '            );\n', '            token1Bought = SafeMath.sub(token1Bought, amountToSwap);\n', '        }\n', '    }\n', '\n', '    function canSwapFromV2(address _fromToken, address _toToken)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        require(\n', '            _fromToken != address(0) || _toToken != address(0),\n', '            "Invalid Exchange values"\n', '        );\n', '\n', '        if (_fromToken == _toToken) return true;\n', '\n', '        if (_fromToken == address(0) || _fromToken == wethTokenAddress) {\n', '            if (_toToken == wethTokenAddress || _toToken == address(0))\n', '                return true;\n', '            IUniswapV2Pair pair = IUniswapV2Pair(\n', '                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\n', '            );\n', '            if (_haveReserve(pair)) return true;\n', '        } else if (_toToken == address(0) || _toToken == wethTokenAddress) {\n', '            if (_fromToken == wethTokenAddress || _fromToken == address(0))\n', '                return true;\n', '            IUniswapV2Pair pair = IUniswapV2Pair(\n', '                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\n', '            );\n', '            if (_haveReserve(pair)) return true;\n', '        } else {\n', '            IUniswapV2Pair pair1 = IUniswapV2Pair(\n', '                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\n', '            );\n', '            IUniswapV2Pair pair2 = IUniswapV2Pair(\n', '                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\n', '            );\n', '            IUniswapV2Pair pair3 = IUniswapV2Pair(\n', '                UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\n', '            );\n', '            if (_haveReserve(pair1) && _haveReserve(pair2)) return true;\n', '            if (_haveReserve(pair3)) return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    //checks if the UNI v2 contract have reserves to swap tokens\n', '    function _haveReserve(IUniswapV2Pair pair) internal view returns (bool) {\n', '        if (address(pair) != address(0)) {\n', '            (uint256 res0, uint256 res1, ) = pair.getReserves();\n', '            if (res0 > 0 && res1 > 0) {\n', '                return true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return\n', '            Babylonian\n', '                .sqrt(\n', '                reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))\n', '            )\n', '                .sub(reserveIn.mul(1997)) / 1994;\n', '    }\n', '\n', '    //swaps _fromToken for _toToken\n', '    //for eth, address(0) otherwise ERC token address\n', '    function swapFromV2(\n', '        address _fromToken,\n', '        address _toToken,\n', '        uint256 amount\n', '    ) internal returns (uint256) {\n', '        require(\n', '            _fromToken != address(0) || _toToken != address(0),\n', '            "Invalid Exchange values"\n', '        );\n', '        if (_fromToken == _toToken) return amount;\n', '\n', '        require(canSwapFromV2(_fromToken, _toToken), "Cannot be exchanged");\n', '        require(amount > 0, "Invalid amount");\n', '\n', '        if (_fromToken == address(0)) {\n', '            if (_toToken == wethTokenAddress) {\n', '                IWETH(wethTokenAddress).deposit{value: amount}();\n', '                return amount;\n', '            }\n', '            address[] memory path = new address[](2);\n', '            path[0] = wethTokenAddress;\n', '            path[1] = _toToken;\n', '\n', '            uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{\n', '                value: amount\n', '            }(0, path, address(this), now + 180);\n', '            return amounts[1];\n', '        } else if (_toToken == address(0)) {\n', '            if (_fromToken == wethTokenAddress) {\n', '                IWETH(wethTokenAddress).withdraw(amount);\n', '                return amount;\n', '            }\n', '            address[] memory path = new address[](2);\n', '            TransferHelper.safeApprove(\n', '                _fromToken,\n', '                address(uniswapV2Router),\n', '                amount\n', '            );\n', '            path[0] = _fromToken;\n', '            path[1] = wethTokenAddress;\n', '\n', '            uint256[] memory amounts = uniswapV2Router.swapExactTokensForETH(\n', '                amount,\n', '                0,\n', '                path,\n', '                address(this),\n', '                now + 180\n', '            );\n', '            return amounts[1];\n', '        } else {\n', '            TransferHelper.safeApprove(\n', '                _fromToken,\n', '                address(uniswapV2Router),\n', '                amount\n', '            );\n', '            uint256 returnedAmount = _swapTokenToTokenV2(\n', '                _fromToken,\n', '                _toToken,\n', '                amount\n', '            );\n', '            require(returnedAmount > 0, "Error in swap");\n', '            return returnedAmount;\n', '        }\n', '    }\n', '\n', '    //swaps 2 ERC tokens (UniV2)\n', '    function _swapTokenToTokenV2(\n', '        address _fromToken,\n', '        address _toToken,\n', '        uint256 amount\n', '    ) internal returns (uint256) {\n', '        IUniswapV2Pair pair1 = IUniswapV2Pair(\n', '            UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\n', '        );\n', '        IUniswapV2Pair pair2 = IUniswapV2Pair(\n', '            UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\n', '        );\n', '        IUniswapV2Pair pair3 = IUniswapV2Pair(\n', '            UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\n', '        );\n', '\n', '        uint256[] memory amounts;\n', '\n', '        if (_haveReserve(pair3)) {\n', '            address[] memory path = new address[](2);\n', '            path[0] = _fromToken;\n', '            path[1] = _toToken;\n', '\n', '            amounts = uniswapV2Router.swapExactTokensForTokens(\n', '                amount,\n', '                0,\n', '                path,\n', '                address(this),\n', '                now + 180\n', '            );\n', '            return amounts[1];\n', '        } else if (_haveReserve(pair1) && _haveReserve(pair2)) {\n', '            address[] memory path = new address[](3);\n', '            path[0] = _fromToken;\n', '            path[1] = wethTokenAddress;\n', '            path[2] = _toToken;\n', '\n', '            amounts = uniswapV2Router.swapExactTokensForTokens(\n', '                amount,\n', '                0,\n', '                path,\n', '                address(this),\n', '                now + 180\n', '            );\n', '            return amounts[2];\n', '        }\n', '        return 0;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: interfaces/IBPool.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IBPool {\n', '\n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint256 poolAmountIn,\n', '        uint256 minAmountOut\n', '    ) external payable returns (uint256 tokenAmountOut);\n', '\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint256 tokenAmountIn,\n', '        uint256 minPoolAmountOut\n', '    ) external payable returns (uint256 poolAmountOut);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '    function getDenormalizedWeight(address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '    function getSwapFee() external view returns (uint256);\n', '\n', '    function isBound(address t) external view returns (bool);\n', '\n', '    function calcPoolOutGivenSingleIn(\n', '        uint256 tokenBalanceIn,\n', '        uint256 tokenWeightIn,\n', '        uint256 poolSupply,\n', '        uint256 totalWeight,\n', '        uint256 tokenAmountIn,\n', '        uint256 swapFee\n', '    ) external pure returns (uint256 poolAmountOut);\n', '\n', '    function calcSingleOutGivenPoolIn(\n', '        uint256 tokenBalanceOut,\n', '        uint256 tokenWeightOut,\n', '        uint256 poolSupply,\n', '        uint256 totalWeight,\n', '        uint256 poolAmountIn,\n', '        uint256 swapFee\n', '    ) external pure returns (uint256 tokenAmountOut);\n', '\n', '    function getBalance(address token) external view returns (uint256);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function approve(address dst, uint amt) external returns (bool);\n', '\n', '}\n', '\n', '// File: interfaces/IBFactory.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IBFactory {\n', '\n', '    function isBPool(address b) external view returns (bool);\n', '    function newBPool() external returns (IBPool);\n', '}\n', '\n', '// File: contracts/ReefBalancer.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Reef\n', '///@notice This contract adds and removes liquidity from Balancer Pools into\n', '//ETH/ERC/Underlying Tokens. Based on Zaper implementation.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library ReefBalancer {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IUniswapV2Factory\n', '        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '    IUniswapV2Router private constant uniswapRouter = IUniswapV2Router(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '    IBFactory private constant BalancerFactory = IBFactory(\n', '        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\n', '    );\n', '\n', '    address\n', '        private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    /**\n', '    @notice This function for investing into BalancerPool\n', '    @param _toWhomToIssue The user address who want to invest\n', '    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zapin\n', '    @param _amount The amount of ETH/ERC to invest\n', '    @param _minPoolTokens for slippage\n', '    @return tokensBought The quantity of Balancer Pool tokens returned\n', '    */\n', '    function investIntoBalancerPool(\n', '        address _toWhomToIssue,\n', '        address _FromTokenContractAddress,\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens\n', '    ) public returns (uint256 tokensBought) {\n', '\n', '        address _IntermediateToken = _getBestDeal(\n', '            _ToBalancerPoolAddress,\n', '            _amount,\n', '            _FromTokenContractAddress\n', '        );\n', '\n', '        // check if isBound()\n', '        bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '            _FromTokenContractAddress\n', '        );\n', '\n', '        uint256 balancerTokens;\n', '\n', '        if (isBound) {\n', '            balancerTokens = _enter2Balancer(\n', '                _ToBalancerPoolAddress,\n', '                _FromTokenContractAddress,\n', '                _amount,\n', '                _minPoolTokens\n', '            );\n', '        } else {\n', '            // swap tokens or eth\n', '            uint256 tokenBought;\n', '            if (_FromTokenContractAddress == address(0)) {\n', '                tokenBought = ReefUniswap.swapFromV2(_FromTokenContractAddress,\n', '                                                     _IntermediateToken, _amount);\n', '            } else {\n', '                tokenBought = _token2Token(\n', '                    _FromTokenContractAddress,\n', '                    address(this),\n', '                    _IntermediateToken,\n', '                    _amount\n', '                );\n', '            }\n', '\n', '            //get BPT\n', '            balancerTokens = _enter2Balancer(\n', '                _ToBalancerPoolAddress,\n', '                _IntermediateToken,\n', '                tokenBought,\n', '                _minPoolTokens\n', '            );\n', '        }\n', '\n', '        //transfer tokens to user\n', '        IERC20(_ToBalancerPoolAddress).safeTransfer(\n', '            _toWhomToIssue,\n', '            balancerTokens\n', '        );\n', '\n', '        return balancerTokens;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used for zapping out of balancer pools\n', '    @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)\n', '    @param _FromBalancerPoolAddress The address of balancer pool to zap out\n', '    @param _IncomingBPT The quantity of balancer pool tokens\n', '    @param _minTokensRec slippage user wants\n', '    @return success or failure\n', '    */\n', '    function disinvestFromBalancerPool(\n', '        address payable _toWhomToIssue,\n', '        address _ToTokenContractAddress,\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT,\n', '        uint256 _minTokensRec\n', '    ) public returns (uint256) {\n', '        require(\n', '            BalancerFactory.isBPool(_FromBalancerPoolAddress),\n', '            "Invalid Balancer Pool"\n', '        );\n', '\n', '        address _FromTokenAddress;\n', '        if (IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress)) {\n', '            _FromTokenAddress = _ToTokenContractAddress;\n', '        } else if (\n', '            _ToTokenContractAddress == address(0) &&\n', '            IBPool(_FromBalancerPoolAddress).isBound(wethTokenAddress)\n', '        ) {\n', '            _FromTokenAddress = wethTokenAddress;\n', '        } else {\n', '            _FromTokenAddress = _getBestDeal(\n', '                _FromBalancerPoolAddress,\n', '                _IncomingBPT\n', '            );\n', '        }\n', '        return (\n', '            _performZapOut(\n', '                _toWhomToIssue,\n', '                _ToTokenContractAddress,\n', '                _FromBalancerPoolAddress,\n', '                _IncomingBPT,\n', '                _FromTokenAddress,\n', '                _minTokensRec\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This method is called by disinvestFromBalancerPool()\n', '    @param _toWhomToIssue is the address of user\n', '    @param _ToTokenContractAddress is the address of the token to which you want to convert to\n', '    @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut\n', '    @param _IncomingBPT is the quantity of Balancer Pool tokens that the user wants to ZapOut\n', '    @param _IntermediateToken is the token to which the Balancer Pool should be Zapped Out\n', '    @notice this is only used if the outgoing token is not amongst the Balancer Pool tokens\n', '    @return success or failure\n', '    */\n', '    function _performZapOut(\n', '        address payable _toWhomToIssue,\n', '        address _ToTokenContractAddress,\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT,\n', '        address _IntermediateToken,\n', '        uint256 _minTokensRec\n', '    ) internal returns (uint256) {\n', '        if (IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress)) {\n', '            return (\n', '                _directZapout(\n', '                    _FromBalancerPoolAddress,\n', '                    _ToTokenContractAddress,\n', '                    _toWhomToIssue,\n', '                    _IncomingBPT,\n', '                    _minTokensRec\n', '                )\n', '            );\n', '        }\n', '\n', '        //exit balancer\n', '        uint256 _returnedTokens = _exitBalancer(\n', '            _FromBalancerPoolAddress,\n', '            _IntermediateToken,\n', '            _IncomingBPT\n', '        );\n', '\n', '        if (_ToTokenContractAddress == address(0)) {\n', '            uint256 ethBought = ReefUniswap.swapFromV2(_IntermediateToken, address(0),\n', '                                               _returnedTokens);\n', '\n', '            require(ethBought >= _minTokensRec, "High slippage");\n', '\n', '            _toWhomToIssue.transfer(ethBought);\n', '            return ethBought;\n', '        } else {\n', '            uint256 tokenBought = _token2Token(\n', '                _IntermediateToken,\n', '                _toWhomToIssue,\n', '                _ToTokenContractAddress,\n', '                _returnedTokens\n', '            );\n', '            require(tokenBought >= _minTokensRec, "High slippage");\n', '            return tokenBought;\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function is used for zapping out of balancer pool\n', '    @param _FromBalancerPoolAddress The address of balancer pool to zap out\n', '    @param _ToTokenContractAddress The token in which we want to zapout (for ethers, its zero address)\n', '    @param _toWhomToIssue The address of user\n', '    @param tokens2Trade The quantity of balancer pool tokens\n', '    @return returnedTokens success or failure\n', '    */\n', '    function _directZapout(\n', '        address _FromBalancerPoolAddress,\n', '        address _ToTokenContractAddress,\n', '        address _toWhomToIssue,\n', '        uint256 tokens2Trade,\n', '        uint256 _minTokensRec\n', '    ) internal returns (uint256 returnedTokens) {\n', '        returnedTokens = _exitBalancer(\n', '            _FromBalancerPoolAddress,\n', '            _ToTokenContractAddress,\n', '            tokens2Trade\n', '        );\n', '\n', '        require(returnedTokens >= _minTokensRec, "High slippage");\n', '\n', '        IERC20(_ToTokenContractAddress).transfer(\n', '            _toWhomToIssue,\n', '            returnedTokens\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function gives the amount of tokens on zapping out from given\n', '    IBPool\n', '    @param _FromBalancerPoolAddress Address of balancer pool to zapout from\n', '    @param _IncomingBPT The amount of BPT to zapout\n', '    @param _toToken Address of token to zap out with\n', '    @return tokensReturned Amount of ERC token\n', '     */\n', '    function _getBPT2Token(\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT,\n', '        address _toToken\n', '    ) internal view returns (uint256 tokensReturned) {\n', '        uint256 totalSupply = IBPool(_FromBalancerPoolAddress).totalSupply();\n', '        uint256 swapFee = IBPool(_FromBalancerPoolAddress).getSwapFee();\n', '        uint256 totalWeight = IBPool(_FromBalancerPoolAddress)\n', '            .getTotalDenormalizedWeight();\n', '        uint256 balance = IBPool(_FromBalancerPoolAddress).getBalance(_toToken);\n', '        uint256 denorm = IBPool(_FromBalancerPoolAddress).getDenormalizedWeight(\n', '            _toToken\n', '        );\n', '\n', '        tokensReturned = IBPool(_FromBalancerPoolAddress)\n', '            .calcSingleOutGivenPoolIn(\n', '            balance,\n', '            denorm,\n', '            totalSupply,\n', '            totalWeight,\n', '            _IncomingBPT,\n', '            swapFee\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice Function gives the expected amount of pool tokens on investing\n', '    @param _ToBalancerPoolAddress Address of balancer pool to zapin\n', '    @param _IncomingERC The amount of ERC to invest\n', '    @param _FromToken Address of token to zap in with\n', '    @return tokensReturned Amount of BPT token\n', '    */\n', '    function getToken2BPT(\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _IncomingERC,\n', '        address _FromToken\n', '    ) internal view returns (uint256 tokensReturned) {\n', '        uint256 totalSupply = IBPool(_ToBalancerPoolAddress).totalSupply();\n', '        uint256 swapFee = IBPool(_ToBalancerPoolAddress).getSwapFee();\n', '        uint256 totalWeight = IBPool(_ToBalancerPoolAddress)\n', '            .getTotalDenormalizedWeight();\n', '        uint256 balance = IBPool(_ToBalancerPoolAddress).getBalance(_FromToken);\n', '        uint256 denorm = IBPool(_ToBalancerPoolAddress).getDenormalizedWeight(\n', '            _FromToken\n', '        );\n', '\n', '        tokensReturned = IBPool(_ToBalancerPoolAddress)\n', '            .calcPoolOutGivenSingleIn(\n', '            balance,\n', '            denorm,\n', '            totalSupply,\n', '            totalWeight,\n', '            _IncomingERC,\n', '            swapFee\n', '        );\n', '    }\n', '\n', '\n', '    /**\n', '    @notice This function is used to zapin to balancer pool\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zap in\n', '    @param _FromTokenContractAddress The token used to zap in\n', '    @param tokens2Trade The amount of tokens to invest\n', '    @return poolTokensOut The quantity of Balancer Pool tokens returned\n', '    */\n', '    function _enter2Balancer(\n', '        address _ToBalancerPoolAddress,\n', '        address _FromTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        uint256 _minPoolTokens\n', '    ) internal returns (uint256 poolTokensOut) {\n', '        require(\n', '            IBPool(_ToBalancerPoolAddress).isBound(_FromTokenContractAddress),\n', '            "Token not bound"\n', '        );\n', '\n', '        uint256 allowance = IERC20(_FromTokenContractAddress).allowance(\n', '            address(this),\n', '            _ToBalancerPoolAddress\n', '        );\n', '\n', '        if (allowance < tokens2Trade) {\n', '            IERC20(_FromTokenContractAddress).safeApprove(\n', '                _ToBalancerPoolAddress,\n', '                uint256(-1)\n', '            );\n', '        }\n', '\n', '        poolTokensOut = IBPool(_ToBalancerPoolAddress).joinswapExternAmountIn(\n', '            _FromTokenContractAddress,\n', '            tokens2Trade,\n', '            _minPoolTokens\n', '        );\n', '\n', '        require(poolTokensOut > 0, "Error in entering balancer pool");\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to zap out of the given balancer pool\n', '    @param _FromBalancerPoolAddress The address of balancer pool to zap out\n', '    @param _ToTokenContractAddress The Token address which will be zapped out\n', '    @param _amount The amount of token for zapout\n', '    @return returnedTokens The amount of tokens received after zap out\n', '     */\n', '    function _exitBalancer(\n', '        address _FromBalancerPoolAddress,\n', '        address _ToTokenContractAddress,\n', '        uint256 _amount\n', '    ) internal returns (uint256 returnedTokens) {\n', '        require(\n', '            IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress),\n', '            "Token not bound"\n', '        );\n', '\n', '        uint256 minTokens = _getBPT2Token(\n', '            _FromBalancerPoolAddress,\n', '            _amount,\n', '            _ToTokenContractAddress\n', '        );\n', '        minTokens = SafeMath.div(SafeMath.mul(minTokens, 98), 100);\n', '\n', '        returnedTokens = IBPool(_FromBalancerPoolAddress).exitswapPoolAmountIn(\n', '            _ToTokenContractAddress,\n', '            _amount,\n', '            minTokens\n', '        );\n', '\n', '        require(returnedTokens > 0, "Error in exiting balancer pool");\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to swap tokens\n', '    @param _FromTokenContractAddress The token address to swap from\n', '    @param _ToWhomToIssue The address to transfer after swap\n', '    @param _ToTokenContractAddress The token address to swap to\n', '    @param tokens2Trade The quantity of tokens to swap\n', '    @return tokenBought The amount of tokens returned after swap\n', '     */\n', '    function _token2Token(\n', '        address _FromTokenContractAddress,\n', '        address _ToWhomToIssue,\n', '        address _ToTokenContractAddress,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 tokenBought) {\n', '        IERC20(_FromTokenContractAddress).approve(\n', '            address(uniswapRouter),\n', '            tokens2Trade\n', '        );\n', '\n', '        if (_FromTokenContractAddress != wethTokenAddress) {\n', '            if (_ToTokenContractAddress != wethTokenAddress) {\n', '                address[] memory path = new address[](3);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '                path[2] = _ToTokenContractAddress;\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    _ToWhomToIssue,\n', '                    deadline\n', '                )[path.length - 1];\n', '            } else {\n', '                address[] memory path = new address[](2);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    _ToWhomToIssue,\n', '                    deadline\n', '                )[path.length - 1];\n', '            }\n', '        } else {\n', '            address[] memory path = new address[](2);\n', '            path[0] = wethTokenAddress;\n', '            path[1] = _ToTokenContractAddress;\n', '            tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                tokens2Trade,\n', '                1,\n', '                path,\n', '                _ToWhomToIssue,\n', '                deadline\n', '            )[path.length - 1];\n', '        }\n', '\n', '        require(tokenBought > 0, "Error in swapping ERC: 1");\n', '    }\n', '\n', '    /**\n', '    @notice This function finds best token from the final tokens of balancer pool\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zap in\n', '    @param _amount amount of eth/erc to invest\n', '    @param _FromTokenContractAddress the token address which is used to invest\n', '    @return _token The token address having max liquidity\n', '    */\n', '    function _getBestDeal(\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        address _FromTokenContractAddress\n', '    ) internal view returns (address _token) {\n', '        // If input is not eth or weth\n', '        if (\n', '            _FromTokenContractAddress != address(0) &&\n', '            _FromTokenContractAddress != wethTokenAddress\n', '        ) {\n', '            // check if input token or weth is bound and if so return it as intermediate\n', '            bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '                _FromTokenContractAddress\n', '            );\n', '            if (isBound) return _FromTokenContractAddress;\n', '        }\n', '\n', '        bool wethIsBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '            wethTokenAddress\n', '        );\n', '        if (wethIsBound) return wethTokenAddress;\n', '\n', '        //get token list\n', '        address[] memory tokens = IBPool(_ToBalancerPoolAddress)\n', '            .getFinalTokens();\n', '\n', '        uint256 amount = _amount;\n', '        address[] memory path = new address[](2);\n', '\n', '        if (\n', '            _FromTokenContractAddress != address(0) &&\n', '            _FromTokenContractAddress != wethTokenAddress\n', '        ) {\n', '            path[0] = _FromTokenContractAddress;\n', '            path[1] = wethTokenAddress;\n', '            //get eth value for given token\n', '            amount = uniswapRouter.getAmountsOut(_amount, path)[1];\n', '        }\n', '\n', '        uint256 maxBPT;\n', '        path[0] = wethTokenAddress;\n', '\n', '        for (uint256 index = 0; index < tokens.length; index++) {\n', '            uint256 expectedBPT;\n', '\n', '            if (tokens[index] != wethTokenAddress) {\n', '                if (\n', '                    UniSwapV2FactoryAddress.getPair(\n', '                        tokens[index],\n', '                        wethTokenAddress\n', '                    ) == address(0)\n', '                ) {\n', '                    continue;\n', '                }\n', '\n', '                //get qty of tokens\n', '                path[1] = tokens[index];\n', '                uint256 expectedTokens = uniswapRouter.getAmountsOut(\n', '                    amount,\n', '                    path\n', '                )[1];\n', '\n', '                //get bpt for given tokens\n', '                expectedBPT = getToken2BPT(\n', '                    _ToBalancerPoolAddress,\n', '                    expectedTokens,\n', '                    tokens[index]\n', '                );\n', '\n', '                //get token giving max BPT\n', '                if (maxBPT < expectedBPT) {\n', '                    maxBPT = expectedBPT;\n', '                    _token = tokens[index];\n', '                }\n', '            } else {\n', '                //get bpt for given weth tokens\n', '                expectedBPT = getToken2BPT(\n', '                    _ToBalancerPoolAddress,\n', '                    amount,\n', '                    tokens[index]\n', '                );\n', '            }\n', '\n', '            //get token giving max BPT\n', '            if (maxBPT < expectedBPT) {\n', '                maxBPT = expectedBPT;\n', '                _token = tokens[index];\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '    @notice This function finds best token from the final tokens of balancer pool\n', '    @param _FromBalancerPoolAddress The address of balancer pool to zap out\n', '    @param _IncomingBPT The amount of balancer pool token to covert\n', '    @return _token The token address having max liquidity\n', '     */\n', '    function _getBestDeal(\n', '        address _FromBalancerPoolAddress,\n', '        uint256 _IncomingBPT\n', '    ) internal view returns (address _token) {\n', '        //get token list\n', '        address[] memory tokens = IBPool(_FromBalancerPoolAddress)\n', '            .getFinalTokens();\n', '\n', '        uint256 maxEth;\n', '\n', '        for (uint256 index = 0; index < tokens.length; index++) {\n', '            //get token for given bpt amount\n', '            uint256 tokensForBPT = _getBPT2Token(\n', '                _FromBalancerPoolAddress,\n', '                _IncomingBPT,\n', '                tokens[index]\n', '            );\n', '\n', '            //get eth value for each token\n', '            if (tokens[index] != wethTokenAddress) {\n', '                if (\n', '                    UniSwapV2FactoryAddress.getPair(\n', '                        tokens[index],\n', '                        wethTokenAddress\n', '                    ) == address(0)\n', '                ) {\n', '                    continue;\n', '                }\n', '\n', '                address[] memory path = new address[](2);\n', '                path[0] = tokens[index];\n', '                path[1] = wethTokenAddress;\n', '                uint256 ethReturned = uniswapRouter.getAmountsOut(\n', '                    tokensForBPT,\n', '                    path\n', '                )[1];\n', '\n', '                //get max eth value\n', '                if (maxEth < ethReturned) {\n', '                    maxEth = ethReturned;\n', '                    _token = tokens[index];\n', '                }\n', '            } else {\n', '                //get max eth value\n', '                if (maxEth < tokensForBPT) {\n', '                    maxEth = tokensForBPT;\n', '                    _token = tokens[index];\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: interfaces/IMooniswap.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IMooniswap {\n', '    function swap(address src, address dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result);\n', '    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable returns(uint256 fairSupply);\n', '    function withdraw(uint256 amount, uint256[] memory minReturns) external;\n', '\n', '    function getTokens() external view returns(IERC20[] memory);\n', '\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/libraries/UniERC20.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library UniERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    function isETH(IERC20 token) internal pure returns(bool) {\n', '        return (address(token) == address(0));\n', '    }\n', '\n', '    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return account.balance;\n', '        } else {\n', '            return token.balanceOf(account);\n', '        }\n', '    }\n', '\n', '    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                token.safeTransfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                require(msg.value >= amount, "UniERC20: not enough value");\n', '                if (msg.value > amount) {\n', '                    // Return remainder if exist\n', '                    msg.sender.transfer(msg.value.sub(amount));\n', '                }\n', '            } else {\n', '                token.safeTransferFrom(msg.sender, address(this), amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniSymbol(IERC20 token) internal view returns(string memory) {\n', '        if (isETH(token)) {\n', '            return "ETH";\n', '        }\n', '\n', '        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\n', '            abi.encodeWithSignature("symbol()")\n', '        );\n', '        if (!success) {\n', '            (success, data) = address(token).staticcall{ gas: 20000 }(\n', '                abi.encodeWithSignature("SYMBOL()")\n', '            );\n', '        }\n', '\n', '        if (success && data.length >= 96) {\n', '            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\n', '            if (offset == 0x20 && len > 0 && len <= 256) {\n', '                return string(abi.decode(data, (bytes)));\n', '            }\n', '        }\n', '\n', '        if (success && data.length == 32) {\n', '            uint len = 0;\n', '            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\n', '                len++;\n', '            }\n', '\n', '            if (len > 0) {\n', '                bytes memory result = new bytes(len);\n', '                for (uint i = 0; i < len; i++) {\n', '                    result[i] = data[i];\n', '                }\n', '                return string(result);\n', '            }\n', '        }\n', '\n', '        return _toHex(address(token));\n', '    }\n', '\n', '    function _toHex(address account) private pure returns(string memory) {\n', '        return _toHex(abi.encodePacked(account));\n', '    }\n', '\n', '    function _toHex(bytes memory data) private pure returns(string memory) {\n', '        bytes memory str = new bytes(2 + data.length * 2);\n', '        str[0] = "0";\n', '        str[1] = "x";\n', '        uint j = 2;\n', '        for (uint i = 0; i < data.length; i++) {\n', '            uint a = uint8(data[i]) >> 4;\n', '            uint b = uint8(data[i]) & 0x0f;\n', '            str[j++] = byte(uint8(a + 48 + (a/10)*39));\n', '            str[j++] = byte(uint8(b + 48 + (b/10)*39));\n', '        }\n', '\n', '        return string(str);\n', '    }\n', '}\n', '\n', '// File: contracts/ReefMooniswapV1.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library ReefMooniswapV1 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using UniERC20 for IERC20;\n', '\n', '    function investIntoMooniswapPool(\n', '        address _FromTokenContractAddress,\n', '        address poolAddress,\n', '        uint256 _amount\n', '    ) public returns(uint256 fairSupply) {\n', '        IMooniswap pool = IMooniswap(poolAddress);\n', '        IERC20[] memory ercTokens = pool.getTokens();\n', '\n', '        uint256[] memory amounts = new uint256[](2);\n', '        uint256[] memory minAmounts = new uint256[](2);\n', '\n', '        if (ercTokens[0].isETH() || ercTokens[1].isETH()) {\n', '            IERC20 token = ercTokens[0].isETH() ? ercTokens[1] : ercTokens[0];\n', '\n', '            //uint256 rate = pool.getReturn(ercTokens[0], ercTokens[1], _amount);\n', '            uint256 halfAmount = _amount.mul(50).div(100);\n', '            uint256 tokenBought = ReefUniswap.swapFromV2(_FromTokenContractAddress,\n', '                                                 address(token), halfAmount);\n', '\n', '            amounts[0] = halfAmount;\n', '            amounts[1] = tokenBought;\n', '\n', '            token.approve(\n', '                poolAddress,\n', '                tokenBought\n', '            );\n', '\n', '            fairSupply = pool.deposit{value: halfAmount}(\n', '                amounts,\n', '                minAmounts\n', '            );\n', '        } else {\n', '            (uint256 token0Bought, uint256 token1Bought) = ReefUniswap.exchangeTokensV2(\n', '                _FromTokenContractAddress,\n', '                address(ercTokens[0]),\n', '                address(ercTokens[1]),\n', '                _amount\n', '            );\n', '\n', '            amounts[0] = token0Bought;\n', '            amounts[1] = token1Bought;\n', '\n', '            ercTokens[0].approve(\n', '                poolAddress,\n', '                token0Bought\n', '            );\n', '\n', '            TransferHelper.safeApprove(address(ercTokens[1]),\n', '                poolAddress,\n', '                token1Bought\n', '            );\n', '\n', '            fairSupply = pool.deposit(\n', '                amounts,\n', '                minAmounts\n', '            );\n', '\n', '            // Check for change and return it (there must be a better way for\n', '            // this)\n', '            uint256 token0Balance = ercTokens[0].balanceOf((address(this)));\n', '            uint256 token1Balance = ercTokens[1].balanceOf((address(this)));\n', '\n', '            if (token0Balance > 0) {\n', '                ReefUniswap.swapFromV2(address(ercTokens[0]),\n', '                                       _FromTokenContractAddress, token0Balance);\n', '            }\n', '\n', '            if (token1Balance > 0) {\n', '                ReefUniswap.swapFromV2(address(ercTokens[1]),\n', '                                       _FromTokenContractAddress, token1Balance);\n', '            }\n', '        }\n', '    }\n', '\n', '    function disinvestFromMooniswapPool(\n', '        address _ToTokenContractAddress,\n', '        address poolAddress,\n', '        uint256 _amount\n', '    ) public {\n', '        IMooniswap pool = IMooniswap(poolAddress);\n', '        IERC20[] memory ercTokens = pool.getTokens();\n', '        uint256 totalSupply = pool.totalSupply();\n', '\n', '        uint256[] memory minAmounts = new uint256[](2);\n', '        uint256[] memory tokenReturns = new uint256[](2);\n', '\n', '        for (uint i = 0; i < ercTokens.length; i++) {\n', '            uint256 preBalance = ercTokens[i].uniBalanceOf(poolAddress);\n', '            tokenReturns[i] = preBalance.mul(_amount).div(totalSupply);\n', '        }\n', '\n', '        pool.withdraw(\n', '            _amount,\n', '            minAmounts\n', '        );\n', '\n', '        for (uint i = 0; i < tokenReturns.length; i++) {\n', '            if (!ercTokens[i].isETH()) {\n', '                ReefUniswap.swapFromV2(address(ercTokens[i]),\n', '                                       _ToTokenContractAddress,\n', '                                       tokenReturns[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ReefBasket.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract ReefBasket is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '\n', '    bool private stopped = false;\n', '    uint16 public protocolTokenDisinvestPercentage;\n', '    address public protocolTokenAddress;\n', '    uint256 public minimalInvestment = 1 ether;\n', '\n', '    // Limit how much funds we can handle\n', '    uint256 public maxInvestedFunds = 100 ether;\n', '    uint256 public currentInvestedFunds;\n', '\n', '    // Define baskets\n', '    struct UniswapV2Pool {\n', '        uint8 weight;\n', '        address uniswapToken0;\n', '        address uniswapToken1;\n', '    }\n', '\n', '    struct Token {\n', '        uint8 weight;\n', '        address tokenAddress;\n', '    }\n', '\n', '    struct Pool {\n', '        uint8 weight;\n', '        address poolAddress;\n', '    }\n', '\n', '    struct Basket {\n', '        string name;\n', '        address referrer;\n', '        UniswapV2Pool[] uniswapPools;\n', '        Token[] tokens;\n', '        Pool[] balancerPools;\n', '        Pool[] mooniswapPools;\n', '    }\n', '\n', '    struct BasketBalance {\n', '        uint256 investedAmount;\n', '        mapping(uint256 => uint256) uniswapPools;\n', '        mapping(uint256 => uint256) balancerPools;\n', '        mapping(uint256 => uint256) mooniswapPools;\n', '        mapping(uint256 => uint256) tokens;\n', '    }\n', '\n', '    struct UserBalance {\n', '        mapping(uint256 => BasketBalance) basketBalances;\n', '    }\n', '\n', '    event Invest(\n', '        address indexed user,\n', '        uint256 indexed basketId,\n', '        uint256 investedAmount\n', '    );\n', '\n', '    event Disinvest(\n', '        address indexed user,\n', '        uint256 indexed basketId,\n', '        uint256 disinvestedAmount\n', '    );\n', '\n', '    event BasketCreated(uint256 indexed basketId, address indexed user);\n', '\n', '    uint256 public availableBasketsSize;\n', '    mapping(uint256 => Basket) public availableBaskets;\n', '\n', '    mapping(address => UserBalance) private userBalance;\n', '\n', '    address wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    constructor(\n', '        uint16 _protocolTokenDisinvestPercentage,\n', '        address _protocolTokenAddress\n', '    ) public {\n', '        protocolTokenDisinvestPercentage = _protocolTokenDisinvestPercentage;\n', '        protocolTokenAddress = _protocolTokenAddress;\n', '    }\n', '\n', '    function balanceOfUniswapPools(address _owner, uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        uint256[] memory uniswapBalances = new uint256[](\n', '            basket.uniswapPools.length\n', '        );\n', '        for (uint256 i = 0; i < basket.uniswapPools.length; i++) {\n', '            uniswapBalances[i] = userBalance[_owner]\n', '                .basketBalances[_basketIndex]\n', '                .uniswapPools[i];\n', '        }\n', '\n', '        return uniswapBalances;\n', '    }\n', '\n', '    function balanceOfTokens(address _owner, uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        uint256[] memory tokenBalances = new uint256[](basket.tokens.length);\n', '        for (uint256 i = 0; i < basket.tokens.length; i++) {\n', '            tokenBalances[i] = userBalance[_owner].basketBalances[_basketIndex]\n', '                .tokens[i];\n', '        }\n', '\n', '        return tokenBalances;\n', '    }\n', '\n', '    function balanceOfBalancerPools(address _owner, uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        uint256[] memory balancerBalances = new uint256[](\n', '            basket.balancerPools.length\n', '        );\n', '        for (uint256 i = 0; i < basket.balancerPools.length; i++) {\n', '            balancerBalances[i] = userBalance[_owner]\n', '                .basketBalances[_basketIndex]\n', '                .balancerPools[i];\n', '        }\n', '\n', '        return balancerBalances;\n', '    }\n', '\n', '    function balanceOfMooniswapPools(address _owner, uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        uint256[] memory mooniswapBalances = new uint256[](\n', '            basket.mooniswapPools.length\n', '        );\n', '        for (uint256 i = 0; i < basket.mooniswapPools.length; i++) {\n', '            mooniswapBalances[i] = userBalance[_owner]\n', '                .basketBalances[_basketIndex]\n', '                .mooniswapPools[i];\n', '        }\n', '\n', '        return mooniswapBalances;\n', '    }\n', '\n', '    function investedAmountInBasket(address _owner, uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return userBalance[_owner].basketBalances[_basketIndex].investedAmount;\n', '    }\n', '\n', '    function getAvailableBasketUniswapPools(uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (address[2][] memory, uint8[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        address[2][] memory uniswapPools = new address[2][](\n', '            basket.uniswapPools.length\n', '        );\n', '        uint8[] memory uniswapWeights = new uint8[](basket.uniswapPools.length);\n', '\n', '        for (uint256 i = 0; i < basket.uniswapPools.length; i++) {\n', '            uniswapPools[i][0] = basket.uniswapPools[i].uniswapToken0;\n', '            uniswapPools[i][1] = basket.uniswapPools[i].uniswapToken1;\n', '\n', '            uniswapWeights[i] = basket.uniswapPools[i].weight;\n', '        }\n', '\n', '        return (uniswapPools, uniswapWeights);\n', '    }\n', '\n', '    function getAvailableBasketTokens(uint8 _basketIndex)\n', '        public\n', '        view\n', '        returns (address[] memory, uint8[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        address[] memory tokens = new address[](basket.tokens.length);\n', '        uint8[] memory tokensWeights = new uint8[](basket.tokens.length);\n', '        for (uint256 i = 0; i < basket.tokens.length; i++) {\n', '            tokens[i] = basket.tokens[i].tokenAddress;\n', '\n', '            tokensWeights[i] = basket.tokens[i].weight;\n', '        }\n', '\n', '        return (tokens, tokensWeights);\n', '    }\n', '\n', '    function getAvailableBasketBalancerPools(uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (address[] memory, uint8[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        address[] memory balancerPools = new address[](\n', '            basket.balancerPools.length\n', '        );\n', '        uint8[] memory balancerWeights = new uint8[](\n', '            basket.balancerPools.length\n', '        );\n', '        for (uint256 i = 0; i < basket.balancerPools.length; i++) {\n', '            balancerPools[i] = basket.balancerPools[i].poolAddress;\n', '\n', '            balancerWeights[i] = basket.balancerPools[i].weight;\n', '        }\n', '\n', '        return (balancerPools, balancerWeights);\n', '    }\n', '\n', '    function getAvailableBasketMooniswapPools(uint256 _basketIndex)\n', '        public\n', '        view\n', '        returns (address[] memory, uint8[] memory)\n', '    {\n', '        Basket storage basket = availableBaskets[_basketIndex];\n', '\n', '        address[] memory mooniswapPools = new address[](\n', '            basket.mooniswapPools.length\n', '        );\n', '        uint8[] memory mooniswapWeights = new uint8[](\n', '            basket.mooniswapPools.length\n', '        );\n', '        for (uint256 i = 0; i < basket.mooniswapPools.length; i++) {\n', '            mooniswapPools[i] = basket.mooniswapPools[i].poolAddress;\n', '\n', '            mooniswapWeights[i] = basket.mooniswapPools[i].weight;\n', '        }\n', '\n', '        return (mooniswapPools, mooniswapWeights);\n', '    }\n', '\n', '    function createBasket(\n', '        string memory _name,\n', '        address[2][] memory _uniswapPools,\n', '        uint8[] memory _uniswapPoolsWeights,\n', '        address[] memory _tokens,\n', '        uint8[] memory _tokensWeights,\n', '        address[] memory _balancerPools,\n', '        uint8[] memory _balancerPoolsWeights,\n', '        address[] memory _mooniswapPools,\n', '        uint8[] memory _mooniswapPoolsWeights\n', '    ) public payable nonReentrant stopInEmergency returns (uint256) {\n', '        require(\n', '            _uniswapPoolsWeights.length > 0 ||\n', '                _tokensWeights.length > 0 ||\n', '                _balancerPoolsWeights.length > 0 ||\n', '                _mooniswapPoolsWeights.length > 0,\n', '            "0 assets given"\n', '        );\n', '        require(_uniswapPools.length == _uniswapPoolsWeights.length);\n', '        require(_tokens.length == _tokensWeights.length);\n', '        require(_balancerPools.length == _balancerPoolsWeights.length);\n', '        require(_mooniswapPools.length == _mooniswapPoolsWeights.length);\n', '\n', '        uint256 totalWeights;\n', '        Basket storage basket = availableBaskets[availableBasketsSize];\n', '        availableBasketsSize++;\n', '\n', '        basket.name = _name;\n', '        basket.referrer = msg.sender;\n', '\n', '        for (uint256 i = 0; i < _uniswapPoolsWeights.length; i++) {\n', '            totalWeights = (totalWeights).add(_uniswapPoolsWeights[i]);\n', '        }\n', '        for (uint256 i = 0; i < _tokensWeights.length; i++) {\n', '            totalWeights = (totalWeights).add(_tokensWeights[i]);\n', '        }\n', '        for (uint256 i = 0; i < _balancerPoolsWeights.length; i++) {\n', '            totalWeights = (totalWeights).add(_balancerPoolsWeights[i]);\n', '        }\n', '        for (uint256 i = 0; i < _mooniswapPoolsWeights.length; i++) {\n', '            totalWeights = (totalWeights).add(_mooniswapPoolsWeights[i]);\n', '        }\n', '\n', '        require(totalWeights == 100, "Basket weights have to sum up to 100.");\n', '\n', '        for (uint256 i = 0; i < _uniswapPools.length; i++) {\n', '            UniswapV2Pool memory pool = UniswapV2Pool(\n', '                _uniswapPoolsWeights[i],\n', '                _uniswapPools[i][0],\n', '                _uniswapPools[i][1]\n', '            );\n', '\n', '            basket.uniswapPools.push(pool);\n', '        }\n', '\n', '        for (uint256 i = 0; i < _tokensWeights.length; i++) {\n', '            Token memory token = Token(_tokensWeights[i], _tokens[i]);\n', '\n', '            basket.tokens.push(token);\n', '        }\n', '\n', '        for (uint256 i = 0; i < _balancerPools.length; i++) {\n', '            Pool memory balancerPool = Pool(\n', '                _balancerPoolsWeights[i],\n', '                _balancerPools[i]\n', '            );\n', '\n', '            basket.balancerPools.push(balancerPool);\n', '        }\n', '\n', '        for (uint256 i = 0; i < _mooniswapPools.length; i++) {\n', '            Pool memory mooniswapPool = Pool(\n', '                _mooniswapPoolsWeights[i],\n', '                _mooniswapPools[i]\n', '            );\n', '\n', '            basket.mooniswapPools.push(mooniswapPool);\n', '        }\n', '\n', '        emit BasketCreated(availableBasketsSize - 1, msg.sender);\n', '\n', '        uint256[] memory baskets = new uint256[](1);\n', '        uint256[] memory weights = new uint256[](1);\n', '        baskets[0] = availableBasketsSize - 1;\n', '        weights[0] = 100;\n', '\n', '        return _multiInvest(baskets, weights, 1);\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens\n', '    @param _basketIndexes basket indexes to invest into\n', '    @param _weights corresponding basket weights (percentage) how much to invest\n', '    @param _minPoolTokens Reverts if less tokens received than this\n', '    @return Amount of LP bought\n', '     */\n', '    function invest(\n', '        uint256[] memory _basketIndexes,\n', '        uint256[] memory _weights,\n', '        uint256 _minPoolTokens\n', '    ) public payable nonReentrant stopInEmergency returns (uint256) {\n', '        return _multiInvest(_basketIndexes, _weights, _minPoolTokens);\n', '    }\n', '\n', '    function _multiInvest(\n', '        uint256[] memory _basketIndexes,\n', '        uint256[] memory _weights,\n', '        uint256 _minPoolTokens\n', '    ) internal returns (uint256) {\n', '        require(msg.value > 0, "Error: ETH not sent");\n', '\n', '        // Check weights\n', '        require(_basketIndexes.length == _weights.length);\n', '        uint256 totalWeights;\n', '        for (uint256 i = 0; i < _weights.length; i++) {\n', '            totalWeights = (totalWeights).add(_weights[i]);\n', '        }\n', '\n', '        require(totalWeights == 100, "Basket _weights have to sum up to 100.");\n', '\n', '        for (uint256 i = 0; i < _weights.length; i++) {\n', '            uint256 basketInvestAmount = (msg.value).mul(_weights[i]).div(100);\n', '            require(\n', '                basketInvestAmount >= minimalInvestment,\n', '                "Too low invest amount."\n', '            );\n', '\n', '            _invest(_basketIndexes[i], basketInvestAmount, _minPoolTokens);\n', '        }\n', '\n', '        // Return change\n', '        (bool success, ) = msg.sender.call{value: address(this).balance}("");\n', '    }\n', '\n', '    function _invest(\n', '        uint256 _basketIndex,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens\n', '    ) internal returns (uint256) {\n', '        require(\n', '            _basketIndex < availableBasketsSize,\n', '            "Error: basket index out of bounds"\n', '        );\n', '        uint256 startBalance = address(this).balance;\n', '\n', '        // Invest into pools\n', '        for (\n', '            uint256 i = 0;\n', '            i < availableBaskets[_basketIndex].uniswapPools.length;\n', '            i++\n', '        ) {\n', '            UniswapV2Pool memory pool = availableBaskets[_basketIndex]\n', '                .uniswapPools[i];\n', '\n', '            uint256 investAmount = (_amount).mul(pool.weight).div(100);\n', '\n', '            uint256 LPBought = ReefUniswap._investIntoUniswapPool(\n', '                address(0),\n', '                pool.uniswapToken0,\n', '                pool.uniswapToken1,\n', '                address(this),\n', '                investAmount\n', '            );\n', '\n', '            require(LPBought >= _minPoolTokens, "ERR: High Slippage");\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .uniswapPools[i] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .uniswapPools[i]\n', '                .add(LPBought);\n', '        }\n', '\n', '        // Invest into tokens\n', '        for (\n', '            uint256 i = 0;\n', '            i < availableBaskets[_basketIndex].tokens.length;\n', '            i++\n', '        ) {\n', '            Token memory token = availableBaskets[_basketIndex].tokens[i];\n', '            uint256 investAmount = (_amount).mul(token.weight).div(100);\n', '\n', '            uint256 tokenBought = ReefUniswap.swapFromV2(\n', '                address(0),\n', '                token.tokenAddress,\n', '                investAmount\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .tokens[i] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .tokens[i]\n', '                .add(tokenBought);\n', '        }\n', '\n', '        // Invest into balancer pool\n', '        for (\n', '            uint256 i = 0;\n', '            i < availableBaskets[_basketIndex].balancerPools.length;\n', '            i++\n', '        ) {\n', '            Pool memory balancerPool = availableBaskets[_basketIndex]\n', '                .balancerPools[i];\n', '            uint256 investAmount = (_amount).mul(balancerPool.weight).div(100);\n', '\n', '            uint256 balancerTokens = ReefBalancer.investIntoBalancerPool(\n', '                address(this),\n', '                address(0),\n', '                balancerPool.poolAddress,\n', '                investAmount,\n', '                _minPoolTokens\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .balancerPools[i] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .balancerPools[i]\n', '                .add(balancerTokens);\n', '        }\n', '\n', '        // Invest into Mooniswap pool\n', '        for (\n', '            uint256 i = 0;\n', '            i < availableBaskets[_basketIndex].mooniswapPools.length;\n', '            i++\n', '        ) {\n', '            Pool memory mooniswapPool = availableBaskets[_basketIndex]\n', '                .mooniswapPools[i];\n', '            uint256 investAmount = (_amount).mul(mooniswapPool.weight).div(100);\n', '\n', '            uint256 fairSupply = ReefMooniswapV1.investIntoMooniswapPool(\n', '                address(0),\n', '                mooniswapPool.poolAddress,\n', '                investAmount\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .mooniswapPools[i] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .mooniswapPools[i]\n', '                .add(fairSupply);\n', '        }\n', '\n', '        // Update user balance\n', '        uint256 diffBalance = startBalance.sub(address(this).balance);\n', '\n', '        userBalance[msg.sender].basketBalances[_basketIndex]\n', '            .investedAmount = userBalance[msg.sender]\n', '            .basketBalances[_basketIndex]\n', '            .investedAmount\n', '            .add(diffBalance);\n', '\n', '        // Update current funds\n', '        currentInvestedFunds = currentInvestedFunds.add(diffBalance);\n', '        require(\n', '            currentInvestedFunds <= maxInvestedFunds,\n', '            "Max invested funds exceeded"\n', '        );\n', '\n', '        emit Invest(\n', '            msg.sender,\n', '            _basketIndex,\n', '            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount\n', '        );\n', '\n', '        return\n', '            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount;\n', '    }\n', '\n', '    function disinvest(\n', '        uint256 _basketIndex,\n', '        uint256 _percent,\n', '        uint256 _protocolYieldRatio,\n', '        bool shouldRestake\n', '    ) public payable nonReentrant stopInEmergency returns (uint256) {\n', '        require(\n', '            _basketIndex < availableBasketsSize,\n', '            "Basket index out of bounds"\n', '        );\n', '\n', '        require(\n', '            _percent > 0 && _percent <= 100,\n', '            "Percent has to in interval (0, 100]"\n', '        );\n', '        require(\n', '            _protocolYieldRatio <= 100,\n', '            "Protocol yield ratio not in interval (0, 100]"\n', '        );\n', '\n', '        // Disinvest uniswap pools\n', '        for (\n', '            uint256 p = 0;\n', '            p < availableBaskets[_basketIndex].uniswapPools.length;\n', '            p++\n', '        ) {\n', '            uint256 currentBalance = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .uniswapPools[p];\n', '\n', '            require(currentBalance > 0, "balance must be positive");\n', '\n', '            UniswapV2Pool memory pool = availableBaskets[_basketIndex]\n', '                .uniswapPools[p];\n', '            uint256 disinvestAmount = (currentBalance).mul(_percent).div(100);\n', '\n', '            (uint256 amountA, uint256 amountB) = ReefUniswap\n', '                ._disinvestFromUniswapPool(\n', '                address(0),\n', '                pool.uniswapToken0,\n', '                pool.uniswapToken1,\n', '                disinvestAmount\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .uniswapPools[p] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .uniswapPools[p]\n', '                .sub(disinvestAmount);\n', '        }\n', '\n', '        // Disinvest tokens\n', '        for (\n', '            uint256 t = 0;\n', '            t < availableBaskets[_basketIndex].tokens.length;\n', '            t++\n', '        ) {\n', '            uint256 currentBalance = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .tokens[t];\n', '\n', '            require(currentBalance > 0, "balance must be positive");\n', '\n', '            Token memory token = availableBaskets[_basketIndex].tokens[t];\n', '            uint256 disinvestAmount = (currentBalance).mul(_percent).div(100);\n', '\n', '            if (ReefUniswap.canSwapFromV2(token.tokenAddress, address(0))) {\n', '                uint256 tokenBought = ReefUniswap.swapFromV2(\n', '                    token.tokenAddress,\n', '                    address(0),\n', '                    disinvestAmount\n', '                );\n', '\n', '                TransferHelper.safeTransfer(\n', '                    address(0),\n', '                    msg.sender,\n', '                    tokenBought\n', '                );\n', '            }\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .tokens[t] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .tokens[t]\n', '                .sub(disinvestAmount);\n', '        }\n', '\n', '        // Disinvest Balancer pools\n', '        for (\n', '            uint256 b = 0;\n', '            b < availableBaskets[_basketIndex].balancerPools.length;\n', '            b++\n', '        ) {\n', '            require(\n', '                userBalance[msg.sender].basketBalances[_basketIndex]\n', '                    .balancerPools[b] > 0,\n', '                "balance must be positive"\n', '            );\n', '\n', '            uint256 disinvestAmount = (\n', '                userBalance[msg.sender].basketBalances[_basketIndex]\n', '                    .balancerPools[b]\n', '            )\n', '                .mul(_percent)\n', '                .div(100);\n', '\n', '            IERC20(availableBaskets[_basketIndex].balancerPools[b].poolAddress)\n', '                .approve(address(ReefBalancer), disinvestAmount);\n', '\n', '            // TODO: figure out slippage\n', '            uint256 balancerTokens = ReefBalancer.disinvestFromBalancerPool(\n', '                payable(address(this)),\n', '                address(0),\n', '                availableBaskets[_basketIndex].balancerPools[b].poolAddress,\n', '                disinvestAmount,\n', '                1\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .balancerPools[b] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .balancerPools[b]\n', '                .sub(disinvestAmount);\n', '        }\n', '\n', '        // Disinvest Mooniswap pools\n', '        for (\n', '            uint256 b = 0;\n', '            b < availableBaskets[_basketIndex].mooniswapPools.length;\n', '            b++\n', '        ) {\n', '            require(\n', '                userBalance[msg.sender].basketBalances[_basketIndex]\n', '                    .mooniswapPools[b] > 0,\n', '                "balance must be positive"\n', '            );\n', '\n', '            uint256 disinvestAmount = (\n', '                userBalance[msg.sender].basketBalances[_basketIndex]\n', '                    .mooniswapPools[b]\n', '            )\n', '                .mul(_percent)\n', '                .div(100);\n', '\n', '            // TODO: figure out slippage\n', '            ReefMooniswapV1.disinvestFromMooniswapPool(\n', '                address(0),\n', '                availableBaskets[_basketIndex].mooniswapPools[b].poolAddress,\n', '                disinvestAmount\n', '            );\n', '\n', '            userBalance[msg.sender].basketBalances[_basketIndex]\n', '                .mooniswapPools[b] = userBalance[msg.sender]\n', '                .basketBalances[_basketIndex]\n', '                .mooniswapPools[b]\n', '                .sub(disinvestAmount);\n', '        }\n', '\n', '        // Update user balance\n', '        uint256 basketDisinvestAmount = (\n', '            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount\n', '        )\n', '            .mul(_percent)\n', '            .div(100);\n', '\n', '        userBalance[msg.sender].basketBalances[_basketIndex]\n', '            .investedAmount = userBalance[msg.sender]\n', '            .basketBalances[_basketIndex]\n', '            .investedAmount\n', '            .sub(basketDisinvestAmount);\n', '\n', '        emit Disinvest(msg.sender, _basketIndex, basketDisinvestAmount);\n', '\n', '        // Update current funds\n', '        currentInvestedFunds = currentInvestedFunds.sub(basketDisinvestAmount);\n', '\n', '        // Stake the profit into REEF tokens\n', '        if (address(this).balance > basketDisinvestAmount) {\n', '            uint256 profit = address(this).balance - basketDisinvestAmount;\n', '\n', '            // Return the liquidation\n', '            uint256 yieldRatio = protocolTokenDisinvestPercentage >\n', '                _protocolYieldRatio\n', '                ? protocolTokenDisinvestPercentage\n', '                : _protocolYieldRatio;\n', '\n', '            if (yieldRatio > 0) {\n', '                // Check if we restake into the ETH/protocolToken pool\n', '                if (shouldRestake) {\n', '                    ReefUniswap._investIntoUniswapPool(\n', '                        address(0),\n', '                        wethTokenAddress,\n', '                        protocolTokenAddress,\n', '                        msg.sender,\n', '                        profit.mul(yieldRatio).div(100)\n', '                    );\n', '                } else {\n', '                    uint256 protocolTokenAmount = ReefUniswap.swapFromV2(\n', '                        address(0),\n', '                        protocolTokenAddress,\n', '                        profit.mul(yieldRatio).div(100)\n', '                    );\n', '\n', '                    if (protocolTokenAmount > 0) {\n', '                        TransferHelper.safeTransfer(\n', '                            protocolTokenAddress,\n', '                            msg.sender,\n', '                            protocolTokenAmount\n', '                        );\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        // Return the remaining ETH\n', '        (bool success, ) = msg.sender.call{value: address(this).balance}("");\n', '    }\n', '\n', '    function setProtocolTokenDisinvestPercentage(uint16 _newPercentage)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(\n', '            _newPercentage >= 0 && _newPercentage < 100,\n', '            "_newPercentage must be between 0 and 100."\n', '        );\n', '        protocolTokenDisinvestPercentage = _newPercentage;\n', '    }\n', '\n', '    function setProtocolTokenAddress(address _newProtocolTokenAddress)\n', '        public\n', '        onlyOwner\n', '    {\n', '        protocolTokenAddress = _newProtocolTokenAddress;\n', '    }\n', '\n', '    function setMinimalInvestment(uint256 _minimalInvestment) public onlyOwner {\n', '        minimalInvestment = _minimalInvestment;\n', '    }\n', '\n', '    function setMaxInvestedFunds(uint256 _maxInvestedFunds) public onlyOwner {\n', '        require(\n', '            _maxInvestedFunds >= currentInvestedFunds,\n', '            "Max funds lower than current funds."\n', '        );\n', '        maxInvestedFunds = _maxInvestedFunds;\n', '    }\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\n', '        uint256 qty = _TokenAddress.balanceOf(address(this));\n', '        TransferHelper.safeTransfer(address(_TokenAddress), owner(), qty);\n', '    }\n', '\n', '    // to Pause the contract\n', '    function toggleContractActive() public onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    // to withdraw any ETH balance sitting in the contract\n', '    function withdraw() public onlyOwner {\n', '        uint256 contractBalance = address(this).balance;\n', '        address payable _to = payable(owner());\n', '        _to.transfer(contractBalance);\n', '    }\n', '\n', '    receive() external payable {}\n', '}']