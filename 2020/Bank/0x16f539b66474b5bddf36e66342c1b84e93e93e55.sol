['pragma solidity ^0.5.0;\n', '\n', 'contract Ref {\n', '\n', '    mapping(address => address) public referrer;\n', '    mapping(address => uint) public score;\n', '    mapping(address => address[]) public referrerArray;\n', '    mapping(address => bool) public admin;\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin[msg.sender], "You\'re not admin");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        admin[msg.sender] = true;        \n', '    }\n', '\n', '    function scoreOf(address a) public view returns (uint) {\n', '        return score[a];\n', '    }\n', '\n', '    function referrerNum(address a) public view returns (uint) {\n', '        return referrerArray[a].length;\n', '    }\n', '\n', '    function get_referrer(address a) public view returns (address) {\n', '        return referrer[a];\n', '    }\n', '\n', '\n', '    function set_admin(address a) onlyAdmin() external {\n', '        admin[a] = true;\n', '    }\n', '\n', '    function set_referrer(address r) onlyAdmin() external {\n', '        if (referrer[tx.origin] == address(0)) {\n', '            referrer[tx.origin] = r;\n', '            emit ReferrerSet(tx.origin, r);\n', '            referrerArray[r].push(tx.origin);\n', '        }\n', '    }\n', '\n', '    \n', '    function add_score(uint d) onlyAdmin() external {\n', '        score[referrer[tx.origin]] += d;\n', '        emit ScoreAdded(tx.origin, referrer[tx.origin], d);\n', '    }\n', '\n', '    event ReferrerSet(address indexed origin, address indexed referrer);\n', '    event ScoreAdded(address indexed origin, address indexed referrer, uint score);\n', '}']