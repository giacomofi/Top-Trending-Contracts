['pragma experimental ABIEncoderV2;\n', '\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/libraries/SafeMath.sol\n', '\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/libraries/TransferHelper.sol\n', '\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n', '\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setMigrator(address) external;\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n', '\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/interfaces/IMintable.sol\n', '\n', '\n', '\n', 'interface IMintable {\n', '    function mint(address to, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/libraries/Verifier.sol\n', '\n', '\n', '\n', 'library Verifier {\n', '    function verify(\n', '        address signer,\n', '        bytes32 hash,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal pure returns (bool) {\n', '        bool verified = signer == ecrecover(hash, v, r, s);\n', '        if (verified) {\n', '            return true;\n', '        } else {\n', '            // Consider it signed by web3.eth_sign\n', '            hash = keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '            return signer == ecrecover(hash, v, r, s);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/mixins/Ownable.sol\n', '\n', '// solhint-disable-next-line max-line-length\n', '// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n', '\n', '\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner {\n', '        require(_owner == msg.sender, "msg-sender-not-owner");\n', '        _;\n', '    }\n', '\n', '    function _initialize(address owner) internal {\n', '        _owner = owner;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid-address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/libraries/UniswapV2Library.sol\n', '\n', '\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\n', '\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\n', '\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IERC20.sol\n', '\n', '\n', 'interface IERC20Uniswap {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: @sushiswap/core/contracts/uniswapv2/interfaces/IWETH.sol\n', '\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// File: contracts/libraries/Orders.sol\n', '\n', '\n', '\n', 'library Orders {\n', '    enum Status {Invalid, Fillable, Expired, Filled}\n', '\n', '    bytes32 internal constant ORDER_TYPEHASH = keccak256(\n', '        // solhint-disable-next-line\n', '        "Order(address maker,address fromToken,address toToken,address amountIn,address amountOutMin,address recipient,address deadline)"\n', '    );\n', '\n', '    struct Order {\n', '        address maker;\n', '        address fromToken;\n', '        address toToken;\n', '        uint256 amountIn;\n', '        uint256 amountOutMin;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    struct OrderInfo {\n', '        Status status;\n', '        uint256 filledAmountIn;\n', '    }\n', '\n', '    function hash(Order memory order) internal view returns (bytes32) {\n', '        return\n', '            hash(\n', '                order.maker,\n', '                order.fromToken,\n', '                order.toToken,\n', '                order.amountIn,\n', '                order.amountOutMin,\n', '                order.recipient,\n', '                order.deadline\n', '            );\n', '    }\n', '\n', '    function hash(\n', '        address maker,\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address recipient,\n', '        uint256 deadline\n', '    ) internal view returns (bytes32) {\n', '        return\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    ORDER_TYPEHASH,\n', '                    maker,\n', '                    fromToken,\n', '                    toToken,\n', '                    amountIn,\n', '                    amountOutMin,\n', '                    recipient,\n', '                    deadline\n', '                )\n', '            );\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ISettlement.sol\n', '\n', '\n', '\n', '\n', 'interface ISettlement {\n', '    event OrderFilled(bytes32 indexed hash, uint256 amountIn, uint256 amountOut);\n', '    event OrderFeeTransferred(bytes32 indexed hash, address indexed recipient, uint256 amount);\n', '\n', '    struct FillOrderArgs {\n', '        Orders.Order order;\n', '        uint256 amountToFillIn;\n', '        address[] path;\n', '    }\n', '\n', '    function fillOrder(FillOrderArgs calldata args) external returns (uint256 amountOut);\n', '\n', '    function fillOrders(FillOrderArgs[] calldata args)\n', '        external\n', '        returns (uint256[] memory amountsOut);\n', '}\n', '\n', '// File: contracts/UniswapV2Router02Settlement.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract UniswapV2Router02Settlement is ISettlement {\n', '    using SafeMathUniswap for uint256;\n', '\n', '    address public factory;\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    address public WETH;\n', '\n', '    modifier ensure(uint256 deadline) {\n', '        require(deadline >= block.timestamp, "EXPIRED");\n', '        _;\n', '    }\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    function _initialize(address _factory, address _WETH) internal {\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '    }\n', '\n', '    function fillOrder(FillOrderArgs memory args)\n', '        public\n', '        virtual\n', '        override\n', '        returns (uint256 amountOut);\n', '\n', '    function fillOrders(FillOrderArgs[] memory args)\n', '        public\n', '        virtual\n', '        override\n', '        returns (uint256[] memory amountsOut);\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == WETH);\n', '        // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '    // **** ADD LIQUIDITY ****\n', '    function _addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin\n', '    ) internal returns (uint256 amountA, uint256 amountB) {\n', "        // create the pair if it doesn't exist yet\n", '        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\n', '            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n', '        }\n', '        (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(\n', '            factory,\n', '            tokenA,\n', '            tokenB\n', '        );\n', '        if (reserveA == 0 && reserveB == 0) {\n', '            (amountA, amountB) = (amountADesired, amountBDesired);\n', '        } else {\n', '            uint256 amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n', '            if (amountBOptimal <= amountBDesired) {\n', '                require(amountBOptimal >= amountBMin, "INSUFFICIENT_B_AMOUNT");\n', '                (amountA, amountB) = (amountADesired, amountBOptimal);\n', '            } else {\n', '                uint256 amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n', '                assert(amountAOptimal <= amountADesired);\n', '                require(amountAOptimal >= amountAMin, "INSUFFICIENT_A_AMOUNT");\n', '                (amountA, amountB) = (amountAOptimal, amountBDesired);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    )\n', '        external\n', '        ensure(deadline)\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        fillOrders(args);\n', '        (amountA, amountB) = _addLiquidity(\n', '            tokenA,\n', '            tokenB,\n', '            amountADesired,\n', '            amountBDesired,\n', '            amountAMin,\n', '            amountBMin\n', '        );\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n', '        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n', '        liquidity = IUniswapV2Pair(pair).mint(to);\n', '    }\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    )\n', '        external\n', '        payable\n', '        ensure(deadline)\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        fillOrders(args);\n', '        (amountToken, amountETH) = _addLiquidity(\n', '            token,\n', '            WETH,\n', '            amountTokenDesired,\n', '            msg.value,\n', '            amountTokenMin,\n', '            amountETHMin\n', '        );\n', '        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n', '        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n', '        IWETH(WETH).deposit{value: amountETH}();\n', '        assert(IWETH(WETH).transfer(pair, amountETH));\n', '        liquidity = IUniswapV2Pair(pair).mint(to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amountETH)\n', '            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY ****\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) public ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n', '        fillOrders(args);\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity);\n', '        // send liquidity to pair\n', '        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\n', '        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\n', '        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n', '        require(amountA >= amountAMin, "INSUFFICIENT_A_AMOUNT");\n', '        require(amountB >= amountBMin, "INSUFFICIENT_B_AMOUNT");\n', '    }\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) public ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\n', '        (amountToken, amountETH) = removeLiquidity(\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline,\n', '            args\n', '        );\n', '        TransferHelper.safeTransfer(token, to, amountToken);\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        FillOrderArgs[] memory args\n', '    ) external returns (uint256 amountA, uint256 amountB) {\n', '        revert("Unimplemented");\n', '    }\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        FillOrderArgs[] memory args\n', '    ) external returns (uint256 amountToken, uint256 amountETH) {\n', '        revert("Unimplemented");\n', '    }\n', '\n', '    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) public ensure(deadline) returns (uint256 amountETH) {\n', '        (, amountETH) = removeLiquidity(\n', '            token,\n', '            WETH,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            address(this),\n', '            deadline,\n', '            args\n', '        );\n', '        TransferHelper.safeTransfer(token, to, IERC20Uniswap(token).balanceOf(address(this)));\n', '        IWETH(WETH).withdraw(amountETH);\n', '        TransferHelper.safeTransferETH(to, amountETH);\n', '    }\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        FillOrderArgs[] memory args\n', '    ) external returns (uint256 amountETH) {\n', '        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n', '        uint256 value = approveMax ? uint256(-1) : liquidity;\n', '        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n', '        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n', '            token,\n', '            liquidity,\n', '            amountTokenMin,\n', '            amountETHMin,\n', '            to,\n', '            deadline,\n', '            args\n', '        );\n', '    }\n', '\n', '    // **** SWAP ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swap(\n', '        uint256[] memory amounts,\n', '        address[] memory path,\n', '        address _to\n', '    ) internal {\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n', '            uint256 amountOut = amounts[i + 1];\n', '            (uint256 amount0Out, uint256 amount1Out) = input == token0\n', '                ? (uint256(0), amountOut)\n', '                : (amountOut, uint256(0));\n', '            address to = i < path.length - 2\n', '                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\n', '                : _to;\n', '            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n', '                amount0Out,\n', '                amount1Out,\n', '                to,\n', '                new bytes(0)\n', '            );\n', '        }\n', '    }\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '        require(amounts[amounts.length - 1] >= amountOutMin, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amounts[0]\n', '        );\n', '        _swap(amounts, path, to);\n', '    }\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n', '        require(amounts[0] <= amountInMax, "EXCESSIVE_INPUT_AMOUNT");\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amounts[0]\n', '        );\n', '        _swap(amounts, path, to);\n', '    }\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        require(path[0] == WETH, "INVALID_PATH");\n', '        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n', '        require(amounts[amounts.length - 1] >= amountOutMin, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(\n', '            IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0])\n', '        );\n', '        _swap(amounts, path, to);\n', '    }\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        require(path[path.length - 1] == WETH, "INVALID_PATH");\n', '        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n', '        require(amounts[0] <= amountInMax, "EXCESSIVE_INPUT_AMOUNT");\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this));\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        require(path[path.length - 1] == WETH, "INVALID_PATH");\n', '        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '        require(amounts[amounts.length - 1] >= amountOutMin, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amounts[0]\n', '        );\n', '        _swap(amounts, path, address(this));\n', '        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n', '        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n', '    }\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\n', '        fillOrders(args);\n', '        require(path[0] == WETH, "INVALID_PATH");\n', '        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n', '        require(amounts[0] <= msg.value, "EXCESSIVE_INPUT_AMOUNT");\n', '        IWETH(WETH).deposit{value: amounts[0]}();\n', '        assert(\n', '            IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0])\n', '        );\n', '        _swap(amounts, path, to);\n', '        // refund dust eth, if any\n', '        if (msg.value > amounts[0])\n', '            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n', '    }\n', '\n', '    // **** SWAP (supporting fee-on-transfer tokens) ****\n', '    // requires the initial amount to have already been sent to the first pair\n', '    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal {\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n', '            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));\n', '            uint256 amountInput;\n', '            uint256 amountOutput;\n', '            {\n', '                // scope to avoid stack too deep errors\n', '                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n', '                    ? (reserve0, reserve1)\n', '                    : (reserve1, reserve0);\n', '                amountInput = IERC20Uniswap(input).balanceOf(address(pair)).sub(reserveInput);\n', '                amountOutput = UniswapV2Library.getAmountOut(\n', '                    amountInput,\n', '                    reserveInput,\n', '                    reserveOutput\n', '                );\n', '            }\n', '            (uint256 amount0Out, uint256 amount1Out) = input == token0\n', '                ? (uint256(0), amountOutput)\n', '                : (amountOutput, uint256(0));\n', '            address to = i < path.length - 2\n', '                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\n', '                : _to;\n', '            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n', '        }\n', '    }\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) {\n', '        fillOrders(args);\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amountIn\n', '        );\n', '        uint256 balanceBefore = IERC20Uniswap(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20Uniswap(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', '            "INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '    }\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external payable ensure(deadline) {\n', '        fillOrders(args);\n', '        require(path[0] == WETH, "INVALID_PATH");\n', '        uint256 amountIn = msg.value;\n', '        IWETH(WETH).deposit{value: amountIn}();\n', '        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n', '        uint256 balanceBefore = IERC20Uniswap(path[path.length - 1]).balanceOf(to);\n', '        _swapSupportingFeeOnTransferTokens(path, to);\n', '        require(\n', '            IERC20Uniswap(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n', '            "INSUFFICIENT_OUTPUT_AMOUNT"\n', '        );\n', '    }\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        FillOrderArgs[] memory args\n', '    ) external ensure(deadline) {\n', '        fillOrders(args);\n', '        require(path[path.length - 1] == WETH, "INVALID_PATH");\n', '        TransferHelper.safeTransferFrom(\n', '            path[0],\n', '            msg.sender,\n', '            UniswapV2Library.pairFor(factory, path[0], path[1]),\n', '            amountIn\n', '        );\n', '        _swapSupportingFeeOnTransferTokens(path, address(this));\n', '        uint256 amountOut = IERC20Uniswap(WETH).balanceOf(address(this));\n', '        require(amountOut >= amountOutMin, "INSUFFICIENT_OUTPUT_AMOUNT");\n', '        IWETH(WETH).withdraw(amountOut);\n', '        TransferHelper.safeTransferETH(to, amountOut);\n', '    }\n', '\n', '    // **** LIBRARY FUNCTIONS ****\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) public pure returns (uint256 amountB) {\n', '        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n', '    }\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) public pure returns (uint256 amountOut) {\n', '        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n', '    }\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) public pure returns (uint256 amountIn) {\n', '        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n', '    }\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] memory path)\n', '        public\n', '        view\n', '        returns (uint256[] memory amounts)\n', '    {\n', '        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '    }\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] memory path)\n', '        public\n', '        view\n', '        returns (uint256[] memory amounts)\n', '    {\n', '        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n', '    }\n', '}\n', '\n', '// File: contracts/Settlement.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Settlement is Ownable, UniswapV2Router02Settlement {\n', '    using SafeMathUniswap for uint256;\n', '    using Orders for Orders.Order;\n', '\n', '    bool private _initialized;\n', '    uint256 public feeNumerator;\n', '    uint256 public feeDenominator;\n', '    mapping(bytes32 => Orders.OrderInfo) public orderInfoOfHash;\n', '\n', '    function initialize(\n', '        address owner,\n', '        address _factory,\n', '        // solhint-disable-next-line var-name-mixedcase\n', '        address _WETH,\n', '        uint256 _feeNumerator,\n', '        uint256 _feeDenominator\n', '    ) public {\n', '        require(!_initialized, "already-initialized");\n', '\n', '        Ownable._initialize(owner);\n', '        UniswapV2Router02Settlement._initialize(_factory, _WETH);\n', '\n', '        feeNumerator = _feeNumerator;\n', '        feeDenominator = _feeDenominator;\n', '\n', '        _initialized = true;\n', '    }\n', '\n', '    function updateFee(uint256 _feeNumerator, uint256 _feeDenominator) public onlyOwner {\n', '        feeNumerator = _feeNumerator;\n', '        feeDenominator = _feeDenominator;\n', '    }\n', '\n', '    function hash(\n', '        address maker,\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address recipient,\n', '        uint256 deadline\n', '    ) external view returns (bytes32) {\n', '        return Orders.hash(maker, fromToken, toToken, amountIn, amountOutMin, recipient, deadline);\n', '    }\n', '\n', '    function fillOrder(FillOrderArgs memory args) public override returns (uint256 amountOut) {\n', '        bytes32 hash = args.order.hash();\n', '        if (!_validateArgs(args, hash)) {\n', '            return 0;\n', '        }\n', '\n', '        Orders.OrderInfo storage info = orderInfoOfHash[hash];\n', '        if (_updateStatus(args, info) != Orders.Status.Fillable) {\n', '            return 0;\n', '        }\n', '\n', '        // Calculate fee deducted amountIn and amountOutMin\n', '        (uint256 amountIn, uint256 amountOutMin) = (\n', '            args.amountToFillIn,\n', '            args.order.amountOutMin.mul(args.amountToFillIn) / args.order.amountIn\n', '        );\n', '        (uint256 numerator, uint256 denominator) = (feeNumerator, feeDenominator);\n', '        if (numerator > 0 && denominator > 0) {\n', '            amountIn = amountIn.sub(amountIn.mul(numerator) / denominator);\n', '            amountOutMin = amountOutMin.sub(amountOutMin.mul(numerator) / denominator);\n', '        }\n', '\n', '        // requires args.amountToFillIn to have already been approved to this\n', '        amountOut = _swapExactTokensForTokens(\n', '            args.order.maker,\n', '            amountIn,\n', '            amountOutMin,\n', '            args.path,\n', '            args.order.recipient\n', '        );\n', '\n', '        if (amountOut > 0) {\n', '            // Transfer fee if any\n', '            if (args.amountToFillIn > amountIn) {\n', '                uint256 fee = args.amountToFillIn - amountIn;\n', '                TransferHelper.safeTransferFrom(\n', '                    args.order.fromToken,\n', '                    args.order.maker,\n', '                    msg.sender,\n', '                    fee\n', '                );\n', '\n', '                emit OrderFeeTransferred(hash, msg.sender, fee);\n', '            }\n', '\n', '            // Update order status\n', '            info.filledAmountIn = info.filledAmountIn + args.amountToFillIn;\n', '            if (info.filledAmountIn == args.order.amountIn) {\n', '                info.status = Orders.Status.Filled;\n', '            }\n', '\n', '            emit OrderFilled(hash, args.amountToFillIn, amountOut);\n', '        }\n', '    }\n', '\n', '    function _validateArgs(FillOrderArgs memory args, bytes32 hash) internal pure returns (bool) {\n', '        return\n', '            args.order.maker != address(0) &&\n', '            args.order.fromToken != address(0) &&\n', '            args.order.toToken != address(0) &&\n', '            args.order.fromToken != args.order.toToken &&\n', '            args.order.amountIn != uint256(0) &&\n', '            args.order.amountOutMin != uint256(0) &&\n', '            args.order.deadline != uint256(0) &&\n', '            args.amountToFillIn > 0 &&\n', '            args.path.length >= 2 &&\n', '            args.order.fromToken == args.path[0] &&\n', '            args.order.toToken == args.path[args.path.length - 1] &&\n', '            Verifier.verify(args.order.maker, hash, args.order.v, args.order.r, args.order.s);\n', '    }\n', '\n', '    function _updateStatus(FillOrderArgs memory args, Orders.OrderInfo storage info)\n', '        internal\n', '        returns (Orders.Status)\n', '    {\n', '        if (info.status == Orders.Status.Invalid) {\n', '            info.status = Orders.Status.Fillable;\n', '        }\n', '        Orders.Status status = info.status;\n', '        if (status == Orders.Status.Fillable) {\n', '            if (args.order.deadline < block.timestamp) {\n', '                info.status = Orders.Status.Expired;\n', '                return Orders.Status.Expired;\n', '            } else if (info.filledAmountIn.add(args.amountToFillIn) > args.order.amountIn) {\n', '                return Orders.Status.Invalid;\n', '            } else {\n', '                return Orders.Status.Fillable;\n', '            }\n', '        }\n', '        return status;\n', '    }\n', '\n', '    function _swapExactTokensForTokens(\n', '        address from,\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] memory path,\n', '        address to\n', '    ) internal returns (uint256 amountOut) {\n', '        uint256[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n', '        if (amounts[amounts.length - 1] < amountOutMin) {\n', '            return 0;\n', '        }\n', '        address pair = UniswapV2Library.pairFor(factory, path[0], path[1]);\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, ) = path[0].call(abi.encodeWithSelector(0x23b872dd, from, pair, amountIn));\n', '        if (!success) {\n', '            return 0;\n', '        }\n', '        _swap(amounts, path, to);\n', '        amountOut = amounts[amounts.length - 1];\n', '    }\n', '\n', '    function fillOrders(FillOrderArgs[] memory args)\n', '        public\n', '        override\n', '        returns (uint256[] memory amountsOut)\n', '    {\n', '        amountsOut = new uint256[](args.length);\n', '        for (uint256 i = 0; i < args.length; i++) {\n', '            amountsOut[i] = fillOrder(args[i]);\n', '        }\n', '    }\n', '}']