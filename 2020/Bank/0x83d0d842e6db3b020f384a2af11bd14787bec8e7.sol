['pragma solidity 0.5.16;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) \n', '            return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "invalid address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n', '    function burn(address from, uint256 amount) external;\n', '}\n', '\n', 'contract ERC20NonStandard {\n', '    function transfer(address to, uint256 value) public;\n', '}\n', '\n', 'contract Burner {\n', '    using SafeMath for uint256;\n', '\n', '    address constant etherAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    ERC20 constant hakka = ERC20(0x0E29e5AbbB5FD88e28b2d355774e73BD47dE3bcd);\n', '\n', '    GuildBank constant bank = GuildBank(0x83D0D842e6DB3B020f384a2af11bD14787BEC8E7);\n', '\n', '    bool private lock;\n', '\n', '    function ragequit(address[] calldata tokens, uint256 share) external returns (uint256[] memory amounts) {\n', '        require(!lock);\n', '        lock = true;\n', '\n', '        uint256 totalShare = hakka.totalSupply();\n', '\n', '        hakka.burn(msg.sender, share);\n', '\n', '        amounts = new uint256[](tokens.length);\n', '\n', '        for(uint256 i = 0; i < tokens.length; i++) {\n', '            if(i > 0) require(uint256(tokens[i-1]) < uint256(tokens[i]), "bad order");\n', '\n', '            uint256 tokenInBank;\n', '\n', '            if(tokens[i] == etherAddr) {\n', '                address payable _bank = address(bank);\n', '                tokenInBank = _bank.balance;\n', '            }\n', '            else {\n', '                tokenInBank = ERC20(tokens[i]).balanceOf(address(bank));\n', '            }\n', '\n', '            uint256 amount = share.mul(tokenInBank).div(totalShare);\n', '            amounts[i] = amount;\n', '            require(bank.withdraw(tokens[i], msg.sender, amount), "fail to withdraw");\n', '        }\n', '        lock = false;\n', '    }\n', '}\n', '\n', 'contract GuildBank is Ownable {\n', '\n', '    address constant etherAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    address constant burner = 0xde02313f8BF17f31380c63e41CDECeE98Bc2b16d;\n', '\n', '    event Withdrawal(address indexed token, address indexed receiver, uint256 amount);\n', '\n', '    constructor() public {\n', '        new Burner();\n', '    }\n', '\n', '    function withdraw(address token, address receiver, uint256 amount) external returns (bool result) {\n', '        require(msg.sender == owner || msg.sender == burner, "permission denied");\n', '\n', '        if(token == etherAddr) {\n', '            (result,) = receiver.call.value(amount)("");\n', '        }\n', '        else {\n', '            result = doTransferOut(token, receiver, amount);\n', '        }\n', '\n', '        if(result) emit Withdrawal(token, receiver, amount);\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    function doTransferOut(address tokenAddr, address to, uint amount) internal returns (bool result) {\n', '        ERC20NonStandard token = ERC20NonStandard(tokenAddr);\n', '        token.transfer(to, amount);\n', '\n', '        assembly {\n', '            switch returndatasize()\n', '                case 0 {                      // This is a non-standard ERC-20\n', '                    result := not(0)          // set result to true\n', '                }\n', '                case 32 {                     // This is a complaint ERC-20\n', '                    returndatacopy(0, 0, 32)\n', '                    result := mload(0)        // Set `result = returndata` of external call\n', '                }\n', '                default {                     // This is an excessively non-compliant ERC-20, revert.\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '    }\n', '}']