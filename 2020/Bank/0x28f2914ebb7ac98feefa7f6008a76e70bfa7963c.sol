['pragma solidity >=0.4.26;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IKyberNetworkProxy {\n', '    function maxGasPrice() external view returns(uint);\n', '    function getUserCapInWei(address user) external view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n', '    function enabled() external view returns(bool);\n', '    function info(bytes32 id) external view returns(uint);\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\n', '    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes  hint) external payable returns(uint);\n', '    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\n', '    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\n', '}\n', '\n', 'contract IUniswapExchange {\n', '    // Address of ERC20 token sold on this exchange\n', '    function tokenAddress() external view returns (address token);\n', '    // Address of Uniswap Factory\n', '    function factoryAddress() external view returns (address factory);\n', '    // Provide Liquidity\n', '    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n', '    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n', '    // Get Prices\n', '    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n', '    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n', '    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n', '    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n', '    // Trade ETH to ERC20\n', '    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n', '    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n', '    // Trade ERC20 to ETH\n', '    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n', '    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n', '    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n', '    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to ERC20\n', '    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n', '    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to Custom Pool\n', '    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n', '    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n', '    // ERC20 comaptibility for liquidity tokens\n', '    bytes32 public name;\n', '    bytes32 public symbol;\n', '    uint256 public decimals;\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    // Never use\n', '    function setup(address token_addr) external;\n', '}\n', 'interface IWETH {\n', '  function deposit() external payable;\n', '  function withdraw(uint wad) external;\n', '  function totalSupply() external view returns (uint);\n', '  function approve(address guy, uint wad) external returns (bool);\n', '  function transfer(address dst, uint wad) external returns (bool);\n', '  function transferFrom(address src, address dst, uint wad) external returns (bool);\n', '  function () external payable;\n', '}\n', '\n', 'interface IUniswapFactory {\n', '    function createExchange(address token) external returns (address exchange);\n', '    function getExchange(address token) external view returns (address exchange);\n', '    function getToken(address exchange) external view returns (address token);\n', '    function getTokenWithId(uint256 tokenId) external view returns (address token);\n', '    function initializeFactory(address template) external;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract IERC20Token {\n', '    function name() public view returns (string memory) {this;}\n', '    function symbol() public view returns (string memory) {this;}\n', '    function decimals() public view returns (uint8) {this;}\n', '    function totalSupply() public view returns (uint256) {this;}\n', '    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'interface OrFeedInterface {\n', '  function getExchangeRate ( string fromSymbol, string toSymbol, string  venue, uint256 amount ) external view returns ( uint256 );\n', '  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\n', '  function getTokenAddress ( string  symbol ) external view returns ( address );\n', '  function getSynthBytes32 ( string  symbol ) external view returns ( bytes32 );\n', '  function getForexAddress ( string  symbol ) external view returns ( address );\n', '}\n', '\n', '\n', 'interface IContractRegistry {\n', '    function addressOf(bytes32 _contractName) external view returns (address);\n', '}\n', '\n', 'interface IBancorNetwork {\n', '    function getReturnByPath(address[]  _path, uint256 _amount) external view returns (uint256, uint256);\n', '    function convert2(address[] _path, uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _affiliateAccount,\n', '        uint256 _affiliateFee\n', '    ) public payable returns (uint256);\n', '\n', '    function claimAndConvert2(\n', '        address[] _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _affiliateAccount,\n', '        uint256 _affiliateFee\n', '    ) public returns (uint256);\n', '}\n', 'interface IBancorNetworkPathFinder {\n', '    function generatePath(address _sourceToken, address _targetToken) external view returns (address[]);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal view returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal view returns(uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal view returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal view returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BancorPrices{\n', 'OrFeedInterface orfeed = OrFeedInterface(0x8316b082621cfedab95bf4a44a1d4b64a6ffc336);\n', '   address owner;\n', '   bytes  PERM_HINT = "PERM";\n', '   mapping (uint256=>uint256) results;\n', '    mapping(uint256=>uint8[3]) public orders;\n', '    \n', '    \n', '    \n', '    address uniswapFactoryAddress = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n', '    IUniswapFactory uniswapFactory = IUniswapFactory(uniswapFactoryAddress);\n', '    \n', '      modifier onlyOwner() {\n', '            if (msg.sender != owner) {\n', '                throw;\n', '            }\n', '             _;\n', '        }\n', '         address kyberProxyAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n', '     IKyberNetworkProxy kyberProxy = IKyberNetworkProxy(kyberProxyAddress);\n', '      constructor() public payable {\n', '            owner = msg.sender; \n', '            orders[0] = [3,3,3];\n', '        orders[1] = [1,1,1];\n', '        orders[2] = [2,2,2];\n', '        orders[3] = [1,2,1];\n', '        orders[4] = [1,3,1];\n', '        orders[5] = [2,1,2];\n', '        orders[6] = [1,2,3];\n', '        orders[7] = [1,2,2];\n', '        orders[8] = [1,3,2];\n', '        orders[9] = [2,2,1];\n', '        orders[10] = [1,1,2];\n', '        orders[11] = [1,3,3];\n', '        orders[12] = [2,1,1];\n', '        orders[13] = [2,1,3];\n', '        orders[14] = [3,2,1];\n', '        \n', '        \n', '        \n', '            \n', '          \n', '        }\n', '        \n', '   function kill() onlyOwner{\n', '       selfdestruct(owner);\n', '   }\n', '    \n', '    function() payable{\n', '        \n', '    }\n', '    \n', '    function getTokensBack(address tokenAddress){\n', '        ERC20 token = ERC20(tokenAddress);\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '    \n', '    \n', '    function getBestExchangeOrder(string[] stringSymbs, uint256 amount) constant returns (uint256){\n', '        uint256[][15] orders;\n', '        orders[0] = [1,1,1];\n', '        orders[1] = [1,1,2];\n', '        orders[2] = [1,1,3];\n', '        orders[3] = [1,2,2];\n', '        orders[4] = [2,2,2];\n', '        orders[5] = [3,3,3];\n', '        orders[6] = [1,3,2];\n', '        orders[7] = [1,3,1];\n', '        orders[8] = [2,3,1];\n', '        orders[9] = [2,2,1];\n', '        orders[10] = [2,2,3];\n', '        orders[11] = [1,2,3];\n', '        orders[12] = [2,1,2];\n', '        orders[13] = [1,2,1];\n', '        orders[14] = [3,2,1];\n', '        /*\n', '        uint256 bestRate =0;\n', '        uint256 whichOrder = 100;\n', '        \n', '       // uint[] memory greatestOrder = new uint[](3);\n', '       // uint256[3] memory greatestOrder;\n', '        uint256[3] memory greatestOrder= [uint(1), uint(1), uint(1)];\n', '       // greatestOrder = [1,1,1];\n', '       // greatestOrder =[1,1,1];\n', '        for(uint i=0; i<15;i++){\n', '           \n', '            uint256 result = arbCalc(orders[i], stringSymbs, amount);\n', '            if(result >= bestRate){ \n', '                bestRate = result;\n', '                whichOrder = i;\n', '            }\n', '        }\n', '        \n', '        return whichOrder;\n', '        */\n', '    }\n', '    \n', '    \n', '    \n', '    function getBestExchangeOrder2(string[] stringSymbs, uint256 amount) constant returns (uint256){\n', '        uint256[][15] orders;\n', '        orders[0] = [1,1,1];\n', '        orders[1] = [1,1,2];\n', '        orders[2] = [1,1,3];\n', '        orders[3] = [1,2,2];\n', '        orders[4] = [2,2,2];\n', '        orders[5] = [3,3,3];\n', '        orders[6] = [1,3,2];\n', '        orders[7] = [1,3,1];\n', '        orders[8] = [2,3,1];\n', '        orders[9] = [2,2,1];\n', '        orders[10] = [2,2,3];\n', '        orders[11] = [1,2,3];\n', '        orders[12] = [2,1,2];\n', '        orders[13] = [1,2,1];\n', '        orders[14] = [3,2,1];\n', '        \n', '        uint256 bestRate =0;\n', '        uint256 whichOrder = 100;\n', '        \n', '       // uint[] memory greatestOrder = new uint[](3);\n', '       // uint256[3] memory greatestOrder;\n', '        uint256[3] memory greatestOrder= [uint(1), uint(1), uint(1)];\n', '       // greatestOrder = [1,1,1];\n', '       // greatestOrder =[1,1,1];\n', '       /*\n', '        for(uint i=0; i<15;i++){\n', '           \n', '            uint256 result = arbCalc(orders[i], stringSymbs, amount);\n', '            if(result >= bestRate){ \n', '                bestRate = result;\n', '                whichOrder = i;\n', '            }\n', '        }\n', '        \n', '        return whichOrder;\n', '        */\n', '    }\n', '    \n', '    \n', '    \n', '    /*\n', '    function getBestExchangeOrderProxy1(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\n', '        // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] = arbCalc([3,3,3], stringSymbs, amount);\n', '       results[1] = arbCalc([3,2,2], stringSymbs, amount);\n', '        results[2] = arbCalc([2,2,2], stringSymbs, amount);\n', '        \n', '     \n', '        \n', '      \n', '        for(uint i = 0; i<3;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '        return (whichOne, highestOne);\n', '    }\n', '\n', '\n', '    function getBestExchangeOrderProxy2(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\n', '        // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] = arbCalc([1,2,1], stringSymbs, amount);\n', '       results[1] =  arbCalc([1,3,1], stringSymbs, amount);\n', '        results[2] = arbCalc([2,1,2], stringSymbs, amount);\n', '        \n', '     \n', '      \n', '        for(uint i = 0; i<3;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '        return (whichOne, highestOne);\n', '    }\n', '\n', '\n', '    function getBestExchangeOrderProxy3(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\n', '        // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] = arbCalc([1,2,3], stringSymbs, amount);\n', '       results[1] =  arbCalc([1,2,2], stringSymbs, amount);\n', '        results[2] = arbCalc([1,3,2], stringSymbs, amount);\n', '        \n', '      // results[3] = \n', '        \n', '        \n', '        \n', '       \n', '       // results[4] =\n', '       // results[5] = \n', '        \n', '    \n', '        \n', '      \n', '        for(uint i = 0; i<3;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '       return (whichOne, highestOne);\n', '    }\n', '\n', '\n', '      function getBestExchangeOrderProxy4(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\n', '        // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] = arbCalc([2,2,1], stringSymbs, amount);\n', '       results[1] =  arbCalc([1,1,2], stringSymbs, amount);\n', '        results[2] = arbCalc([1,3,3], stringSymbs, amount);\n', '        \n', '    \n', '        \n', '      \n', '        for(uint i = 0; i<3;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '       return (whichOne, highestOne);\n', '    }\n', '\n', '     function getBestExchangeOrderProxy5(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\n', '        // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] =arbCalc([2,1,1], stringSymbs, amount);\n', '       results[1] =  arbCalc([2,1,3], stringSymbs, amount);\n', '        results[2] = arbCalc([3,2,1], stringSymbs, amount);\n', '        \n', '     \n', '      \n', '        for(uint i = 0; i<3;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '        return (whichOne, highestOne);\n', '    }\n', '\n', '\n', '\n', '\n', '    \n', '     function getBestExchangeOrderProxyAS(string[] stringSymbs, uint256 amount) returns (uint){\n', '        //uint256[3] memory order;\n', '      \n', '       // order= [uint(1),uint(1),uint(1)];\n', '         uint whichOne =100;\n', '       \n', '       uint highestOne = 0;\n', '        \n', '        \n', '               results[0] = arbCalc([3,3,3], stringSymbs, amount);\n', '       results[1] = arbCalc([3,2,2], stringSymbs, amount);\n', '        results[2] = arbCalc([2,2,2], stringSymbs, amount);\n', '        \n', '       results[3] = arbCalc([1,2,1], stringSymbs, amount);\n', '        \n', '        \n', '        \n', '       \n', '        results[4] = arbCalc([1,3,1], stringSymbs, amount);\n', '        results[5] = arbCalc([2,1,2], stringSymbs, amount);\n', '        \n', '        \n', '        results[6] = arbCalc([1,2,3], stringSymbs, amount);\n', '        results[7] = arbCalc([1,2,2], stringSymbs, amount);\n', '        results[8] = arbCalc([1,3,2], stringSymbs, amount);\n', '        \n', '        results[9] = arbCalc([2,2,1], stringSymbs, amount);\n', '        results[10] = arbCalc([1,1,2], stringSymbs, amount);\n', '        results[11] = arbCalc([1,3,3], stringSymbs, amount);\n', '        \n', '        \n', '        \n', '        results[12] = arbCalc([2,1,1], stringSymbs, amount);\n', '        results[13] = arbCalc([2,1,3], stringSymbs, amount);\n', '        results[14] = arbCalc([3,2,1], stringSymbs, amount);\n', '        \n', '        \n', '      \n', '        for(uint i = 0; i<14;i++){\n', '            if(i==0){\n', '                whichOne = 0; // change to zero later\n', '                highestOne = results[i];\n', '            }\n', '           \n', '            \n', '            if(results[i] >= highestOne){\n', '                whichOne = i;\n', '                highestOne = results[i];\n', '            }\n', '            \n', '        }\n', '        return whichOne;\n', '      \n', '    }\n', '    \n', '    \n', '    \n', '    */\n', '    \n', '    function getPriceFromOracle(string fromParam, string toParam, string venue, uint256 amount) public constant returns (uint256){\n', '\n', '        address tokenFirst = orfeed.getTokenAddress(fromParam);\n', '        address tokenSecond = orfeed.getTokenAddress(toParam);\n', '        \n', '        uint256 answer = bancorPrice(tokenSecond, tokenFirst, amount);\n', '        return answer;\n', '      \n', '    }\n', '    function bancorPrice(address token1, address token2, uint256 amount) constant returns (uint256){\n', '        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\n', '        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\n', '        \n', '        //\n', '  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\n', '    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\n', '   //\n', '       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\n', '         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\n', '       // address token1ToBancor = token1;\n', '        //address token2ToBancor = token2;\n', '        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\n', '        \n', '        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            // the EtherToken addresss for BancorNetwork\n', '            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        \n', '        address[] memory addressPath;\n', '      \n', '        \n', '            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\n', '/*\n', '        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\n', '        \n', '        for(uint256 i = 0; i < addressPath.length; i++) {\n', '            tokenPath[i] = IERC20Token(addressPath[i]);\n', '        }\n', '       */\n', '       (uint256 price, ) = bancorNetwork.getReturnByPath(addressPath, amount);\n', '       return price;\n', '    }\n', '   \n', '      function bancorConvert(address token1, address token2, uint256 amount)  returns (uint256){\n', '        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\n', '        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\n', '        \n', '        //\n', '  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\n', '    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\n', '   //\n', '       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\n', '         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\n', '       // address token1ToBancor = token1;\n', '        //address token2ToBancor = token2;\n', '        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\n', '        \n', '        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            // the EtherToken addresss for BancorNetwork\n', '            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        \n', '        address[] memory addressPath;\n', '      \n', '        \n', '            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\n', '/*\n', '        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\n', '        \n', '        for(uint256 i = 0; i < addressPath.length; i++) {\n', '            tokenPath[i] = IERC20Token(addressPath[i]);\n', '        }\n', '       */\n', '       \n', '       uint256 price = bancorNetwork.convert2.value(amount)(addressPath, amount,1 ,0x0,0);\n', '       return price;\n', '    }\n', '    \n', '    \n', '    function arbIt(uint[] eOrder, address[] tOrder, uint256 amount ) onlyOwner{\n', '        uint256 final1 = eOrder.length -1;\n', '        uint lastSell = amount;\n', '        for(uint i =0; i<eOrder.length; i++){\n', '            uint256 next = i+1;\n', '            if(i < final1){\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[next]);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                   lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[next]);\n', '               }\n', '               else{\n', '                 lastSell = bancorConvert2(tOrder[next], tOrder[i], lastSell);\n', '               }\n', '            }\n', '            else{\n', '                 //sell\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                  lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else{\n', '                 lastSell = bancorConvert2(tOrder[0], tOrder[i], lastSell);\n', '               }\n', '               \n', '            }\n', '        }\n', '    }\n', '    function arbIt2(uint[] eOrder, string[] memory tOrder1, uint256 amount, bool back) onlyOwner{\n', '        uint256 final1 = eOrder.length -1;\n', '        uint lastSell = amount;\n', '        address [] tOrder;\n', '       \n', '        \n', '        for(uint j=0; j<tOrder1.length; j++){\n', '            tOrder[j] =orfeed.getTokenAddress(tOrder1[j]);\n', '        }\n', '        for(uint i =0; i<eOrder.length; i++){\n', '            uint256 next = i+1;\n', '            if(i < final1){\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[next]);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                   lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[next]);\n', '               }\n', '               else{\n', '                 lastSell = bancorConvert2(tOrder[next], tOrder[i], lastSell);\n', '               }\n', '            }\n', '            else{\n', '                 //sell\n', '                 \n', '                 if(back == true){\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                  lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else{\n', '                 lastSell = bancorConvert2(tOrder[0], tOrder[i], lastSell);\n', '               }\n', '            }\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    function arbCalc(uint8[3] eOrder, string[] tOrder, uint256 amount, bool back ) constant returns (uint256){\n', '        uint256 final1 = eOrder.length -1;\n', '        uint lastSell = amount;\n', '        for(uint i =0; i<eOrder.length; i++){\n', '            uint256 next = i+1;\n', '            if(i < final1){\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                   lastSell = getKyberCalc(tOrder[i], tOrder[next], lastSell);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                   \n', '                   \n', '                    lastSell = getUniswapCalc(tOrder[i], tOrder[next], lastSell);\n', '                    //lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[next], "BUY-UNISWAP-EXCHANGE", lastSell);\n', '               }\n', '               else{\n', '                    lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[next], "BANCOR", lastSell);\n', '               }\n', '            }\n', '            else{\n', '                 //sell\n', '                if(back ==true){\n', '               if(eOrder[i] ==1){\n', '                   //kyber buy\n', '                    lastSell = getKyberCalc(tOrder[i], tOrder[0], lastSell);\n', '                   //lastSell = swapTokenOnKyberCalc(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else if(eOrder[i] ==2){\n', '                       lastSell = getUniswapCalc(tOrder[i], tOrder[0], lastSell);\n', '                 // lastSell = swapTokenOnUniswapCalc(tOrder[i], lastSell, tOrder[0]);\n', '               }\n', '               else{\n', '                   lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[0], "BANCOR", lastSell);\n', '                 //lastSell = bancorConvert2Calc(tOrder[0], tOrder[i], lastSell);\n', '               }\n', '            }\n', '            }\n', '        }\n', '        \n', '        return lastSell;\n', '    }\n', '    \n', '    \n', '     function getKyberCalc(string string1, string string2, uint256 amount) constant returns (uint256){\n', '        \n', '        address sellToken = orfeed.getTokenAddress(string1);\n', '        address buyToken = orfeed.getTokenAddress(string2);\n', '        \n', '        ERC20 sellToken1 = ERC20(sellToken);\n', '        ERC20 buyToken1 = ERC20(buyToken);\n', '        \n', '        uint sellDecim = sellToken1.decimals();\n', '         uint buyDecim = buyToken1.decimals();\n', '        \n', '       // uint base = 1^sellDecim;\n', '       // uint adding;\n', '         (uint256 price, ) = kyberProxy.getExpectedRate(sellToken1, buyToken1, amount);\n', '          \n', '           \n', '            uint initResp = (((price*1000000) / (10**18))*(amount))/1000000;\n', '      uint256 diff;\n', '      if(sellDecim>buyDecim){\n', '         diff = sellDecim - buyDecim;\n', '          initResp = initResp / (10**diff);\n', '          return initResp;\n', '      }\n', '      \n', '      else if(sellDecim <buyDecim){\n', '           diff = buyDecim - sellDecim;\n', '          initResp = initResp * (10**diff);\n', '          return initResp;\n', '      }\n', '      else{\n', '          return initResp;\n', '      }\n', '        \n', '        \n', '     }\n', '    \n', '    function getUniswapCalc(string string1, string string2, uint256 amount) constant returns (uint256){\n', '        \n', '        address sellToken = orfeed.getTokenAddress(string1);\n', '        address buyToken = orfeed.getTokenAddress(string2);\n', '        \n', '        address exchangeAddressSell = uniswapFactory.getExchange(address(sellToken));\n', '        address exchangeAddressBuy = uniswapFactory.getExchange(address(buyToken));\n', '        \n', '        IUniswapExchange usi1 = IUniswapExchange(exchangeAddressSell);\n', '        IUniswapExchange usi2 = IUniswapExchange(exchangeAddressBuy);\n', '        \n', '        uint256 ethBack = usi1.getTokenToEthInputPrice(amount);\n', '        uint256 resultingTokens = usi2.getEthToTokenInputPrice(ethBack);\n', '        \n', '        return resultingTokens;\n', '    }\n', '   \n', '         function bancorConvert2(address token1, address token2, uint256 amount)  returns (uint256){\n', '        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\n', '        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\n', '        \n', '        //\n', '  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\n', '    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\n', '   //\n', '       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\n', '         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\n', '       // address token1ToBancor = token1;\n', '        //address token2ToBancor = token2;\n', '        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\n', '        \n', '        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            // the EtherToken addresss for BancorNetwork\n', '            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\n', '            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\n', '        }\n', '        \n', '        address[] memory addressPath;\n', '      \n', '        \n', '            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\n', '/*\n', '        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\n', '        \n', '        for(uint256 i = 0; i < addressPath.length; i++) {\n', '            tokenPath[i] = IERC20Token(addressPath[i]);\n', '        }\n', '       */\n', '       ERC20 token = ERC20(token1);\n', '       ERC20 tokenT = ERC20(token2);\n', '       \n', '       uint startAmount =token.balanceOf(this);\n', '       token.approve(0x3Ab6564d5c214bc416EE8421E05219960504eeAD, 8000000000000000000000000000000);\n', '       tokenT.approve(0x3Ab6564d5c214bc416EE8421E05219960504eeAD, 8000000000000000000000000000000);\n', '       //"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2", "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359",  10000000000\n', '       uint256 price = bancorNetwork.claimAndConvert2(addressPath, amount,1 ,0x0,0);\n', '        return token.balanceOf(this) - startAmount;\n', '    }\n', '    \n', '     function swapTokenOnKyber(address sellToken1, uint sellTokenAmount, address  buyToken1)  returns (uint) {\n', '    // Approve tokens so network can take them during the swap\n', '    \n', '     ERC20 sellToken = ERC20(sellToken1);\n', '    ERC20 buyToken = ERC20(buyToken1);\n', '    uint startAmount =buyToken.balanceOf(this);\n', '      //uint256 minRate = 0;\n', '      //(, minRate) = kyberProxy.getExpectedRate(buyToken, sellToken, sellTokenAmount);\n', '      sellToken.approve(address(kyberProxy), sellTokenAmount);\n', '\n', '      uint buyTokenAmount = kyberProxy.tradeWithHint(sellToken, sellTokenAmount, buyToken, address(this), 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\n', '      return buyToken.balanceOf(this) - startAmount;\n', '  }\n', '  \n', '   \n', '   function swapTokenOnUniswap(address sellToken1, uint sellTokenAmount, address buyToken1)  returns (uint) {\n', '    ERC20 sellToken = ERC20(sellToken1);\n', '    ERC20 buyToken = ERC20(buyToken1);\n', '   uint startAmount =buyToken.balanceOf(this);\n', '    uint256 minTokensBought = 1;\n', '    uint256 minEtherBought = 1;\n', '    address exchangeAddress = uniswapFactory.getExchange(address(sellToken));\n', '    IUniswapExchange exchange = IUniswapExchange(exchangeAddress);\n', '    sellToken.approve(address(exchange), sellTokenAmount);\n', '    uint256 buyTokenAmount = exchange.tokenToTokenSwapInput(sellTokenAmount, minTokensBought, minEtherBought, block.timestamp, address(buyToken));\n', '    return buyToken.balanceOf(this) - startAmount;\n', '  }\n', '    \n', ' \n', '    \n', '\n', '    \n', '}']