['pragma solidity <=0.6.8;\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\n', '    function mint(uint number) external;\n', '}\n', '\n', 'contract ChiGasSaver {\n', '\n', '    modifier saveGas(address payable sponsor) {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '\n', '        IFreeFromUpTo chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '        chi.freeFromUpTo(sponsor, (gasSpent + 14154) / 41947);\n', '    }\n', '}\n', '\n', 'interface IDrainController {\n', '    function updatePrice() external;\n', '}\n', '\n', 'contract DrainMaster is ChiGasSaver {\n', '    \n', '    IDrainController constant drainController = IDrainController(0x2e813f2e524dB699d279E631B0F2117856eb902C);\n', '\n', '    function drain(uint8[] calldata _pools)\n', '    external\n', '    saveGas(msg.sender) {\n', '        drainController.updatePrice();\n', '        for (uint8 i = 0; i < _pools.length; i++) {\n', '            0xD12d68Fd52b54908547ebC2Cd77Ec6EbbEfd3099.call(\n', '            abi.encodeWithSelector(\n', '                bytes4(\n', '                    keccak256("drain(uint256)")), _pools[i]));\n', '        }\n', '    }\n', '}']