['// Copyright (C) 2020 Easy Chain. <https://easychain.tech>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity 0.6.5;\n', '\n', '\n', '\n', 'interface ERC20 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', '\n', '\n', '\n', 'abstract contract Ownable {\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "O: onlyOwner function!");\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @notice Initializes owner variable with msg.sender address.\n', '     */\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers ownership to the desired address.\n', '     * The function is callable only by the owner.\n', '     */\n', '    function transferOwnership(address _owner) external onlyOwner {\n', '        require(_owner != address(0), "O: new owner is the zero address!");\n', '        emit OwnershipTransferred(owner, _owner);\n', '        owner = _owner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev BerezkaPriceOverride contract.\n', ' * This contract allows to override token prices from 1inch exchange to correctly\n', ' * adjust prices of composite tokens not yet supported by Zerion\n', ' * @author Vasin Denis <denis.vasin@easychain.tech>\n', ' */\n', 'contract BerezkaPriceOverride is Ownable() {\n', '\n', '    mapping(address => uint256) public prices;\n', '\n', '    mapping(address => address) public tokens;\n', '\n', '    /**\n', '     * Sets price (in USDC, i.e. decimals = 6) for a given token. 0 indicates no price override.\n', '     * Sets price for a (decimals) amount single token of _token in USDC\n', '     */\n', '    function setPrice(\n', '        address _token,\n', '        uint256 _price\n', '    ) \n', '        public\n', '        onlyOwner()\n', '    {\n', '        require(_token != address(0));\n', '\n', '        prices[_token] = _price;\n', '    }\n', '\n', '    /**\n', '     * Sets Token override\n', '     */\n', '    function setToken(\n', '        address _from,\n', '        address _to\n', '    ) \n', '        public\n', '        onlyOwner()\n', '    {\n', '        require(_to != address(0), "Should not be empty token");\n', '        tokens[_from] = _to;\n', '    }\n', '\n', '    function removeToken(\n', '        address _from\n', '    ) \n', '        public\n', '        onlyOwner()\n', '    {\n', '        delete tokens[_from];\n', '    }\n', '\n', '    function computePrice(\n', '        address _token,\n', '        uint256 _amount\n', '    ) \n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '       uint256 decimals = ERC20(_token).decimals();\n', '       uint256 price = prices[_token];\n', '       return _amount * price / 10 ** decimals;\n', '    }\n', '\n', '    function hasOverride(\n', '        address _token\n', '    ) \n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '       return prices[_token] != 0;\n', '    }\n', '\n', '    function replaceToken(\n', '        address _token,\n', '        int256 _amount\n', '    )\n', '        public\n', '        view\n', '        returns (address, int256) \n', '    {\n', '        address targetAddress = tokens[_token];\n', '        uint256 sourceDecimals = ERC20(_token).decimals();\n', '        uint256 targetDecimals = ERC20(targetAddress).decimals();\n', '\n', '        int256 adjustedAmount = _amount;\n', '        if (sourceDecimals > targetDecimals) {\n', '            adjustedAmount = _amount / int256((10 ** (sourceDecimals - targetDecimals)));\n', '        } else {\n', '            adjustedAmount = _amount * int256((10 ** (targetDecimals - sourceDecimals)));\n', '        }\n', '        return (targetAddress, adjustedAmount);\n', '    }\n', '\n', '    function hasTokenOverride(\n', '        address _token\n', '    ) \n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '       return tokens[_token] != address(0);\n', '    }\n', '}']