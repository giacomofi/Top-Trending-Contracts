['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n', '// Subject to the MIT license.\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "TimeLoans::SafeMath: subtraction underflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapOracleRouter {\n', '    function quote(address tokenIn, address tokenOut, uint amountIn) external view returns (uint amountOut);\n', '}\n', '\n', 'contract TimeLoanPair {\n', '    using SafeMath for uint;\n', '    \n', '    /// @notice EIP-20 token name for this token\n', '    string public constant name = "Time Loan Pair LP";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public symbol;\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 18;\n', '    \n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0; // Initial 0\n', '    \n', '    mapping (address => mapping (address => uint)) internal allowances;\n', '    mapping (address => uint) internal balances;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint value,uint nonce,uint deadline)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /// @notice Uniswap V2 Router used for all swaps and liquidity management\n', '    IUniswapV2Router02 public constant UNI = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    \n', '    /// @notice Uniswap Oracle Router used for all 24 hour TWAP price metrics\n', '    IUniswapOracleRouter public constant ORACLE = IUniswapOracleRouter(0x0b5A6b318c39b60e7D8462F888e7fbA89f75D02F);\n', '    \n', '    /// @notice The underlying Uniswap Pair used for loan liquidity\n', '    address public pair;\n', '    \n', '    /// @notice The token0 of the Uniswap Pair\n', '    address public token0;\n', '    \n', '    /// @notice The token1 of the Uniswap Pair\n', '    address public token1;\n', '    \n', '   \n', '    /// @notice Deposited event for creditor/LP\n', '    event Deposited(address indexed creditor, address indexed collateral, uint shares, uint credit);\n', '    /// @notice Withdawn event for creditor/LP\n', '    event Withdrew(address indexed creditor, address indexed collateral, uint shares, uint credit);\n', '    \n', '    /// @notice The borrow event for any borrower\n', '    event Borrowed(uint id, address indexed borrower, address indexed collateral, address indexed borrowed, uint creditIn, uint amountOut, uint created, uint expire);\n', '    /// @notice The close loan event when processing expired loans\n', '    event Repaid(uint id, address indexed borrower, address indexed collateral, address indexed borrowed, uint creditIn, uint amountOut, uint created, uint expire);\n', '    /// @notice The close loan event when processing expired loans\n', '    event Closed(uint id, address indexed borrower, address indexed collateral, address indexed borrowed, uint creditIn, uint amountOut, uint created, uint expire);\n', '    \n', '    /// @notice 0.6% initiation fee for all loans\n', '    uint public constant FEE = 600; // 0.6% loan initiation fee\n', '    \n', '    /// @notice 105% liquidity buffer on withdrawing liquidity\n', '    uint public constant BUFFER = 105000; // 105% liquidity buffer\n', '    \n', '    /// @notice 80% loan to value ratio\n', '    uint public constant LTV = 80000; // 80% loan to value ratio\n', '    \n', '    /// @notice base for all % based calculations \n', '    uint public constant BASE = 100000;\n', '    \n', '    /// @notice the delay for a position to be closed\n', '    uint public constant DELAY = 6600; // ~24 hours till position is closed\n', '    \n', '    \n', '    struct position {\n', '        address owner;\n', '        address collateral;\n', '        address borrowed;\n', '        uint creditIn;\n', '        uint amountOut;\n', '        uint liquidityInUse;\n', '        uint created;\n', '        uint expire;\n', '        bool open;\n', '    }\n', '    \n', '    /// @notice array of all loan positions\n', '    position[] public positions;\n', '    \n', '    /// @notice the tip index of the positions array\n', '    uint public nextIndex;\n', '    \n', '    /// @notice the last index processed by the contract\n', '    uint public processedIndex;\n', '    \n', '    /// @notice mapping of loans assigned to users\n', '    mapping(address => uint[]) public loans;\n', '    \n', '    /// @notice constructor takes a uniswap pair as an argument to set its 2 borrowable assets\n', '    constructor(IUniswapV2Pair _pair) public {\n', '        symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));\n', '        pair = address(_pair);\n', '        token0 = _pair.token0();\n', '        token1 = _pair.token1();\n', '    }\n', '    \n', '    /// @notice total liquidity deposited\n', '    uint public liquidityDeposits;\n', '    /// @notice total liquidity withdrawn\n', '    uint public liquidityWithdrawals;\n', '    /// @notice total liquidity added via addLiquidity\n', '    uint public liquidityAdded;\n', '    /// @notice total liquidity removed via removeLiquidity\n', '    uint public liquidityRemoved;\n', '    /// @notice total liquidity currently in use by pending loans\n', '    uint public liquidityInUse;\n', '    /// @notice total liquidity freed up from closed loans\n', '    uint public liquidityFreed;\n', '    \n', '    /**\n', '     * @notice the current net liquidity positions\n', '     * @return the net liquidity sum\n', '     */\n', '    function liquidityBalance() public view returns (uint) {\n', '        return liquidityDeposits\n', '                .sub(liquidityWithdrawals)\n', '                .add(liquidityAdded)\n', '                .sub(liquidityRemoved)\n', '                .add(liquidityInUse)\n', '                .sub(liquidityFreed);\n', '    }\n', '    \n', '    function _mint(address dst, uint amount) internal {\n', '        // mint the amount\n', '        totalSupply = totalSupply.add(amount);\n', '\n', '        // transfer the amount to the recipient\n', '        balances[dst] = balances[dst].add(amount);\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '    \n', '    function _burn(address dst, uint amount) internal {\n', '        // burn the amount\n', '        totalSupply = totalSupply.sub(amount, "TimeLoans::_burn: underflow");\n', '\n', '        // transfer the amount to the recipient\n', '        balances[dst] = balances[dst].sub(amount, "TimeLoans::_burn: underflow");\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '    \n', '    /**\n', '     * @notice withdraw all liquidity from msg.sender shares\n', '     * @return success/failure\n', '     */\n', '    function withdrawAll() external returns (bool) {\n', '        return withdraw(balances[msg.sender]);\n', '    }\n', '    \n', '    /**\n', '     * @notice withdraw `_shares` amount of liquidity for user\n', '     * @param _shares the amount of shares to burn for liquidity\n', '     * @return success/failure\n', '     */\n', '    function withdraw(uint _shares) public returns (bool) {\n', '        uint r = liquidityBalance().mul(_shares).div(totalSupply);\n', '        _burn(msg.sender, _shares);\n', '        \n', '        require(IERC20(pair).balanceOf(address(this)) > r, "TimeLoans::withdraw: insufficient liquidity to withdraw, try depositLiquidity()");\n', '        \n', '        IERC20(pair).transfer(msg.sender, r);\n', '        liquidityWithdrawals = liquidityWithdrawals.add(r);\n', '        emit Withdrew(msg.sender, pair, _shares, r);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice deposit all liquidity from msg.sender\n', '     * @return success/failure\n', '     */\n', '    function depositAll() external returns (bool) {\n', '        return deposit(IERC20(pair).balanceOf(msg.sender));\n', '    }\n', '    \n', '    /**\n', '     * @notice deposit `amount` amount of liquidity for user\n', '     * @param amount the amount of liquidity to add for shares\n', '     * @return success/failure\n', '     */\n', '    function deposit(uint amount) public returns (bool) {\n', '        IERC20(pair).transferFrom(msg.sender, address(this), amount);\n', '        uint _shares = 0;\n', '        if (liquidityBalance() == 0) {\n', '            _shares = amount;\n', '        } else {\n', '            _shares = amount.mul(totalSupply).div(liquidityBalance());\n', '        }\n', '        _mint(msg.sender, _shares);\n', '        liquidityDeposits = liquidityDeposits.add(amount);\n', '        emit Deposited(msg.sender, pair, _shares, amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice batch close any pending open loans that have expired\n', '     * @param size the maximum size of batch to execute\n', '     * @return the last index processed\n', '     */\n', '    function closeInBatches(uint size) external returns (uint) {\n', '        uint i = processedIndex;\n', '        for (; i < size; i++) {\n', '            close(i);\n', '        }\n', '        processedIndex = i;\n', '        return processedIndex;\n', '    }\n', '    \n', '    /**\n', '     * @notice iterate through all open loans and close\n', '     * @return the last index processed\n', '     */\n', '    function closeAllOpen() external returns (uint) {\n', '        uint i = processedIndex;\n', '        for (; i < nextIndex; i++) {\n', '            close(i);\n', '        }\n', '        processedIndex = i;\n', '        return processedIndex;\n', '    }\n', '    \n', '    /**\n', '     * @notice close a specific loan based on id\n', '     * @param id the `id` of the given loan to close\n', '     * @return success/failure\n', '     */\n', '    function close(uint id) public returns (bool) {\n', '        position storage _pos = positions[id];\n', '        if (_pos.owner == address(0x0)) {\n', '            return false;\n', '        }\n', '        if (!_pos.open) {\n', '            return false;\n', '        }\n', '        if (_pos.expire < block.number) {\n', '            return false;\n', '        }\n', '        _pos.open = false;\n', '        liquidityInUse = liquidityInUse.sub(_pos.liquidityInUse, "TimeLoans::close: liquidityInUse overflow");\n', '        liquidityFreed = liquidityFreed.add(_pos.liquidityInUse);\n', '        emit Closed(id, _pos.owner, _pos.collateral, _pos.borrowed, _pos.creditIn, _pos.amountOut, _pos.created, _pos.expire);\n', '        return true;\n', '    }\n', '        \n', '    /**\n', '     * @notice returns the available liquidity (including LP tokens) for a given asset\n', '     * @param asset the asset to calculate liquidity for\n', '     * @return the amount of liquidity available\n', '     */\n', '    function liquidityOf(address asset) public view returns (uint) {\n', '        return IERC20(asset).balanceOf(address(this)).\n', '                add(IERC20(asset).balanceOf(pair)\n', '                    .mul(IERC20(pair).balanceOf(address(this)))\n', '                    .div(IERC20(pair).totalSupply()));\n', '    }\n', '    \n', '    /**\n', '     * @notice calculates the amount of liquidity to burn to get the amount of asset\n', '     * @param amount the amount of asset required as output \n', '     * @return the amount of liquidity to burn\n', '     */\n', '    function calculateLiquidityToBurn(address asset, uint amount) public view returns (uint) {\n', '        return IERC20(pair).balanceOf(address(this))\n', '                .mul(amount)\n', '                .div(IERC20(asset).balanceOf(pair));\n', '    }\n', '    \n', '    /**\n', '     * @notice withdraw liquidity to get the amount of tokens required to borrow\n', '     * @param asset the asset output required\n', '     * @param amount the amount of asset required as output\n', '     */\n', '    function _withdrawLiquidity(address asset, uint amount) internal returns (uint withdrew) {\n', '        withdrew = calculateLiquidityToBurn(asset, amount);\n', '        withdrew = withdrew.mul(BUFFER).div(BASE);\n', '        \n', '        uint _amountAMin = 0;\n', '        uint _amountBMin = 0;\n', '        if (asset == token0) {\n', '            _amountAMin = amount;\n', '        } else if (asset == token1) {\n', '            _amountBMin = amount;\n', '        }\n', '        IERC20(pair).approve(address(UNI), withdrew);\n', '        UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));\n', '        liquidityRemoved = liquidityRemoved.add(withdrew);\n', '    }\n', '    \n', '    /**\n', '     * @notice Provides a quote of how much output can be expected given the inputs\n', '     * @param collateral the asset being used as collateral\n', '     * @param borrow the asset being borrowed\n', '     * @param amount the amount of collateral being provided\n', '     * @return minOut the minimum amount of liquidity to borrow\n', '     */\n', '    function quote(address collateral, address borrow, uint amount) external view returns (uint minOut) {\n', '        uint _received = (amount.sub(amount.mul(FEE).div(BASE))).mul(LTV).div(BASE);\n', '        return ORACLE.quote(collateral, borrow, _received);\n', '    }\n', '    \n', '    /**\n', '     * @notice deposit available liquidity in the system into the Uniswap Pair, manual for now, require keepers in later iterations\n', '     */\n', '    function depositLiquidity() external {\n', '        require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");\n', '        IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));\n', '        IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));\n', '        (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));\n', '        liquidityAdded = liquidityAdded.add(_added);\n', '    }\n', '    \n', '    /**\n', '     * @notice Returns greater than `outMin` amount of `borrow` based on `amount` of `collateral supplied\n', '     * @param collateral the asset being used as collateral\n', '     * @param borrow the asset being borrowed\n', '     * @param amount the amount of collateral being provided\n', '     * @param outMin the minimum amount of liquidity to borrow\n', '     */\n', '    function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {\n', '        uint _before = IERC20(collateral).balanceOf(address(this));\n', '        IERC20(collateral).transferFrom(msg.sender, address(this), amount);\n', '        uint _after = IERC20(collateral).balanceOf(address(this));\n', '        \n', '        uint _received = _after.sub(_before);\n', '        uint _fee = _received.mul(FEE).div(BASE);\n', '        _received = _received.sub(_fee);\n', '        \n', '        uint _ltv = _received.mul(LTV).div(BASE);\n', '        \n', '        uint _amountOut = ORACLE.quote(collateral, borrow, _ltv);\n', '        require(_amountOut >= outMin, "TimeLoans::loan: slippage");\n', '        require(liquidityOf(borrow) > _amountOut, "TimeLoans::loan: insufficient liquidity");\n', '        \n', '        uint _available = IERC20(borrow).balanceOf(address(this));\n', '        uint _withdrew = 0;\n', '        if (_available < _amountOut) {\n', '            _withdrew = _withdrawLiquidity(borrow, _amountOut.sub(_available));\n', '            liquidityInUse = liquidityInUse.add(_withdrew);\n', '        }\n', '        \n', '        positions.push(position(msg.sender, collateral, borrow, _received, _amountOut, _withdrew, block.number, block.number.add(DELAY), true));\n', '        loans[msg.sender].push(nextIndex);\n', '        \n', '        IERC20(borrow).transfer(msg.sender, _amountOut);\n', '        emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));\n', '        return nextIndex++;\n', '    }\n', '    \n', '    /**\n', '     * @notice Repay a pending loan with `id` anyone can repay, no owner check\n', '     * @param id the id of the loan to close\n', '     * @return true/false if loan was successfully closed\n', '     */\n', '    function repay(uint id) external returns (bool) {\n', '        position storage _pos = positions[id];\n', '        require(_pos.open, "TimeLoans::repay: position is already closed");\n', '        require(_pos.expire < block.number, "TimeLoans::repay: position already expired");\n', '        IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);\n', '        uint _available = IERC20(_pos.collateral).balanceOf(address(this));\n', '        if (_available < _pos.creditIn) {\n', '            _withdrawLiquidity(_pos.collateral, _pos.creditIn.sub(_available));\n', '        }\n', '        IERC20(_pos.collateral).transfer(msg.sender, _pos.creditIn);\n', '        _pos.open = false;\n', '        positions[id] = _pos;\n', '        emit Repaid(id, _pos.owner, _pos.collateral, _pos.borrowed, _pos.creditIn, _pos.amountOut, _pos.created, _pos.expire);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "TimeLoans::permit: invalid signature");\n', '        require(signatory == owner, "TimeLoans::permit: unauthorized");\n', '        require(now <= deadline, "TimeLoans::permit: signature expired");\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint amount) public returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint(-1)) {\n', '            uint newAllowance = spenderAllowance.sub(amount, "TimeLoans::transferFrom: transfer amount exceeds spender allowance");\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        require(src != address(0), "TimeLoans::_transferTokens: cannot transfer from the zero address");\n', '        require(dst != address(0), "TimeLoans::_transferTokens: cannot transfer to the zero address");\n', '        \n', '        balances[src] = balances[src].sub(amount, "TimeLoans::_transferTokens: transfer amount exceeds balance");\n', '        balances[dst] = balances[dst].add(amount, "TimeLoans::_transferTokens: transfer amount overflows");\n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}\n', '\n', 'contract TimeLoanPairFactory {\n', '    mapping(address => address) pairs;\n', '    \n', '    function deploy(IUniswapV2Pair _pair) external {\n', '        require(pairs[address(_pair)] == address(0x0), "TimeLoanPairFactory::deploy: pair already created");\n', '        pairs[address(_pair)] = address(new TimeLoanPair(_pair));\n', '    }\n', '}']