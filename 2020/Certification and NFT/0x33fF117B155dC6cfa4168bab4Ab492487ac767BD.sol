['// File: solc_0.7/proxy/Proxy.sol\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '// EIP-1967\n', 'abstract contract Proxy {\n', '    // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\n', '\n', '    event ProxyImplementationUpdated(\n', '        address indexed previousImplementation,\n', '        address indexed newImplementation\n', '    );\n', '\n', '    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\n', '\n', '    receive() external payable {\n', '        _fallback();\n', '    }\n', '\n', '    fallback() external payable {\n', '        _fallback();\n', '    }\n', '\n', '    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\n', '\n', '    function _fallback() internal {\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let implementationAddress := sload(\n', '                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n', '            )\n', '            calldatacopy(0x0, 0x0, calldatasize())\n', '            let success := delegatecall(\n', '                gas(),\n', '                implementationAddress,\n', '                0x0,\n', '                calldatasize(),\n', '                0,\n', '                0\n', '            )\n', '            let retSz := returndatasize()\n', '            returndatacopy(0, 0, retSz)\n', '            switch success\n', '                case 0 {\n', '                    revert(0, retSz)\n', '                }\n', '                default {\n', '                    return(0, retSz)\n', '                }\n', '        }\n', '    }\n', '\n', '    function _setImplementation(address newImplementation, bytes memory data)\n', '        internal\n', '    {\n', '        address previousImplementation;\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            previousImplementation := sload(\n', '                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n', '            )\n', '        }\n', '\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            sstore(\n', '                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\n', '                newImplementation\n', '            )\n', '        }\n', '\n', '        emit ProxyImplementationUpdated(\n', '            previousImplementation,\n', '            newImplementation\n', '        );\n', '\n', '        if (data.length > 0) {\n', '            (bool success, ) = newImplementation.delegatecall(data);\n', '            if (!success) {\n', '                assembly {\n', '                    // This assembly ensure the revert contains the exact string data\n', '                    let returnDataSize := returndatasize()\n', '                    returndatacopy(0, 0, returnDataSize)\n', '                    revert(0, returnDataSize)\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: solc_0.7/proxy/EIP173Proxy.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', 'interface ERC165 {\n', '    function supportsInterface(bytes4 id) external view returns (bool);\n', '}\n', '\n', 'contract EIP173Proxy is Proxy {\n', '    // ////////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    // /////////////////////// CONSTRUCTOR //////////////////////////////////////////////////////////////////////\n', '\n', '    constructor(\n', '        address implementationAddress,\n', '        bytes memory data,\n', '        address ownerAddress\n', '    ) {\n', '        _setImplementation(implementationAddress, data);\n', '        _setOwner(ownerAddress);\n', '    }\n', '\n', '    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\n', '\n', '    function owner() external view returns (address) {\n', '        return _owner();\n', '    }\n', '\n', '    function supportsInterface(bytes4 id) external view returns (bool) {\n', '        if (id == 0x01ffc9a7 || id == 0x7f5828d0) {\n', '            return true;\n', '        }\n', '        if (id == 0xFFFFFFFF) {\n', '            return false;\n', '        }\n', '\n', '        ERC165 implementation;\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            implementation := sload(\n', '                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n', '            )\n', '        }\n', '\n', '        // This technically is not standard compliant as it ERC-165 require 30,000 gas which that call cannot ensure, since it is itself inside `supportsInterface`\n', '        // in practise this is unlikely to be an issue\n', '        try implementation.supportsInterface(id) returns (bool support) {\n', '            return support;\n', '        } catch {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        _setOwner(newOwner);\n', '    }\n', '\n', '    function changeImplementation(\n', '        address newImplementation,\n', '        bytes calldata data\n', '    ) external onlyOwner {\n', '        _setImplementation(newImplementation, data);\n', '    }\n', '\n', '    // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner(), "NOT_AUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\n', '\n', '    function _owner() internal view returns (address adminAddress) {\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            adminAddress := sload(\n', '                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\n', '            )\n', '        }\n', '    }\n', '\n', '    function _setOwner(address newOwner) internal {\n', '        address previousOwner = _owner();\n', '        // solhint-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            sstore(\n', '                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n', '                newOwner\n', '            )\n', '        }\n', '        emit OwnershipTransferred(previousOwner, newOwner);\n', '    }\n', '}']