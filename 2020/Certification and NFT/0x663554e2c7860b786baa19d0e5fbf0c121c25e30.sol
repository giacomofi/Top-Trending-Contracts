['pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function want(address) external view returns (address);\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(address, uint) external;\n', '    function earn(address, uint) external;\n', '}\n', '\n', 'interface ICurveFi {\n', '    function get_virtual_price() external view returns (uint);\n', '    function add_liquidity(\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '    function remove_liquidity_imbalance(\n', '        uint256[4] calldata amounts,\n', '        uint256 max_burn_amount\n', '    ) external;\n', '    function remove_liquidity(\n', '        uint256 _amount,\n', '        uint256[4] calldata amounts\n', '    ) external;\n', '    function exchange(\n', '        int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n', '    ) external;\n', '}\n', '\n', 'interface Gauge {\n', '    function deposit(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface Mintr {\n', '    function mint(address) external;\n', '}\n', 'interface Uni {\n', '    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n', '}\n', '\n', 'interface Strategy {\n', '    function want() external view returns (address);\n', '    function deposit() external;\n', '    function withdraw(address) external;\n', '    function withdraw(uint) external;\n', '    function skim() external;\n', '    function withdrawAll() external returns (uint);\n', '    function balanceOf() external view returns (uint);\n', '}\n', '\n', 'interface Vault {\n', '    function token() external view returns (address);\n', '    function claimInsurance() external;\n', '    function getPricePerFullShare() external view returns (uint);\n', '    function deposit(uint) external;\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface yERC20 {\n', '    function deposit(uint256 _amount) external;\n', '    function withdraw(uint256 _amount) external;\n', '}\n', '\n', 'interface IConvertor {\n', '    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n', '}\n', '\n', '/*\n', '\n', ' A strategy must implement the following calls;\n', '\n', ' - deposit()\n', ' - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\n', ' - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\n', ' - withdrawAll() - Controller | Vault role - withdraw should always return to vault\n', ' - balanceOf()\n', '\n', ' Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\n', '\n', '*/\n', '\n', 'contract StrategyStableUSD {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenIndex {DAI, USDC, USDT}\n', '\n', '    address public governance;\n', '    address public controller;\n', '\n', '    address public yVault;\n', '    address public curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\n', '    address public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\n', '    address public ycrvVault;\n', '\n', '    address public want;\n', '    address constant public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '\n', '    TokenIndex public tokenIndex;\n', '    IConvertor public zap = IConvertor(0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3);\n', '\n', '    constructor(address _controller, TokenIndex _tokenIndex, address _ycrvVault) public {\n', '        governance = msg.sender;\n', '        controller = _controller;\n', '\n', '        tokenIndex = _tokenIndex;\n', '        ycrvVault = _ycrvVault;\n', '\n', '        if (tokenIndex == TokenIndex.DAI) {\n', '            want = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '            yVault = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01;\n', '        } else if (tokenIndex == TokenIndex.USDC) {\n', '            want = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '            yVault = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e;\n', '        } else if (tokenIndex == TokenIndex.USDT) {\n', '            want = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '            yVault = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D;\n', '        } else {\n', "            revert('!tokenIndex');\n", '        }\n', '    }\n', '\n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyStableUSD";\n', '    }\n', '\n', '    function deposit() public {\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance > 0) {\n', '            IERC20(want).safeApprove(yVault, 0);\n', '            IERC20(want).safeApprove(yVault, _balance);\n', '            yERC20(yVault).deposit(_balance);\n', '        }\n', '\n', '        uint256 yBalance = IERC20(yVault).balanceOf(address(this));\n', '        if (yBalance > 0) {\n', '            IERC20(yVault).safeApprove(curve, 0);\n', '            IERC20(yVault).safeApprove(curve, yBalance);\n', '\n', '            uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\n', '            amounts[uint256(tokenIndex)] = yBalance;\n', '\n', '            ICurveFi(curve).add_liquidity(\n', '                amounts, 0\n', '            );\n', '        }\n', '\n', '        uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\n', '        if (ycrvBalance > 0) {\n', '            IERC20(ycrv).safeApprove(ycrvVault, 0);\n', '            IERC20(ycrv).safeApprove(ycrvVault, ycrvBalance);\n', '            // deposits the entire balance and also asks the vault to invest it (public function)\n', '            Vault(ycrvVault).deposit(ycrvBalance);\n', '        }\n', '    }\n', '\n', '    function balanceOf() external view returns (uint) {\n', '        uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\n', '        if (shares == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 price = Vault(ycrvVault).getPricePerFullShare();\n', '        // the price is in yCRV units, because this is a yCRV vault\n', '        // the multiplication doubles the number of decimals for shares, so we need to divide\n', '        // the precision is always 10 ** 18 as the yCRV vault has 18 decimals\n', '        uint256 precision = 1e18;\n', '        uint256 ycrvBalance = shares.mul(price).div(precision);\n', '        // now we can convert the balance to the token amount\n', '        uint256 ycrvValue = underlyingValueFromYCrv(ycrvBalance);\n', '        return ycrvValue.add(IERC20(want).balanceOf(address(this)));\n', '    }\n', '\n', '    function withdraw(IERC20 _asset) external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        require(crv != address(_asset), "crv");\n', '        require(ycrv != address(_asset), "ycrv");\n', '\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    function withdraw(uint _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _withdrawSome(_amount.sub(_balance));\n', '            _amount = Math.min(_amount, IERC20(want).balanceOf(address(this)));\n', '        }\n', '\n', '        address _vault = Controller(controller).vaults(address(this));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        IERC20(want).safeTransfer(_vault, _amount);\n', '    }\n', '\n', '    function withdrawAll() external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\n', '        Vault(ycrvVault).withdraw(shares);\n', '\n', '        yCurveToUnderlying(uint256(~0));\n', '        balance = IERC20(want).balanceOf(address(this));\n', '        if (balance > 0) {\n', '            address vault = Controller(controller).vaults(address(this));\n', '            require(vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '            IERC20(want).safeTransfer(vault, balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Returns the value of yCRV in y-token (e.g., yCRV -> yDai) accounting for slippage and fees.\n', '    */\n', '    function underlyingValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\n', '        return zap.calc_withdraw_one_coin(ycrvBalance, int128(tokenIndex));\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal returns (uint) {\n', '        uint shares = IERC20(ycrvVault).balanceOf(address(this));\n', '        Vault(ycrvVault).withdraw(shares);\n', '        yCurveToUnderlying(_amount);\n', '\n', '        uint remains = IERC20(ycrv).balanceOf(address(this));\n', '        if (remains > 0) {\n', '            IERC20(ycrv).safeApprove(ycrvVault, 0);\n', '            IERC20(ycrv).safeApprove(ycrvVault, remains);\n', '            Vault(ycrvVault).deposit(remains);\n', '        }\n', '        return _amount;\n', '    }\n', '\n', '    /**\n', '    * Uses the Curve protocol to convert the yCRV back into the underlying asset. If it cannot acquire\n', '    * the limit amount, it will acquire the maximum it can.\n', '    */\n', '    function yCurveToUnderlying(uint256 underlyingLimit) internal {\n', '        uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\n', '\n', '        // this is the maximum number of y-tokens we can get for our yCRV\n', '        uint256 yTokenMaximumAmount = yTokenValueFromYCrv(ycrvBalance);\n', '        if (yTokenMaximumAmount == 0) {\n', '            return;\n', '        }\n', '\n', '        // ensure that we will not overflow in the conversion\n', '        uint256 yTokenDesiredAmount = underlyingLimit == uint256(~0) ?\n', '        yTokenMaximumAmount : yTokenValueFromUnderlying(underlyingLimit);\n', '\n', '        uint256[4] memory yTokenAmounts = wrapCoinAmount(\n', '            Math.min(yTokenMaximumAmount, yTokenDesiredAmount));\n', '        uint256 yUnderlyingBalanceBefore = IERC20(yVault).balanceOf(address(this));\n', '        IERC20(ycrv).safeApprove(curve, 0);\n', '        IERC20(ycrv).safeApprove(curve, ycrvBalance);\n', '        ICurveFi(curve).remove_liquidity_imbalance(\n', '            yTokenAmounts, ycrvBalance\n', '        );\n', '        // now we have yUnderlying asset\n', '        uint256 yUnderlyingBalanceAfter = IERC20(yVault).balanceOf(address(this));\n', '        if (yUnderlyingBalanceAfter > yUnderlyingBalanceBefore) {\n', '            // we received new yUnderlying tokens for yCRV\n', '            yERC20(yVault).withdraw(yUnderlyingBalanceAfter.sub(yUnderlyingBalanceBefore));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Returns the value of yCRV in underlying token accounting for slippage and fees.\n', '    */\n', '    function yTokenValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\n', '        return underlyingValueFromYCrv(ycrvBalance) // this is in DAI, we will convert to yDAI\n', '        .mul(10 ** 18)\n', '        .div(Vault(yVault).getPricePerFullShare()); // function getPricePerFullShare() has 18 decimals for all tokens\n', '    }\n', '\n', '    /**\n', '    * Returns the value of the underlying token in yToken\n', '    */\n', '    function yTokenValueFromUnderlying(uint256 amountUnderlying) public view returns (uint256) {\n', '        // 1 yToken = this much underlying, 10 ** 18 precision for all tokens\n', '        return amountUnderlying\n', '        .mul(1e18)\n', '        .div(Vault(yVault).getPricePerFullShare());\n', '    }\n', '\n', '    /**\n', '    * Wraps the coin amount in the array for interacting with the Curve protocol\n', '    */\n', '    function wrapCoinAmount(uint256 amount) internal view returns (uint256[4] memory) {\n', '        uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\n', '        amounts[uint56(tokenIndex)] = amount;\n', '        return amounts;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}']