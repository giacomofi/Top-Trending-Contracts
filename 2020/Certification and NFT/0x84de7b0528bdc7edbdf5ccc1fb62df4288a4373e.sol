['// File: contracts\\interface\\IAddressResolver.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IAddressResolver {\n', '    \n', '    function key2address(bytes32 key) external view returns(address);\n', '    function address2key(address addr) external view returns(bytes32);\n', '    function requireAndKey2Address(bytes32 name, string calldata reason) external view returns(address);\n', '\n', '    function setAddress(bytes32 key, address addr) external;\n', '    function setMultiAddress(bytes32[] memory keys, address[] memory addrs) external;\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\interface\\IMintProposal.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IMintProposal {\n', '    function approve(\n', '        bytes32 _tunnelKey,\n', '        string memory _txid,\n', '        uint256 _amount,\n', '        address  to,\n', '        address trustee,\n', '        uint256 trusteeCount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts\\MintProposal.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', 'contract MintProposal is IMintProposal {\n', '    using SafeMath for uint256;\n', '\n', '    bytes32 public constant BORINGDAO = "BoringDAO";\n', '    IAddressResolver addrReso;\n', '\n', '    constructor(IAddressResolver _addrResovler) public {\n', '        addrReso = _addrResovler;\n', '    }\n', '\n', '    struct Proposal {\n', '        bytes32 tunnelKey;\n', '        uint256 amount;\n', '        uint256 voteCount;\n', '        address creater;\n', '        bool finished;\n', '        bool isExist;\n', '        mapping(address => bool) voteState;\n', '        address to;\n', '        string txid;\n', '    }\n', '    // mapping(address => bool) voteState;\n', '\n', '    mapping(bytes32 => Proposal) public proposals;\n', '\n', '    function approve(\n', '        bytes32 _tunnelKey,\n', '        string memory _txid,\n', '        uint256 _amount,\n', '        address to,\n', '        address trustee,\n', '        uint256 trusteeCount\n', '    ) public override onlyBoringDAO returns (bool) {\n', '        require(msg.sender == addrReso.key2address(BORINGDAO));\n', '        bytes32 pid = keccak256(\n', '            abi.encodePacked(_tunnelKey, _txid, _amount, to)\n', '        );\n', '        if (proposals[pid].isExist == false) {\n', '            // new proposal\n', '            Proposal memory p = Proposal({\n', '                tunnelKey: _tunnelKey,\n', '                to: to,\n', '                txid: _txid,\n', '                amount: _amount,\n', '                creater: trustee,\n', '                voteCount: 1,\n', '                finished: false,\n', '                isExist: true\n', '            });\n', '            proposals[pid] = p;\n', '            proposals[pid].voteState[trustee] = true;\n', '            emit VoteMintProposal(_tunnelKey, _txid, _amount, to, trustee, p.voteCount, trusteeCount);\n', '        } else {\n', '            // exist proposal\n', '            Proposal storage p = proposals[pid];\n', '            // had voted nothing to do more\n', '            if(p.voteState[trustee] == true) {\n', '                return false;\n', '            }\n', '            // proposal finished noting to do more\n', '            if (p.finished) {\n', '                return false;\n', '            }\n', '            p.voteCount = p.voteCount.add(1);\n', '            p.voteState[trustee] = true;\n', '            emit VoteMintProposal(_tunnelKey, _txid, _amount, to, trustee, p.voteCount, trusteeCount);\n', '        }\n', '        Proposal storage p = proposals[pid];\n', '        uint threshold = trusteeCount.mod(3) == 0 ? trusteeCount.mul(2).div(3) : trusteeCount.mul(2).div(3).add(1);\n', '        if (p.voteCount >= threshold) {\n', '            p.finished = true;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    modifier onlyBoringDAO {\n', '        require(msg.sender == addrReso.key2address(BORINGDAO), "MintProposal::caller is not boringDAO");\n', '        _;\n', '    }\n', '\n', '    event VoteMintProposal(\n', '        bytes32 _tunnelKey,\n', '        string _txid,\n', '        uint256 _amount,\n', '        address to,\n', '        address trustee,\n', '        uint votedCount,\n', '        uint256 trusteeCount\n', '    );\n', '\n', '}']