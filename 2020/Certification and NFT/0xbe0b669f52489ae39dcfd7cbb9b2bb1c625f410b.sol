['pragma solidity >=0.5.10 <0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// converted from ethereum/contracts/compound/abi/CErc20.json\n', 'interface CErc20Interface {\n', '\n', '    function name() external view returns (\n', '        string memory\n', '    );\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 amount\n', '    ) external returns (\n', '        bool\n', '    );\n', '\n', '    function repayBorrow(\n', '        uint256 repayAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function reserveFactorMantissa() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function borrowBalanceCurrent(\n', '        address account\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function totalSupply() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function exchangeRateStored() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 amount\n', '    ) external returns (\n', '        bool\n', '    );\n', '\n', '    function repayBorrowBehalf(\n', '        address borrower,\n', '        uint256 repayAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function pendingAdmin() external view returns (\n', '        address\n', '    );\n', '\n', '    function decimals() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function balanceOfUnderlying(\n', '        address owner\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function getCash() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function _setComptroller(\n', '        address newComptroller\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function totalBorrows() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function comptroller() external view returns (\n', '        address\n', '    );\n', '\n', '    function _reduceReserves(\n', '        uint256 reduceAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function initialExchangeRateMantissa() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function accrualBlockNumber() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function underlying() external view returns (\n', '        address\n', '    );\n', '\n', '    function balanceOf(\n', '        address owner\n', '    ) external view returns (\n', '        uint256\n', '    );\n', '\n', '    function totalBorrowsCurrent() external returns (\n', '        uint256\n', '    );\n', '\n', '    function redeemUnderlying(\n', '        uint256 redeemAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function totalReserves() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function symbol() external view returns (\n', '        string memory\n', '    );\n', '\n', '    function borrowBalanceStored(\n', '        address account\n', '    ) external view returns (\n', '        uint256\n', '    );\n', '\n', '    function mint(\n', '        uint256 mintAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function accrueInterest() external returns (\n', '        uint256\n', '    );\n', '\n', '    function transfer(\n', '        address dst,\n', '        uint256 amount\n', '    ) external returns (\n', '        bool\n', '    );\n', '\n', '    function borrowIndex() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function supplyRatePerBlock() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function seize(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 seizeTokens\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function _setPendingAdmin(\n', '        address newPendingAdmin\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function exchangeRateCurrent() external returns (\n', '        uint256\n', '    );\n', '\n', '    function getAccountSnapshot(\n', '        address account\n', '    ) external view returns (\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256\n', '    );\n', '\n', '    function borrow(\n', '        uint256 borrowAmount\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function redeem(\n', '        uint256 redeemTokens\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    ) external view returns (\n', '        uint256\n', '    );\n', '\n', '    function _acceptAdmin() external returns (\n', '        uint256\n', '    );\n', '\n', '    function _setInterestRateModel(\n', '        address newInterestRateModel\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function interestRateModel() external view returns (\n', '        address\n', '    );\n', '\n', '    function liquidateBorrow(\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        address cTokenCollateral\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function admin() external view returns (\n', '        address\n', '    );\n', '\n', '    function borrowRatePerBlock() external view returns (\n', '        uint256\n', '    );\n', '\n', '    function _setReserveFactor(\n', '        uint256 newReserveFactorMantissa\n', '    ) external returns (\n', '        uint256\n', '    );\n', '\n', '    function isCToken() external view returns (\n', '        bool\n', '    );\n', '\n', '    /*\n', '    constructor(\n', '        address underlying_,\n', '        address comptroller_,\n', '        address interestRateModel_,\n', '        uint256 initialExchangeRateMantissa_,\n', '        string  calldata name_,\n', '        string  calldata symbol_,\n', '        uint256 decimals_\n', '    );\n', '    */\n', '\n', '    event AccrueInterest(\n', '        uint256 interestAccumulated,\n', '        uint256 borrowIndex,\n', '        uint256 totalBorrows\n', '    );\n', '\n', '    event Mint(\n', '        address minter,\n', '        uint256 mintAmount,\n', '        uint256 mintTokens\n', '    );\n', '\n', '    event Redeem(\n', '        address redeemer,\n', '        uint256 redeemAmount,\n', '        uint256 redeemTokens\n', '    );\n', '\n', '    event Borrow(\n', '        address borrower,\n', '        uint256 borrowAmount,\n', '        uint256 accountBorrows,\n', '        uint256 totalBorrows\n', '    );\n', '\n', '    event RepayBorrow(\n', '        address payer,\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        uint256 accountBorrows,\n', '        uint256 totalBorrows\n', '    );\n', '\n', '    event LiquidateBorrow(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        address cTokenCollateral,\n', '        uint256 seizeTokens\n', '    );\n', '\n', '    event NewPendingAdmin(\n', '        address oldPendingAdmin,\n', '        address newPendingAdmin\n', '    );\n', '\n', '    event NewAdmin(\n', '        address oldAdmin,\n', '        address newAdmin\n', '    );\n', '\n', '    event NewComptroller(\n', '        address oldComptroller,\n', '        address newComptroller\n', '    );\n', '\n', '    event NewMarketInterestRateModel(\n', '        address oldInterestRateModel,\n', '        address newInterestRateModel\n', '    );\n', '\n', '    event NewReserveFactor(\n', '        uint256 oldReserveFactorMantissa,\n', '        uint256 newReserveFactorMantissa\n', '    );\n', '\n', '    event ReservesReduced(\n', '        address admin,\n', '        uint256 reduceAmount,\n', '        uint256 newTotalReserves\n', '    );\n', '\n', '    event Failure(\n', '        uint256 error,\n', '        uint256 info,\n', '        uint256 detail\n', '    );\n', '\n', '    event Transfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    );\n', '\n', '    event Approval(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    );\n', '\n', '}\n', '/**\n', ' * @notice Allocation strategy for assets.\n', ' *         - It invests the underlying assets into some yield generating contracts,\n', ' *           usually lending contracts, in return it gets new assets aka. saving assets.\n', ' *         - Savings assets can be redeemed back to the underlying assets plus interest any time.\n', ' */\n', 'interface IAllocationStrategy {\n', '\n', '    /**\n', '     * @notice Underlying asset for the strategy\n', '     * @return address Underlying asset address\n', '     */\n', '    function underlying() external view returns (address);\n', '\n', '    /**\n', '     * @notice Supply and Borrow percentage yield\n', '     * @return percentage yield in uint256\n', '     */\n', '    function supplyAndBorrowApy() external view returns (uint256, uint256);\n', '\n', '    /**\n', '     * @notice Calculates the exchange rate from underlying to saving assets\n', '     * @return uint256 Calculated exchange rate scaled by 1e18\n', '     *\n', '     * NOTE:\n', '     *\n', '     *   underlying = savingAssets × exchangeRate\n', '     */\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    /**\n', '      * @notice Applies accrued interest to all savings\n', '      * @dev This should calculates interest accrued from the last checkpointed\n', '      *      block up to the current block and writes new checkpoint to storage.\n', '      * @return bool success(true) or failure(false)\n', '      */\n', '    function accrueInterest() external returns (bool);\n', '\n', '    /**\n', '     * @notice Sender supplies underlying assets into the market and receives saving assets in exchange\n', '     * @dev Interst shall be accrued\n', '     * @param investAmount The amount of the underlying asset to supply\n', '     * @return uint256 Amount of saving assets created\n', '     */\n', '    function investUnderlying(uint256 investAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Sender redeems saving assets in exchange for a specified amount of underlying asset\n', '     * @dev Interst shall be accrued\n', '     * @param redeemAmount The amount of underlying to redeem\n', '     * @return uint256 Amount of saving assets burned\n', '     */\n', '    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Owner redeems all saving assets\n', '     * @dev Interst shall be accrued\n', '     * @return uint256 savingsAmount Amount of savings redeemed\n', '     * @return uint256 underlyingAmount Amount of underlying redeemed\n', '     */\n', '    function redeemAll() external returns (uint256 savingsAmount, uint256 underlyingAmount);\n', '\n', '}\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', 'contract CompoundAllocationStrategy is IAllocationStrategy, Ownable {\n', '\n', '    CErc20Interface private cToken;\n', '    IERC20 private token;\n', '\n', '    constructor(CErc20Interface cToken_) public {\n', '        cToken = cToken_;\n', '        token = IERC20(cToken.underlying());\n', '    }\n', '\n', '    /// @dev ISavingStrategy.underlying implementation\n', '    function underlying() external view returns (address) {\n', '        return cToken.underlying();\n', '    }\n', '\n', '    /// @dev ISavingStrategy.exchangeRateStored implementation\n', '    function exchangeRateStored() external view returns (uint256) {\n', '        return cToken.exchangeRateStored();\n', '    }\n', '\n', '    /// @dev ISavingStrategy.accrueInterest implementation\n', '    function accrueInterest() external returns (bool) {\n', '        return cToken.accrueInterest() == 0;\n', '    }\n', '\n', '    /// @dev ISavingStrategy.supplyAndBorrowApy implementation\n', '    function supplyAndBorrowApy() external view returns (uint256, uint256) {\n', '        uint256 supplyRatePerBlock = cToken.supplyRatePerBlock();\n', '        uint256 borrowRatePerBlock = cToken.borrowRatePerBlock();\n', '        return (supplyRatePerBlock, borrowRatePerBlock);\n', '    }\n', '\n', '    /// @dev ISavingStrategy.investUnderlying implementation\n', '    function investUnderlying(uint256 investAmount) external onlyOwner returns (uint256) {\n', '        token.transferFrom(msg.sender, address(this), investAmount);\n', '        token.approve(address(cToken), investAmount);\n', '        uint256 cTotalBefore = cToken.totalSupply();\n', '        // TODO should we handle mint failure?\n', '        require(cToken.mint(investAmount) == 0, "mint failed");\n', '        uint256 cTotalAfter = cToken.totalSupply();\n', '        uint256 cCreatedAmount;\n', '        require (cTotalAfter >= cTotalBefore, "Compound minted negative amount!?");\n', '        cCreatedAmount = cTotalAfter - cTotalBefore;\n', '        return cCreatedAmount;\n', '    }\n', '\n', '    /// @dev ISavingStrategy.redeemUnderlying implementation\n', '    function redeemUnderlying(uint256 redeemAmount) external onlyOwner returns (uint256) {\n', '        uint256 cTotalBefore = cToken.totalSupply();\n', '        // TODO should we handle redeem failure?\n', '        require(cToken.redeemUnderlying(redeemAmount) == 0, "cToken.redeemUnderlying failed");\n', '        uint256 cTotalAfter = cToken.totalSupply();\n', '        uint256 cBurnedAmount;\n', '        require(cTotalAfter <= cTotalBefore, "Compound redeemed negative amount!?");\n', '        cBurnedAmount = cTotalBefore - cTotalAfter;\n', '        token.transfer(msg.sender, redeemAmount);\n', '        return cBurnedAmount;\n', '    }\n', '\n', '    /// @dev ISavingStrategy.redeemAll implementation\n', '    function redeemAll() external onlyOwner\n', '        returns (uint256 savingsAmount, uint256 underlyingAmount) {\n', '        savingsAmount = cToken.balanceOf(address(this));\n', '        require(cToken.redeem(savingsAmount) == 0, "cToken.redeem failed");\n', '        underlyingAmount = token.balanceOf(address(this));\n', '        token.transfer(msg.sender, underlyingAmount);\n', '    }\n', '\n', '}\n', '/**\n', ' * @notice CompoundAllocationStrategyV2 collects governance tokens from\n', ' * Compound protocol and transfers them to a single address - compReceiver\n', ' */\n', 'contract CompoundAllocationStrategyV2 is CompoundAllocationStrategy {\n', '\n', '    event CompReceiverChanged(address indexed oldReceiver, address indexed newReceiver);\n', '\n', '    // This variable is repeated because CompoundAllocationStrategy has private cToken\n', '    CErc20Interface public cTokenContract;\n', '\n', '    address public compReceiver;\n', '\n', '    constructor(CErc20Interface cToken_, address compReceiver_) CompoundAllocationStrategy(cToken_)\n', '      public {\n', '          cTokenContract = cToken_;\n', '          compReceiver = compReceiver_;\n', '          emit CompReceiverChanged(address(0), compReceiver);\n', '    }\n', '\n', '    modifier auth() {\n', '        require(msg.sender == compReceiver, "Caller is not the Comp Receiver");\n', '        _;\n', '    }\n', '\n', '    function transferCompReceiverRights(address newReceiver) external auth {\n', '\n', '        emit CompReceiverChanged(compReceiver, newReceiver);\n', '        compReceiver = newReceiver;\n', '    }\n', '\n', '    function claimComp() public {\n', '        address comptroller = getComptrollerAddress();\n', '        IComptroller(comptroller).claimComp(address(this));\n', '    }\n', '\n', '    function claimAndTransferComp() public {\n', '\n', '        IComptroller comptroller = IComptroller(getComptrollerAddress());\n', '        comptroller.claimComp(address(this));\n', '\n', '        IERC20 compToken = IERC20(comptroller.getCompAddress());\n', '        uint totalCompBalance = compToken.balanceOf(address(this));\n', '\n', '        require(compToken.transfer(compReceiver, totalCompBalance), "token transfer failed");\n', '    }\n', '\n', '    function claimAndTransferComp(uint amount_) public {\n', '\n', '        IComptroller comptroller = IComptroller(getComptrollerAddress());\n', '        comptroller.claimComp(address(this));\n', '\n', '        IERC20 compToken = IERC20(comptroller.getCompAddress());\n', '        require(compToken.transfer(compReceiver, amount_), "token transfer failed");\n', '    }\n', '\n', '    function getComptrollerAddress() public view returns(address) {\n', '        return cTokenContract.comptroller();\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract IComptroller {\n', '    function claimComp(address holder) public {}\n', '    function getCompAddress() public view returns (address) {}\n', '}']