['// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2020 zapper, nodar, suhail, seb, apoorv, sumit\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '\n', '///@author Zapper\n', '///@notice this contract adds liquidity to Balancer liquidity pools in one transaction\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'interface IBFactory {\n', '    function isBPool(address b) external view returns (bool);\n', '}\n', '\n', 'interface IBPool {\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint256 tokenAmountIn,\n', '        uint256 minPoolAmountOut\n', '    ) external payable returns (uint256 poolAmountOut);\n', '\n', '    function isBound(address t) external view returns (bool);\n', '\n', '    function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function getDenormalizedWeight(address token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '    function getSwapFee() external view returns (uint256);\n', '\n', '    function calcPoolOutGivenSingleIn(\n', '        uint256 tokenBalanceIn,\n', '        uint256 tokenWeightIn,\n', '        uint256 poolSupply,\n', '        uint256 totalWeight,\n', '        uint256 tokenAmountIn,\n', '        uint256 swapFee\n', '    ) external pure returns (uint256 poolAmountOut);\n', '\n', '    function getBalance(address token) external view returns (uint256);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'interface IUniswapRouter02 {\n', '    //get estimated amountOut\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    //token 2 token\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    //eth 2 token\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    //token 2 eth\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', 'contract Balancer_ZapIn_General_V2_6 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '    bool public stopped = false;\n', '    uint16 public goodwill;\n', '\n', '    IBFactory BalancerFactory = IBFactory(\n', '        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\n', '    );\n', '    IUniswapV2Factory\n', '        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\n', '        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '    );\n', '    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '    );\n', '\n', '    address\n', '        private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address payable\n', '        public zgoodwillAddress = 0xE737b6AfEC2320f616297e59445b60a11e3eF75F;\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    event zap(\n', '        address zapContract,\n', '        address userAddress,\n', '        address tokenAddress,\n', '        uint256 volume,\n', '        uint256 timestamp\n', '    );\n', '\n', '    constructor(uint16 _goodwill) public {\n', '        goodwill = _goodwill;\n', '    }\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to invest in given balancer pool through ETH/ERC20 Tokens\n', '    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zapin\n', '    @param _amount The amount of ERC to invest\n', '    @param _minPoolTokens for slippage\n', '    @return success or failure\n', '     */\n', '    function ZapIn(\n', '        address _FromTokenContractAddress,\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens\n', '    )\n', '        public\n', '        payable\n', '        nonReentrant\n', '        stopInEmergency\n', '        returns (uint256 tokensBought)\n', '    {\n', '        require(\n', '            BalancerFactory.isBPool(_ToBalancerPoolAddress),\n', '            "Invalid Balancer Pool"\n', '        );\n', '\n', '        emit zap(\n', '            address(this),\n', '            msg.sender,\n', '            _FromTokenContractAddress,\n', '            _amount,\n', '            now\n', '        );\n', '\n', '        if (_FromTokenContractAddress == address(0)) {\n', '            require(msg.value > 0, "ERR: No ETH sent");\n', '\n', '            //transfer eth to goodwill\n', '            uint256 goodwillPortion = _transferGoodwill(address(0), msg.value);\n', '\n', '            address _IntermediateToken = _getBestDeal(\n', '                _ToBalancerPoolAddress,\n', '                msg.value,\n', '                _FromTokenContractAddress\n', '            );\n', '\n', '            tokensBought = _performZapIn(\n', '                msg.sender,\n', '                _FromTokenContractAddress,\n', '                _ToBalancerPoolAddress,\n', '                msg.value.sub(goodwillPortion),\n', '                _IntermediateToken,\n', '                _minPoolTokens\n', '            );\n', '\n', '            return tokensBought;\n', '        }\n', '\n', '        require(_amount > 0, "ERR: No ERC sent");\n', '        require(msg.value == 0, "ERR: ETH sent with tokens");\n', '\n', '        //transfer tokens to contract\n', '        IERC20(_FromTokenContractAddress).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _amount\n', '        );\n', '\n', '        //send tokens to goodwill\n', '        uint256 goodwillPortion = _transferGoodwill(\n', '            _FromTokenContractAddress,\n', '            _amount\n', '        );\n', '\n', '        address _IntermediateToken = _getBestDeal(\n', '            _ToBalancerPoolAddress,\n', '            _amount,\n', '            _FromTokenContractAddress\n', '        );\n', '\n', '        tokensBought = _performZapIn(\n', '            msg.sender,\n', '            _FromTokenContractAddress,\n', '            _ToBalancerPoolAddress,\n', '            _amount.sub(goodwillPortion),\n', '            _IntermediateToken,\n', '            _minPoolTokens\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function internally called by ZapIn() and EasyZapIn()\n', '    @param _toWhomToIssue The user address who want to invest\n', '    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zapin\n', '    @param _amount The amount of ETH/ERC to invest\n', '    @param _IntermediateToken The token for intermediate conversion before zapin\n', '    @param _minPoolTokens for slippage\n', '    @return The quantity of Balancer Pool tokens returned\n', '     */\n', '    function _performZapIn(\n', '        address _toWhomToIssue,\n', '        address _FromTokenContractAddress,\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        address _IntermediateToken,\n', '        uint256 _minPoolTokens\n', '    ) internal returns (uint256 tokensBought) {\n', '        // check if isBound()\n', '        bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '            _FromTokenContractAddress\n', '        );\n', '\n', '        uint256 balancerTokens;\n', '\n', '        if (isBound) {\n', '            balancerTokens = _enter2Balancer(\n', '                _ToBalancerPoolAddress,\n', '                _FromTokenContractAddress,\n', '                _amount,\n', '                _minPoolTokens\n', '            );\n', '        } else {\n', '            // swap tokens or eth\n', '            uint256 tokenBought;\n', '            if (_FromTokenContractAddress == address(0)) {\n', '                tokenBought = _eth2Token(_amount, _IntermediateToken);\n', '            } else {\n', '                tokenBought = _token2Token(\n', '                    _FromTokenContractAddress,\n', '                    _IntermediateToken,\n', '                    _amount\n', '                );\n', '            }\n', '\n', '            //get BPT\n', '            balancerTokens = _enter2Balancer(\n', '                _ToBalancerPoolAddress,\n', '                _IntermediateToken,\n', '                tokenBought,\n', '                _minPoolTokens\n', '            );\n', '        }\n', '\n', '        //transfer tokens to user\n', '        IERC20(_ToBalancerPoolAddress).safeTransfer(\n', '            _toWhomToIssue,\n', '            balancerTokens\n', '        );\n', '        return balancerTokens;\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to zapin to balancer pool\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zap in\n', '    @param _FromTokenContractAddress The token used to zap in\n', '    @param tokens2Trade The amount of tokens to invest\n', '    @return The quantity of Balancer Pool tokens returned\n', '     */\n', '    function _enter2Balancer(\n', '        address _ToBalancerPoolAddress,\n', '        address _FromTokenContractAddress,\n', '        uint256 tokens2Trade,\n', '        uint256 _minPoolTokens\n', '    ) internal returns (uint256 poolTokensOut) {\n', '        require(\n', '            IBPool(_ToBalancerPoolAddress).isBound(_FromTokenContractAddress),\n', '            "Token not bound"\n', '        );\n', '\n', '        uint256 allowance = IERC20(_FromTokenContractAddress).allowance(\n', '            address(this),\n', '            _ToBalancerPoolAddress\n', '        );\n', '\n', '        if (allowance < tokens2Trade) {\n', '            IERC20(_FromTokenContractAddress).safeApprove(\n', '                _ToBalancerPoolAddress,\n', '                uint256(-1)\n', '            );\n', '        }\n', '\n', '        poolTokensOut = IBPool(_ToBalancerPoolAddress).joinswapExternAmountIn(\n', '            _FromTokenContractAddress,\n', '            tokens2Trade,\n', '            _minPoolTokens\n', '        );\n', '\n', '        require(poolTokensOut > 0, "Error in entering balancer pool");\n', '    }\n', '\n', '    /**\n', '    @notice This function finds best token from the final tokens of balancer pool\n', '    @param _ToBalancerPoolAddress The address of balancer pool to zap in\n', '    @param _amount amount of eth/erc to invest\n', '    @param _FromTokenContractAddress the token address which is used to invest\n', '    @return The token address having max liquidity\n', '     */\n', '    function _getBestDeal(\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _amount,\n', '        address _FromTokenContractAddress\n', '    ) internal view returns (address _token) {\n', '        // If input is not eth or weth\n', '        if (\n', '            _FromTokenContractAddress != address(0) &&\n', '            _FromTokenContractAddress != wethTokenAddress\n', '        ) {\n', '            // check if input token or weth is bound and if so return it as intermediate\n', '            bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '                _FromTokenContractAddress\n', '            );\n', '            if (isBound) return _FromTokenContractAddress;\n', '        }\n', '\n', '        bool wethIsBound = IBPool(_ToBalancerPoolAddress).isBound(\n', '            wethTokenAddress\n', '        );\n', '        if (wethIsBound) return wethTokenAddress;\n', '\n', '        //get token list\n', '        address[] memory tokens = IBPool(_ToBalancerPoolAddress)\n', '            .getFinalTokens();\n', '\n', '        uint256 amount = _amount;\n', '        address[] memory path = new address[](2);\n', '\n', '        if (\n', '            _FromTokenContractAddress != address(0) &&\n', '            _FromTokenContractAddress != wethTokenAddress\n', '        ) {\n', '            path[0] = _FromTokenContractAddress;\n', '            path[1] = wethTokenAddress;\n', '            //get eth value for given token\n', '            amount = uniswapRouter.getAmountsOut(_amount, path)[1];\n', '        }\n', '\n', '        uint256 maxBPT;\n', '        path[0] = wethTokenAddress;\n', '\n', '        for (uint256 index = 0; index < tokens.length; index++) {\n', '            uint256 expectedBPT;\n', '\n', '            if (tokens[index] != wethTokenAddress) {\n', '                if (\n', '                    UniSwapV2FactoryAddress.getPair(\n', '                        tokens[index],\n', '                        wethTokenAddress\n', '                    ) == address(0)\n', '                ) {\n', '                    continue;\n', '                }\n', '\n', '                //get qty of tokens\n', '                path[1] = tokens[index];\n', '                uint256 expectedTokens = uniswapRouter.getAmountsOut(\n', '                    amount,\n', '                    path\n', '                )[1];\n', '\n', '                //get bpt for given tokens\n', '                expectedBPT = getToken2BPT(\n', '                    _ToBalancerPoolAddress,\n', '                    expectedTokens,\n', '                    tokens[index]\n', '                );\n', '\n', '                //get token giving max BPT\n', '                if (maxBPT < expectedBPT) {\n', '                    maxBPT = expectedBPT;\n', '                    _token = tokens[index];\n', '                }\n', '            } else {\n', '                //get bpt for given weth tokens\n', '                expectedBPT = getToken2BPT(\n', '                    _ToBalancerPoolAddress,\n', '                    amount,\n', '                    tokens[index]\n', '                );\n', '            }\n', '\n', '            //get token giving max BPT\n', '            if (maxBPT < expectedBPT) {\n', '                maxBPT = expectedBPT;\n', '                _token = tokens[index];\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice Function gives the expected amount of pool tokens on investing\n', '    @param _ToBalancerPoolAddress Address of balancer pool to zapin\n', '    @param _IncomingERC The amount of ERC to invest\n', '    @param _FromToken Address of token to zap in with\n', '    @return Amount of BPT token\n', '     */\n', '    function getToken2BPT(\n', '        address _ToBalancerPoolAddress,\n', '        uint256 _IncomingERC,\n', '        address _FromToken\n', '    ) internal view returns (uint256 tokensReturned) {\n', '        uint256 totalSupply = IBPool(_ToBalancerPoolAddress).totalSupply();\n', '        uint256 swapFee = IBPool(_ToBalancerPoolAddress).getSwapFee();\n', '        uint256 totalWeight = IBPool(_ToBalancerPoolAddress)\n', '            .getTotalDenormalizedWeight();\n', '        uint256 balance = IBPool(_ToBalancerPoolAddress).getBalance(_FromToken);\n', '        uint256 denorm = IBPool(_ToBalancerPoolAddress).getDenormalizedWeight(\n', '            _FromToken\n', '        );\n', '\n', '        tokensReturned = IBPool(_ToBalancerPoolAddress)\n', '            .calcPoolOutGivenSingleIn(\n', '            balance,\n', '            denorm,\n', '            totalSupply,\n', '            totalWeight,\n', '            _IncomingERC,\n', '            swapFee\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to buy tokens from eth\n', '    @param _tokenContractAddress Token address which we want to buy\n', '    @return The quantity of token bought\n', '     */\n', '\n', '    function _eth2Token(uint256 _ethAmt, address _tokenContractAddress)\n', '        internal\n', '        returns (uint256 tokenBought)\n', '    {\n', '        if (_tokenContractAddress == wethTokenAddress) {\n', '            IWETH(wethTokenAddress).deposit.value(_ethAmt)();\n', '            return _ethAmt;\n', '        }\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = wethTokenAddress;\n', '        path[1] = _tokenContractAddress;\n', '        tokenBought = uniswapRouter.swapExactETHForTokens.value(_ethAmt)(\n', '            1,\n', '            path,\n', '            address(this),\n', '            deadline\n', '        )[path.length - 1];\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to swap tokens\n', '    @param _FromTokenContractAddress The token address to swap from\n', '    @param _ToTokenContractAddress The token address to swap to\n', '    @param tokens2Trade The amount of tokens to swap\n', '    @return The quantity of tokens bought\n', '     */\n', '    function _token2Token(\n', '        address _FromTokenContractAddress,\n', '        address _ToTokenContractAddress,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 tokenBought) {\n', '        IERC20(_FromTokenContractAddress).safeApprove(\n', '            address(uniswapRouter),\n', '            tokens2Trade\n', '        );\n', '\n', '        if (_FromTokenContractAddress != wethTokenAddress) {\n', '            if (_ToTokenContractAddress != wethTokenAddress) {\n', '                address[] memory path = new address[](3);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '                path[2] = _ToTokenContractAddress;\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    address(this),\n', '                    deadline\n', '                )[path.length - 1];\n', '            } else {\n', '                address[] memory path = new address[](2);\n', '                path[0] = _FromTokenContractAddress;\n', '                path[1] = wethTokenAddress;\n', '\n', '                tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                    tokens2Trade,\n', '                    1,\n', '                    path,\n', '                    address(this),\n', '                    deadline\n', '                )[path.length - 1];\n', '            }\n', '        } else {\n', '            address[] memory path = new address[](2);\n', '            path[0] = wethTokenAddress;\n', '            path[1] = _ToTokenContractAddress;\n', '            tokenBought = uniswapRouter.swapExactTokensForTokens(\n', '                tokens2Trade,\n', '                1,\n', '                path,\n', '                address(this),\n', '                deadline\n', '            )[path.length - 1];\n', '        }\n', '\n', '        require(tokenBought > 0, "Error in swapping ERC: 1");\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to calculate and transfer goodwill\n', '    @param _tokenContractAddress Token in which goodwill is deducted\n', '    @param tokens2Trade The total amount of tokens to be zapped in\n', '    @return The quantity of goodwill deducted\n', '     */\n', '\n', '    function _transferGoodwill(\n', '        address _tokenContractAddress,\n', '        uint256 tokens2Trade\n', '    ) internal returns (uint256 goodwillPortion) {\n', '        goodwillPortion = SafeMath.div(\n', '            SafeMath.mul(tokens2Trade, goodwill),\n', '            10000\n', '        );\n', '\n', '        if (goodwillPortion == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if (_tokenContractAddress == address(0)) {\n', '            Address.sendValue(zgoodwillAddress, goodwillPortion);\n', '        } else {\n', '            IERC20(_tokenContractAddress).safeTransfer(\n', '                zgoodwillAddress,\n', '                goodwillPortion\n', '            );\n', '        }\n', '    }\n', '\n', '    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\n', '        require(\n', '            _new_goodwill >= 0 && _new_goodwill < 10000,\n', '            "GoodWill Value not allowed"\n', '        );\n', '        goodwill = _new_goodwill;\n', '    }\n', '\n', '    function set_new_zgoodwillAddress(address payable _new_zgoodwillAddress)\n', '        public\n', '        onlyOwner\n', '    {\n', '        zgoodwillAddress = _new_zgoodwillAddress;\n', '    }\n', '\n', '    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\n', '        uint256 qty = _TokenAddress.balanceOf(address(this));\n', '        IERC20(address(_TokenAddress)).safeTransfer(owner(), qty);\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() public onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    // - to withdraw any ETH balance sitting in the contract\n', '    function withdraw() public onlyOwner {\n', '        uint256 contractBalance = address(this).balance;\n', '        address payable _to = owner().toPayable();\n', '        _to.transfer(contractBalance);\n', '    }\n', '\n', '    function() external payable {}\n', '}']