['/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '/**\n', ' * @title OneInchExchangeAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * Exchange adapter for 1Inch exchange that returns data for trades\n', ' */\n', '\n', 'contract OneInchExchangeAdapter {\n', '\n', '    /* ============ State Variables ============ */\n', '    \n', '    // Address of 1Inch approve token address\n', '    address public oneInchApprovalAddress;\n', '\n', '    // Address of 1Inch exchange address\n', '    address public oneInchExchangeAddress;\n', '\n', '    // Bytes to check 1Inch function signature\n', '    bytes4 public oneInchFunctionSignature;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _oneInchApprovalAddress       Address of 1inch approval contract\n', '     * @param _oneInchExchangeAddress       Address of 1inch exchange contract\n', '     * @param _oneInchFunctionSignature     Bytes of 1inch function signature\n', '     */\n', '    constructor(\n', '        address _oneInchApprovalAddress,\n', '        address _oneInchExchangeAddress,\n', '        bytes4 _oneInchFunctionSignature\n', '    )\n', '        public\n', '    {\n', '        oneInchApprovalAddress = _oneInchApprovalAddress;\n', '        oneInchExchangeAddress = _oneInchExchangeAddress;\n', '        oneInchFunctionSignature = _oneInchFunctionSignature;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Return 1inch calldata which is already generated from the 1inch API\n', '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _sourceQuantity           Amount of source token to sell\n', '     * @param  _minDestinationQuantity   Min amount of destination token to buy\n', '     * @param  _data                     Arbitrage bytes containing trade call data\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address /* _destinationAddress */,\n', '        uint256 _sourceQuantity,\n', '        uint256 _minDestinationQuantity,\n', '        bytes memory _data\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory)\n', '    {   \n', '        bytes4 signature;\n', '        address fromToken;\n', '        address toToken;\n', '        uint256 fromTokenAmount;\n', '        uint256 minReturnAmount;\n', '\n', '        // Parse 1inch calldata and validate parameters match expected inputs\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            signature := mload(add(_data, 32))\n', '            fromToken := mload(add(_data, 36))\n', '            toToken := mload(add(_data, 68))\n', '            fromTokenAmount := mload(add(_data, 100))\n', '            minReturnAmount := mload(add(_data, 132))\n', '        }\n', '\n', '        require(\n', '            signature == oneInchFunctionSignature,\n', '            "Not One Inch Swap Function"\n', '        );\n', '\n', '        require(\n', '            fromToken == _sourceToken,\n', '            "Invalid send token"\n', '        );\n', '\n', '        require(\n', '            toToken == _destinationToken,\n', '            "Invalid receive token"\n', '        );\n', '\n', '        require(\n', '            fromTokenAmount == _sourceQuantity,\n', '            "Source quantity mismatch"\n', '        );\n', '\n', '        require(\n', '            minReturnAmount >= _minDestinationQuantity,\n', '            "Min destination quantity mismatch"\n', '        );\n', '\n', '        return (oneInchExchangeAddress, 0, _data);\n', '    }\n', '\n', '    /**\n', '     * Returns the address to approve source tokens to for trading. This is the TokenTaker address\n', '     *\n', '     * @return address             Address of the contract to approve tokens to\n', '     */\n', '    function getSpender()\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return oneInchApprovalAddress;\n', '    }\n', '}']