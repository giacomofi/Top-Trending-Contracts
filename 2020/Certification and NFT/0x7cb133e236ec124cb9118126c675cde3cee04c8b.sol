['// File: contracts/src/common/lifecycle/Killable.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * A module that allows contracts to self-destruct.\n', ' */\n', 'contract Killable {\n', '\taddress payable public _owner;\n', '\n', '\t/**\n', '\t * Initialized with the deployer as the owner.\n', '\t */\n', '\tconstructor() internal {\n', '\t\t_owner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * Self-destruct the contract.\n', '\t * This function can only be executed by the owner.\n', '\t */\n', '\tfunction kill() public {\n', '\t\trequire(msg.sender == _owner, "only owner method");\n', '\t\tselfdestruct(_owner);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/src/common/interface/IGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IGroup {\n', '\tfunction isGroup(address _addr) public view returns (bool);\n', '\n', '\tfunction addGroup(address _addr) external;\n', '\n', '\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\n', '\t\treturn keccak256(abi.encodePacked("_group", _addr));\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/AddressValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * A module that provides common validations patterns.\n', ' */\n', 'contract AddressValidator {\n', '\tstring constant errorMessage = "this is illegal address";\n', '\n', '\t/**\n', '\t * Validates passed address is not a zero address.\n', '\t */\n', '\tfunction validateIllegalAddress(address _addr) external pure {\n', '\t\trequire(_addr != address(0), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in an address set.\n', '\t */\n', '\tfunction validateGroup(address _addr, address _groupAddr) external view {\n', '\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address is included in two address sets.\n', '\t */\n', '\tfunction validateGroups(\n', '\t\taddress _addr,\n', '\t\taddress _groupAddr1,\n', '\t\taddress _groupAddr2\n', '\t) external view {\n', '\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates that the address of the first argument is equal to the address of the second argument.\n', '\t */\n', '\tfunction validateAddress(address _addr, address _target) external pure {\n', '\t\trequire(_addr == _target, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the two addresses.\n', '\t */\n', '\tfunction validateAddresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target2, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * Validates passed address equals to the three addresses.\n', '\t */\n', '\tfunction validate3Addresses(\n', '\t\taddress _addr,\n', '\t\taddress _target1,\n', '\t\taddress _target2,\n', '\t\taddress _target3\n', '\t) external pure {\n', '\t\tif (_addr == _target1) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tif (_addr == _target2) {\n', '\t\t\treturn;\n', '\t\t}\n', '\t\trequire(_addr == _target3, errorMessage);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/validate/UsingValidator.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '// prettier-ignore\n', '\n', '\n', '/**\n', ' * Module for contrast handling AddressValidator.\n', ' */\n', 'contract UsingValidator {\n', '\tAddressValidator private _validator;\n', '\n', '\t/**\n', '\t * Create a new AddressValidator contract when initialize.\n', '\t */\n', '\tconstructor() public {\n', '\t\t_validator = new AddressValidator();\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the set AddressValidator address.\n', '\t */\n', '\tfunction addressValidator() internal view returns (AddressValidator) {\n', '\t\treturn _validator;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/AddressConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * A registry contract to hold the latest contract addresses.\n', ' * Dev Protocol will be upgradeable by this contract.\n', ' */\n', 'contract AddressConfig is Ownable, UsingValidator, Killable {\n', '\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\n', '\taddress public allocator;\n', '\taddress public allocatorStorage;\n', '\taddress public withdraw;\n', '\taddress public withdrawStorage;\n', '\taddress public marketFactory;\n', '\taddress public marketGroup;\n', '\taddress public propertyFactory;\n', '\taddress public propertyGroup;\n', '\taddress public metricsGroup;\n', '\taddress public metricsFactory;\n', '\taddress public policy;\n', '\taddress public policyFactory;\n', '\taddress public policySet;\n', '\taddress public policyGroup;\n', '\taddress public lockup;\n', '\taddress public lockupStorage;\n', '\taddress public voteTimes;\n', '\taddress public voteTimesStorage;\n', '\taddress public voteCounter;\n', '\taddress public voteCounterStorage;\n', '\n', '\t/**\n', '\t * Set the latest Allocator contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setAllocator(address _addr) external onlyOwner {\n', '\t\tallocator = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest AllocatorStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the AllocatorStorage contract is not used.\n', '\t */\n', '\tfunction setAllocatorStorage(address _addr) external onlyOwner {\n', '\t\tallocatorStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Withdraw contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdraw(address _addr) external onlyOwner {\n', '\t\twithdraw = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest WithdrawStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setWithdrawStorage(address _addr) external onlyOwner {\n', '\t\twithdrawStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketFactory(address _addr) external onlyOwner {\n', '\t\tmarketFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MarketGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMarketGroup(address _addr) external onlyOwner {\n', '\t\tmarketGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyFactory(address _addr) external onlyOwner {\n', '\t\tpropertyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PropertyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPropertyGroup(address _addr) external onlyOwner {\n', '\t\tpropertyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsFactory(address _addr) external onlyOwner {\n', '\t\tmetricsFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest MetricsGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setMetricsGroup(address _addr) external onlyOwner {\n', '\t\tmetricsGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyFactory contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyFactory(address _addr) external onlyOwner {\n', '\t\tpolicyFactory = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicyGroup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicyGroup(address _addr) external onlyOwner {\n', '\t\tpolicyGroup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest PolicySet contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setPolicySet(address _addr) external onlyOwner {\n', '\t\tpolicySet = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Policy contract address.\n', '\t * Only the latest PolicyFactory contract can execute this function.\n', '\t */\n', '\tfunction setPolicy(address _addr) external {\n', '\t\taddressValidator().validateAddress(msg.sender, policyFactory);\n', '\t\tpolicy = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Dev contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setToken(address _addr) external onlyOwner {\n', '\t\ttoken = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest Lockup contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setLockup(address _addr) external onlyOwner {\n', '\t\tlockup = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest LockupStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the LockupStorage contract is not used as a stand-alone because it is inherited from the Lockup contract.\n', '\t */\n', '\tfunction setLockupStorage(address _addr) external onlyOwner {\n', '\t\tlockupStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimes contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimes contract is not used.\n', '\t */\n', '\tfunction setVoteTimes(address _addr) external onlyOwner {\n', '\t\tvoteTimes = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteTimesStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteTimesStorage contract is not used.\n', '\t */\n', '\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\n', '\t\tvoteTimesStorage = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounter contract address.\n', '\t * Only the owner can execute this function.\n', '\t */\n', '\tfunction setVoteCounter(address _addr) external onlyOwner {\n', '\t\tvoteCounter = _addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Set the latest VoteCounterStorage contract address.\n', '\t * Only the owner can execute this function.\n', '\t * NOTE: But currently, the VoteCounterStorage contract is not used as a stand-alone because it is inherited from the VoteCounter contract.\n', '\t */\n', '\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\n', '\t\tvoteCounterStorage = _addr;\n', '\t}\n', '}\n', '\n', '// File: contracts/src/common/config/UsingConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * Module for using AddressConfig contracts.\n', ' */\n', 'contract UsingConfig {\n', '\tAddressConfig private _config;\n', '\n', '\t/**\n', '\t * Initialize the argument as AddressConfig address.\n', '\t */\n', '\tconstructor(address _addressConfig) public {\n', '\t\t_config = AddressConfig(_addressConfig);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig instance.\n', '\t */\n', '\tfunction config() internal view returns (AddressConfig) {\n', '\t\treturn _config;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig address.\n', '\t */\n', '\tfunction configAddress() external view returns (address) {\n', '\t\treturn address(_config);\n', '\t}\n', '}\n', '\n', '// File: contracts/src/policy/IPolicyGroup.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract IPolicyGroup is IGroup {\n', '\tfunction getVotingGroupIndex() external view returns (uint256);\n', '\n', '\tfunction incrementVotingGroupIndex() external;\n', '\n', '\tfunction voting(address _policy) external view returns (bool);\n', '\n', '\tfunction addGroupWithoutSetVotingEnd(address _addr) public;\n', '}\n', '\n', '// File: contracts/src/policy/IPolicyFactory.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract IPolicyFactory {\n', '\tfunction create(address _newPolicyAddress) external;\n', '\n', '\tfunction convergePolicy(address _currentPolicyAddress) external;\n', '}\n', '\n', '// File: contracts/src/policy/PolicyFactory.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * A factory contract that creates a new Policy contract.\n', ' */\n', 'contract PolicyFactory is UsingConfig, UsingValidator, IPolicyFactory {\n', '\tevent Create(address indexed _from, address _policy);\n', '\n', '\t/**\n', '\t * Initialize the passed address as AddressConfig address.\n', '\t */\n', '\t// solium-disable-next-line no-empty-blocks\n', '\tconstructor(address _config) public UsingConfig(_config) {}\n', '\n', '\t/**\n', '\t * Creates a new Policy contract.\n', '\t */\n', '\tfunction create(address _newPolicyAddress) external {\n', '\t\t/**\n', '\t\t * Validates the passed address is not 0 address.\n', '\t\t */\n', '\t\taddressValidator().validateIllegalAddress(_newPolicyAddress);\n', '\n', '\t\temit Create(msg.sender, _newPolicyAddress);\n', '\n', '\t\t/**\n', '\t\t * In the case of the first Policy, it will be activated immediately.\n', '\t\t */\n', '\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\n', '\t\tif (config().policy() == address(0)) {\n', '\t\t\tconfig().setPolicy(_newPolicyAddress);\n', '\t\t\tpolicyGroup.addGroupWithoutSetVotingEnd(_newPolicyAddress);\n', '\t\t\treturn;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t * Adds the created Policy contract to the Policy address set.\n', '\t\t */\n', '\t\tpolicyGroup.addGroup(_newPolicyAddress);\n', '\t}\n', '\n', '\t/**\n', '\t * Sets the Policy passed by a vote as an current Policy.\n', '\t */\n', '\tfunction convergePolicy(address _currentPolicyAddress) external {\n', '\t\t/**\n', '\t\t * Verify sender is VoteCounter contract\n', '\t\t */\n', '\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\n', '\n', '\t\t/**\n', '\t\t * Sets the passed Policy to current Policy.\n', '\t\t */\n', '\t\tconfig().setPolicy(_currentPolicyAddress);\n', '\n', '\t\t/**\n', '\t\t * Resets the Policy address set that is accepting votes.\n', '\t\t */\n', '\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\n', '\t\tpolicyGroup.incrementVotingGroupIndex();\n', '\t\tpolicyGroup.addGroup(_currentPolicyAddress);\n', '\t}\n', '}']