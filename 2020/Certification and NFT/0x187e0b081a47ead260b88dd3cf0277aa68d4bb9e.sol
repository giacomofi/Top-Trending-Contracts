['//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    \n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract AbacusOracle is Initializable{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address payable owner;\n', '    \n', '    uint public callFee;\n', '    uint public jobFee;\n', '    uint public jobsActive;\n', '    uint64[] private jobIds;\n', '    uint callId;\n', '    \n', '    enum Status {ACTIVE,CLOSED}\n', '        \n', '    /*============Mappings=============\n', '    ----------------------------------*/\n', '    \n', '    mapping (uint64 => Job) public jobs;\n', '    mapping (uint64 => uint[]) private jobResponse;\n', '    mapping (uint64 => bool) public isJobActive;\n', '    mapping (address => bool) private isUpdater;\n', '    mapping (uint => bytes32) public calls;\n', '\n', '    /*============Events===============\n', '    ---------------------------------*/\n', '    \n', '    event jobCreated(\n', '        string api,\n', '        bytes32 [] parameters,\n', '        uint64 jobId\n', '        );\n', '        \n', '    event breach(\n', '        uint64 jobId,\n', '        address creator,\n', '        uint previousPrice,\n', '        uint newPrice\n', '        );\n', '        \n', '    event ScheduleFuncEvent(\n', '        address indexed to, \n', '        uint256 indexed callTime,    \n', '        bytes data,\n', '        uint256 fee,\n', '        uint256 gaslimit,\n', '        uint256 gasprice, \n', '        uint256 indexed callID\n', '        );\n', '        \n', '    event FunctionExec(\n', '        address to,\n', '        bool txStatus,\n', '        bool reimbursedStatus\n', '        );\n', '    \n', '    /*=========Structs================\n', '    --------------------------------*/\n', '    \n', '    struct Job{\n', '        string api;\n', '        bytes32 [] parameters;\n', '        string ipfsHash;\n', '        address creator;\n', '        uint NoOfParameters;\n', '        uint triggerValue;\n', '        uint dataFrequency;\n', '        uint prepaidValue;\n', '        uint leftValue;\n', '        bool hashRequired;\n', '        Status status;\n', '    }\n', '    \n', '    \n', '    /*===========Modifiers===========\n', '    -------------------------------*/\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyUpdater(){\n', '        require(isUpdater[msg.sender]);\n', '        _;\n', '    }  \n', '    uint public totalOwnerFee;    \n', '    function initialize(address payable _owner,uint _fee,uint _callFee , address[] memory _updaters) public initializer{\n', '        owner =_owner;\n', '        jobFee = _fee;\n', '        isUpdater[_owner] =true;\n', '        callFee = _callFee;\n', '        \n', '        for(uint i=0; i<_updaters.length;i++){\n', '            isUpdater[_updaters[i]] = true;\n', '        } \n', '    }\n', '    // constructor  (address payable _owner,uint _fee,uint _callFee , address[] memory _updaters) public {\n', '    //     owner =_owner;\n', '    //     jobFee = _fee;\n', '    //     isUpdater[_owner] =true;\n', '    //     callFee = _callFee;\n', '        \n', '    //     for(uint i=0; i<_updaters.length;i++){\n', '    //         isUpdater[_updaters[i]] = true;\n', '    //     }\n', '    // }\n', '    \n', '    \n', '    /*===========Job functions============\n', '    -------------------------------------*/\n', '\n', '    function createJob(string calldata _api,\n', '                       bytes32[] calldata _parameters, \n', '                       uint _triggerValue , \n', '                       uint _frequency , \n', '                       uint _prepaidValue, \n', '                       uint ipfsHashProof\n', '                       ) \n', '                       external payable returns(uint _Id) \n', '                       {\n', '        require(msg.value == _prepaidValue);\n', '        bool _hashRequired = ipfsHashProof == 0 ? false:true;\n', '        uint nop  = _parameters.length;\n', '        uint64 _jobId = uint64(uint(keccak256(abi.encodePacked(_api,_triggerValue,now))));\n', '        \n', '        jobs[_jobId] = Job({api : _api,\n', '                            parameters : _parameters,\n', '                            ipfsHash : "",\n', '                            creator : msg.sender,\n', '                            triggerValue : _triggerValue,\n', '                            dataFrequency : _frequency,\n', '                            prepaidValue: msg.value,\n', '                            leftValue: msg.value,\n', '                            NoOfParameters : nop,\n', '                            hashRequired : _hashRequired,\n', '                            status : Status.ACTIVE\n', '        });\n', '        jobIds.push(_jobId);\n', '        isJobActive[_jobId] = true;\n', '        jobResponse[_jobId] = [uint(0)];\n', '        jobsActive += 1 ;\n', '        \n', '        emit jobCreated(_api,_parameters,_jobId);\n', '        \n', '        return _jobId;\n', '        }\n', '    \n', '    function updateJob(uint64 _jobId,uint[] calldata _values) external onlyUpdater {\n', '        require(isJobActive[_jobId],"job closed or not exist");\n', '        uint g1 = gasleft();\n', '        \n', '        if(breachCheck(_jobId,_values[0])){\n', '            //breachUpdate()\n', '            emit breach(_jobId,\n', '                        jobs[_jobId].creator,\n', '                        jobResponse[_jobId][0],\n', '                        _values[0]\n', '                        );\n', '        }\n', '        \n', '        jobResponse[_jobId] = _values;\n', '        \n', '        uint gasUsed = g1 - gasleft();\n', '        \n', '        if(jobs[_jobId].leftValue < gasUsed + jobFee){\n', '            jobs[_jobId].status = Status.CLOSED;\n', '            isJobActive[_jobId] = false;\n', '            jobsActive -= 1;\n', '        }else{\n', '            totalOwnerFee += jobFee;\n', '            jobs[_jobId].leftValue -= gasUsed + jobFee;\n', '        }\n', '    }\n', '    \n', '    function setFee(uint _fee) public onlyOwner {\n', '        jobFee = _fee;\n', '    }\n', '    \n', '    function deactivateJob(uint64 _jobId) public onlyOwner{\n', '        require(isJobActive[_jobId],"job closed or not exist");\n', '        isJobActive[_jobId] = false;\n', '        jobs[_jobId].status = Status.CLOSED;\n', '        jobsActive -= 1;\n', '    }\n', '      function getJobParameters(uint64 _jobId) public onlyUpdater view returns(bytes32[] memory _parameters){\n', '        return jobs[_jobId].parameters;\n', '    }  \n', '   \n', '    \n', '    function addUpdater(address _updater) public onlyOwner{\n', '        isUpdater[_updater] =true;\n', '    }\n', '    \n', '    function getJobIds() public onlyUpdater view returns(uint64[] memory Ids) {\n', '        return jobIds;\n', '    }\n', '    \n', '    function updateJobTrigger(uint64 _jobId,uint _triggerValue) public {\n', '        require(jobs[_jobId].creator == msg.sender,"unauthorised");\n', '        jobs[_jobId].triggerValue = _triggerValue;\n', '    }\n', '    \n', '    function getJobResponse(uint64 _jobId) public view returns(uint[] memory _values){\n', '        require(isJobActive[_jobId],"job closed");\n', '        return jobResponse[_jobId];\n', '    }\n', '    \n', '    function increasePrepaidValue(uint64 _jobId,uint amount) external payable{\n', '        require(jobs[_jobId].creator == msg.sender,"unauthorised");\n', '        require(msg.value == amount);\n', '        jobs[_jobId].prepaidValue = jobs[_jobId].prepaidValue + amount;\n', '        jobs[_jobId].leftValue = jobs[_jobId].leftValue + amount;\n', '        jobs[_jobId].status = Status.ACTIVE;\n', '        isJobActive[_jobId] = true;\n', '        jobsActive += 1;        \n', '    }\n', '    /*==============Shcedule functions===============\n', '    -----------------------------------------------*/\n', '    \n', '    function scheduleFunc(address to ,uint callTime, bytes calldata data , uint fee , uint gaslimit ,uint gasprice)external payable{\n', '        require(msg.value == callFee.add(gaslimit.mul(gasprice)));\n', '        callId += 1;\n', '        totalOwnerFee += callFee; \n', '        calls[callId] = keccak256(abi.encodePacked(to,callTime,data,fee,gaslimit,gasprice));\n', '       \n', '        \n', '        \n', '        emit ScheduleFuncEvent(to ,callTime ,data ,fee , gaslimit ,gasprice,callId);\n', '    }\n', '    \n', '    function execfunct(address to ,uint callTime, bytes calldata data , uint fee , uint gaslimit ,uint gasprice,uint _callId) external onlyUpdater  {\n', '       \n', '       require(calls[_callId] == keccak256(abi.encodePacked(to,callTime,data,fee,gaslimit,gasprice)));\n', '\n', '       (bool txStatus,) = to.call(data);\n', '       \n', '       (bool success,) = to.call{value:gasleft() -200}("");       \n', '       delete calls[_callId];\n', '       \n', '       emit FunctionExec(to,txStatus,success);\n', '\n', '    }\n', '    \n', '    function setCallFee(uint _callFee) public onlyOwner {\n', '         callFee = _callFee;\n', '    }\n', '\n', '    /*==============Helpers============\n', '    ---------------------------------*/\n', '    \n', '    function breachCheck(uint64 _jobId, uint newvalue) private view returns(bool) {\n', '        uint _value = jobResponse[_jobId][0];\n', '        \n', '        if(newvalue >= _value){return false;}\n', '        \n', '        uint change = ((_value - newvalue)*100)/_value ;\n', '        return (change > jobs[_jobId].triggerValue );\n', '    }\n', '    \n', '    \n', '    function bytes32ToString(bytes32 x) public pure returns (string memory) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (uint j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '    \n', '    function stringToBytes32(string memory str) public pure returns(bytes32 result){\n', '       assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '   function withdraw(uint amount) public onlyOwner{\n', '        require(amount<= totalOwnerFee,"insufficient balance");\n', '        owner.transfer(amount);\n', '    }\n', '}']