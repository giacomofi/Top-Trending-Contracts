['pragma solidity 0.5.11;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract Governable {\n', '    // Storage position of the owner and pendingOwner of the contract\n', '    bytes32\n', '        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\n', '    //keccak256("OUSD.governor");\n', '\n', '    bytes32\n', '        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\n', '    //keccak256("OUSD.pending.governor");\n', '\n', '    event PendingGovernorshipTransfer(\n', '        address indexed previousGovernor,\n', '        address indexed newGovernor\n', '    );\n', '\n', '    event GovernorshipTransferred(\n', '        address indexed previousGovernor,\n', '        address indexed newGovernor\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial Governor.\n', '     */\n', '    constructor() internal {\n', '        _setGovernor(msg.sender);\n', '        emit GovernorshipTransferred(address(0), _governor());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current Governor.\n', '     */\n', '    function governor() public view returns (address) {\n', '        return _governor();\n', '    }\n', '\n', '    function _governor() internal view returns (address governorOut) {\n', '        bytes32 position = governorPosition;\n', '        assembly {\n', '            governorOut := sload(position)\n', '        }\n', '    }\n', '\n', '    function _pendingGovernor()\n', '        internal\n', '        view\n', '        returns (address pendingGovernor)\n', '    {\n', '        bytes32 position = pendingGovernorPosition;\n', '        assembly {\n', '            pendingGovernor := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(isGovernor(), "Caller is not the Governor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current Governor.\n', '     */\n', '    function isGovernor() public view returns (bool) {\n', '        return msg.sender == _governor();\n', '    }\n', '\n', '    function _setGovernor(address newGovernor) internal {\n', '        bytes32 position = governorPosition;\n', '        assembly {\n', '            sstore(position, newGovernor)\n', '        }\n', '    }\n', '\n', '    function _setPendingGovernor(address newGovernor) internal {\n', '        bytes32 position = pendingGovernorPosition;\n', '        assembly {\n', '            sstore(position, newGovernor)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\n', '     * Can only be called by the current Governor. Must be claimed for this to complete\n', '     * @param _newGovernor Address of the new Governor\n', '     */\n', '    function transferGovernance(address _newGovernor) external onlyGovernor {\n', '        _setPendingGovernor(_newGovernor);\n', '        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim Governance of the contract to a new account (`newGovernor`).\n', '     * Can only be called by the new Governor.\n', '     */\n', '    function claimGovernance() external {\n', '        require(\n', '            msg.sender == _pendingGovernor(),\n', '            "Only the pending Governor can complete the claim"\n', '        );\n', '        _changeGovernor(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Change Governance of the contract to a new account (`newGovernor`).\n', '     * @param _newGovernor Address of the new Governor\n', '     */\n', '    function _changeGovernor(address _newGovernor) internal {\n', '        require(_newGovernor != address(0), "New Governor is address(0)");\n', '        emit GovernorshipTransferred(_governor(), _newGovernor);\n', '        _setGovernor(_newGovernor);\n', '    }\n', '}\n', '\n', 'contract InitializableGovernable is Governable, Initializable {\n', '    function _initialize(address _governor) internal {\n', '        _changeGovernor(_governor);\n', '    }\n', '}\n', '\n', 'interface IStrategy {\n', '    /**\n', '     * @dev Deposit the given asset to Lending platform.\n', '     * @param _asset asset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(address _asset, uint256 _amount)\n', '        external\n', '        returns (uint256 amountDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given asset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _recipient,\n', '        address _asset,\n', '        uint256 _amount\n', '    ) external returns (uint256 amountWithdrawn);\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given asset.\n', '     */\n', '    function checkBalance(address _asset)\n', '        external\n', '        view\n', '        returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns bool indicating whether strategy supports asset.\n', '     */\n', '    function supportsAsset(address _asset) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Liquidate all assets in strategy and return them to Vault.\n', '     */\n', '    function liquidate() external;\n', '\n', '    /**\n', '     * @dev Get the APR for the Strategy.\n', '     */\n', '    function getAPR() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Collect reward tokens from the Strategy.\n', '     */\n', '    function collectRewardToken() external;\n', '}\n', '\n', 'interface ICERC20 {\n', '    /**\n', '     * @notice The mint function transfers an asset into the protocol, which begins accumulating\n', '     * interest based on the current Supply Rate for the asset. The user receives a quantity of\n', '     * cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\n', '     * @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\n', '     * @return 0 on success, otherwise an Error codes\n', '     */\n', '    function mint(uint256 mintAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Sender redeems cTokens in exchange for the underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param redeemTokens The number of cTokens to redeem into underlying\n', '     * @return uint 0=success, otherwise an error code.\n', '     */\n', '    function redeem(uint256 redeemTokens) external returns (uint256);\n', '\n', '    /**\n', '     * @notice The redeem underlying function converts cTokens into a specified quantity of the underlying\n', '     * asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of\n', '     * underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less\n', "     * than the user's Account Liquidity and the market's available liquidity.\n", '     * @param redeemAmount The amount of underlying to be redeemed.\n', '     * @return 0 on success, otherwise an error code.\n', '     */\n', '    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n', '\n', '    /**\n', "     * @notice The user's underlying balance, representing their assets in the protocol, is equal to\n", "     * the user's cToken balance multiplied by the Exchange Rate.\n", '     * @param owner The account to get the underlying balance of.\n', '     * @return The amount of underlying currently owned by the account.\n', '     */\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Calculates the exchange rate from the underlying to the CToken\n', '     * @dev This function does not accrue interest before calculating the exchange rate\n', '     * @return Calculated exchange rate scaled by 1e18\n', '     */\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Get the token balance of the `owner`\n', '     * @param owner The address of the account to query\n', '     * @return The number of tokens owned by `owner`\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Get the supply rate per block for supplying the token to Compound.\n', '     */\n', '    function supplyRatePerBlock() external view returns (uint256);\n', '}\n', '\n', 'contract InitializableAbstractStrategy is IStrategy, Initializable, Governable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    event PTokenAdded(address indexed _asset, address _pToken);\n', '    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\n', '    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\n', '\n', '    // Core address for the given platform\n', '    address public platformAddress;\n', '\n', '    address public vaultAddress;\n', '\n', '    // asset => pToken (Platform Specific Token Address)\n', '    mapping(address => address) public assetToPToken;\n', '\n', '    // Full list of all assets supported here\n', '    address[] internal assetsMapped;\n', '\n', '    // Reward token address\n', '    address public rewardTokenAddress;\n', '\n', '    /**\n', '     * @dev Internal initialize function, to set up initial internal state\n', '     * @param _platformAddress jGeneric platform address\n', '     * @param _vaultAddress Address of the Vault\n', '     * @param _rewardTokenAddress Address of reward token for platform\n', '     * @param _assets Addresses of initial supported assets\n', '     * @param _pTokens Platform Token corresponding addresses\n', '     */\n', '    function initialize(\n', '        address _platformAddress,\n', '        address _vaultAddress,\n', '        address _rewardTokenAddress,\n', '        address[] calldata _assets,\n', '        address[] calldata _pTokens\n', '    ) external onlyGovernor initializer {\n', '        InitializableAbstractStrategy._initialize(\n', '            _platformAddress,\n', '            _vaultAddress,\n', '            _rewardTokenAddress,\n', '            _assets,\n', '            _pTokens\n', '        );\n', '    }\n', '\n', '    function _initialize(\n', '        address _platformAddress,\n', '        address _vaultAddress,\n', '        address _rewardTokenAddress,\n', '        address[] memory _assets,\n', '        address[] memory _pTokens\n', '    ) internal {\n', '        platformAddress = _platformAddress;\n', '        vaultAddress = _vaultAddress;\n', '        rewardTokenAddress = _rewardTokenAddress;\n', '        uint256 assetCount = _assets.length;\n', '        require(assetCount == _pTokens.length, "Invalid input arrays");\n', '        for (uint256 i = 0; i < assetCount; i++) {\n', '            _setPTokenAddress(_assets[i], _pTokens[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Verifies that the caller is the Vault.\n', '     */\n', '    modifier onlyVault() {\n', '        require(msg.sender == vaultAddress, "Caller is not the Vault");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Verifies that the caller is the Vault or Governor.\n', '     */\n', '    modifier onlyVaultOrGovernor() {\n', '        require(\n', '            msg.sender == vaultAddress || msg.sender == governor(),\n', '            "Caller is not the Vault or Governor"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the reward token address.\n', '     * @param _rewardTokenAddress Address of the reward token\n', '     */\n', '    function setRewardTokenAddress(address _rewardTokenAddress)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        rewardTokenAddress = _rewardTokenAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Provide support for asset by passing its pToken address.\n', '     *      This method can only be called by the system Governor\n', '     * @param _asset    Address for the asset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function setPTokenAddress(address _asset, address _pToken)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        _setPTokenAddress(_asset, _pToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Provide support for asset by passing its pToken address.\n', '     *      Add to internal mappings and execute the platform specific,\n', '     * abstract method `_abstractSetPToken`\n', '     * @param _asset    Address for the asset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function _setPTokenAddress(address _asset, address _pToken) internal {\n', '        require(assetToPToken[_asset] == address(0), "pToken already set");\n', '        require(\n', '            _asset != address(0) && _pToken != address(0),\n', '            "Invalid addresses"\n', '        );\n', '\n', '        assetToPToken[_asset] = _pToken;\n', '        assetsMapped.push(_asset);\n', '\n', '        emit PTokenAdded(_asset, _pToken);\n', '\n', '        _abstractSetPToken(_asset, _pToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to governor. Intended for recovering tokens stuck in\n', '     *      strategy contracts, i.e. mistaken sends.\n', '     * @param _asset Address for the asset\n', '     * @param _amount Amount of the asset to transfer\n', '     */\n', '    function transferToken(address _asset, uint256 _amount)\n', '        public\n', '        onlyGovernor\n', '    {\n', '        IERC20(_asset).transfer(governor(), _amount);\n', '    }\n', '\n', '    /***************************************\n', '                 Abstract\n', '    ****************************************/\n', '\n', '    function _abstractSetPToken(address _asset, address _pToken) internal;\n', '\n', '    function safeApproveAllTokens() external;\n', '\n', '    /**\n', '     * @dev Deposit a amount of asset into the platform\n', '     * @param _asset               Address for the asset\n', '     * @param _amount              Units of asset to deposit\n', '     * @return amountDeposited     Quantity of asset that was deposited\n', '     */\n', '    function deposit(address _asset, uint256 _amount)\n', '        external\n', '        returns (uint256 amountDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw an amount of asset from the platform.\n', '     * @param _recipient         Address to which the asset should be sent\n', '     * @param _asset             Address of the asset\n', '     * @param _amount            Units of asset to withdraw\n', '     * @return amountWithdrawn   Quantity of asset that was withdrawn\n', '     */\n', '    function withdraw(\n', '        address _recipient,\n', '        address _asset,\n', '        uint256 _amount\n', '    ) external returns (uint256 amountWithdrawn);\n', '\n', '    /**\n', '     * @dev Liquidate entire contents of strategy sending assets to Vault.\n', '     */\n', '    function liquidate() external;\n', '\n', '    /**\n', '     * @dev Get the total asset value held in the platform.\n', '     *      This includes any interest that was generated since depositing.\n', '     * @param _asset      Address of the asset\n', '     * @return balance    Total value of the asset in the platform\n', '     */\n', '    function checkBalance(address _asset)\n', '        external\n', '        view\n', '        returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Check if an asset is supported.\n', '     * @param _asset    Address of the asset\n', '     * @return bool     Whether asset is supported\n', '     */\n', '    function supportsAsset(address _asset) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Get the weighted APR for all assets.\n', '     * @return uint256 APR for Strategy\n', '     */\n', '    function getAPR() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Get the APR for a single asset.\n', '     * @param _asset    Address of the asset\n', '     * @return uint256 APR for single asset in Strategy\n', '     */\n', '    function getAssetAPR(address _asset) external view returns (uint256);\n', '}\n', '\n', 'contract CompoundStrategy is InitializableAbstractStrategy {\n', '    event RewardTokenCollected(address recipient, uint256 amount);\n', '    event SkippedWithdrawal(address asset, uint256 amount);\n', '\n', '    /**\n', '     * @dev Collect accumulated reward token (COMP) and send to Vault.\n', '     */\n', '    function collectRewardToken() external onlyVault {\n', '        IERC20 compToken = IERC20(rewardTokenAddress);\n', '        uint256 balance = compToken.balanceOf(address(this));\n', '        require(\n', '            compToken.transfer(vaultAddress, balance),\n', '            "Reward token transfer failed"\n', '        );\n', '\n', '        emit RewardTokenCollected(vaultAddress, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Deposit asset into Compound\n', '     * @param _asset Address of asset to deposit\n', '     * @param _amount Amount of asset to deposit\n', '     * @return amountDeposited Amount of asset that was deposited\n', '     */\n', '    function deposit(address _asset, uint256 _amount)\n', '        external\n', '        onlyVault\n', '        returns (uint256 amountDeposited)\n', '    {\n', '        require(_amount > 0, "Must deposit something");\n', '\n', '        ICERC20 cToken = _getCTokenFor(_asset);\n', '        require(cToken.mint(_amount) == 0, "cToken mint failed");\n', '\n', '        amountDeposited = _amount;\n', '\n', '        emit Deposit(_asset, address(cToken), amountDeposited);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw asset from Compound\n', '     * @param _recipient Address to receive withdrawn asset\n', '     * @param _asset Address of asset to withdraw\n', '     * @param _amount Amount of asset to withdraw\n', '     * @return amountWithdrawn Amount of asset that was withdrawn\n', '     */\n', '    function withdraw(\n', '        address _recipient,\n', '        address _asset,\n', '        uint256 _amount\n', '    ) external onlyVault returns (uint256 amountWithdrawn) {\n', '        require(_amount > 0, "Must withdraw something");\n', '        require(_recipient != address(0), "Must specify recipient");\n', '\n', '        ICERC20 cToken = _getCTokenFor(_asset);\n', '        // If redeeming 0 cTokens, just skip, else COMP will revert\n', '        uint256 cTokensToRedeem = _convertUnderlyingToCToken(cToken, _amount);\n', '        if (cTokensToRedeem == 0) {\n', '            emit SkippedWithdrawal(_asset, _amount);\n', '            return 0;\n', '        }\n', '\n', '        amountWithdrawn = _amount;\n', '\n', '        require(cToken.redeemUnderlying(_amount) == 0, "Redeem failed");\n', '\n', '        IERC20(_asset).safeTransfer(_recipient, amountWithdrawn);\n', '\n', '        emit Withdrawal(_asset, address(cToken), amountWithdrawn);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove all assets from platform and send them to Vault contract.\n', '     */\n', '    function liquidate() external onlyVaultOrGovernor {\n', '        for (uint256 i = 0; i < assetsMapped.length; i++) {\n', '            // Redeem entire balance of cToken\n', '            ICERC20 cToken = _getCTokenFor(assetsMapped[i]);\n', '            if (cToken.balanceOf(address(this)) > 0) {\n', '                cToken.redeem(cToken.balanceOf(address(this)));\n', '                // Transfer entire balance to Vault\n', '                IERC20 asset = IERC20(assetsMapped[i]);\n', '                asset.safeTransfer(\n', '                    vaultAddress,\n', '                    asset.balanceOf(address(this))\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total asset value held in the platform\n', '     *      This includes any interest that was generated since depositing\n', '     *      Compound exchange rate between the cToken and asset gradually increases,\n', '     *      causing the cToken to be worth more corresponding asset.\n', '     * @param _asset      Address of the asset\n', '     * @return balance    Total value of the asset in the platform\n', '     */\n', '    function checkBalance(address _asset)\n', '        external\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        // Balance is always with token cToken decimals\n', '        ICERC20 cToken = _getCTokenFor(_asset);\n', '        balance = _checkBalance(cToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total asset value held in the platform\n', '     *      underlying = (cTokenAmt * exchangeRate) / 1e18\n', '     * @param _cToken     cToken for which to check balance\n', '     * @return balance    Total value of the asset in the platform\n', '     */\n', '    function _checkBalance(ICERC20 _cToken)\n', '        internal\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        uint256 cTokenBalance = _cToken.balanceOf(address(this));\n', '        uint256 exchangeRate = _cToken.exchangeRateStored();\n', '        // e.g. 50e8*205316390724364402565641705 / 1e18 = 1.0265..e18\n', '        balance = cTokenBalance.mul(exchangeRate).div(1e18);\n', '    }\n', '\n', '    /**\n', '     * @dev Retuns bool indicating whether asset is supported by strategy\n', '     * @param _asset Address of the asset\n', '     */\n', '    function supportsAsset(address _asset) external view returns (bool) {\n', '        return assetToPToken[_asset] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the spending of all assets by their corresponding cToken,\n', '     *      if for some reason is it necessary. Only callable through Governance.\n', '     */\n', '    function safeApproveAllTokens() external {\n', '        uint256 assetCount = assetsMapped.length;\n', '        for (uint256 i = 0; i < assetCount; i++) {\n', '            address asset = assetsMapped[i];\n', '            address cToken = assetToPToken[asset];\n', '            // Safe approval\n', '            IERC20(asset).safeApprove(cToken, 0);\n', '            IERC20(asset).safeApprove(cToken, uint256(-1));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get the weighted APR for all assets in strategy.\n', '     * @return APR in 1e18\n', '     */\n', '    function getAPR() external view returns (uint256) {\n', '        uint256 totalValue = 0;\n', '        for (uint256 i = 0; i < assetsMapped.length; i++) {\n', '            ICERC20 cToken = _getCTokenFor(assetsMapped[i]);\n', '            totalValue += _checkBalance(cToken);\n', '        }\n', '\n', '        if (totalValue == 0) return 0;\n', '\n', '        uint256 totalAPR = 0;\n', '        for (uint256 i = 0; i < assetsMapped.length; i++) {\n', '            ICERC20 cToken = _getCTokenFor(assetsMapped[i]);\n', '            totalAPR += _checkBalance(cToken)\n', '                .mul(_getAssetAPR(assetsMapped[i]))\n', '                .div(totalValue);\n', '        }\n', '\n', '        return totalAPR;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the APR for a single asset.\n', '     * @param _asset Address of the asset\n', '     * @return APR in 1e18\n', '     */\n', '    function getAssetAPR(address _asset) external view returns (uint256) {\n', '        return _getAssetAPR(_asset);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal method to get the APR for a single asset.\n', '     * @param _asset Address of the asset\n', '     * @return APR in 1e18\n', '     */\n', '    function _getAssetAPR(address _asset) internal view returns (uint256) {\n', '        ICERC20 cToken = _getCTokenFor(_asset);\n', '        // Extrapolate to a year assuming 6,500 blocks per day times 365.\n', '        return cToken.supplyRatePerBlock().mul(2372500);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal method to respond to the addition of new asset / cTokens\n', '     *      We need to approve the cToken and give it permission to spend the asset\n', '     * @param _asset Address of the asset to approve\n', '     * @param _cToken This cToken has the approval approval\n', '     */\n', '    function _abstractSetPToken(address _asset, address _cToken) internal {\n', '        // Safe approval\n', '        IERC20(_asset).safeApprove(_cToken, 0);\n', '        IERC20(_asset).safeApprove(_cToken, uint256(-1));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the cToken wrapped in the ICERC20 interface for this asset.\n', "     *      Fails if the pToken doesn't exist in our mappings.\n", '     * @param _asset Address of the asset\n', '     * @return Corresponding cToken to this asset\n', '     */\n', '    function _getCTokenFor(address _asset) internal view returns (ICERC20) {\n', '        address cToken = assetToPToken[_asset];\n', '        require(cToken != address(0), "cToken does not exist");\n', '        return ICERC20(cToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an underlying amount into cToken amount\n', '     *      cTokenAmt = (underlying * 1e18) / exchangeRate\n', '     * @param _cToken     cToken for which to change\n', '     * @param _underlying Amount of underlying to convert\n', '     * @return amount     Equivalent amount of cTokens\n', '     */\n', '    function _convertUnderlyingToCToken(ICERC20 _cToken, uint256 _underlying)\n', '        internal\n', '        view\n', '        returns (uint256 amount)\n', '    {\n', '        uint256 exchangeRate = _cToken.exchangeRateStored();\n', '        // e.g. 1e18*1e18 / 205316390724364402565641705 = 50e8\n', '        // e.g. 1e8*1e18 / 205316390724364402565641705 = 0.45 or 0\n', '        amount = _underlying.mul(1e18).div(exchangeRate);\n', '    }\n', '}']