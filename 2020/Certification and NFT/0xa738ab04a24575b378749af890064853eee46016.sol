['pragma solidity 0.6.8;\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two unsigned integers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint value) external  returns (bool success);\n', '  function transferFrom(address from, address to, uint value) external returns (bool success);\n', '  function approve(address spender, uint amount) external returns (bool success);\n', '}\n', '\n', '// https://en.wikipedia.org/wiki/Cura_Annonae\n', 'contract CuraAnnonae {\n', '  using SafeMath for uint256;\n', '\n', '  // variables.\n', '  ERC20 public YFMSToken;\n', '  address public owner;\n', '  uint256 public numberOfVaults;\n', '  uint256 public rewardsBalance;\n', '  uint256 public lastRewardUpdate = 0;\n', '  uint256 public currentDailyReward;\n', '\n', '  // mappings.\n', '  mapping(string => mapping(address => uint256)) internal vaults_data; // { VaultName: { UserAddress: value }}\n', '\n', '  constructor(address _wallet) public {\n', '    owner = msg.sender;\n', '    YFMSToken = ERC20(_wallet);\n', '  }\n', '\n', '  // view the number of tokens left to distribute.\n', '  function getRewardsBalance() public view returns (uint256) {\n', '    return YFMSToken.balanceOf(address(this));\n', '  }\n', '\n', '  // view the current daily reward for all vaults.\n', '  function getDailyReward() public view returns (uint256) {\n', '    return currentDailyReward;\n', '  }\n', '\n', '  function getNumberOfVaults() public view returns (uint256) {\n', '    return numberOfVaults;\n', '  }\n', '\n', '  // get user balance in specific vault.\n', '  function getUserBalanceInVault(string memory _vault, address _user) public view returns (uint256) {\n', '    require(vaults_data[_vault][_user] >= 0);\n', '    return vaults_data[_vault][_user];\n', '  }\n', '\n', '  // calculate the daily reward for all vaults.\n', '  function updateDailyReward() public {\n', '    require(msg.sender == owner);\n', '    require(now.sub(lastRewardUpdate) >= 1 days || lastRewardUpdate == 0);\n', '    lastRewardUpdate = now;\n', '    currentDailyReward = YFMSToken.balanceOf(address(this)) / 10000 * 40;\n', '  }\n', '\n', '  // staking rewards distributed\n', '  // called from vaults.\n', '  function updateVaultData(string memory vault, address who, address user, uint256 value) public {\n', '    require(msg.sender == who);\n', '    require(value > 0);\n', '    vaults_data[vault][user] = vaults_data[vault][user].add(value);\n', '  }\n', '\n', '  // add a vault.\n', '  function addVault(string memory name) public {\n', '    require(msg.sender == owner);\n', '    // initialize new vault.\n', '    vaults_data[name][msg.sender] = 0; \n', '    // increment number of vaults.\n', '    numberOfVaults = numberOfVaults.add(1);\n', '  }\n', '\n', '  // enables users to stake stable coins/ YFMS from their respective vaults.\n', '  // called from vaults.\n', '  function stake(string memory _vault, address _receiver, uint256 _amount, address vault) public returns (bool) {\n', '    require(msg.sender == vault); // require that the vault is calling the contract.\n', '    // update mapping.\n', '    vaults_data[_vault][_receiver] = vaults_data[_vault][_receiver].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  // enables users to unstake staked coins at a 2.5% cost (tokens will be burned).\n', '  // called from vaults.\n', '  function unstake(string memory _vault, address _receiver, address vault) public {\n', '    require(msg.sender == vault); // require that the vault is calling the contract.\n', '    // remove staked balance.\n', '    vaults_data[_vault][_receiver] = 0;\n', '  }\n', '\n', '  function distributeRewardsToVault(address vault) public {\n', '    require(msg.sender == owner);\n', '    require(currentDailyReward > 0);\n', "    // perhaps an additional require to ensure this vault hasn't already received rewards today.\n", '    // determine how many tokens to send to vault.\n', '    uint256 rewards = currentDailyReward.div(numberOfVaults);\n', '    YFMSToken.transfer(vault, rewards);\n', '  }\n', '}']