['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']
['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n']
['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./Ownable.sol" ;\n', '\n', '//@title PRDX Token contract interface\n', 'interface PRDX_token {                                     \n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', '//@title PRDX Initial Distribution Contract\n', '//@author Predix Network Team\n', 'contract PRDXDistr is Ownable{\n', '    uint256 public PRDXPrice ;\n', '    \n', '    address public token_addr ; \n', '    PRDX_token token_contract = PRDX_token(token_addr) ;\n', '    \n', '    event sold(address seller, uint256 amount) ;\n', '    event bought(address buyer, uint256 amount) ;\n', '    event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; \n', '\n', '    constructor(uint256 PRDXperETH) {\n', '        PRDXPrice = PRDXperETH ; \n', '    }\n', '\n', '    /**\n', '     * @dev Multiply two integers with extra checking the result\n', '     * @param   a Integer 1 \n', '     *          b Integer 2\n', '     */\n', '    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0 ;\n', '        } else {\n', '            uint256 c = a * b ;\n', '            assert(c / a == b) ;\n', '            return c ;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Divide two integers with checking b is positive\n', '     * @param   a Integer 1 \n', '     *          b Integer 2\n', '     */\n', '    function safeDivide(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); \n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev Set PRDX Token contract address\n', '     * @param addr Address of PRDX Token contract\n', '     */\n', '    function set_token_contract(address addr) public onlyOwner {\n', '        token_addr = addr ;\n', '        token_contract = PRDX_token(token_addr) ;\n', '    }\n', '    \n', '    /**\n', '     * @dev Sell PRDX tokens through Predix Network token contract\n', '     * @param   seller Account to sell PRDX tokens from\n', '     *          amount Amount of PRDX to sell\n', '     */\n', '    function sell_PRDX(address payable seller, uint256 amount) public returns (bool success) {\n', '        require(token_contract.transferFrom(seller, address(this), amount), "Error transacting tokens to contract") ;\n', '        \n', '        uint256 a = safeDivide(amount, PRDXPrice) ; \n', '        \n', '        seller.transfer(a) ; \n', '        \n', '        emit sold(seller, a) ; \n', '        \n', '        return true ; \n', '    }\n', '\n', '    /**\n', '     * @dev Buy PRDX tokens directly from the contract\n', '     */\n', '    function buy_PRDX() public payable returns (bool success) {\n', '        require(msg.value > 0) ; \n', '        uint256 scaledAmount = safeMultiply(msg.value, PRDXPrice) ;\n', '        require(token_contract.balanceOf(address(this)) >= scaledAmount) ;\n', '\n', '        token_contract.transfer(msg.sender, scaledAmount) ;\n', '        \n', '        emit bought(msg.sender, scaledAmount) ; \n', '    \n', '        return true ; \n', '    }\n', '    \n', '    /**\n', '     * @dev Fallback function for when a user sends ether to the contract\n', '     * directly instead of calling the function\n', '     */\n', '    receive() external payable {\n', '        buy_PRDX() ; \n', '    }\n', '\n', '    /**\n', '     * @dev Adjust the PRDX token price\n', '     * @param   PRDXperETH the amount of PRDX a user receives for 1 ETH\n', '     */\n', '    function adjustPrice(uint PRDXperETH) public onlyOwner {\n', '        emit priceAdjusted(PRDXPrice, PRDXperETH) ; \n', '        \n', '        PRDXPrice = PRDXperETH ; \n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev End the PRDX token distribution by sending all leftover tokens and ether to the contract owner\n', '     */\n', '    function endPRDXDistr() public onlyOwner {             \n', '        require(token_contract.transfer(owner(), token_contract.balanceOf(address(this)))) ;\n', '\n', '        msg.sender.transfer(address(this).balance) ;\n', '    }\n', '}']
