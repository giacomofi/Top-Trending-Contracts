['pragma solidity ^0.5.15;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface WETH {\n', '    function deposit() external payable;\n', '    function withdraw(uint wad) external;\n', '    event Deposit(address indexed dst, uint wad);\n', '    event Withdrawal(address indexed src, uint wad);\n', '}\n', '\n', 'interface Controller {\n', '    function withdraw(address, uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function earn(address, uint) external;\n', '    function rewards() external view returns (address);\n', '}\n', '\n', 'contract VaultETH {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public token;\n', '    IERC20 public YFToken; // YF合约地址\n', '\n', '    uint public min = 9500;\n', '    uint public constant max = 10000;\n', '\n', '    uint public earnLowerlimit; // 池内空余资金到这个值就自动earn\n', '\n', '    address public governance;\n', '    address public controller;\n', '\n', '    struct Player {\n', '          uint256 stake;     // 质押总数\n', '          uint256 payout;    // 支出\n', '          uint256 total_out; // 已经领取的分红\n', '    }\n', '    mapping(address => Player) public player_; // (player => data) player data\n', '\n', '    struct Global {\n', '          uint256 total_stake;        // 总质押总数\n', '          uint256 total_out;          // 总分红金额\n', '          uint256 earnings_per_share; // 每股分红\n', '    }\n', '    mapping(uint256 => Global) public global_; // (global => data) global data\n', '    mapping (address => uint256) public deposittime;\n', '    uint256 constant internal magnitude = 10**40; // 10的40次方\n', '\n', '    address constant public yf = address(0x96F9632b25f874769969ff91219fCCb6ceDf26D2);\n', '\n', '    string public getName;\n', '\n', '    constructor (address _token) public {\n', '        token = IERC20(_token);\n', '        getName = string(abi.encodePacked("yf:Vault:", ERC20Detailed(_token).name()));\n', '\n', '        YFToken = IERC20(yf);\n', '        governance = tx.origin;\n', '        controller = 0xcC8d36211374a08fC61d74ed2E48e22b922C9D7C;\n', '    }\n', '\n', '    function balance() public view returns (uint) {\n', '        return token.balanceOf(address(this))\n', '               .add(Controller(controller).balanceOf(address(token)));\n', '    }\n', '\n', '    function setMin(uint _min) external {\n', '        require(msg.sender == governance, "!governance");\n', '        min = _min;\n', '    }\n', '\n', '    // 设置治理地址，必须验证原来治理地址的签名\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    // 设置目标token\n', '    function setToken(address _token) public {\n', '        require(msg.sender == governance, "!governance");\n', '        token = IERC20(_token);\n', '    }\n', '\n', '    // 设置控制器地址，必须验证治理地址的签名\n', '    function setController(address _controller) public {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n', '        require(msg.sender == governance, "!governance");\n', '        earnLowerlimit = _earnLowerlimit;\n', '    }\n', '\n', '    // Custom logic in here for how much the vault allows to be borrowed\n', '    // Sets minimum required on-hand to keep small withdrawals cheap\n', '    function available() public view returns (uint) {\n', '        return token.balanceOf(address(this)).mul(min).div(max);\n', '    }\n', '\n', '    // 抵押代币给Strategy合约进行理财，代币路径如下 vault->controller->strategy\n', '    function earn() public {\n', '        uint _bal = available(); // 获取最小需要转给机枪池进行获取收益的代币个数\n', '        token.safeTransfer(controller, _bal); // 转账给控制合约\n', '        Controller(controller).earn(address(token), _bal); // 抵押代币给Strategy合约进行理财\n', '    }\n', '\n', '    // 存款 可以追加存款\n', '    function deposit() public payable {\n', '        // uint _before = token.balanceOf(address(this));\n', '        // uint amount = msg.value;\n', '        // WETH(address(token)).deposit.value(amount)();\n', '        // uint _after = token.balanceOf(address(this));\n', '        // amount = _after.sub(_before); // Additional check for deflationary tokens\n', '\n', '        uint amount = msg.value;\n', '        WETH(address(token)).deposit.value(amount)(); //Convert ETH into the WETH\n', '        // 增加该用户的存款总数\n', '        player_[msg.sender].stake = player_[msg.sender].stake.add(amount);\n', '        // 如果每股分红为0\n', '        if (global_[0].earnings_per_share != 0) {\n', '            player_[msg.sender].payout = player_[msg.sender].payout.add(\n', '                global_[0].earnings_per_share.mul(amount).sub(1).div(magnitude).add(1) // (((earnings_per_share*amount)-1)/magnitude)+1\n', '            );\n', '        }\n', '        // 增加全局已抵押的总量\n', '        global_[0].total_stake = global_[0].total_stake.add(amount);\n', '        // 如果当前池子合约中已经抵押的数量大于自动赚取收益的值时，自动将合约中的代币去第三方平台抵押\n', '        if (token.balanceOf(address(this)) > earnLowerlimit){\n', '            earn();\n', '        }\n', '        // 更新用户抵押时间\n', '        deposittime[msg.sender] = now;\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    // 取款\n', '    function withdraw(uint amount) external {\n', '        claim(); // 首先获取当前未领取的收益\n', '        require(amount <= player_[msg.sender].stake, "!balance");\n', '        uint r = amount;\n', '\n', '        // Check balance\n', '        uint b = token.balanceOf(address(this));\n', '        if (b < r) { // 如果vault合约中代币余额小于用户取款的余额，则需要去Strategy合约取款获得对应的代币\n', '            uint _withdraw = r.sub(b);\n', '            Controller(controller).withdraw(address(token), _withdraw); // 取款\n', '            uint _after = token.balanceOf(address(this));\n', '            uint _diff = _after.sub(b);\n', '            if (_diff < _withdraw) { // 策略器有可能会返回的代币变多，所以需要更新vault合约中的余额\n', '                r = b.add(_diff);\n', '            }\n', '        }\n', '        // 更新用户的已提取余额并且更新全局的每股收益\n', '        player_[msg.sender].payout = player_[msg.sender].payout.sub(\n', '              global_[0].earnings_per_share.mul(amount).div(magnitude)\n', '        );\n', '        // 更新全局存款量和用户存款量\n', '        player_[msg.sender].stake = player_[msg.sender].stake.sub(amount);\n', '        global_[0].total_stake = global_[0].total_stake.sub(amount);\n', '\n', '        // 转账给用户取款的代币\n', '        WETH(address(token)).withdraw(r);\n', '        address(msg.sender).transfer(r);\n', '    }\n', '\n', '    // Strategy.harvest 触发分红（）\n', '    function make_profit(uint256 amount) public {\n', '        require(amount > 0, "not 0");\n', '        YFToken.safeTransferFrom(msg.sender, address(this), amount); // 挖矿收益存入当前合约（已扣除10%的手续费，90%的利润存进来）\n', '        global_[0].earnings_per_share = global_[0].earnings_per_share.add(\n', '            amount.mul(magnitude).div(global_[0].total_stake)\n', '        );\n', '        // 增加总分红金额\n', '        global_[0].total_out = global_[0].total_out.add(amount);\n', '    }\n', '\n', '    // 用户可领取的分红\n', '    function cal_out(address user) public view returns (uint256) {\n', '        uint256 _cal = global_[0].earnings_per_share.mul(player_[user].stake).div(magnitude);\n', '        if (_cal < player_[user].payout) {\n', '            return 0;\n', '        } else {\n', '            return _cal.sub(player_[user].payout);\n', '        }\n', '    }\n', '\n', '    // 某个用户在路上的分红（也就是分红还没有从挖矿合约领取.只能看到，无法领取，等harvest触发后就可以领取了）\n', '    function cal_out_pending(uint256 _pendingBalance,address user) public view returns (uint256) {\n', '        uint256 _earnings_per_share = global_[0].earnings_per_share.add(\n', '            _pendingBalance.mul(magnitude).div(global_[0].total_stake)\n', '        );\n', '  \n', '        uint256 _cal = _earnings_per_share.mul(player_[user].stake).div(magnitude);\n', '        _cal = _cal.sub(cal_out(user));\n', '        if (_cal < player_[user].payout) {\n', '            return 0;\n', '        } else {\n', '            return _cal.sub(player_[user].payout);\n', '        }\n', '    }\n', '\n', '    // 用户领取分红\n', '    function claim() public {\n', '        uint256 out = cal_out(msg.sender);\n', '        player_[msg.sender].payout = global_[0].earnings_per_share.mul(player_[msg.sender].stake).div(magnitude);\n', '        player_[msg.sender].total_out = player_[msg.sender].total_out.add(out);\n', '\n', '        if (out > 0) {\n', '            uint256 _depositTime = now - deposittime[msg.sender];\n', '            if (_depositTime < 1 days) { // deposit in 24h\n', '                uint256 actually_out = _depositTime.mul(out).mul(1e18).div(1 days).div(1e18);\n', '                uint256 to_team = out.sub(actually_out);\n', '                YFToken.safeTransfer(Controller(controller).rewards(), to_team);\n', '                out = actually_out;\n', '            }\n', '            YFToken.safeTransfer(msg.sender, out);\n', '        }\n', '    }\n', '\n', '    // 合约的fallback函数调用了deposit方法（存款），这也意味着使用imtoken这样的钱包，直接给该合约地址转账以太币就能够完成兑换WETH\n', '    function () external payable {\n', '        if (msg.sender != address(token)) {\n', '            deposit();\n', '        }\n', '    }\n', '}']