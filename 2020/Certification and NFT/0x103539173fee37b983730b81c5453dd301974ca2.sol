['// File: contracts/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/BrainLootbox.sol\n', '\n', '// Brain/WETH Locked LP\n', '// https://nobrainer.finance/\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', 'interface IBrainNFT {\n', '  function addCard(uint256 maxSupply) external returns (uint256);\n', '  function mint(address to, uint256 id, uint256 amount) external;\n', '}\n', '\n', 'contract BrainLootbox is Ownable {\n', '  using SafeMath for uint256;\n', '  address public NFTAddress;\n', '  mapping(address => bool) public isFarmAddress;\n', '\n', '  constructor(address _brainFarm, address _lockedLPFarm, address _NFTAddress) public {\n', '    isFarmAddress[_brainFarm] = true;\n', '    isFarmAddress[_lockedLPFarm] = true;\n', '    NFTAddress = _NFTAddress;\n', '  }\n', '\n', '  event AddLootBox(uint256 id);\n', '  event CardRedeemed(address user, uint256 id, uint256 card);\n', '\n', '  uint256 private createdLootboxes;\n', '  mapping(uint256 => LootBox) public lootbox;\n', '\n', '  function getPrice(uint256 _id) public view returns (uint256) {\n', '    return lootbox[_id].price;\n', '  }\n', '\n', '  struct LootBox {\n', '    uint256 seed;\n', '    string name;\n', '    uint256 price;\n', '    uint256[] cardIds;\n', '    uint256[] cardAmounts;\n', '    uint256 totalCards;\n', '  }\n', '\n', '  /*\n', '  Gas consumption in function "addLootBox" in contract "BrainLootbox" depends on the size of data structures that may grow unboundedly. \n', '  The highlighted assignment overwrites or deletes a state variable that contains an array. When assigning to or deleting storage arrays, \n', '    the Solidity compiler emits an implicit clearing loop.\n', '  If the array grows too large, the gas required to execute the code will exceed the block gas limit, effectively causing a denial-of-service condition. \n', '  Consider that an attacker might attempt to cause this condition on purpose.\n', '  https://swcregistry.io/docs/SWC-128\n', '  \n', "  AUDITOR NOTE: Since this function has the onlyOwner modifier, this vulnerability can't be executed by other users.\n", '    Be aware to increase the gas limit when executing the function over a large array.\n', '  */\n', '  function addLootBox(string memory _name, uint256 _price, uint256[] memory _cardAmounts) public onlyOwner returns (uint256[] memory) {\n', '    require(_price > 0, "Price must be greater than 0");\n', '    createdLootboxes = createdLootboxes.add(1);\n', '    lootbox[createdLootboxes].name = _name;\n', '    lootbox[createdLootboxes].price = _price;\n', '    lootbox[createdLootboxes].cardAmounts = _cardAmounts;\n', '    uint256 total;\n', '    for (uint256 i = 0; i < _cardAmounts.length; i++) {\n', '      total = total.add(_cardAmounts[i]);\n', '      lootbox[createdLootboxes].cardIds.push(IBrainNFT(NFTAddress).addCard(_cardAmounts[i]));\n', '    }\n', '    lootbox[createdLootboxes].totalCards = total;\n', '    lootbox[createdLootboxes].seed = uint256(keccak256(abi.encodePacked(now, _price, _name, block.difficulty)));\n', '    emit AddLootBox(createdLootboxes);\n', '    return lootbox[createdLootboxes].cardIds;\n', '  }\n', '\n', '  function remainingCards(uint256 _id) public view returns (uint256) {\n', '    return lootbox[_id].totalCards;\n', '  }\n', '\n', '/*\n', '  Gas consumption in function "addLootBox" in contract "BrainLootbox" depends on the size of data structures that may grow unboundedly. \n', '  The highlighted assignment overwrites or deletes a state variable that contains an array. When assigning to or deleting storage arrays, \n', '    the Solidity compiler emits an implicit clearing loop.\n', '  If the array grows too large, the gas required to execute the code will exceed the block gas limit, effectively causing a denial-of-service condition. \n', '  Consider that an attacker might attempt to cause this condition on purpose.\n', '  https://swcregistry.io/docs/SWC-128\n', '  \n', '  AUDITOR NOTE: Provided the mapping of lootbox to cardIds array is not too large this should not be a major issue.\n', '    But, can still fall prey to a deliberate denial-of-service attack by sending a transaction lower enough to halt processing.\n', "    Provided the array size of lootbox[id].cardIds.length does not grow so large as to allow of a under gased transaction to make it's way through through the network.\n", '    Generally, this should be resolved by a tansaction with just a low gas limit geting stuck.\n', '  */\n', '  function redeem(uint256 id, address to) public {\n', '    require(isFarmAddress[_msgSender()] == true, "Only NFT Farm can call this method");\n', '    require(id != 0 && id <= createdLootboxes, "Lootbox does not exist");\n', '    require(lootbox[id].totalCards > 0, "No cards left in lootbox");\n', '    uint256 rand = uint256(keccak256(abi.encodePacked(now, lootbox[id].totalCards, lootbox[id].seed, block.difficulty)));\n', '    lootbox[id].seed = rand;\n', '    uint256 pickedCard = rand.mod(lootbox[id].totalCards);\n', '    uint256 counted;\n', '    uint256[] memory _cardAmounts = lootbox[id].cardAmounts;\n', '    \n', '    for (\n', '        uint256 i = 0; \n', '        i < lootbox[id].cardIds.length;\n', '        i++\n', '    ) {\n', '      counted = counted.add(_cardAmounts[i]);\n', '      if (pickedCard < counted) {\n', '        IBrainNFT(NFTAddress).mint(to, lootbox[id].cardIds[i], 1);\n', '        lootbox[id].cardAmounts[i] = lootbox[id].cardAmounts[i].sub(1);\n', '        lootbox[id].totalCards = lootbox[id].totalCards.sub(1);\n', '        emit CardRedeemed(to, id, lootbox[id].cardIds[i]);\n', '        break;\n', '      }\n', '    }\n', '  }\n', '}']