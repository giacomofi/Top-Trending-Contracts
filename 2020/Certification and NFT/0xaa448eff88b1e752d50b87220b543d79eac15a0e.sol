['// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @kyber.network/utils-sc/contracts/IERC20Ext.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface extending ERC20 standard to include decimals() as\n', ' *      it is optional in the OpenZeppelin IERC20 interface.\n', ' */\n', 'interface IERC20Ext is IERC20 {\n', '    /**\n', '     * @dev This function is required as Kyber requires to interact\n', '     *      with token.decimals() with many of its operations.\n', '     */\n', '    function decimals() external view returns (uint8 digits);\n', '}\n', '\n', '// File: contracts/sol6/IKyberReserve.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', 'interface IKyberReserve {\n', '    function trade(\n', '        IERC20Ext srcToken,\n', '        uint256 srcAmount,\n', '        IERC20Ext destToken,\n', '        address payable destAddress,\n', '        uint256 conversionRate,\n', '        bool validate\n', '    ) external payable returns (bool);\n', '\n', '    function getConversionRate(\n', '        IERC20Ext src,\n', '        IERC20Ext dest,\n', '        uint256 srcQty,\n', '        uint256 blockNumber\n', '    ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/sol6/IWeth.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', 'interface IWeth is IERC20Ext {\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/sol6/IKyberSanity.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', 'interface IKyberSanity {\n', '    function getSanityRate(IERC20Ext src, IERC20Ext dest) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/sol6/IConversionRates.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', 'interface IConversionRates {\n', '\n', '    function recordImbalance(\n', '        IERC20Ext token,\n', '        int buyAmount,\n', '        uint256 rateUpdateBlock,\n', '        uint256 currentBlock\n', '    ) external;\n', '\n', '    function getRate(\n', '        IERC20Ext token,\n', '        uint256 currentBlockNumber,\n', '        bool buy,\n', '        uint256 qty\n', '    ) external view returns(uint256);\n', '}\n', '\n', '// File: @kyber.network/utils-sc/contracts/Utils.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '/**\n', ' * @title Kyber utility file\n', ' * mostly shared constants and rate calculation helpers\n', ' * inherited by most of kyber contracts.\n', ' * previous utils implementations are for previous solidity versions.\n', ' */\n', 'contract Utils {\n', '    /// Declared constants below to be used in tandem with\n', '    /// getDecimalsConstant(), for gas optimization purposes\n', '    /// which return decimals from a constant list of popular\n', '    /// tokens.\n', '    IERC20Ext internal constant ETH_TOKEN_ADDRESS = IERC20Ext(\n', '        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    );\n', '    IERC20Ext internal constant USDT_TOKEN_ADDRESS = IERC20Ext(\n', '        0xdAC17F958D2ee523a2206206994597C13D831ec7\n', '    );\n', '    IERC20Ext internal constant DAI_TOKEN_ADDRESS = IERC20Ext(\n', '        0x6B175474E89094C44Da98b954EedeAC495271d0F\n', '    );\n', '    IERC20Ext internal constant USDC_TOKEN_ADDRESS = IERC20Ext(\n', '        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n', '    );\n', '    IERC20Ext internal constant WBTC_TOKEN_ADDRESS = IERC20Ext(\n', '        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\n', '    );\n', '    IERC20Ext internal constant KNC_TOKEN_ADDRESS = IERC20Ext(\n', '        0xdd974D5C2e2928deA5F71b9825b8b646686BD200\n', '    );\n', '    uint256 public constant BPS = 10000; // Basic Price Steps. 1 step = 0.01%\n', '    uint256 internal constant PRECISION = (10**18);\n', '    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\n', '    uint256 internal constant MAX_RATE = (PRECISION * 10**7); // up to 10M tokens per eth\n', '    uint256 internal constant MAX_DECIMALS = 18;\n', '    uint256 internal constant ETH_DECIMALS = 18;\n', '    uint256 internal constant MAX_ALLOWANCE = uint256(-1); // token.approve inifinite\n', '\n', '    mapping(IERC20Ext => uint256) internal decimals;\n', '\n', '    /// @dev Sets the decimals of a token to storage if not already set, and returns\n', '    ///      the decimals value of the token. Prefer using this function over\n', '    ///      getDecimals(), to avoid forgetting to set decimals in local storage.\n', '    /// @param token The token type\n', '    /// @return tokenDecimals The decimals of the token\n', '    function getSetDecimals(IERC20Ext token) internal returns (uint256 tokenDecimals) {\n', '        tokenDecimals = getDecimalsConstant(token);\n', '        if (tokenDecimals > 0) return tokenDecimals;\n', '\n', '        tokenDecimals = decimals[token];\n', '        if (tokenDecimals == 0) {\n', '            tokenDecimals = token.decimals();\n', '            decimals[token] = tokenDecimals;\n', '        }\n', '    }\n', '\n', '    /// @dev Get the balance of a user\n', '    /// @param token The token type\n', "    /// @param user The user's address\n", '    /// @return The balance\n', '    function getBalance(IERC20Ext token, address user) internal view returns (uint256) {\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            return user.balance;\n', '        } else {\n', '            return token.balanceOf(user);\n', '        }\n', '    }\n', '\n', '    /// @dev Get the decimals of a token, read from the constant list, storage,\n', '    ///      or from token.decimals(). Prefer using getSetDecimals when possible.\n', '    /// @param token The token type\n', '    /// @return tokenDecimals The decimals of the token\n', '    function getDecimals(IERC20Ext token) internal view returns (uint256 tokenDecimals) {\n', '        // return token decimals if has constant value\n', '        tokenDecimals = getDecimalsConstant(token);\n', '        if (tokenDecimals > 0) return tokenDecimals;\n', '\n', '        // handle case where token decimals is not a declared decimal constant\n', '        tokenDecimals = decimals[token];\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        return (tokenDecimals > 0) ? tokenDecimals : token.decimals();\n', '    }\n', '\n', '    function calcDestAmount(\n', '        IERC20Ext src,\n', '        IERC20Ext dest,\n', '        uint256 srcAmount,\n', '        uint256 rate\n', '    ) internal view returns (uint256) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(\n', '        IERC20Ext src,\n', '        IERC20Ext dest,\n', '        uint256 destAmount,\n', '        uint256 rate\n', '    ) internal view returns (uint256) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcDstQty(\n', '        uint256 srcQty,\n', '        uint256 srcDecimals,\n', '        uint256 dstDecimals,\n', '        uint256 rate\n', '    ) internal pure returns (uint256) {\n', '        require(srcQty <= MAX_QTY, "srcQty > MAX_QTY");\n', '        require(rate <= MAX_RATE, "rate > MAX_RATE");\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, "dst - src > MAX_DECIMALS");\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, "src - dst > MAX_DECIMALS");\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(\n', '        uint256 dstQty,\n', '        uint256 srcDecimals,\n', '        uint256 dstDecimals,\n', '        uint256 rate\n', '    ) internal pure returns (uint256) {\n', '        require(dstQty <= MAX_QTY, "dstQty > MAX_QTY");\n', '        require(rate <= MAX_RATE, "rate > MAX_RATE");\n', '\n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint256 numerator;\n', '        uint256 denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, "src - dst > MAX_DECIMALS");\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, "dst - src > MAX_DECIMALS");\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '\n', '    function calcRateFromQty(\n', '        uint256 srcAmount,\n', '        uint256 destAmount,\n', '        uint256 srcDecimals,\n', '        uint256 dstDecimals\n', '    ) internal pure returns (uint256) {\n', '        require(srcAmount <= MAX_QTY, "srcAmount > MAX_QTY");\n', '        require(destAmount <= MAX_QTY, "destAmount > MAX_QTY");\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, "dst - src > MAX_DECIMALS");\n', '            return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, "src - dst > MAX_DECIMALS");\n', '            return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);\n', '        }\n', '    }\n', '\n', '    /// @dev save storage access by declaring token decimal constants\n', '    /// @param token The token type\n', '    /// @return token decimals\n', '    function getDecimalsConstant(IERC20Ext token) internal pure returns (uint256) {\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            return ETH_DECIMALS;\n', '        } else if (token == USDT_TOKEN_ADDRESS) {\n', '            return 6;\n', '        } else if (token == DAI_TOKEN_ADDRESS) {\n', '            return 18;\n', '        } else if (token == USDC_TOKEN_ADDRESS) {\n', '            return 6;\n', '        } else if (token == WBTC_TOKEN_ADDRESS) {\n', '            return 8;\n', '        } else if (token == KNC_TOKEN_ADDRESS) {\n', '            return 18;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function minOf(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? y : x;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @kyber.network/utils-sc/contracts/PermissionGroups.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'contract PermissionGroups {\n', '    uint256 internal constant MAX_GROUP_SIZE = 50;\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address => bool) internal operators;\n', '    mapping(address => bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '\n', '    event AdminClaimed(address newAdmin, address previousAdmin);\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    event AlerterAdded(address newAlerter, bool isAdd);\n', '\n', '    constructor(address _admin) public {\n', '        require(_admin != address(0), "admin 0");\n', '        admin = _admin;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "only admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender], "only operator");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender], "only alerter");\n', '        _;\n', '    }\n', '\n', '    function getOperators() external view returns (address[] memory) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters() external view returns (address[] memory) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0), "new admin 0");\n', '        emit TransferAdminPending(newAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0), "admin 0");\n', '        emit TransferAdminPending(newAdmin);\n', '        emit AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender, "not pending");\n', '        emit AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter], "alerter exists"); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE, "max alerters");\n', '\n', '        emit AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter(address alerter) public onlyAdmin {\n', '        require(alerters[alerter], "not alerter");\n', '        alerters[alerter] = false;\n', '\n', '        for (uint256 i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.pop();\n', '                emit AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator], "operator exists"); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE, "max operators");\n', '\n', '        emit OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator(address operator) public onlyAdmin {\n', '        require(operators[operator], "not operator");\n', '        operators[operator] = false;\n', '\n', '        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.pop();\n', '                emit OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @kyber.network/utils-sc/contracts/Withdrawable.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '\n', 'contract Withdrawable is PermissionGroups {\n', '    using SafeERC20 for IERC20Ext;\n', '\n', '    event TokenWithdraw(IERC20Ext token, uint256 amount, address sendTo);\n', '    event EtherWithdraw(uint256 amount, address sendTo);\n', '\n', '    constructor(address _admin) public PermissionGroups(_admin) {}\n', '\n', '    /**\n', '     * @dev Withdraw all IERC20Ext compatible tokens\n', '     * @param token IERC20Ext The address of the token contract\n', '     */\n', '    function withdrawToken(\n', '        IERC20Ext token,\n', '        uint256 amount,\n', '        address sendTo\n', '    ) external onlyAdmin {\n', '        token.safeTransfer(sendTo, amount);\n', '        emit TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint256 amount, address payable sendTo) external onlyAdmin {\n', '        (bool success, ) = sendTo.call{value: amount}("");\n', '        require(success, "withdraw failed");\n', '        emit EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/sol6/KyberFprReserveV2.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title KyberFprReserve version 2\n', '/// Allow Reserve to work work with either weth or eth.\n', '/// for working with weth should specify external address to hold weth.\n', '/// Allow Reserve to set maxGasPriceWei to trade with\n', 'contract KyberFprReserveV2 is IKyberReserve, Utils, Withdrawable {\n', '    using SafeERC20 for IERC20Ext;\n', '    using SafeMath for uint256;\n', '\n', '    mapping(bytes32 => bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\n', '    mapping(address => address) public tokenWallet;\n', '\n', '    struct ConfigData {\n', '        bool tradeEnabled;\n', '        bool doRateValidation; // whether to do rate validation in trade func\n', '        uint128 maxGasPriceWei;\n', '    }\n', '\n', '    address public kyberNetwork;\n', '    ConfigData internal configData;\n', '\n', '    IConversionRates public conversionRatesContract;\n', '    IKyberSanity public sanityRatesContract;\n', '    IWeth public weth;\n', '\n', '    event DepositToken(IERC20Ext indexed token, uint256 amount);\n', '    event TradeExecute(\n', '        address indexed origin,\n', '        IERC20Ext indexed src,\n', '        uint256 srcAmount,\n', '        IERC20Ext indexed destToken,\n', '        uint256 destAmount,\n', '        address payable destAddress\n', '    );\n', '    event TradeEnabled(bool enable);\n', '    event MaxGasPriceUpdated(uint128 newMaxGasPrice);\n', '    event DoRateValidationUpdated(bool doRateValidation);\n', '    event WithdrawAddressApproved(IERC20Ext indexed token, address indexed addr, bool approve);\n', '    event NewTokenWallet(IERC20Ext indexed token, address indexed wallet);\n', '    event WithdrawFunds(IERC20Ext indexed token, uint256 amount, address indexed destination);\n', '    event SetKyberNetworkAddress(address indexed network);\n', '    event SetConversionRateAddress(IConversionRates indexed rate);\n', '    event SetWethAddress(IWeth indexed weth);\n', '    event SetSanityRateAddress(IKyberSanity indexed sanity);\n', '\n', '    constructor(\n', '        address _kyberNetwork,\n', '        IConversionRates _ratesContract,\n', '        IWeth _weth,\n', '        uint128 _maxGasPriceWei,\n', '        bool _doRateValidation,\n', '        address _admin\n', '    ) public Withdrawable(_admin) {\n', '        require(_kyberNetwork != address(0), "kyberNetwork 0");\n', '        require(_ratesContract != IConversionRates(0), "ratesContract 0");\n', '        require(_weth != IWeth(0), "weth 0");\n', '        kyberNetwork = _kyberNetwork;\n', '        conversionRatesContract = _ratesContract;\n', '        weth = _weth;\n', '        configData = ConfigData({\n', '            tradeEnabled: true,\n', '            maxGasPriceWei: _maxGasPriceWei,\n', '            doRateValidation: _doRateValidation\n', '        });\n', '    }\n', '\n', '    receive() external payable {\n', '        emit DepositToken(ETH_TOKEN_ADDRESS, msg.value);\n', '    }\n', '\n', '    function trade(\n', '        IERC20Ext srcToken,\n', '        uint256 srcAmount,\n', '        IERC20Ext destToken,\n', '        address payable destAddress,\n', '        uint256 conversionRate,\n', '        bool /* validate */\n', '    ) external override payable returns (bool) {\n', '        require(msg.sender == kyberNetwork, "wrong sender");\n', '        ConfigData memory data = configData;\n', '        require(data.tradeEnabled, "trade not enable");\n', '        require(tx.gasprice <= uint256(data.maxGasPriceWei), "gas price too high");\n', '\n', '        doTrade(\n', '            srcToken,\n', '            srcAmount,\n', '            destToken,\n', '            destAddress,\n', '            conversionRate,\n', '            data.doRateValidation\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function enableTrade() external onlyAdmin {\n', '        configData.tradeEnabled = true;\n', '        emit TradeEnabled(true);\n', '    }\n', '\n', '    function disableTrade() external onlyAlerter {\n', '        configData.tradeEnabled = false;\n', '        emit TradeEnabled(false);\n', '    }\n', '\n', '    function setMaxGasPrice(uint128 newMaxGasPrice) external onlyOperator {\n', '        configData.maxGasPriceWei = newMaxGasPrice;\n', '        emit MaxGasPriceUpdated(newMaxGasPrice);\n', '    }\n', '\n', '    function setDoRateValidation(bool _doRateValidation) external onlyAdmin {\n', '        configData.doRateValidation = _doRateValidation;\n', '        emit DoRateValidationUpdated(_doRateValidation);\n', '    }\n', '\n', '    function approveWithdrawAddress(\n', '        IERC20Ext token,\n', '        address addr,\n', '        bool approve\n', '    ) external onlyAdmin {\n', '        approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), addr))] = approve;\n', '        getSetDecimals(token);\n', '        emit WithdrawAddressApproved(token, addr, approve);\n', '    }\n', '\n', '    /// @dev allow set tokenWallet[token] back to 0x0 address\n', '    /// @dev in case of using weth from external wallet, must call set token wallet for weth\n', '    ///      tokenWallet for weth must be different from this reserve address\n', '    function setTokenWallet(IERC20Ext token, address wallet) external onlyAdmin {\n', '        tokenWallet[address(token)] = wallet;\n', '        getSetDecimals(token);\n', '        emit NewTokenWallet(token, wallet);\n', '    }\n', '\n', '    /// @dev withdraw amount of token to an approved destination\n', '    ///      if reserve is using weth instead of eth, should call withdraw weth\n', '    /// @param token token to withdraw\n', '    /// @param amount amount to withdraw\n', '    /// @param destination address to transfer fund to\n', '    function withdraw(\n', '        IERC20Ext token,\n', '        uint256 amount,\n', '        address destination\n', '    ) external onlyOperator {\n', '        require(\n', '            approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), destination))],\n', '            "destination is not approved"\n', '        );\n', '\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            (bool success, ) = destination.call{value: amount}("");\n', '            require(success, "withdraw eth failed");\n', '        } else {\n', '            address wallet = getTokenWallet(token);\n', '            if (wallet == address(this)) {\n', '                token.safeTransfer(destination, amount);\n', '            } else {\n', '                token.safeTransferFrom(wallet, destination, amount);\n', '            }\n', '        }\n', '\n', '        emit WithdrawFunds(token, amount, destination);\n', '    }\n', '\n', '    function setKyberNetwork(address _newNetwork) external onlyAdmin {\n', '        require(_newNetwork != address(0), "kyberNetwork 0");\n', '        kyberNetwork = _newNetwork;\n', '        emit SetKyberNetworkAddress(_newNetwork);\n', '    }\n', '\n', '    function setConversionRate(IConversionRates _newConversionRate) external onlyAdmin {\n', '        require(_newConversionRate != IConversionRates(0), "conversionRates 0");\n', '        conversionRatesContract = _newConversionRate;\n', '        emit SetConversionRateAddress(_newConversionRate);\n', '    }\n', '\n', '    /// @dev weth is unlikely to be changed, but added this function to keep the flexibilty\n', '    function setWeth(IWeth _newWeth) external onlyAdmin {\n', '        require(_newWeth != IWeth(0), "weth 0");\n', '        weth = _newWeth;\n', '        emit SetWethAddress(_newWeth);\n', '    }\n', '\n', '    /// @dev sanity rate can be set to 0x0 address to disable sanity rate check\n', '    function setSanityRate(IKyberSanity _newSanity) external onlyAdmin {\n', '        sanityRatesContract = _newSanity;\n', '        emit SetSanityRateAddress(_newSanity);\n', '    }\n', '\n', '    function getConversionRate(\n', '        IERC20Ext src,\n', '        IERC20Ext dest,\n', '        uint256 srcQty,\n', '        uint256 blockNumber\n', '    ) external override view returns (uint256) {\n', '        ConfigData memory data = configData;\n', '        if (!data.tradeEnabled) return 0;\n', '        if (tx.gasprice > uint256(data.maxGasPriceWei)) return 0;\n', '        if (srcQty == 0) return 0;\n', '\n', '        IERC20Ext token;\n', '        bool isBuy;\n', '\n', '        if (ETH_TOKEN_ADDRESS == src) {\n', '            isBuy = true;\n', '            token = dest;\n', '        } else if (ETH_TOKEN_ADDRESS == dest) {\n', '            isBuy = false;\n', '            token = src;\n', '        } else {\n', '            return 0; // pair is not listed\n', '        }\n', '\n', '        uint256 rate;\n', '        try conversionRatesContract.getRate(token, blockNumber, isBuy, srcQty) returns(uint256 r) {\n', '            rate = r;\n', '        } catch {\n', '            return 0;\n', '        }\n', '        uint256 destQty = calcDestAmount(src, dest, srcQty, rate);\n', '\n', '        if (getBalance(dest) < destQty) return 0;\n', '\n', '        if (sanityRatesContract != IKyberSanity(0)) {\n', '            uint256 sanityRate = sanityRatesContract.getSanityRate(src, dest);\n', '            if (rate > sanityRate) return 0;\n', '        }\n', '\n', '        return rate;\n', '    }\n', '\n', '    function isAddressApprovedForWithdrawal(IERC20Ext token, address addr)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), addr))];\n', '    }\n', '\n', '    function tradeEnabled() external view returns (bool) {\n', '        return configData.tradeEnabled;\n', '    }\n', '\n', '    function maxGasPriceWei() external view returns (uint128) {\n', '        return configData.maxGasPriceWei;\n', '    }\n', '\n', '    function doRateValidation() external view returns (bool) {\n', '        return configData.doRateValidation;\n', '    }\n', '\n', '    /// @dev return available balance of a token that reserve can use\n', '    ///      if using weth, call getBalance(eth) will return weth balance\n', '    ///      if using wallet for token, will return min of balance and allowance\n', '    /// @param token token to get available balance that reserve can use\n', '    function getBalance(IERC20Ext token) public view returns (uint256) {\n', '        address wallet = getTokenWallet(token);\n', '        IERC20Ext usingToken;\n', '\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            if (wallet == address(this)) {\n', '                // reserve should be using eth instead of weth\n', '                return address(this).balance;\n', '            }\n', '            // reserve is using weth instead of eth\n', '            usingToken = weth;\n', '        } else {\n', '            if (wallet == address(this)) {\n', '                // not set token wallet or reserve is the token wallet, no need to check allowance\n', '                return token.balanceOf(address(this));\n', '            }\n', '            usingToken = token;\n', '        }\n', '\n', '        uint256 balanceOfWallet = usingToken.balanceOf(wallet);\n', '        uint256 allowanceOfWallet = usingToken.allowance(wallet, address(this));\n', '\n', '        return minOf(balanceOfWallet, allowanceOfWallet);\n', '    }\n', '\n', '    /// @dev return wallet that holds the token\n', '    ///      if token is ETH, check tokenWallet of WETH instead\n', '    ///      if wallet is 0x0, consider as this reserve address\n', '    function getTokenWallet(IERC20Ext token) public view returns (address wallet) {\n', '        wallet = (token == ETH_TOKEN_ADDRESS)\n', '            ? tokenWallet[address(weth)]\n', '            : tokenWallet[address(token)];\n', '        if (wallet == address(0)) {\n', '            wallet = address(this);\n', '        }\n', '    }\n', '\n', '    /// @dev do a trade, re-validate the conversion rate, remove trust assumption with network\n', '    /// @param srcToken Src token\n', '    /// @param srcAmount Amount of src token\n', '    /// @param destToken Destination token\n', '    /// @param destAddress Destination address to send tokens to\n', '    /// @param validateRate re-validate rate or not\n', '    function doTrade(\n', '        IERC20Ext srcToken,\n', '        uint256 srcAmount,\n', '        IERC20Ext destToken,\n', '        address payable destAddress,\n', '        uint256 conversionRate,\n', '        bool validateRate\n', '    ) internal {\n', '        require(conversionRate > 0, "rate is 0");\n', '\n', '        bool isBuy = srcToken == ETH_TOKEN_ADDRESS;\n', '        if (isBuy) {\n', '            require(msg.value == srcAmount, "wrong msg value");\n', '        } else {\n', '            require(msg.value == 0, "bad msg value");\n', '        }\n', '\n', '        if (validateRate) {\n', '            uint256 rate = conversionRatesContract.getRate(\n', '                isBuy ? destToken : srcToken,\n', '                block.number,\n', '                isBuy,\n', '                srcAmount\n', '            );\n', '            // re-validate conversion rate\n', '            require(rate >= conversionRate, "reserve rate lower then network requested rate");\n', '            if (sanityRatesContract != IKyberSanity(0)) {\n', '                // sanity rate check\n', '                uint256 sanityRate = sanityRatesContract.getSanityRate(srcToken, destToken);\n', '                require(rate <= sanityRate, "rate should not be greater than sanity rate" );\n', '            }\n', '        }\n', '\n', '        uint256 destAmount = calcDestAmount(srcToken, destToken, srcAmount, conversionRate);\n', '        require(destAmount > 0, "dest amount is 0");\n', '\n', '        address srcTokenWallet = getTokenWallet(srcToken);\n', '        address destTokenWallet = getTokenWallet(destToken);\n', '\n', '        if (isBuy) {\n', '            // add to imbalance\n', '            conversionRatesContract.recordImbalance(\n', '                destToken,\n', '                int256(destAmount),\n', '                0,\n', '                block.number\n', '            );\n', "            // if reserve is using weth, convert eth to weth and transfer weth to its' tokenWallet\n", '            if (srcTokenWallet != address(this)) {\n', '                weth.deposit{value: msg.value}();\n', '                IERC20Ext(weth).safeTransfer(srcTokenWallet, msg.value);\n', '            }\n', '            // transfer dest token from tokenWallet to destAddress\n', '            if (destTokenWallet == address(this)) {\n', '                destToken.safeTransfer(destAddress, destAmount);\n', '            } else {\n', '                destToken.safeTransferFrom(destTokenWallet, destAddress, destAmount);\n', '            }\n', '        } else {\n', '            // add to imbalance\n', '            conversionRatesContract.recordImbalance(\n', '                srcToken,\n', '                -1 * int256(srcAmount),\n', '                0,\n', '                block.number\n', '            );\n', '            // collect src token from sender\n', '            srcToken.safeTransferFrom(msg.sender, srcTokenWallet, srcAmount);\n', '            // if reserve is using weth, reserve needs to collect weth from tokenWallet,\n', '            // then convert it to eth\n', '            if (destTokenWallet != address(this)) {\n', '                IERC20Ext(weth).safeTransferFrom(destTokenWallet, address(this), destAmount);\n', '                weth.withdraw(destAmount);\n', '            }\n', '            // transfer eth to destAddress\n', '            (bool success, ) = destAddress.call{value: destAmount}("");\n', '            require(success, "transfer eth from reserve to destAddress failed");\n', '        }\n', '\n', '        emit TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\n', '    }\n', '}']