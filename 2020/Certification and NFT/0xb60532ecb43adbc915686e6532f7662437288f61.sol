['// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\cryptography\\ECDSA.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * NOTE: This call _does not revert_ if the signature is invalid, or\n', '     * if the signer is otherwise unable to be retrieved. In those scenarios,\n', '     * the zero address is returned.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n', '            return address(0);\n', '        }\n', '\n', '        if (v != 27 && v != 28) {\n', '            return address(0);\n', '        }\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts\\VestingVault.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title VestingVault\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract VestingVault is Initializable, Ownable {\n', '    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n', '    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n', '    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n', '    // cliff period of a year and a duration of four years, are safe to use.\n', '    // solhint-disable not-rely-on-time\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using ECDSA for bytes32;\n', '\n', '    event TokensReleased(address token, uint256 amount);\n', '    event TokenVestingRevoked(address token);\n', '    event TokenVestingBeneficiaryVerified(address beneficiary);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '    uint256 private _vestingAmount;\n', '    uint256 private _intervalVested;\n', '    uint256 private _cliff;\n', '    uint256 private _start;\n', '    uint256 private _interval;\n', '    string private _stamp;\n', '    uint256 private _duration;\n', '    bool private _revocable;\n', '    bool private _beneficiaryVerified;\n', '\n', '    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n', '    uint32 private constant SECONDS_PER_MINUTE = 60;\n', '    uint32 private constant MINUTES_PER_HOUR = 60;\n', '    uint32 private constant SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\n', '    uint32 private constant HOURS_PER_DAY = 24;\n', '    uint32 private constant SECONDS_PER_DAY = HOURS_PER_DAY * SECONDS_PER_HOUR; // 86400 seconds per day\n', '    uint32 private constant DAYS_PER_MONTH = 30;\n', '    uint32 private constant SECONDS_PER_MONTH = DAYS_PER_MONTH * SECONDS_PER_DAY; // Month here is of 30 days period or 2592000 seconds per month.\n', '    uint32 private constant DAYS_PER_YEAR = 365;\n', '    uint32 private constant SECONDS_PER_YEAR = DAYS_PER_YEAR * SECONDS_PER_DAY; // Year here is of 365 days period.\n', '\n', '    mapping(address => uint256) private _released;\n', '    mapping(address => bool) private _revoked;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param vestingAmount vesting amount of the benefeciary to be recieved\n', '     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n', '     * @param start the time (as Unix time) at which point vesting starts\n', '     * @param duration duration in seconds of the period in which the tokens will vest\n', '     * @param interval The time period at which the tokens has to be vested\n', '     * @param stamp the interval is in Minutes(MIN)/Hours(H)/Days(D)/Months(M)/Years(Y)\n', '     * @param revocable whether the vesting is revocable or not\n', '     */\n', '    function initialize(\n', '        address beneficiary,\n', '        uint256 vestingAmount,\n', '        uint256 start,\n', '        uint256 cliffDuration,\n', '        uint256 duration,\n', '        uint256 interval,\n', '        string memory stamp,\n', '        bool revocable\n', '    ) public initializer {\n', '\n', '        require(\n', '            beneficiary != address(0),\n', '            "VestingVault: beneficiary is the zero address"\n', '        );\n', '        require(duration > 0, "VestingVault: duration is 0");\n', '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            cliffDuration <= duration,\n', '            "VestingVault: cliff is longer than duration"\n', '        );\n', '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            start.add(duration) > block.timestamp,\n', '            "VestingVault: final time is before current time"\n', '        );\n', '        require(\n', '            keccak256(abi.encodePacked(stamp)) == keccak256("MIN") ||\n', '            keccak256(abi.encodePacked(stamp)) == keccak256("H") ||\n', '            keccak256(abi.encodePacked(stamp)) == keccak256("D") ||\n', '            keccak256(abi.encodePacked(stamp)) == keccak256("M") ||\n', '            keccak256(abi.encodePacked(stamp)) == keccak256("Y"),\n', '            "VestingVault: Interval Stamp can be Minutes(MIN)/Hours(H)/Days(D)/Months(M)/Years(Y)"\n', '        );\n', '        uint256 interval_in_sec = getCalculatedIntervalInSeconds(interval, stamp);\n', '        require(\n', '            ((cliffDuration % interval_in_sec == 0) && (duration % interval_in_sec == 0)) ,\n', '            "VestingVault: duration & cliffDuration should multiplication of interval"\n', '        );\n', '\n', '        Ownable.initialize(msg.sender);\n', '\n', '        _beneficiary = beneficiary;\n', '        _revocable = revocable;\n', '        _vestingAmount = vestingAmount;\n', '        _duration = duration;\n', '        _cliff = start.add(cliffDuration);\n', '        _interval = interval;\n', '        _stamp = stamp;\n', '        _start = start;\n', '        _beneficiaryVerified = false;\n', '        setCalculatedVestedAmountPerInterval(vestingAmount, duration, interval, stamp);\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens vesting.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiaryVerified of the tokens vesting.\n', '     */\n', '    function beneficiaryVerified() public view returns (bool) {\n', '        return _beneficiaryVerified;\n', '    }\n', '\n', '    /**\n', '     * @return the vesting amount of the benefeciary.\n', '     */\n', '    function vestingAmount() public view returns (uint256) {\n', '        return _vestingAmount;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of token to be vested for the benefeciary per interval.\n', '     */\n', '    function intervalVested() public view returns (uint256) {\n', '        return _intervalVested;\n', '    }\n', '\n', '    /**\n', '     * @return the cliff time of the token vesting.\n', '     */\n', '    function cliff() public view returns (uint256) {\n', '        return _cliff;\n', '    }\n', '\n', '    /**\n', '     * @return the interval time of the token vesting in seconds.\n', '     */\n', '    function interval() public view returns (uint256) {\n', '        return _interval;\n', '    }\n', '\n', '    /**\n', '     * @return the interval time is respect to Minutes(MIN)/Hours(H)/Days(D)/Months(M)/Years(Y).\n', '     */\n', '    function stamp() public view returns (string memory) {\n', '        return _stamp;\n', '    }\n', '\n', '    /**\n', '     * @return the start time of the token vesting.\n', '     */\n', '    function start() public view returns (uint256) {\n', '        return _start;\n', '    }\n', '\n', '    /**\n', '     * @return the duration of the token vesting.\n', '     */\n', '    function duration() public view returns (uint256) {\n', '        return _duration;\n', '    }\n', '\n', '    /**\n', '     * @return true if the vesting is revocable.\n', '     */\n', '    function revocable() public view returns (bool) {\n', '        return _revocable;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of the token released.\n', '     */\n', '    function released(address token) public view returns (uint256) {\n', '        return _released[token];\n', '    }\n', '\n', '    /**\n', '     * @return true if the token is revoked.\n', '     */\n', '    function revoked(address token) public view returns (bool) {\n', '        return _revoked[token];\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param token ERC20 token which is being vested\n', '     */\n', '    function releasable(IERC20 token) public view returns (uint256) {\n', '        return _vestedAmount(token).sub(_released[address(token)]);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function release(IERC20 token) public {\n', '\n', '        require(_beneficiaryVerified == true, "VestingVault: Beneficiary signature not yet verified");\n', '\n', '        require(block.timestamp > _cliff, "VestingVault: you have not passed the lock period yet");\n', '\n', '        uint256 unreleased = _releasableAmount(token);\n', '\n', '        require(unreleased > 0, "VestingVault: no tokens are due");\n', '\n', '        _released[address(token)] = _released[address(token)].add(unreleased);\n', '\n', '        token.safeTransfer(_beneficiary, unreleased);\n', '\n', '        emit TokensReleased(address(token), unreleased);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function revoke(IERC20 token) public onlyOwner {\n', '        require(_revocable, "VestingVault: cannot revoke");\n', '        require(\n', '            !_revoked[address(token)],\n', '            "VestingVault: token already revoked"\n', '        );\n', '\n', '        uint256 balance = token.balanceOf(address(this));\n', '\n', '        uint256 unreleased = _releasableAmount(token);\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        _revoked[address(token)] = true;\n', '\n', '        token.safeTransfer(owner(), refund);\n', '\n', '        emit TokenVestingRevoked(address(token));\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param token ERC20 token which is being vested\n', '     */\n', '    function _releasableAmount(IERC20 token) private view returns (uint256) {\n', '        return _vestedAmount(token).sub(_released[address(token)]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function _vestedAmount(IERC20 token) private view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(address(this));\n', '        uint256 totalBalance = currentBalance.add(_released[address(token)]);\n', '\n', '        if (block.timestamp < _cliff) {\n', '            return 0;\n', '        } else if (\n', '            block.timestamp >= _start.add(_duration) || _revoked[address(token)]\n', '        ) {\n', '            return totalBalance;\n', '        } else {\n', '            return getBatchTimestamp().mul(totalBalance).div(_duration);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return Retrieves the duration passed from start till now according to interval in seconds.\n', '     */\n', '    function getBatchTimestamp() private view returns (uint256) {\n', '        require(\n', '            block.timestamp > _start,\n', '            "VestingVault: Current timestamp is smaller than start time"\n', '        );\n', '\n', '        uint256 INTERVAL_TIMESTAMP = getCalculatedIntervalInSeconds(_interval,_stamp);\n', '        uint256 ADJUSTED_INTERVAL = (block.timestamp.sub(_start)).div(INTERVAL_TIMESTAMP);\n', '\n', '        uint256 START_TILL_NOW = ADJUSTED_INTERVAL.mul(INTERVAL_TIMESTAMP);\n', '        return START_TILL_NOW;\n', '    }\n', '\n', '    /**\n', '     * @return Timestamp in Interval.\n', '     */\n', '    function getCalculatedIntervalInSeconds(uint256 interval__, string memory stamp__) public pure returns (uint256) {\n', '        if (keccak256(abi.encodePacked(stamp__)) == keccak256("MIN")) {\n', '            return (SECONDS_PER_MINUTE * interval__);\n', '        } else if (keccak256(abi.encodePacked(stamp__)) == keccak256("H")) {\n', '            return (SECONDS_PER_HOUR * interval__);\n', '        } else if (keccak256(abi.encodePacked(stamp__)) == keccak256("D")) {\n', '            return (SECONDS_PER_DAY * interval__);\n', '        } else if (keccak256(abi.encodePacked(stamp__)) == keccak256("M")) {\n', '            return (SECONDS_PER_MONTH * interval__);\n', '        } else if (keccak256(abi.encodePacked(stamp__)) == keccak256("Y")) {\n', '            return (SECONDS_PER_YEAR * interval__);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the calculated vesting amount per interval.\n', '     * @param vestedAmount The total amount that is to be vested. \n', '     * @param duration_ The total duration in which the veted tokens will be released.\n', '     * @param interval_ The intervals at which the token will be released.\n', '     * @param stamp_ The intervals mentioned are in Minutes(MIN)/Hours(H)/Days(D)/Months(M)/Years(Y).\n', '     */\n', '    function setCalculatedVestedAmountPerInterval(\n', '        uint256 vestedAmount,\n', '        uint256 duration_,\n', '        uint256 interval_,\n', '        string memory stamp_\n', '    ) private {\n', '        uint256 diff = vestedAmount;\n', '\n', '        if (keccak256(abi.encodePacked(stamp_)) == keccak256("MIN")) {\n', '            _intervalVested = (\n', '                diff.div(duration_.div(SECONDS_PER_MINUTE).div(interval_))\n', '            );\n', '        } else if (keccak256(abi.encodePacked(stamp_)) == keccak256("H")) {\n', '            _intervalVested = (\n', '                diff.div(duration_.div(SECONDS_PER_HOUR).div(interval_))\n', '            );\n', '        } else if (keccak256(abi.encodePacked(stamp_)) == keccak256("D")) {\n', '            _intervalVested = (\n', '                diff.div(duration_.div(SECONDS_PER_DAY).div(interval_))\n', '            );\n', '        } else if (keccak256(abi.encodePacked(stamp_)) == keccak256("M")) {\n', '            _intervalVested = (\n', '                diff.div(duration_.div(SECONDS_PER_MONTH).div(interval_))\n', '            );\n', '        } else if (keccak256(abi.encodePacked(stamp_)) == keccak256("Y")) {\n', '            _intervalVested = (\n', '                diff.div(duration_.div(SECONDS_PER_YEAR).div(interval_))\n', '            );\n', '        }\n', '    }\n', '\n', '    function getVestedAmountNow() public view returns (uint256) {\n', '        return getBatchTimestamp().mul(_vestingAmount).div(_duration);\n', '    }\n', '\n', '    function verifyAddress(bytes32 hash, bytes memory signature) public returns (bool) {\n', '        // bytes32 tmpHash = toEthSignedMessageHash(hash);\n', '        address tempAddress = recover(hash, signature);\n', '        require(tempAddress == _beneficiary, "VestingVault: ECDSA Recover Failed, Beneficiary Address Signature is invalid");\n', '        _beneficiaryVerified = true;\n', '        emit TokenVestingBeneficiaryVerified(_beneficiary);\n', '        return true;\n', '    }\n', '\n', '    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\n', '        return hash.recover(signature);\n', '    }\n', '\n', '    function toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\n', '        return hash.toEthSignedMessageHash();\n', '    }\n', '    \n', '    uint256[50] private ______gap;\n', '}']