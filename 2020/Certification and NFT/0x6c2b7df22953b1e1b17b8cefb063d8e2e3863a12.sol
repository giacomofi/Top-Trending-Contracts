['// File: @aragon/os/contracts/common/UnstructuredStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library UnstructuredStorage {\n', '    function getStorageBool(bytes32 position) internal view returns (bool data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageAddress(bytes32 position) internal view returns (address data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n', '        assembly { data := sload(position) }\n', '    }\n', '\n', '    function setStorageBool(bytes32 position, bool data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageAddress(bytes32 position, address data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '\n', '    function setStorageUint256(bytes32 position, uint256 data) internal {\n', '        assembly { sstore(position, data) }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/IACL.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IACL {\n', '    function initialize(address permissionsCreator) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IVaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IVaultRecoverable {\n', '    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n', '\n', '    function transferToVault(address token) external;\n', '\n', '    function allowRecoverability(address token) external view returns (bool);\n', '    function getRecoveryVault() external view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/IKernel.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'interface IKernelEvents {\n', '    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n', '}\n', '\n', '\n', "// This should be an interface, but interfaces can't inherit yet :(\n", 'contract IKernel is IKernelEvents, IVaultRecoverable {\n', '    function acl() public view returns (IACL);\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '\n', '    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n', '    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AppStorage.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract AppStorage {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_POSITION = keccak256("aragonOS.appStorage.kernel");\n', '    bytes32 internal constant APP_ID_POSITION = keccak256("aragonOS.appStorage.appId");\n', '    */\n', '    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n', '    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n', '\n', '    function kernel() public view returns (IKernel) {\n', '        return IKernel(KERNEL_POSITION.getStorageAddress());\n', '    }\n', '\n', '    function appId() public view returns (bytes32) {\n', '        return APP_ID_POSITION.getStorageBytes32();\n', '    }\n', '\n', '    function setKernel(IKernel _kernel) internal {\n', '        KERNEL_POSITION.setStorageAddress(address(_kernel));\n', '    }\n', '\n', '    function setAppId(bytes32 _appId) internal {\n', '        APP_ID_POSITION.setStorageBytes32(_appId);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ACLSyntaxSugar {\n', '    function arr() internal pure returns (uint256[]) {\n', '        return new uint256[](0);\n', '    }\n', '\n', '    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c, _d);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n', '    }\n', '\n', '    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(uint256 _a) internal pure returns (uint256[] r) {\n', '        r = new uint256[](1);\n', '        r[0] = _a;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        r = new uint256[](2);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        r = new uint256[](3);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        r = new uint256[](4);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        r = new uint256[](5);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '        r[4] = _e;\n', '    }\n', '}\n', '\n', '\n', 'contract ACLHelpers {\n', '    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 30));\n', '    }\n', '\n', '    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 31));\n', '    }\n', '\n', '    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n', '        a = uint32(_x);\n', '        b = uint32(_x >> (8 * 4));\n', '        c = uint32(_x >> (8 * 8));\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Uint256Helpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library Uint256Helpers {\n', '    uint256 private constant MAX_UINT64 = uint64(-1);\n', '\n', '    string private constant ERROR_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";\n', '\n', '    function toUint64(uint256 a) internal pure returns (uint64) {\n', '        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n', '        return uint64(a);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/TimeHelpers.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract TimeHelpers {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /**\n', '    * @dev Returns the current block number.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current block number, converted to uint64.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber64() internal view returns (uint64) {\n', '        return getBlockNumber().toUint64();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp() internal view returns (uint256) {\n', '        return block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp, converted to uint64.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp64() internal view returns (uint64) {\n', '        return getTimestamp().toUint64();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Initializable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract Initializable is TimeHelpers {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.initializable.initializationBlock")\n', '    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n', '\n', '    string private constant ERROR_ALREADY_INITIALIZED = "INIT_ALREADY_INITIALIZED";\n', '    string private constant ERROR_NOT_INITIALIZED = "INIT_NOT_INITIALIZED";\n', '\n', '    modifier onlyInit {\n', '        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    modifier isInitialized {\n', '        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return Block number in which the contract was initialized\n', '    */\n', '    function getInitializationBlock() public view returns (uint256) {\n', '        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n', '    }\n', '\n', '    /**\n', '    * @return Whether the contract has been initialized by the time of the current block\n', '    */\n', '    function hasInitialized() public view returns (bool) {\n', '        uint256 initializationBlock = getInitializationBlock();\n', '        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization has finished.\n', '    */\n', '    function initialized() internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization to enable the contract\n', '    *      at a future block number rather than immediately.\n', '    */\n', '    function initializedAt(uint256 _blockNumber) internal onlyInit {\n', '        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Petrifiable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Petrifiable is Initializable {\n', '    // Use block UINT256_MAX (which should be never) as the initializable date\n', '    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n', '\n', '    function isPetrified() public view returns (bool) {\n', '        return getInitializationBlock() == PETRIFIED_BLOCK;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract to prevent being initialized.\n', "    *      Useful for freezing base contracts when they're used behind proxies.\n", '    */\n', '    function petrify() internal onlyInit {\n', '        initializedAt(PETRIFIED_BLOCK);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/Autopetrified.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Autopetrified is Petrifiable {\n', '    constructor() public {\n', '        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n', '        // This renders them uninitializable (and unusable without a proxy).\n', '        petrify();\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ConversionHelpers.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library ConversionHelpers {\n', '    string private constant ERROR_IMPROPER_LENGTH = "CONVERSION_IMPROPER_LENGTH";\n', '\n', '    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n', '        // Force cast the uint256[] into a bytes array, by overwriting its length\n', "        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 byteLength = _input.length * 32;\n', '        assembly {\n', '            output := _input\n', '            mstore(output, byteLength)\n', '        }\n', '    }\n', '\n', '    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n', '        // Force cast the bytes array into a uint256[], by overwriting its length\n', "        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n", '        // with the input and a new length. The input becomes invalid from this point forward.\n', '        uint256 intsLength = _input.length / 32;\n', '        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n', '\n', '        assembly {\n', '            output := _input\n', '            mstore(output, intsLength)\n', '        }\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/ReentrancyGuard.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract ReentrancyGuard {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256("aragonOS.reentrancyGuard.mutex");\n', '    */\n', '    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n', '\n', '    string private constant ERROR_REENTRANT = "REENTRANCY_REENTRANT_CALL";\n', '\n', '    modifier nonReentrant() {\n', '        // Ensure mutex is unlocked\n', '        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n', '\n', '        // Lock mutex before function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n', '\n', '        // Perform function call\n', '        _;\n', '\n', '        // Unlock mutex after function call\n', '        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/token/ERC20.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @aragon/os/contracts/common/EtherTokenConstant.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n', '// contracts where both tokens and ETH are accepted\n', 'contract EtherTokenConstant {\n', '    address internal constant ETH = address(0);\n', '}\n', '\n', '// File: @aragon/os/contracts/common/IsContract.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract IsContract {\n', '    /*\n', '    * NOTE: this should NEVER be used for authentication\n', '    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n', '    *\n', '    * This is only intended to be used as a sanity check that an address is actually a contract,\n', '    * RATHER THAN an address not being a contract.\n', '    */\n', '    function isContract(address _target) internal view returns (bool) {\n', '        if (_target == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := extcodesize(_target) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/SafeERC20.sol\n', '\n', '// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n', '// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n', '    // https://github.com/ethereum/solidity/issues/3544\n', '    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n', '\n', '    string private constant ERROR_TOKEN_BALANCE_REVERTED = "SAFE_ERC_20_BALANCE_REVERTED";\n', '    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = "SAFE_ERC_20_ALLOWANCE_REVERTED";\n', '\n', '    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n', '        private\n', '        returns (bool)\n', '    {\n', '        bool ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            let success := call(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                0,                    // no value\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                // Check number of bytes returned from last function call\n', '                switch returndatasize\n', '\n', '                // No bytes returned: assume success\n', '                case 0 {\n', '                    ret := 1\n', '                }\n', '\n', '                // 32 bytes returned: check if non-zero\n', '                case 0x20 {\n', '                    // Only return success if returned data was true\n', '                    // Already have output in ptr\n', '                    ret := eq(mload(ptr), 1)\n', '                }\n', '\n', "                // Not sure what was returned: don't mark as success\n", '                default { }\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    function staticInvoke(address _addr, bytes memory _calldata)\n', '        private\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        bool success;\n', '        uint256 ret;\n', '        assembly {\n', '            let ptr := mload(0x40)    // free memory pointer\n', '\n', '            success := staticcall(\n', '                gas,                  // forward all gas\n', '                _addr,                // address\n', '                add(_calldata, 0x20), // calldata start\n', '                mload(_calldata),     // calldata length\n', '                ptr,                  // write output over free memory\n', '                0x20                  // uint256 return\n', '            )\n', '\n', '            if gt(success, 0) {\n', '                ret := mload(ptr)\n', '            }\n', '        }\n', '        return (success, ret);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferCallData = abi.encodeWithSelector(\n', '            TRANSFER_SELECTOR,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        bytes memory transferFromCallData = abi.encodeWithSelector(\n', '            _token.transferFrom.selector,\n', '            _from,\n', '            _to,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, transferFromCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n', '    *      Note that this makes an external call to the token.\n', '    */\n', '    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n', '        bytes memory approveCallData = abi.encodeWithSelector(\n', '            _token.approve.selector,\n', '            _spender,\n', '            _amount\n', '        );\n', '        return invokeAndCheckSuccess(_token, approveCallData);\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.balanceOf().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n', '        bytes memory balanceOfCallData = abi.encodeWithSelector(\n', '            _token.balanceOf.selector,\n', '            _owner\n', '        );\n', '\n', '        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n', '        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n', '\n', '        return tokenBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.allowance().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n', '        bytes memory allowanceCallData = abi.encodeWithSelector(\n', '            _token.allowance.selector,\n', '            _owner,\n', '            _spender\n', '        );\n', '\n', '        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n', '        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n', '\n', '        return allowance;\n', '    }\n', '\n', '    /**\n', '    * @dev Static call into ERC20.totalSupply().\n', '    * Reverts if the call fails for some reason (should never fail).\n', '    */\n', '    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\n', '        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\n', '\n', '        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\n', '        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n', '\n', '        return totalSupply;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/VaultRecoverable.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n', '    using SafeERC20 for ERC20;\n', '\n', '    string private constant ERROR_DISALLOWED = "RECOVER_DISALLOWED";\n', '    string private constant ERROR_VAULT_NOT_CONTRACT = "RECOVER_VAULT_NOT_CONTRACT";\n', '    string private constant ERROR_TOKEN_TRANSFER_FAILED = "RECOVER_TOKEN_TRANSFER_FAILED";\n', '\n', '    /**\n', '     * @notice Send funds to recovery Vault. This contract should never receive funds,\n', '     *         but in case it does, this function allows one to recover them.\n', '     * @param _token Token balance to be sent to recovery vault.\n', '     */\n', '    function transferToVault(address _token) external {\n', '        require(allowRecoverability(_token), ERROR_DISALLOWED);\n', '        address vault = getRecoveryVault();\n', '        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n', '\n', '        uint256 balance;\n', '        if (_token == ETH) {\n', '            balance = address(this).balance;\n', '            vault.transfer(balance);\n', '        } else {\n', '            ERC20 token = ERC20(_token);\n', '            balance = token.staticBalanceOf(this);\n', '            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n', '        }\n', '\n', '        emit RecoverToVault(vault, _token, balance);\n', '    }\n', '\n', '    /**\n', '    * @dev By default deriving from AragonApp makes it recoverable\n', '    * @param token Token address that would be recovered\n', '    * @return bool whether the app allows the recovery\n', '    */\n', '    function allowRecoverability(address token) public view returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // Cast non-implemented interface to be public so we can use it internally\n', '    function getRecoveryVault() public view returns (address);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface IEVMScriptExecutor {\n', '    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n', '    function executorType() external pure returns (bytes32);\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract EVMScriptRegistryConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash("evmreg");\n', '    */\n', '    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n', '}\n', '\n', '\n', 'interface IEVMScriptRegistry {\n', '    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n', '    function disableScriptExecutor(uint256 executorId) external;\n', '\n', '    // TODO: this should be external\n', '    // See https://github.com/ethereum/solidity/issues/4832\n', '    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n', '}\n', '\n', '// File: @aragon/os/contracts/kernel/KernelConstants.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract KernelAppIds {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash("kernel");\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash("acl");\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash("vault");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n', '    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n', '    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n', '}\n', '\n', '\n', 'contract KernelNamespaceConstants {\n', '    /* Hardcoded constants to save gas\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256("core");\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256("base");\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256("app");\n', '    */\n', '    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n', '    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n', '    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n', '}\n', '\n', '// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n', '    string private constant ERROR_EXECUTOR_UNAVAILABLE = "EVMRUN_EXECUTOR_UNAVAILABLE";\n', '    string private constant ERROR_PROTECTED_STATE_MODIFIED = "EVMRUN_PROTECTED_STATE_MODIFIED";\n', '\n', '    /* This is manually crafted in assembly\n', '    string private constant ERROR_EXECUTOR_INVALID_RETURN = "EVMRUN_EXECUTOR_INVALID_RETURN";\n', '    */\n', '\n', '    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n', '\n', '    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n', '        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n', '    }\n', '\n', '    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n', '        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n', '        return IEVMScriptRegistry(registryAddr);\n', '    }\n', '\n', '    function runScript(bytes _script, bytes _input, address[] _blacklist)\n', '        internal\n', '        isInitialized\n', '        protectState\n', '        returns (bytes)\n', '    {\n', '        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n', '        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n', '\n', '        bytes4 sig = executor.execScript.selector;\n', '        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n', '\n', '        bytes memory output;\n', '        assembly {\n', '            let success := delegatecall(\n', '                gas,                // forward all gas\n', '                executor,           // address\n', '                add(data, 0x20),    // calldata start\n', '                mload(data),        // calldata length\n', "                0,                  // don't write output (we'll handle this ourselves)\n", "                0                   // don't write output\n", '            )\n', '\n', '            output := mload(0x40) // free mem ptr get\n', '\n', '            switch success\n', '            case 0 {\n', '                // If the call errored, forward its full error data\n', '                returndatacopy(output, 0, returndatasize)\n', '                revert(output, returndatasize)\n', '            }\n', '            default {\n', '                switch gt(returndatasize, 0x3f)\n', '                case 0 {\n', '                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n', '                    // revert with "EVMRUN_EXECUTOR_INVALID_RETURN"\n', '                    // See remix: doing a `revert("EVMRUN_EXECUTOR_INVALID_RETURN")` always results in\n', '                    // this memory layout\n', '                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n', '                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n', '                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n', '                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n', '\n', '                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n', '                }\n', '                default {\n', '                    // Copy result\n', '                    //\n', '                    // Needs to perform an ABI decode for the expected `bytes` return type of\n', '                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n', '                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n', '                    //    [ output length (32 bytes) ]\n', '                    //    [ output content (N bytes) ]\n', '                    //\n', '                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n', '                    let copysize := sub(returndatasize, 0x20)\n', '                    returndatacopy(output, 0x20, copysize)\n', '\n', '                    mstore(0x40, add(output, copysize)) // free mem ptr set\n', '                }\n', '            }\n', '        }\n', '\n', '        emit ScriptResult(address(executor), _script, _input, output);\n', '\n', '        return output;\n', '    }\n', '\n', '    modifier protectState {\n', '        address preKernel = address(kernel());\n', '        bytes32 preAppId = appId();\n', '        _; // exec\n', '        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n', '        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/apps/AragonApp.sol\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n', '// that they can never be initialized.\n', '// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n', '// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n', '// are included so that they are automatically usable by subclassing contracts\n', 'contract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n', '    string private constant ERROR_AUTH_FAILED = "APP_AUTH_FAILED";\n', '\n', '    modifier auth(bytes32 _role) {\n', '        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    modifier authP(bytes32 _role, uint256[] _params) {\n', '        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether an action can be performed by a sender for a particular role on this app\n', '    * @param _sender Sender of the call\n', '    * @param _role Role on this app\n', '    * @param _params Permission params for the role\n', '    * @return Boolean indicating whether the sender has the permissions to perform the action.\n', "    *         Always returns false if the app hasn't been initialized yet.\n", '    */\n', '    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n', '        if (!hasInitialized()) {\n', '            return false;\n', '        }\n', '\n', '        IKernel linkedKernel = kernel();\n', '        if (address(linkedKernel) == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        return linkedKernel.hasPermission(\n', '            _sender,\n', '            address(this),\n', '            _role,\n', '            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Get the recovery vault for the app\n', '    * @return Recovery vault address for the app\n', '    */\n', '    function getRecoveryVault() public view returns (address) {\n', '        // Funds recovery via a vault is only available when used with a kernel\n', '        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-shared-minime/contracts/ITokenController.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @dev The token controller contract must implement these functions\n', '\n', '\n', 'interface ITokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) external payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n', '}\n', '\n', '// File: @aragon/apps-shared-minime/contracts/MiniMeToken.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    address public controller;\n', '\n', '    function Controlled()  public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController  public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes _data\n', '    ) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        MiniMeTokenFactory _tokenFactory,\n', '        MiniMeToken _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    )  public\n', '    {\n', '        tokenFactory = _tokenFactory;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount)\n', '                return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '        require(parentSnapShotBlock < block.number);\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '        // Alerts the token controller of the transfer\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n', '        }\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        var previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '        // An event to make the transfer easy to find on the blockchain\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            // Adding the ` == true` makes the linter shut up so...\n', '            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        _spender.receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '    ) public returns(MiniMeToken)\n', '    {\n', '        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n', '\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            snapshot,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), snapshot);\n', '        return cloneToken;\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController public {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0)\n', '            return false;\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () external payable {\n', '        require(isContract(controller));\n', '        // Adding the ` == true` makes the linter shut up so...\n', '        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController public {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        MiniMeToken _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken)\n', '    {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/common/DepositableStorage.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', 'contract DepositableStorage {\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    // keccak256("aragonOS.depositableStorage.depositable")\n', '    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n', '\n', '    function isDepositable() public view returns (bool) {\n', '        return DEPOSITABLE_POSITION.getStorageBool();\n', '    }\n', '\n', '    function setDepositable(bool _depositable) internal {\n', '        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n', '    }\n', '}\n', '\n', '// File: @aragon/apps-vault/contracts/Vault.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n', '    using SafeERC20 for ERC20;\n', '\n', '    bytes32 public constant TRANSFER_ROLE = keccak256("TRANSFER_ROLE");\n', '\n', '    string private constant ERROR_DATA_NON_ZERO = "VAULT_DATA_NON_ZERO";\n', '    string private constant ERROR_NOT_DEPOSITABLE = "VAULT_NOT_DEPOSITABLE";\n', '    string private constant ERROR_DEPOSIT_VALUE_ZERO = "VAULT_DEPOSIT_VALUE_ZERO";\n', '    string private constant ERROR_TRANSFER_VALUE_ZERO = "VAULT_TRANSFER_VALUE_ZERO";\n', '    string private constant ERROR_SEND_REVERTED = "VAULT_SEND_REVERTED";\n', '    string private constant ERROR_VALUE_MISMATCH = "VAULT_VALUE_MISMATCH";\n', '    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = "VAULT_TOKEN_TRANSFER_FROM_REVERT";\n', '    string private constant ERROR_TOKEN_TRANSFER_REVERTED = "VAULT_TOKEN_TRANSFER_REVERTED";\n', '\n', '    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n', '    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n', '\n', '    /**\n', '    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n', '    *      intercepted by the Proxy (see aragonOS#281)\n', '    */\n', '    function () external payable isInitialized {\n', '        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n', '        _deposit(ETH, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @notice Initialize Vault app\n', '    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n', '    */\n', '    function initialize() external onlyInit {\n', '        initialized();\n', '        setDepositable(true);\n', '    }\n', '\n', '    /**\n', '    * @notice Deposit `_value` `_token` to the vault\n', '    * @param _token Address of the token being transferred\n', '    * @param _value Amount of tokens being transferred\n', '    */\n', '    function deposit(address _token, uint256 _value) external payable isInitialized {\n', '        _deposit(_token, _value);\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer `_value` `_token` from the Vault to `_to`\n', '    * @param _token Address of the token being transferred\n', '    * @param _to Address of the recipient of tokens\n', '    * @param _value Amount of tokens being transferred\n', '    */\n', '    /* solium-disable-next-line function-order */\n', '    function transfer(address _token, address _to, uint256 _value)\n', '        external\n', '        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n', '    {\n', '        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n', '\n', '        if (_token == ETH) {\n', '            require(_to.send(_value), ERROR_SEND_REVERTED);\n', '        } else {\n', '            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n', '        }\n', '\n', '        emit VaultTransfer(_token, _to, _value);\n', '    }\n', '\n', '    function balance(address _token) public view returns (uint256) {\n', '        if (_token == ETH) {\n', '            return address(this).balance;\n', '        } else {\n', '            return ERC20(_token).staticBalanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Disable recovery escape hatch, as it could be used\n', '    *      maliciously to transfer funds away from the vault\n', '    */\n', '    function allowRecoverability(address) public view returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function _deposit(address _token, uint256 _value) internal {\n', '        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n', '        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n', '\n', '        if (_token == ETH) {\n', '            // Deposit is implicit in this case\n', '            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n', '        } else {\n', '            require(\n', '                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n', '                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n', '            );\n', '        }\n', '\n', '        emit VaultDeposit(_token, msg.sender, _value);\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/SafeMath64.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n', '// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath64\n', ' * @dev Math operations for uint64 with safety checks that revert on error\n', ' */\n', 'library SafeMath64 {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint256 c = uint256(_a) * uint256(_b);\n', '        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n', '\n', '        return uint64(c);\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint64 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint64 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint64 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @aragon/os/contracts/lib/math/Math.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: @1hive/apps-token-manager/contracts/TokenManagerHook.sol\n', '\n', '/*\n', ' * SPDX-License-Identitifer:    GPL-3.0-or-later\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', '* @dev When creating a subcontract, we recommend overriding the _internal_ functions that you want to hook.\n', '*/\n', 'contract TokenManagerHook is ReentrancyGuard {\n', '\n', '    using UnstructuredStorage for bytes32;\n', '\n', '    /* Hardcoded constants to save gas\n', '    bytes32 public constant TOKEN_MANAGER_POSITION = keccak256("hookedTokenManager.tokenManagerHook.tokenManager");\n', '    */\n', '    bytes32 private constant TOKEN_MANAGER_POSITION = 0x5c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a;\n', '\n', '    modifier onlyTokenManager () {\n', '        require (TOKEN_MANAGER_POSITION.getStorageAddress() == msg.sender, "Hooks must be called from Token Manager");\n', '        _;\n', '    }\n', '    /*\n', '    * @dev Called when this contract has been included as a Token Manager hook\n', '    * @param _hookId The position in which the hook is going to be called\n', '    * @param _token The token controlled by the Token Manager\n', '    */\n', '    function onRegisterAsHook(uint256 _hookId, address _token) external nonReentrant {\n', '        require(TOKEN_MANAGER_POSITION.getStorageAddress() == 0x0, "Hook already registered by Token Manager");\n', '        TOKEN_MANAGER_POSITION.setStorageAddress(msg.sender);\n', '        _onRegisterAsHook(msg.sender, _hookId, _token);\n', '    }\n', '\n', '    /*\n', '    * @dev Called when this hook is being removed from the Token Manager\n', '    * @param _hookId The position in which the hook is going to be called\n', '    * @param _token The token controlled by the Token Manager\n', '    */\n', '    function onRevokeAsHook(uint256 _hookId, address _token) external onlyTokenManager nonReentrant {\n', '        _onRevokeAsHook(msg.sender, _hookId, _token);\n', '    }\n', '\n', '    /*\n', '    * @dev Notifies the hook about a token transfer allowing the hook to react if desired. It should return\n', '    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\n', '    * executing successfully.\n', '    * @param _from The origin of the transfer\n', '    * @param _to The destination of the transfer\n', '    * @param _amount The amount of the transfer\n', '    */\n', '    function onTransfer(address _from, address _to, uint256 _amount) external onlyTokenManager nonReentrant returns (bool) {\n', '        return _onTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /*\n', '    * @dev Notifies the hook about an approval allowing the hook to react if desired. It should return\n', '    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\n', '    * executing successfully.\n', '    * @param _holder The account that is allowing to spend\n', '    * @param _spender The account that is allowed to spend\n', '    * @param _amount The amount being allowed\n', '    */\n', '    function onApprove(address _holder, address _spender, uint _amount) external onlyTokenManager nonReentrant returns (bool) {\n', '        return _onApprove(_holder, _spender, _amount);\n', '    }\n', '\n', '    // Function to override if necessary:\n', '\n', '    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n', '        return;\n', '    }\n', '\n', '    function _onRevokeAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n', '        return;\n', '    }\n', '\n', '    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function _onApprove(address _holder, address _spender, uint _amount) internal returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ArrayUtils.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library ArrayUtils {\n', '    function deleteItem(uint256[] storage self, uint256 item) internal returns (bool) {\n', '        uint256 length = self.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (self[i] == item) {\n', '                uint256 newLength = self.length - 1;\n', '                if (i != newLength) {\n', '                    self[i] = self[newLength];\n', '                }\n', '\n', '                delete self[newLength];\n', '                self.length = newLength;\n', '\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function contains(uint256[] storage self, uint256 item) internal returns (bool) {\n', '        for (uint256 i = 0; i < self.length; i++) {\n', '            if (self[i] == item) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', '// File: contracts/ConvictionVoting.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ConvictionVoting is AragonApp, TokenManagerHook {\n', '    using SafeMath for uint256;\n', '    using SafeMath64 for uint64;\n', '    using ArrayUtils for uint256[];\n', '\n', '    bytes32 constant public UPDATE_SETTINGS_ROLE = keccak256("UPDATE_SETTINGS_ROLE");\n', '    bytes32 constant public CREATE_PROPOSALS_ROLE = keccak256("CREATE_PROPOSALS_ROLE");\n', '    bytes32 constant public CANCEL_PROPOSAL_ROLE = keccak256("CANCEL_PROPOSAL_ROLE");\n', '\n', '    uint256 constant public D = 10000000;\n', '    uint256 constant public ONE_HUNDRED_PERCENT = 1e18;\n', '    uint256 constant private TWO_128 = 0x100000000000000000000000000000000; // 2^128\n', '    uint256 constant private TWO_127 = 0x80000000000000000000000000000000; // 2^127\n', '    uint256 constant private TWO_64 = 0x10000000000000000; // 2^64\n', '    uint256 constant public ABSTAIN_PROPOSAL_ID = 1;\n', '    uint64 constant public MAX_STAKED_PROPOSALS = 10;\n', '\n', '    string private constant ERROR_PROPOSAL_DOES_NOT_EXIST = "CV_PROPOSAL_DOES_NOT_EXIST";\n', '    string private constant ERROR_STAKING_ALREADY_STAKED = "CV_STAKING_ALREADY_STAKED";\n', '    string private constant ERROR_PROPOSAL_NOT_ACTIVE = "CV_PROPOSAL_NOT_ACTIVE";\n', '    string private constant ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL = "CV_CANNOT_EXECUTE_ABSTAIN_PROPOSAL";\n', '    string private constant ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL = "CV_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL";\n', '    string private constant ERROR_INSUFFICIENT_CONVICION = "CV_INSUFFICIENT_CONVICION";\n', '    string private constant ERROR_SENDER_CANNOT_CANCEL = "CV_SENDER_CANNOT_CANCEL";\n', '    string private constant ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL = "CV_CANNOT_CANCEL_ABSTAIN_PROPOSAL";\n', '    string private constant ERROR_AMOUNT_OVER_MAX_RATIO = "CV_AMOUNT_OVER_MAX_RATIO";\n', '    string private constant ERROR_INCORRECT_TOKEN_MANAGER_HOOK = "CV_INCORRECT_TOKEN_MANAGER_HOOK";\n', '    string private constant ERROR_AMOUNT_CAN_NOT_BE_ZERO = "CV_AMOUNT_CAN_NOT_BE_ZERO";\n', '    string private constant ERROR_STAKING_MORE_THAN_AVAILABLE = "CV_STAKING_MORE_THAN_AVAILABLE";\n', '    string private constant ERROR_MAX_PROPOSALS_REACHED = "CV_MAX_PROPOSALS_REACHED";\n', '    string private constant ERROR_WITHDRAW_MORE_THAN_STAKED = "CV_WITHDRAW_MORE_THAN_STAKED";\n', '\n', '    enum ProposalStatus {\n', '        Active,              // A vote that has been reported to Agreements\n', '        Cancelled,           // A vote that has been cancelled\n', '        Executed             // A vote that has been executed\n', '    }\n', '\n', '    struct Proposal {\n', '        uint256 requestedAmount;\n', '        address beneficiary;\n', '        uint256 stakedTokens;\n', '        uint256 convictionLast;\n', '        uint64 blockLast;\n', '        ProposalStatus proposalStatus;\n', '        mapping(address => uint256) voterStake;\n', '        address submitter;\n', '    }\n', '\n', '    MiniMeToken public stakeToken;\n', '    Vault public vault;\n', '    address public requestToken;\n', '    uint256 public decay;\n', '    uint256 public maxRatio;\n', '    uint256 public weight;\n', '    uint256 public minThresholdStakePercentage;\n', '    uint256 public proposalCounter;\n', '    uint256 public totalStaked;\n', '\n', '    mapping(uint256 => Proposal) internal proposals;\n', '    mapping(address => uint256) internal totalVoterStake;\n', '    mapping(address => uint256[]) internal voterStakedProposals;\n', '\n', '    event ConvictionSettingsChanged(uint256 decay, uint256 maxRatio, uint256 weight, uint256 minThresholdStakePercentage);\n', '    event ProposalAdded(address indexed entity, uint256 indexed id, string title, bytes link, uint256 amount, address beneficiary);\n', '    event StakeAdded(address indexed entity, uint256 indexed id, uint256  amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\n', '    event StakeWithdrawn(address entity, uint256 indexed id, uint256 amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\n', '    event ProposalExecuted(uint256 indexed id, uint256 conviction);\n', '    event ProposalCancelled(uint256 indexed id);\n', '\n', '    modifier proposalExists(uint256 _proposalId) {\n', '        require(_proposalId == 1 || proposals[_proposalId].submitter != address(0), ERROR_PROPOSAL_DOES_NOT_EXIST);\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        MiniMeToken _stakeToken,\n', '        Vault _vault,\n', '        address _requestToken,\n', '        uint256 _decay,\n', '        uint256 _maxRatio,\n', '        uint256 _weight,\n', '        uint256 _minThresholdStakePercentage\n', '    )\n', '        public onlyInit\n', '    {\n', '        proposalCounter = 2; // First proposal should be #2, #1 is reserved for abstain proposal, #0 is not used for better UX.\n', '        stakeToken = _stakeToken;\n', '        vault = _vault;\n', '        requestToken = _requestToken;\n', '        decay = _decay;\n', '        maxRatio = _maxRatio;\n', '        weight = _weight;\n', '        minThresholdStakePercentage = _minThresholdStakePercentage;\n', '\n', '        proposals[ABSTAIN_PROPOSAL_ID] = Proposal(\n', '            0,\n', '            0x0,\n', '            0,\n', '            0,\n', '            0,\n', '            ProposalStatus.Active,\n', '            0x0\n', '        );\n', '        emit ProposalAdded(0x0, ABSTAIN_PROPOSAL_ID, "Abstain proposal", "", 0, 0x0);\n', '\n', '        initialized();\n', '    }\n', '\n', '    /**\n', '     * @notice Update the conviction voting parameters\n', '     * @param _decay The rate at which conviction is accrued or lost from a proposal\n', '     * @param _maxRatio Proposal threshold parameter\n', '     * @param _weight Proposal threshold parameter\n', '     * @param _minThresholdStakePercentage The minimum percent of stake token max supply that is used for calculating\n', '        conviction\n', '     */\n', '    function setConvictionCalculationSettings(\n', '        uint256 _decay,\n', '        uint256 _maxRatio,\n', '        uint256 _weight,\n', '        uint256 _minThresholdStakePercentage\n', '    )\n', '        public auth(UPDATE_SETTINGS_ROLE)\n', '    {\n', '        decay = _decay;\n', '        maxRatio = _maxRatio;\n', '        weight = _weight;\n', '        minThresholdStakePercentage = _minThresholdStakePercentage;\n', '\n', '        emit ConvictionSettingsChanged(_decay, _maxRatio, _weight, _minThresholdStakePercentage);\n', '    }\n', '\n', '    /**\n', '     * @notice Add proposal `_title` for  `@tokenAmount((self.requestToken(): address), _requestedAmount)` to `_beneficiary`\n', '     * @param _title Title of the proposal\n', "     * @param _link IPFS or HTTP link with proposal's description\n", '     * @param _requestedAmount Tokens requested\n', '     * @param _beneficiary Address that will receive payment\n', '     */\n', '    function addProposal(\n', '        string _title,\n', '        bytes _link,\n', '        uint256 _requestedAmount,\n', '        address _beneficiary\n', '    )\n', '        external isInitialized() auth(CREATE_PROPOSALS_ROLE)\n', '    {\n', '        proposals[proposalCounter] = Proposal(\n', '            _requestedAmount,\n', '            _beneficiary,\n', '            0,\n', '            0,\n', '            0,\n', '            ProposalStatus.Active,\n', '            msg.sender\n', '        );\n', '\n', '        emit ProposalAdded(msg.sender, proposalCounter, _title, _link, _requestedAmount, _beneficiary);\n', '        proposalCounter++;\n', '    }\n', '\n', '    /**\n', '      * @notice Stake `@tokenAmount((self.stakeToken(): address), _amount)` on proposal #`_proposalId`\n', '      * @param _proposalId Proposal id\n', '      * @param _amount Amount of tokens staked\n', '      */\n', '    function stakeToProposal(uint256 _proposalId, uint256 _amount) external isInitialized() {\n', '        _stake(_proposalId, _amount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Stake all my `(self.stakeToken(): address).symbol(): string` tokens on proposal #`_proposalId`\n', '     * @param _proposalId Proposal id\n', '     */\n', '    function stakeAllToProposal(uint256 _proposalId) external isInitialized() {\n', '        require(totalVoterStake[msg.sender] == 0, ERROR_STAKING_ALREADY_STAKED);\n', '        _stake(_proposalId, stakeToken.balanceOf(msg.sender), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw `@tokenAmount((self.stakeToken(): address), _amount)` previously staked on proposal #`_proposalId`\n', '     * @param _proposalId Proposal id\n', '     * @param _amount Amount of tokens withdrawn\n', '     */\n', '    function withdrawFromProposal(uint256 _proposalId, uint256 _amount) external isInitialized() proposalExists(_proposalId) {\n', '        _withdrawFromProposal(_proposalId, _amount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw all `(self.stakeToken(): address).symbol(): string` tokens previously staked on proposal #`_proposalId`\n', '     * @param _proposalId Proposal id\n', '     */\n', '    function withdrawAllFromProposal(uint256 _proposalId) external isInitialized() proposalExists(_proposalId) {\n', '        _withdrawFromProposal(_proposalId, proposals[_proposalId].voterStake[msg.sender], msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Execute proposal #`_proposalId`\n', '     * @dev ...by sending `@tokenAmount((self.requestToken(): address), self.getPropoal(_proposalId): ([uint256], address, uint256, uint256, uint64, bool))` to `self.getPropoal(_proposalId): (uint256, [address], uint256, uint256, uint64, bool)`\n', '     * @param _proposalId Proposal id\n', '     */\n', '    function executeProposal(uint256 _proposalId) external isInitialized() proposalExists(_proposalId) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '\n', '        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL);\n', '        require(proposal.requestedAmount > 0, ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL);\n', '        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\n', '        _calculateAndSetConviction(proposal, proposal.stakedTokens);\n', '        require(proposal.convictionLast > calculateThreshold(proposal.requestedAmount), ERROR_INSUFFICIENT_CONVICION);\n', '\n', '        proposal.proposalStatus = ProposalStatus.Executed;\n', '        vault.transfer(requestToken, proposal.beneficiary, proposal.requestedAmount);\n', '\n', '        emit ProposalExecuted(_proposalId, proposal.convictionLast);\n', '    }\n', '\n', '    /**\n', '     * @notice Cancel proposal #`_proposalId`\n', '     * @param _proposalId Proposal id\n', '     */\n', '    function cancelProposal(uint256 _proposalId) external proposalExists(_proposalId) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '\n', '        bool senderHasPermission = canPerform(msg.sender, CANCEL_PROPOSAL_ROLE, new uint256[](0));\n', '        require(proposal.submitter == msg.sender || senderHasPermission, ERROR_SENDER_CANNOT_CANCEL);\n', '        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL);\n', '        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\n', '\n', '        proposal.proposalStatus = ProposalStatus.Cancelled;\n', '\n', '        emit ProposalCancelled(_proposalId);\n', '    }\n', '\n', '    /**\n', '     * @dev Get proposal details\n', '     * @param _proposalId Proposal id\n', '     * @return Requested amount\n', '     * @return Beneficiary address\n', '     * @return Current total stake of tokens on this proposal\n', '     * @return Conviction this proposal had last time calculateAndSetConviction was called\n', '     * @return Block when calculateAndSetConviction was called\n', '     * @return True if proposal has already been executed\n', '     * @return ProposalStatus defining the state of the proposal\n', '     * @return Submitter of the proposal\n', '     */\n', '    function getProposal(uint256 _proposalId) public view returns (\n', '        uint256 requestedAmount,\n', '        address beneficiary,\n', '        uint256 stakedTokens,\n', '        uint256 convictionLast,\n', '        uint64 blockLast,\n', '        ProposalStatus proposalStatus,\n', '        address submitter\n', '    )\n', '    {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        return (\n', '            proposal.requestedAmount,\n', '            proposal.beneficiary,\n', '            proposal.stakedTokens,\n', '            proposal.convictionLast,\n', '            proposal.blockLast,\n', '            proposal.proposalStatus,\n', '            proposal.submitter\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Get stake of voter `_voter` on proposal #`_proposalId`\n', '     * @param _proposalId Proposal id\n', '     * @param _voter Voter address\n', '     * @return Proposal voter stake\n', '     */\n', '    function getProposalVoterStake(uint256 _proposalId, address _voter) public view returns (uint256) {\n', '        return proposals[_proposalId].voterStake[_voter];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the total stake of voter `_voter` on all proposals\n', '     * @param _voter Voter address\n', '     * @return Total voter stake\n', '     */\n', '    function getTotalVoterStake(address _voter) public view returns (uint256) {\n', '        return totalVoterStake[_voter];\n', '    }\n', '\n', '    /**\n', "     * @notice Get all proposal ID's voter `_voter` has currently staked to\n", '     * @param _voter Voter address\n', '     * @return Voter proposals\n', '     */\n', '    function getVoterStakedProposals(address _voter) public view returns (uint256[]) {\n', '        return voterStakedProposals[_voter];\n', '    }\n', '\n', '    /**\n', '     * @dev Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a)\n', '     * Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\n', '     * @param _timePassed Number of blocks since last conviction record\n', '     * @param _lastConv Last conviction record\n', '     * @param _oldAmount Amount of tokens staked until now\n', '     * @return Current conviction\n', '     */\n', '    function calculateConviction(\n', '        uint64 _timePassed,\n', '        uint256 _lastConv,\n', '        uint256 _oldAmount\n', '    )\n', '        public view returns(uint256)\n', '    {\n', '        uint256 t = uint256(_timePassed);\n', '        // atTWO_128 = 2^128 * a^t\n', '        uint256 atTWO_128 = _pow((decay << 128).div(D), t);\n', '        // solium-disable-previous-line\n', '        // conviction = (atTWO_128 * _lastConv + _oldAmount * D * (2^128 - atTWO_128) / (D - aD) + 2^127) / 2^128\n', '        return (atTWO_128.mul(_lastConv).add(_oldAmount.mul(D).mul(TWO_128.sub(atTWO_128)).div(D - decay))).add(TWO_127) >> 128;\n', '    }\n', '\n', '    /**\n', '     * @dev Formula: ρ * totalStaked / (1 - a) / (β - requestedAmount / total)**2\n', '     * For the Solidity implementation we amplify ρ and β and simplify the formula:\n', '     * weight = ρ * D\n', '     * maxRatio = β * D\n', '     * decay = a * D\n', '     * threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - requestedAmount * D) ** 2\n', '     * @param _requestedAmount Requested amount of tokens on certain proposal\n', "     * @return Threshold a proposal's conviction should surpass in order to be able to\n", '     * executed it.\n', '     */\n', '    function calculateThreshold(uint256 _requestedAmount) public view returns (uint256 _threshold) {\n', '        uint256 funds = vault.balance(requestToken);\n', '        require(maxRatio.mul(funds) > _requestedAmount.mul(D), ERROR_AMOUNT_OVER_MAX_RATIO);\n', '        // denom = maxRatio * 2 ** 64 / D  - requestedAmount * 2 ** 64 / funds\n', '        uint256 denom = (maxRatio << 64).div(D).sub((_requestedAmount << 64).div(funds));\n', '        // _threshold = (weight * 2 ** 128 / D) / (denom ** 2 / 2 ** 64) * totalStaked * D / 2 ** 128\n', '        _threshold = ((weight << 128).div(D).div(denom.mul(denom) >> 64)).mul(D).div(D.sub(decay)).mul(_totalStaked()) >> 64;\n', '    }\n', '\n', '    function _totalStaked() internal view returns (uint256) {\n', '        uint256 minTotalStake = (stakeToken.totalSupply().mul(minThresholdStakePercentage)).div(ONE_HUNDRED_PERCENT);\n', '        return totalStaked < minTotalStake ? minTotalStake : totalStaked;\n', '    }\n', '\n', '    /**\n', "     * @dev Overrides TokenManagerHook's `_onRegisterAsHook`\n", '     */\n', '    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n', '        require(_token == address(stakeToken), ERROR_INCORRECT_TOKEN_MANAGER_HOOK);\n', '    }\n', '\n', '    /**\n', "     * @dev Overrides TokenManagerHook's `_onTransfer`\n", '     */\n', '    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        if (_from == 0x0) {\n', '            return true; // Do nothing on token mintings\n', '        }\n', '\n', '        uint256 newBalance = stakeToken.balanceOf(_from).sub(_amount);\n', '        if (newBalance < totalVoterStake[_from]) {\n', '            _withdrawInactiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\n', '        }\n', '\n', '        if (newBalance < totalVoterStake[_from]) {\n', '            _withdrawActiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\n', '     * 2^128 and parameter _b should be less than 2^128.\n', '     * @param _a left argument\n', '     * @param _b right argument\n', '     * @return _a * _b / 2^128\n', '     */\n', '    function _mul(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n', '        require(_a <= TWO_128, "_a should be less than or equal to 2^128");\n', '        require(_b < TWO_128, "_b should be less than 2^128");\n', '        return _a.mul(_b).add(TWO_127) >> 128;\n', '    }\n', '\n', '    /**\n', '     * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\n', '     *\n', '     * @param _a left argument\n', '     * @param _b right argument\n', '     * @return (_a / 2^128)^_b * 2^128\n', '     */\n', '    function _pow(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n', '        require(_a < TWO_128, "_a should be less than 2^128");\n', '        uint256 a = _a;\n', '        uint256 b = _b;\n', '        _result = TWO_128;\n', '        while (b > 0) {\n', '            if (b & 1 == 0) {\n', '                a = _mul(a, a);\n', '                b >>= 1;\n', '            } else {\n', '                _result = _mul(_result, a);\n', '                b -= 1;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate conviction and store it on the proposal\n', '     * @param _proposal Proposal\n', '     * @param _oldStaked Amount of tokens staked on a proposal until now\n', '     */\n', '    function _calculateAndSetConviction(Proposal storage _proposal, uint256 _oldStaked) internal {\n', '        uint64 blockNumber = getBlockNumber64();\n', '        assert(_proposal.blockLast <= blockNumber);\n', '        if (_proposal.blockLast == blockNumber) {\n', '            return; // Conviction already stored\n', '        }\n', '        // calculateConviction and store it\n', '        uint256 conviction = calculateConviction(\n', "            blockNumber - _proposal.blockLast, // we assert it doesn't overflow above\n", '            _proposal.convictionLast,\n', '            _oldStaked\n', '        );\n', '        _proposal.blockLast = blockNumber;\n', '        _proposal.convictionLast = conviction;\n', '    }\n', '\n', '    /**\n', '     * @dev Stake an amount of tokens on a proposal\n', '     * @param _proposalId Proposal id\n', '     * @param _amount Amount of staked tokens\n', '     * @param _from Account from which we stake\n', '     */\n', '    function _stake(uint256 _proposalId, uint256 _amount, address _from) internal proposalExists(_proposalId) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n', '        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\n', '\n', '        uint256 unstakedAmount = stakeToken.balanceOf(_from).sub(totalVoterStake[_from]);\n', '        if (_amount > unstakedAmount) {\n', '            _withdrawInactiveStakedTokens(_amount.sub(unstakedAmount), _from);\n', '        }\n', '\n', '        require(totalVoterStake[_from].add(_amount) <= stakeToken.balanceOf(_from), ERROR_STAKING_MORE_THAN_AVAILABLE);\n', '\n', '        uint256 previousStake = proposal.stakedTokens;\n', '        proposal.stakedTokens = proposal.stakedTokens.add(_amount);\n', '        proposal.voterStake[_from] = proposal.voterStake[_from].add(_amount);\n', '        totalVoterStake[_from] = totalVoterStake[_from].add(_amount);\n', '        totalStaked = totalStaked.add(_amount);\n', '\n', '        if (proposal.blockLast == 0) {\n', '            proposal.blockLast = getBlockNumber64();\n', '        } else {\n', '            _calculateAndSetConviction(proposal, previousStake);\n', '        }\n', '\n', '        _updateVoterStakedProposals(_proposalId, _from);\n', '\n', '        emit StakeAdded(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\n', '    }\n', '\n', '    function _updateVoterStakedProposals(uint256 _proposalId, address _submitter) internal {\n', '        uint256[] storage voterStakedProposalsArray = voterStakedProposals[_submitter];\n', '\n', '        if (!voterStakedProposalsArray.contains(_proposalId)) {\n', '            require(voterStakedProposalsArray.length < MAX_STAKED_PROPOSALS, ERROR_MAX_PROPOSALS_REACHED);\n', '            voterStakedProposalsArray.push(_proposalId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw staked tokens from executed proposals until a target amount is reached.\n', '     * @param _targetAmount Target at which to stop withdrawing tokens\n', '     * @param _from Account to withdraw from\n', '     */\n', '    function _withdrawInactiveStakedTokens(uint256 _targetAmount, address _from) internal {\n', '        uint256 i = 0;\n', '        uint256 toWithdraw;\n', '        uint256 withdrawnAmount = 0;\n', '        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\n', '\n', '        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\n', '            uint256 proposalId = voterStakedProposalsCopy[i];\n', '            Proposal storage proposal = proposals[proposalId];\n', '\n', '            if (proposal.proposalStatus == ProposalStatus.Executed || proposal.proposalStatus == ProposalStatus.Cancelled) {\n', '                toWithdraw = proposal.voterStake[_from];\n', '                if (toWithdraw > 0) {\n', '                    _withdrawFromProposal(proposalId, toWithdraw, _from);\n', '                    withdrawnAmount = withdrawnAmount.add(toWithdraw);\n', '                }\n', '            }\n', '            i++;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw staked tokens from active proposals until a target amount is reached.\n', '     * @param _targetAmount Target at which to stop withdrawing tokens\n', '     * @param _from Account to withdraw from\n', '     */\n', '    function _withdrawActiveStakedTokens(uint256 _targetAmount, address _from) internal {\n', '        uint256 i = 0;\n', '        uint256 toWithdraw;\n', '        uint256 withdrawnAmount = 0;\n', '        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\n', '\n', '        if (voterStakedProposals[_from].contains(ABSTAIN_PROPOSAL_ID)) {\n', '            toWithdraw = Math.min256(_targetAmount, proposals[ABSTAIN_PROPOSAL_ID].voterStake[_from]);\n', '            if (toWithdraw > 0) {\n', '                _withdrawFromProposal(ABSTAIN_PROPOSAL_ID, toWithdraw, _from);\n', '                withdrawnAmount = withdrawnAmount.add(toWithdraw);\n', '            }\n', '        }\n', '\n', '        // We reset this variable as _withdrawFromProposal can update voterStakedProposals\n', '        voterStakedProposalsCopy = voterStakedProposals[_from];\n', '\n', '        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\n', '            uint256 proposalId = voterStakedProposalsCopy[i];\n', '            Proposal storage proposal = proposals[proposalId];\n', '\n', '            // In active proposals, we only subtract the needed amount to reach the target\n', '            toWithdraw = Math.min256(_targetAmount.sub(withdrawnAmount), proposal.voterStake[_from]);\n', '            if (toWithdraw > 0) {\n', '                _withdrawFromProposal(proposalId, toWithdraw, _from);\n', '                withdrawnAmount = withdrawnAmount.add(toWithdraw);\n', '            }\n', '            i++;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw an amount of tokens from a proposal\n', '     * @param _proposalId Proposal id\n', '     * @param _amount Amount of withdrawn tokens\n', '     * @param _from Account to withdraw from\n', '     */\n', '    function _withdrawFromProposal(uint256 _proposalId, uint256 _amount, address _from) internal {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        require(proposal.voterStake[_from] >= _amount, ERROR_WITHDRAW_MORE_THAN_STAKED);\n', '        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n', '\n', '        uint256 previousStake = proposal.stakedTokens;\n', '        proposal.stakedTokens = proposal.stakedTokens.sub(_amount);\n', '        proposal.voterStake[_from] = proposal.voterStake[_from].sub(_amount);\n', '        totalVoterStake[_from] = totalVoterStake[_from].sub(_amount);\n', '        totalStaked = totalStaked.sub(_amount);\n', '\n', '        if (proposal.voterStake[_from] == 0) {\n', '            voterStakedProposals[_from].deleteItem(_proposalId);\n', '        }\n', '\n', '        if (proposal.proposalStatus == ProposalStatus.Active) {\n', '            _calculateAndSetConviction(proposal, previousStake);\n', '        }\n', '\n', '        emit StakeWithdrawn(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\n', '    }\n', '}']