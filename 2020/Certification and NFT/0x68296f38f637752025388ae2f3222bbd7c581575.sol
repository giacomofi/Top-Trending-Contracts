['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Proxy {\n', '    function execute(address to, uint value, bytes calldata data) external returns (bool, bytes memory);\n', '    function increaseAmount(uint) external;\n', '}\n', '\n', 'interface Mintr {\n', '    function mint_for(address, address) external;\n', '}\n', '\n', 'contract StrategyProxy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    Proxy constant public proxy = Proxy(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n', '    address constant public mintr = address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\n', '    address constant public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    \n', '    mapping(address => bool) public strategies;\n', '    address public governance;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function approveStrategy(address _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategies[_strategy] = true;\n', '    }\n', '    \n', '    function revokeStrategy(address _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategies[_strategy] = false;\n', '    }\n', '    \n', '    function lock() external {\n', '        proxy.increaseAmount(IERC20(crv).balanceOf(address(proxy)));\n', '    }\n', '    \n', '    function withdraw(address _gauge, address _token, uint _amount) public returns (uint) {\n', '        require(strategies[msg.sender], "!strategy");\n', '        uint _before = IERC20(_token).balanceOf(address(proxy));\n', '        proxy.execute(_gauge, 0, abi.encodeWithSignature("withdraw(uint256)",_amount));\n', '        uint _after = IERC20(_token).balanceOf(address(proxy));\n', '        uint _net = _after.sub(_before);\n', '        proxy.execute(_token, 0, abi.encodeWithSignature("transfer(address,uint256)",msg.sender,_net));\n', '        return _net;\n', '    }\n', '    \n', '    function balanceOf(address _gauge) public view returns (uint) {\n', '        return IERC20(_gauge).balanceOf(address(proxy));\n', '    }\n', '    \n', '    function withdrawAll(address _gauge, address _token) external returns (uint) {\n', '        require(strategies[msg.sender], "!strategy");\n', '        return withdraw(_gauge, _token, balanceOf(_gauge));\n', '    }\n', '    \n', '    function deposit(address _gauge, address _token) external {\n', '        uint _balance = IERC20(_token).balanceOf(address(this));\n', '        IERC20(_token).safeTransfer(address(proxy), _balance);\n', '        \n', '        _balance = IERC20(_token).balanceOf(address(proxy));\n', '        proxy.execute(_token, 0, abi.encodeWithSignature("approve(address,uint256)",_gauge,0));\n', '        proxy.execute(_token, 0, abi.encodeWithSignature("approve(address,uint256)",_gauge,_balance));\n', '        proxy.execute(_gauge, 0, abi.encodeWithSignature("deposit(uint256)",_balance));\n', '    }\n', '    \n', '    function harvest(address _gauge) external {\n', '        require(strategies[msg.sender], "!strategy");\n', '        uint _before = IERC20(crv).balanceOf(address(proxy));\n', '        Mintr(mintr).mint_for(_gauge, address(proxy));\n', '        uint _after = IERC20(crv).balanceOf(address(proxy));\n', '        uint _balance = _after.sub(_before);\n', '        proxy.execute(crv, 0, abi.encodeWithSignature("transfer(address,uint256)",msg.sender,_balance));\n', '    }\n', '}']