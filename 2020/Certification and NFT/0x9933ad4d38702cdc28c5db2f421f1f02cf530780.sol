['pragma solidity 0.5.16;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "Owner should not be 0 address");\n', '        require(_newOwner != owner, "The current and new owner cannot be the same");\n', '        require(_newOwner != newOwner, "Cannot set the candidate owner to the same address");\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner, "msg.sender and _newOwner must be the same");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract InsuranceImprovementProposalProxy is Ownable {\n', '\n', '    address payable public IIP = address(0x616305e016B0539B8A550c9ECafe66BDb88956b2);\n', '\n', '    modifier isHuman() {\n', '        require(msg.sender == tx.origin, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    function forward() external isHuman() {\n', '        address payable self = address(uint160(address(this)));\n', '        address payable sender = msg.sender;\n', '\n', '        (bool pass, ) = sender.call.value(self.balance / 200)(""); // 0.5% rebate\n', '        (bool success, ) = IIP.call.value(self.balance)("");\n', '        require(pass && success, "something went wrong");\n', '    }\n', '\n', '    function newIIP(address payable _IIP) external onlyOwner {\n', '        IIP =_IIP;\n', '    }\n', '}\n', '\n', 'contract Exchange {\n', '    function trade(\n', '        address src,\n', '        uint256 srcAmount,\n', '        address dest,\n', '        address destAddress,\n', '        uint256 maxDestAmount,\n', '        uint256 minConversionRate,\n', '        address walletId\n', '    ) public payable returns (uint256);\n', '}\n', '\n', 'contract InsuranceImprovementProposal {\n', '    Exchange constant kyberEx = Exchange(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n', '    address constant etherAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address constant bank = 0x83D0D842e6DB3B020f384a2af11bD14787BEC8E7;\n', '\n', '    function() external payable {\n', '        kyberEx.trade.value(msg.value)(\n', '            etherAddr,\n', '            msg.value,\n', '            0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2, //MKR address\n', '            bank,\n', '            10e28,\n', '            1,\n', '            bank\n', '        );\n', '    }\n', '}']