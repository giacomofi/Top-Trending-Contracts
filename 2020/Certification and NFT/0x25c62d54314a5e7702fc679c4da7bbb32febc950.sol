['/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'abstract contract Proxy {\n', '  /**\n', '   * @dev Fallback function.\n', '   * Implemented entirely in `_fallback`.\n', '   */\n', '  fallback () payable external {\n', '    _fallback();\n', '  }\n', '  \n', '  receive () payable external {\n', '    _fallback();\n', '  }\n', '\n', '  /**\n', '   * @return The Address of the implementation.\n', '   */\n', '  function _implementation() virtual internal view returns (address);\n', '\n', '  /**\n', '   * @dev Delegates execution to an implementation contract.\n', "   * This is a low level function that doesn't return to its internal call site.\n", '   * It will return to the external caller whatever the implementation returns.\n', '   * @param implementation Address to delegate.\n', '   */\n', '  function _delegate(address implementation) internal {\n', '    assembly {\n', '      // Copy msg.data. We take full control of memory in this inline assembly\n', '      // block because it will not return to Solidity code. We overwrite the\n', '      // Solidity scratch pad at memory position 0.\n', '      calldatacopy(0, 0, calldatasize())\n', '\n', '      // Call the implementation.\n', "      // out and outsize are 0 because we don't know the size yet.\n", '      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '      // Copy the returned data.\n', '      returndatacopy(0, 0, returndatasize())\n', '\n', '      switch result\n', '      // delegatecall returns 0 on error.\n', '      case 0 { revert(0, returndatasize()) }\n', '      default { return(0, returndatasize()) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is run as the first thing in the fallback function.\n', '   * Can be redefined in derived contracts to add functionality.\n', '   * Redefinitions must call super._willFallback().\n', '   */\n', '  function _willFallback() virtual internal {\n', '      \n', '  }\n', '\n', '  /**\n', '   * @dev fallback implementation.\n', '   * Extracted to enable manual triggering.\n', '   */\n', '  function _fallback() internal {\n', '    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\n', '        return;\n', '    _willFallback();\n', '    _delegate(_implementation());\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseUpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'abstract contract BaseUpgradeabilityProxy is Proxy {\n', '  /**\n', '   * @dev Emitted when the implementation is upgraded.\n', '   * @param implementation Address of the new implementation.\n', '   */\n', '  event Upgraded(address indexed implementation);\n', '\n', '  /**\n', '   * @dev Storage slot with the address of the current implementation.\n', '   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return impl Address of the current implementation\n', '   */\n', '  function _implementation() override internal view returns (address impl) {\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '    assembly {\n', '      impl := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the proxy to a new implementation.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _upgradeTo(address newImplementation) internal {\n', '    _setImplementation(newImplementation);\n', '    emit Upgraded(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the implementation address of the proxy.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _setImplementation(address newImplementation) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newImplementation)\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseAdminUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with an authorization\n', ' * mechanism for administrative tasks.\n', ' * All external functions in this contract must be guarded by the\n', ' * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n', ' * feature proposal that would enable this to be done automatically.\n', ' */\n', 'contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Emitted when the administration has been transferred.\n', '   * @param previousAdmin Address of the previous admin.\n', '   * @param newAdmin Address of the new admin.\n', '   */\n', '  event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '  /**\n', '   * @dev Storage slot with the admin of the contract.\n', '   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '\n', '  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '  /**\n', '   * @dev Modifier to check whether the `msg.sender` is the admin.\n', '   * If it is, it will run the function. Otherwise, it will delegate the call\n', '   * to the implementation.\n', '   */\n', '  modifier ifAdmin() {\n', '    if (msg.sender == _admin()) {\n', '      _;\n', '    } else {\n', '      _fallback();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @return The address of the proxy admin.\n', '   */\n', '  function admin() external ifAdmin returns (address) {\n', '    return _admin();\n', '  }\n', '\n', '  /**\n', '   * @return The address of the implementation.\n', '   */\n', '  function implementation() external ifAdmin returns (address) {\n', '    return _implementation();\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the admin of the proxy.\n', '   * Only the current admin can call this function.\n', '   * @param newAdmin Address to transfer proxy administration to.\n', '   */\n', '  function changeAdmin(address newAdmin) external ifAdmin {\n', '    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\n', '    emit AdminChanged(_admin(), newAdmin);\n', '    _setAdmin(newAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy.\n', '   * Only the admin can call this function.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function upgradeTo(address newImplementation) external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy and call a function\n', '   * on the new implementation.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param newImplementation Address of the new implementation.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   */\n', '  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '    (bool success,) = newImplementation.delegatecall(data);\n', '    require(success);\n', '  }\n', '\n', '  /**\n', '   * @return adm The admin slot.\n', '   */\n', '  function _admin() internal view returns (address adm) {\n', '    bytes32 slot = ADMIN_SLOT;\n', '    assembly {\n', '      adm := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the proxy admin.\n', '   * @param newAdmin Address of the new proxy admin.\n', '   */\n', '  function _setAdmin(address newAdmin) internal {\n', '    bytes32 slot = ADMIN_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newAdmin)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Only fall back when the sender is not the admin.\n', '   */\n', '  function _willFallback() virtual override internal {\n', '    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\n', '    //super._willFallback();\n', '  }\n', '}\n', '\n', 'interface IAdminUpgradeabilityProxyView {\n', '  function admin() external view returns (address);\n', '  function implementation() external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _logic, bytes memory _data) public payable {\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '  \n', '  //function _willFallback() virtual override internal {\n', '    //super._willFallback();\n', '  //}\n', '}\n', '\n', '\n', '/**\n', ' * @title AdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\n', '  /**\n', '   * Contract constructor.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableUpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableAdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\n', '  /**\n', '   * Contract initializer.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _admin, address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', '    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface IProxyFactory {\n', '    function productImplementation() external view returns (address);\n', '    function productImplementations(bytes32 name) external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title ProductProxy\n', ' * @dev This contract implements a proxy that \n', ' * it is deploied by ProxyFactory, \n', " * and it's implementation is stored in factory.\n", ' */\n', 'contract ProductProxy is Proxy {\n', '    \n', '  /**\n', '   * @dev Storage slot with the address of the ProxyFactory.\n', '   * This is the keccak-256 hash of "eip1967.proxy.factory" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\n', '\n', '  function productName() virtual public pure returns (bytes32) {\n', '    return 0x0;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the factory address of the ProductProxy.\n', '   * @param newFactory Address of the new factory.\n', '   */\n', '  function _setFactory(address newFactory) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newFactory), "Cannot set a factory to a non-contract address");\n', '\n', '    bytes32 slot = FACTORY_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newFactory)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the factory.\n', '   * @return factory Address of the factory.\n', '   */\n', '  function _factory() internal view returns (address factory) {\n', '    bytes32 slot = FACTORY_SLOT;\n', '    assembly {\n', '      factory := sload(slot)\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return Address of the current implementation\n', '   */\n', '  function _implementation() virtual override internal view returns (address) {\n', '    address factory = _factory();\n', '    if(OpenZeppelinUpgradesAddress.isContract(factory))\n', '        return IProxyFactory(factory).productImplementations(productName());\n', '    else\n', '        return address(0);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableProductProxy\n', ' * @dev Extends ProductProxy with an initializer for initializing\n', ' * factory and init data.\n', ' */\n', 'contract InitializableProductProxy is ProductProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param factory Address of the initial factory.\n', '   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address factory, bytes memory data) public payable {\n', '    require(_factory() == address(0));\n', "    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\n", '    _setFactory(factory);\n', '    if(data.length > 0) {\n', '      (bool success,) = _implementation().delegatecall(data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' *\n', ' * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\n', ' * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\n', ' * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\n', ' * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\n', ' */\n', 'library OpenZeppelinUpgradesAddress {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    //function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '\n', 'contract Constants {\n', "    bytes32 internal constant _LongOption_      = 'LongOption';\n", "    bytes32 internal constant _ShortOption_     = 'ShortOption';\n", "    bytes32 internal constant _feeRate_         = 'feeRate';\n", "    bytes32 internal constant _feeRecipient_    = 'feeRecipient';\n", "    bytes32 internal constant _uniswapRounter_  = 'uniswapRounter';\n", '}\n', '\n', 'contract OptionFactory is Configurable, Constants {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    mapping(bytes32 => address) public productImplementations;\n', '    mapping(address => mapping(address => mapping(address => mapping(uint => mapping(uint => address))))) public longs;\n', '    mapping(address => mapping(address => mapping(address => mapping(uint => mapping(uint => address))))) public shorts;\n', '    address[] public allLongs;\n', '    address[] public allShorts;\n', '    \n', '    function length() public view returns (uint) {\n', '        return allLongs.length;\n', '    }\n', '\n', '    function initialize(address _governor, address _implLongOption, address _implShortOption, address _feeRecipient) public initializer {\n', '        super.initialize(_governor);\n', '        productImplementations[_LongOption_]    = _implLongOption;\n', '        productImplementations[_ShortOption_]   = _implShortOption;\n', '        config[_feeRate_]                       = 0.002 ether;        // 0.2%\n', '        config[_feeRecipient_]                  = uint(_feeRecipient);\n', '        config[_uniswapRounter_]                = uint(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    }\n', '\n', '    function upgradeProductImplementationsTo(address _implLongOption, address _implShortOption) external governance {\n', '        productImplementations[_LongOption_] = _implLongOption;\n', '        productImplementations[_ShortOption_] = _implShortOption;\n', '    }\n', '    \n', '    function createOption(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry) public returns (address long, address short) {\n', "        require(_collateral != _underlying, 'Payaso: IDENTICAL_ADDRESSES');\n", "        require(_collateral != address(0) && _underlying != address(0), 'Payaso: ZERO_ADDRESS');\n", "        require(_strikePrice != 0, 'Payaso: ZERO_STRIKE_PRICE');\n", "        require(_expiry > now, 'Cannot create an expired option');\n", '\n', '        address creator = _private ? tx.origin : address(0);\n', "        require(longs[creator][_collateral][_underlying][_strikePrice][_expiry] == address(0), 'Payaso: SHORT_PROXY_EXISTS');     // single check is sufficient\n", '\n', '        bytes32 salt = keccak256(abi.encodePacked(creator, _collateral, _underlying, _strikePrice, _expiry));\n', '\n', '        bytes memory bytecode = type(LongProxy).creationCode;\n', '        assembly {\n', '            long := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', "        InitializableProductProxy(payable(long)).initialize(address(this), abi.encodeWithSignature('initialize(address,address,address,uint256,uint256)', creator, _collateral, _underlying, _strikePrice, _expiry));\n", '        \n', '        bytecode = type(ShortProxy).creationCode;\n', '        assembly {\n', '            short := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', "        InitializableProductProxy(payable(short)).initialize(address(this), abi.encodeWithSignature('initialize(address,address,address,uint256,uint256)', creator, _collateral, _underlying, _strikePrice, _expiry));\n", '\n', '        longs [creator][_collateral][_underlying][_strikePrice][_expiry] = long;\n', '        shorts[creator][_collateral][_underlying][_strikePrice][_expiry] = short;\n', '        allLongs.push(long);\n', '        allShorts.push(short);\n', '        emit OptionCreated(creator, _collateral, _underlying, _strikePrice, _expiry, long, short, allLongs.length);\n', '    }\n', '    event OptionCreated(address indexed creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, address long, address short, uint count);\n', '    \n', '    function mint(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public returns (address long, address short, uint vol) {\n', '        address creator = _private ? tx.origin : address(0);\n', '        long  = longs [creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        short = shorts[creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        if(short == address(0))                                                                      // single check is sufficient\n', '            (long, short) = createOption(_private, _collateral, _underlying, _strikePrice, _expiry);\n', '        \n', '        IERC20(_collateral).safeTransferFrom(msg.sender, short, volume);\n', '        ShortOption(short).mint_(msg.sender, volume);\n', '        LongOption(long).mint_(msg.sender, volume);\n', '        vol = volume;\n', '        \n', '        emit Mint(msg.sender, _private, _collateral, _underlying, _strikePrice, _expiry, long, short, vol);\n', '    }\n', '    event Mint(address indexed seller, bool _private, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, address long, address short, uint vol);\n', '    \n', '    function mint(address longOrShort, uint volume) external returns (address, address, uint) {\n', '        LongOption long = LongOption(longOrShort);\n', '        return mint(long.creator()!=address(0), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume);\n', '    }\n', '\n', '    function burn(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public returns (address long, address short, uint vol) {\n', '        long  = longs [_creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', "        require(short != address(0), 'Payaso: ZERO_ADDRESS');                                        // single check is sufficient\n", '\n', '        LongOption(long).burn_(msg.sender, volume);\n', '        ShortOption(short).burn_(msg.sender, volume);\n', '        vol = volume;\n', '        \n', '        emit Burn(msg.sender, _creator, _collateral, _underlying, _strikePrice, _expiry, vol);\n', '    }\n', '    event Burn(address indexed seller, address _creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint vol);\n', '\n', '    function burn(address longOrShort, uint volume) external returns (address, address, uint) {\n', '        LongOption long = LongOption(longOrShort);\n', '        return burn(long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume);\n', '    }\n', '\n', '    function calcExerciseAmount(address _long, uint volume) public view returns (uint) {\n', '        return calcExerciseAmount(volume, LongOption(_long).strikePrice());\n', '    }\n', '    function calcExerciseAmount(uint volume, uint _strikePrice) public pure returns (uint) {\n', '        return volume.mul(_strikePrice).div(1 ether);\n', '    }\n', '    \n', '    function _exercise(address buyer, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] memory path) internal returns (uint vol, uint fee, uint amt) {\n', "        require(now <= _expiry, 'Payaso: Expired');\n", '        \n', '        address long  = longs[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        LongOption(long).burn_(buyer, volume);\n', '        \n', '        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        amt = calcExerciseAmount(volume, _strikePrice);\n', '        if(path.length == 0) {\n', '            IERC20(_underlying).safeTransferFrom(buyer, short, amt);\n', '            (vol, fee) = ShortOption(short).exercise_(buyer, volume);\n', '        } else {\n', '            (vol, fee) = ShortOption(short).exercise_(address(this), volume);\n', '            IERC20(_collateral).safeApprove(address(config[_uniswapRounter_]), vol);\n', '            uint[] memory amounts = IUniswapV2Router01(config[_uniswapRounter_]).swapTokensForExactTokens(amt, vol, path, short, now);\n', '            vol = vol.sub(amounts[0]);\n', '            IERC20(_collateral).safeTransfer(buyer, vol);\n', '            amt = 0;\n', '        }\n', '        emit Exercise(buyer, _collateral, _underlying, _strikePrice, _expiry, volume, vol, fee, amt);\n', '    }\n', '    event Exercise(address indexed buyer, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint volume, uint vol, uint fee, uint amt);\n', '    \n', '    function exercise_(address buyer, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\n', '        address long  = longs[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', "        require(msg.sender == long, 'Payaso: Only LongOption');\n", '        \n', '        return _exercise(buyer, _creator, _collateral, _underlying, _strikePrice, _expiry, volume, path);\n', '    }\n', '    \n', '    function exercise(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\n', '        return _exercise(msg.sender, _creator, _collateral, _underlying, _strikePrice, _expiry, volume, path);\n', '    }\n', '    \n', '    function exercise(address _long, uint volume, address[] memory path) public returns (uint vol, uint fee, uint amt) {\n', '        LongOption long = LongOption(_long);\n', '        return _exercise(msg.sender, long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume, path);\n', '    }\n', '\n', '    function exercise(address _long, uint volume) public returns (uint vol, uint fee, uint amt) {\n', '        LongOption long = LongOption(_long);\n', '        return _exercise(msg.sender, long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume, new address[](0));\n', '    }\n', '\n', '    function exercise(address long, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(long, LongOption(long).balanceOf(msg.sender), path);\n', '    }\n', '\n', '    function exercise(address long) external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(long, LongOption(long).balanceOf(msg.sender), new address[](0));\n', '    }\n', '\n', '    function settleable(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\n', '        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        return ShortOption(short).settleable(volume);\n', '    }\n', '    function settleable(address short, uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\n', '        return ShortOption(short).settleable(volume);\n', '    }\n', '    function settleable(address seller, address short) public view returns (uint vol, uint col, uint fee, uint und) {\n', '        return ShortOption(short).settleable(seller);\n', '    }\n', '    \n', '    function settle(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) external returns (uint vol, uint col, uint fee, uint und) {\n', '        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', '        return settle(short, volume);\n', '    }\n', '    function settle(address short, uint volume) public returns (uint vol, uint col, uint fee, uint und) {\n', '        return ShortOption(short).settle_(msg.sender, volume);\n', '    }\n', '    function settle(address short) external returns (uint vol, uint col, uint fee, uint und) {\n', '        return settle(short, ShortOption(short).balanceOf(msg.sender));\n', '    }\n', '    \n', '    function emitSettle(address seller, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint vol, uint col, uint fee, uint und) external {\n', '        address short  = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\n', "        require(msg.sender == short, 'Payaso: Only ShortOption');\n", '        emit Settle(seller, _creator, _collateral, _underlying, _strikePrice, _expiry, vol, col, fee, und);\n', '    }\n', '    event Settle(address indexed seller, address _creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint vol, uint col, uint fee, uint und);\n', '}\n', '\n', 'contract LongProxy is InitializableProductProxy, Constants {\n', '    function productName() override public pure returns (bytes32) {\n', '        return _LongOption_;\n', '    }\n', '}\n', '\n', 'contract ShortProxy is InitializableProductProxy, Constants {\n', '    function productName() override public pure returns (bytes32) {\n', '        return _ShortOption_;\n', '    }\n', '}\n', '\n', '\n', 'contract LongOption is ERC20UpgradeSafe {\n', '    using SafeMath for uint;\n', '    \n', '    address public factory;\n', '    address public creator;\n', '    address public collateral;\n', '    address public underlying;\n', '    uint public strikePrice;\n', '    uint public expiry;\n', '\n', '    function initialize(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry) external initializer {\n', '        (string memory name, string memory symbol) = spellNameAndSymbol(_collateral, _underlying, _strikePrice, _expiry);\n', '        __ERC20_init(name, symbol);\n', '        _setupDecimals(ERC20UpgradeSafe(_collateral).decimals());\n', '\n', '        factory = msg.sender;\n', '        creator = _creator;\n', '        collateral = _collateral;\n', '        underlying = _underlying;\n', '        strikePrice = _strikePrice;\n', '        expiry = _expiry;\n', '    }\n', '    \n', '    function spellNameAndSymbol(address _collateral, address _underlying, uint _strikePrice, uint _expiry) public view returns (string memory name, string memory symbol) {\n', "        //return ('Payaso.io ETH long put option strike 500 USDC or USDC long call option strike 0.002 ETH expiry 2020/10/10', 'USDC(0.002ETH)201010');\n", "        return('Payaso.io Long Option Token', 'Long');\n", '    }\n', '\n', '    modifier onlyFactory {\n', "        require(msg.sender == factory, 'Payaso: Only Factory');\n", '        _;\n', '    }\n', '    \n', '    function mint_(address _to, uint volume) external onlyFactory {\n', '        _mint(_to, volume);\n', '    }\n', '    \n', '    function burn_(address _from, uint volume) external onlyFactory {\n', '        _burn(_from, volume);\n', '    }\n', '    \n', '    function burn(uint volume) external {\n', '        _burn(msg.sender, volume);\n', '    }\n', '    function burn() external {\n', '        _burn(msg.sender, balanceOf(msg.sender));\n', '    }\n', '    \n', '    function exercise(uint volume, address[] memory path) public returns (uint vol, uint fee, uint amt) {\n', '        return OptionFactory(factory).exercise_(msg.sender, creator, collateral, underlying, strikePrice, expiry, volume, path);\n', '    }\n', '\n', '    function exercise(uint volume) public returns (uint vol, uint fee, uint amt) {\n', '        return exercise(volume, new address[](0));\n', '    }\n', '\n', '    function exercise(address[] calldata path) external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(balanceOf(msg.sender), path);\n', '    }\n', '\n', '    function exercise() external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(balanceOf(msg.sender), new address[](0));\n', '    }\n', '}\n', '\n', 'contract ShortOption is ERC20UpgradeSafe, Constants {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '    \n', '    address public factory;\n', '    address public creator;\n', '    address public collateral;\n', '    address public underlying;\n', '    uint public strikePrice;\n', '    uint public expiry;\n', '\n', '    function initialize(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry) external initializer {\n', '        (string memory name, string memory symbol) = spellNameAndSymbol(_collateral, _underlying, _strikePrice, _expiry);\n', '        __ERC20_init(name, symbol);\n', '        _setupDecimals(ERC20UpgradeSafe(_collateral).decimals());\n', '\n', '        factory = msg.sender;\n', '        creator = _creator;\n', '        collateral = _collateral;\n', '        underlying = _underlying;\n', '        strikePrice = _strikePrice;\n', '        expiry = _expiry;\n', '    }\n', '\n', '    function spellNameAndSymbol(address _collateral, address _underlying, uint _strikePrice, uint _expiry) public view returns (string memory name, string memory symbol) {\n', "        //return ('Payaso.io ETH short put option strike 500 USDC or USDC short call option strike 0.002 ETH expiry 2020/10/10', 'USDC(0.002ETH)201010s');\n", "        return('Payaso.io Short Option Token', 'Short');\n", '    }\n', '\n', '    modifier onlyFactory {\n', "        require(msg.sender == factory, 'Payaso: Only Factory');\n", '        _;\n', '    }\n', '    \n', '    function mint_(address _to, uint volume) external onlyFactory {\n', '        _mint(_to, volume);\n', '    }\n', '    \n', '    function burn_(address _from, uint volume) external onlyFactory {\n', '        _burn(_from, volume);\n', '        IERC20(collateral).safeTransfer(_from, volume);\n', '    }\n', '    \n', '    function calcFee(uint volume) public view returns (address recipient, uint fee) {\n', '        uint feeRate = OptionFactory(factory).getConfig(_feeRate_);\n', '        recipient = address(OptionFactory(factory).getConfig(_feeRecipient_));\n', '        \n', '        if(feeRate != 0 && recipient != address(0))\n', '            fee = volume.mul(feeRate).div(1 ether);\n', '        else\n', '            fee = 0;\n', '    }\n', '    \n', '    function _payFee(uint volume) internal returns (uint) {\n', '        (address recipient, uint fee) = calcFee(volume);\n', '        if(recipient != address(0) && fee > 0)\n', '            IERC20(collateral).safeTransfer(recipient, fee);\n', '        return fee;\n', '    }\n', '    \n', '    function exercise_(address buyer, uint volume) external onlyFactory returns (uint vol, uint fee) {\n', '        fee = _payFee(volume);\n', '        vol = volume.sub(fee);\n', '        IERC20(collateral).safeTransfer(buyer, vol);\n', '    }\n', '    \n', '    function settle_(address seller, uint volume) external onlyFactory returns (uint vol, uint col, uint fee, uint und) {\n', '        return _settle(seller, volume);\n', '    }\n', '    \n', '    function settleable(address seller) public view returns (uint vol, uint col, uint fee, uint und) {\n', '        return settleable(balanceOf(seller));\n', '    }\n', '    \n', '    function settleable(uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\n', '        uint colla = IERC20(collateral).balanceOf(address(this));\n', '        uint under = IERC20(underlying).balanceOf(address(this));\n', '        if(now <= expiry) {\n', '            address long  = OptionFactory(factory).longs(creator, collateral, underlying, strikePrice, expiry);\n', '            uint waived = colla.sub(IERC20(long).totalSupply());\n', '            uint exercised = totalSupply().sub(colla);\n', '            uint we = waived.add(exercised);\n', '            if(we == 0)\n', '                return (0, 0, 0, 0);\n', '            vol = volume <= we ? volume : we;\n', '            col = waived.mul(vol).div(we);\n', '            und = under.mul(vol).div(we);\n', '        } else {\n', '            vol = volume <= totalSupply() ? volume : totalSupply();\n', '            col = colla.mul(vol).div(totalSupply());\n', '            und = under.mul(vol).div(totalSupply());\n', '        }\n', '        (, fee) = calcFee(col);\n', '        col = col.sub(fee);\n', '    }\n', '    \n', '    function _settle(address seller, uint volume) internal returns (uint vol, uint col, uint fee, uint und) {\n', '        (vol, col, fee, und) = settleable(volume);\n', '        _burn(seller, vol);\n', '        _payFee(col.add(fee));\n', '        IERC20(collateral).safeTransfer(seller, col);\n', '        IERC20(underlying).safeTransfer(seller, und);\n', '        OptionFactory(factory).emitSettle(seller, creator, collateral, underlying, strikePrice, expiry, vol, col, fee, und);\n', '    }\n', '    \n', '    function settle(uint volume) external returns (uint vol, uint col, uint fee, uint und) {\n', '        return _settle(msg.sender, volume);\n', '    }\n', '    \n', '    function settle() external returns (uint vol, uint col, uint fee, uint und) {\n', '        return _settle(msg.sender, balanceOf(msg.sender));\n', '    }\n', '}\n', '\n', '\n', 'contract Constants2 {\n', '    address internal constant _DAI_                 = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', "    bytes32 internal constant _ecoAddr_             = 'ecoAddr';\n", "    bytes32 internal constant _ecoRatio_            = 'ecoRatio';\n", '}\n', '\n', 'struct Ask {\n', '    uint    askID;\n', '    address seller;\n', '    address long;\n', '    uint    volume;\n', '    address settleToken;\n', '    uint    price;\n', '    uint    remain;\n', '}\n', '\n', 'struct Bid {\n', '    uint    bidID;\n', '    uint    askID;\n', '    address buyer;\n', '    uint    volume;\n', '    uint    amount;\n', '    uint    remain;\n', '}\n', '\n', 'contract OptionOrder is Configurable, Constants, Constants2 {\n', '    using Address for address payable;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '    \n', "\tbytes32 internal constant _allowContract_   = 'allowContract';\n", "\tbytes32 internal constant _allowlist_       = 'allowlist';\n", "\tbytes32 internal constant _blocklist_       = 'blocklist';\n", '\n', '    address public factory;\n', '    mapping(uint => Ask) public asks;\n', '    mapping(uint => Bid) public bids;\n', '    uint public asksN;\n', '    uint public bidsN;\n', '    \n', '    address public farm;\n', '    address public reward;\n', '    mapping(address => uint) public settledRewards;\n', '    mapping(address => uint) public claimedRewards;\n', '\tuint public begin;\n', '\tuint public span;\n', '\tuint public lep;            // 1: linear, 2: exponential, 3: power\n', '\tuint public times;\n', '\tuint public period;\n', '\tuint public frequency;\n', '\tuint public lasttime;\n', '\t\n', '\tmapping(address => mapping(address => uint)) public rewardThreshold;\n', '\n', '    function initialize(address _governor, address _factory, address _farm, address _reward, address _ecoAddr) public initializer {\n', '        super.initialize(_governor);\n', '        factory = _factory;\n', '        farm    = _farm;\n', '        reward  = _reward;\n', '        config[_ecoAddr_]  = uint(_ecoAddr);\n', '        config[_ecoRatio_] = 0.1 ether;         // 10%\n', '        \n', '\t    //IFarm(farm).crop();                       // just check\n', '\t    IERC20(_reward).totalSupply();           // just check\n', '\n', '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', '        setRewardThreshold(_DAI_, weth, 500 ether);\n', '    }\n', '    \n', '    function setRewardThreshold(address _collateral, address _underlying, uint volume) public governance {\n', '        rewardThreshold[_collateral][_underlying] = volume;\n', '    }\n', '\n', '    function setBegin(uint _lep, uint _period, uint _span, uint _begin) virtual external governance {\n', '        lep     = _lep;         // 1: linear, 2: exponential, 3: power\n', '        period  = _period;\n', '        span    = _span;\n', '        begin   = _begin;\n', '        lasttime= _begin;\n', '        times   = 0;\n', '    }\n', '    \n', '    function sellOnETH(bool _private, address _underlying, uint _strikePrice, uint _expiry, address settleToken, uint price) virtual external payable returns (uint askID) {\n', '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', '        IWETH(weth).deposit{value: msg.value}();\n', '        return sell(_private, weth, _underlying, _strikePrice, _expiry, msg.value, settleToken, price);\n', '    }\n', '    \n', '    function sell(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address settleToken, uint price) virtual public returns (uint askID) {\n', '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', '        if(_collateral != weth || IERC20(_collateral).balanceOf(address(this)) < volume)\n', '            IERC20(_collateral).safeTransferFrom(msg.sender, address(this), volume);\n', '        IERC20(_collateral).safeApprove(factory, volume);\n', '        (address long, address short, uint vol) = OptionFactory(factory).mint(_private, _collateral, _underlying, _strikePrice, _expiry, volume);\n', '        \n', '        //address creator = _private ? tx.origin : address(0);\n', '        //address short = OptionFactory(factory).shorts(creator, _collateral, _underlying, _strikePrice, _expiry);\n', '        IERC20(short).safeTransfer(msg.sender, vol);\n', '\n', '        //address long = OptionFactory(factory).longs(creator, _collateral, _underlying, _strikePrice, _expiry);\n', '        return _sell(long, vol, settleToken, price);\n', '    }\n', '    \n', '    function sell(address long, uint volume, address settleToken, uint price) virtual public returns (uint askID) {\n', '        IERC20(long).safeTransferFrom(msg.sender, address(this), volume);\n', '        return _sell(long, volume, settleToken, price);\n', '    }\n', '    \n', '    function _sell(address long, uint volume, address settleToken, uint price) virtual internal returns (uint askID) {\n', '        askID = asksN++;\n', '        asks[askID] = Ask(askID, msg.sender, long, volume, settleToken, price, volume);\n', '        \n', '        emit Sell(askID, msg.sender, long, volume, settleToken, price);\n', '    }\n', '    event Sell(uint askID, address indexed seller, address indexed long, uint volume, address indexed settleToken, uint price);\n', '    \n', '    function reprice(uint askID, uint newPrice) virtual external returns (uint newAskID) {\n', "        require(asks[askID].seller != address(0), 'Nonexistent ask order');\n", "        require(asks[askID].seller == msg.sender, 'Not yours ask Order');\n", '        \n', '        newAskID = asksN++;\n', '        asks[newAskID] = Ask(newAskID, asks[askID].seller, asks[askID].long, asks[askID].remain, asks[askID].settleToken, newPrice, asks[askID].remain);\n', '        asks[askID].remain = 0;\n', '        \n', '        emit Reprice(askID, newAskID, asks[newAskID].seller, asks[newAskID].long, asks[newAskID].volume, asks[newAskID].settleToken, asks[askID].price, newPrice);\n', '    }\n', '    event Reprice(uint askID, uint newAskID, address indexed seller, address indexed long, uint volume, address indexed settleToken, uint price, uint newPrice);\n', '    \n', '    function cancel(uint askID) virtual external returns (uint vol) {\n', "        require(asks[askID].seller != address(0), 'Nonexistent ask order');\n", "        require(asks[askID].seller == msg.sender, 'Not yours ask Order');\n", '        \n', '        vol = asks[askID].remain;\n', '        IERC20(asks[askID].long).safeTransfer(msg.sender, vol);\n', '        asks[askID].remain = 0;\n', '\n', '        emit Cancel(askID, msg.sender, asks[askID].long, vol);\n', '    }\n', '    event Cancel(uint askID, address indexed seller, address indexed long, uint vol);\n', '    \n', '    function buy(uint askID, uint volume) virtual public returns (uint bidID, uint vol, uint amt) {\n', "        require(asks[askID].seller != address(0), 'Nonexistent ask order');\n", '        vol = volume;\n', '        if(vol > asks[askID].remain)\n', '            vol = asks[askID].remain;\n', '            \n', '        amt = vol.mul(asks[askID].price).div(1 ether);\n', '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', '        address settleToken = asks[askID].settleToken;\n', '        if(settleToken != weth || address(this).balance < amt)\n', '            IERC20(settleToken).safeTransferFrom(msg.sender, asks[askID].seller, amt);\n', '        else\n', '            payable(asks[askID].seller).transfer(amt);\n', '\n', '        asks[askID].remain = asks[askID].remain.sub(vol);\n', '        IERC20(asks[askID].long).safeTransfer(msg.sender, vol);\n', '        \n', '        bidID = bidsN++;\n', '        bids[bidID] = Bid(bidID, askID, msg.sender, vol, amt, vol);\n', '        \n', '        emit Buy(bidID, askID, msg.sender, vol, amt);\n', '    }\n', '    event Buy(uint bidID, uint askID, address indexed buyer, uint vol, uint amt);\n', '    \n', '    function buyInETH(uint askID, uint volume) virtual external payable returns (uint bidID, uint vol, uint amt) {\n', "        require(asks[askID].seller != address(0), 'Nonexistent ask order');\n", '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', "        require(asks[askID].settleToken == weth, 'settleToken is NOT WETH');\n", '\n', '        vol = volume;\n', '        if(vol > asks[askID].remain)\n', '            vol = asks[askID].remain;\n', '            \n', '        amt = vol.mul(asks[askID].price).div(1 ether);\n', "        require(msg.value >= amt, 'value is too low');\n", '        \n', '        (bidID, vol, amt) = buy(askID, vol);\n', '        \n', '        if(msg.value > amt)\n', '            msg.sender.transfer(msg.value.sub(amt));\n', '    }\n', '    \n', '    function exercise(uint bidID) virtual external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(bidID, bids[bidID].remain, new address[](0));\n', '    }\n', '    function exercise(uint bidID, address[] calldata path) virtual external returns (uint vol, uint fee, uint amt) {\n', '        return exercise(bidID, bids[bidID].remain, path);\n', '    }\n', '    function exercise(uint bidID, uint volume) virtual public returns (uint vol, uint fee, uint amt) {\n', '        return exercise(bidID, volume, new address[](0));\n', '    }\n', '    function exercise(uint bidID, uint volume, address[] memory path) virtual public returns (uint vol, uint fee, uint amt) {\n', "        require(bids[bidID].buyer != address(0), 'Nonexistent bid order');\n", '        if(volume > bids[bidID].remain)\n', '            volume = bids[bidID].remain;\n', '        bids[bidID].remain = bids[bidID].remain.sub(volume);\n', '        \n', '        address long = asks[bids[bidID].askID].long;\n', '        IERC20(long).safeTransferFrom(msg.sender, address(this), volume);\n', '        \n', '        if(path.length == 0) {\n', '            amt = OptionFactory(factory).calcExerciseAmount(long, volume);\n', '            address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', '            address underlying = LongOption(long).underlying();\n', '            if(underlying != weth || IERC20(underlying).balanceOf(address(this)) < amt)\n', '                IERC20(underlying).safeTransferFrom(msg.sender, address(this), amt);\n', '            IERC20(underlying).safeApprove(factory, amt);\n', '        }\n', '        \n', '        (vol, fee, amt) = OptionFactory(factory).exercise(long, volume, path);\n', '        IERC20(LongOption(long).collateral()).safeTransfer(msg.sender, vol);\n', '\n', '        _settleReward(msg.sender, LongOption(long).collateral(), LongOption(long).underlying(), volume);\n', '        emit Exercise(bidID, msg.sender, vol, fee, amt);\n', '    }\n', '    event Exercise(uint bidID, address indexed buyer, uint vol, uint fee, uint amt);\n', '    \n', '    function exerciseETH(uint bidID, uint volume) virtual public payable returns (uint vol, uint fee, uint amt) {\n', "        require(bids[bidID].buyer != address(0), 'Nonexistent bid order');\n", '        address long = asks[bids[bidID].askID].long;\n', '        address underlying = LongOption(long).underlying();\n', '        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\n', "        require(underlying == weth, 'underlying is NOT WETH');\n", '\n', '        if(volume > bids[bidID].remain)\n', '            volume = bids[bidID].remain;\n', '        amt = OptionFactory(factory).calcExerciseAmount(long, volume);\n', "        require(msg.value >= amt, 'value is too low');\n", '        \n', '        IWETH(weth).deposit{value: amt}();\n', '        (vol, fee, amt) = exercise(bidID, volume, new address[](0));\n', '        \n', '        if(msg.value > amt)\n', '            msg.sender.transfer(msg.value.sub(amt));\n', '    }\n', '    function exerciseETH(uint bidID) virtual external payable returns (uint vol, uint fee, uint amt) {\n', '        return exerciseETH(bidID, bids[bidID].remain);\n', '    }\n', '\n', '    function waive(uint bidID) virtual external {\n', '        waive(bidID, bids[bidID].remain);\n', '    }\n', '    function waive(uint bidID, uint volume) virtual public returns (uint vol) {\n', '        vol = volume;\n', '        if(vol > bids[bidID].remain)\n', '            vol = bids[bidID].remain;\n', '        bids[bidID].remain = bids[bidID].remain.sub(vol);\n', '\n', '        address long = asks[bids[bidID].askID].long;\n', '        IERC20(long).safeTransferFrom(msg.sender, address(this), vol);\n', '        LongOption(long).burn(vol);\n', '        \n', '        _settleReward(msg.sender, LongOption(long).collateral(), LongOption(long).underlying(), vol);\n', '        emit Waive(bidID, msg.sender, vol);\n', '    }\n', '    event Waive(uint bidID, address indexed buyer, uint vol);\n', '    \n', '    function _settleReward(address buyer, address _collateral, address _underlying, uint volume) virtual internal returns (uint amt) {\n', '        if(begin == 0 || begin >= now)\n', '            return 0;\n', '            \n', '        amt = settleableReward(_collateral, _underlying, volume);\n', '        if(amt == 0)\n', '            return 0;\n', '\n', '        _updateFrequency();\n', '\n', '        settledRewards[buyer] = settledRewards[buyer].add(amt);\n', '        \n', '        uint a = 0;\n', '        address addr = address(config[_ecoAddr_]);\n', '        uint ratio = config[_ecoRatio_];\n', '        if(addr != address(0) && ratio != 0) {\n', '            a = amt.mul(ratio).div(1 ether);\n', '            settledRewards[addr] = settledRewards[addr].add(a);\n', '        }\n', '\n', '        settledRewards[address(0)] = settledRewards[address(0)].add(amt).add(a);\n', '\n', '        emit SettleReward(buyer, _collateral, _underlying, volume, amt, settledRewards[buyer]);\n', '    }\n', '    event SettleReward(address indexed buyer, address indexed _collateral, address indexed _underlying, uint volume, uint amt, uint settled);\n', '\n', '    function settleableReward(address _collateral, address _underlying, uint volume) public view returns (uint) {\n', '        uint threshold = rewardThreshold[_collateral][_underlying];\n', '        if(threshold == 0 || volume < threshold)\n', '            return 0;\n', '        else\n', '            return settleableReward();\n', '    }\n', '    function settleableReward() public view returns (uint amt) {\n', '        if(begin == 0 || begin >= now)\n', '            return 0;\n', '            \n', '        amt = IERC20(reward).allowance(farm, address(this)).add(claimedRewards[address(0)]).sub(settledRewards[address(0)]);\n', '        \n', '        // calc settleable in period\n', '        if(lep == 3) {                                                              // power\n', '            //uint r0 = amt.mul(period).div(now.add(span).sub(begin));\n', '            //uint r1 = amt.mul(period).div(now.add(span).sub(begin).add(period));\n', '            //amt = r0.sub(r1);\n', '            uint y = period.mul(1 ether).div(lasttime.add(span).sub(begin));\n', '            amt = amt.mul(1 ether).div(y);\n', '            y = period.mul(1 ether).div(now.add(span).sub(begin));\n', '            y = y.mul(y).div(1 ether);\n', '            amt = amt.mul(y).div(1 ether);\n', '        } else if(lep == 2) {                                                       // exponential\n', '            if(period < span)\n', '                amt = amt.mul(period).div(span);\n', '        }else if(now.add(period) < begin.add(span))                                 // linear\n', '            amt = amt.mul(period).div(begin.add(span).sub(now));\n', '        else if(now >= begin.add(span))\n', '            amt = 0;\n', '    \n', '        amt = amt.mul(1 ether).div(calcFrequency());\n', '    }\n', '    \n', '    function calcFrequency() public view returns (uint f) {\n', '        if(now < begin.add(period))\n', '            if(now > begin)\n', '                f = times.add(1 ether).mul(period).div(now.sub(begin));\n', '            else\n', '                f = uint(-1);\n', '        else\n', '            if(lasttime.add(period) > now)\n', '                f = lasttime.add(period).sub(now).mul(frequency).div(period).add(1 ether);\n', '            else\n', '                f = 1 ether;\n', '    }\n', '    \n', '    function _updateFrequency() internal returns(uint) {\n', '        frequency = calcFrequency();\n', '        times = times.add(1 ether);\n', '        lasttime = now;\n', '    }\n', '\n', '    function getReward() external {\n', '        claim();\n', '    }\n', '    function claim() virtual public returns (uint amt) {\n', "        require(getConfig(_blocklist_, msg.sender) == 0, 'In blocklist');\n", '        bool isContract = msg.sender.isContract();\n', "        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, msg.sender) != 0, 'No allowContract');\n", '\n', '        amt = claimable(msg.sender);\n', '        IERC20(reward).safeTransferFrom(farm, msg.sender, amt);\n', '        claimedRewards[msg.sender] = settledRewards[msg.sender];\n', '        claimedRewards[address(0)] = claimedRewards[address(0)].add(amt);\n', '        \n', '        emit Claim(msg.sender, amt, claimedRewards[msg.sender]);\n', '    }\n', '    event Claim(address indexed seller, uint amt, uint claimed);\n', '\n', '    function earned(address account) external view returns (uint256) {\n', '        return claimable(account);\n', '    }\n', '    function claimable(address buyer) public view returns (uint) {\n', '        return settledRewards[buyer].sub(claimedRewards[buyer]);\n', '    }\n', '    \n', '}']