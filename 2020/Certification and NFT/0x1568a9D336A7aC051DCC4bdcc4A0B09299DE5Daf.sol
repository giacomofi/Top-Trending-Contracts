['pragma solidity ^0.6.0;\n', '\n', 'interface TokenInterface {\n', '    function approve(address, uint256) external;\n', '    function transfer(address, uint) external;\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint id) external returns (uint num);\n', '    function setUint(uint id, uint val) external;\n', '}\n', '\n', 'interface EventInterface {\n', '    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n', '}\n', '\n', 'contract Stores {\n', '\n', '  /**\n', '   * @dev Return ethereum address\n', '   */\n', '  function getEthAddr() internal pure returns (address) {\n', '    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n', '  }\n', '\n', '  /**\n', '   * @dev Return memory variable address\n', '   */\n', '  function getMemoryAddr() internal pure returns (address) {\n', '    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n', '  }\n', '\n', '  /**\n', '   * @dev Return InstaEvent Address.\n', '   */\n', '  function getEventAddr() internal pure returns (address) {\n', '    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n', '  }\n', '\n', '  /**\n', '   * @dev Get Uint value from InstaMemory Contract.\n', '   */\n', '  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n', '  }\n', '\n', '  /**\n', '  * @dev Set Uint value in InstaMemory Contract.\n', '  */\n', '  function setUint(uint setId, uint val) virtual internal {\n', '    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n', '  }\n', '\n', '  /**\n', '  * @dev emit event on event contract\n', '  */\n', '  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\n', '    (uint model, uint id) = connectorID();\n', '    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n', '  }\n', '\n', '  /**\n', '  * @dev Connector Details - needs to be changed before deployment\n', '  */\n', '  function connectorID() public view returns(uint model, uint id) {\n', '    (model, id) = (1, 45);\n', '  }\n', '\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '  uint constant WAD = 10 ** 18;\n', '  uint constant RAY = 10 ** 27;\n', '\n', '  function add(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(x, y);\n', '  }\n', '\n', '  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n', '    z = SafeMath.sub(x, y);\n', '  }\n', '\n', '  function mul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.mul(x, y);\n', '  }\n', '\n', '  function div(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.div(x, y);\n', '  }\n', '\n', '  function wmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n', '  }\n', '\n', '  function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n', '  }\n', '\n', '  function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n', '  }\n', '\n', '  function rmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n', '  }\n', '\n', '}\n', '\n', 'interface ICurve {\n', '  function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\n', '  function exchange(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\n', '}\n', '\n', 'contract CurveHelpers is Stores, DSMath {\n', '  /**\n', '  * @dev Return Curve 3pool Swap Address\n', '  */\n', '  function getCurveSwapAddr() internal pure returns (address) {\n', '    return 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n', '  }\n', '\n', '  /**\n', '  * @dev Return Curve 3pool Token Address\n', '  */\n', '  function getCurveTokenAddr() internal pure returns (address) {\n', '    return 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n', '  }\n', '\n', '  function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '    amt = (_amt / 10 ** (18 - _dec));\n', '  }\n', '\n', '  function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '    amt = mul(_amt, 10 ** (18 - _dec));\n', '  }\n', '\n', '  function getTokenI(address token) internal pure returns (int128 i) {\n', '    if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\n', '      // DAI Token\n', '      i = 0;\n', '    } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n', '      // USDC Token\n', '      i = 1;\n', '    } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\n', '      // USDT Token\n', '      i = 2;\n', '    } else {\n', '      revert("token-not-found.");\n', '    }\n', '  }\n', '}\n', '\n', 'contract CurveProtocol is CurveHelpers {\n', '\n', '  event LogSell(\n', '    address indexed buyToken,\n', '    address indexed sellToken,\n', '    uint256 buyAmt,\n', '    uint256 sellAmt,\n', '    uint256 getId,\n', '    uint256 setId\n', '  );\n', '\n', '  /**\n', '  * @dev Sell Stable ERC20_Token.\n', '  * @param buyAddr buying token address.\n', '    * @param sellAddr selling token amount.\n', '    * @param sellAmt selling token amount.\n', '    * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n', '    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n', '    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n', '    */\n', '  function sell(\n', '    address buyAddr,\n', '    address sellAddr,\n', '    uint sellAmt,\n', '    uint unitAmt,\n', '    uint getId,\n', '    uint setId\n', '  ) external payable {\n', '    uint _sellAmt = getUint(getId, sellAmt);\n', '    ICurve curve = ICurve(getCurveSwapAddr());\n', '    TokenInterface _buyToken = TokenInterface(buyAddr);\n', '    TokenInterface _sellToken = TokenInterface(sellAddr);\n', '    _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\n', '    _sellToken.approve(address(curve), _sellAmt);\n', '\n', '    uint _slippageAmt = convert18ToDec(_buyToken.decimals(), wmul(unitAmt, convertTo18(_sellToken.decimals(), _sellAmt)));\n', '\n', '    uint intialBal = _buyToken.balanceOf(address(this));\n', '    curve.exchange(getTokenI(sellAddr), getTokenI(buyAddr), _sellAmt, _slippageAmt);\n', '    uint finalBal = _buyToken.balanceOf(address(this));\n', '\n', '    uint _buyAmt = sub(finalBal, intialBal);\n', '\n', '    setUint(setId, _buyAmt);\n', '\n', '    emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n', '    bytes32 _eventCode = keccak256("LogSell(address,address,uint256,uint256,uint256,uint256)");\n', '    bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n', '    emitEvent(_eventCode, _eventParam);\n', '\n', '  }\n', '}\n', '\n', 'contract ConnectCurveThreePool is CurveProtocol {\n', '  string public name = "Curve-3pool-v1.0";\n', '}']