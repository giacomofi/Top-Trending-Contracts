['/*\n', '\n', 'website: pub.finance\n', '\n', 'PPPPPPPPPPPPPPPPP   UUUUUUUU     UUUUUUUUBBBBBBBBBBBBBBBBB      SSSSSSSSSSSSSSS\n', 'P::::::::::::::::P  U::::::U     U::::::UB::::::::::::::::B   SS:::::::::::::::S\n', 'P::::::PPPPPP:::::P U::::::U     U::::::UB::::::BBBBBB:::::B S:::::SSSSSS::::::S\n', 'PP:::::P     P:::::PUU:::::U     U:::::UUBB:::::B     B:::::BS:::::S     SSSSSSS\n', '  P::::P     P:::::P U:::::U     U:::::U   B::::B     B:::::BS:::::S\n', '  P::::P     P:::::P U:::::D     D:::::U   B::::B     B:::::BS:::::S\n', '  P::::PPPPPP:::::P  U:::::D     D:::::U   B::::BBBBBB:::::B  S::::SSSS\n', '  P:::::::::::::PP   U:::::D     D:::::U   B:::::::::::::BB    SS::::::SSSSS\n', '  P::::PPPPPPPPP     U:::::D     D:::::U   B::::BBBBBB:::::B     SSS::::::::SS\n', '  P::::P             U:::::D     D:::::U   B::::B     B:::::B       SSSSSS::::S\n', '  P::::P             U:::::D     D:::::U   B::::B     B:::::B            S:::::S\n', '  P::::P             U::::::U   U::::::U   B::::B     B:::::B            S:::::S\n', 'PP::::::PP           U:::::::UUU:::::::U BB:::::BBBBBB::::::BSSSSSSS     S:::::S\n', 'P::::::::P            UU:::::::::::::UU  B:::::::::::::::::B S::::::SSSSSS:::::S\n', 'P::::::::P              UU:::::::::UU    B::::::::::::::::B  S:::::::::::::::SS\n', 'PPPPPPPPPP                UUUUUUUUU      BBBBBBBBBBBBBBBBB    SSSSSSSSSSSSSSS\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library BasisPoints {\n', '    using SafeMath for uint;\n', '\n', '   uint constant private BASIS_POINTS = 10000;\n', '\n', '    function mulBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        return amt.mul(bp).div(BASIS_POINTS);\n', '    }\n', '\n', '    function divBP(uint amt, uint bp) internal pure returns (uint) {\n', '        require(bp > 0, "Cannot divide by zero.");\n', '        if (amt == 0) return 0;\n', '        return amt.mul(BASIS_POINTS).div(bp);\n', '    }\n', '\n', '    function addBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.add(mulBP(amt, bp));\n', '    }\n', '\n', '    function subBP(uint amt, uint bp) internal pure returns (uint) {\n', '        if (amt == 0) return 0;\n', '        if (bp == 0) return amt;\n', '        return amt.sub(mulBP(amt, bp));\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * after an initial amount of tokens are minted when the token is created,\n', '     * the _mint() function will be locked until this time (set upon creation).\n', '     */\n', '    //    uint private _mintLockedUntilTimestamp;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    // constructor (string memory name, string memory symbol, uint256 amountToMintOnCreation, uint256 mintLockedDays) public {\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '        //\n', '        //        // mint to creator\n', '        //        _mint(msg.sender, amountToMintOnCreation);\n', '        //\n', '        //        // now lock minting for X days,\n', "        //        // by setting `_mintLockedUntilTimestamp` to prevent _mint()'ing until future time\n", '        //        _mintLockedUntilTimestamp = now.add(mintLockedDays.mul(1 days));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// PUBS\n', 'contract PubToken is ERC20("PUB.finance","PUBS"), Ownable {\n', '    using BasisPoints for uint;\n', '    using SafeMath for uint;\n', '\n', '    uint public burnBP;\n', '    uint public taxBP;\n', '    Bartender private bartender;\n', '\n', '\n', '    mapping(address => bool) public taxExempt;\n', '    mapping(address => bool) public fromOnlyTaxExempt;\n', '    mapping(address => bool) public toOnlyTaxExempt;\n', '\n', '\n', '    constructor(uint _taxBP, uint _burnBP, address _bartender, address owner) public { \n', '        bartender = Bartender(_bartender);\n', '        taxBP = _taxBP;\n', '        burnBP = _burnBP;\n', '        setTaxExemptStatus(address(bartender), true);\n', '        transferOwnership(owner); \n', '    }\n', '    modifier onlyBartender {\n', '        require(msg.sender == address(bartender), "Can only be called by Bartender contract.");\n', '        _;\n', '    }\n', '\n', '    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (Bartender).\n', '    function mint(address _to, uint256 _amount) public onlyBartender {\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '\n', '    function setFromOnlyTaxExemptStatus(address account, bool status) external onlyOwner {\n', '        fromOnlyTaxExempt[account] = status;\n', '    }\n', '\n', '    function setToOnlyTaxExemptStatus(address account, bool status) external onlyOwner {\n', '        fromOnlyTaxExempt[account] = status;\n', '    }\n', '\n', '    function setTaxExemptStatus(address account, bool status) public onlyOwner {\n', '        taxExempt[account] = status;\n', '    }\n', '\n', '\n', '    function transfer(address recipient, uint amount) public override returns (bool) {\n', '        (\n', '        !taxExempt[msg.sender] && !taxExempt[recipient] &&\n', '        !toOnlyTaxExempt[recipient] && !fromOnlyTaxExempt[msg.sender]\n', '        ) ?\n', '        _transferWithTax(msg.sender, recipient, amount) :\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\n', '        (\n', '        !taxExempt[sender] && !taxExempt[recipient] &&\n', '        !toOnlyTaxExempt[recipient] && !fromOnlyTaxExempt[sender]\n', '        ) ?\n', '        _transferWithTax(sender, recipient, amount) :\n', '        _transfer(sender, recipient, amount);\n', '\n', '        approve(\n', '            msg.sender,\n', '            allowance(\n', '                sender,\n', '                msg.sender\n', '            ).sub(amount, "Transfer amount exceeds allowance")\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function findTaxAmount(uint value) public view returns (uint tax, uint devTax) {\n', '        tax = value.mulBP(taxBP);\n', '        devTax = value.mulBP(burnBP);\n', '    }\n', '\n', '    function _transferWithTax(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        (uint tax, uint devTax) = findTaxAmount(amount);\n', '        uint tokensToTransfer = amount.sub(tax).sub(devTax);\n', '\n', '        _transfer(sender, address(bartender), tax);\n', '        _transfer(sender, address(bartender), devTax);\n', '\n', '        _transfer(sender, recipient, tokensToTransfer);\n', '        bartender.handleTaxDistribution(tax, devTax);\n', '    }\n', '\n', '}\n', '\n', 'contract Bartender is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // the lockup type for staked LP. affects the withdraw tax.\n', '    enum LockType { None, ThreeDays, Week, Month, Forever}\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        LockType lockType;\n', '        uint256 unlockDate;\n', '        uint256 taxRewardDebt; // Reward debt. See explanation below.\n', '        uint256 lpTaxRewardDebt; // Reward debt. See explanation below.\n', '\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of PUBs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accPubPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accPubPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;           // Address of LP token contract.\n', '        uint256 allocPoint;       // How many allocation points assigned to this pool. PUBs to distribute per block.\n', '        uint256 lastRewardBlock;  // Last block number that PUBs distribution occurs.\n', '        uint256 accPubPerShare;   // Accumulated PUBs per share, times 1e12. See below.\n', '        uint256 accTaxPubPerShare;   // Accumulated PUBs per share, times 1e12. For Taxes\n', '        uint256 accLPTaxPubPerShare;   // Accumulated PUBs per share, times 1e12. For LP Taxes\n', '        uint256 accTokensForTax;\n', '        uint256 accTokensForLPTax;\n', '\n', '    }\n', '\n', '    // The [new] PUB token\n', '    PubToken public pub;\n', '    // PUB tokens created per block.\n', '    uint256 public pubPerBlock;\n', '    // numerator of the owner fee\n', '    uint256 public constant OWNER_FEE_NUMERATOR = 50;\n', '    // denominator of the owner fee\n', '    uint256 public constant OWNER_FEE_DENOMINATOR = 10000;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo[])) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when PUB mining starts.\n', '    uint256 public startBlock;\n', '\n', '    // accumulated tax amount\n', '    uint256 public accumulatedTax = 0;\n', '\n', '    // address of the old PUB token that can be 1:1 exchanged for new PUB\n', '    IERC20 oldPub;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    constructor(\n', '        uint256 _startBlock,\n', '        address _oldPub\n', '    ) public {\n', '        // we are going to deploy the token from within this\n', '        // constructor to grant onlyOwner just to this contract so only Bartender can mint() tokens.\n', '        // mint a couple tokens for the express purpose of creating the Uniswap LPs\n', '        pub = new PubToken(250, 250, address(this), msg.sender);\n', '        oldPub = IERC20(_oldPub);\n', '\n', '        // in order to create the Uni Liquidity Pools we mint 5 tokens to the owner on creation.\n', '        pub.mint(msg.sender, 5 * 10**18);\n', '\n', '        pubPerBlock = 0; // initial value\n', '        startBlock = _startBlock;\n', '    }\n', '    modifier onlyPubToken {\n', '        require(msg.sender == address(pub), "Can only be called by PubToken contract.");\n', '        _;\n', '    }\n', '\n', '    // method to return the balance of an address of the pub erc20 token associated wtih this contract\n', '    function pubBalance(address a) external view returns (uint256){\n', '        return pub.balanceOf(a);\n', '    }\n', '\n', '    // return the address of the erc20 token that gets harvested\n', '    function pubToken() external view returns (address) {\n', '        return address(pub);\n', '    }\n', '\n', '    // get the number of farms\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // get the owner of the PUB token\n', '    function pubOwner() external view returns (address) {\n', '        return pub.owner();\n', '    }\n', '\n', '    // get the PUB balance of the caller\n', '    function myPubTokenBalance() external view returns (uint256) {\n', '        return pub.balanceOf(msg.sender);\n', '    }\n', '\n', '    // view to see the pending tokens for a pool and an address\n', '    function getUserInfo(uint256 _pid, address _address) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][_address];\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalAmount = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            totalAmount = totalAmount.add(userInfoArr[userInfoIndex].amount);\n', '\n', '        }\n', '        return totalAmount;\n', '    }\n', '\n', '    function getUserInfoLocked(uint256 _pid, address _address) external view returns (uint256) {\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][_address];\n', '\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalAmount = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user =userInfoArr[userInfoIndex];\n', '            if (user.amount > 0 && user.unlockDate > now) {\n', '\n', '                totalAmount = totalAmount.add(user.amount);\n', '            }\n', '        }\n', '        return totalAmount;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accPubPerShare: 0,\n', '            accTaxPubPerShare:0,\n', '            accLPTaxPubPerShare:0,\n', '            accTokensForTax:0,\n', '            accTokensForLPTax:0\n', '            }));\n', '    }\n', '\n', '    // get the current number of PUB per block\n', '    function getPubPerBlock() public view returns (uint256){\n', '        return pubPerBlock;\n', '    }\n', '\n', '    // update the number of PUB per block, with a value in wei\n', '    function setPubPerBlock(uint256 _pubPerBlock) public onlyOwner {\n', '        require(_pubPerBlock > 0, "_pubPerBlock must be non-zero");\n', '\n', '        // update all pools prior to changing the block rewards\n', '        massUpdatePools();\n', '\n', '        // update the block rewards\n', '        pubPerBlock = _pubPerBlock;\n', '    }\n', '\n', "    // Update the given pool's PUB allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // View function to see pending PUBs on frontend.\n', '    function pendingPubs(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][msg.sender];\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalPubToTransfer = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '\n', '            if (user.amount > 0 && user.unlockDate <= now) {\n', '                uint256 pending = user.amount.mul(pool.accPubPerShare).div(1e12).sub(user.rewardDebt);\n', '                totalPubToTransfer = totalPubToTransfer.add(pending);\n', '\n', '                //Distribute taxes\n', '                if (user.lockType >= LockType.Week) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accTaxPubPerShare).div(1e12).sub(user.taxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                }\n', '                //Distribute lp taxes\n', '                if (user.lockType >= LockType.Month) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12).sub(user.lpTaxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                }\n', '            }\n', '        }\n', '        return totalPubToTransfer;\n', '    }\n', '\n', '    // View function to see pending PUBs on frontend.\n', '    function pendingLockedPubs(uint256 _pid, address _user) external view returns (uint256) {\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][msg.sender];\n', '\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalPubToTransfer = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '\n', '            if (user.amount > 0 && user.unlockDate > now) {\n', '                uint256 pending = user.amount.mul(pool.accPubPerShare).div(1e12).sub(user.rewardDebt);\n', '                totalPubToTransfer = totalPubToTransfer.add(pending);\n', '\n', '                //Distribute taxes\n', '                if (user.lockType >= LockType.Week) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accTaxPubPerShare).div(1e12).sub(user.taxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                }\n', '                //Distribute lp taxes\n', '                if (user.lockType >= LockType.Month) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12).sub(user.lpTaxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                }\n', '            }\n', '        }\n', '        return totalPubToTransfer;\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // anyone can call this to update the tax distribution and gets a 1% caller bonus\n', '    function massUpdateTaxAllocationForPools() public {\n', '        uint callerBonus = accumulatedTax.mul(100).div(10000); // 1%\n', '        pub.transfer(msg.sender, callerBonus);\n', '        accumulatedTax = accumulatedTax.sub(callerBonus);\n', '        if (accumulatedTax == 0) {\n', '            return;\n', '        }\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            PoolInfo storage pool = poolInfo[pid];\n', '            uint256 lpSupply = pool.accTokensForTax;\n', '\n', '            //handle tax distribution\n', '            uint256 taxPubReward = accumulatedTax.mul(pool.allocPoint).div(totalAllocPoint);\n', '            pool.accTaxPubPerShare = pool.accTaxPubPerShare.add(taxPubReward.mul(1e12).div(lpSupply));\n', '\n', '        }\n', '        accumulatedTax = 0;\n', '    }\n', '\n', '    function massUpdateLPTaxAllocationForPools(uint _amount) public {\n', '        pub.transferFrom(msg.sender, address(this), _amount);\n', '\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            PoolInfo storage pool = poolInfo[pid];\n', '            uint256 lpSupply = pool.accTokensForLPTax;\n', '\n', '            //handle tax distribution\n', '            uint256 lpTaxPubReward = _amount.mul(pool.allocPoint).div(totalAllocPoint);\n', '            pool.accLPTaxPubPerShare = pool.accLPTaxPubPerShare.add(lpTaxPubReward.mul(1e12).div(lpSupply));\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    // updates starting with the 0 index\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        uint256 pubReward = pubPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n', '\n', '        if(pubReward > 0){\n', '            pub.mint(address(this), pubReward);\n', '        }\n', '        pool.accPubPerShare = pool.accPubPerShare.add(pubReward.mul(1e12).div(lpSupply));\n', '\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // claim pending yield\n', '    function harvest(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalPubToTransfer = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '\n', '            if (user.amount > 0 && user.unlockDate <= now) {\n', '                uint256 pending = user.amount.mul(pool.accPubPerShare).div(1e12).sub(user.rewardDebt);\n', '                totalPubToTransfer = totalPubToTransfer.add(pending);\n', '                user.rewardDebt = user.amount.mul(pool.accPubPerShare).div(1e12);\n', '\n', '                //Distribute taxes\n', '                if (user.lockType >= LockType.Week) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accTaxPubPerShare).div(1e12).sub(user.taxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                    user.taxRewardDebt = user.amount.mul(pool.accTaxPubPerShare).div(1e12);\n', '                }\n', '                //Distribute lp taxes\n', '                if (user.lockType >= LockType.Month) {\n', '                    uint256 pendingTax = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12).sub(user.lpTaxRewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                    user.lpTaxRewardDebt = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12);\n', '                }\n', '            }\n', '        }\n', '        safePubTransfer(msg.sender, totalPubToTransfer);\n', '    }\n', '\n', '    // Deposit LP tokens to Bartender for PUB allocation.\n', '    function deposit(uint256 _pid, uint256 _amount, LockType lockType) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        updatePool(_pid);\n', '        if (_amount > 0) {\n', '\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '\n', '            UserInfo memory user = UserInfo(_amount,0,lockType,0,0,0);\n', '            user.amount = _amount;\n', '            user.rewardDebt = user.amount.mul(pool.accPubPerShare).div(1e12);\n', '            user.lockType = lockType;\n', '            user.taxRewardDebt = user.amount.mul(pool.accTaxPubPerShare).div(1e12);\n', '            user.lpTaxRewardDebt = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12);\n', '\n', '            if(lockType == LockType.ThreeDays){\n', '                user.unlockDate = now + 3 days;\n', '            }\n', '            else if(lockType == LockType.Week){\n', '                user.unlockDate = now + 1 weeks;\n', '                pool.accTokensForTax = pool.accTokensForTax.add(_amount);\n', '\n', '            }\n', '            else if(lockType == LockType.Month){\n', '                user.unlockDate = now + 30 days;\n', '                pool.accTokensForLPTax = pool.accTokensForLPTax.add(_amount);\n', '                pool.accTokensForTax = pool.accTokensForTax.add(_amount);\n', '            }\n', '            else if(lockType == LockType.Forever){\n', '                user.unlockDate = now;\n', '                pool.accTokensForLPTax = pool.accTokensForLPTax.add(_amount);\n', '                pool.accTokensForTax = pool.accTokensForTax.add(_amount);\n', '            }\n', '            else {\n', '                user.unlockDate = now;\n', '            }\n', '            userInfo[_pid][msg.sender].push(user);\n', '            emit Deposit(msg.sender, _pid, _amount);\n', '        }\n', '    }\n', '\n', '    // withdraw all unlocked tokens\n', '    function withdrawMax(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalPubToTransfer = 0;\n', '        uint totalLPToTransfer = 0;\n', '        uint totalLPFee = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '\n', '            if (user.amount > 0 && user.unlockDate <= now && user.lockType != LockType.Forever) {\n', '                    uint256 pending = user.amount.mul(pool.accPubPerShare).div(1e12).sub(user.rewardDebt);\n', '                    totalPubToTransfer = totalPubToTransfer.add(pending);\n', '                    uint256 amount  = user.amount;\n', '\n', '                    //Distribute taxes\n', '                    if (user.lockType >= LockType.Week) {\n', '                        uint256 pendingTax = user.amount.mul(pool.accTaxPubPerShare).div(1e12).sub(user.taxRewardDebt);\n', '                        totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                        user.taxRewardDebt = user.amount.mul(pool.accTaxPubPerShare).div(1e12);\n', '                    }\n', '\n', '                    //Distribute lp taxes\n', '                    if (user.lockType >= LockType.Month) {\n', '                        uint256 pendingTax = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12).sub(user.lpTaxRewardDebt);\n', '                        totalPubToTransfer = totalPubToTransfer.add(pendingTax);\n', '                        user.lpTaxRewardDebt = user.amount.mul(pool.accLPTaxPubPerShare).div(1e12);\n', '                    }\n', '\n', '                    // lock type >= Month is 0 fee\n', '                    uint256 fee = 0;\n', '                    if(user.lockType == LockType.None){\n', '                        fee = 100;\n', '                    }\n', '                    else if(user.lockType == LockType.ThreeDays){\n', '                        fee = 50;\n', '                    }\n', '                    else if(user.lockType == LockType.Week){\n', '                        fee = 25;\n', '                        pool.accTokensForTax = pool.accTokensForTax.sub(amount);\n', '                    }\n', '                    else if(user.lockType == LockType.Month){\n', '                        pool.accTokensForLPTax = pool.accTokensForLPTax.sub(amount);\n', '                        pool.accTokensForTax = pool.accTokensForTax.sub(amount);\n', '                    }\n', '\n', '                    uint256 feeAmount = amount.mul(fee).div(OWNER_FEE_DENOMINATOR);\n', '                    amount = amount.sub(feeAmount);\n', '                    totalLPFee = totalLPFee.add(feeAmount);\n', '\n', '                    totalLPToTransfer = totalLPToTransfer.add(amount);\n', '\n', '                    user.rewardDebt = 0;\n', '                    user.amount = 0;\n', '                }\n', '\n', '        }\n', '        // surgically collapse the array\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length;) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '            if(user.amount == 0){\n', '                for (uint256 idx = userInfoIndex; idx < length-1; ++idx) {\n', '                    userInfoArr[idx] = userInfoArr[idx+1];\n', '                }\n', '                length = length.sub(1);\n', '                delete userInfoArr[length];\n', '            }\n', '            else{\n', '                userInfoIndex++;\n', '            }\n', '        }\n', '\n', '        // transfer all tokens that we withdrew LP from\n', '        safePubTransfer(msg.sender, totalPubToTransfer);\n', '\n', '        // transfer the feeAmount to the owner using deposit\n', '        pool.lpToken.safeTransfer(address(owner()), totalLPFee);\n', '\n', '        // withdraw, using safeTransfer\n', '        pool.lpToken.safeTransfer(address(msg.sender), totalLPToTransfer);\n', '\n', '        emit Withdraw(msg.sender, _pid, totalLPToTransfer);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo[] storage userInfoArr = userInfo[_pid][msg.sender];\n', '\n', '        uint256 length = userInfoArr.length;\n', '        uint totalPubToTransfer = 0;\n', '        uint totalLPToTransfer = 0;\n', '        uint totalLPFee = 0;\n', '        for (uint256 userInfoIndex = 0; userInfoIndex < length; ++userInfoIndex) {\n', '            UserInfo storage user = userInfoArr[userInfoIndex];\n', '\n', '            if (user.amount > 0 && user.unlockDate <= now && user.lockType != LockType.Forever) {\n', '                uint256 amount  = user.amount;\n', '\n', '\n', '                // lock type >= Month is 0 fee\n', '                uint256 fee = 0;\n', '                if(user.lockType == LockType.None){\n', '                    fee = 100;\n', '                }\n', '                else if(user.lockType == LockType.ThreeDays){\n', '                    fee = 50;\n', '                }\n', '                else if(user.lockType == LockType.Week){\n', '                    fee = 25;\n', '                    pool.accTokensForTax = pool.accTokensForTax.sub(amount);\n', '\n', '                }\n', '                else if(user.lockType == LockType.Month){\n', '                    pool.accTokensForLPTax = pool.accTokensForLPTax.sub(amount);\n', '                    pool.accTokensForTax = pool.accTokensForTax.sub(amount);\n', '\n', '                }\n', '\n', '                uint256 feeAmount = amount.mul(fee).div(OWNER_FEE_DENOMINATOR);\n', '                amount = amount.sub(feeAmount);\n', '                totalLPFee = totalLPFee.add(feeAmount);\n', '\n', '                totalLPToTransfer = totalLPToTransfer.add(amount);\n', '            }\n', '        }\n', '\n', '        // transfer the feeAmount to the owner using deposit\n', '        pool.lpToken.safeTransfer(address(owner()), totalLPFee);\n', '\n', '        // withdraw, using safeTransfer\n', '        pool.lpToken.safeTransfer(address(msg.sender), totalLPToTransfer);\n', '\n', '        emit EmergencyWithdraw(msg.sender, _pid, totalLPToTransfer);\n', '    }\n', '\n', '    // Safe pub transfer function, just in case if rounding error causes pool to not have enough PUBs.\n', '    function safePubTransfer(address _to, uint256 _amount) internal {\n', '        uint256 pubBal = pub.balanceOf(address(this));\n', '        if (_amount > pubBal) {\n', '            pub.transfer(_to, pubBal);\n', '        } else {\n', '            pub.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function handleTaxDistribution(uint _tax,uint _devTax) external onlyPubToken{\n', '        accumulatedTax = accumulatedTax.add(_tax);\n', '        // transfers the dev tax to the owner\n', '        pub.transfer(address(owner()), _devTax);\n', '    }\n', '\n', '    // exchange original PUB token for new PUB\n', '    function swapPubForPub2(uint _amount) public{\n', '        oldPub.transferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), _amount);\n', '        pub.mint(msg.sender, _amount);\n', '    }\n', '\n', '}']