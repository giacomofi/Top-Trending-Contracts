['/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-07\n', '*/\n', '\n', '// Price Oracle for Stabilize Protocol\n', '// This contract uses Aave Price Oracle\n', '// The main Operator contract can change which Price Oracle it uses\n', '\n', '// Updated to use Chainlink upgrade\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '/************\n', 'IPriceOracleGetter interface\n', 'Interface for the Aave price oracle.\n', '*/\n', 'interface IPriceOracleGetter {\n', '    function getAssetPrice(address _asset) external view returns (uint256);\n', '    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\n', '    function getSourceOfAsset(address _asset) external view returns(address);\n', '    function getFallbackOracle() external view returns(address);\n', '}\n', '\n', 'interface LendingPoolAddressesProvider {\n', '    function getPriceOracle() external view returns (address);\n', '}\n', '\n', 'interface AggregatorV3Interface {\n', '  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n', '}\n', '\n', 'interface zaToken {\n', '    // For the proxy tokens\n', '    function underlyingAsset() external view returns (address);\n', '}\n', '\n', 'contract StabilizePriceOracle {\n', '    function getPrice(address _address) external view returns (uint256) {\n', '        // This version of the price oracle will use Aave contracts\n', '        \n', '        // First get the Ethereum USD price from Chainlink Aggregator\n', '        // Mainnet address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n', '        // Kovan address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n', '        AggregatorV3Interface ethOracle = AggregatorV3Interface(address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419));\n', '        ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer \n', '        uint256 ethPrice = uint256(intEthPrice);\n', '        \n', '        address underlyingAsset;\n', '        // zaTokens store their underlying asset address in the contract\n', '        try zaToken(_address).underlyingAsset() returns (address) {\n', '            // If this address has that method, this will work\n', '            underlyingAsset = zaToken(_address).underlyingAsset();\n', '        }catch{\n', '            underlyingAsset = _address;\n', '        }\n', '        \n', '        // Retrieve PriceOracle address\n', '        // Mainnet address: 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n', '        // Kovan address: 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5\n', '        LendingPoolAddressesProvider provider = LendingPoolAddressesProvider(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8));\n', '        address priceOracleAddress = provider.getPriceOracle();\n', '        IPriceOracleGetter priceOracle = IPriceOracleGetter(priceOracleAddress);\n', '\n', '        uint256 price = priceOracle.getAssetPrice(underlyingAsset); // This is relative to Ethereum, need to convert to USD\n', '        ethPrice = ethPrice / 10000; // We only care about 4 decimal places from Chainlink priceOracleAddress\n', '        price = price * ethPrice / 10000; // Convert to Wei format\n', '        return price;\n', '    }\n', '}']