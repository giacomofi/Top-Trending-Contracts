['//\n', '//    This is a project funding experiment:\n', '//\n', '//    https://support.buidlguidl.com\n', '//\n', '//    Support the BuidlGuidl! Contact: @austingriffith\n', '//\n', '//\n', '\n', '// Sources flattened with buidler v1.4.8 https://buidler.dev\n', '\n', '// File @openzeppelin/contracts/GSN/Context.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/Ownable.sol@v3.2.0\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/MVPCLR.sol\n', '\n', 'pragma solidity >=0.6.6 <0.7.0;\n', '\n', 'contract MVPCLR is Ownable {\n', '\n', '  uint256 public roundStart;\n', '  uint256 public immutable roundDuration;\n', '  uint256 public recipientCount = 0;\n', '\n', '  event RoundStarted(uint256 roundStart, uint256 roundDuration);\n', '  event RecipientAdded(address addr, bytes32 data, string link, uint256 index);\n', '  event Donate(address sender, uint256 value, uint256 index);\n', '  event MatchingPoolDonation(address sender, uint256 value);\n', '  event Distribute(address to, uint256 index, uint256 amount);\n', '\n', '  modifier beforeRoundOpen() {\n', '    require(roundStart == 0, "MVPCLR:beforeRoundOpen - Round already opened");\n', '    _;\n', '  }\n', '\n', '  modifier isRoundOpen() {\n', '    require(\n', '      getBlockTimestamp() < (roundStart + roundDuration),\n', '      "MVPCLR:isRoundOpen - Round is not open"\n', '    );\n', '    _;\n', '  }\n', '\n', '  modifier isRoundClosed() {\n', '    require(\n', '      roundStart != 0 &&\n', '      getBlockTimestamp() >= (roundStart + roundDuration),\n', '      "MVPCLR:isRoundClosed Round is not closed"\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor(uint256 _roundDuration) public {\n', '    require(_roundDuration < 31536000,"MVPCLR: round duration too long");\n', '    roundDuration = _roundDuration;\n', '  }\n', '\n', '  function startRound()\n', '  public\n', '  onlyOwner\n', '  beforeRoundOpen\n', '  {\n', '    roundStart = getBlockTimestamp();\n', '    emit RoundStarted(roundStart, roundDuration);\n', '  }\n', '\n', '  function getBlockTimestamp() public view returns (uint256) {\n', '    return block.timestamp;\n', '  }\n', '\n', '  function addRecipient(address payable addr, bytes32 data, string memory link)\n', '  public\n', '  onlyOwner\n', '  beforeRoundOpen\n', '  {\n', '    emit RecipientAdded(addr, data, link, recipientCount++);\n', '  }\n', '\n', '  function donate(uint256 index) public payable isRoundOpen {\n', '    require(index<recipientCount, "CLR:donate - Not a valid recipient");\n', '    emit Donate(_msgSender(), msg.value, index);\n', '  }\n', '\n', '  function distribute(address payable to, uint256 index, uint256 amount)\n', '  external\n', '  onlyOwner\n', '  isRoundClosed\n', '  {\n', '    to.transfer(amount);\n', '    emit Distribute(to,index,amount);\n', '  }\n', '\n', '\n', '  // receive donation for the matching pool\n', '  receive() external payable {\n', '    require(roundStart == 0 || getBlockTimestamp() < roundStart + roundDuration, "CLR:receive closed");\n', '    emit MatchingPoolDonation(_msgSender(), msg.value);\n', '  }\n', '\n', '}']