['// File: contracts/vaults/IStrategy.sol\n', '\n', '/*\n', ' A strategy must implement the following functions:\n', ' - getName(): Name of strategy\n', ' - want(): Desired token for investment. Should be same as underlying vault token (Eg. USDC)\n', ' - deposit function that will calls controller.earn()\n', ' - withdraw(address): For miscellaneous tokens, must exclude any tokens used in the yield\n', '    - Should return to Controller\n', ' - withdraw(uint): Controller | Vault role - withdraw should always return to vault\n', ' - withdrawAll(): Controller | Vault role - withdraw should always return to vault\n', ' - balanceOf(): Should return underlying vault token amount\n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'interface IStrategy {\n', '    function getName() external pure returns (string memory);\n', '    function want() external view returns (address);\n', '    function withdraw(address) external;\n', '    function withdraw(uint256) external;\n', '    function withdrawAll() external returns (uint256);\n', '    function balanceOf() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/IERC20.sol\n', '\n', '//SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ITreasury.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', 'interface ITreasury {\n', '    function defaultToken() external view returns (IERC20);\n', '    function deposit(IERC20 token, uint256 amount) external;\n', '    function withdraw(uint256 amount, address withdrawAddress) external;\n', '}\n', '\n', '// File: contracts/vaults/IVault.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', 'interface IVault {\n', '    function want() external view returns (IERC20);\n', '    function transferFundsToStrategy(address strategy, uint256 amount) external;\n', '    function availableFunds() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/vaults/IVaultRewards.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', 'interface IVaultRewards {\n', '    function want() external view returns (IERC20);\n', '    function notifyRewardAmount(uint256 reward) external;\n', '}\n', '\n', '// File: contracts/vaults/IController.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IController {\n', '    function currentEpochTime() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '    function rewards(address token) external view returns (IVaultRewards);\n', '    function vault(address token) external view returns (IVault);\n', '    function allowableAmount(address) external view returns (uint256);\n', '    function treasury() external view returns (ITreasury);\n', '    function approvedStrategies(address, address) external view returns (bool);\n', '    function getHarvestInfo(address strategy, address user)\n', '        external view returns (\n', '        uint256 vaultRewardPercentage,\n', '        uint256 hurdleAmount,\n', '        uint256 harvestPercentage\n', '    );\n', '    function withdraw(address, uint256) external;\n', '    function earn(address, uint256) external;\n', '    function increaseHurdleRate(address token) external;\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '// Note: This file has been modified to include the sqrt function for quadratic voting\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '\n', '    /**\n', '    * Imported from: https://github.com/alianse777/solidity-standard-library/blob/master/Math.sol\n', '    * @dev Compute square root of x\n', '    * @return sqrt(x)\n', '    */\n', '   function sqrt(uint256 x) internal pure returns (uint256) {\n', '       uint256 n = x / 2;\n', '       uint256 lstX = 0;\n', '       while (n != lstX){\n', '           lstX = n;\n', '           n = (n + x/n) / 2;\n', '       }\n', '       return uint256(n);\n', '   }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/Address.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin/SafeERC20.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/vaults/strategy/MStableStrategy.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', '/*\n', '* MIT License\n', '* ===========\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', 'interface IBalProxy {\n', '    function smartSwapExactIn(\n', '        IERC20 tokenIn,\n', '        IERC20 tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut,\n', '        uint nPools\n', '    )\n', '        external payable\n', '        returns (uint totalAmountOut);\n', '}\n', '\n', 'interface IBPT {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '    function exitswapExternAmountOut(\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPoolAmountIn\n', '    ) external returns (uint poolAmountIn);\n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint poolAmountIn,\n', '        uint minAmountOut\n', '    ) external returns (uint tokenAmountOut);\n', '}\n', '\n', 'interface IMPool {\n', '    function balanceOf(address _account) external view returns (uint256);\n', '    function earned(address _account) external view returns (uint256, uint256);\n', '    function stake(uint256 _amount) external;\n', '    function claimReward() external;\n', '    function exit() external;\n', '}\n', '\n', 'interface IMTAGov {\n', '    function balanceOf(address _account) external view returns (uint256);\n', '    function earned(address _account) external view returns (uint256);\n', '    function createLock(uint256 _value, uint256 _unlockTime) external;\n', '    function withdraw() external;\n', '    function increaseLockAmount(uint256 _value) external;\n', '    function claimReward() external;\n', '}\n', '\n', '\n', 'contract MStableStrat is IStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant PERFORMANCE_FEE = 500; // 5%\n', '    uint256 public constant DENOM = 10000;\n', '    uint256 public hurdleLastUpdateTime;\n', '    uint256 public harvestAmountThisEpoch;\n', '    uint256 public strategistCollectedFee;\n', '    uint256 public numPools = 1;\n', '\n', '    IERC20 internal usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    IERC20 internal musd = IERC20(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\n', '    IERC20 internal mta = IERC20(0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2);\n', '\n', '    IBPT internal musdcBpt = IBPT(0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C);\n', '\n', '    IBalProxy internal balProxy = IBalProxy(0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21);\n', '    IMPool internal mPool = IMPool(0x881c72D1e6317f10a1cDCBe05040E7564E790C80);\n', '    IMTAGov internal mtaGov = IMTAGov(0xaE8bC96DA4F9A9613c323478BE181FDb2Aa0E1BF);\n', '\n', '    IERC20 public want = usdc; // should be set only in constructor or hardcoded\n', '    IController public controller; // should be set only in constructor\n', '\n', '    address public strategist; // mutable, but only by strategist\n', '\n', '    // want must be equal to an underlying vault token (Eg. USDC)\n', '    constructor(IController _controller) public {\n', '        controller = _controller;\n', '        strategist = msg.sender;\n', '    }\n', '\n', '    function getName() external pure returns (string memory) {\n', '        return "MstableStrategy";\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == strategist, "!strategist");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setNumPoolsForSwap(uint256 _numPools) external {\n', '        require(msg.sender == strategist, "!strategist");\n', '        numPools = _numPools;\n', '    }\n', '\n', '    function setAllowances(IERC20 token, address[] calldata recipients, bool isIncrease) external {\n', '        require(msg.sender == strategist, "!strategist");\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            require(\n', '                recipients[i] == address(musdcBpt) ||\n', '                recipients[i] == address(balProxy) ||\n', '                recipients[i] == address(mPool) ||\n', '                recipients[i] == address(mtaGov),\n', '                "bad recipient"\n', '            );\n', '            uint256 allowance = isIncrease ? uint256(-1) : 0;\n', '            token.safeApprove(recipients[i], allowance);\n', '        }\n', '    }\n', '\n', '    // Assumed that caller checks against available funds in vault\n', '    function deposit(uint256 amount) public {\n', '        uint256 availFunds = controller.allowableAmount(address(this));\n', '        require(amount <= availFunds, "exceed contAllowance");\n', '        controller.earn(address(this), amount);\n', '\n', '        // deposit into musdcBpt\n', '        uint256 bptTokenAmt = musdcBpt.joinswapExternAmountIn(address(want), amount, 0);\n', '\n', '        // deposit into mstable pool\n', '        mPool.stake(bptTokenAmt);\n', '\n', '        // deposit any MTA token in this contract into mStaking contract\n', '        depositMTAInStaking();\n', '    }\n', '\n', '    function balanceOf() external view returns (uint256) {\n', '        // get balance in mPool\n', '        uint256 bptStakeAmt = mPool.balanceOf(address(this));\n', '\n', '        // get usdc + musd amts in BPT, and total BPT\n', '        uint256 usdcAmt = usdc.balanceOf(address(musdcBpt));\n', '        uint256 musdAmt = musd.balanceOf(address(musdcBpt));\n', '        uint256 totalBptAmt = musdcBpt.totalSupply();\n', '\n', '        // convert musd to usdc\n', '        usdcAmt = usdcAmt.add(\n', '            musdAmt.mul(1e18).div(musdcBpt.getSpotPrice(address(musd), address(usdc)))\n', '        );\n', '\n', '        return bptStakeAmt.mul(usdcAmt).div(totalBptAmt);\n', '    }\n', '\n', '    function earned() external view returns (uint256) {\n', '        (uint256 earnedAmt,) = mPool.earned(address(this));\n', '        return earnedAmt.add(mtaGov.earned(address(this)));\n', '    }\n', '\n', '    function withdraw(address token) external {\n', '        IERC20 erc20Token = IERC20(token);\n', '        require(msg.sender == address(controller), "!controller");\n', '        erc20Token.safeTransfer(address(controller), erc20Token.balanceOf(address(this)));\n', '    }\n', '\n', '    function withdraw(uint256 amount) external {\n', '        require(msg.sender == address(controller), "!controller");\n', '\n', '        // exit fully\n', '        mPool.exit();\n', '\n', '        // convert to desired amount\n', '        musdcBpt.exitswapExternAmountOut(address(want), amount, uint256(-1));\n', '\n', '        // deposit whatever remaining bpt back into mPool\n', '        mPool.stake(musdcBpt.balanceOf(address(this)));\n', '\n', '        // send funds to vault\n', '        want.safeTransfer(address(controller.vault(address(want))), amount);\n', '    }\n', '\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == address(controller), "!controller");\n', '\n', '        // exit fully\n', '        mPool.exit();\n', '\n', '        // convert reward to want tokens\n', '        // in case swap fails, continue\n', '        (bool success, ) = address(this).call(\n', '            abi.encodeWithSignature(\n', '                "exchangeRewardForWant(bool)",\n', '                true\n', '            )\n', '        );\n', '        // to remove compiler warning\n', '        success;\n', '\n', '        // convert bpt to want tokens\n', '        musdcBpt.exitswapPoolAmountIn(\n', '            address(want),\n', '            musdcBpt.balanceOf(address(this)),\n', '            0\n', '        );\n', '\n', '        // exclude collected strategist fee\n', '        balance = want.balanceOf(address(this)).sub(strategistCollectedFee);\n', '        // send funds to vault\n', '        want.safeTransfer(address(controller.vault(address(want))), balance);\n', '    }\n', '\n', '    function harvest() external {\n', '        (uint256 amount,) = mPool.earned(address(this));\n', '        // collect farmed tokens\n', '        if (amount > 0) {\n', '            mPool.claimReward();\n', '        }\n', '\n', '        if (mtaGov.earned(address(this)) > 0) {\n', '            mtaGov.claimReward();\n', '        }\n', '\n', '        // convert 80% reward to want tokens\n', '        // in case swap fails, continue\n', '        (bool success, ) = address(this).call(\n', '            abi.encodeWithSignature(\n', '                "exchangeRewardForWant(bool)",\n', '                false\n', '            )\n', '        );\n', '        // to remove compiler warning\n', '        success;\n', '\n', '        amount = want.balanceOf(address(this)).sub(strategistCollectedFee);\n', '        uint256 vaultRewardPercentage;\n', '        uint256 hurdleAmount;\n', '        uint256 harvestPercentage;\n', '        uint256 epochTime;\n', '        (vaultRewardPercentage, hurdleAmount, harvestPercentage) =\n', '            controller.getHarvestInfo(address(this), msg.sender);\n', '\n', '        // check if harvest amount has to be reset\n', '        if (hurdleLastUpdateTime < epochTime) {\n', '            // reset collected amount\n', '            harvestAmountThisEpoch = 0;\n', '        }\n', '        // update variables\n', '        hurdleLastUpdateTime = block.timestamp;\n', '        harvestAmountThisEpoch = harvestAmountThisEpoch.add(amount);\n', '\n', '        // first, take harvester fee\n', '        uint256 harvestFee = amount.mul(harvestPercentage).div(DENOM);\n', '        want.safeTransfer(msg.sender, harvestFee);\n', '\n', '        uint256 fee;\n', '        // then, if hurdle amount has been exceeded, take performance fee\n', '        if (harvestAmountThisEpoch >= hurdleAmount) {\n', '            fee = amount.mul(PERFORMANCE_FEE).div(DENOM);\n', '            strategistCollectedFee = strategistCollectedFee.add(fee);\n', '        }\n', '\n', '        // do the subtraction of harvester and strategist fees\n', '        amount = amount.sub(harvestFee).sub(fee);\n', '\n', '        // finally, calculate how much is to be re-invested\n', '        // fee = vault reward amount, reusing variable\n', '        fee = amount.mul(vaultRewardPercentage).div(DENOM);\n', '        want.safeTransfer(address(controller.rewards(address(want))), fee);\n', '        controller.rewards(address(want)).notifyRewardAmount(fee);\n', '        amount = amount.sub(fee);\n', '\n', '        // finally, use remaining want amount for reinvestment\n', '        amount = musdcBpt.joinswapExternAmountIn(address(want), amount, 0);\n', '\n', '        // deposit into mstable pool\n', '        mPool.stake(amount);\n', '\n', '        // deposit any MTA token in this contract into mStaking contract\n', '        depositMTAInStaking();\n', '    }\n', '\n', '    function withdrawStrategistFee() external {\n', '        strategistCollectedFee = 0;\n', '        want.safeTransfer(strategist, strategistCollectedFee);\n', '    }\n', '\n', '    function exitMGov() external {\n', '        mtaGov.withdraw();\n', '        // convert to want tokens\n', '        // in case swap fails, continue\n', '        (bool success, ) = address(this).call(\n', '            abi.encodeWithSignature(\n', '                "exchangeRewardForWant(bool)",\n', '                true\n', '            )\n', '        );\n', '        // to remove compiler warning\n', '        success;\n', '        want.safeTransfer(\n', '            address(controller.rewards(address(want))),\n', '            want.balanceOf(address(this)).sub(strategistCollectedFee)\n', '        );\n', '    }\n', '\n', '    function exchangeRewardForWant(bool exchangeAll) public {\n', '        require(msg.sender == address(this), "not this");\n', '        uint256 swapAmt = mta.balanceOf(address(this));\n', '        if (swapAmt == 0) return;\n', '\n', '        // use mta-musd pool\n', '        swapAmt = balProxy.smartSwapExactIn(\n', '            mta,\n', '            musd,\n', '            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),\n', '            0,\n', '            numPools\n', '        );\n', '\n', '        // use musd-usdc pool\n', '        balProxy.smartSwapExactIn(\n', '            musd,\n', '            want,\n', '            swapAmt,\n', '            0,\n', '            numPools\n', '        );\n', '    }\n', '\n', '    function depositMTAInStaking() internal {\n', '        uint256 mtaBal = mta.balanceOf(address(this));\n', '        if (mtaBal == 0) return;\n', '        if (mtaGov.balanceOf(address(this)) == 0) {\n', '            // create lock with max time\n', '            mtaGov.createLock(mtaBal, 1632580257);\n', '        } else {\n', '            // increase amount\n', '            mtaGov.increaseLockAmount(mtaBal);\n', '        }\n', '    }\n', '}']