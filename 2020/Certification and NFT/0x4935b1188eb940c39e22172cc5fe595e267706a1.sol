['/*\n', '\n', '    Copyright 2020 The Hydro Protocol Foundation\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '        http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.5.8;\n', '\n', 'interface IMakerDaoOracle{\n', '    function peek()\n', '        external\n', '        view\n', '        returns (bytes32, bool);\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /** @dev The Ownable constructor sets the original `owner` of the contract to the sender account. */\n', '    constructor()\n', '        internal\n', '    {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /** @return the address of the owner. */\n', '    function owner()\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        return _owner;\n', '    }\n', '\n', '    /** @dev Throws if called by any account other than the owner. */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    /** @return true if `msg.sender` is the owner of the contract. */\n', '    function isOwner()\n', '        public\n', '        view\n', '        returns(bool)\n', '    {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /** @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership()\n', '        public\n', '        onlyOwner\n', '    {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /** @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(\n', '        address newOwner\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0), "INVALID_OWNER");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MakerDaoOracleProxy is Ownable {\n', '\n', '    address public asset;\n', '    address public makerDaoOracle;\n', '    uint256 public decimals;\n', '    uint256 public sparePrice;\n', '    uint256 public sparePriceBlockNumber;\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    modifier inWhitelist { require(whitelist[msg.sender], "MSG_SENDER_NOT_WHITELISTED"); _; }\n', '\n', '    event PriceFeed(\n', '        uint256 price,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event AddToWhitelist(\n', '        address addr\n', '    );\n', '\n', '    event RemoveFromWhitelist(\n', '        address addr\n', '    );\n', '\n', '    constructor (address _asset, address _makerDaoOracle, uint256 _decimals)\n', '        public\n', '    {\n', '        asset = _asset;\n', '        makerDaoOracle = _makerDaoOracle;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function getPrice(\n', '        address _asset\n', '    )\n', '        external\n', '        view\n', '        inWhitelist\n', '        returns (uint256)\n', '    {\n', '        require(_asset == asset, "ASSET_NOT_MATCH");\n', '\n', '        (bytes32 value, bool has) = IMakerDaoOracle(makerDaoOracle).peek();\n', '\n', '        if (has) {\n', '            return uint256(value) * (10 ** (18 - decimals));\n', '        } else {\n', '            require(block.number - sparePriceBlockNumber <= 3600, "ORACLE_OFFLINE");\n', '            return sparePrice;\n', '        }\n', '    }\n', '\n', '    function feed(\n', '        uint256 newSparePrice,\n', '        uint256 blockNumber\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(newSparePrice > 0, "PRICE_MUST_GREATER_THAN_0");\n', '        require(blockNumber <= block.number && blockNumber >= sparePriceBlockNumber, "BLOCKNUMBER_WRONG");\n', '\n', '        sparePrice = newSparePrice;\n', '        sparePriceBlockNumber = blockNumber;\n', '\n', '        emit PriceFeed(newSparePrice, blockNumber);\n', '    }\n', '\n', '    function addToWhitelist(\n', '        address addr\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        whitelist[addr] = true;\n', '        emit AddToWhitelist(addr);\n', '    }\n', '\n', '    function removeFromWhitelist(\n', '        address addr\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        whitelist[addr] = false;\n', '        emit RemoveFromWhitelist(addr);\n', '    }\n', '}']