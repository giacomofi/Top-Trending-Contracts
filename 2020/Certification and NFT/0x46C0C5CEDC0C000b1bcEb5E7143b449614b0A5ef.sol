['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IPriceProvider {\n', '    function providerName() external view returns (string memory);\n', '    function update() external;\n', '    function lastPrice() external view returns (uint32);\n', '    function updateRequred() external view returns (bool);\n', '}\n', '\n', 'contract PriceManager is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct Price {\n', '        string provider; // ex. CoinGecko, CoinMarketCap, ...\n', '        uint64 timestamp;\n', '        uint32 price;\n', '        uint32 x;\n', '    }\n', '\n', '    address public tautrino;\n', '\n', '    IPriceProvider[] public providers;\n', '    Price[] public lastPrices;\n', '\n', '    uint32 public lastAvgPrice;\n', '    uint32[] public primeNumbers = [23, 41, 59, 67, 73, 89, 97]; // prime numbers to get random number\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the governance.\n', '     */\n', '    modifier onlyTautrino() {\n', '        require(tautrino == msg.sender, "tautrino!");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _tautrino Tautrino contract address.\n', '     */\n', '\n', '    constructor(address _tautrino) public Ownable() {\n', '        tautrino = _tautrino;\n', '    }\n', '\n', '    /**\n', '     * @dev Update tautrino.\n', '     * @param _tautrino The address of tautrino.\n', '     */\n', '\n', '    function setTautrino(address _tautrino) external onlyTautrino {\n', '        tautrino = _tautrino;\n', '    }\n', '\n', '    /**\n', '     * @dev Add new price provider.\n', '     * @param _provider The address of new provider.\n', '     */\n', '\n', '    function addProvider(address _provider) external onlyOwner {\n', '        IPriceProvider _newProvider = IPriceProvider(_provider);\n', '        if (_newProvider.updateRequred()) {\n', '            _newProvider.update();\n', '        }\n', '        providers.push(_newProvider);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove existing price provider.\n', '     * @param index Index of provider to remove.\n', '     */\n', '\n', '    function removeProvider(uint index) external onlyOwner {\n', '        require(index < providers.length, "index out of bounds");\n', '\n', '        if (index < providers.length - 1) {\n', '            providers[index] = providers[providers.length - 1];\n', '        }\n', '\n', '        providers.pop();\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate average price by the following formular.\n', '     * (price1 * x1 + price2 * x2 + price3 * x3 + ...) / (x1 + x2 + x3 + ...)\n', '     * price1, price2, price3, ... will be fetched from price providers.\n', '     * x1, x2, x3, ... will be generated by current timestamp and prime numbers.\n', '     *\n', '     * @return Calculated average price.\n', '     */\n', '\n', '    function averagePrice() external onlyTautrino returns (uint32) {\n', '        require(providers.length > 0, "No providers");\n', '\n', '        delete lastPrices;\n', '        uint _priceSum = 0;\n', '        uint _xSum = 0;\n', '\n', '        for (uint i = 0; i < providers.length; i++) {\n', '            if (providers[i].updateRequred()) {\n', '                providers[i].update();\n', '            }\n', '            uint32 _price = providers[i].lastPrice();\n', '            uint _x = uint(keccak256(abi.encodePacked(_price, block.coinbase, block.timestamp, block.difficulty, blockhash(block.number)))).mod(uint(primeNumbers[i])).add(1);\n', '\n', '            lastPrices.push(Price({\n', '                provider: providers[i].providerName(),\n', '                timestamp: uint64(block.timestamp),\n', '                price: _price,\n', '                x: uint32(_x)\n', '            }));\n', '            _priceSum = _priceSum.add(uint(_price).mul(_x));\n', '            _xSum = _xSum.add(_x);\n', '        }\n', '\n', '        require(_priceSum > 0, "Price is not updated yet");\n', '\n', '        lastAvgPrice = uint32(_priceSum.div(_xSum));\n', '        return lastAvgPrice;\n', '    }\n', '\n', '    /**\n', '     * @dev Add new prime number.\n', '     * @param _primeNumber New prime number to add.\n', '     */\n', '\n', '    function addPrimeNumber(uint32 _primeNumber) external onlyOwner {\n', '        primeNumbers.push(_primeNumber);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove existing prime number.\n', '     * @param index Index to remove.\n', '     */\n', '\n', '    function removePrimeNumber(uint index) external onlyOwner {\n', '        require(index < primeNumbers.length, "index out of bounds");\n', '\n', '        if (index < primeNumbers.length - 1) {\n', '            primeNumbers[index] = primeNumbers[primeNumbers.length - 1];\n', '        }\n', '\n', '        primeNumbers.pop();\n', '    }\n', '\n', '    /**\n', '     * @return Number of providers in providers list.\n', '     */\n', '\n', '    function providerSize() external view returns (uint) {\n', '        return providers.length;\n', '    }\n', '\n', '    /**\n', '     * @return Number of prices fetched.\n', '     */\n', '\n', '    function lastPricesSize() external view returns (uint) {\n', '        return lastPrices.length;\n', '    }\n', '}']