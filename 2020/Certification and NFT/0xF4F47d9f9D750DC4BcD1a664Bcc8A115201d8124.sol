['// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' */\n', 'contract Pausable is Context {\n', '    event Paused(address account);\n', '    event Shutdown(address account);\n', '    event Unpaused(address account);\n', '    event Open(address account);\n', '\n', '    bool public paused;\n', '    bool public stopEverything;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Pausable: paused");\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotShutdown() {\n', '        require(!stopEverything, "Pausable: shutdown");\n', '        _;\n', '    }\n', '\n', '    modifier whenShutdown() {\n', '        require(stopEverything, "Pausable: not shutdown");\n', '        _;\n', '    }\n', '\n', '    function _pause() internal virtual whenNotPaused {\n', '        paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    function _unpause() internal virtual whenPaused whenNotShutdown {\n', '        paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    function _shutdown() internal virtual whenNotShutdown {\n', '        stopEverything = true;\n', '        paused = true;\n', '        emit Shutdown(_msgSender());\n', '    }\n', '\n', '    function _open() internal virtual whenShutdown {\n', '        stopEverything = false;\n', '        emit Open(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IController.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IController {\n', '    function aaveProvider() external view returns (address);\n', '\n', '    function aaveReferralCode() external view returns (uint16);\n', '\n', '    function builderFee() external view returns (uint256);\n', '\n', '    function builderVault() external view returns (address);\n', '\n', '    function collateralToken(address pool) external view returns (address);\n', '\n', '    function fee(address) external view returns (uint256);\n', '\n', '    function feeCollector(address pool) external view returns (address);\n', '\n', '    function getPoolCount() external view returns (uint256);\n', '\n', '    function getPools() external view returns (address[] memory);\n', '\n', '    function highWater(address) external view returns (uint256);\n', '\n', '    function lowWater(address) external view returns (uint256);\n', '\n', '    function isPool(address pool) external view returns (bool);\n', '\n', '    function mcdDaiJoin() external view returns (address);\n', '\n', '    function mcdJug() external view returns (address);\n', '\n', '    function mcdManager() external view returns (address);\n', '\n', '    function mcdSpot() external view returns (address);\n', '\n', '    function pools(uint256 index) external view returns (address);\n', '\n', '    function poolStrategy(address pool) external view returns (address);\n', '\n', '    function poolCollateralManager(address pool) external view returns (address);\n', '\n', '    function rebalanceFriction(address) external view returns (uint256);\n', '\n', '    function treasuryPool() external view returns (address);\n', '\n', '    function uniswapRouter() external view returns (address);\n', '}\n', '\n', '// File: contracts/pools/PoolRewards.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract PoolRewards is ERC20, ReentrancyGuard {\n', '    IERC20 public immutable rewardsToken;\n', '    IController public immutable controller;\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;\n', '    uint256 public constant REWARD_DURATION = 7 days;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '    event RewardAdded(uint256 reward);\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     */\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        address _controller,\n', '        address _rewardsToken\n', '    ) public ERC20(name, symbol) {\n', '        controller = IController(_controller);\n', '        rewardsToken = IERC20(_rewardsToken);\n', '    }\n', '\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    modifier updateReward(address _account) {\n', '        _updateReward(_account);\n', '        _;\n', '    }\n', '\n', '    function notifyRewardAmount(uint256 reward) external updateReward(address(0)) {\n', '        require(_msgSender() == address(controller), "Not authorized");\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = reward.div(REWARD_DURATION);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = reward.add(leftover).div(REWARD_DURATION);\n', '        }\n', '\n', '        uint256 balance = rewardsToken.balanceOf(address(this));\n', '        require(rewardRate <= balance.div(REWARD_DURATION), "Reward too high");\n', '\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(REWARD_DURATION);\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    function getRewardForDuration() external view returns (uint256) {\n', '        return rewardRate.mul(REWARD_DURATION);\n', '    }\n', '\n', '    function getReward() public nonReentrant updateReward(_msgSender()) {\n', '        uint256 reward = rewards[_msgSender()];\n', '        if (reward != 0) {\n', '            rewards[_msgSender()] = 0;\n', '            rewardsToken.transfer(_msgSender(), reward);\n', '            emit RewardPaid(_msgSender(), reward);\n', '        }\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '        return\n', '            balanceOf(account)\n', '                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '                .div(1e18)\n', '                .add(rewards[account]);\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(\n', '                    totalSupply()\n', '                )\n', '            );\n', '    }\n', '\n', '    function _updateReward(address _account) private {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (_account != address(0)) {\n', '            rewards[_account] = earned(_account);\n', '            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/pools/PoolShareToken.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '// solhint-disable no-empty-blocks\n', 'abstract contract PoolShareToken is PoolRewards, Pausable {\n', '    IERC20 public immutable token;\n', '\n', "    /// @dev The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\n', '        "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"\n', '    );\n', '\n', '    /// @dev The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256(\n', '        "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"\n', '    );\n', '\n', '    bytes32 public immutable domainSeparator;\n', '\n', '    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\n', '    mapping(address => uint256) public nonces;\n', '    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n', '    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     */\n', '    constructor(\n', '        string memory _name,\n', '        string memory _symbol,\n', '        address _token,\n', '        address _controller,\n', '        address _rewardsToken\n', '    ) public PoolRewards(_name, _symbol, _controller, _rewardsToken) {\n', '        uint256 chainId;\n', '        require(_rewardsToken != _token, "Reward and collateral same");\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        token = IERC20(_token);\n', '        domainSeparator = keccak256(\n', '            abi.encode(\n', '                DOMAIN_TYPEHASH,\n', '                keccak256(bytes(_name)),\n', '                keccak256(bytes("1")),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Receives ERC20 token amount and grants new tokens to the sender\n', "     * depending on the value of each contract's share.\n", '     */\n', '    function deposit(uint256 amount)\n', '        external\n', '        virtual\n', '        nonReentrant\n', '        whenNotPaused\n', '        updateReward(_msgSender())\n', '    {\n', '        require(\n', '            _msgSender() == 0xdf826ff6518e609E4cEE86299d40611C148099d5 || totalSupply() < 50e18,\n', '            "Test limit reached"\n', '        );\n', '        _deposit(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns tokens and retuns deposited tokens or ETH value for those.\n', '     */\n', '    function withdraw(uint256 shares)\n', '        external\n', '        virtual\n', '        nonReentrant\n', '        whenNotShutdown\n', '        updateReward(_msgSender())\n', '    {\n', '        _withdraw(shares);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns tokens and retuns the collateral value of those.\n', '     */\n', '    function withdrawByFeeCollector(uint256 shares)\n', '        external\n', '        virtual\n', '        nonReentrant\n', '        whenNotShutdown\n', '        updateReward(_msgSender())\n', '    {\n', '        require(_msgSender() == _getFeeCollector(), "Not a fee collector.");\n', '        _withdrawByFeeCollector(shares);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate and returns price per share of the pool.\n', '     */\n', '    function getPricePerShare() external view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return convertFrom18(1e18);\n', '        }\n', '        return totalValue().mul(1e18).div(totalSupply());\n', '    }\n', '\n', '    /**\n', '     * @dev Convert to 18 decimals from token defined decimals. Default no conversion.\n', '     */\n', '    function convertTo18(uint256 amount) public virtual pure returns (uint256) {\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Convert from 18 decimals to token defined decimals. Default no conversion.\n', '     */\n', '    function convertFrom18(uint256 amount) public virtual pure returns (uint256) {\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored in the pool.\n', '     */\n', '    function tokensHere() public virtual view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns sum of value locked in other contract and value stored in the pool.\n', '     */\n', '    function totalValue() public virtual view returns (uint256) {\n', '        return tokensHere();\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called just before burning tokens. To be used i.e. if\n', '     * collateral is stored in a different contract and needs to be withdrawn.\n', '     */\n', '    function _beforeBurning(uint256 share) internal virtual {}\n', '\n', '    /**\n', '     * @dev Hook that is called just after burning tokens. To be used i.e. if\n', '     * collateral stored in a different/this contract needs to be transferred.\n', '     */\n', '    function _afterBurning(uint256 amount) internal virtual {}\n', '\n', '    /**\n', '     * @dev Hook that is called just before minting new tokens. To be used i.e.\n', '     * if the deposited amount is to be transferred to a different contract.\n', '     */\n', '    function _beforeMinting(uint256 amount) internal virtual {}\n', '\n', '    /**\n', '     * @dev Hook that is called just after minting new tokens. To be used i.e.\n', '     * if the minted token/share is to be transferred to a different contract.\n', '     */\n', '    function _afterMinting(uint256 amount) internal virtual {}\n', '\n', '    /**\n', '     * @dev Get withdraw fee for this pool\n', '     */\n', '    function _getFee() internal virtual view returns (uint256) {}\n', '\n', '    /**\n', '     * @dev Get fee collector address\n', '     */\n', '    function _getFeeCollector() internal virtual view returns (address) {}\n', '\n', '    /**\n', '     * @dev Calculate share based on share price and given amount.\n', '     */\n', '    function _calculateShares(uint256 amount) internal view returns (uint256) {\n', '        require(amount != 0, "amount is 0");\n', '\n', '        uint256 _totalSupply = totalSupply();\n', '        uint256 _totalValue = convertTo18(totalValue());\n', '        uint256 shares = (_totalSupply == 0 || _totalValue == 0)\n', '            ? amount\n', '            : amount.mul(_totalSupply).div(_totalValue);\n', '        return shares;\n', '    }\n', '\n', '    /**\n', '     * @dev Deposit incoming token and mint pool token i.e. shares.\n', '     */\n', '    function _deposit(uint256 amount) internal whenNotPaused {\n', '        uint256 shares = _calculateShares(convertTo18(amount));\n', '        _beforeMinting(amount);\n', '        _mint(_msgSender(), shares);\n', '        _afterMinting(amount);\n', '        emit Deposit(_msgSender(), shares, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Handle fee calculation and fee transfer to fee collector.\n', '     */\n', '    function _handleFee(uint256 shares) internal returns (uint256 _sharesAfterFee) {\n', '        if (_getFee() != 0) {\n', '            uint256 _fee = shares.mul(_getFee()).div(1e18);\n', '            _sharesAfterFee = shares.sub(_fee);\n', '            _transfer(_msgSender(), _getFeeCollector(), _fee);\n', '        } else {\n', '            _sharesAfterFee = shares;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Burns tokens and retuns the collateral value, after fee, of those.\n', '     */\n', '    function _withdraw(uint256 shares) internal whenNotShutdown {\n', '        require(shares != 0, "share is 0");\n', '        _beforeBurning(shares);\n', '        uint256 sharesAfterFee = _handleFee(shares);\n', '        uint256 amount = convertFrom18(\n', '            sharesAfterFee.mul(convertTo18(totalValue())).div(totalSupply())\n', '        );\n', '\n', '        _burn(_msgSender(), sharesAfterFee);\n', '        _afterBurning(amount);\n', '        emit Withdraw(_msgSender(), shares, amount);\n', '    }\n', '\n', '    function _withdrawByFeeCollector(uint256 shares) internal {\n', '        require(shares != 0, "Withdraw must be greater than 0");\n', '        _beforeBurning(shares);\n', '        uint256 amount = convertFrom18(shares.mul(convertTo18(totalValue())).div(totalSupply()));\n', '        _burn(_msgSender(), shares);\n', '        _afterBurning(amount);\n', '        emit Withdraw(_msgSender(), shares, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external {\n', '        require(deadline >= block.timestamp, "Expired");\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(\n', '                    abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline)\n', '                )\n', '            )\n', '        );\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0) && signatory == owner, "Invalid signature");\n', '        _approve(owner, spender, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/IUniswapV2Router01.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/IUniswapV2Router02.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    \n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IStrategy {\n', '    function rebalance() external;\n', '\n', '    function deposit(uint256 amount) external;\n', '\n', '    function beforeWithdraw() external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function isEmpty() external view returns (bool);\n', '\n', '    function isReservedToken(address _token) external view returns (bool);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function totalLocked() external view returns (uint256);\n', '\n', '    //Lifecycle functions\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '    function shutdown() external;\n', '\n', '    function open() external;\n', '}\n', '\n', '// File: contracts/pools/VTokenBase.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'abstract contract VTokenBase is PoolShareToken {\n', '    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        address _token,\n', '        address _controller,\n', '        address _rewardsToken\n', '    ) public PoolShareToken(name, symbol, _token, _controller, _rewardsToken) {\n', '        require(_controller != address(0), "Controller address is zero");\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(address(controller) == _msgSender(), "Caller is not the controller");\n', '        _;\n', '    }\n', '\n', '    function pause() external onlyController {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.pause();\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external onlyController {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.unpause();\n', '        _unpause();\n', '    }\n', '\n', '    function shutdown() external onlyController {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.shutdown();\n', '        _shutdown();\n', '    }\n', '\n', '    function open() external onlyController {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.open();\n', '        _open();\n', '    }\n', '\n', '    function approveToken(address spender) external virtual {\n', '        require(spender == controller.poolStrategy(address(this)), "Can not approve");\n', '        token.approve(spender, MAX_UINT_VALUE);\n', '        IERC20(IStrategy(spender).token()).approve(spender, MAX_UINT_VALUE);\n', '    }\n', '\n', '    function resetApproval(address spender) external virtual onlyController {\n', '        require(spender == controller.poolStrategy(address(this)), "Can not reset approval");\n', '        token.approve(spender, 0);\n', '        IERC20(IStrategy(spender).token()).approve(spender, 0);\n', '    }\n', '\n', '    function rebalance() external virtual {\n', '        require(!stopEverything || (_msgSender() == address(controller)), "Contract has shutdown");\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.rebalance();\n', '    }\n', '\n', '    function sweepErc20(address _erc20) external virtual {\n', '        _sweepErc20(_erc20);\n', '    }\n', '\n', '    function withdrawAll() external virtual onlyController {\n', '        _withdrawCollateral(uint256(-1));\n', '    }\n', '\n', '    function withdrawByFeeCollector(uint256 shares)\n', '        external\n', '        override\n', '        nonReentrant\n', '        whenNotShutdown\n', '        updateReward(_msgSender())\n', '    {\n', '        address feeCollector = _getFeeCollector();\n', '        require(\n', '            _msgSender() == feeCollector || _msgSender() == controller.poolStrategy(feeCollector),\n', '            "Not a fee collector."\n', '        );\n', '        _withdrawByFeeCollector(shares);\n', '    }\n', '\n', '    function tokenLocked() public virtual view returns (uint256) {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        return strategy.totalLocked();\n', '    }\n', '\n', '    function totalValue() public override view returns (uint256) {\n', '        return tokenLocked().add(tokensHere());\n', '    }\n', '\n', '    function _afterBurning(uint256 _amount) internal override {\n', '        uint256 balanceHere = tokensHere();\n', '        if (balanceHere < _amount) {\n', '            _withdrawCollateral(_amount.sub(balanceHere));\n', '            balanceHere = tokensHere();\n', '            _amount = balanceHere < _amount ? balanceHere : _amount;\n', '        }\n', '        token.transfer(_msgSender(), _amount);\n', '    }\n', '\n', '    function _beforeBurning(\n', '        uint256 /* shares */\n', '    ) internal override {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.beforeWithdraw();\n', '    }\n', '\n', '    function _beforeMinting(uint256 amount) internal override {\n', '        token.transferFrom(_msgSender(), address(this), amount);\n', '    }\n', '\n', '    function _depositCollateral(uint256 amount) internal virtual {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.deposit(amount);\n', '    }\n', '\n', '    function _getFee() internal override view returns (uint256) {\n', '        return controller.fee(address(this));\n', '    }\n', '\n', '    function _getFeeCollector() internal override view returns (address) {\n', '        return controller.feeCollector(address(this));\n', '    }\n', '\n', '    function _withdrawCollateral(uint256 amount) internal virtual {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        strategy.withdraw(amount);\n', '    }\n', '\n', '    function _sweepErc20(address _from) internal {\n', '        IStrategy strategy = IStrategy(controller.poolStrategy(address(this)));\n', '        require(\n', '            _from != address(token) &&\n', '                _from != address(this) &&\n', '                !strategy.isReservedToken(_from) &&\n', '                _from != address(rewardsToken),\n', '            "Not allowed to sweep"\n', '        );\n', '        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\n', '        uint256 amt = IERC20(_from).balanceOf(address(this));\n', '        IERC20(_from).approve(address(uniswapRouter), amt);\n', '        address[] memory path;\n', '        if (address(token) == WETH) {\n', '            path = new address[](2);\n', '            path[0] = _from;\n', '            path[1] = address(token);\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = _from;\n', '            path[1] = WETH;\n', '            path[2] = address(token);\n', '        }\n', '        uniswapRouter.swapExactTokensForTokens(amt, 1, path, address(this), now + 30);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/token/IToken.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface TokenLike {\n', '    function approve(address, uint256) external;\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function transfer(address, uint256) external;\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', '// File: contracts/pools/VETH.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract VUSDC is VTokenBase {\n', '    constructor(address _controller, address _rewardsToken)\n', '        public\n', '        VTokenBase(\n', '            "VUSDC Pool Test",\n', '            "VUSDCT",\n', '            0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\n', '            _controller,\n', '            _rewardsToken\n', '        )\n', '    {}\n', '\n', '    /**\n', '     * @dev Convert to 18 decimal from 8 decimal value.\n', '     */\n', '    function convertTo18(uint256 amount) public override pure returns (uint256) {\n', '        return amount.mul(10**12);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert to 8 decimal from 18 decimal value.\n', '     */\n', '    function convertFrom18(uint256 amount) public override pure returns (uint256) {\n', '        return amount.div(10**12);\n', '    }\n', '}']