['pragma solidity 0.5.17;\n', '\n', '\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender == newOwner);\n', '        _;\n', '    }\n', '    \n', '    function isOwner(address account) public view returns (bool) {\n', '        if(account == owner) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public onlyNewOwner {\n', '        emit OwnershipTransferred(owner, newOwner);        \n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () public {\n', '        _paused = false;\n', '    }    \n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'contract StakingDextoken is ReentrancyGuard, Pausable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    event Freeze(address indexed account);\n', '    event Unfreeze(address indexed account);\n', '    event TokenDeposit(address account, uint amount);\n', '    event TokenWithdraw(address account, uint amount);\n', '    event TokenClaim(address account, uint amount);\n', '    event RewardAdded(uint reward);\n', '\n', '    uint public periodFinish = 0;\n', '    uint public rewardRate = 0;\n', '    uint public lastUpdateTime;\n', '    uint public rewardPerTokenStored = 0;\n', '    uint public rewardRounds = 0;\n', '    uint public rewardsDuration = 0;\n', '    bool public inStaking = true;\n', '\n', '    // BAL beneficial address\n', '    address public beneficial = address(this);\n', '\n', '    // User award balance\n', '    mapping(address => uint) public rewards;\n', '    mapping(address => uint) public userRewardPerTokenPaid;\n', '\n', '    uint private _start;\n', '    uint private _end;\n', '\n', '    /// Staking token\n', '    IERC20 private _token0;\n', '\n', '    /// Reward token\n', '    IERC20 private _token1;\n', '\n', '    /// Total rewards\n', '    uint private _rewards;\n', '    uint private _remainingRewards;\n', '\n', '    /// Total amount of user staking tokens\n', '    uint private _totalSupply;\n', '\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    /// The staking users\n', '    mapping(address => bool) public stakeHolders;\n', '\n', '    /// The amount of tokens staked\n', '    mapping(address => uint) private _balances;\n', '\n', '    /// The remaining withdrawals of staked tokens\n', '    mapping(address => uint) internal withdrawalOf;  \n', '\n', '    /// The remaining withdrawals of reward tokens\n', '    mapping(address => uint) internal claimOf;\n', '\n', '    constructor (address token0, address token1) public {\n', '        require(token0 != address(0), "DEXToken: zero address");\n', '        require(token1 != address(0), "DEXToken: zero address");\n', '\n', '        _token0 = IERC20(token0);\n', '        _token1 = IERC20(token1);\n', '    }\n', '\n', '    modifier notFrozen(address _account) {\n', '        require(!frozenAccount[_account]);\n', '        _;\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function setBeneficial(address _beneficial) onlyOwner external {\n', '        require(_beneficial != address(this), "setBeneficial: can not send to self");\n', '        require(_beneficial != address(0), "setBeneficial: can not burn tokens");\n', '        beneficial = _beneficial;\n', '    }\n', '\n', '    /// Capture BAL tokens or any other tokens\n', '    function capture(address _token, uint amount) onlyOwner external {\n', '        require(_token != address(_token0), "capture: can not capture staking tokens");\n', '        require(_token != address(_token1), "capture: can not capture reward tokens");\n', '        require(beneficial != address(this), "capture: can not send to self");\n', '        require(beneficial != address(0), "capture: can not burn tokens");\n', '        IERC20(_token).safeTransfer(beneficial, amount);\n', '    }  \n', '\n', '    function lastTimeRewardApplicable() public view returns (uint) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint) {\n', '        if (getTotalStakes() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(lastUpdateTime)\n', '                    .mul(rewardRate)\n', '                    .mul(1e18)\n', '                    .div(getTotalStakes())\n', '            );\n', '    }\n', '\n', '    function earned(address account) public view returns (uint) {\n', '        return\n', '            balanceOf(account)\n', '                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '                .div(1e18)\n', '                .add(rewards[account]);\n', '    }\n', '\n', '    /// setup the staking round\n', '    function setRewardRound(uint round, uint reward, uint start, uint end) \n', '        external\n', '        onlyOwner    \n', '    {\n', '        require(block.timestamp > periodFinish, "setRewardRound: previous rewards period not complete");\n', '        require(rewardRounds < round, "setRewardRound: this round completed");\n', '\n', '        rewardRounds = round;\n', '        _rewards = reward;\n', '        _start = start;\n', '        _end = end;\n', '        rewardsDuration = _end.sub(_start);\n', '\n', '        inStaking = false;\n', '    }\n', '\n', '    /// launch the staking round\n', '    function notifyRewards()\n', '        external\n', '        onlyOwner\n', '        updateReward(address(0))\n', '    {\n', '        // staking started\n', '        if (inStaking == true) {\n', '            return;\n', '        }\n', '\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = _rewards.div(rewardsDuration);\n', '        } else {\n', '            uint remaining = periodFinish.sub(block.timestamp);\n', '            uint leftover = remaining.mul(rewardRate);\n', '            rewardRate = _rewards.add(leftover).div(rewardsDuration);\n', '            _remainingRewards = leftover;\n', '        }\n', '\n', '        // Ensure the provided reward amount is not more than the balance in the contract.\n', '        // This keeps the reward rate in the right range, preventing overflows due to\n', '        // very high values of rewardRate in the earned and rewardsPerToken functions;\n', '        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n', '        uint balance = _token1.balanceOf(address(this));\n', '        require(rewardRate <= balance.div(rewardsDuration), "notifyRewards: provided reward too high");\n', '\n', '        inStaking = true;\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(rewardsDuration);\n', '        emit RewardAdded(_rewards);\n', '    }\n', '\n', '    function addStakeholder(address _stakeholder) internal {\n', '        stakeHolders[_stakeholder] = true;\n', '    }\n', '\n', '    function removeStakeholder(address _stakeholder) internal {\n', '        stakeHolders[_stakeholder] = false;\n', '    }\n', '\n', '    /// Deposit staking tokens\n', '    function deposit(uint amount) \n', '        external \n', '        nonReentrant\n', '        whenNotPaused \n', '        notFrozen(msg.sender) \n', '        updateReward(msg.sender)\n', '    {\n', '        require(amount > 0, "deposit: cannot stake 0");\n', '        require(msg.sender != address(0), "withdraw: zero address");\n', '        require(_token0.balanceOf(msg.sender) >= amount, "deposit: insufficient balance");\n', '        _totalSupply = _totalSupply.add(amount);          \n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        addStakeholder(msg.sender);\n', '        _token0.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit TokenDeposit(msg.sender, amount);\n', '    }\n', '\n', '    /// Withdraw staked tokens\n', '    function withdraw(uint amount) \n', '        external \n', '        nonReentrant\n', '        whenNotPaused \n', '        notFrozen(msg.sender) \n', '        updateReward(msg.sender)\n', '    {\n', '        require(amount > 0, "withdraw: amount invalid");\n', '        require(msg.sender != address(0), "withdraw: zero address");\n', '        /// Not overflow\n', '        require(_balances[msg.sender] >= amount);\n', '        _totalSupply = _totalSupply.sub(amount);                \n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        /// Keep track user withdraws\n', '        withdrawalOf[msg.sender] = withdrawalOf[msg.sender].add(amount);  \n', '        if (_balances[msg.sender] == 0) {\n', '            removeStakeholder(msg.sender);   \n', '        }\n', '        _token0.safeTransfer(msg.sender, amount);\n', '        emit TokenWithdraw(msg.sender, amount);\n', '    }\n', '\n', '    /// Claim reward tokens\n', '    function claim() \n', '        external \n', '        nonReentrant\n', '        whenNotPaused \n', '        notFrozen(msg.sender) \n', '        updateReward(msg.sender)\n', '    {\n', '        require(msg.sender != address(0), "claim: zero address");        \n', '        require(block.timestamp > getEndTimestamp(), "claim: claim not open");   \n', '        require(block.timestamp > periodFinish, "claim: current staking period not complete");\n', '\n', '        uint reward = earned(msg.sender);\n', '        /// Not overflow        \n', '        require(_token1.balanceOf(address(this)) >= reward, "claim: insufficient balance");        \n', '        require(reward > 0, "claim: zero rewards");                \n', '\n', '        rewards[msg.sender] = 0;\n', '        claimOf[msg.sender] = reward;\n', '        _token1.safeTransfer(msg.sender, reward);\n', '        emit TokenClaim(msg.sender, reward);\n', '    }\n', '\n', '    function freezeAccount(address account) external onlyOwner returns (bool) {\n', '        require(!frozenAccount[account], "ERC20: account frozen");\n', '        frozenAccount[account] = true;\n', '        emit Freeze(account);\n', '        return true;\n', '    }\n', '\n', '    function unfreezeAccount(address account) external onlyOwner returns (bool) {\n', '        require(frozenAccount[account], "ERC20: account not frozen");\n', '        frozenAccount[account] = false;\n', '        emit Unfreeze(account);\n', '        return true;\n', '    }\n', '\n', '    function getWithdrawalOf(address _stakeholder) external view returns (uint) {\n', '        return withdrawalOf[_stakeholder];\n', '    }\n', '\n', '    function getClaimOf(address _stakeholder) external view returns (uint) {\n', '        return claimOf[_stakeholder];\n', '    }\n', '\n', '    /// Get remaining rewards of the time period\n', '    function remainingRewards() external view returns(uint) {\n', '        return _remainingRewards;\n', '    }\n', '\n', '    /// Retrieve the stake for a stakeholder\n', '    function stakeOf(address _stakeholder) external view returns (uint) {\n', '        return _balances[_stakeholder];\n', '    }\n', '\n', '    /// Retrieve the stake for a stakeholder\n', '    function rewardOf(address _stakeholder) external view returns (uint) {\n', '        return earned(_stakeholder);\n', '    }\n', '\n', '    /// Get total original rewards\n', '    function totalRewards() external view returns (uint) {\n', '        return _rewards;\n', '    }  \n', '\n', '    function getStartTimestamp() public view returns (uint) {\n', '        return _start;\n', '    }\n', '\n', '    function getEndTimestamp() public view returns (uint) {\n', '        return _end;\n', '    }\n', '\n', '    /// The total supply of all staked tokens\n', '    function getTotalStakes() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }    \n', '}']