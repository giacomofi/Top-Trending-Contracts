['// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.5.12 >0.4.13 >=0.4.23 >=0.5.12;\n', '\n', '////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'interface DSPauseAbstract {\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setDelay(uint256) external;\n', '    function plans(bytes32) external view returns (bool);\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function drop(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/MedianAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/median\n', 'interface MedianAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function age() external view returns (uint32);\n', '    function wat() external view returns (bytes32);\n', '    function bar() external view returns (uint256);\n', '    function orcl(address) external view returns (uint256);\n', '    function bud(address) external view returns (uint256);\n', '    function slot(uint8) external view returns (address);\n', '    function read() external view returns (uint256);\n', '    function peek() external view returns (uint256, bool);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/OsmAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/osm\n', 'interface OsmAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function stopped() external view returns (uint256);\n', '    function src() external view returns (address);\n', '    function hop() external view returns (uint16);\n', '    function zzz() external view returns (uint64);\n', '    function cur() external view returns (uint128, uint128);\n', '    function nxt() external view returns (uint128, uint128);\n', '    function bud(address) external view returns (uint256);\n', '    function stop() external;\n', '    function start() external;\n', '    function change(address) external;\n', '    function step(uint16) external;\n', '    function void() external;\n', '    function pass() external view returns (bool);\n', '    function poke() external;\n', '    function peek() external view returns (bytes32, bool);\n', '    function peep() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VowAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vow.sol\n', 'interface VowAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function vat() external view returns (address);\n', '    function flapper() external view returns (address);\n', '    function flopper() external view returns (address);\n', '    function sin(uint256) external view returns (uint256);\n', '    function Sin() external view returns (uint256);\n', '    function Ash() external view returns (uint256);\n', '    function wait() external view returns (uint256);\n', '    function dump() external view returns (uint256);\n', '    function sump() external view returns (uint256);\n', '    function bump() external view returns (uint256);\n', '    function hump() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, address) external;\n', '    function fess(uint256) external;\n', '    function flog(uint256) external;\n', '    function heal(uint256) external;\n', '    function kiss(uint256) external;\n', '    function flop() external returns (uint256);\n', '    function flap() external returns (uint256);\n', '    function cage() external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.5.12; */\n', '\n', '/* import "lib/dss-interfaces/src/dapp/DSPauseAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/MedianAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/OsmAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/VowAbstract.sol"; */\n', '\n', 'contract SpellAction {\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    //  against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.3/contracts.json\n', '\n', '    address constant MCD_VOW       = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\n', '    address constant ETHUSD_MEDIAN = 0x64DE91F5A373Cd4c28de3600cB34C7C6cE410C85;\n', '    address constant ETHUSD_OSM    = 0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763;\n', '\n', '    // spell-specific addresses\n', '\n', '    // B Protocol\n', '    address constant B_PROTOCOL_BUD_CONNECTOR = 0x2325aa20DEAa9770a978f1dc7C073589ffC79DC3;\n', '\n', '    // Decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '\n', '    // No rate chagnes this week.\n', '\n', '    function execute() external {\n', '        // Set the surplus buffer to 4,000,000 DAI\n', '        VowAbstract(MCD_VOW).file("hump", 4 * MILLION * RAD);\n', '\n', '        // Whitelist B Protocol to access the ETHUSD Medianizer\n', '        MedianAbstract(ETHUSD_MEDIAN).kiss(B_PROTOCOL_BUD_CONNECTOR);\n', '\n', '        // Whitelist B Protocol to access the ETHUSD OSM\n', '        OsmAbstract(ETHUSD_OSM).kiss(B_PROTOCOL_BUD_CONNECTOR);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/10f4fb51d9d6b292d7ffd3f852cbbc97bd920e84/governance/votes/Executive%20vote%20-%20October%2023%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-10-23 MakerDAO Executive Spell | Hash: 0x500dd161a37646be178bb4a33a1bbef78443f5e60aa660d6d3b480791326c964";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    modifier officeHours {\n', '        uint day = (now / 1 days + 3) % 7;\n', '        require(day < 5, "Can only be cast on a weekday");\n', '        uint hour = now / 1 hours % 24;\n', '        require(hour >= 14 && hour < 21, "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public /* officeHours */ {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']