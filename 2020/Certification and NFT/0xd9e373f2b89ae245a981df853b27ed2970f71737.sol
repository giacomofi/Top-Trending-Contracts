['// File: contracts\\SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address account, uint256 amount) external  returns (bool);\n', '    \n', '    function burnFrom(address account, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    \n', '}\n', '\n', '// File: contracts\\SafeDecimalMath.sol\n', '\n', 'pragma solidity >= 0.4.0 < 0.7.0;\n', '\n', '// Libraries\n', '\n', '\n', '\n', '// https://docs.synthetix.io/contracts/SafeDecimalMath\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    /* Number of decimal places in the representations. */\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    /* The number representing 1.0. */\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    /* The number representing 1.0 for higher fidelity numbers. */\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    /**\n', '     * @return Provides an interface to UNIT.\n', '     */\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return Provides an interface to PRECISE_UNIT.\n', '     */\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n', '     * decimals.\n', '     *\n', '     * @dev A unit factor is divided out after the product of x and y is evaluated,\n', '     * so that product must be less than 2**256. As this is an integer division,\n', '     * the internal division always rounds down. This helps save on gas. Rounding\n', '     * is more expensive on gas.\n', '     */\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of the specified precision unit.\n', '     *\n', '     * @dev The operands should be in the form of a the specified unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a precise unit.\n', '     *\n', '     * @dev The operands should be in the precise unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a standard unit.\n', '     *\n', '     * @dev The operands should be in the standard unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is a high\n', '     * precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n', '     * this is an integer division, the result is always rounded down.\n', '     * This helps save on gas. Rounding is more expensive on gas.\n', '     */\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Reintroduce the UNIT factor that will be divided out by y. */\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * decimal in the precision unit specified in the parameter.\n', '     *\n', '     * @dev y is divided after the product of x and the specified precision unit\n', '     * is evaluated, so the product of x and the specified precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * standard precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and the standard precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * high precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the high precision unit\n', '     * is evaluated, so the product of x and the high precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a standard decimal representation to a high precision one.\n', '     */\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a high precision decimal to a standard decimal representation.\n', '     */\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', '// File: contracts\\IEllaExchange.sol\n', '\n', 'pragma solidity >= 0.4.0 < 0.7.0;\n', '\n', '\n', '// Libraries\n', '\n', '\n', '/*\n', ' * @author Ella Finance\n', ' * @website https://ella.finance\n', ' * @email support@ella.finance\n', ' * Date: 18 Sept 2020\n', ' */\n', '\n', 'interface IEllaExchange {\n', '    using SafeMath for uint;\n', '    using SafeDecimalMath for uint;\n', '    event Saved(uint _amount, bool _isMarket, address _contract,  uint _time, address _owner, uint _duration);\n', '    event Withdrew(uint _amount, address _owner, address _to, address _contract, bool _isMarket, uint _time);\n', '    event Bought(uint _price, uint _amount, uint _value, address _market, bool isMarket, uint time);\n', '        event Rewarded(\n', '        address provider, \n', '        uint share, \n', '        bool _isMarket, \n', '        uint time\n', '        );\n', '    event PriceFeedChange(address _newAddress, address _exchange);\n', '    function save(uint _amount, bool _isMarket, uint _duration) external;\n', '    function save1(bool _isMarket, uint _duration) payable external;\n', '     \n', '    function withdraw(uint _amount,  address _to, bool _isMarket) external;\n', '    function withdraw1(address payable _to, uint _amount, bool _isMarket) external;\n', '     \n', '    function accountBalance(address _owner) external view returns (uint _market, uint _token, uint _ethers);\n', '     \n', '    \n', '    function swap(uint _amount) external;\n', '    function swapBase(uint _amount) external;\n', '    function swapBase2(uint _amount) external;\n', '    function swap1(uint _amount) external;\n', '    function swapBase1() payable external;\n', '    function swap2() payable external;\n', '    \n', '}\n', '\n', '// File: contracts\\IPriceConsumer.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: contracts\\TradingFees.sol\n', '\n', 'pragma solidity >=0.6.0;\n', 'interface FEES {\n', '      function getFees() external view returns (uint);\n', '      function getSystemCut() external view returns (uint);\n', '      function getFeesAddress() external view returns (address payable);\n', '}\n', '\n', '// File: contracts\\EllaExchange.sol\n', '\n', 'pragma solidity >= 0.4.0 < 0.7.0;\n', '\n', '\n', '\n', '\n', '/*\n', ' * @author Ella Finance\n', ' * @website https://ella.finance\n', ' * @email support@ella.finance\n', ' * Date: 18 Sept 2020\n', ' */\n', '\n', 'contract EllaExchange is IEllaExchange {\n', '   IERC20 MarketAddress;\n', '   IERC20 TokenAddress;\n', '   FEES  TradingFees;\n', '   bool private isEthereum;\n', '   mapping (bool => mapping(address => bool)) alreadyAProvider;\n', '    struct Providers{\n', '      address payable provider;\n', '    }\n', '    \n', '   Providers[] providers;\n', '   mapping(bool => Providers[]) listOfProviders;\n', '   \n', '   mapping(bool => mapping(address => uint)) savings;\n', '   mapping(address => uint) etherSavings;\n', '   mapping(bool => uint) pool;\n', '   uint etherpool;\n', '   address secretary;\n', '   uint baseFees_generated;\n', '   uint fees_generated;\n', '   \n', '   mapping(address => mapping(bool => uint)) userWithdrawalDate;\n', '   mapping(address => mapping(bool => uint)) withdrawalDate;\n', '   AggregatorV3Interface internal priceFeed;\n', '    constructor(address _marketAddress, address _tokenAddress, bool _isEthereum,  address _priceAddress, address _fees) public {\n', '     MarketAddress = IERC20(_marketAddress);  \n', '     TokenAddress  = IERC20(_tokenAddress);\n', '     TradingFees = FEES(_fees);\n', '     isEthereum = _isEthereum;\n', '     priceFeed = AggregatorV3Interface(_priceAddress);\n', '     secretary = msg.sender;\n', '    }\n', '\n', '    function description() external view returns (string memory){\n', '    return priceFeed.description();\n', '    }\n', '    \n', '    function decimals() external view returns (uint8){\n', '     return priceFeed.decimals();\n', '    }\n', '    \n', '  \n', '  function version() external view returns (uint256){\n', '    return priceFeed.version();\n', '  }\n', '  \n', '  function tokenPrice() public view returns(uint){\n', '        (\n', '        uint80 roundId, \n', '        int256 answer, \n', '        uint256 startedAt, \n', '        uint256 updatedAt, \n', '        uint80 answeredInRound\n', '      ) = priceFeed.latestRoundData();\n', '     uint multiplier = 10**uint(SafeMath.sub(18, priceFeed.decimals()));\n', '     uint _price = uint(uint(answer).mul(multiplier));\n', '     return _price;\n', '  }\n', '  \n', '     /**\n', '     * Restrict access to Secretary role\n', '     */\n', '    modifier onlySecretary() {\n', '        require(secretary == msg.sender, "Address is not Secretary of this exchange!");\n', '        _;\n', '    }\n', '    \n', '    \n', '    function changePriceFeedAddress(address _new_address) public onlySecretary {\n', '       priceFeed = AggregatorV3Interface(_new_address);\n', '       \n', '       emit PriceFeedChange(_new_address, address(this));\n', '    }\n', '    \n', '    \n', '    function save(uint _amount, bool _isMarket, uint _duration) public override{\n', '        require(_amount > 0, "Invalid amount");\n', '        require(_duration > 0, "Invalid duration");\n', '        require(setDuration(_duration, _isMarket) > 0, "Invalid duration");\n', '        IERC20 iERC20 = (_isMarket ? MarketAddress : TokenAddress);\n', '        require(iERC20.allowance(msg.sender, address(this)) >= _amount, "Insufficient allowance!");\n', '        iERC20.transferFrom(msg.sender, address(this), _amount);\n', '        savings[_isMarket][msg.sender] = savings[_isMarket][msg.sender].add(_amount);\n', '        pool[_isMarket] = pool[_isMarket].add(_amount);\n', '          if(alreadyAProvider[_isMarket][msg.sender] == false){\n', '              alreadyAProvider[_isMarket][msg.sender] = true;\n', '                listOfProviders[_isMarket].push(Providers(msg.sender));\n', '            }\n', '        emit Saved(_amount, _isMarket, address(this), now, msg.sender, setDuration(_duration, _isMarket));\n', '    }\n', '    \n', '    function withdraw(uint _percentage, address _to, bool _isMarket) public override{\n', '        require(_percentage > 0, "Invalid amount");\n', '        require(isDue(_isMarket, msg.sender), "Lock period is not over yet!");\n', '        IERC20 iERC20 = (_isMarket ? MarketAddress : TokenAddress);\n', '        uint _withdrawable = withdrawable(_percentage, msg.sender, _isMarket, false);\n', '        uint _deduct = _percentage.multiplyDecimalRound(savings[_isMarket][msg.sender]);\n', '        savings[_isMarket][msg.sender] = _deduct >= savings[_isMarket][msg.sender] ? 0 : savings[_isMarket][msg.sender].sub(_deduct);\n', '        pool[_isMarket] = _withdrawable >= pool[_isMarket] ? 0 : pool[_isMarket].sub(_withdrawable);\n', '        require(iERC20.transfer(_to, _withdrawable), "Withdrawal faild");\n', '        emit Withdrew(_withdrawable,msg.sender, _to, address(this),_isMarket, now);\n', '    }\n', '    \n', '    function withdrawable(uint _percentage, address _user, bool _isMarket, bool _isForEther) public view returns(uint){\n', '        uint pool_balance = _isForEther ? etherpool : pool[_isMarket];\n', '        uint contract_balance = _isForEther ? address(this).balance : (_isMarket ? MarketAddress.balanceOf(address(this)) : TokenAddress.balanceOf(address(this)));\n', '        uint get_user_pool_share = _isForEther ? etherSavings[_user].divideDecimalRound(pool_balance) : savings[_isMarket][_user].divideDecimalRound(pool_balance);\n', '        uint user_due = get_user_pool_share.multiplyDecimalRound(contract_balance);\n', '        uint _widthdrawable = _percentage.multiplyDecimalRound(user_due);\n', '        \n', '        return _widthdrawable;\n', '    }\n', '    \n', '    function save1(bool _isMarket, uint _duration) payable public override{\n', '        require(msg.value > 0, "Invalid amount");\n', '        require(_duration > 0, "Invalid duration");\n', '        require(setDuration(_duration, _isMarket) > 0, "Invalid duration");\n', '        require(isEthereum, "Can\'t save Ethereum in this contract");\n', '        etherSavings[msg.sender] = etherSavings[msg.sender].add(msg.value);\n', '        etherpool = etherpool.add(msg.value);\n', '         if(alreadyAProvider[_isMarket][msg.sender] == false){\n', '              alreadyAProvider[_isMarket][msg.sender] = true;\n', '                listOfProviders[_isMarket].push(Providers(msg.sender));\n', '            }\n', '        emit Saved(msg.value, _isMarket, address(this), now, msg.sender, setDuration(_duration, _isMarket));\n', '    }\n', '    \n', '    function withdraw1(address payable _to, uint _percentage, bool _isMarket) public override{\n', '        require(_percentage > 0, "Invalid amount");\n', '        require(isDue(_isMarket, msg.sender), "Lock period is not over yet!");\n', '        uint _withdrawable = withdrawable(_percentage, msg.sender, _isMarket, true);\n', '        _to.transfer(_withdrawable);\n', '        uint _deduct = _percentage.multiplyDecimalRound(etherSavings[msg.sender]);\n', '        etherSavings[msg.sender] = _deduct >= etherSavings[msg.sender] ? 0 : etherSavings[msg.sender].sub(_deduct);\n', '        etherpool = _withdrawable >= etherpool ? 0 : etherpool.sub(_withdrawable);\n', '        emit Withdrew(_withdrawable,msg.sender, _to, address(this), _isMarket, now);\n', '    }\n', '    \n', '    function accountBalance(address _owner) public override view returns (uint _market, uint _token, uint _ethers){\n', '        return(savings[true][_owner], savings[false][_owner], etherSavings[_owner]);\n', '    }\n', '    \n', '    \n', '    \n', '    function swapBase(uint _amount) public override{\n', '        require(!isEthereum, "Can\'t transact!");\n', '        require(_amount > 0, "Zero value provided!");\n', '        require(MarketAddress.allowance(msg.sender, address(this)) >= _amount, "Non-sufficient funds");\n', '        require(MarketAddress.transferFrom(msg.sender, address(this), _amount), "Fail to tranfer fund");\n', '        uint _price = tokenPrice();\n', '        uint _amountDue = _amount.divideDecimal(_price);\n', '        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\n', '        require(TokenAddress.balanceOf(address(this)) >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        fees_generated = fees_generated.add(fee.sub(systemCut));\n', '        require(TokenAddress.transfer(msg.sender, _finalAmount.sub(fee)), "Fail to tranfer fund");\n', '        require(TokenAddress.transfer(TradingFees.getFeesAddress(), systemCut), "Fail to tranfer fund");\n', '      \n', '        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\n', '       \n', '    }\n', '    \n', '    function swapBase2(uint _amount) public override{\n', '        require(isEthereum, "Can not transact!");\n', '        require(_amount > 0, "Zero value provided!");\n', '        require(MarketAddress.allowance(msg.sender, address(this)) >= _amount, "Non-sufficient funds");\n', '        require(MarketAddress.transferFrom(msg.sender, address(this), _amount), "Fail to tranfer fund");\n', '        address payable _reciever = msg.sender;\n', '        address payable _reciever2 = TradingFees.getFeesAddress();\n', '        uint _price = tokenPrice();\n', '        uint _amountDue = _amount.divideDecimal(_price);\n', '        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\n', '        \n', '        require(address(this).balance >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        fees_generated = fees_generated.add(fee.sub(systemCut));\n', '        \n', '        _reciever.transfer(_finalAmount.sub(fee));\n', '        _reciever2.transfer(systemCut);\n', '        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\n', '       \n', '    }\n', '    \n', '    \n', '     // swap base(eth) for token\n', '     function swapBase1() payable public override{\n', '        require(isEthereum, "Can\'t transact!");\n', '        require(msg.value > 0, "Zero value provided!");\n', '        uint _price = tokenPrice();\n', '        uint _amount = msg.value;\n', '        uint _amountDue = _amount.divideDecimal(_price);\n', '        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\n', '        require(TokenAddress.balanceOf(address(this)) >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        fees_generated = fees_generated.add(fee.sub(systemCut));\n', '        require(TokenAddress.transfer(msg.sender, _finalAmount.sub(fee)), "Fail to tranfer fund");\n', '        require(TokenAddress.transfer(TradingFees.getFeesAddress(), systemCut), "Fail to tranfer fund");\n', '        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\n', '        \n', '    }\n', '    \n', '    // (swap your token to base)\n', '    function swap(uint _amount) public override{\n', '        require(!isEthereum, "Can\'t transact!");\n', '        require(_amount > 0, "Zero value provided!");\n', '        require(TokenAddress.allowance(msg.sender, address(this)) >= _amount, "Non-sufficient funds");\n', '        require(TokenAddress.transferFrom(msg.sender, address(this), _amount), "Fail to tranfer fund");\n', '        uint _price = tokenPrice();\n', '        uint _amountDue = _amount.multiplyDecimal(_price);\n', '        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\n', '        require(MarketAddress.balanceOf(address(this)) >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\n', '        require(MarketAddress.transfer(msg.sender, _finalAmount.sub(fee)), "Fail to tranfer fund");\n', '        require(MarketAddress.transfer(TradingFees.getFeesAddress(), systemCut), "Fail to tranfer fund");\n', '        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\n', '    }\n', '    \n', '    //only call if eth is the base (swap your token to base)\n', '    function swap1(uint _amount) public override{\n', '        require(isEthereum, "Can\'t transact!");\n', '        require(_amount > 0, "Zero value");\n', '        require(TokenAddress.allowance(msg.sender, address(this)) >= _amount, "Non-sufficient funds");\n', '        require(TokenAddress.transferFrom(msg.sender, address(this), _amount), "Fail to tranfer fund");\n', '        address payable _reciever = msg.sender;\n', '        address payable _reciever2 = TradingFees.getFeesAddress();\n', '        uint _price = tokenPrice();\n', '        uint _amountDue = _price.multiplyDecimal(_amount);\n', '        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\n', '        require(address(this).balance >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '         uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\n', '        _reciever.transfer(_finalAmount.sub(fee));\n', '        _reciever2.transfer(systemCut);\n', '        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\n', '    }\n', '    \n', '      // When eth is the token\n', '      function swap2() payable public override{\n', '        require(isEthereum, "Can\'t transact!");\n', '        require(msg.value > 0, "Zero value provided!");\n', '        uint _price = tokenPrice();\n', '        uint _amount = msg.value;\n', '        uint _amountDue = _price.multiplyDecimal(_amount);\n', '        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\n', '        require(MarketAddress.balanceOf(address(this)) >= _finalAmount, "No fund to execute the trade");\n', '        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\n', '        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\n', '        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\n', '        require(MarketAddress.transfer(msg.sender, _finalAmount.sub(fee)), "Fail to tranfer fund");\n', '        require(MarketAddress.transfer(TradingFees.getFeesAddress(), systemCut), "Fail to tranfer fund");\n', '        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\n', '      }\n', '      \n', '      function setDuration(uint _duration, bool _isbase) internal returns(uint){\n', '          userWithdrawalDate[msg.sender][_isbase] == 0 ?  userWithdrawalDate[msg.sender][_isbase] = _duration : userWithdrawalDate[msg.sender][_isbase];\n', '          if(_duration == 30){\n', '              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(30 days);\n', '              return block.timestamp.add(30 days);\n', '          }else if(_duration == 60){\n', '              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(60 days);\n', '              return block.timestamp.add(60 days);\n', '          }else if(_duration == 90){\n', '              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(90 days);\n', '              return block.timestamp.add(90 days);\n', '          }else if(_duration == 365){\n', '              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(365 days);\n', '              return block.timestamp.add(365 days);\n', '          }else if(_duration == 140000){\n', '              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(140000 days);\n', '              return block.timestamp.add(140000 days);\n', '          }else{\n', '             return 0;\n', '          }\n', '      }\n', '    function isDue(bool _isbase, address _user) public view returns (bool) {\n', '        if (block.timestamp >= withdrawalDate[_user][_isbase])\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function shareFees(bool _isEth, bool _isMarket) public {\n', '           uint feesShared;\n', '           for (uint256 i = 0; i < listOfProviders[_isMarket].length; i++) {\n', '            address payable _provider = listOfProviders[_isMarket][i].provider;\n', '            uint userSavings =  _isEth ? etherSavings[_provider] : savings[_isMarket][_provider];\n', '            uint _pool = _isEth ? etherpool : pool[_isMarket];\n', '            uint total_fees_generated = _isMarket ? baseFees_generated : fees_generated;\n', '            uint share = userSavings.divideDecimal(_pool);\n', '            uint due = share.multiplyDecimal(total_fees_generated);\n', '            feesShared = feesShared.add(due);\n', '            require(total_fees_generated >= due, "No fees left for distribution");\n', '            _isEth ? _provider.transfer(due) : _isMarket  ? require(MarketAddress.transfer(_provider, due), "Fail to tranfer fund") : require(TokenAddress.transfer(_provider, due), "Fail to tranfer fund"); \n', '           \n', '           \n', '            emit Rewarded(_provider, due, _isMarket, now);\n', '           } \n', '           \n', '            _isMarket ? baseFees_generated = baseFees_generated.sub(feesShared) : fees_generated = fees_generated.sub(feesShared);\n', '        \n', '    }\n', '    \n', '    \n', '}\n', '\n', '// File: contracts\\IEllaExchangeService.sol\n', '\n', 'pragma solidity >= 0.4.0 < 0.7.0;\n', '\n', '\n', '\n', '\n', '/*\n', ' * @author Ella Finance\n', ' * @website https://ella.finance\n', ' * @email support@ella.finance\n', ' * Date: 18 Sept 2020\n', ' */\n', '\n', 'interface IEllaExchangeService {\n', '    using SafeMath for uint;\n', '      event RequestCreated(\n', '      address _creator,\n', '      uint _requestType,\n', '      uint _changeTo,\n', '      string _reason,\n', '      uint _positiveVote,\n', '      uint _negativeVote,\n', '      uint _powerUsed,\n', '      bool _stale,\n', '      uint _votingPeriod,\n', '      uint _requestID\n', '      );\n', '    event ExchangeCreated(address _exchange, string _market, address _base_address, address _token_address );\n', '    function createRequest(uint _requestType, uint _changeTo, string calldata _reason) external;\n', '    function createExchange(address _marketAddress, address _tokenAddress, bool _isEthereum, address _priceAddress, string calldata _market) external returns (address _exchange);\n', '      event VotedForRequest(\n', '        address _voter,\n', '        uint _requestID,\n', '        uint _positiveVote,\n', '        uint _negativeVote,\n', '        bool _accept\n', '    );\n', '    \n', '      event Refunded(uint amount, address voterAddress, uint _loanID, uint time);\n', '      event ApproveRequest(uint _requestID, bool _state, address _initiator);  \n', '      function validateRequest(uint _requestID) external;\n', '      function governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) external;\n', '    \n', '}\n', '\n', '// File: contracts\\EllaExchangeService.sol\n', '\n', 'pragma solidity >=0.4.0 <0.7.0;\n', '\n', '\n', '\n', '\n', '/*\n', ' * @author Ella Finance\n', ' * @website https://ella.finance\n', ' * @email support@ella.finance\n', ' * Date: 18 Sept 2020\n', ' */\n', '\n', 'contract EllaExchangeService is IEllaExchangeService {\n', '    mapping(bytes => bool) isListed;\n', '     struct Requests{\n', '      address payable creator;\n', '      uint requestType;\n', '      uint changeTo;\n', '      string reason;\n', '      uint positiveVote;\n', '      uint negativeVote;\n', '      uint powerUsed;\n', '      \n', '      bool stale;\n', '      uint votingPeriod;\n', '    }\n', '      struct Votters{\n', '      address payable voter;\n', '    }\n', '     Votters[] voters;\n', '    \n', '    Requests[] requests;\n', '    mapping(uint => Requests[]) listOfrequests;\n', '    mapping(uint => mapping(address => uint)) requestPower;\n', '    mapping(uint => bool) activeRequest;\n', '    uint private requestCreationPower;\n', '    mapping(uint => mapping(address => bool)) manageRequestVoters;\n', '    mapping(uint => Votters[]) activeRequestVoters;\n', '    uint trading_fee;\n', '    address payable trading_fee_address;\n', '    uint system_cut;\n', '    IERC20 ELLA;\n', '     /**\n', '     * Construct a new exchange Service\n', '     * @param _ELLA address of the ELLA ERC20 token\n', '     */\n', 'constructor(address _ELLA, uint _initial_fees, address payable _trading_fee_address, uint _system_cut, uint _requestCreationPower) public {\n', '    ELLA = IERC20(_ELLA);\n', '    trading_fee = _initial_fees;\n', '    trading_fee_address = _trading_fee_address;\n', '    system_cut = _system_cut;\n', '    requestCreationPower = _requestCreationPower;\n', '    }\n', '\n', '\n', 'function createExchange(\n', '        address _marketAddress, \n', '        address _tokenAddress, \n', '        bool _isEthereum,\n', '        address _priceAddress,\n', '        string memory _market\n', '        \n', '    ) public override returns (address _exchange) {\n', '      bytes memory market = bytes(_toLower(_market));\n', '      require(!isListed[market], "Market already listed");\n', '      EllaExchange exchange = new EllaExchange(address(_marketAddress), address(_tokenAddress), _isEthereum, address(_priceAddress), address(this));\n', '      _exchange = address(exchange);\n', '      isListed[market] = true;\n', '      emit ExchangeCreated(_exchange, _market, _marketAddress, _tokenAddress);\n', '    }\n', '    \n', '    \n', 'function getFees() public view returns(uint) {\n', '    return trading_fee;\n', '}\n', '\n', 'function getSystemCut() public view returns(uint) {\n', '    return system_cut;\n', '}\n', '\n', 'function getFeesAddress() public view returns(address) {\n', '    return trading_fee_address;\n', '}\n', '\n', '\n', '\n', '/// Request\n', 'function createRequest(uint _requestType, uint _changeTo, string memory _reason) public override{\n', '    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  "Invalid request type!");\n', '    require(!activeRequest[_requestType], "Another request is still active");\n', '   \n', '    require(ELLA.allowance(msg.sender, address(this)) >= requestCreationPower, "Insufficient ELLA allowance for vote!");\n', '    ELLA.transferFrom(msg.sender, address(this), requestCreationPower);\n', '    Requests memory _request = Requests({\n', '      creator: msg.sender,\n', '      requestType: _requestType,\n', '      changeTo: _changeTo,\n', '      reason: _reason,\n', '      positiveVote: 0,\n', '      negativeVote: 0,\n', '      powerUsed: requestCreationPower,\n', '      \n', '      stale: false,\n', '      votingPeriod: block.timestamp.add(4 days)\n', '    });\n', '    \n', '    requests.push(_request);\n', '    uint256 newRequestID = requests.length - 1;\n', '     Requests memory request = requests[newRequestID];\n', '    emit RequestCreated(\n', '      request.creator,\n', '      request.requestType,\n', '      request.changeTo,\n', '      request.reason,\n', '      request.positiveVote,\n', '      request.negativeVote,\n', '      request.powerUsed,\n', '      request.stale,\n', '      request.votingPeriod,\n', '      newRequestID\n', '      );\n', '}\n', '\n', '\n', 'function governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) public override{\n', '    Requests storage request = requests[_requestID];\n', '    require(request.votingPeriod >= block.timestamp, "Voting period ended");\n', '    require(_votePower > 0, "Power must be greater than zero!");\n', '    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  "Invalid request type!");\n', '   \n', '    require(ELLA.allowance(msg.sender, address(this)) >= _votePower, "Insufficient ELLA allowance for vote!");\n', '    ELLA.transferFrom(msg.sender, address(this), _votePower);\n', '    requestPower[_requestType][msg.sender] = requestPower[_requestType][msg.sender].add(_votePower);\n', '     \n', '     \n', '       if(_accept){\n', '            request.positiveVote = request.positiveVote.add(_votePower);\n', '        }else{\n', '            request.negativeVote = request.negativeVote.add(_votePower);  \n', '        }\n', '      \n', '           \n', '            if(manageRequestVoters[_requestID][msg.sender] == false){\n', '                manageRequestVoters[_requestID][msg.sender] = true;\n', '                activeRequestVoters[_requestID].push(Votters(msg.sender));\n', '            }\n', '       \n', '          \n', '    \n', '    emit VotedForRequest(msg.sender, _requestID, request.positiveVote, request.negativeVote, _accept);\n', '    \n', '}\n', '\n', 'function validateRequest(uint _requestID) public override{\n', '    Requests storage request = requests[_requestID];\n', '    //require(block.timestamp >= request.votingPeriod, "Voting period still active");\n', '    require(!request.stale, "This has already been validated");\n', '   \n', '   \n', '    if(request.requestType == 0){\n', '        if(request.positiveVote >= request.negativeVote){\n', '            trading_fee = request.changeTo;\n', '           \n', '            \n', '        }\n', '        \n', '    }else if(request.requestType == 1){\n', '        if(request.positiveVote >= request.negativeVote){\n', '            requestCreationPower = request.changeTo;\n', '           \n', '            \n', '            \n', '        }\n', '        \n', '    }else if(request.requestType == 2){\n', '        if(request.positiveVote >= request.negativeVote){\n', '            system_cut = request.changeTo;\n', '            \n', '            \n', '            \n', '        }\n', '        \n', '    }\n', '    else if(request.requestType == 3){\n', '        if(request.positiveVote >= request.negativeVote){\n', '            trading_fee_address = request.creator;\n', '            \n', '            \n', '            \n', '        }\n', '        \n', '    }\n', '   \n', '    request.stale = true;\n', '    \n', '   \n', '    \n', '    for (uint256 i = 0; i < activeRequestVoters[_requestID].length; i++) {\n', '           address voterAddress = activeRequestVoters[_requestID][i].voter;\n', '           uint amount = requestPower[request.requestType][voterAddress];\n', '           require(ELLA.transfer(voterAddress, amount), "Fail to refund voter");\n', '           requestPower[request.requestType][voterAddress] = 0;\n', '           emit Refunded(amount, voterAddress, _requestID, now);\n', '    }\n', '    \n', '     require(ELLA.transfer(request.creator, request.powerUsed), "Fail to transfer fund");\n', '    emit ApproveRequest(_requestID, request.positiveVote >= request.negativeVote, msg.sender);\n', '}\n', '\n', '\n', 'function _toLower(string memory str) internal pure returns (string memory) {\n', '        bytes memory bStr = bytes(str);\n', '        bytes memory bLower = new bytes(bStr.length);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            // Uppercase character...\n', '            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n', '                // So we add 32 to make it lowercase\n', '                bLower[i] = bytes1(uint8(bStr[i]) + 32);\n', '            } else {\n', '                bLower[i] = bStr[i];\n', '            }\n', '        }\n', '        return string(bLower);\n', '    }\n', '    \n', '\n', ' }']