['// File: @bancor/contracts-solidity/solidity/contracts/utility/interfaces/IOwned.sol\n', '\n', '// SPDX-License-Identifier: SEE LICENSE IN LICENSE\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'interface IOwned {\n', "    // this function isn't since the compiler emits automatically generated getter functions as external\n", '    function owner() external view returns (address);\n', '\n', '    function transferOwnership(address _newOwner) external;\n', '    function acceptOwnership() external;\n', '}\n', '\n', '// File: @bancor/contracts-solidity/solidity/contracts/utility/Owned.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', '  * @dev Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public override owner;\n', '    address public newOwner;\n', '\n', '    /**\n', '      * @dev triggered when the owner is updated\n', '      *\n', '      * @param _prevOwner previous owner\n', '      * @param _newOwner  new owner\n', '    */\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '      * @dev initializes a new Owned instance\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        _ownerOnly();\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _ownerOnly() internal view {\n', '        require(msg.sender == owner, "ERR_ACCESS_DENIED");\n', '    }\n', '\n', '    /**\n', '      * @dev allows transferring the contract ownership\n', '      * the new owner still needs to accept the transfer\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public override ownerOnly {\n', '        require(_newOwner != owner, "ERR_SAME_OWNER");\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '      * @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() override public {\n', '        require(msg.sender == newOwner, "ERR_ACCESS_DENIED");\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IExecutor.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IExecutor {\n', '    function execute(\n', '        uint256 _id,\n', '        uint256 _for,\n', '        uint256 _against,\n', '        uint256 _quorum\n', '    ) external;\n', '}\n', '\n', '// File: contracts/BancorGovernance.sol\n', '\n', '\n', '\n', '/*\n', '   ____            __   __        __   _\n', '  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n', ' _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n', '/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n', '     /___/\n', '\n', '* Synthetix: YFIRewards.sol\n', '*\n', '* Docs: https://docs.synthetix.io/\n', '*\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 Synthetix\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title The Bancor Governance Contract\n', ' *\n', ' * Big thanks to synthetix / yearn.finance for the initial version!\n', ' */\n', 'contract BancorGovernance is Owned {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint32 internal constant PPM_RESOLUTION = 1000000;\n', '\n', '    struct Proposal {\n', '        uint256 id;\n', '        mapping(address => uint256) votesFor;\n', '        mapping(address => uint256) votesAgainst;\n', '        uint256 totalVotesFor;\n', '        uint256 totalVotesAgainst;\n', '        uint256 start; // start timestmp;\n', '        uint256 end; // start + voteDuration\n', '        uint256 totalAvailableVotes;\n', '        uint256 quorum;\n', '        uint256 quorumRequired;\n', '        bool open;\n', '        bool executed;\n', '        address proposer;\n', '        address executor;\n', '        string hash;\n', '    }\n', '\n', '    /**\n', '     * @notice triggered when a new proposal is created\n', '     *\n', '     * @param _id       proposal id\n', '     * @param _start    voting start timestamp\n', '     * @param _duration voting duration\n', '     * @param _proposer proposal creator\n', '     * @param _executor contract that will exeecute the proposal once it passes\n', '     */\n', '    event NewProposal(\n', '        uint256 indexed _id,\n', '        uint256 _start,\n', '        uint256 _duration,\n', '        address _proposer,\n', '        address _executor\n', '    );\n', '\n', '    /**\n', '     * @notice triggered when voting on a proposal has ended\n', '     *\n', '     * @param _id               proposal id\n', '     * @param _for              number of votes for the proposal\n', '     * @param _against          number of votes against the proposal\n', '     * @param _quorumReached    true if quorum was reached, false otherwise\n', '     */\n', '    event ProposalFinished(\n', '        uint256 indexed _id,\n', '        uint256 _for,\n', '        uint256 _against,\n', '        bool _quorumReached\n', '    );\n', '\n', '    /**\n', '     * @notice triggered when a proposal was successfully executed\n', '     *\n', '     * @param _id       proposal id\n', '     * @param _executor contract that will execute the proposal once it passes\n', '     */\n', '    event ProposalExecuted(uint256 indexed _id, address indexed _executor);\n', '\n', '    /**\n', '     * @notice triggered when a stake has been added to the contract\n', '     *\n', '     * @param _user     staker address\n', '     * @param _amount   staked amount\n', '     */\n', '    event Staked(address indexed _user, uint256 _amount);\n', '\n', '    /**\n', '     * @notice triggered when a stake has been removed from the contract\n', '     *\n', '     * @param _user     staker address\n', '     * @param _amount   unstaked amount\n', '     */\n', '    event Unstaked(address indexed _user, uint256 _amount);\n', '\n', '    /**\n', '     * @notice triggered when a user votes on a proposal\n', '     *\n', '     * @param _id       proposal id\n', '     * @param _voter    voter addrerss\n', '     * @param _vote     true if the vote is for the proposal, false otherwise\n', '     * @param _weight   number of votes\n', '     */\n', '    event Vote(uint256 indexed _id, address indexed _voter, bool _vote, uint256 _weight);\n', '\n', '    /**\n', '     * @notice triggered when the quorum is updated\n', '     *\n', '     * @param _quorum   new quorum\n', '     */\n', '    event QuorumUpdated(uint256 _quorum);\n', '\n', '    /**\n', '     * @notice triggered when the minimum stake required to create a new proposal is updated\n', '     *\n', '     * @param _minimum  new minimum\n', '     */\n', '    event NewProposalMinimumUpdated(uint256 _minimum);\n', '\n', '    /**\n', '     * @notice triggered when the vote duration is updated\n', '     *\n', '     * @param _voteDuration new vote duration\n', '     */\n', '    event VoteDurationUpdated(uint256 _voteDuration);\n', '\n', '    /**\n', '     * @notice triggered when the vote lock duration is updated\n', '     *\n', '     * @param _duration new vote lock duration\n', '     */\n', '    event VoteLockDurationUpdated(uint256 _duration);\n', '\n', '    // PROPOSALS\n', '\n', '    // voting duration in seconds\n', '    uint256 public voteDuration = 3 days;\n', '    // vote lock in seconds\n', '    uint256 public voteLockDuration = 3 days;\n', '    // the fraction of vote lock used to lock voter to avoid rapid unstaking\n', '    uint256 public constant voteLockFraction = 10;\n', '    // minimum stake required to propose\n', '    uint256 public newProposalMinimum = 1e18;\n', '    // quorum needed for a proposal to pass, default = 20%\n', '    uint256 public quorum = 200000;\n', '    // sum of current total votes\n', '    uint256 public totalVotes;\n', '    // number of proposals\n', '    uint256 public proposalCount;\n', '    // proposals by id\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    // VOTES\n', '\n', '    // governance token used for votes\n', '    IERC20 public immutable govToken;\n', '\n', '    // lock duration for each voter stake by voter address\n', '    mapping(address => uint256) public voteLocks;\n', '    // number of votes for each user\n', '    mapping(address => uint256) private votes;\n', '\n', '    /**\n', '     * @notice used to initialize a new BancorGovernance contract\n', '     *\n', '     * @param _govToken token used to represents votes\n', '     */\n', '    constructor(IERC20 _govToken) public {\n', '        require(address(_govToken) != address(0), "ERR_NO_TOKEN");\n', '        govToken = _govToken;\n', '    }\n', '\n', '    /**\n', '     * @notice allows execution by staker only\n', '     */\n', '    modifier onlyStaker() {\n', '        require(votes[msg.sender] > 0, "ERR_NOT_STAKER");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice allows execution only when the proposal exists\n', '     *\n', '     * @param _id   proposal id\n', '     */\n', '    modifier proposalExists(uint256 _id) {\n', '        Proposal memory proposal = proposals[_id];\n', '        require(proposal.start > 0 && proposal.start < block.timestamp, "ERR_INVALID_ID");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice allows execution only when the proposal is still open\n', '     *\n', '     * @param _id   proposal id\n', '     */\n', '    modifier proposalOpen(uint256 _id) {\n', '        Proposal memory proposal = proposals[_id];\n', '        require(proposal.open, "ERR_NOT_OPEN");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice allows execution only when the proposal with given id is open\n', '     *\n', '     * @param _id   proposal id\n', '     */\n', '    modifier proposalNotEnded(uint256 _id) {\n', '        Proposal memory proposal = proposals[_id];\n', '        require(proposal.end >= block.timestamp, "ERR_ENDED");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice allows execution only when the proposal with given id has ended\n', '     *\n', '     * @param _id   proposal id\n', '     */\n', '    modifier proposalEnded(uint256 _id) {\n', '        Proposal memory proposal = proposals[_id];\n', '        require(proposal.end <= block.timestamp, "ERR_NOT_ENDED");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice verifies that a value is greater than zero\n', '     *\n', '     * @param _value    value to check for zero\n', '     */\n', '    modifier greaterThanZero(uint256 _value) {\n', '        require(_value > 0, "ERR_ZERO_VALUE");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the vote lock on the sender\n', '     *\n', '     * @param _proposalEnd  proposal end time\n', '     */\n', '    function updateVoteLock(uint256 _proposalEnd) private onlyStaker {\n', '        voteLocks[msg.sender] = Math.max(\n', '            voteLocks[msg.sender],\n', '            Math.max(_proposalEnd, voteLockDuration.add(block.timestamp))\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice does the common vote finalization\n', '     *\n', '     * @param _id the id of the proposal to vote\n', '     * @param _for is this vote for or against the proposal\n', '     */\n', '    function vote(uint256 _id, bool _for)\n', '        private\n', '        onlyStaker\n', '        proposalExists(_id)\n', '        proposalOpen(_id)\n', '        proposalNotEnded(_id)\n', '    {\n', '        Proposal storage proposal = proposals[_id];\n', '\n', '        if (_for) {\n', '            uint256 votesAgainst = proposal.votesAgainst[msg.sender];\n', '            // do we have against votes for this sender?\n', '            if (votesAgainst > 0) {\n', '                // yes, remove the against votes first\n', '                proposal.totalVotesAgainst = proposal.totalVotesAgainst.sub(votesAgainst);\n', '                proposal.votesAgainst[msg.sender] = 0;\n', '            }\n', '        } else {\n', '            // get against votes for this sender\n', '            uint256 votesFor = proposal.votesFor[msg.sender];\n', '            // do we have for votes for this sender?\n', '            if (votesFor > 0) {\n', '                proposal.totalVotesFor = proposal.totalVotesFor.sub(votesFor);\n', '                proposal.votesFor[msg.sender] = 0;\n', '            }\n', '        }\n', '\n', '        // calculate voting power in case voting against twice\n', '        uint256 voteAmount = votesOf(msg.sender).sub(\n', '            _for ? proposal.votesFor[msg.sender] : proposal.votesAgainst[msg.sender]\n', '        );\n', '\n', '        if (_for) {\n', '            // increase total for votes of the proposal\n', '            proposal.totalVotesFor = proposal.totalVotesFor.add(voteAmount);\n', '            // set for votes to the votes of the sender\n', '            proposal.votesFor[msg.sender] = votesOf(msg.sender);\n', '        } else {\n', '            // increase total against votes of the proposal\n', '            proposal.totalVotesAgainst = proposal.totalVotesAgainst.add(voteAmount);\n', '            // set against votes to the votes of the sender\n', '            proposal.votesAgainst[msg.sender] = votesOf(msg.sender);\n', '        }\n', '\n', '        // update total votes available on the proposal\n', '        proposal.totalAvailableVotes = totalVotes;\n', '        // recalculate quorum based on overall votes\n', '        proposal.quorum = calculateQuorumRatio(proposal);\n', '        // update vote lock\n', '        updateVoteLock(proposal.end);\n', '\n', '        // emit vote event\n', '        emit Vote(proposal.id, msg.sender, _for, voteAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice returns the quorum ratio of a proposal\n', '     *\n', '     * @param _proposal   proposal\n', '     * @return quorum ratio\n', '     */\n', '    function calculateQuorumRatio(Proposal memory _proposal) internal view returns (uint256) {\n', '        // calculate overall votes\n', '        uint256 totalProposalVotes = _proposal.totalVotesFor.add(_proposal.totalVotesAgainst);\n', '\n', '        return totalProposalVotes.mul(PPM_RESOLUTION).div(totalVotes);\n', '    }\n', '\n', '    /**\n', "     * @notice removes the caller's entire stake\n", '     */\n', '    function exit() external {\n', '        unstake(votesOf(msg.sender));\n', '    }\n', '\n', '    /**\n', '     * @notice returns the voting stats of a proposal\n', '     *\n', '     * @param _id   proposal id\n', '     * @return votes for ratio\n', '     * @return votes against ratio\n', '     * @return quorum ratio\n', '     */\n', '    function proposalStats(uint256 _id)\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        Proposal memory proposal = proposals[_id];\n', '\n', '        uint256 forRatio = proposal.totalVotesFor;\n', '        uint256 againstRatio = proposal.totalVotesAgainst;\n', '\n', '        // calculate overall total votes\n', '        uint256 totalProposalVotes = forRatio.add(againstRatio);\n', '        // calculate for votes ratio\n', '        forRatio = forRatio.mul(PPM_RESOLUTION).div(totalProposalVotes);\n', '        // calculate against votes ratio\n', '        againstRatio = againstRatio.mul(PPM_RESOLUTION).div(totalProposalVotes);\n', '        // calculate quorum ratio\n', '        uint256 quorumRatio = totalProposalVotes.mul(PPM_RESOLUTION).div(\n', '            proposal.totalAvailableVotes\n', '        );\n', '\n', '        return (forRatio, againstRatio, quorumRatio);\n', '    }\n', '\n', '    /**\n', '     * @notice returns the voting power of a given address\n', '     *\n', '     * @param _voter    voter address\n', '     * @return votes of given address\n', '     */\n', '    function votesOf(address _voter) public view returns (uint256) {\n', '        return votes[_voter];\n', '    }\n', '\n', '    /**\n', '     * @notice returns the voting power of a given address against a given proposal\n', '     *\n', '     * @param _voter    voter address\n', '     * @param _id       proposal id\n', '     * @return votes of given address against given proposal\n', '     */\n', '    function votesAgainstOf(address _voter, uint256 _id) public view returns (uint256) {\n', '        return proposals[_id].votesAgainst[_voter];\n', '    }\n', '\n', '    /**\n', '     * @notice returns the voting power of a given address for a given proposal\n', '     *\n', '     * @param _voter    voter address\n', '     * @param _id       proposal id\n', '     * @return votes of given address for given proposal\n', '     */\n', '    function votesForOf(address _voter, uint256 _id) public view returns (uint256) {\n', '        return proposals[_id].votesFor[_voter];\n', '    }\n', '\n', '    /**\n', '     * @notice updates the quorum needed for proposals to pass\n', '     *\n', '     * @param _quorum required quorum\n', '     */\n', '    function setQuorum(uint256 _quorum) public ownerOnly greaterThanZero(_quorum) {\n', '        // check quorum for not being above 100\n', '        require(_quorum <= PPM_RESOLUTION, "ERR_QUORUM_TOO_HIGH");\n', '\n', '        quorum = _quorum;\n', '        emit QuorumUpdated(_quorum);\n', '    }\n', '\n', '    /**\n', '     * @notice updates the minimum stake required to create a new proposal\n', '     *\n', '     * @param _minimum minimum stake\n', '     */\n', '    function setNewProposalMinimum(uint256 _minimum) public ownerOnly greaterThanZero(_minimum) {\n', '        require(_minimum <= govToken.totalSupply(), "ERR_EXCEEDS_TOTAL_SUPPLY");\n', '        newProposalMinimum = _minimum;\n', '        emit NewProposalMinimumUpdated(_minimum);\n', '    }\n', '\n', '    /**\n', '     * @notice updates the proposals voting duration\n', '     *\n', '     * @param _voteDuration vote duration\n', '     */\n', '    function setVoteDuration(uint256 _voteDuration)\n', '        public\n', '        ownerOnly\n', '        greaterThanZero(_voteDuration)\n', '    {\n', '        voteDuration = _voteDuration;\n', '        emit VoteDurationUpdated(_voteDuration);\n', '    }\n', '\n', '    /**\n', '     * @notice updates the post vote lock duration\n', '     *\n', '     * @param _duration new vote lock duration\n', '     */\n', '    function setVoteLockDuration(uint256 _duration) public ownerOnly greaterThanZero(_duration) {\n', '        voteLockDuration = _duration;\n', '        emit VoteLockDurationUpdated(_duration);\n', '    }\n', '\n', '    /**\n', '     * @notice creates a new proposal\n', '     *\n', '     * @param _executor the address of the contract that will execute the proposal after it passes\n', '     * @param _hash ipfs hash of the proposal description\n', '     */\n', '    function propose(address _executor, string memory _hash) public {\n', '        require(votesOf(msg.sender) > newProposalMinimum, "ERR_INSUFFICIENT_STAKE");\n', '\n', '        uint256 id = proposalCount;\n', '\n', '        // increment proposal count so next proposal gets the next higher id\n', '        proposalCount = proposalCount.add(1);\n', '\n', '        // create new proposal\n', '        Proposal memory proposal = Proposal({\n', '            id: id,\n', '            proposer: msg.sender,\n', '            totalVotesFor: 0,\n', '            totalVotesAgainst: 0,\n', '            start: block.timestamp,\n', '            end: voteDuration.add(block.timestamp),\n', '            executor: _executor,\n', '            hash: _hash,\n', '            totalAvailableVotes: totalVotes,\n', '            quorum: 0,\n', '            quorumRequired: quorum,\n', '            open: true,\n', '            executed: false\n', '        });\n', '\n', '        proposals[id] = proposal;\n', '\n', '        // lock proposer\n', '        updateVoteLock(proposal.end);\n', '\n', '        // emit proposal event\n', '        emit NewProposal(id, proposal.start, voteDuration, proposal.proposer, proposal.executor);\n', '    }\n', '\n', '    /**\n', '     * @notice executes a proposal\n', '     *\n', '     * @param _id id of the proposal to execute\n', '     */\n', '    function execute(uint256 _id) public proposalExists(_id) proposalEnded(_id) {\n', '        // check for executed status\n', '        require(!proposals[_id].executed, "ERR_ALREADY_EXECUTED");\n', '\n', '        // get voting info of proposal\n', '        (uint256 forRatio, uint256 againstRatio, uint256 quorumRatio) = proposalStats(_id);\n', '        // check proposal state\n', '        require(quorumRatio >= proposals[_id].quorumRequired, "ERR_NO_QUORUM");\n', '\n', '        // if the proposal is still open\n', '        if (proposals[_id].open) {\n', '            // tally votes\n', '            tallyVotes(_id);\n', '        }\n', '\n', '        // set executed\n', '        proposals[_id].executed = true;\n', '\n', '        // do execution on the contract to be executed\n', '        // note that this is a safe call as it was part of the proposal that was voted on\n', '        IExecutor(proposals[_id].executor).execute(_id, forRatio, againstRatio, quorumRatio);\n', '\n', '        // emit proposal executed event\n', '        emit ProposalExecuted(_id, proposals[_id].executor);\n', '    }\n', '\n', '    /**\n', '     * @notice tallies votes of proposal with given id\n', '     *\n', '     * @param _id id of the proposal to tally votes for\n', '     */\n', '    function tallyVotes(uint256 _id)\n', '        public\n', '        proposalExists(_id)\n', '        proposalOpen(_id)\n', '        proposalEnded(_id)\n', '    {\n', '        // get voting info of proposal\n', '        (uint256 forRatio, uint256 againstRatio, ) = proposalStats(_id);\n', '\n', '        // do we have a quorum?\n', '        bool quorumReached = proposals[_id].quorum >= proposals[_id].quorumRequired;\n', '        // close proposal\n', '        proposals[_id].open = false;\n', '\n', '        // emit proposal finished event\n', '        emit ProposalFinished(_id, forRatio, againstRatio, quorumReached);\n', '    }\n', '\n', '    /**\n', '     * @notice stakes vote tokens\n', '     *\n', '     * @param _amount amount of vote tokens to stake\n', '     */\n', '    function stake(uint256 _amount) public greaterThanZero(_amount) {\n', '        // increase vote power\n', '        votes[msg.sender] = votesOf(msg.sender).add(_amount);\n', '        // increase total votes\n', '        totalVotes = totalVotes.add(_amount);\n', '        // transfer tokens to this contract\n', '        govToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        // lock staker to avoid flashloans messing around with total votes\n', '        voteLocks[msg.sender] = Math.max(\n', '            voteLocks[msg.sender],\n', '            Math.max(voteLockDuration.div(voteLockFraction), 10 minutes).add(block.timestamp)\n', '        );\n', '\n', '        // emit staked event\n', '        emit Staked(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice unstakes vote tokens\n', '     *\n', '     * @param _amount amount of vote tokens to unstake\n', '     */\n', '    function unstake(uint256 _amount) public greaterThanZero(_amount) {\n', '        require(voteLocks[msg.sender] < block.timestamp, "ERR_LOCKED");\n', '\n', '        // reduce votes for user\n', '        votes[msg.sender] = votesOf(msg.sender).sub(_amount);\n', '        // reduce total votes\n', '        totalVotes = totalVotes.sub(_amount);\n', '        // transfer tokens back\n', '        govToken.safeTransfer(msg.sender, _amount);\n', '\n', '        // emit unstaked event\n', '        emit Unstaked(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice votes for a proposal\n', '     *\n', '     * @param _id id of the proposal to vote for\n', '     */\n', '    function voteFor(uint256 _id) public {\n', '        vote(_id, true);\n', '    }\n', '\n', '    /**\n', '     * @notice votes against a proposal\n', '     *\n', '     * @param _id id of the proposal to vote against\n', '     */\n', '    function voteAgainst(uint256 _id) public {\n', '        vote(_id, false);\n', '    }\n', '}']