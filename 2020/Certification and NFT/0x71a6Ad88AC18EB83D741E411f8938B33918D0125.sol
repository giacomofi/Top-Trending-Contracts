['/**\n', ' *Submitted for verification at Etherscan.io on 2020-11-03\n', '*/\n', '\n', '// File: contracts\\lib\\IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts\\lib\\SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call.value(weiValue)(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\SafeERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface UniswapPair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(\n', '        address indexed sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        address indexed to\n', '    );\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to)\n', '        external\n', '        returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts\\lib\\Babylonian.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint256 y) internal pure returns (uint256 z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint256 x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\FixedPoint.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n', '    uint256 private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', '        require(x != 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uq144x112 memory)\n', '    {\n', '        uint256 z;\n', '        require(\n', '            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\n', '            "FixedPoint: MULTIPLICATION_OVERFLOW"\n', '        );\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', '        require(self._x != 0, "FixedPoint: ZERO_RECIPROCAL");\n', '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\UniswapV2OracleLibrary.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2**32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(address pair, bool isToken0)\n', '        internal\n', '        view\n', '        returns (uint256 priceCumulative, uint32 blockTimestamp)\n', '    {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        ) = UniswapPair(pair).getReserves();\n', '        if (isToken0) {\n', '            priceCumulative = UniswapPair(pair).price0CumulativeLast();\n', '\n', '            // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '            if (blockTimestampLast != blockTimestamp) {\n', '                // subtraction overflow is desired\n', '                uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '                // addition overflow is desired\n', '                // counterfactual\n', '                priceCumulative +=\n', '                    uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\n', '                    timeElapsed;\n', '            }\n', '        } else {\n', '            priceCumulative = UniswapPair(pair).price1CumulativeLast();\n', '            // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '            if (blockTimestampLast != blockTimestamp) {\n', '                // subtraction overflow is desired\n', '                uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '                // addition overflow is desired\n', '                // counterfactual\n', '                priceCumulative +=\n', '                    uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\n', '                    timeElapsed;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\token\\YUANTokenStorage.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.5.15;\n', '\n', '\n', '// Storage for a YUAN token\n', 'contract YUANTokenStorage {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Guard variable for re-entrancy checks. Not currently used\n', '     */\n', '    bool internal _notEntered;\n', '\n', '    /**\n', '     * @notice EIP-20 token name for this token\n', '     */\n', '    string public name;\n', '\n', '    /**\n', '     * @notice EIP-20 token symbol for this token\n', '     */\n', '    string public symbol;\n', '\n', '    /**\n', '     * @notice EIP-20 token decimals for this token\n', '     */\n', '    uint8 public decimals;\n', '\n', '    /**\n', '     * @notice Governor for this contract\n', '     */\n', '    address public gov;\n', '\n', '    /**\n', '     * @notice Pending governance for this contract\n', '     */\n', '    address public pendingGov;\n', '\n', '    /**\n', '     * @notice Approved rebaser for this contract\n', '     */\n', '    address public rebaser;\n', '\n', '    /**\n', '     * @notice Approved migrator for this contract\n', '     */\n', '    address public migrator;\n', '\n', '    /**\n', '     * @notice Incentivizer address of YUAN protocol\n', '     */\n', '    address public incentivizer;\n', '\n', '    /**\n', '     * @notice Total supply of YUANs\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /**\n', '     * @notice Internal decimals used to handle scaling factor\n', '     */\n', '    uint256 public constant internalDecimals = 10**24;\n', '\n', '    /**\n', '     * @notice Used for percentage maths\n', '     */\n', '    uint256 public constant BASE = 10**18;\n', '\n', '    /**\n', "     * @notice Scaling factor that adjusts everyone's balances\n", '     */\n', '    uint256 public yuansScalingFactor;\n', '\n', '    mapping(address => uint256) internal _yuanBalances;\n', '\n', '    mapping(address => mapping(address => uint256)) internal _allowedFragments;\n', '\n', '    uint256 public initSupply;\n', '\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32\n', '        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '}\n', '\n', '// File: contracts\\token\\YUANGovernanceStorage.sol\n', '\n', 'pragma solidity 0.5.15;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/* Copyright 2020 Compound Labs, Inc.\n', '\n', 'Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n', '\n', '1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n', '\n', '2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n', '\n', '3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n', '\n', 'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n', '\n', 'contract YUANGovernanceStorage {\n', '    /// @notice A record of each accounts delegate\n', '    mapping(address => address) internal _delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint256 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping(address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\n', '        "EIP712Domain(string name,uint256 chainId,address verifyingContract)"\n', '    );\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\n', '        "Delegation(address delegatee,uint256 nonce,uint256 expiry)"\n', '    );\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '}\n', '\n', '// File: contracts\\token\\YUANTokenInterface.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.5.15;\n', '\n', '\n', '\n', 'contract YUANTokenInterface is YUANTokenStorage, YUANGovernanceStorage {\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(\n', '        address indexed delegator,\n', '        address indexed fromDelegate,\n', '        address indexed toDelegate\n', '    );\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(\n', '        address indexed delegate,\n', '        uint256 previousBalance,\n', '        uint256 newBalance\n', '    );\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are rebased\n', '     */\n', '    event Rebase(\n', '        uint256 epoch,\n', '        uint256 prevYuansScalingFactor,\n', '        uint256 newYuansScalingFactor\n', '    );\n', '\n', '    /*** Gov Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when pendingGov is changed\n', '     */\n', '    event NewPendingGov(address oldPendingGov, address newPendingGov);\n', '\n', '    /**\n', '     * @notice Event emitted when gov is changed\n', '     */\n', '    event NewGov(address oldGov, address newGov);\n', '\n', '    /**\n', '     * @notice Sets the rebaser contract\n', '     */\n', '    event NewRebaser(address oldRebaser, address newRebaser);\n', '\n', '    /**\n', '     * @notice Sets the migrator contract\n', '     */\n', '    event NewMigrator(address oldMigrator, address newMigrator);\n', '\n', '    /**\n', '     * @notice Sets the incentivizer contract\n', '     */\n', '    event NewIncentivizer(address oldIncentivizer, address newIncentivizer);\n', '\n', '    /* - ERC20 Events - */\n', '\n', '    /**\n', '     * @notice EIP20 Transfer event\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @notice EIP20 Approval event\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 amount\n', '    );\n', '\n', '    /* - Extra Events - */\n', '    /**\n', '     * @notice Tokens minted event\n', '     */\n', '    event Mint(address to, uint256 amount);\n', '\n', '    // Public functions\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function balanceOfUnderlying(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner_, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function maxScalingFactor() external view returns (uint256);\n', '\n', '    function yuanToFragment(uint256 yuan) external view returns (uint256);\n', '\n', '    function fragmentToYuan(uint256 value) external view returns (uint256);\n', '\n', '    /* - Governance Functions - */\n', '    function getPriorVotes(address account, uint256 blockNumber)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function delegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    function delegate(address delegatee) external;\n', '\n', '    function delegates(address delegator) external view returns (address);\n', '\n', '    function getCurrentVotes(address account) external view returns (uint256);\n', '\n', '    /* - Permissioned/Governance functions - */\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '\n', '    function rebase(\n', '        uint256 epoch,\n', '        uint256 indexDelta,\n', '        bool positive\n', '    ) external returns (uint256);\n', '\n', '    function _setRebaser(address rebaser_) external;\n', '\n', '    function _setIncentivizer(address incentivizer_) external;\n', '\n', '    function _setPendingGov(address pendingGov_) external;\n', '\n', '    function _acceptGov() external;\n', '}\n', '\n', '// File: contracts\\rebaser\\YUANRebaser.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity 0.5.15;\n', '// pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface BAL {\n', '    function gulp(address token) external;\n', '}\n', '\n', 'interface IPriceOracle {\n', '    function getPrice(address asset) external view returns (uint256);\n', '}\n', '\n', 'contract YUANRebaser {\n', '    using SafeMath for uint256;\n', '\n', '    modifier onlyGov() {\n', '        require(msg.sender == gov);\n', '        _;\n', '    }\n', '\n', '    struct Transaction {\n', '        bool enabled;\n', '        address destination;\n', '        bytes data;\n', '    }\n', '\n', '    struct UniVars {\n', '        uint256 yuansToUni;\n', '        uint256 amountFromReserves;\n', '        uint256 mintToReserves;\n', '    }\n', '\n', '    /// @notice an event emitted when a transaction fails\n', '    event TransactionFailed(\n', '        address indexed destination,\n', '        uint256 index,\n', '        bytes data\n', '    );\n', '\n', '    /// @notice an event emitted when maxSlippageFactor is changed\n', '    event NewMaxSlippageFactor(\n', '        uint256 oldSlippageFactor,\n', '        uint256 newSlippageFactor\n', '    );\n', '\n', '    /// @notice an event emitted when deviationThreshold is changed\n', '    event NewDeviationThreshold(\n', '        uint256 oldDeviationThreshold,\n', '        uint256 newDeviationThreshold\n', '    );\n', '\n', '    /**\n', '     * @notice Sets the treasury mint percentage of rebase\n', '     */\n', '    event NewRebaseMintPercent(\n', '        uint256 reserveIndex,\n', '        uint256 oldRebaseMintPerc,\n', '        uint256 newRebaseMintPerc\n', '    );\n', '\n', '    /**\n', '     * @notice Sets the reserve contract\n', '     */\n', '    event NewReserveContract(\n', '        uint256 reserveIndex,\n', '        address oldReserveContract,\n', '        address newReserveContract\n', '    );\n', '\n', '    /**\n', '     * @notice Sets the price oracle\n', '     */\n', '    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\n', '\n', '    /**\n', '     * @notice Sets the reserve contract\n', '     */\n', '    event TreasuryIncreased(\n', '        uint256 reservesAdded,\n', '        uint256 yuansSold,\n', '        uint256 yuansFromReserves,\n', '        uint256 yuansToReserves\n', '    );\n', '\n', '    /**\n', '     * @notice Event emitted when pendingGov is changed\n', '     */\n', '    event NewPendingGov(address oldPendingGov, address newPendingGov);\n', '\n', '    /**\n', '     * @notice Event emitted when gov is changed\n', '     */\n', '    event NewGov(address oldGov, address newGov);\n', '\n', '    // Stable ordering is not guaranteed.\n', '    Transaction[] public transactions;\n', '\n', '    /// @notice Governance address\n', '    address public gov;\n', '\n', '    /// @notice Pending Governance address\n', '    address public pendingGov;\n', '\n', '    /// @notice Spreads out getting to the target price\n', '    uint256 public rebaseLag;\n', '\n', '    /// @notice Peg target\n', '    uint256 public targetRate;\n', '\n', '    /// @notice Price Oracle of Peg target\n', '    address public priceOracle;\n', '\n', '    // If the current exchange rate is within this fractional distance from the target, no supply\n', '    // update is performed. Fixed point number--same format as the rate.\n', '    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\n', '    uint256 public deviationThreshold;\n', '\n', '    /// @notice More than this much time must pass between rebase operations.\n', '    uint256 public minRebaseTimeIntervalSec;\n', '\n', '    /// @notice Block timestamp of last rebase operation\n', '    uint256 public lastRebaseTimestampSec;\n', '\n', '    /// @notice The rebase window begins this many seconds into the minRebaseTimeInterval period.\n', '    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\n', '    uint256 public rebaseWindowOffsetSec;\n', '\n', '    /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.\n', '    uint256 public rebaseWindowLengthSec;\n', '\n', '    /// @notice The number of rebase cycles since inception\n', '    uint256 public epoch;\n', '\n', '    // rebasing is not active initially. It can be activated at T+12 hours from\n', '    // deployment time\n', '    ///@notice boolean showing rebase activation status\n', '    bool public rebasingActive;\n', '\n', '    /// @notice delays rebasing activation to facilitate liquidity\n', '    uint256 public constant rebaseDelay = 9 days;\n', '\n', '    /// @notice Time of TWAP initialization\n', '    uint256 public timeOfTWAPInit;\n', '\n', '    /// @notice YUAN token address\n', '    address public yuanAddress;\n', '\n', '    /// @notice reserve token\n', '    address public reserveToken;\n', '\n', '    /// @notice Reserves vault contracts\n', '    address[3] public reservesContracts;\n', '\n', '    /// @notice Reserves contract percentages\n', '    uint256[3] public rebaseMintPercs;\n', '\n', '    /// @notice pair for reserveToken <> YUAN\n', '    address public uniswap_pair;\n', '\n', '    /// @notice list of uniswap pairs to sync\n', '    address[] public uniSyncPairs;\n', '\n', '    /// @notice list of balancer pairs to gulp\n', '    address[] public balGulpPairs;\n', '\n', '    /// @notice last TWAP update time\n', '    uint32 public blockTimestampLast;\n', '\n', '    /// @notice last TWAP cumulative price;\n', '    uint256 public priceCumulativeLast;\n', '\n', '    /// @notice address to send part of treasury to\n', '    address public public_goods;\n', '\n', '    /// @notice percentage of treasury to send to public goods address\n', '    uint256 public public_goods_perc;\n', '\n', '    // Max slippage factor when buying reserve token. Magic number based on\n', '    // the fact that uniswap is a constant product. Therefore,\n', '    // targeting a % max slippage can be achieved by using a single precomputed\n', '    // number. i.e. 2.5% slippage is always equal to some f(maxSlippageFactor, reserves)\n', '    /// @notice the maximum slippage factor when buying reserve token\n', '    uint256 public maxSlippageFactor;\n', '\n', '    /// @notice Whether or not this token is first in uniswap YUAN<>Reserve pair\n', '    bool public isToken0;\n', '\n', '    uint256 public constant BASE = 10**18;\n', '\n', '    uint256 public constant MAX_SLIPPAGE_PARAM = 1180339 * 10**11; // max ~20% market impact\n', '\n', '    uint256 public constant MAX_MINT_PERC_PARAM = 25 * 10**16; // max 25% of rebase can go to treasury\n', '\n', '    constructor(\n', '        address yuanAddress_,\n', '        address reserveToken_,\n', '        address uniswap_factory,\n', '        address[3] memory reservesContracts_,\n', '        address public_goods_,\n', '        uint256 public_goods_perc_,\n', '        address priceOracle_\n', '    ) public {\n', '        minRebaseTimeIntervalSec = 12 hours;\n', '        rebaseWindowOffsetSec = 7200; // 10am/10pm UTC+8 rebases\n', '\n', '        (address token0, address token1) = sortTokens(\n', '            yuanAddress_,\n', '            reserveToken_\n', '        );\n', '\n', '        // used for interacting with uniswap\n', '        if (token0 == yuanAddress_) {\n', '            isToken0 = true;\n', '        } else {\n', '            isToken0 = false;\n', '        }\n', '        // uniswap YUAN<>Reserve pair\n', '        uniswap_pair = pairFor(uniswap_factory, token0, token1);\n', '\n', '        uniSyncPairs.push(uniswap_pair);\n', '\n', '        // Reserves contracts are mutable\n', '        reservesContracts[0] = reservesContracts_[0]; // Treasury\n', '        reservesContracts[1] = reservesContracts_[1]; // Liquidity\n', '        reservesContracts[2] = reservesContracts_[2]; // Lending\n', '\n', '        // Reserve token is not mutable. Must deploy a new rebaser to update it\n', '        reserveToken = reserveToken_;\n', '\n', '        yuanAddress = yuanAddress_;\n', '\n', '        public_goods = public_goods_;\n', '        public_goods_perc = public_goods_perc_;\n', '\n', '        // target 10% slippage\n', '        // 5.4%\n', '        maxSlippageFactor = 5409258 * 10**10;\n', '\n', '        // 1 YYCRV\n', '        targetRate = BASE;\n', '\n', '        // Price Oracle for peg target\n', '        priceOracle = priceOracle_;\n', '\n', '        // twice daily rebase, with targeting reaching peg in 5 days\n', '        rebaseLag = 10;\n', '\n', '        // Percentages for each reserve\n', '        rebaseMintPercs[0] = 10**17; // Treasury\n', '        rebaseMintPercs[1] = 0; // Liquidity\n', '        rebaseMintPercs[2] = 0; // Lending\n', '\n', '        // 5%\n', '        deviationThreshold = 5 * 10**16;\n', '\n', '        // 60 minutes\n', '        rebaseWindowLengthSec = 60 * 60;\n', '\n', '        // Changed in deployment scripts to facilitate protocol initiation\n', '        gov = msg.sender;\n', '    }\n', '\n', '    function removeUniPair(uint256 index) public onlyGov {\n', '        if (index >= uniSyncPairs.length) return;\n', '\n', '        for (uint256 i = index; i < uniSyncPairs.length - 1; i++) {\n', '            uniSyncPairs[i] = uniSyncPairs[i + 1];\n', '        }\n', '        uniSyncPairs.length--;\n', '    }\n', '\n', '    function removeBalPair(uint256 index) public onlyGov {\n', '        if (index >= balGulpPairs.length) return;\n', '\n', '        for (uint256 i = index; i < balGulpPairs.length - 1; i++) {\n', '            balGulpPairs[i] = balGulpPairs[i + 1];\n', '        }\n', '        balGulpPairs.length--;\n', '    }\n', '\n', '    /**\n', '    @notice Adds pairs to sync\n', '    *\n', '    */\n', '    function addSyncPairs(\n', '        address[] memory uniSyncPairs_,\n', '        address[] memory balGulpPairs_\n', '    ) public onlyGov {\n', '        for (uint256 i = 0; i < uniSyncPairs_.length; i++) {\n', '            uniSyncPairs.push(uniSyncPairs_[i]);\n', '        }\n', '\n', '        for (uint256 i = 0; i < balGulpPairs_.length; i++) {\n', '            balGulpPairs.push(balGulpPairs_[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    @notice Uniswap synced pairs\n', '    *\n', '    */\n', '    function getUniSyncPairs() public view returns (address[] memory) {\n', '        address[] memory pairs = uniSyncPairs;\n', '        return pairs;\n', '    }\n', '\n', '    /**\n', '    @notice Uniswap synced pairs\n', '    *\n', '    */\n', '    function getBalGulpPairs() public view returns (address[] memory) {\n', '        address[] memory pairs = balGulpPairs;\n', '        return pairs;\n', '    }\n', '\n', '    /**\n', '    @notice Updates slippage factor\n', '    @param maxSlippageFactor_ the new slippage factor\n', '    *\n', '    */\n', '    function setMaxSlippageFactor(uint256 maxSlippageFactor_) public onlyGov {\n', '        require(maxSlippageFactor_ < MAX_SLIPPAGE_PARAM);\n', '        uint256 oldSlippageFactor = maxSlippageFactor;\n', '        maxSlippageFactor = maxSlippageFactor_;\n', '        emit NewMaxSlippageFactor(oldSlippageFactor, maxSlippageFactor_);\n', '    }\n', '\n', '    /**\n', '    @notice Updates rebase mint percentage of specified reserve\n', '    @param reserveIndex_ the index of specified reserve\n', '    @param rebaseMintPerc_ the new rebase mint percentage\n', '    *\n', '    */\n', '    function setRebaseMintPerc(uint256 reserveIndex_, uint256 rebaseMintPerc_)\n', '        public\n', '        onlyGov\n', '    {\n', '        require(reserveIndex_ < 3);\n', '\n', '        uint256 oldRebaseMintPercs = rebaseMintPercs[reserveIndex_];\n', '        rebaseMintPercs[reserveIndex_] = rebaseMintPerc_;\n', '\n', '        require(\n', '            rebaseMintPercs[0] + rebaseMintPercs[1] + rebaseMintPercs[2] <\n', '                MAX_MINT_PERC_PARAM\n', '        );\n', '\n', '        emit NewRebaseMintPercent(\n', '            reserveIndex_,\n', '            oldRebaseMintPercs,\n', '            rebaseMintPerc_\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice Updates reserve contract\n', '    @param reserveIndex_ the index of specified reserve\n', '    @param reservesContract_ the new reserve contract\n', '    *\n', '    */\n', '    function setReserveContract(\n', '        uint256 reserveIndex_,\n', '        address reservesContract_\n', '    ) public onlyGov {\n', '        require(reserveIndex_ < 3);\n', '        address oldReservesContract = reservesContracts[reserveIndex_];\n', '        reservesContracts[reserveIndex_] = reservesContract_;\n', '        emit NewReserveContract(\n', '            reserveIndex_,\n', '            oldReservesContract,\n', '            reservesContract_\n', '        );\n', '    }\n', '\n', '    /** @notice sets the pendingGov\n', '     * @param pendingGov_ The address of the rebaser contract to use for authentication.\n', '     */\n', '    function _setPendingGov(address pendingGov_) external onlyGov {\n', '        address oldPendingGov = pendingGov;\n', '        pendingGov = pendingGov_;\n', '        emit NewPendingGov(oldPendingGov, pendingGov_);\n', '    }\n', '\n', '    /** @notice lets msg.sender accept governance\n', '     *\n', '     */\n', '    function _acceptGov() external {\n', '        require(msg.sender == pendingGov, "!pending");\n', '        address oldGov = gov;\n', '        gov = pendingGov;\n', '        pendingGov = address(0);\n', '        emit NewGov(oldGov, gov);\n', '    }\n', '\n', '    /** @notice Initializes TWAP start point, starts countdown to first rebase\n', '     *\n', '     */\n', '    function init_twap() public {\n', '        require(timeOfTWAPInit == 0, "already activated");\n', '        (\n', '            uint256 priceCumulative,\n', '            uint32 blockTimestamp\n', '        ) = UniswapV2OracleLibrary.currentCumulativePrices(\n', '            uniswap_pair,\n', '            isToken0\n', '        );\n', '        require(blockTimestamp > 0, "no trades");\n', '        blockTimestampLast = blockTimestamp;\n', '        priceCumulativeLast = priceCumulative;\n', '        timeOfTWAPInit = blockTimestamp;\n', '    }\n', '\n', '    /** @notice Activates rebasing\n', '     *   @dev One way function, cannot be undone, callable by anyone\n', '     */\n', '    function activate_rebasing() public {\n', '        require(timeOfTWAPInit > 0, "twap wasnt intitiated, call init_twap()");\n', '        // cannot enable prior to end of rebaseDelay\n', '        require(now >= timeOfTWAPInit + rebaseDelay, "!end_delay");\n', '\n', '        // cannot enable without reserve token price\n', '        uint256 price = IPriceOracle(priceOracle).getPrice(reserveToken);\n', '        require(price > 0, "Reserve token price is not available");\n', '\n', '        rebasingActive = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '     *\n', '     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\n', '     *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\n', '     *      and targetRate is 1e18\n', '     */\n', '    function rebase() public {\n', '        // EOA only or gov\n', '        require(msg.sender == tx.origin || msg.sender == gov);\n', '        // ensure rebasing at correct time\n', '        _inRebaseWindow();\n', '\n', '        // This comparison also ensures there is no reentrancy.\n', '        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now);\n', '\n', '        // Snap the rebase time to the start of this window.\n', '        lastRebaseTimestampSec = now.sub(now.mod(minRebaseTimeIntervalSec)).add(\n', '            rebaseWindowOffsetSec\n', '        );\n', '\n', '        epoch = epoch.add(1);\n', '\n', '        // get exchange rate uniswap TWAP * reserve token price;\n', '        uint256 exchangeRate = getExchangeRate();\n', '\n', '        // calculates % change to supply\n', '        (uint256 offPegPerc, bool positive) = computeOffPegPerc(exchangeRate);\n', '\n', '        uint256 indexDelta = offPegPerc;\n', '\n', '        // Apply the Dampening factor.\n', '        indexDelta = indexDelta.div(rebaseLag);\n', '\n', '        YUANTokenInterface yuan = YUANTokenInterface(yuanAddress);\n', '\n', '        if (positive) {\n', '            require(\n', '                yuan.yuansScalingFactor().mul(BASE.add(indexDelta)).div(BASE) <\n', '                    yuan.maxScalingFactor(),\n', '                "new scaling factor will be too big"\n', '            );\n', '        }\n', '\n', '        uint256 currSupply = yuan.totalSupply();\n', '\n', '        uint256[3] memory mintAmounts;\n', '        // reduce indexDelta to account for minting\n', '        if (positive) {\n', '            uint256 rebaseMintPerc = rebaseMintPercs[0] +\n', '                rebaseMintPercs[1] +\n', '                rebaseMintPercs[2];\n', '            uint256 mintPerc = indexDelta.mul(rebaseMintPerc).div(BASE);\n', '\n', '            mintAmounts[0] = currSupply\n', '                .mul(indexDelta.mul(rebaseMintPercs[0]).div(BASE))\n', '                .div(BASE);\n', '            mintAmounts[1] = currSupply\n', '                .mul(indexDelta.mul(rebaseMintPercs[1]).div(BASE))\n', '                .div(BASE);\n', '            mintAmounts[2] = currSupply\n', '                .mul(indexDelta.mul(rebaseMintPercs[2]).div(BASE))\n', '                .div(BASE);\n', '\n', '            indexDelta = indexDelta.sub(mintPerc);\n', '        }\n', '\n', '        // rebase\n', '        // ignore returned var\n', '        yuan.rebase(epoch, indexDelta, positive);\n', '\n', '        // perform actions after rebase\n', '        afterRebase(mintAmounts, offPegPerc);\n', '    }\n', '\n', '    function uniswapV2Call(\n', '        address sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        bytes memory data\n', '    ) public {\n', '        // enforce that it is coming from uniswap\n', '        require(msg.sender == uniswap_pair, "bad msg.sender");\n', '        // enforce that this contract called uniswap\n', '        require(sender == address(this), "bad origin");\n', '        UniVars memory uniVars = abi.decode(data, (UniVars));\n', '\n', '        YUANTokenInterface yuan = YUANTokenInterface(yuanAddress);\n', '\n', '        if (uniVars.amountFromReserves > 0) {\n', '            // transfer from reserves and mint to uniswap\n', '            yuan.transferFrom(\n', '                reservesContracts[0],\n', '                uniswap_pair,\n', '                uniVars.amountFromReserves\n', '            );\n', '            if (uniVars.amountFromReserves < uniVars.yuansToUni) {\n', '                // if the amount from reserves > yuansToUni, we have fully paid for the yCRV tokens\n', '                // thus this number would be 0 so no need to mint\n', '                yuan.mint(\n', '                    uniswap_pair,\n', '                    uniVars.yuansToUni.sub(uniVars.amountFromReserves)\n', '                );\n', '            }\n', '        } else {\n', '            // mint to uniswap\n', '            yuan.mint(uniswap_pair, uniVars.yuansToUni);\n', '        }\n', '\n', '        // mint unsold to mintAmount\n', '        if (uniVars.mintToReserves > 0) {\n', '            yuan.mint(reservesContracts[0], uniVars.mintToReserves);\n', '        }\n', '\n', '        // transfer reserve token to reserves\n', '        if (isToken0) {\n', '            if (public_goods != address(0) && public_goods_perc > 0) {\n', '                uint256 amount_to_public_goods = amount1\n', '                    .mul(public_goods_perc)\n', '                    .div(BASE);\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    reservesContracts[0],\n', '                    amount1.sub(amount_to_public_goods)\n', '                );\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    public_goods,\n', '                    amount_to_public_goods\n', '                );\n', '                emit TreasuryIncreased(\n', '                    amount1.sub(amount_to_public_goods),\n', '                    uniVars.yuansToUni,\n', '                    uniVars.amountFromReserves,\n', '                    uniVars.mintToReserves\n', '                );\n', '            } else {\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    reservesContracts[0],\n', '                    amount1\n', '                );\n', '                emit TreasuryIncreased(\n', '                    amount1,\n', '                    uniVars.yuansToUni,\n', '                    uniVars.amountFromReserves,\n', '                    uniVars.mintToReserves\n', '                );\n', '            }\n', '        } else {\n', '            if (public_goods != address(0) && public_goods_perc > 0) {\n', '                uint256 amount_to_public_goods = amount0\n', '                    .mul(public_goods_perc)\n', '                    .div(BASE);\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    reservesContracts[0],\n', '                    amount0.sub(amount_to_public_goods)\n', '                );\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    public_goods,\n', '                    amount_to_public_goods\n', '                );\n', '                emit TreasuryIncreased(\n', '                    amount0.sub(amount_to_public_goods),\n', '                    uniVars.yuansToUni,\n', '                    uniVars.amountFromReserves,\n', '                    uniVars.mintToReserves\n', '                );\n', '            } else {\n', '                SafeERC20.safeTransfer(\n', '                    IERC20(reserveToken),\n', '                    reservesContracts[0],\n', '                    amount0\n', '                );\n', '                emit TreasuryIncreased(\n', '                    amount0,\n', '                    uniVars.yuansToUni,\n', '                    uniVars.amountFromReserves,\n', '                    uniVars.mintToReserves\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    function buyReserveAndTransfer(uint256 mintAmount, uint256 offPegPerc)\n', '        internal\n', '    {\n', '        UniswapPair pair = UniswapPair(uniswap_pair);\n', '\n', '        YUANTokenInterface yuan = YUANTokenInterface(yuanAddress);\n', '\n', '        // get reserves\n', '        (uint256 token0Reserves, uint256 token1Reserves, ) = pair.getReserves();\n', '\n', '        // check if protocol has excess yuan in the reserve\n', '        uint256 excess = yuan.balanceOf(reservesContracts[0]);\n', '\n', '        uint256 tokens_to_max_slippage = uniswapMaxSlippage(\n', '            token0Reserves,\n', '            token1Reserves,\n', '            offPegPerc\n', '        );\n', '\n', '        UniVars memory uniVars = UniVars({\n', '            yuansToUni: tokens_to_max_slippage, // how many yuans uniswap needs\n', '            amountFromReserves: excess, // how much of yuansToUni comes from reserves\n', '            mintToReserves: 0 // how much yuans protocol mints to reserves\n', '        });\n', '\n', '        // tries to sell all mint + excess\n', '        // falls back to selling some of mint and all of excess\n', '        // if all else fails, sells portion of excess\n', '        // upon pair.swap, `uniswapV2Call` is called by the uniswap pair contract\n', '        if (isToken0) {\n', '            if (tokens_to_max_slippage > mintAmount.add(excess)) {\n', '                // we already have performed a safemath check on mintAmount+excess\n', '                // so we dont need to continue using it in this code path\n', '\n', '                // can handle selling all of reserves and mint\n', '                uint256 buyTokens = getAmountOut(\n', '                    mintAmount + excess,\n', '                    token0Reserves,\n', '                    token1Reserves\n', '                );\n', '                uniVars.yuansToUni = mintAmount + excess;\n', '                uniVars.amountFromReserves = excess;\n', '                // call swap using entire mint amount and excess; mint 0 to reserves\n', '                pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n', '            } else {\n', '                if (tokens_to_max_slippage > excess) {\n', '                    // uniswap can handle entire reserves\n', '                    uint256 buyTokens = getAmountOut(\n', '                        tokens_to_max_slippage,\n', '                        token0Reserves,\n', '                        token1Reserves\n', '                    );\n', '\n', '                    // swap up to slippage limit, taking entire yuan reserves, and minting part of total\n', '                    uniVars.mintToReserves = mintAmount.sub(\n', '                        (tokens_to_max_slippage - excess)\n', '                    );\n', '                    pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n', '                } else {\n', '                    // uniswap cant handle all of excess\n', '                    uint256 buyTokens = getAmountOut(\n', '                        tokens_to_max_slippage,\n', '                        token0Reserves,\n', '                        token1Reserves\n', '                    );\n', '                    uniVars.amountFromReserves = tokens_to_max_slippage;\n', '                    uniVars.mintToReserves = mintAmount;\n', '                    // swap up to slippage limit, taking excess - remainingExcess from reserves, and minting full amount\n', '                    // to reserves\n', '                    pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n', '                }\n', '            }\n', '        } else {\n', '            if (tokens_to_max_slippage > mintAmount.add(excess)) {\n', '                // can handle all of reserves and mint\n', '                uint256 buyTokens = getAmountOut(\n', '                    mintAmount + excess,\n', '                    token1Reserves,\n', '                    token0Reserves\n', '                );\n', '                uniVars.yuansToUni = mintAmount + excess;\n', '                uniVars.amountFromReserves = excess;\n', '                // call swap using entire mint amount and excess; mint 0 to reserves\n', '                pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n', '            } else {\n', '                if (tokens_to_max_slippage > excess) {\n', '                    // uniswap can handle entire reserves\n', '                    uint256 buyTokens = getAmountOut(\n', '                        tokens_to_max_slippage,\n', '                        token1Reserves,\n', '                        token0Reserves\n', '                    );\n', '\n', '                    // swap up to slippage limit, taking entire yuan reserves, and minting part of total\n', '                    uniVars.mintToReserves = mintAmount.sub(\n', '                        (tokens_to_max_slippage - excess)\n', '                    );\n', '                    // swap up to slippage limit, taking entire yuan reserves, and minting part of total\n', '                    pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n', '                } else {\n', '                    // uniswap cant handle all of excess\n', '                    uint256 buyTokens = getAmountOut(\n', '                        tokens_to_max_slippage,\n', '                        token1Reserves,\n', '                        token0Reserves\n', '                    );\n', '                    uniVars.amountFromReserves = tokens_to_max_slippage;\n', '                    uniVars.mintToReserves = mintAmount;\n', '                    // swap up to slippage limit, taking excess - remainingExcess from reserves, and minting full amount\n', '                    // to reserves\n', '                    pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniswapMaxSlippage(\n', '        uint256 token0,\n', '        uint256 token1,\n', '        uint256 offPegPerc\n', '    ) internal view returns (uint256) {\n', '        if (isToken0) {\n', '            if (offPegPerc >= 10**17) {\n', '                // cap slippage\n', '                return token0.mul(maxSlippageFactor).div(BASE);\n', '            } else {\n', '                // in the 5-10% off peg range, slippage is essentially 2*x (where x is percentage of pool to buy).\n', '                // all we care about is not pushing below the peg, so underestimate\n', '                // the amount we can sell by dividing by 3. resulting price impact\n', '                // should be ~= offPegPerc * 2 / 3, which will keep us above the peg\n', '                //\n', '                // this is a conservative heuristic\n', '                return token0.mul(offPegPerc).div(3 * BASE);\n', '            }\n', '        } else {\n', '            if (offPegPerc >= 10**17) {\n', '                return token1.mul(maxSlippageFactor).div(BASE);\n', '            } else {\n', '                return token1.mul(offPegPerc).div(3 * BASE);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '     *\n', '     * @param amountIn input amount of the asset\n', '     * @param reserveIn reserves of the asset being sold\n', '     * @param reserveOut reserves if the asset being purchased\n', '     */\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    function afterRebase(uint256[3] memory mintAmounts, uint256 offPegPerc)\n', '        internal\n', '    {\n', '        // update uniswap pairs\n', '        for (uint256 i = 0; i < uniSyncPairs.length; i++) {\n', '            UniswapPair(uniSyncPairs[i]).sync();\n', '        }\n', '\n', '        // update balancer pairs\n', '        for (uint256 i = 0; i < balGulpPairs.length; i++) {\n', '            BAL(balGulpPairs[i]).gulp(yuanAddress);\n', '        }\n', '\n', '        if (mintAmounts[0] > 0) {\n', '            buyReserveAndTransfer(mintAmounts[0], offPegPerc);\n', '        }\n', '\n', '        YUANTokenInterface yuan = YUANTokenInterface(yuanAddress);\n', '\n', '        if (mintAmounts[1] > 0) yuan.mint(reservesContracts[1], mintAmounts[1]);\n', '        if (mintAmounts[2] > 0) yuan.mint(reservesContracts[2], mintAmounts[2]);\n', '\n', '        // call any extra functions\n', '        for (uint256 i = 0; i < transactions.length; i++) {\n', '            Transaction storage t = transactions[i];\n', '            if (t.enabled) {\n', '                bool result = externalCall(t.destination, t.data);\n', '                if (!result) {\n', '                    emit TransactionFailed(t.destination, i, t.data);\n', '                    revert("Transaction Failed");\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates TWAP from uniswap\n', '     *\n', '     * @dev When liquidity is low, this can be manipulated by an end of block -> next block\n', '     *      attack. We delay the activation of rebases 12 hours after liquidity incentives\n', '     *      to reduce this attack vector. Additional there is very little supply\n', '     *      to be able to manipulate this during that time period of highest vuln.\n', '     */\n', '    function getTWAP() internal returns (uint256) {\n', '        (\n', '            uint256 priceCumulative,\n', '            uint32 blockTimestamp\n', '        ) = UniswapV2OracleLibrary.currentCumulativePrices(\n', '            uniswap_pair,\n', '            isToken0\n', '        );\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // no period check as is done in isRebaseWindow\n', '\n', '        // overflow is desired\n', '        uint256 priceAverage = uint256(\n', '            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        priceCumulativeLast = priceCumulative;\n', '        blockTimestampLast = blockTimestamp;\n', '\n', '        // BASE is on order of 1e18, which takes 2^60 bits\n', '        // multiplication will revert if priceAverage > 2^196\n', '        // (which it can because it overflows intentially)\n', '        if (priceAverage > uint192(-1)) {\n', '            // eat loss of precision\n', '            // effectively: (x / 2**112) * 1e18\n', '            return (priceAverage >> 112) * BASE;\n', '        }\n', '        // cant overflow\n', '        // effectively: (x * 1e18 / 2**112)\n', '        return (priceAverage * BASE) >> 112;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates exchange rate\n', '     *\n', '     */\n', '    function getExchangeRate() internal returns (uint256) {\n', '        uint256 price = IPriceOracle(priceOracle).getPrice(reserveToken);\n', '        require(price > 0, "Reserve token price can not be 0");\n', '\n', '        return getTWAP().mul(price).div(BASE);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates current TWAP from uniswap\n', '     *\n', '     */\n', '    function getCurrentTWAP() public view returns (uint256) {\n', '        (\n', '            uint256 priceCumulative,\n', '            uint32 blockTimestamp\n', '        ) = UniswapV2OracleLibrary.currentCumulativePrices(\n', '            uniswap_pair,\n', '            isToken0\n', '        );\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // no period check as is done in isRebaseWindow\n', '\n', '        // overflow is desired\n', '        uint256 priceAverage = uint256(\n', '            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        // BASE is on order of 1e18, which takes 2^60 bits\n', '        // multiplication will revert if priceAverage > 2^196\n', '        // (which it can because it overflows intentially)\n', '        if (priceAverage > uint192(-1)) {\n', '            // eat loss of precision\n', '            // effectively: (x / 2**112) * 1e18\n', '            return (priceAverage >> 112) * BASE;\n', '        }\n', '        // cant overflow\n', '        // effectively: (x * 1e18 / 2**112)\n', '        return (priceAverage * BASE) >> 112;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates current exchange rate\n', '     *\n', '     */\n', '    function getCurrentExchangeRate() public view returns (uint256) {\n', '        return\n', '            getCurrentTWAP()\n', '                .mul(IPriceOracle(priceOracle).getPrice(reserveToken))\n', '                .div(BASE);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\n', '     *         oracle is within this fractional distance from the targetRate, then no supply\n', '     *         modifications are made.\n', '     * @param deviationThreshold_ The new exchange rate threshold fraction.\n', '     */\n', '    function setDeviationThreshold(uint256 deviationThreshold_)\n', '        external\n', '        onlyGov\n', '    {\n', '        require(deviationThreshold > 0);\n', '        uint256 oldDeviationThreshold = deviationThreshold;\n', '        deviationThreshold = deviationThreshold_;\n', '        emit NewDeviationThreshold(oldDeviationThreshold, deviationThreshold_);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the rebase lag parameter.\n', '               It is used to dampen the applied supply adjustment by 1 / rebaseLag\n', '               If the rebase lag R, equals 1, the smallest value for R, then the full supply\n', '               correction is applied on each rebase cycle.\n', '               If it is greater than 1, then a correction of 1/R of is applied on each rebase.\n', '     * @param rebaseLag_ The new rebase lag parameter.\n', '     */\n', '    function setRebaseLag(uint256 rebaseLag_) external onlyGov {\n', '        require(rebaseLag_ > 0);\n', '        rebaseLag = rebaseLag_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the targetRate parameter.\n', '     * @param targetRate_ The new target rate parameter.\n', '     */\n', '    function setTargetRate(uint256 targetRate_) external onlyGov {\n', '        require(targetRate_ > 0);\n', '        targetRate = targetRate_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the the price oracle.\n', '     * @param priceOracle_ The new price oracle.\n', '     */\n', '    function setPriceOracle(address priceOracle_) external onlyGov {\n', '        require(priceOracle_ != address(0));\n', '        address oldPriceOracle = priceOracle;\n', '        priceOracle = priceOracle_;\n', '        emit NewPriceOracle(oldPriceOracle, priceOracle_);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the parameters which control the timing and frequency of\n', '     *         rebase operations.\n', '     *         a) the minimum time period that must elapse between rebase cycles.\n', '     *         b) the rebase window offset parameter.\n', '     *         c) the rebase window length parameter.\n', '     * @param minRebaseTimeIntervalSec_ More than this much time must pass between rebase\n', '     *        operations, in seconds.\n', '     * @param rebaseWindowOffsetSec_ The number of seconds from the beginning of\n', '              the rebase interval, where the rebase window begins.\n', '     * @param rebaseWindowLengthSec_ The length of the rebase window in seconds.\n', '     */\n', '    function setRebaseTimingParameters(\n', '        uint256 minRebaseTimeIntervalSec_,\n', '        uint256 rebaseWindowOffsetSec_,\n', '        uint256 rebaseWindowLengthSec_\n', '    ) external onlyGov {\n', '        require(minRebaseTimeIntervalSec_ > 0);\n', '        require(rebaseWindowOffsetSec_ < minRebaseTimeIntervalSec_);\n', '        require(\n', '            rebaseWindowOffsetSec_ + rebaseWindowLengthSec_ <\n', '                minRebaseTimeIntervalSec_\n', '        );\n', '        minRebaseTimeIntervalSec = minRebaseTimeIntervalSec_;\n', '        rebaseWindowOffsetSec = rebaseWindowOffsetSec_;\n', '        rebaseWindowLengthSec = rebaseWindowLengthSec_;\n', '    }\n', '\n', '    /**\n', '     * @return If the latest block timestamp is within the rebase time window it, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function inRebaseWindow() public view returns (bool) {\n', '        // rebasing is delayed until there is a liquid market\n', '        _inRebaseWindow();\n', '        return true;\n', '    }\n', '\n', '    function _inRebaseWindow() internal view {\n', '        // rebasing is delayed until there is a liquid market\n', '        require(rebasingActive, "rebasing not active");\n', '\n', '        require(\n', '            now.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec,\n', '            "too early"\n', '        );\n', '        require(\n', '            now.mod(minRebaseTimeIntervalSec) <\n', '                (rebaseWindowOffsetSec.add(rebaseWindowLengthSec)),\n', '            "too late"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Computes in % how far off market is from peg\n', '     */\n', '    function computeOffPegPerc(uint256 rate)\n', '        private\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        if (withinDeviationThreshold(rate)) {\n', '            return (0, false);\n', '        }\n', '\n', '        // indexDelta =  (rate - targetRate) / targetRate\n', '        if (rate > targetRate) {\n', '            return (rate.sub(targetRate).mul(BASE).div(targetRate), true);\n', '        } else {\n', '            return (targetRate.sub(rate).mul(BASE).div(targetRate), false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param rate The current exchange rate, an 18 decimal fixed point number.\n', '     * @return If the rate is within the deviation threshold from the target rate, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function withinDeviationThreshold(uint256 rate)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 absoluteDeviationThreshold = targetRate\n', '            .mul(deviationThreshold)\n', '            .div(10**18);\n', '\n', '        return\n', '            (rate >= targetRate &&\n', '                rate.sub(targetRate) < absoluteDeviationThreshold) ||\n', '            (rate < targetRate &&\n', '                targetRate.sub(rate) < absoluteDeviationThreshold);\n', '    }\n', '\n', '    /* - Constructor Helpers - */\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address token0,\n', '        address token1\n', '    ) internal pure returns (address pair) {\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    /* -- Rebase helpers -- */\n', '\n', '    /**\n', '     * @notice Adds a transaction that gets called for a downstream receiver of rebases\n', '     * @param destination Address of contract destination\n', '     * @param data Transaction data payload\n', '     */\n', '    function addTransaction(address destination, bytes calldata data)\n', '        external\n', '        onlyGov\n', '    {\n', '        transactions.push(\n', '            Transaction({enabled: true, destination: destination, data: data})\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction to remove.\n', '     *              Transaction ordering may have changed since adding.\n', '     */\n', '    function removeTransaction(uint256 index) external onlyGov {\n', '        require(index < transactions.length, "index out of bounds");\n', '\n', '        if (index < transactions.length - 1) {\n', '            transactions[index] = transactions[transactions.length - 1];\n', '        }\n', '\n', '        transactions.length--;\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction. Transaction ordering may have changed since adding.\n', '     * @param enabled True for enabled, false for disabled.\n', '     */\n', '    function setTransactionEnabled(uint256 index, bool enabled)\n', '        external\n', '        onlyGov\n', '    {\n', '        require(\n', '            index < transactions.length,\n', '            "index must be in range of stored tx list"\n', '        );\n', '        transactions[index].enabled = enabled;\n', '    }\n', '\n', '    /**\n', '     * @dev wrapper to call the encoded transactions on downstream consumers.\n', '     * @param destination Address of destination contract.\n', '     * @param data The encoded data payload.\n', '     * @return True on success\n', '     */\n', '    function externalCall(address destination, bytes memory data)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bool result;\n', '        assembly {\n', '            // solhint-disable-line no-inline-assembly\n', '            // "Allocate" memory for output\n', '            // (0x40 is where "free memory" pointer is stored by convention)\n', '            let outputAddress := mload(0x40)\n', '\n', '            // First 32 bytes are the padded length of data, so exclude that\n', '            let dataAddress := add(data, 32)\n', '\n', '            result := call(\n', '                // 34710 is the value that solidity is currently emitting\n', '                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\n', '                // + callValueTransferGas (9000) + callNewAccountGas\n', '                // (25000, in case the destination address does not exist and needs creating)\n', '                sub(gas, 34710),\n', '                destination,\n', '                0, // transfer value in wei\n', '                dataAddress,\n', '                mload(data), // Size of the input, in bytes. Stored in position 0 of the array.\n', '                outputAddress,\n', '                0 // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '\n', '    // Rescue tokens\n', '    function rescueTokens(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyGov returns (bool) {\n', '        // transfer to\n', '        SafeERC20.safeTransfer(IERC20(token), to, amount);\n', '    }\n', '}']