['// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is Initializable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\utils\\CalcUtils.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', 'library CalcUtils {\n', '     using SafeMath for uint256;\n', '\n', '    function normalizeAmount(address coin, uint256 amount) internal view returns(uint256) {\n', '        uint8 decimals = ERC20Detailed(coin).decimals();\n', '        if (decimals == 18) {\n', '            return amount;\n', '        } else if (decimals > 18) {\n', '            return amount.div(uint256(10)**(decimals-18));\n', '        } else if (decimals < 18) {\n', '            return amount.mul(uint256(10)**(18 - decimals));\n', '        }\n', '    }\n', '\n', '    function denormalizeAmount(address coin, uint256 amount) internal view returns(uint256) {\n', '        uint256 decimals = ERC20Detailed(coin).decimals();\n', '        if (decimals == 18) {\n', '            return amount;\n', '        } else if (decimals > 18) {\n', '            return amount.mul(uint256(10)**(decimals-18));\n', '        } else if (decimals < 18) {\n', '            return amount.div(uint256(10)**(18 - decimals));\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\common\\Base.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Base is Initializable, Context, Ownable {\n', '    address constant  ZERO_ADDRESS = address(0);\n', '\n', '    function initialize() public initializer {\n', '        Ownable.initialize(_msgSender());\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\core\\ModuleNames.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '/**\n', ' * @dev List of module names\n', ' */\n', 'contract ModuleNames {\n', '    // Pool Modules\n', '    string internal constant MODULE_ACCESS            = "access";\n', '    string internal constant MODULE_SAVINGS           = "savings";\n', '    string internal constant MODULE_INVESTING         = "investing";\n', '    string internal constant MODULE_STAKING_AKRO      = "staking";\n', '    string internal constant MODULE_STAKING_ADEL      = "stakingAdel";\n', '    string internal constant MODULE_DCA               = "dca";\n', '    string internal constant MODULE_REWARD            = "reward";\n', '    string internal constant MODULE_REWARD_DISTR      = "rewardDistributions";\n', '    string internal constant MODULE_VAULT             = "vault";\n', '\n', '    // Pool tokens\n', '    string internal constant TOKEN_AKRO               = "akro";    \n', '    string internal constant TOKEN_ADEL               = "adel";    \n', '\n', '    // External Modules (used to store addresses of external contracts)\n', '    string internal constant CONTRACT_RAY             = "ray";\n', '}\n', '\n', '// File: contracts\\common\\Module.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '/**\n', ' * Base contract for all modules\n', ' */\n', 'contract Module is Base, ModuleNames {\n', '    event PoolAddressChanged(address newPool);\n', '    address public pool;\n', '\n', '    function initialize(address _pool) public initializer {\n', '        Base.initialize();\n', '        setPool(_pool);\n', '    }\n', '\n', '    function setPool(address _pool) public onlyOwner {\n', '        require(_pool != ZERO_ADDRESS, "Module: pool address can\'t be zero");\n', '        pool = _pool;\n', '        emit PoolAddressChanged(_pool);        \n', '    }\n', '\n', '    function getModuleAddress(string memory module) public view returns(address){\n', '        require(pool != ZERO_ADDRESS, "Module: no pool");\n', '        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature("get(string)", module));\n', '        \n', '        //Forward error from Pool contract\n', '        if (!success) assembly {\n', '            revert(add(result, 32), result)\n', '        }\n', '\n', '        address moduleAddress = abi.decode(result, (address));\n', '        // string memory error = string(abi.encodePacked("Module: requested module not found - ", module));\n', '        // require(moduleAddress != ZERO_ADDRESS, error);\n', '        require(moduleAddress != ZERO_ADDRESS, "Module: requested module not found");\n', '        return moduleAddress;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\interfaces\\access\\IAccessModule.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IAccessModule {\n', '    enum Operation {\n', '        Deposit,\n', '        Withdraw\n', '    }\n', '    \n', '    /**\n', '     * @notice Check if operation is allowed\n', '     * @param operation Requested operation\n', '     * @param sender Sender of transaction\n', '     */\n', '    function isOperationAllowed(Operation operation, address sender) external view returns(bool);\n', '}\n', '\n', '// File: contracts\\modules\\access\\AccessChecker.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', 'contract AccessChecker is Module {\n', '    modifier operationAllowed(IAccessModule.Operation operation) {\n', '        IAccessModule am = IAccessModule(getModuleAddress(MODULE_ACCESS));\n', '        require(am.isOperationAllowed(operation, _msgSender()), "AccessChecker: operation not allowed");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\IDefiProtocol.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IDefiProtocol {\n', '    /**\n', '     * @notice Transfer tokens from sender to DeFi protocol\n', '     * @param token Address of token\n', '     * @param amount Value of token to deposit\n', '     * @return new balances of each token\n', '     */\n', '    function handleDeposit(address token, uint256 amount) external;\n', '\n', '    function handleDeposit(address[] calldata tokens, uint256[] calldata amounts) external;\n', '\n', '    /**\n', '     * @notice Transfer tokens from DeFi protocol to beneficiary\n', '     * @param token Address of token\n', '     * @param amount Denormalized value of token to withdraw\n', '     * @return new balances of each token\n', '     */\n', '    function withdraw(address beneficiary, address token, uint256 amount) external;\n', '\n', '    /**\n', '     * @notice Transfer tokens from DeFi protocol to beneficiary\n', '     * @param amounts Array of amounts to withdraw, in order of supportedTokens()\n', '     * @return new balances of each token\n', '     */\n', '    function withdraw(address beneficiary, uint256[] calldata amounts) external;\n', '\n', '    /**\n', '     * @notice Claim rewards. Reward tokens will be stored on protocol balance.\n', '     * @return tokens and their amounts received\n', '     */\n', '    function claimRewards() external returns(address[] memory tokens, uint256[] memory amounts);\n', '\n', '    /**\n', '     * @notice Withdraw reward tokens to user\n', '     * @dev called by SavingsModule\n', '     * @param token Reward token to withdraw\n', '     * @param user Who should receive tokens\n', '     * @param amount How many tokens to send\n', '     */\n', '    function withdrawReward(address token, address user, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     */\n', '    function balanceOf(address token) external returns(uint256);\n', '\n', '    /**\n', '     * @notice Balance of all tokens supported by protocol \n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     */\n', '    function balanceOfAll() external returns(uint256[] memory); \n', '\n', '    /**\n', '     * @notice Returns optimal proportions of underlying tokens \n', '     * to prevent fees on deposit/withdrawl if supplying multiple tokens\n', '     * @dev This function is not view because on some protocols \n', '     * (Compound, RAY with Compound oportunity) it may cause storage writes\n', '     * same as balanceOfAll()\n', '     */\n', '    function optimalProportions() external returns(uint256[] memory);\n', '\n', '    /**\n', '    * @notice Returns normalized (to USD with 18 decimals) summary balance \n', '    * of pool using all tokens in this protocol\n', '    */\n', '    function normalizedBalance() external returns(uint256);\n', '\n', '    function supportedTokens() external view returns(address[] memory);\n', '\n', '    function supportedTokensCount() external view returns(uint256);\n', '\n', '    function supportedRewardTokens() external view returns(address[] memory);\n', '\n', '    function isSupportedRewardToken(address token) external view returns(bool);\n', '\n', '    /**\n', "     * @notice Returns if this protocol can swap all it's normalizedBalance() to specified token\n", '     */\n', '    function canSwapToToken(address token) external view returns(bool);\n', '\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\MinterRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract MinterRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isMinter(sender)) {\n', '            _addMinter(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(_msgSender());\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Mintable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n', ' * which have permission to mint (create) new tokens as they see fit.\n', ' *\n', ' * At construction, the deployer of the contract is the only minter.\n', ' */\n', 'contract ERC20Mintable is Initializable, ERC20, MinterRole {\n', '    function initialize(address sender) public initializer {\n', '        MinterRole.initialize(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the {MinterRole}.\n', '     */\n', '    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Burnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'contract ERC20Burnable is Initializable, Context, ERC20 {\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_burnFrom}.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public {\n', '        _burnFrom(account, amount);\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\interfaces\\token\\IPoolTokenBalanceChangeRecipient.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IPoolTokenBalanceChangeRecipient {\n', '    function poolTokenBalanceChanged(address user) external; \n', '}\n', '\n', '// File: contracts\\modules\\token\\DistributionToken.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '//solhint-disable func-order\n', 'contract DistributionToken is ERC20, ERC20Mintable {\n', '    using SafeMath for uint256;\n', '    uint256 public constant DISTRIBUTION_AGGREGATION_PERIOD = 24*60*60;\n', '\n', '    event DistributionCreated(uint256 amount, uint256 totalSupply);\n', '    event DistributionsClaimed(address account, uint256 amount, uint256 fromDistribution, uint256 toDistribution);\n', '    event DistributionAccumulatorIncreased(uint256 amount);\n', '\n', '    struct Distribution {\n', '        uint256 amount;         // Amount of tokens being distributed during the event\n', '        uint256 totalSupply;    // Total supply before distribution\n', '    }\n', '\n', '    Distribution[] public distributions;                   // Array of all distributions\n', '    mapping(address => uint256) public nextDistributions;  // Map account to first distribution not yet processed\n', '\n', '    uint256 public nextDistributionTimestamp;      //Timestamp when next distribuition should be fired regardles of accumulated tokens\n', '    uint256 public distributionAccumulator;        //Tokens accumulated for next distribution\n', '\n', '    function distribute(uint256 amount) external onlyMinter {\n', '        distributionAccumulator = distributionAccumulator.add(amount);        \n', '        emit DistributionAccumulatorIncreased(amount);\n', '        _createDistributionIfReady();\n', '    }\n', '\n', '    function createDistribution() external onlyMinter {\n', '        require(distributionAccumulator > 0, "DistributionToken: nothing to distribute");\n', '        _createDistribution();\n', '    }\n', '\n', '    function claimDistributions(address account) external returns(uint256) {\n', '        _createDistributionIfReady();\n', '        uint256 amount = _updateUserBalance(account, distributions.length);\n', '        if (amount > 0) userBalanceChanged(account);\n', '        return amount;\n', '    }\n', '    \n', '    /**\n', '     * @notice Claims distributions and allows to specify how many distributions to process.\n', '     * This allows limit gas usage.\n', '     * One can do this for others\n', '     */\n', '    function claimDistributions(address account, uint256 toDistribution) external returns(uint256) {\n', '        require(toDistribution <= distributions.length, "DistributionToken: lastDistribution too hight");\n', '        require(nextDistributions[account] < toDistribution, "DistributionToken: no distributions to claim");\n', '        uint256 amount = _updateUserBalance(account, toDistribution);\n', '        if (amount > 0) userBalanceChanged(account);\n', '        return amount;\n', '    }\n', '\n', '    function claimDistributions(address[] calldata accounts) external {\n', '        _createDistributionIfReady();\n', '        for (uint256 i=0; i < accounts.length; i++){\n', '            uint256 amount = _updateUserBalance(accounts[i], distributions.length);\n', '            if (amount > 0) userBalanceChanged(accounts[i]);\n', '        }\n', '    }\n', '\n', '    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external {\n', '        require(toDistribution <= distributions.length, "DistributionToken: lastDistribution too hight");\n', '        for (uint256 i=0; i < accounts.length; i++){\n', '            uint256 amount = _updateUserBalance(accounts[i], toDistribution);\n', '            if (amount > 0) userBalanceChanged(accounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Full balance of account includes:\n', '     * - balance of tokens account holds himself (0 for addresses of locking contracts)\n', '     * - balance of tokens locked in contracts\n', '     * - tokens not yet claimed from distributions\n', '     */\n', '    function fullBalanceOf(address account) public view returns(uint256){\n', '        if (account == address(this)) return 0;  //Token itself only holds tokens for others\n', '        uint256 distributionBalance = distributionBalanceOf(account);\n', '        uint256 unclaimed = calculateClaimAmount(account);\n', '        return distributionBalance.add(unclaimed);\n', '    }\n', '\n', '    /**\n', '     * @notice How many tokens are not yet claimed from distributions\n', '     * @param account Account to check\n', '     * @return Amount of tokens available to claim\n', '     */\n', '    function calculateUnclaimedDistributions(address account) public view returns(uint256) {\n', '        return calculateClaimAmount(account);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates amount of tokens distributed to inital amount between startDistribution and nextDistribution\n', '     * @param fromDistribution index of first Distribution to start calculations\n', '     * @param toDistribution index of distribuition next to the last processed\n', '     * @param initialBalance amount of tokens before startDistribution\n', '     * @return amount of tokens distributed\n', '     */\n', '    function calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) public view returns(uint256) {\n', '        require(fromDistribution < toDistribution, "DistributionToken: startDistribution is too high");\n', '        require(toDistribution <= distributions.length, "DistributionToken: nextDistribution is too high");\n', '        return _calculateDistributedAmount(fromDistribution, toDistribution, initialBalance);\n', '    }\n', '\n', '    function nextDistribution() public view returns(uint256){\n', '        return distributions.length;\n', '    }\n', '\n', '    /**\n', '     * @notice Balance of account, which is counted for distributions\n', '     * It only represents already distributed balance.\n', '     * @dev This function should be overloaded to include balance of tokens stored in proposals\n', '     */\n', '    function distributionBalanceOf(address account) public view returns(uint256) {\n', '        return balanceOf(account);\n', '    }\n', '\n', '    /**\n', '     * @notice Total supply which is counted for distributions\n', '     * It only represents already distributed tokens\n', '     * @dev This function should be overloaded to exclude tokens locked in loans\n', '     */\n', '    function distributionTotalSupply() public view returns(uint256){\n', '        return totalSupply();\n', '    }\n', '\n', '    // Override functions that change user balance\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        _createDistributionIfReady();\n', '        _updateUserBalance(sender);\n', '        _updateUserBalance(recipient);\n', '        super._transfer(sender, recipient, amount);\n', '        userBalanceChanged(sender);\n', '        userBalanceChanged(recipient);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        _createDistributionIfReady();\n', '        _updateUserBalance(account);\n', '        super._mint(account, amount);\n', '        userBalanceChanged(account);\n', '    }\n', '    \n', '    function _burn(address account, uint256 amount) internal {\n', '        _createDistributionIfReady();\n', '        _updateUserBalance(account);\n', '        super._burn(account, amount);\n', '        userBalanceChanged(account);\n', '    }\n', '\n', '    function _updateUserBalance(address account) internal returns(uint256) {\n', '        return _updateUserBalance(account, distributions.length);\n', '    }\n', '\n', '    function _updateUserBalance(address account, uint256 toDistribution) internal returns(uint256) {\n', '        uint256 fromDistribution = nextDistributions[account];\n', '        if (fromDistribution >= toDistribution) return 0;\n', '        uint256 distributionAmount = calculateClaimAmount(account, toDistribution);\n', '        if (distributionAmount == 0) return 0;\n', '        nextDistributions[account] = toDistribution;\n', '        super._transfer(address(this), account, distributionAmount);\n', '        emit DistributionsClaimed(account, distributionAmount, fromDistribution, toDistribution);\n', '        return distributionAmount;\n', '    }\n', '\n', '    function _createDistributionIfReady() internal {\n', '        if (!isReadyForDistribution()) return;\n', '        _createDistribution();\n', '    }\n', '    \n', '    function _createDistribution() internal {\n', '        uint256 currentTotalSupply = distributionTotalSupply();\n', '        distributions.push(Distribution({\n', '            amount:distributionAccumulator,\n', '            totalSupply: currentTotalSupply\n', '        }));\n', '        super._mint(address(this), distributionAccumulator); //Use super because we overloaded _mint in this contract and need old behaviour\n', '        emit DistributionCreated(distributionAccumulator, currentTotalSupply);\n', '\n', '        // Clear data for next distribution\n', '        distributionAccumulator = 0;\n', '        nextDistributionTimestamp = now.sub(now % DISTRIBUTION_AGGREGATION_PERIOD).add(DISTRIBUTION_AGGREGATION_PERIOD);\n', '    }\n', '\n', '    /**\n', '     * @dev This is a placeholder, which may be overrided to notify other contracts of PTK balance change\n', '     */\n', '    function userBalanceChanged(address /*account*/) internal {\n', '    }\n', '\n', '    /**\n', "     * @notice Calculates amount of account's tokens to be claimed from distributions\n", '     */\n', '    function calculateClaimAmount(address account) internal view returns(uint256) {\n', '        if (nextDistributions[account] >= distributions.length) return 0;\n', '        return calculateClaimAmount(account, distributions.length);\n', '    }\n', '\n', '    function calculateClaimAmount(address account, uint256 toDistribution) internal view returns(uint256) {\n', '        assert(toDistribution <= distributions.length);\n', '        return _calculateDistributedAmount(nextDistributions[account], toDistribution, distributionBalanceOf(account));\n', '    }\n', '\n', '    function _calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) internal view returns(uint256) {\n', '        uint256 next = fromDistribution;\n', '        uint256 balance = initialBalance;\n', '        if (initialBalance == 0) return 0;\n', '        while (next < toDistribution) {\n', '            uint256 da = balance.mul(distributions[next].amount).div(distributions[next].totalSupply);\n', '            balance = balance.add(da);\n', '            next++;\n', '        }\n', '        return balance.sub(initialBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates if conditions for creating new distribution are met\n', '     */\n', '    function isReadyForDistribution() internal view returns(bool) {\n', '        return (distributionAccumulator > 0) && (now >= nextDistributionTimestamp);\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\token\\PoolToken.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PoolToken is Module, ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable, DistributionToken {\n', '\n', '    bool allowTransfers;\n', '\n', '    function initialize(address _pool, string memory poolName, string memory poolSymbol) public initializer {\n', '        Module.initialize(_pool);\n', '        ERC20Detailed.initialize(poolName, poolSymbol, 18);\n', '        ERC20Mintable.initialize(_msgSender());\n', '    }\n', '\n', '    function setAllowTransfers(bool _allowTransfers) public onlyOwner {\n', '        allowTransfers = _allowTransfers;\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides ERC20Burnable burnFrom to allow unlimited transfers by SavingsModule\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        if (isMinter(_msgSender())) {\n', '            //Skip decrease allowance\n', '            _burn(from, value);\n', '        }else{\n', '            super.burnFrom(from, value);\n', '        }\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        if( !allowTransfers && \n', '            (sender != address(this)) //transfers from *this* used for distributions\n', '        ){\n', '            revert("PoolToken: transfers between users disabled");\n', '        }\n', '        super._transfer(sender, recipient, amount);\n', '    } \n', '\n', '    function userBalanceChanged(address account) internal {\n', '        IPoolTokenBalanceChangeRecipient rewardDistrModule = IPoolTokenBalanceChangeRecipient(getModuleAddress(MODULE_REWARD_DISTR));\n', '        rewardDistrModule.poolTokenBalanceChanged(account);\n', '    }\n', '\n', '    function distributionBalanceOf(address account) public view returns(uint256) {\n', '        return (account == address(this))?0:super.distributionBalanceOf(account);\n', '    }\n', '\n', '    function distributionTotalSupply() public view returns(uint256) {\n', '        return super.distributionTotalSupply().sub(balanceOf(address(this))); \n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\modules\\savings\\RewardDistributions.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract RewardDistributions is Base, AccessChecker {\n', '    using SafeMath for uint256;\n', '\n', '    struct RewardTokenDistribution {\n', '        address poolToken;                  // PoolToken which holders will receive reward\n', '        uint256 totalShares;                // Total shares of PoolToken participating in this distribution\n', '        address[] rewardTokens;             // List of reward tokens being distributed \n', '        mapping(address=>uint256) amounts; \n', '    }\n', '\n', '    struct UserProtocolRewards {\n', '        mapping(address=>uint256) amounts;  // Maps address of reward token to amount beeing distributed\n', '    }\n', '    struct RewardBalance {\n', '        uint256 nextDistribution;\n', '        mapping(address => uint256) shares;     // Maps PoolToken to amount of user shares participating in distributions\n', '        mapping(address => UserProtocolRewards) rewardsByProtocol; //Maps PoolToken to ProtocolRewards struct (map of reward tokens to their balances);\n', '    }\n', '\n', '    RewardTokenDistribution[] rewardDistributions;\n', '    mapping(address=>RewardBalance) rewardBalances; //Mapping users to their RewardBalance\n', '\n', '    // function registeredPoolTokens() public view returns(address[] memory);\n', '\n', '    // function userRewards(address user, address protocol, address[] calldata rewardTokens) external view returns(uint256[] memory){\n', '    //     uint256[] memory amounts = new uint256[](rewardTokens.length);\n', '    //     RewardBalance storage rb = rewardBalances[user];\n', '    //     require(rb.nextDistribution == rewardDistributions.length, "RewardDistributions: rewards not calculated");\n', '    //     for(uint256 i=0; i<amounts.length; i++) {\n', '    //         address rt = rewardTokens[i];\n', '    //         amounts[i] = rb.rewardsByProtocol[protocol].amounts[rt];\n', '    //     }\n', '    //     return amounts;\n', '    // }\n', '\n', '    // function rewardBalanceOf(address user, address poolToken, address rewardToken) public view returns(uint256) {\n', '    //     RewardBalance storage rb = rewardBalances[user];\n', '    //     UserProtocolRewards storage upr = rb.rewardsByProtocol[poolToken];\n', '    //     uint256 balance = upr.amounts[rewardToken];\n', '    //     uint256 next = rb.nextDistribution;\n', '    //     while (next < rewardDistributions.length) {\n', '    //         RewardTokenDistribution storage d = rewardDistributions[next];\n', '    //         next++;\n', '\n', '    //         uint256 sh = rb.shares[d.poolToken];\n', '    //         if (sh == 0 || poolToken != d.poolToken) continue;\n', '    //         uint256 distrAmount = d.amounts[rewardToken];\n', '    //         balance = balance.add(distrAmount.mul(sh).div(d.totalShares));\n', '    //     }\n', '    //     return balance;\n', '    // }\n', '\n', '    function rewardBalanceOf(address user, address poolToken, address[] memory rewardTokens) public view returns(uint256[] memory) {\n', '        RewardBalance storage rb = rewardBalances[user];\n', '        UserProtocolRewards storage upr = rb.rewardsByProtocol[poolToken];\n', '        uint256[] memory balances = new uint256[](rewardTokens.length);\n', '        uint256 i;\n', '        for(i=0; i < rewardTokens.length; i++){\n', '            balances[i] = upr.amounts[rewardTokens[i]];\n', '        }\n', '        uint256 next = rb.nextDistribution;\n', '        while (next < rewardDistributions.length) {\n', '            RewardTokenDistribution storage d = rewardDistributions[next];\n', '            next++;\n', '\n', '            uint256 sh = rb.shares[d.poolToken];\n', '            if (sh == 0 || poolToken != d.poolToken) continue;\n', '            for(i=0; i < rewardTokens.length; i++){\n', '                uint256 distrAmount = d.amounts[rewardTokens[i]];\n', '                balances[i] = balances[i].add(distrAmount.mul(sh).div(d.totalShares));\n', '            }\n', '        }\n', '        return balances;\n', '    }\n', '\n', '\n', '    // /**\n', '    // * @notice Updates user balance\n', '    // * @param user User address \n', '    // */\n', '    // function updateRewardBalance(address user) public {\n', '    //     _updateRewardBalance(user, rewardDistributions.length);\n', '    // }\n', '\n', '    // /**\n', '    // * @notice Updates user balance\n', '    // * @param user User address \n', '    // * @param toDistribution Index of distribution next to the last one, which should be processed\n', '    // */\n', '    // function updateRewardBalance(address user, uint256 toDistribution) public {\n', '    //     _updateRewardBalance(user, toDistribution);\n', '    // }\n', '\n', '    // function _updateRewardBalance(address user, uint256 toDistribution) internal {\n', '    //     require(toDistribution <= rewardDistributions.length, "RewardDistributions: toDistribution index is too high");\n', '    //     RewardBalance storage rb = rewardBalances[user];\n', '    //     uint256 next = rb.nextDistribution;\n', '    //     if(next >= toDistribution) return;\n', '\n', '    //     if(next == 0 && rewardDistributions.length > 0){\n', '    //         //This might be a new user, if so we can skip previous distributions\n', '    //         address[] memory poolTokens = registeredPoolTokens();\n', '    //         bool hasDeposit;\n', '    //         for(uint256 i=0; i< poolTokens.length; i++){\n', '    //             address poolToken = poolTokens[i];\n', '    //             if(rb.shares[poolToken] != 0) {\n', '    //                 hasDeposit = true;\n', '    //                 break;\n', '    //             }\n', '    //         }\n', '    //         if(!hasDeposit){\n', '    //             rb.nextDistribution = rewardDistributions.length;\n', '    //             return;\n', '    //         }\n', '    //     }\n', '\n', '    //     while (next < toDistribution) {\n', '    //         RewardTokenDistribution storage d = rewardDistributions[next];\n', '    //         next++;\n', '    //         uint256 sh = rb.shares[d.poolToken];\n', '    //         if (sh == 0) continue;\n', '    //         UserProtocolRewards storage upr = rb.rewardsByProtocol[d.poolToken]; \n', '    //         for (uint256 i=0; i < d.rewardTokens.length; i++) {\n', '    //             address rToken = d.rewardTokens[i];\n', '    //             uint256 distrAmount = d.amounts[rToken];\n', '    //             upr.amounts[rToken] = upr.amounts[rToken].add(distrAmount.mul(sh).div(d.totalShares));\n', '\n', '    //         }\n', '    //     }\n', '    //     rb.nextDistribution = next;\n', '    // }\n', '\n', '}\n', '\n', '// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\CapperRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract CapperRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event CapperAdded(address indexed account);\n', '    event CapperRemoved(address indexed account);\n', '\n', '    Roles.Role private _cappers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isCapper(sender)) {\n', '            _addCapper(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyCapper() {\n', '        require(isCapper(_msgSender()), "CapperRole: caller does not have the Capper role");\n', '        _;\n', '    }\n', '\n', '    function isCapper(address account) public view returns (bool) {\n', '        return _cappers.has(account);\n', '    }\n', '\n', '    function addCapper(address account) public onlyCapper {\n', '        _addCapper(account);\n', '    }\n', '\n', '    function renounceCapper() public {\n', '        _removeCapper(_msgSender());\n', '    }\n', '\n', '    function _addCapper(address account) internal {\n', '        _cappers.add(account);\n', '        emit CapperAdded(account);\n', '    }\n', '\n', '    function _removeCapper(address account) internal {\n', '        _cappers.remove(account);\n', '        emit CapperRemoved(account);\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts\\modules\\savings\\SavingsCap.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SavingsCap is CapperRole {\n', '\n', '    event UserCapEnabledChange(bool enabled);\n', '    event UserCapChanged(address indexed protocol, address indexed user, uint256 newCap);\n', '    event DefaultUserCapChanged(address indexed protocol, uint256 newCap);\n', '    event ProtocolCapEnabledChange(bool enabled);\n', '    event ProtocolCapChanged(address indexed protocol, uint256 newCap);\n', '    event VipUserEnabledChange(bool enabled);\n', '    event VipUserChanged(address indexed protocol, address indexed user, bool isVip);\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    struct ProtocolCapInfo {\n', '        mapping(address => uint256) userCap; //Limit of pool tokens which can be minted for a user during deposit\n', '        mapping(address=>bool) isVipUser;       \n', '    }\n', '\n', '    mapping(address => ProtocolCapInfo) protocolsCapInfo; //Mapping of protocol to data we need to calculate APY and do distributions\n', '\n', '    bool public userCapEnabled;\n', '    bool public protocolCapEnabled;\n', '    mapping(address=>uint256) public defaultUserCap;\n', '    mapping(address=>uint256) public protocolCap;\n', '    bool public vipUserEnabled;                         // Enable VIP user (overrides protocol cap)\n', '\n', '\n', '    function initialize(address _capper) public initializer {\n', '        CapperRole.initialize(_capper);\n', '    }\n', '\n', '    function setUserCapEnabled(bool _userCapEnabled) public onlyCapper {\n', '        userCapEnabled = _userCapEnabled;\n', '        emit UserCapEnabledChange(userCapEnabled);\n', '    }\n', '\n', '    // function setUserCap(address _protocol, address user, uint256 cap) public onlyCapper {\n', '    //     protocols[_protocol].userCap[user] = cap;\n', '    //     emit UserCapChanged(_protocol, user, cap);\n', '    // }\n', '\n', '    // function setUserCap(address _protocol, address[] calldata users, uint256[] calldata caps) external onlyCapper {\n', '    //     require(users.length == caps.length, "SavingsModule: arrays length not match");\n', '    //     for(uint256 i=0;  i < users.length; i++) {\n', '    //         protocols[_protocol].userCap[users[i]] = caps[i];\n', '    //         emit UserCapChanged(_protocol, users[i], caps[i]);\n', '    //     }\n', '    // }\n', '\n', '    function setVipUserEnabled(bool _vipUserEnabled) public onlyCapper {\n', '        vipUserEnabled = _vipUserEnabled;\n', '        emit VipUserEnabledChange(_vipUserEnabled);\n', '    }\n', '\n', '    function setVipUser(address _protocol, address user, bool isVip) public onlyCapper {\n', '        protocolsCapInfo[_protocol].isVipUser[user] = isVip;\n', '        emit VipUserChanged(_protocol, user, isVip);\n', '    }\n', '    \n', '    function setDefaultUserCap(address _protocol, uint256 cap) public onlyCapper {\n', '        defaultUserCap[_protocol] = cap;\n', '        emit DefaultUserCapChanged(_protocol, cap);\n', '    }\n', '\n', '    function setProtocolCapEnabled(bool _protocolCapEnabled) public onlyCapper {\n', '        protocolCapEnabled = _protocolCapEnabled;\n', '        emit ProtocolCapEnabledChange(protocolCapEnabled);\n', '    }\n', '\n', '    function setProtocolCap(address _protocol, uint256 cap) public onlyCapper {\n', '        protocolCap[_protocol] = cap;\n', '        emit ProtocolCapChanged(_protocol, cap);\n', '    }\n', '\n', '    function getUserCapLeft(address _protocol, uint256 _balance) view public returns(uint256) {\n', '        uint256 cap;\n', '        if (_balance < defaultUserCap[_protocol]) {\n', '            cap = defaultUserCap[_protocol] - _balance;\n', '        }\n', '        return cap;\n', '    }\n', '\n', '    function isVipUser(address _protocol, address user) view public returns(bool){\n', '        return protocolsCapInfo[_protocol].isVipUser[user];\n', '    }\n', '\n', '    function isProtocolCapExceeded(uint256 _poolSupply, address _protocol, address _user) view public returns(bool) {\n', '        if (protocolCapEnabled) {\n', '            if ( !(vipUserEnabled && isVipUser(_protocol, _user)) ) {\n', '                if (_poolSupply > protocolCap[_protocol]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\modules\\savings\\VaultOperatorRole.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', 'contract VaultOperatorRole is Initializable, Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event VaultOperatorAdded(address indexed account);\n', '    event VaultOperatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _managers;\n', '\n', '    function initialize(address sender) public initializer {\n', '        if (!isVaultOperator(sender)) {\n', '            _addVaultOperator(sender);\n', '        }\n', '    }\n', '\n', '    modifier onlyVaultOperator() {\n', '        require(isVaultOperator(_msgSender()), "VaultOperatorRole: caller does not have the VaultOperator role");\n', '        _;\n', '    }\n', '\n', '    function addVaultOperator(address account) public onlyVaultOperator {\n', '        _addVaultOperator(account);\n', '    }\n', '\n', '    function renounceVaultOperator() public {\n', '        _removeVaultOperator(_msgSender());\n', '    }\n', '\n', '    function isVaultOperator(address account) public view returns (bool) {\n', '        return _managers.has(account);\n', '    }\n', '\n', '    function _addVaultOperator(address account) internal {\n', '        _managers.add(account);\n', '        emit VaultOperatorAdded(account);\n', '    }\n', '\n', '    function _removeVaultOperator(address account) internal {\n', '        _managers.remove(account);\n', '        emit VaultOperatorRemoved(account);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\IVaultProtocol.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '//solhint-disable func-order\n', 'contract IVaultProtocol {\n', '    event DepositToVault(address indexed _user, address indexed _token, uint256 _amount);\n', '    event WithdrawFromVault(address indexed _user, address indexed _token, uint256 _amount);\n', '    event WithdrawRequestCreated(address indexed _user, address indexed _token, uint256 _amount);\n', '    event DepositByOperator(uint256 _amount);\n', '    event WithdrawByOperator(uint256 _amount);\n', '    event WithdrawRequestsResolved(uint256 _totalDeposit, uint256 _totalWithdraw);\n', '    event StrategyRegistered(address indexed _vault, address indexed _strategy, string _id);\n', '\n', '    event Claimed(address indexed _vault, address indexed _user, address _token, uint256 _amount);\n', '    event DepositsCleared(address indexed _vault);\n', '    event RequestsCleared(address indexed _vault);\n', '\n', '\n', '    function registerStrategy(address _strategy) external;\n', '\n', '    function depositToVault(address _user, address _token, uint256 _amount) external;\n', '    function depositToVault(address _user, address[] calldata  _tokens, uint256[] calldata _amounts) external;\n', '\n', '    function withdrawFromVault(address _user, address _token, uint256 _amount) external;\n', '    function withdrawFromVault(address _user, address[] calldata  _tokens, uint256[] calldata _amounts) external;\n', '\n', '    function operatorAction(address _strategy) external returns(uint256, uint256);\n', '    function operatorActionOneCoin(address _strategy, address _token) external returns(uint256, uint256);\n', '    function clearOnHoldDeposits() external;\n', '    function clearWithdrawRequests() external;\n', '    function setRemainder(uint256 _amount, uint256 _index) external;\n', '\n', '    function quickWithdraw(address _user, address[] calldata _tokens, uint256[] calldata _amounts) external;\n', '    function quickWithdrawStrategy() external view returns(address);\n', '\n', '    function claimRequested(address _user) external;\n', '\n', '    function normalizedBalance() external returns(uint256);\n', '    function normalizedBalance(address _strategy) external returns(uint256);\n', '    function normalizedVaultBalance() external view returns(uint256);\n', '\n', '    function supportedTokens() external view returns(address[] memory);\n', '    function supportedTokensCount() external view returns(uint256);\n', '\n', '    function isStrategyRegistered(address _strategy) external view returns(bool);\n', '    function registeredStrategies() external view returns(address[] memory);\n', '\n', '    function isTokenRegistered(address _token) external view returns (bool);\n', '    function tokenRegisteredInd(address _token) external view returns(uint256);\n', '\n', '    function totalClaimableAmount(address _token) external view returns (uint256);\n', '    function claimableAmount(address _user, address _token) external view returns (uint256);\n', '\n', '    function amountOnHold(address _user, address _token) external view returns (uint256);\n', '\n', '    function amountRequested(address _user, address _token) external view returns (uint256);\n', '}\n', '\n', '// File: contracts\\interfaces\\token\\IOperableToken.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IOperableToken {\n', '    function increaseOnHoldValue(address _user, uint256 _amount) external;\n', '    function decreaseOnHoldValue(address _user, uint256 _amount) external;\n', '    function onHoldBalanceOf(address _user) external view returns (uint256);\n', '}\n', '\n', '// File: contracts\\modules\\token\\VaultPoolToken.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', 'contract VaultPoolToken is PoolToken, IOperableToken {\n', '\n', '    uint256 internal toBeMinted;\n', '\n', '    mapping(address => uint256) internal onHoldAmount;\n', '    uint256 totalOnHold;\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        _createDistributionIfReady();\n', '        toBeMinted = amount;\n', '        _updateUserBalance(account);\n', '        toBeMinted = 0;\n', '        ERC20._mint(account, amount);\n', '        userBalanceChanged(account);\n', '    }\n', '\n', '    function increaseOnHoldValue(address _user, uint256 _amount) public onlyMinter {\n', '        onHoldAmount[_user] = onHoldAmount[_user].add(_amount);\n', '        totalOnHold = totalOnHold.add(_amount);\n', '    }\n', '\n', '    function decreaseOnHoldValue(address _user, uint256 _amount) public onlyMinter {\n', '        if (onHoldAmount[_user] >= _amount) {\n', '            _updateUserBalance(_user);\n', '\n', '            onHoldAmount[_user] = onHoldAmount[_user].sub(_amount);\n', '            if (distributions.length > 0 && nextDistributions[_user] < distributions.length) {\n', '                nextDistributions[_user] = distributions.length;\n', '            }\n', '            totalOnHold = totalOnHold.sub(_amount);\n', '\n', '            userBalanceChanged(_user);\n', '        }\n', '    }\n', '\n', '    function onHoldBalanceOf(address _user) public view returns (uint256) {\n', '        return onHoldAmount[_user];\n', '    }\n', '\n', '\n', '    function fullBalanceOf(address account) public view returns(uint256){\n', '        if (account == address(this)) return 0;  //Token itself only holds tokens for others\n', '        uint256 unclaimed = calculateClaimAmount(account);\n', '        return balanceOf(account).add(unclaimed);\n', '    }\n', '\n', '    function distributionBalanceOf(address account) public view returns(uint256) {\n', '        if (balanceOf(account).add(toBeMinted) <= onHoldAmount[account])\n', '            return 0;\n', '        return balanceOf(account).add(toBeMinted).sub(onHoldAmount[account]);\n', '    }\n', '\n', '    function distributionTotalSupply() public view returns(uint256){\n', '        return totalSupply().sub(totalOnHold);\n', '    }\n', '\n', '    function userBalanceChanged(address account) internal {\n', '        //Disable rewards for the vaults\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\savings\\IVaultSavings.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '//solhint-disable func-order\n', 'contract IVaultSavings {\n', '    event VaultRegistered(address protocol, address poolToken);\n', '    event YieldDistribution(address indexed poolToken, uint256 amount);\n', '    event DepositToken(address indexed protocol, address indexed token, uint256 dnAmount);\n', '    event Deposit(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\n', '    event WithdrawToken(address indexed protocol, address indexed token, uint256 dnAmount);\n', '    event Withdraw(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\n', '\n', '    function deposit(address[] calldata _protocols, address[] calldata _tokens, uint256[] calldata _dnAmounts) external returns(uint256[] memory);\n', '    function deposit(address _protocol, address[] calldata _tokens, uint256[] calldata _dnAmounts) external returns(uint256);\n', '    function withdraw(address _vaultProtocol, address[] calldata _tokens, uint256[] calldata _amounts, bool isQuick) external returns(uint256);\n', '\n', '    function poolTokenByProtocol(address _protocol) external view returns(address);\n', '    function supportedVaults() public view returns(address[] memory);\n', '    function isVaultRegistered(address _protocol) public view returns(bool);\n', '\n', '    function registerVault(IVaultProtocol protocol, VaultPoolToken poolToken) external;\n', '\n', '    //function quickWithdraw(address _vaultProtocol, address[] calldata _tokens, uint256[] calldata _amounts) external returns(uint256);\n', '    function handleOperatorActions(address _vaultProtocol, address _strategy, address _token) external;\n', '\n', '    function claimAllRequested(address _vaultProtocol) external;\n', '}\n', '\n', '// File: contracts\\interfaces\\defi\\IStrategyCurveFiSwapCrv.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IStrategyCurveFiSwapCrv {\n', '    event CrvClaimed(string indexed id, address strategy, uint256 amount);\n', '\n', '    function curveFiTokenBalance() external view returns(uint256);\n', '    function performStrategyStep1() external;\n', '    function performStrategyStep2(bytes calldata _data, address _token) external;\n', '}\n', '\n', '// File: contracts\\modules\\savings\\VaultSavingsModule.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VaultSavingsModule is Module, IVaultSavings, AccessChecker, RewardDistributions, SavingsCap, VaultOperatorRole {\n', '    uint256 constant MAX_UINT256 = uint256(-1);\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    struct VaultInfo {\n', '        VaultPoolToken poolToken;\n', '        uint256 previousBalance;\n', '    }\n', '\n', '    address[] internal registeredVaults;\n', '    mapping(address => VaultInfo) vaults;\n', '    mapping(address => address) poolTokenToVault;\n', '\n', '// ------\n', '// Settings methods\n', '// ------\n', '    function initialize(address _pool) public initializer {\n', '        Module.initialize(_pool);\n', '        SavingsCap.initialize(_msgSender());\n', '        VaultOperatorRole.initialize(_msgSender());\n', '    }\n', '\n', '    function registerVault(IVaultProtocol protocol, VaultPoolToken poolToken) public onlyOwner {\n', '        require(!isVaultRegistered(address(protocol)), "Vault is already registered");\n', '\n', '        registeredVaults.push(address(protocol));\n', '        \n', '        vaults[address(protocol)] = VaultInfo({\n', '            poolToken: poolToken,\n', '            previousBalance: protocol.normalizedBalance()\n', '        });\n', '\n', '        poolTokenToVault[address(poolToken)] = address(protocol);\n', '\n', '        uint256 normalizedBalance = vaults[address(protocol)].previousBalance;\n', '        if(normalizedBalance > 0) {\n', '            uint256 ts = poolToken.totalSupply();\n', '            if(ts < normalizedBalance) {\n', '                poolToken.mint(_msgSender(), normalizedBalance.sub(ts));\n', '            }\n', '        }\n', '        emit VaultRegistered(address(protocol), address(poolToken));\n', '    }\n', '\n', '// ------\n', '// User interface\n', '// ------\n', '    //Deposits several tokens into single Vault\n', '    function deposit(address _protocol, address[] memory _tokens, uint256[] memory _dnAmounts)\n', '    public operationAllowed(IAccessModule.Operation.Deposit)\n', '    returns(uint256) \n', '    {\n', '        require(isVaultRegistered(_protocol), "Vault is not registered");\n', '        depositToProtocol(_protocol, _tokens, _dnAmounts);\n', '\n', '        uint256 nAmount;\n', '        for (uint256 i=0; i < _tokens.length; i++) {\n', '            nAmount = nAmount.add(CalcUtils.normalizeAmount(_tokens[i], _dnAmounts[i]));\n', '        }\n', '        \n', '        VaultPoolToken poolToken = VaultPoolToken(vaults[_protocol].poolToken);\n', '        poolToken.mint(_msgSender(), nAmount);\n', '\n', '        require(!isProtocolCapExceeded(poolToken.totalSupply(), _protocol, _msgSender()), "Deposit exeeds protocols cap");\n', '\n', '        uint256 cap;\n', '        if (userCapEnabled) {\n', '            cap = userCap(_protocol, _msgSender());\n', '            require(cap >= nAmount, "Deposit exeeds user cap");\n', '        }\n', '\n', '        emit Deposit(_protocol, _msgSender(), nAmount, 0);\n', '        return nAmount;\n', '    }\n', '\n', '    //Deposits into several vaults but one coin at time\n', '    function deposit(address[] memory _protocols, address[] memory _tokens, uint256[] memory _dnAmounts) \n', '    public operationAllowed(IAccessModule.Operation.Deposit) \n', '    returns(uint256[] memory) \n', '    {\n', '        require(_protocols.length == _tokens.length && _tokens.length == _dnAmounts.length, "Size of arrays does not match");\n', '        uint256[] memory ptAmounts = new uint256[](_protocols.length);\n', '        address[] memory tkns = new address[](1);\n', '        uint256[] memory amnts = new uint256[](1);\n', '        for (uint256 i=0; i < _protocols.length; i++) {\n', '            tkns[0] = _tokens[i];\n', '            amnts[0] = _dnAmounts[i];\n', '            ptAmounts[i] = deposit(_protocols[i], tkns, amnts);\n', '        }\n', '        return ptAmounts;\n', '    }\n', '\n', '    function depositToProtocol(address _protocol, address[] memory _tokens, uint256[] memory _dnAmounts) internal {\n', '        for (uint256 i=0; i < _tokens.length; i++) {\n', '            address tkn = _tokens[i];\n', '            IERC20(tkn).safeTransferFrom(_msgSender(), _protocol, _dnAmounts[i]);\n', '            IVaultProtocol(_protocol).depositToVault(_msgSender(), tkn, _dnAmounts[i]);\n', '            emit DepositToken(_protocol, tkn, _dnAmounts[i]);\n', '        }\n', '    }\n', '\n', '    //Withdraw several tokens from a Vault in regular way or in quickWay\n', '    function withdraw(address _vaultProtocol, address[] memory _tokens, uint256[] memory _amounts, bool isQuick)\n', '    public operationAllowed(IAccessModule.Operation.Withdraw)\n', '    returns(uint256)\n', '    {\n', '        require(isVaultRegistered(_vaultProtocol), "Vault is not registered");\n', '        require(_tokens.length == _amounts.length, "Size of arrays does not match");\n', '\n', '        VaultPoolToken poolToken = VaultPoolToken(vaults[_vaultProtocol].poolToken);\n', '\n', '        uint256 actualAmount;\n', '        uint256 normAmount;\n', '        for (uint256 i = 0; i < _amounts.length; i++) {\n', '            normAmount = CalcUtils.normalizeAmount(_tokens[i], _amounts[i]);\n', '            actualAmount = actualAmount.add(normAmount);\n', '\n', '            emit WithdrawToken(address(_vaultProtocol), _tokens[i], normAmount);\n', '        }\n', '\n', '        if (isQuick) {\n', '            quickWithdraw(_vaultProtocol, _tokens, _amounts, actualAmount);\n', '        }\n', '        else {\n', '            if (_tokens.length == 1) {\n', '                IVaultProtocol(_vaultProtocol).withdrawFromVault(_msgSender(), _tokens[0], _amounts[0]);\n', '            }\n', '            else {\n', '                IVaultProtocol(_vaultProtocol).withdrawFromVault(_msgSender(), _tokens, _amounts);\n', '            }\n', '        }\n', '\n', '        poolToken.burnFrom(_msgSender(), actualAmount);\n', '        emit Withdraw(_vaultProtocol, _msgSender(), actualAmount, 0);\n', '\n', '        return actualAmount;\n', '    }\n', '\n', '    function quickWithdraw(address _vaultProtocol, address[] memory _tokens, uint256[] memory _amounts, uint256 normAmount) internal {\n', '        distributeYieldInternal(_vaultProtocol, 0, 0);\n', '\n', '        IVaultProtocol(_vaultProtocol).quickWithdraw(_msgSender(), _tokens, _amounts);\n', '        \n', '        distributeYieldInternal(_vaultProtocol, normAmount, 0);\n', '    }\n', '\n', '    //Withdraw several tokens from several Vaults\n', '    function withdrawAll(address[] memory _vaults, address[] memory _tokens, uint256[] memory _dnAmounts)\n', '    public operationAllowed(IAccessModule.Operation.Withdraw)\n', '    returns(uint256[] memory) \n', '    {\n', '        require(_tokens.length == _dnAmounts.length, "Size of arrays does not match");\n', '\n', '        uint256[] memory ptAmounts = new uint256[](_vaults.length);\n', '        uint256 curInd;\n', '        uint256 lim;\n', '        uint256 nTokens;\n', '        for (uint256 i=0; i < _vaults.length; i++) {\n', '            nTokens = IVaultProtocol(_vaults[i]).supportedTokensCount();\n', '            lim = curInd + nTokens;\n', '            \n', '            require(_tokens.length >= lim, "Incorrect tokens length");\n', '            \n', '            address[] memory tkns = new address[](nTokens);\n', '            uint256[] memory amnts = new uint256[](nTokens);\n', '\n', '            for (uint256 j = curInd; j < lim; j++) {\n', '                tkns[j-curInd] = _tokens[j];\n', '                amnts[j-curInd] = _dnAmounts[j];\n', '            }\n', '\n', '            ptAmounts[i] = withdraw(_vaults[i], tkns, amnts, false);\n', '\n', '            curInd += nTokens;\n', '        }\n', '        return ptAmounts;\n', '    }\n', '\n', '    function claimAllRequested(address _vaultProtocol) public\n', '    {\n', '        require(isVaultRegistered(_vaultProtocol), "Vault is not registered");\n', '        IVaultProtocol(_vaultProtocol).claimRequested(_msgSender());\n', '    }\n', '\n', '// ------\n', '// Operator interface\n', '// ------\n', '    function handleOperatorActions(address _vaultProtocol, address _strategy, address _token) public onlyVaultOperator {\n', '        uint256 totalDeposit;\n', '        uint256 totalWithdraw;\n', '\n', '        distributeYieldInternal(_vaultProtocol, 0, 0);\n', '\n', '        if (_token == address(0)) {\n', '            (totalDeposit, totalWithdraw) = IVaultProtocol(_vaultProtocol).operatorAction(_strategy);\n', '        }\n', '        else {\n', '            (totalDeposit, totalWithdraw) = IVaultProtocol(_vaultProtocol).operatorActionOneCoin(_strategy, _token);\n', '        }\n', '\n', '        distributeYieldInternal(_vaultProtocol, totalWithdraw, totalDeposit);\n', '    }\n', '\n', '    function clearProtocolStorage(address _vaultProtocol) public onlyVaultOperator {\n', '        IVaultProtocol(_vaultProtocol).clearOnHoldDeposits();\n', '        IVaultProtocol(_vaultProtocol).clearWithdrawRequests();\n', '    }\n', '\n', '    function distributeYield(address _vaultProtocol) public {\n', '        distributeYieldInternal(_vaultProtocol, 0, 0);\n', '    }\n', '\n', '    function setVaultRemainder(address _vaultProtocol, uint256 _amount, uint256 _index) public onlyVaultOperator {\n', '        IVaultProtocol(_vaultProtocol).setRemainder(_amount, _index);\n', '    }\n', '\n', '    function callStrategyStep(address _vaultProtocol, address _strategy, bool _distrYield, bytes memory _strategyData) public onlyVaultOperator {\n', '        require(IVaultProtocol(_vaultProtocol).isStrategyRegistered(_strategy), "Strategy is not registered");\n', '        uint256 oldVaultBalance = IVaultProtocol(_vaultProtocol).normalizedVaultBalance();\n', '\n', '        (bool success, bytes memory result) = _strategy.call(_strategyData);\n', '\n', '        if(!success) assembly {\n', '            revert(add(result,32), result)  //Reverts with same revert reason\n', '        }\n', '\n', '        if (_distrYield) {\n', '            uint256 newVaultBalance;\n', '            newVaultBalance = IVaultProtocol(_vaultProtocol).normalizedVaultBalance();\n', '            if (newVaultBalance > oldVaultBalance) {\n', '                uint256 yield = newVaultBalance.sub(oldVaultBalance);\n', '                vaults[_vaultProtocol].previousBalance = vaults[_vaultProtocol].previousBalance.add(yield);\n', '                createYieldDistribution(vaults[_vaultProtocol].poolToken, yield);\n', '            }\n', '        }\n', '    }\n', '\n', '// ------\n', '// Getters and checkers\n', '// ------\n', '    function poolTokenByProtocol(address _vaultProtocol) public view returns(address) {\n', '        return address(vaults[_vaultProtocol].poolToken);\n', '    }\n', '\n', '    function protocolByPoolToken(address _poolToken) public view returns(address) {\n', '        return poolTokenToVault[_poolToken];\n', '    }\n', '\n', '    function userCap(address _protocol, address user) public view returns(uint256) {\n', '        uint256 balance = vaults[_protocol].poolToken.balanceOf(user);\n', '        return getUserCapLeft(_protocol, balance);\n', '    }\n', '\n', '    function isVaultRegistered(address _protocol) public view returns(bool) {\n', '        for (uint256 i = 0; i < registeredVaults.length; i++){\n', '            if (registeredVaults[i] == _protocol) return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function supportedVaults() public view returns(address[] memory) {\n', '        return registeredVaults;\n', '    }\n', '\n', '// ------\n', '// Yield distribution internal helpers\n', '// ------\n', '    function distributeYieldInternal(address _vaultProtocol, uint256 totalWithdraw, uint256 totalDeposit) internal {\n', '        uint256 currentBalance = IVaultProtocol(_vaultProtocol).normalizedBalance();\n', '\n', '        VaultInfo storage pi = vaults[_vaultProtocol];\n', '        uint256 correctedBalance = pi.previousBalance.add(totalDeposit).sub(totalWithdraw);\n', '\n', '        if (currentBalance > correctedBalance) {\n', '            VaultPoolToken poolToken = VaultPoolToken(pi.poolToken);\n', '            uint256 yield = currentBalance.sub(correctedBalance);\n', '            //Update protocol balance\n', '            pi.previousBalance = currentBalance;\n', '\n', '            createYieldDistribution(poolToken, yield);\n', '        }\n', '        else {\n', '            //Update protocol balance with correction for fee\n', '            pi.previousBalance = correctedBalance;\n', '        }\n', '    }\n', '\n', '\n', '    function createYieldDistribution(VaultPoolToken poolToken, uint256 yield) internal {\n', '        poolToken.distribute(yield);\n', '        emit YieldDistribution(address(poolToken), yield);\n', '    }\n', '}']