['// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '/**\n', ' * @title Proxy\n', ' *\n', ' * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n', ' * be specified by overriding the virtual {_implementation} function.\n', ' * \n', ' * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n', ' * different contract through the {_delegate} function.\n', ' * \n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'abstract contract Proxy {\n', '        /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _delegate(address implementation) internal {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n', '     * and {_fallback} should delegate.\n', '     */\n', '    function _implementation() internal virtual view returns (address);\n', '\n', '    /**\n', '     * @dev Delegates the current call to the address returned by `_implementation()`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal {\n', '        _beforeFallback();\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback () payable external {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive () payable external {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n', '     * call, or as part of the Solidity `fallback` or `receive` functions.\n', '     * \n', '     * If overriden should call `super._beforeFallback()`.\n', '     */\n', '    function _beforeFallback() internal virtual {\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeableProxyV1\n', ' *\n', ' * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n', ' * implementation address that can be changed. This address is stored in storage in the location specified by\n', " * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n", ' * implementation behind the proxy.\n', ' *\n', ' * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n', ' * {TransparentUpgradeableProxy}.\n', ' */\n', 'abstract contract UpgradeableProxyV1 is Proxy {\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `logic`.\n', '     *\n', "     * If `_data` is nonempty, it's used as data in a delegate call to `logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor(address logic, bytes memory data) public payable {\n', '        if (logic == address(0x0)) {\n', '            return;\n', '        }\n', '        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '        _setImplementation(logic);\n', '        if (data.length > 0) {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success, ) = logic.delegatecall(data);\n', '            require(success, "Call impl with data failed");\n', '        }\n', '    }\n', '\n', '    function _initProxyImpl(\n', '        address logic,\n', '        bytes memory data\n', '    ) internal virtual {\n', '        require(_implementation() == address(0x0), "Impl had been set");\n', '        _setImplementation(logic);\n', '        if (data.length > 0) {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success, ) = logic.delegatecall(data);\n', '            require(success, "Call impl with data failed");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Returns the current implementation.\n', '     * @return impl Address of the current implementation\n', '     */\n', '    function _implementation() internal virtual override view returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            impl := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the proxy to a new implementation.\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeTo(address newImplementation) internal {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address newImplementation) private {\n', '        require(AddressUtils.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");\n', '\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newImplementation)\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title ManagedProxyV1\n', ' *\n', ' * @dev This contract implements a proxy that is upgradeable by an admin.\n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract ManagedProxyV1 is UpgradeableProxyV1 {\n', '    /**\n', '     * @dev Initializes an upgradeable proxy managed by `admin`, backed by the implementation at `logic`, and\n', '     * optionally initialized with `data` as explained in {UpgradeableProxy-constructor}.\n', '     */\n', '    constructor(\n', '        address logic,\n', '        address admin,\n', '        bytes memory data\n', '    ) public payable UpgradeableProxyV1(logic, data) {\n', '        assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));\n', '        if (admin != address(0x0)) {\n', '            _setAdmin(admin);\n', '        }\n', '    }\n', '\n', '    function _initManagedProxy(\n', '        address logic,\n', '        address admin,\n', '        bytes memory data\n', '    ) public {\n', '        require(_admin() == address(0x0), "Admin had been set");\n', '        _initProxyImpl(logic, data);\n', '        _setAdmin(admin);\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the admin account has changed.\n', '     */\n', '    event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n', '     */\n', '    modifier ifAdmin() {\n', '        if (msg.sender == _admin()) {\n', '            _;\n', '        } else {\n', '            _fallback();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     *\n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n', '     *\n', '     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n', '     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n', '     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n', '     */\n', '    function admin() external ifAdmin returns (address) {\n', '        return _admin();\n', '    }\n', '\n', '    function _proxyGetAdmin() public view returns (address) {\n', '        return _admin();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current implementation.\n', '     *\n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n', '     *\n', '     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n', '     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n', '     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n', '     */\n', '    function implementation() external ifAdmin returns (address) {\n', '        return _implementation();\n', '    }\n', '\n', '    function _proxyGetImplementation() public view returns (address) {\n', '        return _implementation();\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the admin of the proxy.\n', '     *\n', '     * Emits an {AdminChanged} event.\n', '     *\n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n', '     */\n', '    function changeAdmin(address newAdmin) external ifAdmin {\n', '        require(newAdmin != address(0), "ManagedProxy: new admin is the zero address");\n', '        emit AdminChanged(_admin(), newAdmin);\n', '        _setAdmin(newAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy.\n', '     *\n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n', '     */\n', '    function upgradeTo(address newImplementation) external ifAdmin {\n', '        _upgradeTo(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n', '     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n', '     * proxied contract.\n', '     *\n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n', '     */\n', '    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n', '        _upgradeTo(newImplementation);\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, ) = newImplementation.delegatecall(data);\n', '        require(success);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     */\n', '    function _admin() internal view returns (address adm) {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            adm := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 admin slot.\n', '     */\n', '    function _setAdmin(address newAdmin) private {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newAdmin)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n', '     */\n', '    // function _beforeFallback() internal override virtual {\n', '    //     // require(msg.sender != _admin(), "ManagedProxy: admin cannot fallback to proxy target");\n', '    //     super._beforeFallback();\n', '    // }\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.16 <0.7.0;\n', '\n', '\n', 'contract TokenChildProxyV1 is ManagedProxyV1 {\n', '    constructor() public payable ManagedProxyV1(address(0x0), msg.sender, "") {}\n', '\n', '    function _initProxyOfProxy (\n', '        address impl,\n', '        address admin,\n', '        bytes memory data\n', '    ) public {\n', '        _initManagedProxy(impl, admin, data);\n', '    }\n', '}']