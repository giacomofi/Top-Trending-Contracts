['pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IVoteProxy {\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _voter) external view returns (uint256);\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract YaxisVoteProxy {\n', '    IVoteProxy public voteProxy;\n', '    address public governance;\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return "YAXIS Vote Power";\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return "YAX VP";\n', '    }\n', '\n', '    function decimals() external view returns (uint8) {\n', '        return voteProxy.decimals();\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return voteProxy.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _voter) external view returns (uint256) {\n', '        return voteProxy.balanceOf(_voter);\n', '    }\n', '\n', '    function setVoteProxy(IVoteProxy _voteProxy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        voteProxy = _voteProxy;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '\n', '\n', '    /**\n', ' * This function allows governance to take unsupported tokens out of the contract.\n', ' * This is in an effort to make someone whole, should they seriously mess up.\n', ' * There is no guarantee governance will vote to return these.\n', ' * It also allows for removal of airdropped tokens.\n', ' */\n', '    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.transfer(to, amount);\n', '    }\n', '}']