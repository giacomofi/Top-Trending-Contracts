['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'interface DSPauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface VatAbstract {\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '}\n', '\n', 'interface SpotAbstract {\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '}\n', '\n', 'interface CatAbstract {\n', '    function file(bytes32, uint256) external;\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '    // MAINNET ADDRESSES\n', '    //\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    // against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\n', '    address constant MCD_VAT     = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address constant MCD_SPOT    = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address constant MCD_CAT     = 0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea;\n', '\n', '    // Decimals & precision\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    function execute() external {\n', '        /*** Risk Parameter Adjustments ***/\n', '\n', '        // Set the global debt ceiling to 948,000,000\n', '        // 823 (current DC) + 100 (USDC-A increase) + 25 (PAXUSD-A increase)\n', '        VatAbstract(MCD_VAT).file("Line", 948 * MILLION * RAD);\n', '\n', '        // Set the USDC-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 100 million\n', '        // New debt ceiling: 200 million\n', '        VatAbstract(MCD_VAT).file("USDC-A", "line", 200 * MILLION * RAD);\n', '\n', '        // Set the PAXUSD-A debt ceiling\n', '        //\n', '        // Existing debt ceiling: 5 million\n', '        // New debt ceiling: 30 million\n', '        VatAbstract(MCD_VAT).file("PAXUSD-A", "line", 30 * MILLION * RAD);\n', '\n', '        // Set USDC-A collateralization ratio\n', '        // Existing ratio: 110%\n', '        // New ratio: 103%\n', '        SpotAbstract(MCD_SPOT).file("USDC-A", "mat", 103 * RAY / 100); // 103% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke("USDC-A");\n', '\n', '        // Set PAXUSD-A collateralization ratio\n', '        // Existing ratio: 120%\n', '        // New ratio: 103%\n', '        SpotAbstract(MCD_SPOT).file("PAXUSD-A", "mat", 103 * RAY / 100); // 103% coll. ratio\n', '        SpotAbstract(MCD_SPOT).poke("PAXUSD-A");\n', '\n', '        // Set Cat box variable\n', '        // Existing box: 30m\n', '        // New box: 15m    \n', '        CatAbstract(MCD_CAT).file("box", 15 * MILLION * RAD);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/15215ebaf8bbb4a20567b3233383788a68afb58b/governance/votes/Executive%20vote%20-%20September%2014%2C%202020.md -q -O - 2>/dev/null)"\n', '    string constant public description =\n', '        "2020-09-14 MakerDAO Executive Spell | Hash: 0xf0155120204be06c56616181ea82bbfa93f48494455c6d0b3c0ab1d581464657";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    // modifier officeHours {\n', '    //     uint day = (now / 1 days + 3) % 7;\n', '    //     require(day < 5, "Can only be cast on a weekday");\n', '    //     uint hour = now / 1 hours % 24;\n', '    //     require(hour >= 14 && hour < 21, "Outside office hours");\n', '    //     _;\n', '    // }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public /*officeHours*/ {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']