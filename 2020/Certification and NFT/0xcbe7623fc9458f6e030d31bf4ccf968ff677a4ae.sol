['// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ERC20 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', '// ERC20-style token metadata\n', '// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\n', 'struct TokenMetadata {\n', '    address token;\n', '    string name;\n', '    string symbol;\n', '    uint8 decimals;\n', '}\n', '\n', '\n', 'struct Component {\n', '    address token;\n', '    string tokenType;  // "ERC20" by default\n', '    uint256 rate;  // price per full share (1e18)\n', '}\n', '\n', '\n', '\n', 'interface TokenAdapter {\n', '\n', '    /**\n', '     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n', '     * struct TokenMetadata {\n', '     *     address token;\n', '     *     string name;\n', '     *     string symbol;\n', '     *     uint8 decimals;\n', '     * }\n', '     */\n', '    function getMetadata(address token) external view returns (TokenMetadata memory);\n', '\n', '    /**\n', '     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n', '     * struct Component {\n', '     *     address token;    // Address of token contract\n', '     *     string tokenType; // Token type ("ERC20" by default)\n', '     *     uint256 rate;     // Price per share (1e18)\n', '     * }\n', '     */\n', '    function getComponents(address token) external view returns (Component[] memory);\n', '}\n', '\n', '\n', '/**\n', ' * @dev OptionsManagerV2 contract interface.\n', ' * Only the functions required for FinNexusTokenAdapter contract are added.\n', ' */\n', 'interface OptionsManagerV2 {\n', '    function getTokenNetworth() external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @dev FNXOracle contract interface.\n', ' * Only the functions required for FinNexusTokenAdapter contract are added.\n', ' */\n', 'interface FNXOracle {\n', '    function getPrice(address asset) external view returns (uint256);\n', '}/**\n', '\n', '\n', '/**\n', ' * @title Token adapter for FinNexus.\n', ' * @dev Implementation of TokenAdapter interface.\n', ' * @author jeffqg123 <forestjqg@163.com>\n', ' */\n', 'contract FinNexusTokenAdapter is TokenAdapter {\n', '\n', '    address public constant OPT_MANAGER_FNX = 0xfDf252995da6D6c54C03FC993e7AA6B593A57B8d;\n', '    address public constant OPT_MANAGER_USDC = 0x120f18F5B8EdCaA3c083F9464c57C11D81a9E549;\n', '    \n', '    address public constant ORACLE = 0x43BD92bF3Bb25EBB3BdC2524CBd6156E3Fdd41F3;\n', '\n', '\n', '    address public constant FNX = 0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B;\n', '    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '\n', '    address public constant FPT_FNX = 0x7E605Fb638983A448096D82fFD2958ba012F30Cd;\n', '    address public constant FPT_USDC = 0x16305b9EC0bdBE32cF8a0b5C142cEb3682dB9d2d;\n', '    /**\n', '     * @return TokenMetadata struct with ERC20-style token info.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n', '        return TokenMetadata({\n', '            token: token,\n', '            name: ERC20(token).name(),\n', '            symbol: ERC20(token).symbol(),\n', '            decimals: ERC20(token).decimals()\n', '        });\n', '    }\n', '\n', '    /**\n', '     * @return Array of Component structs with underlying tokens rates for the given token.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getComponents(address token) external view override returns (Component[] memory) {\n', '        \n', '        Component[] memory underlyingTokens = new Component[](1);\n', '\n', '        if (token == FPT_USDC) {\n', '            \n', '            uint256 fptWorth = OptionsManagerV2(OPT_MANAGER_USDC).getTokenNetworth();\n', '            uint256 tokenPrice = FNXOracle(ORACLE).getPrice(USDC);\n', '            tokenPrice = tokenPrice * 1e6 ;\n', '            underlyingTokens[0] = Component({\n', '                    token:USDC,\n', '                    tokenType: "ERC20",\n', '                    rate: tokenPrice / fptWorth\n', '                    });\n', '                    \n', '        } else if (token == FPT_FNX) {\n', '                \n', '            uint256 fptWorth = OptionsManagerV2(OPT_MANAGER_FNX).getTokenNetworth();\n', '            uint256 tokenPrice = FNXOracle(ORACLE).getPrice(FNX);    \n', '            tokenPrice =  tokenPrice * 1e18;\n', '            underlyingTokens[0] = Component({\n', '                    token:FNX,\n', '                    tokenType: "ERC20",\n', '                    rate: tokenPrice / fptWorth\n', '                    });\n', '        }\n', '                \n', '        return underlyingTokens;\n', '    }\n', '}']