['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    \n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        \n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        \n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        \n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', 'contract LnAdmin {\n', '    address public admin;\n', '    address public candidate;\n', '\n', '    constructor(address _admin) public {\n', '        require(_admin != address(0), "admin address cannot be 0");\n', '        admin = _admin;\n', '        emit AdminChanged(address(0), _admin);\n', '    }\n', '\n', '    function setCandidate(address _candidate) external onlyAdmin {\n', '        address old = candidate;\n', '        candidate = _candidate;\n', '        emit candidateChanged( old, candidate);\n', '    }\n', '\n', '    function becomeAdmin( ) external {\n', '        require( msg.sender == candidate, "Only candidate can become admin");\n', '        address old = admin;\n', '        admin = candidate;\n', '        emit AdminChanged( old, admin ); \n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require( (msg.sender == admin), "Only the contract admin can perform this action");\n', '        _;\n', '    }\n', '\n', '    event candidateChanged(address oldCandidate, address newCandidate );\n', '    event AdminChanged(address oldAdmin, address newAdmin);\n', '}\n', '\n', 'contract LnProxyBase is LnAdmin {\n', '    LnProxyImpl public target;\n', '\n', '    constructor(address _admin) public LnAdmin(_admin) {}\n', '\n', '    function setTarget(LnProxyImpl _target) external onlyAdmin {\n', '        target = _target;\n', '        emit TargetUpdated(_target);\n', '    }\n', '\n', '    function Log0( bytes calldata callData ) external onlyTarget {\n', '        uint size = callData.length;\n', '        bytes memory _callData = callData;\n', '        assembly {\n', '            log0(add(_callData, 32), size)\n', '        }\n', '    }\n', '\n', '    function Log1( bytes calldata callData, bytes32 topic1 ) external onlyTarget {\n', '        uint size = callData.length;\n', '        bytes memory _callData = callData;\n', '        assembly {\n', '            log1(add(_callData, 32), size, topic1 )\n', '        }\n', '    }\n', '\n', '    function Log2( bytes calldata callData, bytes32 topic1, bytes32 topic2 ) external onlyTarget {\n', '        uint size = callData.length;\n', '        bytes memory _callData = callData;\n', '        assembly {\n', '            log2(add(_callData, 32), size, topic1, topic2 )\n', '        }\n', '    }\n', '\n', '    function Log3( bytes calldata callData, bytes32 topic1, bytes32 topic2, bytes32 topic3 ) external onlyTarget {\n', '        uint size = callData.length;\n', '        bytes memory _callData = callData;\n', '        assembly {\n', '            log3(add(_callData, 32), size, topic1, topic2, topic3 )\n', '        }\n', '    }\n', '\n', '    function Log4( bytes calldata callData, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4 ) external onlyTarget {\n', '        uint size = callData.length;\n', '        bytes memory _callData = callData;\n', '        assembly {\n', '            log4(add(_callData, 32), size, topic1, topic2, topic3, topic4 )\n', '        }\n', '    }\n', '\n', '    //receive: It is executed on a call to the contract with empty calldata. This is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer()).\n', '    //fallback: can only rely on 2300 gas being available,\n', '    receive() external payable {\n', '        target.setMessageSender(msg.sender);\n', '\n', '        assembly {\n', '            let free_ptr := mload(0x40)\n', '            calldatacopy(free_ptr, 0, calldatasize())\n', '\n', '            let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0)\n', '            returndatacopy(free_ptr, 0, returndatasize())\n', '\n', '            if iszero(result) {\n', '                revert(free_ptr, returndatasize())\n', '            }\n', '            return(free_ptr, returndatasize())\n', '        }\n', '    }\n', '\n', '    modifier onlyTarget {\n', '        require(LnProxyImpl(msg.sender) == target, "Must be proxy target");\n', '        _;\n', '    }\n', '\n', '    event TargetUpdated(LnProxyImpl newTarget);\n', '}\n', '\n', '\n', 'abstract contract LnProxyImpl is LnAdmin {\n', '    \n', '    LnProxyBase public proxy;\n', '    LnProxyBase public integrationProxy;\n', '\n', '    address public messageSender;\n', '\n', '    constructor(address payable _proxy) internal {\n', '        \n', '        require(admin != address(0), "Admin must be set");\n', '\n', '        proxy = LnProxyBase(_proxy);\n', '        emit ProxyUpdated(_proxy);\n', '    }\n', '\n', '    function setProxy(address payable _proxy) external onlyAdmin {\n', '        proxy = LnProxyBase(_proxy);\n', '        emit ProxyUpdated(_proxy);\n', '    }\n', '\n', '    function setIntegrationProxy(address payable _integrationProxy) external onlyAdmin {\n', '        integrationProxy = LnProxyBase(_integrationProxy);\n', '    }\n', '\n', '    function setMessageSender(address sender) external onlyProxy {\n', '        messageSender = sender;\n', '    }\n', '\n', '    modifier onlyProxy {\n', '        require(LnProxyBase(msg.sender) == proxy || LnProxyBase(msg.sender) == integrationProxy, "Only the proxy can call");\n', '        _;\n', '    }\n', '\n', '    modifier optionalProxy {\n', '        if (LnProxyBase(msg.sender) != proxy && LnProxyBase(msg.sender) != integrationProxy && messageSender != msg.sender) {\n', '            messageSender = msg.sender;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier optionalProxy_onlyAdmin {\n', '        if (LnProxyBase(msg.sender) != proxy && LnProxyBase(msg.sender) != integrationProxy && messageSender != msg.sender) {\n', '            messageSender = msg.sender;\n', '        }\n', '        require(messageSender == admin, "only for admin");\n', '        _;\n', '    }\n', '\n', '    event ProxyUpdated(address proxyAddress);\n', '}\n', '\n', 'contract LnErc20Handler is IERC20, LnAdmin, LnProxyImpl {\n', '    using SafeMath for uint;\n', '    using SafeDecimalMath for uint;\n', '\n', '    LnTokenStorage public tokenStorage;\n', '\n', '    string public override name;\n', '    string public override symbol;\n', '    uint public override totalSupply;\n', '    uint8 public override decimals;\n', '\n', '    constructor( address payable _proxy, LnTokenStorage _tokenStorage, string memory _name, \n', '        string memory _symbol, uint _totalSupply, uint8 _decimals, address _admin ) \n', '        public LnAdmin(_admin) LnProxyImpl(_proxy) {\n', '        \n', '        tokenStorage = _tokenStorage;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        totalSupply = _totalSupply;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint) {\n', '        return tokenStorage.allowance(owner, spender);\n', '    }\n', '\n', '    function balanceOf(address account) external view override returns (uint) {\n', '        return tokenStorage.balanceOf(account);\n', '    }\n', '\n', '    function setTokenStorage(LnTokenStorage _tokenStorage) external optionalProxy_onlyAdmin {\n', '        tokenStorage = _tokenStorage;\n', '        emitTokenStorageUpdated(address(tokenStorage));\n', '    }\n', '\n', '    function _internalTransfer( address from, address to, uint value ) internal returns (bool) {\n', '        \n', '        require(to != address(0) && to != address(this) && to != address(proxy), "Cannot transfer to this address");\n', '        _beforeTokenTransfer(from, to, value);\n', '\n', '        tokenStorage.setBalanceOf(from, tokenStorage.balanceOf(from).sub(value));\n', '        tokenStorage.setBalanceOf(to, tokenStorage.balanceOf(to).add(value));\n', '\n', '        emitTransfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transferByProxy(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal returns (bool) {\n', '        return _internalTransfer(from, to, value);\n', '    }\n', '\n', '    function _transferFromByProxy(\n', '        address sender,\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal returns (bool) {\n', '        \n', '        tokenStorage.setAllowance(from, sender, tokenStorage.allowance(from, sender).sub(value));\n', '        return _internalTransfer(from, to, value);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    // default transfer\n', '    function transfer(address to, uint value) external virtual override optionalProxy returns (bool) {\n', '        _transferByProxy(messageSender, to, value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    // default transferFrom\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external virtual override optionalProxy returns (bool) {\n', '        return _transferFromByProxy(messageSender, from, to, value);\n', '    }\n', '\n', '\n', '    function approve(address spender, uint value) public virtual override optionalProxy returns (bool) {\n', '        address sender = messageSender;\n', '\n', '        tokenStorage.setAllowance(sender, spender, value);\n', '        emitApproval(sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function addressToBytes32(address input) internal pure returns (bytes32) {\n', '        return bytes32(uint256(uint160(input)));\n', '    }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    bytes32 internal constant TRANSFER_SIG = keccak256("Transfer(address,address,uint256)");\n', '\n', '    function emitTransfer(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        proxy.Log3( abi.encode(value),  TRANSFER_SIG, addressToBytes32(from), addressToBytes32(to) );\n', '    }\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    bytes32 internal constant APPROVAL_SIG = keccak256("Approval(address,address,uint256)");\n', '\n', '    function emitApproval(\n', '        address owner,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        proxy.Log3( abi.encode(value),  APPROVAL_SIG, addressToBytes32(owner), addressToBytes32(spender) );\n', '    }\n', '\n', '    event TokenStorageUpdated(address newTokenStorage);\n', '    bytes32 internal constant TOKENSTORAGE_UPDATED_SIG = keccak256("TokenStorageUpdated(address)");\n', '\n', '    function emitTokenStorageUpdated(address newTokenStorage) internal {\n', '        proxy.Log1( abi.encode(newTokenStorage), TOKENSTORAGE_UPDATED_SIG );\n', '    }\n', '}\n', '\n', '\n', 'abstract contract LnOperatorModifier is LnAdmin {\n', '    \n', '    address public operator;\n', '\n', '    constructor(address _operator) internal {\n', '        require(admin != address(0), "admin must be set");\n', '\n', '        operator = _operator;\n', '        emit OperatorUpdated(_operator);\n', '    }\n', '\n', '    function setOperator(address _opperator) external onlyAdmin {\n', '        operator = _opperator;\n', '        emit OperatorUpdated(_opperator);\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator, "Only operator can perform this action");\n', '        _;\n', '    }\n', '\n', '    event OperatorUpdated(address operator);\n', '}\n', '\n', '\n', '\n', 'contract LnTokenStorage is LnAdmin, LnOperatorModifier {\n', '    \n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    constructor(address _admin, address _operator) public LnAdmin(_admin) LnOperatorModifier(_operator) {}\n', '\n', '    function setAllowance(address tokenOwner, address spender, uint value) external onlyOperator {\n', '        allowance[tokenOwner][spender] = value;\n', '    }\n', '\n', '    function setBalanceOf(address account, uint value) external onlyOperator {\n', '        balanceOf[account] = value;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract LinearFinance is LnErc20Handler {\n', '    \n', '    string public constant TOKEN_NAME = "Linear Token";\n', '    string public constant TOKEN_SYMBOL = "LINA";\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    constructor(\n', '        address payable _proxy,\n', '        LnTokenStorage _tokenStorage,\n', '        address _admin,\n', '        uint _totalSupply\n', '    )\n', '        public\n', '        LnErc20Handler(_proxy, _tokenStorage, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _admin)\n', '    {\n', '    }\n', '    \n', '    //\n', '    function _mint(address account, uint256 amount) private  {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        tokenStorage.setBalanceOf(account, tokenStorage.balanceOf(account).add(amount));\n', '        totalSupply = totalSupply.add(amount);\n', '\n', '        emitTransfer(address(0), account, amount);\n', '    }\n', '\n', '    function mint(address account, uint256 amount) external onlyAdmin {\n', '        _mint(account, amount);\n', '    }\n', '\n', '   function _burn(address account, uint256 amount) private {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        tokenStorage.setBalanceOf(account, tokenStorage.balanceOf(account).sub(amount));\n', '        totalSupply = totalSupply.sub(amount);\n', '        emitTransfer(account, address(0), amount);\n', '    }\n', '\n', '    //function burn(address account, uint256 amount) external onlyAdmin {\n', '    //    _burn(account, amount);\n', '    //}\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused, "ERC20Pausable: token transfer while paused");\n', '    }\n', '\n', '    ////////////////////////////////////////////////////// paused\n', '    bool public paused = false;\n', '    modifier notPaused {\n', '        require(!paused, "This action cannot be performed while the contract is paused");\n', '        _;\n', '    }\n', '    function setPaused(bool _paused) external onlyAdmin {\n', '        if (_paused == paused) {\n', '            return;\n', '        }\n', '        paused = _paused;\n', '        emit PauseChanged(paused);\n', '    }\n', '\n', '    //////////////////////////////////////////////////////\n', '    event PauseChanged(bool isPaused);\n', '}']