['pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20Token {\n', '\tfunction balanceOf(address) external pure returns (uint256);\n', '}\n', '\n', 'interface UniswapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface UniswapV2Pair {\n', '\tstruct reserves {\n', '\t\tuint112 reserve0;\n', '\t\tuint112 reserve1;\n', '\t\tuint32 blockTimestampLast;\n', '\t}\n', '\tfunction getReserves() external view returns (reserves memory);\n', '\tfunction token0() external view returns (address);\n', '\tfunction token1() external view returns (address);\n', '}\n', '\n', '\n', 'contract Oracle {\n', '    \n', '    UniswapFactory public univ2Factory = UniswapFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '    \n', '    function getPairs(uint256 start) public view returns (address[] memory) {\n', '        uint256 length = univ2Factory.allPairsLength();\n', '        address[] memory out = new address[](length-start);\n', '        for(uint256 i = start; i < length; i++){\n', '            out[i-start] = univ2Factory.allPairs(i);\n', '        }\n', '        return out;\n', '    }\n', '    \n', '    function getAllPairs() public view returns (address[] memory) {\n', '        return getPairs(0);\n', '    }\n', '}']