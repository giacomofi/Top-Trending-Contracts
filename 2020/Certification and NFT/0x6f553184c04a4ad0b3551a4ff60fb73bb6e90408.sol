['pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'interface ITokensTypeStorage {\n', '  function isRegistred(address _address) external view returns(bool);\n', '\n', '  function getType(address _address) external view returns(bytes32);\n', '\n', '  function isPermittedAddress(address _address) external view returns(bool);\n', '\n', '  function owner() external view returns(address);\n', '\n', '  function addNewTokenType(address _token, string calldata _type) external;\n', '\n', '  function setTokenTypeAsOwner(address _token, string calldata _type) external;\n', '}\n', 'interface IBalancerPool {\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '    function getCurrentTokens() external view returns (address[] memory tokens);\n', '}\n', 'interface IUniswapV2Pair {\n', '  function token0() external view returns (address);\n', '  function token1() external view returns (address);\n', '}\n', 'interface IUniswapV2Router {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', 'interface UniswapFactoryInterfaceV1 {\n', '    // Create Exchange\n', '    function createExchange(address token) external returns (address exchange);\n', '    // Get Exchange and Token Info\n', '    function getExchange(address token) external view returns (address exchange);\n', '    function getToken(address exchange) external view returns (address token);\n', '    function getTokenWithId(uint256 tokenId) external view returns (address token);\n', '    // Never use\n', '    function initializeFactory(address template) external;\n', '}\n', 'interface UniswapExchangeInterface {\n', '    // Address of ERC20 token sold on this exchange\n', '    function tokenAddress() external view returns (address token);\n', '    // Address of Uniswap Factory\n', '    function factoryAddress() external view returns (address factory);\n', '    // Provide Liquidity\n', '    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n', '    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n', '    // Get Prices\n', '    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n', '    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n', '    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n', '    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n', '    // Trade ETH to ERC20\n', '    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n', '    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n', '    // Trade ERC20 to ETH\n', '    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n', '    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n', '    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n', '    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to ERC20\n', '    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n', '    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to Custom Pool\n', '    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n', '    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n', '\n', '    // ERC20 comaptibility for liquidity tokens\n', '    function name() external view returns(bytes32);\n', '    function symbol() external view returns(bytes32);\n', '    function decimals() external view returns(uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    // Never use\n', '    function setup(address token_addr) external;\n', '}\n', 'interface IBancorFormula {\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount) external view returns (uint256);\n', '    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount) external view returns (uint256);\n', '    function calculateCrossReserveReturn(uint256 _fromReserveBalance, uint32 _fromReserveRatio, uint256 _toReserveBalance, uint32 _toReserveRatio, uint256 _amount) external view returns (uint256);\n', '    function calculateFundCost(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\n', '    function calculateLiquidateReturn(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\n', '}\n', 'interface SmartTokenInterface {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '  function disableTransfers(bool _disable) external;\n', '  function issue(address _to, uint256 _amount) external;\n', '  function destroy(address _from, uint256 _amount) external;\n', '  function owner() external view returns (address);\n', '}\n', '\n', '\n', 'interface IGetBancorData {\n', '  function getBancorContractAddresByName(string calldata _name) external view returns (address result);\n', '  function getBancorRatioForAssets(IERC20 _from, IERC20 _to, uint256 _amount) external view returns(uint256 result);\n', '  function getBancorPathForAssets(IERC20 _from, IERC20 _to) external view returns(address[] memory);\n', '}\n', '\n', '\n', 'interface BancorConverterInterfaceV2 {\n', '  function addLiquidity(address _reserveToken, uint256 _amount, uint256 _minReturn) external payable;\n', '  function removeLiquidity(address _poolToken, uint256 _amount, uint256 _minReturn) external;\n', '\n', '  function poolToken(address _reserveToken) external view returns(address);\n', '  function connectorTokenCount() external view returns (uint16);\n', '  function connectorTokens(uint index) external view returns(IERC20);\n', '}\n', '\n', '\n', 'interface BancorConverterInterfaceV1 {\n', '\n', '  function addLiquidity(\n', '    address[] calldata _reserveTokens,\n', '    uint256[] calldata _reserveAmounts,\n', '    uint256 _minReturn) external payable;\n', '\n', '  function removeLiquidity(\n', '    uint256 _amount,\n', '    address[] calldata _reserveTokens,\n', '    uint256[] calldata _reserveMinReturnAmounts) external;\n', '}\n', '\n', '\n', 'interface BancorConverterInterface {\n', '  function connectorTokens(uint index) external view returns(IERC20);\n', '  function fund(uint256 _amount) external payable;\n', '  function liquidate(uint256 _amount) external;\n', '  function getConnectorBalance(IERC20 _connectorToken) external view returns (uint256);\n', '  function connectorTokenCount() external view returns (uint16);\n', '}\n', '\n', '\n', '/*\n', '* This contract allow buy/sell pool for Bancor and Uniswap assets\n', '* and provide ratio and addition info for pool assets\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PoolPortal is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  uint public version = 4;\n', '\n', '  IGetBancorData public bancorData;\n', '  UniswapFactoryInterfaceV1 public uniswapFactoryV1;\n', '  IUniswapV2Router public uniswapV2Router;\n', '\n', '  // CoTrader platform recognize ETH by this address\n', '  IERC20 constant private ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '  // Enum\n', '  // NOTE: You can add a new type at the end, but do not change this order\n', '  enum PortalType { Bancor, Uniswap, Balancer }\n', '\n', '  // events\n', '  event BuyPool(address poolToken, uint256 amount, address trader);\n', '  event SellPool(address poolToken, uint256 amount, address trader);\n', '\n', '  // Contract for handle tokens types\n', '  ITokensTypeStorage public tokensTypes;\n', '\n', '\n', '  /**\n', '  * @dev contructor\n', '  *\n', '  * @param _bancorData               address of helper contract GetBancorData\n', '  * @param _uniswapFactoryV1         address of Uniswap V1 factory contract\n', '  * @param _uniswapV2Router          address of Uniswap V2 router\n', '  * @param _tokensTypes              address of the ITokensTypeStorage\n', '  */\n', '  constructor(\n', '    address _bancorData,\n', '    address _uniswapFactoryV1,\n', '    address _uniswapV2Router,\n', '    address _tokensTypes\n', '\n', '  )\n', '  public\n', '  {\n', '    bancorData = IGetBancorData(_bancorData);\n', '    uniswapFactoryV1 = UniswapFactoryInterfaceV1(_uniswapFactoryV1);\n', '    uniswapV2Router = IUniswapV2Router(_uniswapV2Router);\n', '    tokensTypes = ITokensTypeStorage(_tokensTypes);\n', '  }\n', '\n', '  /**\n', '  * @dev this function provide necessary data for buy a old BNT and UNI v1 pools by input amount\n', '  *\n', '  * @param _amount     amount of pool token (NOTE: amount of ETH for Uniswap)\n', '  * @param _type       pool type\n', '  * @param _poolToken  pool token address\n', '  */\n', '  function getDataForBuyingPool(IERC20 _poolToken, uint _type, uint256 _amount)\n', '    public\n', '    view\n', '    returns(\n', '      address[] memory connectorsAddress,\n', '      uint256[] memory connectorsAmount\n', '    )\n', '  {\n', '    // Buy Bancor pool\n', '    if(_type == uint(PortalType.Bancor)){\n', '      // get Bancor converter\n', '      address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 0);\n', '      // get converter as contract\n', '      BancorConverterInterface converter = BancorConverterInterface(converterAddress);\n', '      uint256 connectorsCount = converter.connectorTokenCount();\n', '\n', '      // create arrays for data\n', '      connectorsAddress = new address[](connectorsCount);\n', '      connectorsAmount = new uint256[](connectorsCount);\n', '\n', '      // push data\n', '      for(uint8 i = 0; i < connectorsCount; i++){\n', '        // get current connector address\n', '        IERC20 currentConnector = converter.connectorTokens(i);\n', '        // push address of current connector\n', '        connectorsAddress[i] = address(currentConnector);\n', '        // push amount for current connector\n', '        connectorsAmount[i] = getBancorConnectorsAmountByRelayAmount(\n', '          _amount, _poolToken, address(currentConnector));\n', '      }\n', '    }\n', '    // Buy Uniswap pool\n', '    else if(_type == uint(PortalType.Uniswap)){\n', '      // get token address\n', '      address tokenAddress = uniswapFactoryV1.getToken(address(_poolToken));\n', '      // get tokens amd approve to exchange\n', '      uint256 erc20Amount = getUniswapTokenAmountByETH(tokenAddress, _amount);\n', '\n', '      // return data\n', '      connectorsAddress = new address[](2);\n', '      connectorsAmount = new uint256[](2);\n', '      connectorsAddress[0] = address(ETH_TOKEN_ADDRESS);\n', '      connectorsAddress[1] = tokenAddress;\n', '      connectorsAmount[0] = _amount;\n', '      connectorsAmount[1] = erc20Amount;\n', '\n', '    }\n', '    else {\n', '      revert("Unknown pool type");\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev buy Bancor or Uniswap pool\n', '  *\n', '  * @param _amount             amount of pool token\n', '  * @param _type               pool type\n', "  * @param _poolToken          pool token address (NOTE: for Bancor type 2 don't forget extract pool address from container)\n", '  * @param _connectorsAddress  address of pool connectors (NOTE: for Uniswap ETH should be pass in [0], ERC20 in [1])\n', '  * @param _connectorsAmount   amount of pool connectors (NOTE: for Uniswap ETH amount should be pass in [0], ERC20 in [1])\n', '  * @param _additionalArgs     bytes32 array for case if need pass some extra params, can be empty\n', '  * @param _additionalData     for provide any additional data, if not used just set "0x",\n', '  * for Bancor _additionalData[0] should be converterVersion and _additionalData[1] should be converterType\n', '  *\n', '  */\n', '  function buyPool\n', '  (\n', '    uint256 _amount,\n', '    uint _type,\n', '    address _poolToken,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '  external\n', '  payable\n', '  returns(uint256 poolAmountReceive, uint256[] memory connectorsSpended)\n', '  {\n', '    // Buy Bancor pool\n', '    if(_type == uint(PortalType.Bancor)){\n', '      (poolAmountReceive) = buyBancorPool(\n', '        _amount,\n', '        _poolToken,\n', '        _connectorsAddress,\n', '        _connectorsAmount,\n', '        _additionalArgs,\n', '        _additionalData\n', '      );\n', '    }\n', '    // Buy Uniswap pool\n', '    else if (_type == uint(PortalType.Uniswap)){\n', '      (poolAmountReceive) = buyUniswapPool(\n', '        _amount,\n', '        _poolToken,\n', '        _connectorsAddress,\n', '        _connectorsAmount,\n', '        _additionalArgs,\n', '        _additionalData\n', '      );\n', '    }\n', '    // Buy Balancer pool\n', '    else if (_type == uint(PortalType.Balancer)){\n', '      (poolAmountReceive) = buyBalancerPool(\n', '        _amount,\n', '        _poolToken,\n', '        _connectorsAddress,\n', '        _connectorsAmount\n', '      );\n', '    }\n', '    else{\n', '      // unknown portal type\n', '      revert("Unknown portal type");\n', '    }\n', '\n', '    // transfer pool token to fund\n', '    IERC20(_poolToken).transfer(msg.sender, poolAmountReceive);\n', '\n', '    // transfer connectors remains to fund\n', '    // and calculate how much connectors was spended (current - remains)\n', '    connectorsSpended = _transferPoolConnectorsRemains(\n', '      _connectorsAddress,\n', '      _connectorsAmount);\n', '\n', '    // trigger event\n', '    emit BuyPool(address(_poolToken), poolAmountReceive, msg.sender);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buying Bancor pool token by a certain converter version and converter type\n', '  * Bancor has 3 cases for different converter version and type\n', '  */\n', '  function buyBancorPool(\n', '    uint256 _amount,\n', '    address _poolToken,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '    private\n', '    returns(uint256 poolAmountReceive)\n', '  {\n', '    // get Bancor converter address by pool token and pool type\n', '    address converterAddress = getBacorConverterAddressByRelay(\n', '      _poolToken,\n', '      uint256(_additionalArgs[1])\n', '    );\n', '\n', '    // transfer from sender and approve to converter\n', '    // for detect if there are ETH in connectors or not we use etherAmount\n', '    uint256 etherAmount = _approvePoolConnectors(\n', '      _connectorsAddress,\n', '      _connectorsAmount,\n', '      converterAddress\n', '    );\n', '\n', '    // Buy Bancor pool according converter version and type\n', '    // encode and compare converter version\n', '    if(uint256(_additionalArgs[0]) >= 28) {\n', '      // encode and compare converter type\n', '      if(uint256(_additionalArgs[1]) == 2) {\n', '        // buy Bancor v2 case\n', '        _buyBancorPoolV2(\n', '          converterAddress,\n', '          etherAmount,\n', '          _connectorsAddress,\n', '          _connectorsAmount,\n', '          _additionalData\n', '        );\n', '      } else{\n', '        // buy Bancor v1 case\n', '        _buyBancorPoolV1(\n', '          converterAddress,\n', '          etherAmount,\n', '          _connectorsAddress,\n', '          _connectorsAmount,\n', '          _additionalData\n', '        );\n', '      }\n', '    }\n', '    else {\n', '      // buy Bancor old v0 case\n', '      _buyBancorPoolOldV(\n', '        converterAddress,\n', '        etherAmount,\n', '        _amount\n', '      );\n', '    }\n', '\n', '    // get recieved pool amount\n', '    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\n', '    // make sure we recieved pool\n', '    require(poolAmountReceive > 0, "ERR BNT pool received 0");\n', '    // set token type for this asset\n', '    tokensTypes.addNewTokenType(_poolToken, "BANCOR_ASSET");\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buy pool in Bancor network for old converter version\n', '  */\n', '  function _buyBancorPoolOldV(\n', '    address converterAddress,\n', '    uint256 etherAmount,\n', '    uint256 _amount)\n', '   private\n', '  {\n', '    // get converter as contract\n', '    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\n', '    // buy relay from converter\n', '    if(etherAmount > 0){\n', '      // payable\n', '      converter.fund.value(etherAmount)(_amount);\n', '    }else{\n', '      // non payable\n', '      converter.fund(_amount);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buy pool in Bancor network for new converter type 1\n', '  */\n', '  function _buyBancorPoolV1(\n', '    address converterAddress,\n', '    uint256 etherAmount,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes memory _additionalData\n', '  )\n', '    private\n', '  {\n', '    BancorConverterInterfaceV1 converter = BancorConverterInterfaceV1(converterAddress);\n', '    // get additional data\n', '    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\n', '    // buy relay from converter\n', '    if(etherAmount > 0){\n', '      // payable\n', '      converter.addLiquidity.value(etherAmount)(_connectorsAddress, _connectorsAmount, minReturn);\n', '    }else{\n', '      // non payable\n', '      converter.addLiquidity(_connectorsAddress, _connectorsAmount, minReturn);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev helper for buy pool in Bancor network for new converter type 2\n', '  */\n', '  function _buyBancorPoolV2(\n', '    address converterAddress,\n', '    uint256 etherAmount,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes memory _additionalData\n', '  )\n', '    private\n', '  {\n', '    // get converter as contract\n', '    BancorConverterInterfaceV2 converter = BancorConverterInterfaceV2(converterAddress);\n', '    // get additional data\n', '    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\n', '\n', '    // buy relay from converter\n', '    if(etherAmount > 0){\n', '      // payable\n', '      converter.addLiquidity.value(etherAmount)(_connectorsAddress[0], _connectorsAmount[0], minReturn);\n', '    }else{\n', '      // non payable\n', '      converter.addLiquidity(_connectorsAddress[0], _connectorsAmount[0], minReturn);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buying Uniswap v1 or v2 pool\n', '  */\n', '  function buyUniswapPool(\n', '    uint256 _amount,\n', '    address _poolToken,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '   private\n', '   returns(uint256 poolAmountReceive)\n', '  {\n', '    // define spender dependse of UNI pool version\n', '    address spender = uint256(_additionalArgs[0]) == 1\n', '    ? _poolToken\n', '    : address(uniswapV2Router);\n', '\n', '    // approve pool tokens to Uni pool exchange\n', '    _approvePoolConnectors(\n', '      _connectorsAddress,\n', '      _connectorsAmount,\n', '      spender);\n', '\n', '    // Buy Uni pool dependse of version\n', '    if(uint256(_additionalArgs[0]) == 1){\n', '      _buyUniswapPoolV1(\n', '        _poolToken,\n', '        _connectorsAddress[1], // connector ERC20 token address\n', '        _connectorsAmount[1],  // connector ERC20 token amount\n', '        _amount);\n', '    }else{\n', '      _buyUniswapPoolV2(\n', '        _poolToken,\n', '        _connectorsAddress,\n', '        _connectorsAmount,\n', '        _additionalData\n', '        );\n', '    }\n', '    // get pool amount\n', '    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\n', '    // check if we recieved pool token\n', '    require(poolAmountReceive > 0, "ERR UNI pool received 0");\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buy pool in Uniswap network v1\n', '  *\n', '  * @param _poolToken        address of Uniswap exchange\n', '  * @param _tokenAddress     address of ERC20 conenctor\n', '  * @param _erc20Amount      amount of ERC20 connector\n', '  * @param _ethAmount        ETH amount (in wei)\n', '  */\n', '  function _buyUniswapPoolV1(\n', '    address _poolToken,\n', '    address _tokenAddress,\n', '    uint256 _erc20Amount,\n', '    uint256 _ethAmount\n', '  )\n', '   private\n', '  {\n', '    require(_ethAmount == msg.value, "Not enough ETH");\n', '    // get exchange contract\n', '    UniswapExchangeInterface exchange = UniswapExchangeInterface(_poolToken);\n', '    // set deadline\n', '    uint256 deadline = now + 15 minutes;\n', '    // buy pool\n', '    exchange.addLiquidity.value(_ethAmount)(\n', '      1,\n', '      _erc20Amount,\n', '      deadline\n', '    );\n', '    // Set token type\n', '    tokensTypes.addNewTokenType(_poolToken, "UNISWAP_POOL");\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buy pool in Uniswap network v2\n', '  */\n', '  function _buyUniswapPoolV2(\n', '    address _poolToken,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount,\n', '    bytes calldata _additionalData\n', '  )\n', '   private\n', '  {\n', '    // set deadline\n', '    uint256 deadline = now + 15 minutes;\n', '    // get additional data\n', '    (uint256 amountAMinReturn,\n', '      uint256 amountBMinReturn) = abi.decode(_additionalData, (uint256, uint256));\n', '\n', '    // Buy UNI V2 pool\n', '    // ETH connector case\n', '    if(_connectorsAddress[0] == address(ETH_TOKEN_ADDRESS)){\n', '      uniswapV2Router.addLiquidityETH.value(_connectorsAmount[0])(\n', '       _connectorsAddress[1],\n', '       _connectorsAmount[1],\n', '       amountBMinReturn,\n', '       amountAMinReturn,\n', '       address(this),\n', '       deadline\n', '      );\n', '    }\n', '    // ERC20 connector case\n', '    else{\n', '      uniswapV2Router.addLiquidity(\n', '        _connectorsAddress[0],\n', '        _connectorsAddress[1],\n', '        _connectorsAmount[0],\n', '        _connectorsAmount[1],\n', '        amountAMinReturn,\n', '        amountBMinReturn,\n', '        address(this),\n', '        deadline\n', '      );\n', '    }\n', '    // Set token type\n', '    tokensTypes.addNewTokenType(_poolToken, "UNISWAP_POOL_V2");\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for buying Balancer pool\n', '  */\n', '  function buyBalancerPool(\n', '    uint256 _amount,\n', '    address _poolToken,\n', '    address[] calldata _connectorsAddress,\n', '    uint256[] calldata _connectorsAmount\n', '  )\n', '    private\n', '    returns(uint256 poolAmountReceive)\n', '  {\n', '    // approve pool tokens to Balancer pool exchange\n', '    _approvePoolConnectors(\n', '      _connectorsAddress,\n', '      _connectorsAmount,\n', '      _poolToken);\n', '    // buy pool\n', '    IBalancerPool(_poolToken).joinPool(_amount, _connectorsAmount);\n', '    // get balance\n', '    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\n', '    // check\n', '    require(poolAmountReceive > 0, "ERR BALANCER pool received 0");\n', '    // update type\n', '    tokensTypes.addNewTokenType(_poolToken, "BALANCER_POOL");\n', '  }\n', '\n', '  /**\n', '  * @dev helper for buying BNT or UNI pools, approve connectors from msg.sender to spender address\n', '  * return ETH amount if connectorsAddress contains ETH address\n', '  */\n', '  function _approvePoolConnectors(\n', '    address[] memory connectorsAddress,\n', '    uint256[] memory connectorsAmount,\n', '    address spender\n', '  )\n', '    private\n', '    returns(uint256 etherAmount)\n', '  {\n', '    // approve from portal to spender\n', '    for(uint8 i = 0; i < connectorsAddress.length; i++){\n', '      if(connectorsAddress[i] != address(ETH_TOKEN_ADDRESS)){\n', '        // transfer from msg.sender and approve to\n', '        _transferFromSenderAndApproveTo(\n', '          IERC20(connectorsAddress[i]),\n', '          connectorsAmount[i],\n', '          spender);\n', '      }else{\n', '        etherAmount = connectorsAmount[i];\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev helper for buying BNT or UNI pools, transfer ERC20 tokens and ETH remains after bying pool,\n', '  * if the balance is positive on this contract, and calculate how many assets was spent.\n', '  */\n', '  function _transferPoolConnectorsRemains(\n', '    address[] memory connectorsAddress,\n', '    uint256[] memory currentConnectorsAmount\n', '  )\n', '    private\n', '    returns (uint256[] memory connectorsSpended)\n', '  {\n', '    // set length for connectorsSpended\n', '    connectorsSpended = new uint256[](currentConnectorsAmount.length);\n', '\n', '    // transfer connectors back to fund if some amount remains\n', '    uint256 remains = 0;\n', '    for(uint8 i = 0; i < connectorsAddress.length; i++){\n', '      // ERC20 case\n', '      if(connectorsAddress[i] != address(ETH_TOKEN_ADDRESS)){\n', '        // check balance\n', '        remains = IERC20(connectorsAddress[i]).balanceOf(address(this));\n', '        // transfer ERC20\n', '        if(remains > 0)\n', '           IERC20(connectorsAddress[i]).transfer(msg.sender, remains);\n', '      }\n', '      // ETH case\n', '      else {\n', '        remains = address(this).balance;\n', '        // transfer ETH\n', '        if(remains > 0)\n', '           (msg.sender).transfer(remains);\n', '      }\n', '\n', '      // calculate how many assets was spent\n', '      connectorsSpended[i] = currentConnectorsAmount[i].sub(remains);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev return token ration in ETH in Uniswap network\n', '  *\n', '  * @param _token     address of ERC20 token\n', '  * @param _amount    ETH amount\n', '  */\n', '  function getUniswapTokenAmountByETH(address _token, uint256 _amount)\n', '    public\n', '    view\n', '    returns(uint256)\n', '  {\n', '    UniswapExchangeInterface exchange = UniswapExchangeInterface(\n', '      uniswapFactoryV1.getExchange(_token));\n', '\n', '    return exchange.getTokenToEthOutputPrice(_amount);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev sell Bancor or Uniswap pool\n', '  *\n', '  * @param _amount            amount of pool token\n', '  * @param _type              pool type\n', '  * @param _poolToken         pool token address\n', '  * @param _additionalArgs    bytes32 array for case if need pass some extra params, can be empty\n', '  * @param _additionalData    for provide any additional data, if not used just set "0x"\n', '  */\n', '  function sellPool\n', '  (\n', '    uint256 _amount,\n', '    uint _type,\n', '    IERC20 _poolToken,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '  external\n', '  returns(\n', '    address[] memory connectorsAddress,\n', '    uint256[] memory connectorsAmount\n', '  )\n', '  {\n', '    // sell Bancor Pool\n', '    if(_type == uint(PortalType.Bancor)){\n', '      (connectorsAddress, connectorsAmount) = sellBancorPool(\n', '         _amount,\n', '         _poolToken,\n', '        _additionalArgs,\n', '        _additionalData);\n', '    }\n', '    // sell Uniswap pool\n', '    else if (_type == uint(PortalType.Uniswap)){\n', '      (connectorsAddress, connectorsAmount) = sellUniswapPool(\n', '        _poolToken,\n', '        _amount,\n', '        _additionalArgs,\n', '        _additionalData);\n', '    }\n', '    // sell Balancer pool\n', '    else if (_type == uint(PortalType.Balancer)){\n', '      (connectorsAddress, connectorsAmount) = sellBalancerPool(\n', '        _amount,\n', '        _poolToken,\n', '        _additionalData);\n', '    }\n', '    else{\n', '      revert("Unknown portal type");\n', '    }\n', '\n', '    emit SellPool(address(_poolToken), _amount, msg.sender);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '  * @dev helper for sell pool in Bancor network dependse of converter version and type\n', '  */\n', '  function sellBancorPool(\n', '    uint256 _amount,\n', '    IERC20 _poolToken,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '  private\n', '  returns(\n', '    address[] memory connectorsAddress,\n', '    uint256[] memory connectorsAmount\n', '  )\n', '  {\n', '    // transfer pool from fund\n', '    _poolToken.transferFrom(msg.sender, address(this), _amount);\n', '\n', '    // get Bancor converter version and type\n', '    uint256 bancorPoolVersion = uint256(_additionalArgs[0]);\n', '    uint256 bancorConverterType = uint256(_additionalArgs[1]);\n', '\n', '    // sell pool according converter version and type\n', '    if(bancorPoolVersion >= 28){\n', '      // sell new Bancor v2 pool\n', '      if(bancorConverterType == 2){\n', '        (connectorsAddress) = sellPoolViaBancorV2(\n', '          _poolToken,\n', '          _amount,\n', '          _additionalData\n', '        );\n', '      }\n', '      // sell new Bancor v1 pool\n', '      else{\n', '        (connectorsAddress) = sellPoolViaBancorV1(_poolToken, _amount, _additionalData);\n', '      }\n', '    }\n', '    // sell old Bancor pool\n', '    else{\n', '      (connectorsAddress) = sellPoolViaBancorOldV(_poolToken, _amount);\n', '    }\n', '\n', '    // transfer pool connectors back to fund\n', '    connectorsAmount = transferConnectorsToSender(connectorsAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell pool in Bancor network for old converter version\n', '  *\n', '  * @param _poolToken        address of bancor relay\n', '  * @param _amount           amount of bancor relay\n', '  */\n', '  function sellPoolViaBancorOldV(IERC20 _poolToken, uint256 _amount)\n', '   private\n', '   returns(address[] memory connectorsAddress)\n', '  {\n', '    // get Bancor Converter instance\n', '    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 0);\n', '    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\n', '\n', '    // liquidate relay\n', '    converter.liquidate(_amount);\n', '\n', '    // return connectors addresses\n', '    uint256 connectorsCount = converter.connectorTokenCount();\n', '    connectorsAddress = new address[](connectorsCount);\n', '\n', '    for(uint8 i = 0; i<connectorsCount; i++){\n', '      connectorsAddress[i] = address(converter.connectorTokens(i));\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for sell pool in Bancor network converter type v1\n', '  */\n', '  function sellPoolViaBancorV1(\n', '    IERC20 _poolToken,\n', '    uint256 _amount,\n', '    bytes memory _additionalData\n', '  )\n', '   private\n', '   returns(address[] memory connectorsAddress)\n', '  {\n', '    // get Bancor Converter address\n', '    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 1);\n', '    // get min returns\n', '    uint256[] memory reserveMinReturnAmounts;\n', '    // get connetor tokens data for remove liquidity\n', '    (connectorsAddress, reserveMinReturnAmounts) = abi.decode(_additionalData, (address[], uint256[]));\n', '    // get coneverter v1 contract\n', '    BancorConverterInterfaceV1 converter = BancorConverterInterfaceV1(converterAddress);\n', '    // remove liquidity (v1)\n', '    converter.removeLiquidity(_amount, connectorsAddress, reserveMinReturnAmounts);\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell pool in Bancor network converter type v2\n', '  */\n', '  function sellPoolViaBancorV2(\n', '    IERC20 _poolToken,\n', '    uint256 _amount,\n', '    bytes calldata _additionalData\n', '  )\n', '   private\n', '   returns(address[] memory connectorsAddress)\n', '  {\n', '    // get Bancor Converter address\n', '    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 2);\n', '    // get converter v2 contract\n', '    BancorConverterInterfaceV2 converter = BancorConverterInterfaceV2(converterAddress);\n', '    // get additional data\n', '    uint256 minReturn;\n', '    // get pool connectors\n', '    (connectorsAddress, minReturn) = abi.decode(_additionalData, (address[], uint256));\n', '    // remove liquidity (v2)\n', '    converter.removeLiquidity(address(_poolToken), _amount, minReturn);\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell pool in Uniswap network for v1 and v2\n', '  */\n', '  function sellUniswapPool(\n', '    IERC20 _poolToken,\n', '    uint256 _amount,\n', '    bytes32[] calldata _additionalArgs,\n', '    bytes calldata _additionalData\n', '  )\n', '   private\n', '   returns(\n', '     address[] memory connectorsAddress,\n', '     uint256[] memory connectorsAmount\n', '  )\n', '  {\n', '    // define spender dependse of UNI pool version\n', '    address spender = uint256(_additionalArgs[0]) == 1\n', '    ? address(_poolToken)\n', '    : address(uniswapV2Router);\n', '\n', '    // approve pool token\n', '    _transferFromSenderAndApproveTo(_poolToken, _amount, spender);\n', '\n', '    // sell Uni v1 or v2 pool\n', '    if(uint256(_additionalArgs[0]) == 1){\n', '      (connectorsAddress) = sellPoolViaUniswapV1(_poolToken, _amount);\n', '    }else{\n', '      (connectorsAddress) = sellPoolViaUniswapV2(_amount, _additionalData);\n', '    }\n', '\n', '    // transfer pool connectors back to fund\n', '    connectorsAmount = transferConnectorsToSender(connectorsAddress);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for sell pool in Uniswap network v1\n', '  */\n', '  function sellPoolViaUniswapV1(\n', '    IERC20 _poolToken,\n', '    uint256 _amount\n', '  )\n', '    private\n', '    returns(address[] memory connectorsAddress)\n', '  {\n', '    // get token by pool token\n', '    address tokenAddress = uniswapFactoryV1.getToken(address(_poolToken));\n', '    // check if such a pool exist\n', '    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\n', '      // get UNI exchane\n', '      UniswapExchangeInterface exchange = UniswapExchangeInterface(address(_poolToken));\n', '\n', '      // get min returns\n', '      (uint256 minEthAmount,\n', '       uint256 minErcAmount) = getUniswapConnectorsAmountByPoolAmount(_amount, address(_poolToken));\n', '\n', '      // set deadline\n', '      uint256 deadline = now + 15 minutes;\n', '\n', '      // liquidate\n', '      exchange.removeLiquidity(\n', '         _amount,\n', '         minEthAmount,\n', '         minErcAmount,\n', '         deadline);\n', '\n', '      // return data\n', '      connectorsAddress = new address[](2);\n', '      connectorsAddress[0] = address(ETH_TOKEN_ADDRESS);\n', '      connectorsAddress[1] = tokenAddress;\n', '    }\n', '    else{\n', '      revert("Not exist UNI v1 pool");\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell pool in Uniswap network v2\n', '  */\n', '  function sellPoolViaUniswapV2(\n', '    uint256 _amount,\n', '    bytes calldata _additionalData\n', '  )\n', '    private\n', '    returns(address[] memory connectorsAddress)\n', '  {\n', '    // get additional data\n', '    uint256 minReturnA;\n', '    uint256 minReturnB;\n', '\n', '    // get connectors and min return from bytes\n', '    (connectorsAddress,\n', '      minReturnA,\n', '      minReturnB) = abi.decode(_additionalData, (address[], uint256, uint256));\n', '\n', '    // get deadline\n', '    uint256 deadline = now + 15 minutes;\n', '\n', '    // sell pool with include eth connector\n', '    if(connectorsAddress[0] == address(ETH_TOKEN_ADDRESS)){\n', '      uniswapV2Router.removeLiquidityETH(\n', '          connectorsAddress[1],\n', '          _amount,\n', '          minReturnB,\n', '          minReturnA,\n', '          address(this),\n', '          deadline\n', '      );\n', '    }\n', '    // sell pool only with erc20 connectors\n', '    else{\n', '      uniswapV2Router.removeLiquidity(\n', '          connectorsAddress[0],\n', '          connectorsAddress[1],\n', '          _amount,\n', '          minReturnA,\n', '          minReturnB,\n', '          address(this),\n', '          deadline\n', '      );\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell Balancer pool\n', '  */\n', '\n', '  function sellBalancerPool(\n', '    uint256 _amount,\n', '    IERC20 _poolToken,\n', '    bytes calldata _additionalData\n', '  )\n', '  private\n', '  returns(\n', '    address[] memory connectorsAddress,\n', '    uint256[] memory connectorsAmount\n', '  )\n', '  {\n', '    // get additional data\n', '    uint256[] memory minConnectorsAmount;\n', '    (connectorsAddress,\n', '      minConnectorsAmount) = abi.decode(_additionalData, (address[], uint256[]));\n', '    // approve pool\n', '    _transferFromSenderAndApproveTo(\n', '      _poolToken,\n', '      _amount,\n', '      address(_poolToken));\n', '    // sell pool\n', '    IBalancerPool(address(_poolToken)).exitPool(_amount, minConnectorsAmount);\n', '    // transfer connectors back to fund\n', '    connectorsAmount = transferConnectorsToSender(connectorsAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev helper for sell Bancor and Uniswap pools\n', '  * transfer pool connectors from sold pool back to sender\n', '  * return array with amount of recieved connectors\n', '  */\n', '  function transferConnectorsToSender(address[] memory connectorsAddress)\n', '    private\n', '    returns(uint256[] memory connectorsAmount)\n', '  {\n', '    // define connectors amount length\n', '    connectorsAmount = new uint256[](connectorsAddress.length);\n', '\n', '    uint256 received = 0;\n', '    // transfer connectors back to fund\n', '    for(uint8 i = 0; i < connectorsAddress.length; i++){\n', '      // ETH case\n', '      if(connectorsAddress[i] == address(ETH_TOKEN_ADDRESS)){\n', '        // update ETH data\n', '        received = address(this).balance;\n', '        connectorsAmount[i] = received;\n', '        // tarnsfer ETH\n', '        if(received > 0)\n', '          payable(msg.sender).transfer(received);\n', '      }\n', '      // ERC20 case\n', '      else{\n', '        // update ERC20 data\n', '        received = IERC20(connectorsAddress[i]).balanceOf(address(this));\n', '        connectorsAmount[i] = received;\n', '        // transfer ERC20\n', '        if(received > 0)\n', '          IERC20(connectorsAddress[i]).transfer(msg.sender, received);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev helper for get bancor converter by bancor relay addrses\n', '  *\n', '  * @param _relay       address of bancor relay\n', '  * @param _poolType    bancor pool type\n', '  */\n', '  function getBacorConverterAddressByRelay(address _relay, uint256 _poolType)\n', '    public\n', '    view\n', '    returns(address converter)\n', '  {\n', '    if(_poolType == 2){\n', '      address smartTokenContainer = SmartTokenInterface(_relay).owner();\n', '      converter = SmartTokenInterface(smartTokenContainer).owner();\n', '    }else{\n', '      converter = SmartTokenInterface(_relay).owner();\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev return ERC20 address from Uniswap exchange address\n', '  *\n', '  * @param _exchange       address of uniswap exchane\n', '  */\n', '  function getTokenByUniswapExchange(address _exchange)\n', '    external\n', '    view\n', '    returns(address)\n', '  {\n', '    return uniswapFactoryV1.getToken(_exchange);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\n', '  *\n', '  * @param _amount         relay amount\n', '  * @param _exchange       address of uniswap exchane\n', '  */\n', '  function getUniswapConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _exchange\n', '  )\n', '    public\n', '    view\n', '    returns(uint256 ethAmount, uint256 ercAmount)\n', '  {\n', '    IERC20 token = IERC20(uniswapFactoryV1.getToken(_exchange));\n', '    // total_liquidity exchange.totalSupply\n', '    uint256 totalLiquidity = UniswapExchangeInterface(_exchange).totalSupply();\n', '    // ethAmount = amount * exchane.eth.balance / total_liquidity\n', '    ethAmount = _amount.mul(_exchange.balance).div(totalLiquidity);\n', '    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\n', '    ercAmount = _amount.mul(token.balanceOf(_exchange)).div(totalLiquidity);\n', '  }\n', '\n', '  /**\n', '  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\n', '  * for Uniswap version 2\n', '  *\n', '  * @param _amount         pool amount\n', '  * @param _exchange       address of uniswap exchane\n', '  */\n', '  function getUniswapV2ConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _exchange\n', '  )\n', '    public\n', '    view\n', '    returns(\n', '      uint256 tokenAmountOne,\n', '      uint256 tokenAmountTwo,\n', '      address tokenAddressOne,\n', '      address tokenAddressTwo\n', '    )\n', '  {\n', '    tokenAddressOne = IUniswapV2Pair(_exchange).token0();\n', '    tokenAddressTwo = IUniswapV2Pair(_exchange).token1();\n', '    // total_liquidity exchange.totalSupply\n', '    uint256 totalLiquidity = IERC20(_exchange).totalSupply();\n', '    // ethAmount = amount * exchane.eth.balance / total_liquidity\n', '    tokenAmountOne = _amount.mul(IERC20(tokenAddressOne).balanceOf(_exchange)).div(totalLiquidity);\n', '    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\n', '    tokenAmountTwo = _amount.mul(IERC20(tokenAddressTwo).balanceOf(_exchange)).div(totalLiquidity);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for get amounts all Balancer connectors for input amount of pool\n', '  * for Balancer\n', '  *\n', '  * step 1 get all tokens\n', '  * step 2 get user amount from each token by a user pool share\n', '  *\n', '  * @param _amount         pool amount\n', '  * @param _pool           address of balancer pool\n', '  */\n', '  function getBalancerConnectorsAmountByPoolAmount(\n', '    uint256 _amount,\n', '    address _pool\n', '  )\n', '    public\n', '    view\n', '    returns(\n', '      address[] memory tokens,\n', '      uint256[] memory tokensAmount\n', '    )\n', '  {\n', '    IBalancerPool balancerPool = IBalancerPool(_pool);\n', '    // get all pool tokens\n', '    tokens = balancerPool.getCurrentTokens();\n', '    // set tokens amount length\n', '    tokensAmount = new uint256[](tokens.length);\n', '    // get total pool shares\n', '    uint256 totalShares = IERC20(_pool).totalSupply();\n', '    // calculate all tokens from the pool\n', '    for(uint i = 0; i < tokens.length; i++){\n', '      // get a certain total token amount in pool\n', '      uint256 totalTokenAmount = IERC20(tokens[i]).balanceOf(_pool);\n', '      // get a certain pool share (_amount) from a certain token amount in pool\n', '      tokensAmount[i] = totalTokenAmount.mul(_amount).div(totalShares);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for get value in pool for a certain connector address\n', '  *\n', '  * @param _amount      relay amount\n', '  * @param _relay       address of bancor relay\n', '  * @param _connector   address of relay connector\n', '  */\n', '  function getBancorConnectorsAmountByRelayAmount\n', '  (\n', '    uint256 _amount,\n', '    IERC20  _relay,\n', '    address _connector\n', '  )\n', '    public\n', '    view\n', '    returns(uint256 connectorAmount)\n', '  {\n', '    // get converter contract\n', '    BancorConverterInterface converter = BancorConverterInterface(\n', '      SmartTokenInterface(address(_relay)).owner());\n', '\n', '    // get connector balance\n', '    uint256 connectorBalance = converter.getConnectorBalance(IERC20(_connector));\n', '\n', '    // get bancor formula contract\n', '    IBancorFormula bancorFormula = IBancorFormula(\n', '      bancorData.getBancorContractAddresByName("BancorFormula"));\n', '\n', '    // calculate input\n', '    connectorAmount = bancorFormula.calculateFundCost(\n', '      _relay.totalSupply(),\n', '      connectorBalance,\n', '      1000000,\n', '       _amount);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for get Bancor ERC20 connectors addresses for old Bancor version\n', '  *\n', '  * @param _relay       address of bancor relay\n', '  */\n', '  function getBancorConnectorsByRelay(address _relay)\n', '    public\n', '    view\n', '    returns(\n', '    IERC20[] memory connectors\n', '    )\n', '  {\n', '    address converterAddress = getBacorConverterAddressByRelay(_relay, 0);\n', '    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\n', '    uint256 connectorTokenCount = converter.connectorTokenCount();\n', '    connectors = new IERC20[](connectorTokenCount);\n', '\n', '    for(uint8 i; i < connectorTokenCount; i++){\n', '      connectors[i] = converter.connectorTokens(i);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev helper for get ratio between assets in bancor newtork\n', '  *\n', '  * @param _from      token or relay address\n', '  * @param _to        token or relay address\n', '  * @param _amount    amount from\n', '  */\n', '  function getBancorRatio(address _from, address _to, uint256 _amount)\n', '  external\n', '  view\n', '  returns(uint256)\n', '  {\n', '    // return Bancor ratio\n', '    return bancorData.getBancorRatioForAssets(IERC20(_from), IERC20(_to), _amount);\n', '  }\n', '\n', '  // owner of portal can change getBancorData helper, for case if Bancor do some major updates\n', '  function setNewGetBancorData(address _bancorData) public onlyOwner {\n', '    bancorData = IGetBancorData(_bancorData);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Transfers tokens to this contract and approves them to another address\n', '  *\n', '  * @param _source          Token to transfer and approve\n', '  * @param _sourceAmount    The amount to transfer and approve (in _source token)\n', '  * @param _to              Address to approve to\n', '  */\n', '  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\n', '    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\n', '    // reset previous approve (some ERC20 not allow do new approve if already approved)\n', '    _source.approve(_to, 0);\n', '    // approve\n', '    _source.approve(_to, _sourceAmount);\n', '  }\n', '\n', '  // fallback payable function to receive ether from other contract addresses\n', '  fallback() external payable {}\n', '}']