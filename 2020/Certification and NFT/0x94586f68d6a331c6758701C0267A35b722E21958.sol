['// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either {approve} or {setApprovalForAll}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either {approve} or {setApprovalForAll}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '    function approve(address to, uint256 tokenId) external;\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', '// pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol";\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: contracts/MushroomLib.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'library MushroomLib {\n', '    struct MushroomData {\n', '        uint256 species;\n', '        uint256 strength;\n', '        uint256 lifespan;\n', '    }\n', '\n', '    struct MushroomType {\n', '        uint256 id;\n', '        uint256 strength;\n', '        uint256 minLifespan;\n', '        uint256 maxLifespan;\n', '        uint256 minted;\n', '        uint256 cap;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/metadata/resolvers/MetadataResolver.sol\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import "contracts/MushroomLib.sol";\n', '\n', 'abstract contract MetadataResolver {\n', '    using MushroomLib for MushroomLib.MushroomData;\n', '    using MushroomLib for MushroomLib.MushroomType;\n', '\n', '    function getMushroomData(uint256 index, bytes calldata data) external virtual view returns (MushroomLib.MushroomData memory);\n', '    function setMushroomLifespan(uint256 index, uint256 lifespan, bytes calldata data) external virtual;\n', '    function isBurnable(uint256 index) external view virtual returns (bool);\n', '}\n', '\n', '\n', '// Root file: contracts/metadata/MushroomMetadata.sol\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol";\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol";\n', '\n', '// import "contracts/metadata/resolvers/MetadataResolver.sol";\n', '// import "contracts/MushroomLib.sol";\n', '\n', 'contract MushroomMetadata is OwnableUpgradeSafe {\n', '    using MushroomLib for MushroomLib.MushroomData;\n', '    using MushroomLib for MushroomLib.MushroomType;\n', '\n', '    mapping(address => address) public metadataResolvers;\n', '\n', '    event ResolverSet(address nft, address resolver);\n', '\n', '    modifier onlyWithMetadataResolver(address nftContract) {\n', '        require(metadataResolvers[nftContract] != address(0), "MetadataRegistry: No resolver set for nft");\n', '        _;\n', '    }\n', '\n', '    function hasMetadataResolver(address nftContract) external view returns (bool) {\n', '        return metadataResolvers[nftContract] != address(0);\n', '    }\n', '\n', '    function getMetadataResolver(address nftContract) external view returns (address) {\n', '        return metadataResolvers[nftContract];\n', '    }\n', '\n', '    function initialize() public initializer {\n', '        __Ownable_init();\n', '    }\n', '\n', '    function getMushroomData(\n', '        address nftContract,\n', '        uint256 nftIndex,\n', '        bytes calldata data\n', '    ) external view onlyWithMetadataResolver(nftContract) returns (MushroomLib.MushroomData memory) {\n', '        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\n', '        MushroomLib.MushroomData memory mushroomData = resolver.getMushroomData(nftIndex, data);\n', '        return mushroomData;\n', '    }\n', '\n', '    function isBurnable(\n', '        address nftContract,\n', '        uint256 nftIndex\n', '    ) external view onlyWithMetadataResolver(nftContract) returns (bool) {\n', '        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\n', '        return resolver.isBurnable(nftIndex);\n', '    }\n', '\n', '    function setMushroomLifespan(\n', '        address nftContract,\n', '        uint256 nftIndex,\n', '        uint256 lifespan,\n', '        bytes calldata data\n', '    ) external onlyWithMetadataResolver(nftContract) {\n', '        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\n', '        resolver.setMushroomLifespan(nftIndex, lifespan, data);\n', '    }\n', '\n', '    function setResolver(address nftContract, address resolver) public onlyOwner {\n', '        metadataResolvers[nftContract] = resolver;\n', '\n', '        emit ResolverSet(nftContract, resolver);\n', '    }\n', '}']