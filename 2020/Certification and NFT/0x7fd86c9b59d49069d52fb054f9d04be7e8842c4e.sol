['pragma solidity ^0.4.26;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  uint256 public totalDonation;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20Basic, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract DAOPrism is MintableToken\n', '{\n', '    // Using libraries \n', '    using SafeMath for uint;\n', '\n', '    \n', '    //////////////////////\n', '    // ERC20 token state\n', '    //////////////////////\n', '    \n', '    /**\n', '    These state vars are handled in the OpenZeppelin libraries;\n', "    we display them here for the developer's information.\n", '    ***\n', '    // ERC20Basic - Store account balances\n', '    mapping (address => uint256) public balances;\n', '\n', '    // StandardToken - Owner of account approves transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    // \n', '    uint256 public totalSupply;\n', '    */\n', '    \n', '    //////////////////////\n', '    // Human token state\n', '    //////////////////////\n', '    string public constant name = "DAOPrism";\n', '    string public constant symbol = "DPIM";\n', '    uint8 public constant  decimals = 18;\n', '\n', '    ///////////////////////////////////////////////////////////\n', '    // State vars for custom staking and budget functionality\n', '    ///////////////////////////////////////////////////////////\n', '\n', '    /// Stake minting\n', '    // Minted tokens per second for all stakers\n', '    uint private globalMintRate;\n', '    // Total tokens currently staked\n', '    uint public totalDAOPrismStaked; \n', '\n', '    // struct that will hold user stake\n', '    struct TokenStakeData {\n', '        uint initialStakeBalance;\n', '        uint initialStakeTime;\n', '        uint initialStakePercentage;\n', '        uint initialClaimTime;\n', '    }\n', '    \n', '    // Track all tokens staked\n', '    mapping (address => TokenStakeData) public stakeBalances;\n', '\n', '    // Fire a loggable event when tokens are staked\n', '    event Stake(address indexed staker,  uint256 value);\n', '\n', '    // Fire a loggable event when staked tokens are vested\n', '    event Vest(address indexed vester, uint256 stakedAmount, uint256 stakingGains);\n', '\n', '    //////////////////////////////////////////////////\n', '    /// Begin DAOPrism token functionality\n', '    //////////////////////////////////////////////////\n', '\n', '    /// @dev DAOPrism token constructor\n', '    constructor() public\n', '    {\n', '        // Define owner\n', '        owner = msg.sender;\n', '        //staking not enabled at first to transfer with no burns\n', '        // Define initial owner supply. (ether here is used only to get the decimals right)\n', '        uint _initOwnerSupply = 50000 ether;\n', '        // One-time bulk mint given to owner\n', '        bool _success = mint(msg.sender, _initOwnerSupply);\n', '        // Abort if initial minting failed for whatever reason\n', '        require(_success);\n', '\n', '    }\n', '    \n', '    function donateToDAOPrism (uint256 _value1) public returns (bool) {\n', '        totalDonation = totalDonation.add(_value1);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value1);\n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    uint burn_token = (_value*10)/100;\n', '    uint token_send = _value.sub(burn_token);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(token_send);\n', '    totalSupply = totalSupply.sub(burn_token.div(2));\n', '    totalDonation = totalDonation.add(burn_token.div(2));\n', '    emit Transfer(msg.sender, _to, token_send);\n', '    emit Transfer(msg.sender,address(0),burn_token.div(2));\n', '    return true;\n', '        \n', '}\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    \n', '\n', '    uint burn_token = (_value*10)/100;\n', '    uint token_send = _value.sub(burn_token);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(token_send);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(burn_token.div(2));\n', '    totalDonation = totalDonation.add(burn_token.div(2));\n', '    emit Transfer(_from, _to, token_send);\n', '    emit Transfer(_from,address(0),burn_token.div(2)); \n', '    return true;\n', '\n', '}\n', '    function _burn(address account, uint256 amount) onlyOwner public returns (bool) {\n', '\n', '    balances[account] = balances[account].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '\n', '    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 10 days \n', '    function stakeDAOPrism(uint _stakeAmount) external\n', '    {\n', '        // Require that tokens are staked successfully\n', '        require(stakeTokens(_stakeAmount));\n', '    }\n', '\n', '    /// @dev allows users to reclaim any staked tokens\n', '    /// @return bool on success\n', '    function claimDAOPrism() external returns (bool success)\n', '    {\n', '        /// Sanity checks: \n', '        // require that there was some amount vested\n', '        require(stakeBalances[msg.sender].initialStakeBalance > 0);\n', '        // require that time has elapsed\n', '        require(now > stakeBalances[msg.sender].initialStakeTime);\n', '\n', '        // Calculate the time elapsed since the tokens were originally staked\n', '        uint _timePassedSinceStake = now.sub(stakeBalances[msg.sender].initialStakeTime);\n', '\n', '        // Calculate tokens to mint\n', '        uint _tokensToMint = calculateStakeGains(_timePassedSinceStake);\n', '\n', "        // Add the original stake back to the user's balance\n", '        balances[msg.sender] += stakeBalances[msg.sender].initialStakeBalance;\n', '        \n', '        // Subtract stake balance from totalDAOPrismStaked\n', '        totalDAOPrismStaked -= stakeBalances[msg.sender].initialStakeBalance;\n', '        \n', '        // Not spliting stake; mint all new tokens and give them to msg.sender \n', '        mint(msg.sender, _tokensToMint);\n', '        mint(owner, _tokensToMint.div(20)); //used for marketting, websites devs, giveaways and other stuffs\n', '        \n', '        \n', '        // Fire an event to tell the world of the newly vested tokens\n', '        emit Vest(msg.sender, stakeBalances[msg.sender].initialStakeBalance, _tokensToMint);\n', '\n', '        // Clear out stored data from mapping\n', '        stakeBalances[msg.sender].initialStakeBalance = 0;\n', '        stakeBalances[msg.sender].initialStakeTime = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows user to check their staked balance\n', '    function getStakedBalance() view external returns (uint stakedBalance) \n', '    {\n', '        return stakeBalances[msg.sender].initialStakeBalance;\n', '    }\n', '\n', '\n', "    /// @dev stake function reduces the user's total available balance. totalSupply is unaffected\n", '    /// @param _value determines how many tokens a user wants to stake\n', '    function stakeTokens(uint256 _value) private returns (bool success)\n', '    {\n', '        /// Sanity Checks:\n', '        // You can only stake as many tokens as you have\n', '        require(_value <= balances[msg.sender]);\n', '        // You can only stake tokens if  you have not already staked tokens\n', '        require(stakeBalances[msg.sender].initialStakeBalance == 0);\n', '\n', '        // Subtract stake amount from regular token balance\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        \n', '        // Add stake amount to staked balance\n', '        stakeBalances[msg.sender].initialStakeBalance = _value;\n', '\n', '        // Increment the global staked tokens value\n', '        totalDAOPrismStaked += _value;\n', '        \n', '        // Save the time that the stake started\n', '        stakeBalances[msg.sender].initialStakeTime = now;\n', '        \n', '        stakeBalances[msg.sender].initialClaimTime = now;\n', '\n', '\n', '        // Fire an event to tell the world of the newly staked tokens\n', '        emit Stake(msg.sender, _value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function takeDonatedDAOPrism() external returns (uint claimAmount)\n', '    {\n', '        require(stakeBalances[msg.sender].initialStakeBalance > 10000000000000000000);\n', '    \n', '        require(86400 < now.sub(stakeBalances[msg.sender].initialClaimTime));\n', '        \n', '        uint _amountClaim = totalDonation.div(100);\n', '        uint _amountHave = stakeBalances[msg.sender].initialStakeBalance;\n', '        \n', '        if (_amountHave < _amountClaim) {\n', '            \n', '            mint(msg.sender, _amountHave.div(100));\n', '            \n', '            totalDonation = totalDonation.sub(_amountHave.div(100));\n', '            \n', '        } else {\n', '         \n', '         mint(msg.sender, totalDonation.div(100));\n', '         \n', '         claimAmount = totalDonation.div(100);\n', '         \n', '         totalDonation = totalDonation.sub(totalDonation.div(100));\n', '         \n', '         stakeBalances[msg.sender].initialClaimTime = now;\n', '         \n', '    }     \n', '    \n', '}\n', '\n', '    /// @dev Helper function to claimStake that modularizes the minting via staking calculation \n', '    function calculateStakeGains(uint _timePassedSinceStake) view private returns (uint mintTotal)\n', '    {\n', '        // Store seconds in a day (need it in variable to use SafeMath)\n', '        uint _secondsPerDay = 86400;\n', '        uint _tokensToMint = 0;         // store number of new tokens to be minted\n', '        \n', '        // Determine the amount to be newly minted upon vesting, if any\n', '        if (_timePassedSinceStake >_secondsPerDay) {\n', '            \n', '        \n', '            \n', '           // Tokens were staked for enough time to mint new tokens; determine how many\n', '            if (_timePassedSinceStake > _secondsPerDay.mul(10)) {\n', '                // Tokens were staked for the maximum amount of time (10 days)\n', '                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(10);\n', '            } else if (_secondsPerDay.mul(9) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(10)){\n', '                // Tokens were staked for a mintable amount of time between 9 and 10 days\n', '                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(20);\n', '            } else if (_secondsPerDay.mul(7) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(9)){\n', '                // Tokens were staked for a mintable amount of time between 7 and 9 days\n', '                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(30);\n', '            } else if (_secondsPerDay.mul(6) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(7)){\n', '                // Tokens were staked for a mintable amount of time between 6 and 7 days\n', '                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(40);\n', '            } else if (_secondsPerDay.mul(5) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(6)){\n', '                // Tokens were staked for a mintable amount of time between 5 and 6 days\n', '                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(50);\n', '            } else {\n', '                \n', '                _tokensToMint = 0;\n', '            }\n', '        } \n', '        \n', '        // Return the amount of new tokens to be minted\n', '        return _tokensToMint;\n', '\n', '    }\n', '    \n', '    \n', '\n', '    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type \n', '    /// @param _numerator is the top part of the fraction we are calculating\n', '    /// @param _denominator is the bottom part of the fraction we are calculating\n', '    /// @param _precision tells the function how many significant digits to calculate out to\n', '    /// @return quotient returns the result of our fraction calculation\n', '    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) \n', '    {\n', '        // Take passed value and expand it to the required precision\n', '        _numerator = _numerator.mul(10 ** (_precision + 1));\n', '        // handle last-digit rounding\n', '        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '}']