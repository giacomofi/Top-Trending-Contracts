['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract SusafeReferral {\n', '    mapping(address => address) public referrers; // account_address -> referrer_address\n', '    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\n', '\n', '    event Referral(address indexed referrer, address indexed farmer);\n', '\n', '    address public governance;\n', '\n', '    mapping(address => bool) public isAdmin;\n', '\n', '    constructor () public {\n', '        governance = tx.origin;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(isAdmin[msg.sender], "OnlyAdmin methods called by non-admin.");\n', '        _;\n', '    }\n', '\n', '    function setReferrer(address farmer, address referrer) public onlyAdmin {\n', '        if (referrers[farmer] == address(0) && referrer != address(0)) {\n', '            referrers[farmer] = referrer;\n', '            referredCount[referrer] += 1;\n', '            emit Referral(referrer, farmer);\n', '        }\n', '    }\n', '\n', '    function getReferrer(address farmer) public view returns (address) {\n', '        return referrers[farmer];\n', '    }\n', '\n', '    // Set admin status.\n', '    function setAdminStatus(address _admin, bool _status) external {\n', '        require(msg.sender == governance, "!governance");\n', '        isAdmin[_admin] = _status;\n', '    }\n', '\n', '    // owner can drain tokens that are sent here by mistake\n', '    function emergencyERC20Drain(IERC20 token, uint amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        token.transfer(governance, amount);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '}']