['// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @opengsn/gsn/contracts/0x/errors/LibBytesRichErrorsV06.sol\n', '\n', '/*\n', '\n', '  Copyright 2020 ZeroEx Intl.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'library LibBytesRichErrorsV06 {\n', '\n', '    enum InvalidByteOperationErrorCodes {\n', '        FromLessThanOrEqualsToRequired,\n', '        ToLessThanOrEqualsLengthRequired,\n', '        LengthGreaterThanZeroRequired,\n', '        LengthGreaterThanOrEqualsFourRequired,\n', '        LengthGreaterThanOrEqualsTwentyRequired,\n', '        LengthGreaterThanOrEqualsThirtyTwoRequired,\n', '        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n', '        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n', '    }\n', '\n', '    // bytes4(keccak256("InvalidByteOperationError(uint8,uint256,uint256)"))\n', '    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n', '        0x28006595;\n', '\n', '    // solhint-disable func-name-mixedcase\n', '    function InvalidByteOperationError(\n', '        InvalidByteOperationErrorCodes errorCode,\n', '        uint256 offset,\n', '        uint256 required\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory)\n', '    {\n', '        return abi.encodeWithSelector(\n', '            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n', '            errorCode,\n', '            offset,\n', '            required\n', '        );\n', '    }\n', '}\n', '\n', '// File: @opengsn/gsn/contracts/0x/errors/LibRichErrorsV06.sol\n', '\n', '/*\n', '\n', '  Copyright 2020 ZeroEx Intl.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'library LibRichErrorsV06 {\n', '\n', '    // bytes4(keccak256("Error(string)"))\n', '    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n', '\n', '    // solhint-disable func-name-mixedcase\n', '    /// @dev ABI encode a standard, string revert error payload.\n', '    ///      This is the same payload that would be included by a `revert(string)`\n', '    ///      solidity statement. It has the function signature `Error(string)`.\n', '    /// @param message The error string.\n', '    /// @return The ABI encoded error.\n', '    function StandardError(string memory message)\n', '        internal\n', '        pure\n', '        returns (bytes memory)\n', '    {\n', '        return abi.encodeWithSelector(\n', '            STANDARD_ERROR_SELECTOR,\n', '            bytes(message)\n', '        );\n', '    }\n', '    // solhint-enable func-name-mixedcase\n', '\n', '    /// @dev Reverts an encoded rich revert reason `errorData`.\n', '    /// @param errorData ABI encoded error data.\n', '    function rrevert(bytes memory errorData)\n', '        internal\n', '        pure\n', '    {\n', '        assembly {\n', '            revert(add(errorData, 0x20), mload(errorData))\n', '        }\n', '    }\n', '}\n', '\n', '// File: @opengsn/gsn/contracts/0x/LibBytesV06.sol\n', '\n', '/*\n', '\n', '  Copyright 2020 ZeroEx Intl.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', 'library LibBytesV06 {\n', '\n', '    using LibBytesV06 for bytes;\n', '\n', '    /// @dev Gets the memory address for a byte array.\n', '    /// @param input Byte array to lookup.\n', '    /// @return memoryAddress Memory address of byte array. This\n', '    ///         points to the header of the byte array which contains\n', '    ///         the length.\n', '    function rawAddress(bytes memory input)\n', '        internal\n', '        pure\n', '        returns (uint256 memoryAddress)\n', '    {\n', '        assembly {\n', '            memoryAddress := input\n', '        }\n', '        return memoryAddress;\n', '    }\n', '\n', '    /// @dev Gets the memory address for the contents of a byte array.\n', '    /// @param input Byte array to lookup.\n', '    /// @return memoryAddress Memory address of the contents of the byte array.\n', '    function contentAddress(bytes memory input)\n', '        internal\n', '        pure\n', '        returns (uint256 memoryAddress)\n', '    {\n', '        assembly {\n', '            memoryAddress := add(input, 32)\n', '        }\n', '        return memoryAddress;\n', '    }\n', '\n', '    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n', '    /// @param dest memory address to copy bytes to.\n', '    /// @param source memory address to copy bytes from.\n', '    /// @param length number of bytes to copy.\n', '    function memCopy(\n', '        uint256 dest,\n', '        uint256 source,\n', '        uint256 length\n', '    )\n', '        internal\n', '        pure\n', '    {\n', '        if (length < 32) {\n', '            // Handle a partial word by reading destination and masking\n', '            // off the bits we are interested in.\n', '            // This correctly handles overlap, zero lengths and source == dest\n', '            assembly {\n', '                let mask := sub(exp(256, sub(32, length)), 1)\n', '                let s := and(mload(source), not(mask))\n', '                let d := and(mload(dest), mask)\n', '                mstore(dest, or(s, d))\n', '            }\n', '        } else {\n', '            // Skip the O(length) loop when source == dest.\n', '            if (source == dest) {\n', '                return;\n', '            }\n', '\n', '            // For large copies we copy whole words at a time. The final\n', '            // word is aligned to the end of the range (instead of after the\n', '            // previous) to handle partial words. So a copy will look like this:\n', '            //\n', '            //  ####\n', '            //      ####\n', '            //          ####\n', '            //            ####\n', '            //\n', '            // We handle overlap in the source and destination range by\n', '            // changing the copying direction. This prevents us from\n', '            // overwriting parts of source that we still need to copy.\n', '            //\n', '            // This correctly handles source == dest\n', '            //\n', '            if (source > dest) {\n', '                assembly {\n', '                    // We subtract 32 from `sEnd` and `dEnd` because it\n', '                    // is easier to compare with in the loop, and these\n', '                    // are also the addresses we need for copying the\n', '                    // last bytes.\n', '                    length := sub(length, 32)\n', '                    let sEnd := add(source, length)\n', '                    let dEnd := add(dest, length)\n', '\n', '                    // Remember the last 32 bytes of source\n', '                    // This needs to be done here and not after the loop\n', '                    // because we may have overwritten the last bytes in\n', '                    // source already due to overlap.\n', '                    let last := mload(sEnd)\n', '\n', '                    // Copy whole words front to back\n', '                    // Note: the first check is always true,\n', '                    // this could have been a do-while loop.\n', '                    // solhint-disable-next-line no-empty-blocks\n', '                    for {} lt(source, sEnd) {} {\n', '                        mstore(dest, mload(source))\n', '                        source := add(source, 32)\n', '                        dest := add(dest, 32)\n', '                    }\n', '\n', '                    // Write the last 32 bytes\n', '                    mstore(dEnd, last)\n', '                }\n', '            } else {\n', '                assembly {\n', '                    // We subtract 32 from `sEnd` and `dEnd` because those\n', '                    // are the starting points when copying a word at the end.\n', '                    length := sub(length, 32)\n', '                    let sEnd := add(source, length)\n', '                    let dEnd := add(dest, length)\n', '\n', '                    // Remember the first 32 bytes of source\n', '                    // This needs to be done here and not after the loop\n', '                    // because we may have overwritten the first bytes in\n', '                    // source already due to overlap.\n', '                    let first := mload(source)\n', '\n', '                    // Copy whole words back to front\n', '                    // We use a signed comparisson here to allow dEnd to become\n', '                    // negative (happens when source and dest < 32). Valid\n', '                    // addresses in local memory will never be larger than\n', '                    // 2**255, so they can be safely re-interpreted as signed.\n', '                    // Note: the first check is always true,\n', '                    // this could have been a do-while loop.\n', '                    // solhint-disable-next-line no-empty-blocks\n', '                    for {} slt(dest, dEnd) {} {\n', '                        mstore(dEnd, mload(sEnd))\n', '                        sEnd := sub(sEnd, 32)\n', '                        dEnd := sub(dEnd, 32)\n', '                    }\n', '\n', '                    // Write the first 32 bytes\n', '                    mstore(dest, first)\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Returns a slices from a byte array.\n', '    /// @param b The byte array to take a slice from.\n', '    /// @param from The starting index for the slice (inclusive).\n', '    /// @param to The final index for the slice (exclusive).\n', '    /// @return result The slice containing bytes at indices [from, to)\n', '    function slice(\n', '        bytes memory b,\n', '        uint256 from,\n', '        uint256 to\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory result)\n', '    {\n', '        // Ensure that the from and to positions are valid positions for a slice within\n', '        // the byte array that is being used.\n', '        if (from > to) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n', '                from,\n', '                to\n', '            ));\n', '        }\n', '        if (to > b.length) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n', '                to,\n', '                b.length\n', '            ));\n', '        }\n', '\n', '        // Create a new bytes structure and copy contents\n', '        result = new bytes(to - from);\n', '        memCopy(\n', '            result.contentAddress(),\n', '            b.contentAddress() + from,\n', '            result.length\n', '        );\n', '        return result;\n', '    }\n', '\n', '    /// @dev Returns a slice from a byte array without preserving the input.\n', '    ///      When `from == 0`, the original array will match the slice.\n', '    ///      In other cases its state will be corrupted.\n', '    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n', '    /// @param from The starting index for the slice (inclusive).\n', '    /// @param to The final index for the slice (exclusive).\n', '    /// @return result The slice containing bytes at indices [from, to)\n', '    function sliceDestructive(\n', '        bytes memory b,\n', '        uint256 from,\n', '        uint256 to\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory result)\n', '    {\n', '        // Ensure that the from and to positions are valid positions for a slice within\n', '        // the byte array that is being used.\n', '        if (from > to) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n', '                from,\n', '                to\n', '            ));\n', '        }\n', '        if (to > b.length) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n', '                to,\n', '                b.length\n', '            ));\n', '        }\n', '\n', '        // Create a new bytes structure around [from, to) in-place.\n', '        assembly {\n', '            result := add(b, from)\n', '            mstore(result, sub(to, from))\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Pops the last byte off of a byte array by modifying its length.\n', '    /// @param b Byte array that will be modified.\n', '    /// @return result The byte that was popped off.\n', '    function popLastByte(bytes memory b)\n', '        internal\n', '        pure\n', '        returns (bytes1 result)\n', '    {\n', '        if (b.length == 0) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n', '                b.length,\n', '                0\n', '            ));\n', '        }\n', '\n', '        // Store last byte.\n', '        result = b[b.length - 1];\n', '\n', '        assembly {\n', '            // Decrement length of byte array.\n', '            let newLen := sub(mload(b), 1)\n', '            mstore(b, newLen)\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Tests equality of two byte arrays.\n', '    /// @param lhs First byte array to compare.\n', '    /// @param rhs Second byte array to compare.\n', '    /// @return equal True if arrays are the same. False otherwise.\n', '    function equals(\n', '        bytes memory lhs,\n', '        bytes memory rhs\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool equal)\n', '    {\n', '        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n', '        // We early exit on unequal lengths, but keccak would also correctly\n', '        // handle this.\n', '        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n', '    }\n', '\n', '    /// @dev Reads an address from a position in a byte array.\n', '    /// @param b Byte array containing an address.\n', '    /// @param index Index in byte array of address.\n', '    /// @return result address from byte array.\n', '    function readAddress(\n', '        bytes memory b,\n', '        uint256 index\n', '    )\n', '        internal\n', '        pure\n', '        returns (address result)\n', '    {\n', '        if (b.length < index + 20) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n', '                b.length,\n', '                index + 20 // 20 is length of address\n', '            ));\n', '        }\n', '\n', '        // Add offset to index:\n', '        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n', '        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n', '        index += 20;\n', '\n', '        // Read address from array memory\n', '        assembly {\n', '            // 1. Add index to address of bytes array\n', '            // 2. Load 32-byte word from memory\n', '            // 3. Apply 20-byte mask to obtain address\n', '            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Writes an address into a specific position in a byte array.\n', '    /// @param b Byte array to insert address into.\n', '    /// @param index Index in byte array of address.\n', '    /// @param input Address to put into byte array.\n', '    function writeAddress(\n', '        bytes memory b,\n', '        uint256 index,\n', '        address input\n', '    )\n', '        internal\n', '        pure\n', '    {\n', '        if (b.length < index + 20) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n', '                b.length,\n', '                index + 20 // 20 is length of address\n', '            ));\n', '        }\n', '\n', '        // Add offset to index:\n', '        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n', '        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n', '        index += 20;\n', '\n', '        // Store address into array memory\n', '        assembly {\n', '            // The address occupies 20 bytes and mstore stores 32 bytes.\n', "            // First fetch the 32-byte word where we'll be storing the address, then\n", '            // apply a mask so we have only the bytes in the word that the address will not occupy.\n', '            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n', '\n', '            // 1. Add index to address of bytes array\n', '            // 2. Load 32-byte word from memory\n', "            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n", '            let neighbors := and(\n', '                mload(add(b, index)),\n', '                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n', '            )\n', '\n', '            // Make sure input address is clean.\n', '            // (Solidity does not guarantee this)\n', '            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n', '\n', '            // Store the neighbors and address into memory\n', '            mstore(add(b, index), xor(input, neighbors))\n', '        }\n', '    }\n', '\n', '    /// @dev Reads a bytes32 value from a position in a byte array.\n', '    /// @param b Byte array containing a bytes32 value.\n', '    /// @param index Index in byte array of bytes32 value.\n', '    /// @return result bytes32 value from byte array.\n', '    function readBytes32(\n', '        bytes memory b,\n', '        uint256 index\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes32 result)\n', '    {\n', '        if (b.length < index + 32) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n', '                b.length,\n', '                index + 32\n', '            ));\n', '        }\n', '\n', '        // Arrays are prefixed by a 256 bit length parameter\n', '        index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            result := mload(add(b, index))\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Writes a bytes32 into a specific position in a byte array.\n', '    /// @param b Byte array to insert <input> into.\n', '    /// @param index Index in byte array of <input>.\n', '    /// @param input bytes32 to put into byte array.\n', '    function writeBytes32(\n', '        bytes memory b,\n', '        uint256 index,\n', '        bytes32 input\n', '    )\n', '        internal\n', '        pure\n', '    {\n', '        if (b.length < index + 32) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n', '                b.length,\n', '                index + 32\n', '            ));\n', '        }\n', '\n', '        // Arrays are prefixed by a 256 bit length parameter\n', '        index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(b, index), input)\n', '        }\n', '    }\n', '\n', '    /// @dev Reads a uint256 value from a position in a byte array.\n', '    /// @param b Byte array containing a uint256 value.\n', '    /// @param index Index in byte array of uint256 value.\n', '    /// @return result uint256 value from byte array.\n', '    function readUint256(\n', '        bytes memory b,\n', '        uint256 index\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 result)\n', '    {\n', '        result = uint256(readBytes32(b, index));\n', '        return result;\n', '    }\n', '\n', '    /// @dev Writes a uint256 into a specific position in a byte array.\n', '    /// @param b Byte array to insert <input> into.\n', '    /// @param index Index in byte array of <input>.\n', '    /// @param input uint256 to put into byte array.\n', '    function writeUint256(\n', '        bytes memory b,\n', '        uint256 index,\n', '        uint256 input\n', '    )\n', '        internal\n', '        pure\n', '    {\n', '        writeBytes32(b, index, bytes32(input));\n', '    }\n', '\n', '    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n', '    /// @param b Byte array containing a bytes4 value.\n', '    /// @param index Index in byte array of bytes4 value.\n', '    /// @return result bytes4 value from byte array.\n', '    function readBytes4(\n', '        bytes memory b,\n', '        uint256 index\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes4 result)\n', '    {\n', '        if (b.length < index + 4) {\n', '            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n', '                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n', '                b.length,\n', '                index + 4\n', '            ));\n', '        }\n', '\n', '        // Arrays are prefixed by a 32 byte length field\n', '        index += 32;\n', '\n', '        // Read the bytes4 from array memory\n', '        assembly {\n', '            result := mload(add(b, index))\n', '            // Solidity does not require us to clean the trailing bytes.\n', '            // We do it anyway\n', '            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Writes a new length to a byte array.\n', '    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n', '    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n', '    /// @param b Bytes array to write new length to.\n', '    /// @param length New length of byte array.\n', '    function writeLength(bytes memory b, uint256 length)\n', '        internal\n', '        pure\n', '    {\n', '        assembly {\n', '            mstore(b, length)\n', '        }\n', '    }\n', '}\n', '\n', '// File: @opengsn/gsn/contracts/interfaces/IRelayRecipient.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * a contract must implement this interface in order to support relayed transaction.\n', ' * It is better to inherit the BaseRelayRecipient as its implementation.\n', ' */\n', 'abstract contract IRelayRecipient {\n', '\n', '    /**\n', '     * return the forwarder we trust to forward relayed transactions to us.\n', "     * the forwarder is required to verify the sender's signature, and verify\n", '     * the call is not a replay.\n', '     */\n', '    function getTrustedForwarder() public virtual view returns(address);\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n', '     * of the msg.data.\n', '     * otherwise, return `msg.sender`\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal virtual view returns (address payable);\n', '}\n', '\n', '// File: @opengsn/gsn/contracts/BaseRelayRecipient.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '/**\n', ' * A base contract to be inherited by any contract that want to receive relayed transactions\n', ' * A subclass must use "_msgSender()" instead of "msg.sender"\n', ' */\n', 'contract BaseRelayRecipient is IRelayRecipient {\n', '\n', '    /// the TrustedForwarder singleton we accept calls from.\n', "    // we trust it to verify the caller's signature, and pass the caller's address as last 20 bytes\n", '    address internal trustedForwarder;\n', '\n', '    /*\n', '     * require a function to be called through GSN only\n', '     */\n', '    modifier trustedForwarderOnly() {\n', '        require(msg.sender == address(trustedForwarder), "Function can only be called through trustedForwarder");\n', '        _;\n', '    }\n', '\n', '    function getTrustedForwarder() public override view returns(address) {\n', '        return trustedForwarder;\n', '    }\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, return the original sender.\n', '     * otherwise, return `msg.sender`.\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal override virtual view returns (address payable) {\n', '        if (msg.data.length >= 24 && msg.sender == address(getTrustedForwarder())) {\n', '            // At this point we know that the sender is a trusted forwarder,\n', '            // so we trust that the last bytes of msg.data are the verified sender address.\n', '            // extract sender address from the end of msg.data\n', '            return address(uint160(LibBytesV06.readAddress(msg.data, msg.data.length - 20)));\n', '        }\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', '// File: contracts/Stealth.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '/**\n', ' * Stealth.sol\n', ' * Implements the StealthSwap core functionnality.\n', ' * GSN Placeholders are used to fetch msg.sender until\n', ' * Future integration where withdrawals will be processed trough\n', ' * GSN.\n', ' */\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title StealthSwap Oracle Contract for Broadcasting Payment Notes\n', 'contract Stealth is BaseRelayRecipient, OwnableUpgradeSafe {\n', '  using SafeMath for uint256;\n', '\n', '   /// @dev protocol token (OWL) definition\n', '  IERC20 private protocolToken;\n', '\n', '  uint256 public protocolFee;\n', '  uint256 public etherProtocolFee;\n', '  uint256 public abyss;\n', '  address public feeManager;\n', '  address payable public feeTaker;\n', '  bool private initialized;\n', '\n', '  constructor(\n', '    IERC20 _protocolToken,\n', '    uint256 _protocolFee,\n', '    uint256 _etherProtocolFee,\n', '    address _feeManager,\n', '    address payable _feeTaker\n', '  ) public {\n', '    __Ownable_init();\n', '    protocolToken = _protocolToken;\n', '    protocolFee = _protocolFee;\n', '    etherProtocolFee = _etherProtocolFee;\n', '    feeManager = _feeManager;\n', '    feeTaker = _feeTaker;\n', '    abyss = 1 wei;\n', '  }\n', '\n', '  mapping(address => bool) usedAddrs;\n', '  mapping(address => Payment) processedPayments;\n', '\n', '  /// Ownable Functions : Ownership is set at owner, then changed\n', '  /// to Governing Contract.\n', '  function setProtocolFee(uint256 _newFee) public onlyOwner {\n', '    protocolFee = _newFee;\n', '  }\n', '\n', '  function setEtherProtocolFee(uint256 _newEtherFee) public onlyOwner {\n', '    etherProtocolFee = _newEtherFee;\n', '  }\n', '\n', '  function setFeeManager(address _newFeeManager) public onlyOwner {\n', '    feeManager = _newFeeManager;\n', '  }\n', '\n', '  function setFeeTaker(address payable _newFeeTaker) public onlyOwner {\n', '    feeTaker = _newFeeTaker;\n', '  }\n', '\n', '  /// Events are singular blobs broadcasted by the oracle contract.\n', '\n', '  /// @notice PaymentNote represent a new payment made trough StealthSwap\n', "  /// @param receiver receiver's stealth address\n", '  /// @param token address of transferred token\n', '  /// @param amount amount transferred\n', '  /// @param iv initialization vector\n', '  /// @param xCoord ephemeral public key (X-coord)\n', '  /// @param yCoord ephemeral public key (Y-coord)\n', '  /// @param ctBuf0 cipher text first chuncked to 32 bytes\n', '  /// @param ctBuf1 cipher text second chunck\n', '  /// @param ctBuf2 cipher text last chunck\n', '  /// @param mac message authentification tag (HMAC-SHA256)\n', '  event PaymentNote(\n', '    address indexed receiver,\n', '    address indexed token,\n', '    uint256 indexed amount,\n', '    bytes16 iv,\n', '    bytes32 xCoord,\n', '    bytes32 yCoord,\n', '    bytes32 ctBuf0,\n', '    bytes32 ctBuf1,\n', '    bytes32 ctBuf2,\n', '    bytes32 mac\n', '  );\n', '\n', '  /// @notice Withdrawal is emitted from the local payment storage\n', '  /// @param receiver withdrawal address\n', '  /// @param interim hodler approving withdrawls\n', '  /// @param token address\n', '  /// @param amount being withdrawn (always full amounts prevent partials)\n', '  event Withdrawal(\n', '    address indexed receiver,\n', '    address indexed interim,\n', '    address indexed token,\n', '    uint256 amount\n', '  );\n', '\n', '  /// @notice a payment is represented by its token address and amount\n', '  struct Payment {\n', '    address token;\n', '    uint256 amount;\n', '  }\n', '\n', '  /// @dev Checksummed address similar to 0x0000000000000000000000000000000000000000\n', '  address constant ETHER_TOKEN = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '  /// Sending Functions\n', '\n', '  /// @notice send ether to stealth address\n', "  /// @param _receiver receiver's address\n", '  /// @param _iv initialization vector\n', '  /// @param _xCoord ephemeral public key (X-coord)\n', '  /// @param _yCoord ephemeral public key (Y-coord)\n', '  /// @param _enc0 cipher text\n', '  /// @param _enc1 cipher text\n', '  /// @param _enc2 cipher text\n', '  /// @param _mac message authentification tag\n', '  function sendEther(\n', '    address payable _receiver,\n', '    bytes16 _iv,\n', '    bytes32 _xCoord,\n', '    bytes32 _yCoord,\n', '    bytes32 _enc0,\n', '    bytes32 _enc1,\n', '    bytes32 _enc2,\n', '    bytes32 _mac\n', '  ) public payable unusedAddr(_receiver) {\n', '    /// enforce against dust attacks for ether transactions\n', '    require(msg.value >= protocolFee, "StealthSwap: Must have value higher than the protocol fee");\n', '    uint256 feeAllowance = IERC20(protocolToken).allowance(_msgSender(), address(this));\n', '    /// insure allowance is sufficient to pay for protocol fee\n', '    require(feeAllowance >= protocolFee, "StealthSwap: You must provide allowance to pay the protocol fee");\n', '    uint256 amount = msg.value;\n', '    /// enforce protocol fee payment\n', '    IERC20(protocolToken).transferFrom(_msgSender(), address(this), protocolFee);\n', '    /// emit new Payment Note\n', '    emit PaymentNote(_receiver, ETHER_TOKEN, amount, _iv, _xCoord, _yCoord, _enc0, _enc1, _enc2, _mac);\n', '    // Tag address as used to prevent stealth address re-use\n', '    usedAddrs[_receiver] = true;\n', '    // Transfer Ether to receiving stealth address\n', '    _receiver.transfer(amount);\n', '  }\n', '\n', '  /// @notice send erc20 token to stealth address\n', "  /// @param _receiver receiver's address\n", '  /// @param _tokenAddr token transferred address\n', '  /// @param _amount amount transferred\n', '  /// @param _iv initialization vector\n', '  /// @param _xCoord ephemeral public key (X-coord)\n', '  /// @param _yCoord ephemeral public key (Y-coord)\n', '  /// @param _enc0 cipher text\n', '  /// @param _enc1 cipher text\n', '  /// @param _enc2 cipher text\n', '  /// @param _mac message authentification tag\n', '  function sendERC20(\n', '    address payable _receiver,\n', '    address _tokenAddr,\n', '    uint256 _amount,\n', '    bytes16 _iv,\n', '    bytes32 _xCoord,\n', '    bytes32 _yCoord,\n', '    bytes32 _enc0,\n', '    bytes32 _enc1,\n', '    bytes32 _enc2,\n', '    bytes32 _mac\n', '  ) public payable unusedAddr(_receiver) {\n', '    /// otherwise we will be accepting 0 ether transaction\n', '    /// this prevents the case where attackers mint and send worthless tokens\n', '    require(msg.value >= etherProtocolFee, "StealthSwap: Must have value greater than or equal to ether protocol fee");\n', '    uint256 feeAllowance = IERC20(protocolToken).allowance(_msgSender(), address(this));\n', '    /// insure allowance is sufficient to pay for protocol fee\n', '    require(feeAllowance >= protocolFee, "StealthSwap: You must provide allowance to pay the protocol fee");\n', '    uint256 tokenAllowance = IERC20(_tokenAddr).allowance(_msgSender(), address(this));\n', '    /// insure allowance is higher than protocolFee\n', '    require(tokenAllowance >= _amount, "StealthSwap: You must provide allowance to pay the protocol fee");\n', '    /// enforce protocol fee payment\n', '    IERC20(protocolToken).transferFrom(_msgSender(), address(this), protocolFee);\n', '    /// store token payment in our balance sheet\n', '    processedPayments[_receiver] = Payment({token: _tokenAddr, amount: _amount});\n', '    /// emit payment note\n', '    emit PaymentNote(_receiver, _tokenAddr, _amount, _iv, _xCoord, _yCoord, _enc0, _enc1, _enc2, _mac);\n', '    /// transfer tokens to contract control\n', '    IERC20(_tokenAddr).transferFrom(_msgSender(), _receiver, _amount);\n', '    /// tag stealth address as used to prevent re-use\n', '    usedAddrs[_receiver] = true;\n', "    /// transfer Ether protocol fee to receiver's address to afford withdrawals\n", '    _receiver.transfer(etherProtocolFee);\n', '  }\n', '\n', '  /// Withdrawal Processing\n', '\n', '  function withdraw(address _receiver) public {\n', '    uint256 amount = processedPayments[_msgSender()].amount;\n', '    address tokenAddr = processedPayments[_msgSender()].token;\n', '    // make sure _msgSender() has proper allocation\n', '    require(amount > 0, "StealthSwap: Unavailable tokens for withdrawal");\n', '    /// remove token payment from our balance sheet\n', '    delete processedPayments[_msgSender()];\n', '    emit Withdrawal(_msgSender(), _receiver, tokenAddr, amount);\n', '    /// send token to receiver\n', '    IERC20(tokenAddr).transferFrom(_msgSender(), _receiver, amount);\n', '  }\n', '\n', '  /// @notice collect paid fees for redistribituion\n', '  /// @dev this should be called by the staking contract\n', '  function collectPaidFees() public onlyManager {\n', '    feeTaker.transfer(address(this).balance);\n', '    uint256 totalFees = IERC20(protocolToken).balanceOf(address(this));\n', '    IERC20(protocolToken).approve(feeTaker,totalFees);\n', '    IERC20(protocolToken).transfer(feeTaker, totalFees);\n', '  }\n', '\n', '  /// Modifiers\n', '\n', '  function _msgSender()\n', '    internal\n', '    override(ContextUpgradeSafe, BaseRelayRecipient)\n', '    view\n', '    returns (address payable)\n', '  {\n', '    return BaseRelayRecipient._msgSender();\n', '  }\n', '\n', '  modifier onlyManager() {\n', '    require(_msgSender() == feeManager, "StealthSwap: Wrong Fee Manager");\n', '    _;\n', '  }\n', '\n', '  modifier unusedAddr(address _addr) {\n', '    require(!usedAddrs[_addr], "StealthSwap: stealth address cannot be reused");\n', '    _;\n', '  }\n', '}']