['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-29\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the a\n', '     * specified account.\n', '     * @param initalOwner The address of the inital owner.\n', '     */\n', '    constructor(address initalOwner) internal {\n', '        _owner = initalOwner;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Only owner can call");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Owner should not be 0 address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/TokenPool.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _token) Ownable(msg.sender) public {\n', '        token = _token;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\n', '        return token.transfer(to, value);\n', '    }\n', '}\n', '\n', '// File: contracts/AbstractStaking.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Abstract Staking\n', ' * @dev Skeleton of the staking pool for user to stake Balancer BPT token and get bella as reward.\n', ' */\n', 'abstract contract AbstractStaking is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Unstaked(address indexed user, uint256 amount);\n', '    event Claimed(address indexed user, uint256 amount);\n', '\n', '    TokenPool public stakingPool;\n', '    TokenPool public lockedPool;\n', '    TokenPool public unlockedPool;\n', '\n', '    uint256 public startTime;\n', '\n', '    //\n', '    // Global state\n', '    //\n', '    uint256 public totalStakingAmount;\n', '    uint256 public totalStakingAmountTime; // total time * amount staked\n', '    uint256 public lastUpdatedTimestamp;\n', '\n', '    //\n', '    // Addional bella locking related\n', '    //\n', '    uint256 public currentUnlockCycle; // linear count down to release bella token\n', '    uint256 public lastUnlockTime;\n', '\n', '    /**\n', '     * @param stakingBPT The BPT token users deposit as stake.\n', '     * @param bellaToken The bonus token is bella.\n', '     * @param admin The admin address\n', '     * @param _startTime Timestamp that user can stake\n', '     */\n', '    constructor(\n', '        IERC20 stakingBPT,\n', '        IERC20 bellaToken,\n', '        address admin,\n', '        uint256 _startTime\n', '        ) Ownable(admin) \n', '        internal {\n', '        stakingPool = new TokenPool(stakingBPT);\n', '        lockedPool = new TokenPool(bellaToken);\n', '        unlockedPool = new TokenPool(bellaToken);\n', '        startTime = _startTime;\n', '    }\n', '\n', '    /**\n', "     * @return The user's total staking BPT amount\n", '     */\n', '    function totalStakedFor(address user) public view virtual returns (uint256);\n', '\n', '    function totalStaked() public view returns (uint256) {\n', '        return totalStakingAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Stake for the user self\n', '     * @param amount The amount of BPT tokens that the user wishes to stake\n', '     */\n', '    function stake(uint256 amount) external {\n', '        require(!Address.isContract(msg.sender), "No harvest thanks");\n', '        require(now >= startTime, "not started yet");\n', '        _stake(msg.sender, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', "     * @return User's total rewards when clamining\n", '     */\n', '    function totalRewards() external view returns (uint256) {\n', '        return _totalRewardsFor(msg.sender);\n', '    }\n', '\n', '    /**\n', "     * @return A specific user's total rewards when clamining\n", '     */\n', '    function totalRewardsFor(address user) external view returns (uint256) {\n', '        return _totalRewardsFor(user);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim=withdraw all the bella rewards\n', '     */\n', '    function claim() external {\n', '        require(!Address.isContract(msg.sender), "No harvest thanks");\n', '        // cumulate user and global time*amount\n', '        _updateTotalStaking(0);\n', '        _updateUserStaking(0, msg.sender);\n', '\n', '        _poolUnlock();\n', '\n', '        uint256 reward = _calculateRewardAndBurnAll(msg.sender);\n', '\n', '        unlockedPool.transfer(msg.sender, reward);\n', '\n', '        emit Claimed(msg.sender, reward);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim=withdraw all the bella rewards and the staking BPT token,\n', "     * which stops the user's staking\n", '     */\n', '    function claimAndUnstake() external {\n', '        require(!Address.isContract(msg.sender), "No harvest thanks");\n', '        // cumulate user and global time*amount\n', '        _updateTotalStaking(0);\n', '        _updateUserStaking(0, msg.sender);\n', '\n', '        _poolUnlock();\n', '\n', '        (uint256 staking, uint256 reward) = _calculateRewardAndCleanUser(msg.sender);\n', '\n', '        unlockedPool.transfer(msg.sender, reward);\n', '        stakingPool.transfer(msg.sender, staking);\n', '\n', '        emit Claimed(msg.sender, reward);\n', '        emit Unstaked(msg.sender, staking);\n', '    }\n', '\n', '    /**\n', '     * @dev we will lock more bella tokens on the begining of the next releasing cycle\n', '     * @param amount the amount of bella token to lock\n', '     * @param nextUnlockCycle next reward releasing cycle, unit=day\n', '     */\n', '    function lock(uint256 amount, uint256 nextUnlockCycle) external onlyOwner {\n', '        currentUnlockCycle = nextUnlockCycle * 1 days;\n', '        if (now >= startTime) {\n', '            lastUnlockTime = now;\n', '        } else {\n', '            lastUnlockTime = startTime;\n', '        }\n', '            \n', '        require(\n', '            lockedPool.token().transferFrom(msg.sender, address(lockedPool), amount),\n', '            "Additional bella transfer failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Actual logic to handle user staking\n', '     * @param from The user who pays the staking BPT\n', '     * @param beneficiary The user who actually controls the staking BPT\n', '     * @param amount The amount of BPT tokens to stake\n', '     */\n', '    function _stake(address from, address beneficiary, uint256 amount) private {\n', '        require(amount > 0, "can not stake 0 token");\n', '        require(\n', '            stakingPool.token().transferFrom(from, address(stakingPool), amount),\n', '            "Staking BPT transfer failed"\n', '        );\n', '\n', '        _updateUserStaking(amount, beneficiary);\n', '\n', '        _updateTotalStaking(amount);\n', '\n', '        emit Staked(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Update the global state due to more time cumulated and/or new BPT staking token\n', '     * @param amount New BPT staking deposited (can be 0)\n', '     */\n', '    function _updateTotalStaking(uint256 amount) private {\n', '        uint256 additionalAmountTime = totalStakingAmount.mul(now.sub(lastUpdatedTimestamp));\n', '        totalStakingAmount = totalStakingAmount.add(amount);\n', '        totalStakingAmountTime = totalStakingAmountTime.add(additionalAmountTime);\n', '        lastUpdatedTimestamp = now;\n', '    }\n', '\n', '    /**\n', "     * @dev Update a specific user's state due to more time cumulated and/or new BPT staking token\n", '     * @param amount New BPT staking deposited (can be 0)\n', '     * @param user The account to be updated\n', '     */\n', '    function _updateUserStaking(uint256 amount, address user) internal virtual;\n', '\n', '    /**\n', '     * @dev linear count down from 30 days to release bella token,\n', '     * from the locked pool to the unlocked pool\n', '     */\n', '    function _poolUnlock() private {\n', '        if (currentUnlockCycle == 0)\n', '            return; // release ended\n', '        uint256 timeDelta = now.sub(lastUnlockTime);\n', '        if (currentUnlockCycle < timeDelta)\n', '            currentUnlockCycle = timeDelta; // release all\n', '\n', '        uint256 amount = lockedPool.balance().mul(timeDelta).div(currentUnlockCycle);\n', '\n', '        currentUnlockCycle = currentUnlockCycle.sub(timeDelta);\n', '        lastUnlockTime = now;\n', '\n', '        lockedPool.transfer(address(unlockedPool), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculate user's total cumulated reward and burn his/her all staking amount*time\n", '     * @return User cumulated reward bella during the staking process\n', '     */\n', '    function _calculateRewardAndBurnAll(address user) internal virtual returns (uint256);\n', '\n', '    /**\n', "     * @dev Calculate user's total cumulated reward and staking,\n", '     * and remove him/her from the staking process\n', '     * @return [1] User cumulated staking BPT\n', '     * @return [2] User cumulated reward bella during the staking process\n', '     */\n', '    function _calculateRewardAndCleanUser(address user) internal virtual returns (uint256, uint256);\n', '\n', '    /**\n', "     * @dev Internal function to calculate user's total rewards\n", "     * @return A specific user's total rewards when clamining\n", '     */\n', '    function _totalRewardsFor(address user) internal view virtual returns (uint256);\n', '    \n', '}\n', '\n', '// File: contracts/LinearStaking.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '/**\n', ' * @title Linear Staking\n', ' * @dev A staking pool for user to stake Balancer BPT token and get bella as reward.\n', ' * The reward is always proportional to the amount*time of the staking.\n', ' * The reward is added by the admin at the 0th, 30th and 60th day, respectively.\n', ' */\n', 'contract LinearStaking is AbstractStaking {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address=>Staking) public stakingInfo;\n', '\n', '    struct Staking {\n', '        uint256 amount;\n', '        uint256 totalAmountTime; // staking amount*time\n', '        uint256 lastUpdatedTimestamp;\n', '    }\n', '\n', '    /**\n', '     * @param stakingBPT The BPT token users deposit as stake.\n', '     * @param bellaToken The bonus token is bella.\n', '     * @param admin The admin address\n', '     * @param _startTime Timestamp that user can stake\n', '     */\n', '    constructor(\n', '        IERC20 stakingBPT,\n', '        IERC20 bellaToken,\n', '        address admin,\n', '        uint256 _startTime\n', '        ) AbstractStaking(\n', '            stakingBPT,\n', '            bellaToken,\n', '            admin,\n', '            _startTime\n', '        ) public {}\n', '\n', '    /**\n', "     * @return The user's total staking BPT amount\n", '     */\n', '    function totalStakedFor(address user) public view override returns (uint256) {\n', '        return stakingInfo[user].amount;\n', '    }\n', '\n', '    /**\n', "     * @dev Update a specific user's state due to more time cumulated and/or new BPT staking token\n", '     * @param amount New BPT staking deposited (can be 0)\n', '     * @param user The account to be updated\n', '     */\n', '    function _updateUserStaking(uint256 amount, address user) internal override {\n', '        Staking memory userInfo = stakingInfo[user];\n', '        uint256 additionalAmountTime = userInfo.amount.mul(now.sub(userInfo.lastUpdatedTimestamp));\n', '        userInfo.totalAmountTime = userInfo.totalAmountTime.add(additionalAmountTime);\n', '        userInfo.amount = userInfo.amount.add(amount);\n', '        userInfo.lastUpdatedTimestamp = now;\n', '        stakingInfo[user] = userInfo;\n', '    }\n', '\n', '    /**\n', "     * @dev Calculate user's total cumulated reward and burn his/her all staking amount*time\n", '     * @return User cumulated reward bella during the staking process\n', '     */\n', '    function _calculateRewardAndBurnAll(address user) internal override returns (uint256) {\n', '        Staking memory userInfo = stakingInfo[user];\n', '        uint256 reward = unlockedPool.balance().mul(userInfo.totalAmountTime).div(totalStakingAmountTime);\n', '\n', '        totalStakingAmountTime = totalStakingAmountTime.sub(userInfo.totalAmountTime);\n', '\n', '        stakingInfo[user].totalAmountTime = 0;\n', '\n', '        return reward;\n', '    }\n', '\n', '    /**\n', "     * @dev Calculate user's total cumulated reward and staking,\n", '     * and remove him/her from the staking process\n', '     * @return [1] User cumulated staking BPT\n', '     * @return [2] User cumulated reward bella during the staking process\n', '     */\n', '    function _calculateRewardAndCleanUser(address user) internal override returns (uint256, uint256) {\n', '        Staking memory userInfo = stakingInfo[user];\n', '        uint256 reward = unlockedPool.balance().mul(userInfo.totalAmountTime).div(totalStakingAmountTime);\n', '        uint256 staking = userInfo.amount;\n', '\n', '        totalStakingAmountTime = totalStakingAmountTime.sub(userInfo.totalAmountTime);\n', '        totalStakingAmount = totalStakingAmount.sub(userInfo.amount);\n', '\n', '        delete stakingInfo[user];\n', '\n', '        return (staking, reward);\n', '    }\n', '\n', '    /**\n', "     * @dev Internal function to calculate user's total rewards\n", "     * @return A specific user's total rewards when clamining\n", '     */\n', '    function _totalRewardsFor(address user) internal view override returns (uint256) {\n', '\n', '        // calculate new total staking amount*time\n', '        uint256 additionalAmountTime = totalStakingAmount.mul(now.sub(lastUpdatedTimestamp));\n', '        uint256 newTotalStakingAmountTime = totalStakingAmountTime.add(additionalAmountTime);\n', '\n', '        // calculate new user staking\n', '        Staking memory userInfo = stakingInfo[user];\n', '        uint256 additionalUserAmountTime = userInfo.amount.mul(now.sub(userInfo.lastUpdatedTimestamp));\n', '        uint256 newUserTotalAmountTime = userInfo.totalAmountTime.add(additionalUserAmountTime);\n', '\n', '        // calculate total unlocked pool\n', '        uint256 unlockedAmount = unlockedPool.balance();\n', '        if (currentUnlockCycle != 0) {\n', '            uint256 timeDelta = now.sub(lastUnlockTime);\n', '            if (currentUnlockCycle < timeDelta) {\n', '                unlockedAmount = unlockedAmount.add(lockedPool.balance());\n', '            } else {\n', '                uint256 additionalAmount = lockedPool.balance().mul(timeDelta).div(currentUnlockCycle);\n', '                unlockedAmount = unlockedAmount.add(additionalAmount);\n', '            }\n', '        }\n', '\n', '        uint256 reward = unlockedAmount.mul(newUserTotalAmountTime).div(newTotalStakingAmountTime); \n', '        return reward;       \n', '    }\n', '}']