['// SPDX-License-Identifier: GPL-3.0-or-later\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '\n', '    uint private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IHegicOptions {\n', '    event Create(\n', '        uint indexed id,\n', '        address indexed account,\n', '        uint totalFee\n', '    );\n', '\n', '    event Exercise(uint indexed id, uint profit);\n', '    event Expire(uint indexed id, uint premium);\n', '    enum State {Inactive, Active, Exercised, Expired}\n', '    enum OptionType {Invalid, Put, Call}\n', '\n', '    struct Option {\n', '        State state;\n', '        uint lockID;\n', '        address payable holder;\n', '        uint strike;\n', '        uint amount;\n', '        uint lockedAmount;\n', '        uint premium;\n', '        uint expiration;\n', '        OptionType optionType;\n', '    }\n', '\n', '    function options(uint) external view returns (\n', '        State state,\n', '        uint lockID,\n', '        address payable holder,\n', '        uint strike,\n', '        uint amount,\n', '        uint lockedAmount,\n', '        uint premium,\n', '        uint expiration,\n', '        OptionType optionType\n', '    );\n', '}\n', '\n', 'interface IUniswapV2SlidingOracle {\n', '    function quote(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (uint amountOut);\n', '}\n', '\n', 'interface ICurveFi {\n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    function add_liquidity(\n', '        // sBTC pool\n', '        uint[3] calldata amounts,\n', '        uint min_mint_amount\n', '    ) external;\n', '}\n', 'interface IyVault {\n', '    function getPricePerFullShare() external view returns (uint);\n', '    function depositAll() external;\n', '    function balanceOf(address owner) external view returns (uint);\n', '}\n', '\n', 'interface IHegicERCPool {\n', '    function lock(uint id, uint amount, uint premium) external;\n', '    function unlock(uint id) external;\n', '    function send(uint id, address payable to, uint amount) external;\n', '    function getNextID() external view returns (uint);\n', '    function RESERVE() external view returns (address);\n', '}\n', '\n', '// File: contracts/Options/HegicOptions.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * Hegic\n', ' * Copyright (C) 2020 Hegic Protocol\n', ' *\n', ' * This program is free software: you can redistribute it and/or modify\n', ' * it under the terms of the GNU General Public License as published by\n', ' * the Free Software Foundation, either version 3 of the License, or\n', ' * (at your option) any later version.\n', ' *\n', ' * This program is distributed in the hope that it will be useful,\n', ' * but WITHOUT ANY WARRANTY; without even the implied warranty of\n', ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', ' * GNU General Public License for more details.\n', ' *\n', ' * You should have received a copy of the GNU General Public License\n', ' * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @author 0mllwntrmt3 & @andrecronje\n', ' * @title Hegic Generic Bidirectional (Call and Put) Options\n', ' * @notice Hegic Protocol Options Contract\n', ' */\n', 'contract HegicOptions is Ownable, IHegicOptions {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    Option[] public override options;\n', '    uint public impliedVolRate;\n', '    uint public optionCollateralizationRatio = 100;\n', '    uint internal contractCreationTimestamp;\n', '    \n', '    \n', '    uint internal constant IV_DECIMALS = 1e8;\n', '    IUniswapV2SlidingOracle public constant ORACLE = IUniswapV2SlidingOracle(0xCA2E2df6A7a7Cf5bd19D112E8568910a6C2D3885);\n', '    uint8 constant public GRANULARITY = 8;\n', '    \n', '    IERC20 constant public DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    IERC20 constant public USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    IERC20 constant public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    \n', '    ICurveFi constant public CURVE = ICurveFi(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n', '    IyVault constant public YEARN = IyVault(0x9cA85572E6A3EbF24dEDd195623F188735A5179f);\n', '    IERC20 constant public CRV3 = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n', '    address immutable public ASSET;\n', '    uint immutable public ONE;\n', '    IHegicERCPool immutable public POOL;\n', '    \n', '    constructor(\n', '        IHegicERCPool _pool,\n', '        address _asset\n', '    ) public {\n', '        POOL = _pool;\n', '        ASSET = _asset;\n', '        ONE = uint(10)**ERC20(_asset).decimals();\n', '        impliedVolRate = 4500;\n', '        contractCreationTimestamp = block.timestamp;\n', '    }\n', '\n', '    /**\n', "     * @notice Used for adjusting the options prices while balancing asset's implied volatility rate\n", '     * @param value New IVRate value\n', '     */\n', '    function setImpliedVolRate(uint value) external onlyOwner {\n', '        require(value >= 1000, "ImpliedVolRate limit is too small");\n', '        impliedVolRate = value;\n', '    }\n', '\n', '    /**\n', '     * @notice Used for changing option collateralization ratio\n', '     * @param value New optionCollateralizationRatio value\n', '     */\n', '    function setOptionCollaterizationRatio(uint value) external onlyOwner {\n', '        require(50 <= value && value <= 100, "wrong value");\n', '        optionCollateralizationRatio = value;\n', '    }\n', '    \n', '    /**\n', '     * @notice Provides a quote of how much output can be expected given the inputs\n', '     * @param tokenIn the asset being received\n', '     * @param amountIn the amount of tokenIn being provided\n', '     * @return minOut the minimum amount of liquidity to send\n', '     */\n', '    function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {\n', '        if (tokenIn != WETH) {\n', '            amountIn = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);\n', '        }\n', '        minOut = ORACLE.quote(WETH, amountIn, address(DAI), GRANULARITY);\n', '    }\n', '    \n', '    /**\n', '     * @notice Creates a new option\n', '     * @param period Option period in seconds (1 days <= period <= 4 weeks)\n', '     * @param amount Option amount\n', '     * @param strike Strike price of the option\n', '     * @param optionType Call or Put option type\n', "     * @return optionID Created option's ID\n", '     */\n', '    function create(\n', '        address asset,\n', '        uint period,\n', '        uint amount, // amount of the underlying asset (address, amountIn)\n', '        uint strike, // price in DAI as per quote(address, uint)\n', '        uint maxFee,\n', '        OptionType optionType\n', '    ) external returns (uint optionID)  {\n', '        require(\n', '            asset == address(DAI) || asset == address(USDC) || asset == address(USDT), \n', '            "invalid asset"\n', '        );\n', '        require(\n', '            optionType == OptionType.Call || optionType == OptionType.Put,\n', '            "Wrong option type"\n', '        );\n', '        require(period >= 1 days, "Period is too short");\n', '        require(period <= 4 weeks, "Period is too long");\n', '        \n', '        uint amountInDAI = quote(ASSET, amount);\n', '        (uint total,, uint strikeFee, ) =\n', '            fees(period, amountInDAI, strike, optionType);\n', '        \n', '        uint _fee = convertDAI2Asset(asset, total);\n', '        \n', '        require(amount > strikeFee, "price difference is too large");\n', '        require(_fee < maxFee, "fee exceeds max fee");\n', '        optionID = options.length;\n', '\n', '        Option memory option = Option(\n', '            State.Active, // state\n', '            POOL.getNextID(), // lockID\n', '            msg.sender, // holder\n', '            strike,\n', '            amount,\n', '            Asset2Y3P(amountInDAI),\n', '            total, // premium\n', '            block.timestamp + period, // expiration\n', '            optionType\n', '        );\n', '\n', '        IERC20(asset).safeTransferFrom(msg.sender, address(this), _fee);\n', '        convertToY3P();\n', '        \n', '        options.push(option);\n', '        POOL.lock(option.lockID, option.lockedAmount, YEARN.balanceOf(address(this)));\n', '\n', '        emit Create(optionID, msg.sender, total);\n', '    }\n', '    \n', '    function convertDAI2Asset(address asset, uint total) public view returns (uint) {\n', '        return total.mul(ERC20(asset).decimals()).div(ERC20(address(DAI)).decimals());\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers an active option\n', '     * @param optionID ID of your option\n', '     * @param newHolder Address of new option holder\n', '     */\n', '    function transfer(uint optionID, address payable newHolder) external {\n', '        Option storage option = options[optionID];\n', '\n', '        require(newHolder != address(0), "new holder address is zero");\n', '        require(option.expiration >= block.timestamp, "Option has expired");\n', '        require(option.holder == msg.sender, "Wrong msg.sender");\n', '        require(option.state == State.Active, "Only active option could be transferred");\n', '\n', '        option.holder = newHolder;\n', '    }\n', '\n', '    /**\n', '     * @notice Exercises an active option\n', '     * @param optionID ID of your option\n', '     */\n', '    function exercise(uint optionID) external {\n', '        Option storage option = options[optionID];\n', '\n', '        require(option.expiration >= block.timestamp, "Option has expired");\n', '        require(option.holder == msg.sender, "Wrong msg.sender");\n', '        require(option.state == State.Active, "Wrong state");\n', '\n', '        option.state = State.Exercised;\n', '        uint profit = payProfit(optionID);\n', '\n', '        emit Exercise(optionID, profit);\n', '    }\n', '\n', '    /**\n', '     * @notice Unlocks an array of options\n', '     * @param optionIDs array of options\n', '     */\n', '    function unlockAll(uint[] calldata optionIDs) external {\n', '        uint arrayLength = optionIDs.length;\n', '        for (uint i = 0; i < arrayLength; i++) {\n', '            unlock(optionIDs[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the ERC pool contract to receive and send tokens\n', '     */\n', '    function approve() public {\n', '        IERC20(POOL.RESERVE()).safeApprove(address(POOL), uint(0));\n', '        \n', '        DAI.safeApprove(address(CURVE), uint(0));\n', '        USDT.safeApprove(address(CURVE), uint(0));\n', '        USDC.safeApprove(address(CURVE), uint(0));\n', '        CRV3.safeApprove(address(YEARN), uint(0));\n', '        \n', '        IERC20(POOL.RESERVE()).safeApprove(address(POOL), uint(-1));\n', '        \n', '        DAI.safeApprove(address(CURVE), uint(-1));\n', '        USDT.safeApprove(address(CURVE), uint(-1));\n', '        USDC.safeApprove(address(CURVE), uint(-1));\n', '        CRV3.safeApprove(address(YEARN), uint(-1));\n', '    }\n', '\n', '    /**\n', '     * @notice Used for getting the actual options prices\n', '     * @param period Option period in seconds (1 days <= period <= 4 weeks)\n', '     * @param amount Option amount\n', '     * @param strike Strike price of the option\n', '     * @return total Total price to be paid\n', '     * @return settlementFee Amount to be distributed to the HEGIC token holders\n', '     * @return strikeFee Amount that covers the price difference in the ITM options\n', '     * @return periodFee Option period fee amount\n', '     */\n', '    function fees(\n', '        uint period,\n', '        uint amount,\n', '        uint strike,\n', '        OptionType optionType\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            uint total,\n', '            uint settlementFee,\n', '            uint strikeFee,\n', '            uint periodFee\n', '        )\n', '    {\n', '        uint currentPrice = quote(ASSET, ONE);\n', '        settlementFee = getSettlementFee(amount);\n', '        periodFee = getPeriodFee(amount, period, strike, currentPrice, optionType);\n', '        strikeFee = getStrikeFee(amount, strike, currentPrice, optionType);\n', '        total = periodFee.add(strikeFee).add(settlementFee);\n', '    }\n', '\n', '    /**\n', '     * @notice Unlock funds locked in the expired options\n', '     * @param optionID ID of the option\n', '     */\n', '    function unlock(uint optionID) public {\n', '        Option storage option = options[optionID];\n', '        require(option.expiration < block.timestamp, "Option has not expired yet");\n', '        require(option.state == State.Active, "Option is not active");\n', '        option.state = State.Expired;\n', '        POOL.unlock(optionID);\n', '        emit Expire(optionID, option.premium);\n', '    }\n', '    \n', '    function price() external view returns (uint) {\n', '        return quote(ASSET, ONE);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates settlementFee\n', '     * @param amount Option amount\n', '     * @return fee Settlement fee amount\n', '     */\n', '    function getSettlementFee(uint amount)\n', '        internal\n', '        pure\n', '        returns (uint fee)\n', '    {\n', '        return amount / 100;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates periodFee\n', '     * @param amount Option amount\n', '     * @param period Option period in seconds (1 days <= period <= 4 weeks)\n', '     * @param strike Strike price of the option\n', '     * @param currentPrice Current price of BTC\n', '     * @return fee Period fee amount\n', '     *\n', '     * amount < 1e30        |\n', '     * impliedVolRate < 1e10| => amount * impliedVolRate * strike < 1e60 < 2^uint\n', '     * strike < 1e20 ($1T)  |\n', '     *\n', '     * in case amount * impliedVolRate * strike >= 2^256\n', '     * transaction will be reverted by the SafeMath\n', '     */\n', '    function getPeriodFee(\n', '        uint amount,\n', '        uint period,\n', '        uint strike,\n', '        uint currentPrice,\n', '        OptionType optionType\n', '    ) internal view returns (uint fee) {\n', '        if (optionType == OptionType.Put)\n', '            return amount\n', '                .mul(sqrt(period))\n', '                .mul(impliedVolRate)\n', '                .mul(strike)\n', '                .div(currentPrice)\n', '                .div(IV_DECIMALS);\n', '        else\n', '            return amount\n', '                .mul(sqrt(period))\n', '                .mul(impliedVolRate)\n', '                .mul(currentPrice)\n', '                .div(strike)\n', '                .div(IV_DECIMALS);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates strikeFee\n', '     * @param amount Option amount\n', '     * @param strike Strike price of the option\n', '     * @param currentPrice Current price of BTC\n', '     * @return fee Strike fee amount\n', '     */\n', '    function getStrikeFee(\n', '        uint amount,\n', '        uint strike,\n', '        uint currentPrice,\n', '        OptionType optionType\n', '    ) internal pure returns (uint fee) {\n', '        if (strike > currentPrice && optionType == OptionType.Put)\n', '            return strike.sub(currentPrice).mul(amount).div(currentPrice);\n', '        if (strike < currentPrice && optionType == OptionType.Call)\n', '            return currentPrice.sub(strike).mul(amount).div(currentPrice);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', "     * @notice Sends profits in WBTC from the WBTC pool to an option holder's address\n", '     * @param optionID A specific option contract id\n', '     */\n', '    function payProfit(uint optionID)\n', '        internal\n', '        returns (uint profit)\n', '    {\n', '        Option memory option = options[optionID];\n', '        uint currentPrice = quote(ASSET, ONE);\n', '        if (option.optionType == OptionType.Call) {\n', '            require(option.strike <= currentPrice, "Current price is too low");\n', '            profit = currentPrice.sub(option.strike).mul(option.amount);\n', '        } else {\n', '            require(option.strike >= currentPrice, "Current price is too high");\n', '            profit = option.strike.sub(currentPrice).mul(option.amount);\n', '        }\n', '        if (profit > option.lockedAmount)\n', '            profit = option.lockedAmount;\n', '            \n', '        profit = Asset2Y3P(profit);\n', '        POOL.send(option.lockID, option.holder, profit);\n', '    }\n', '    \n', '    function Asset2Y3P(uint amount) public view returns (uint _yearn) {\n', '        uint _curve = amount.mul(1e18).div(CURVE.get_virtual_price());\n', '        _yearn = _curve.mul(1e18).div(YEARN.getPricePerFullShare());\n', '    }\n', '    \n', '    function convertToY3P() internal {\n', '        CURVE.add_liquidity([DAI.balanceOf(address(this)), USDC.balanceOf(address(this)), USDT.balanceOf(address(this))], 0);\n', '        YEARN.depositAll();\n', '    }\n', '\n', '    /**\n', '     * @return result Square root of the number\n', '     */\n', '    function sqrt(uint x) private pure returns (uint result) {\n', '        result = x;\n', '        uint k = x.div(2).add(1);\n', '        while (k < result) (result, k) = (k, x.div(k).add(k).div(2));\n', '    }\n', '}']