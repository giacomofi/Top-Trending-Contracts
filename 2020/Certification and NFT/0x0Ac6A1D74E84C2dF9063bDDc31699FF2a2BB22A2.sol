['/// join.sol -- Non-standard token adapters\n', '\n', '// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity >=0.5.12;\n', '\n', 'contract LibNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  usr,\n', '        bytes32  indexed  arg1,\n', '        bytes32  indexed  arg2,\n', '        bytes             data\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        _;\n', '        assembly {\n', "            // log an 'anonymous' event with a constant 6 words of calldata\n", '            // and four indexed topics: selector, caller, arg1 and arg2\n', '            let mark := msize()                       // end of memory ensures zero\n', '            mstore(0x40, add(mark, 288))              // update free memory pointer\n', '            mstore(mark, 0x20)                        // bytes type data offset\n', '            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n', '            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n', '            log4(mark, 288,                           // calldata\n', '                 shl(224, shr(224, calldataload(0))), // msg.sig\n', '                 caller(),                            // msg.sender\n', '                 calldataload(4),                     // arg1\n', '                 calldataload(36)                     // arg2\n', '                )\n', '        }\n', '    }\n', '}\n', '\n', 'interface VatLike {\n', '    function slip(bytes32,address,int) external;\n', '}\n', '\n', '// GemJoin7\n', "// For an upgradable token (like USDT) which doesn't return bool on transfers and may charge fees\n", '//  If the token is deprecated changing the implementation behind, this prevents joins\n', '//   and exits until the implementation is reviewed and approved by governance.\n', '\n', 'interface GemLike7 {\n', '    function decimals() external view returns (uint);\n', '    function transfer(address,uint) external;\n', '    function transferFrom(address,address,uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function upgradedAddress() external view returns (address);\n', '    function setImplementation(address,uint) external;\n', '    function adjustFee(uint) external;\n', '}\n', '\n', 'contract GemJoin7 is LibNote {\n', '    mapping (address => uint) public wards;\n', '    function rely(address usr) external note auth { wards[usr] = 1; }\n', '    function deny(address usr) external note auth { wards[usr] = 0; }\n', '    modifier auth { require(wards[msg.sender] == 1); _; }\n', '\n', '    VatLike  public vat;\n', '    bytes32  public ilk;\n', '    GemLike7 public gem;\n', '    uint     public dec;\n', '    uint     public live; // Access flag\n', '\n', '    mapping (address => uint256) public implementations;\n', '\n', '    constructor(address vat_, bytes32 ilk_, address gem_) public {\n', '        gem = GemLike7(gem_);\n', '        dec = gem.decimals();\n', '        require(dec < 18, "GemJoin7/decimals-18-or-higher");\n', '        wards[msg.sender] = 1;\n', '        live = 1;\n', '        vat = VatLike(vat_);\n', '        ilk = ilk_;\n', '        setImplementation(address(gem.upgradedAddress()), 1);\n', '    }\n', '\n', '    function cage() external note auth {\n', '        live = 0;\n', '    }\n', '\n', '    function setImplementation(address implementation, uint256 permitted) public auth note {\n', '        implementations[implementation] = permitted; // 1 live, 0 disable\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "GemJoin7/overflow");\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "GemJoin7/underflow");\n', '    }\n', '\n', '    function join(address urn, uint wad) public note {\n', '        require(live == 1, "GemJoin7/not-live");\n', '        require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");\n', '        uint bal = gem.balanceOf(address(this));\n', '        gem.transferFrom(msg.sender, address(this), wad);\n', '        uint wadt = mul(sub(gem.balanceOf(address(this)), bal), 10 ** (18 - dec));\n', '        require(int(wadt) >= 0, "GemJoin7/overflow");\n', '        vat.slip(ilk, urn, int(wadt));\n', '    }\n', '\n', '    function exit(address guy, uint wad) public note {\n', '        uint wad18 = mul(wad, 10 ** (18 - dec));\n', '        require(int(wad18) >= 0, "GemJoin7/overflow");\n', '        require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");\n', '        vat.slip(ilk, msg.sender, -int(wad18));\n', '        gem.transfer(guy, wad);\n', '    }\n', '}']