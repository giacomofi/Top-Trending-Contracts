['pragma solidity ^0.5.5;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract SupporterRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event SupporterAdded(address indexed account);\n', '    event SupporterRemoved(address indexed account);\n', '\n', '    Roles.Role private _supporters;\n', '\n', '    constructor () internal {\n', '        _addSupporter(_msgSender());\n', '    }\n', '\n', '    modifier onlySupporter() {\n', '        require(isSupporter(_msgSender()), "SupporterRole: caller does not have the Supporter role");\n', '        _;\n', '    }\n', '\n', '    function isSupporter(address account) public view returns (bool) {\n', '        return _supporters.has(account);\n', '    }\n', '\n', '    function addSupporter(address account) public onlySupporter {\n', '        _addSupporter(account);\n', '    }\n', '\n', '    function renounceSupporter() public {\n', '        _removeSupporter(_msgSender());\n', '    }\n', '\n', '    function _addSupporter(address account) internal {\n', '        _supporters.add(account);\n', '        emit SupporterAdded(account);\n', '    }\n', '\n', '    function _removeSupporter(address account) internal {\n', '        _supporters.remove(account);\n', '        emit SupporterRemoved(account);\n', '    }\n', '}\n', '\n', 'contract PauserRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(_msgSender());\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(_msgSender());\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context, PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() internal view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() internal view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it).\n', ' */\n', 'contract Secondary is Context {\n', '    address private _primary;\n', '\n', '    /**\n', '     * @dev Emitted when the primary contract changes.\n', '     */\n', '    event PrimaryTransferred(\n', '        address recipient\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _primary = msgSender;\n', '        emit PrimaryTransferred(msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if called from any account other than the primary.\n', '     */\n', '    modifier onlyPrimary() {\n', '        require(_msgSender() == _primary, "Secondary: caller is not the primary account");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the primary.\n', '     */\n', '    function primary() public view returns (address) {\n', '        return _primary;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers contract to a new primary.\n', '     * @param recipient The address of new primary.\n', '     */\n', '    function transferPrimary(address recipient) public onlyPrimary {\n', '        require(recipient != address(0), "Secondary: new primary is the zero address");\n', '        _primary = recipient;\n', '        emit PrimaryTransferred(recipient);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title __unstable__TokenVault\n', ' * @dev Similar to an Escrow for tokens, this contract allows its primary account to spend its tokens as it sees fit.\n', ' * This contract is an internal helper for PostDeliveryCrowdsale, and should not be used outside of this context.\n', ' */\n', '// solhint-disable-next-line contract-name-camelcase\n', 'contract __unstable__TokenVault is Secondary {\n', '    function transferToken(IERC20 token, address to, uint256 amount) public onlyPrimary {\n', '        token.transfer(to, amount);\n', '    }\n', '    function transferFunds(address payable to, uint256 amount) public onlyPrimary {\n', '        require (address(this).balance >= amount);\n', '        to.transfer(amount);\n', '    }\n', '    function () external payable {}\n', '}\n', '\n', '/**\n', ' * @title MoonStaking\n', ' */\n', 'contract MoonStaking is Ownable, Pausable, SupporterRole, ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    struct Pool {\n', '        uint256 rate;\n', '        uint256 adapter;\n', '        uint256 totalStaked;\n', '    }\n', '    struct User {\n', '        mapping(address => UserSp) tokenPools;\n', '        UserSp ePool;\n', '\t}\n', '    struct UserSp {\n', '        uint256 staked;\n', '        uint256 lastRewardTime;\n', '        uint256 earned;\n', '\t}\n', '\n', '    mapping(address => User) users;\n', '    mapping(address => Pool) pools;\n', '\n', '    // The MOON TOKEN!\n', '    IERC20 public moon;\n', '\n', '    uint256 eRate;\n', '    uint256 eAdapter;\n', '    uint256 eTotalStaked;\n', '\n', '    __unstable__TokenVault private _vault;\n', '\n', '    /**\n', '     * @param _moon The MOON token.\n', '     */\n', '    constructor(IERC20 _moon) public {\n', '        _vault = new __unstable__TokenVault();\n', '        moon = _moon;\n', '    }\n', '\n', '    /**\n', '    * @dev Update token pool rate\n', '    * @return True when successful\n', '    */\n', '    function updatePoolRate(address pool, uint256 _rate, uint256 _adapter)\n', '        public onlyOwner returns (bool) {\n', '        pools[pool].rate = _rate;\n', '        pools[pool].adapter = _adapter;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Update epool pool rate\n', '    * @return True when successful\n', '    */\n', '    function updateEpoolRate(uint256 _rate, uint256 _adapter)\n', '        public onlyOwner returns (bool) {\n', '        eRate = _rate;\n', '        eAdapter = _adapter;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the pool is available.\n', '    * @return Whether the pool is available.\n', '    */\n', '    function isPoolAvailable(address pool) public view returns (bool) {\n', '        return pools[pool].rate != 0;\n', '    }\n', '\n', '    /**\n', '    * @dev View pool token info\n', '    * @param _pool Token address.\n', '    * @return Pool info\n', '    */\n', '    function poolTokenInfo(address _pool) public view returns (\n', '        uint256 rate,\n', '        uint256 adapter,\n', '        uint256 totalStaked\n', '    ) {\n', '        Pool storage pool = pools[_pool];\n', '        return (pool.rate, pool.adapter, pool.totalStaked);\n', '    }\n', '\n', '    /**\n', '    * @dev View pool E info\n', '    * @return Pool info\n', '    */\n', '    function poolInfo(address poolAddress) public view returns (\n', '        uint256 rate,\n', '        uint256 adapter,\n', '        uint256 totalStaked\n', '    ) {\n', '        Pool storage sPool = pools[poolAddress];\n', '        return (sPool.rate, sPool.adapter, sPool.totalStaked);\n', '    }\n', '\n', '    /**\n', '    * @dev View pool E info\n', '    * @return Pool info\n', '    */\n', '    function poolEInfo() public view returns (\n', '        uint256 rate,\n', '        uint256 adapter,\n', '        uint256 totalStaked\n', '    ) {\n', '        return (eRate, eAdapter, eTotalStaked);\n', '    }\n', '\n', '        /**\n', '     * @dev Get earned reward in e pool.\n', '     */\n', '    function getEarnedEpool() public view returns (uint256) {\n', '        UserSp storage pool = users[_msgSender()].ePool;\n', '        return _getEarned(eRate, eAdapter, pool);\n', '    }\n', '\n', '    /**\n', '     * @dev Get earned reward in t pool.\n', '     */\n', '    function getEarnedTpool(address stakingPoolAddress) public view returns (uint256) {\n', '        UserSp storage stakingPool = users[_msgSender()].tokenPools[stakingPoolAddress];\n', '        Pool storage pool = pools[stakingPoolAddress];\n', '        return _getEarned(pool.rate, pool.adapter, stakingPool);\n', '    }\n', '\n', '    /**\n', '     * @dev Stake with E\n', '     * @return true if successful\n', '     */\n', '    function stakeE() public payable returns (bool) {\n', '        uint256 _value = msg.value;\n', '        require(_value != 0, "Zero amount");\n', '        address(uint160((address(_vault)))).transfer(_value);\n', '        UserSp storage ePool = users[_msgSender()].ePool;\n', '        ePool.earned = ePool.earned.add(_getEarned(eRate, eAdapter, ePool));\n', '        ePool.lastRewardTime = block.timestamp;\n', '        ePool.staked = ePool.staked.add(_value);\n', '        eTotalStaked = eTotalStaked.add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Stake with tokens\n', '     * @param _value Token amount.\n', '     * @param token Token address.\n', '     * @return true if successful\n', '     */\n', '    function stake(uint256 _value, IERC20 token) public returns (bool) {\n', '        require(token.balanceOf(_msgSender()) >= _value, "Insufficient Funds");\n', '        require(token.allowance(_msgSender(), address(this)) >= _value, "Insufficient Funds Approved");\n', '        address tokenAddress = address(token);\n', '        require(isPoolAvailable(tokenAddress), "Pool is not available");\n', '        _forwardFundsToken(token, _value);\n', '        Pool storage pool = pools[tokenAddress];\n', '        UserSp storage tokenPool = users[_msgSender()].tokenPools[tokenAddress];\n', '        tokenPool.earned = tokenPool.earned.add(_getEarned(pool.rate, pool.adapter, tokenPool));\n', '        tokenPool.lastRewardTime = block.timestamp;\n', '        tokenPool.staked = tokenPool.staked.add(_value);\n', '        pool.totalStaked = pool.totalStaked.add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw all available tokens.\n', '     */\n', '    function withdrawTokenPool(address token) public whenNotPaused nonReentrant returns (bool) {\n', '        UserSp storage tokenStakingPool = users[_msgSender()].tokenPools[token];\n', '        require(tokenStakingPool.staked > 0 != tokenStakingPool.earned > 0, "Not available");\n', '        if (tokenStakingPool.earned > 0) {\n', '            Pool storage pool = pools[token];\n', '            _vault.transferToken(moon, _msgSender(),  _getEarned(pool.rate, pool.adapter, tokenStakingPool));\n', '            tokenStakingPool.lastRewardTime = block.timestamp;\n', '            tokenStakingPool.earned = 0;\n', '        }\n', '        if (tokenStakingPool.staked > 0) {\n', '            _vault.transferToken(IERC20(token), _msgSender(), tokenStakingPool.staked);\n', '            tokenStakingPool.staked = 0;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw all available tokens.\n', '     */\n', '    function withdrawEPool() public whenNotPaused nonReentrant returns (bool) {\n', '        UserSp storage eStakingPool = users[_msgSender()].ePool;\n', '        require(eStakingPool.staked > 0 != eStakingPool.earned > 0, "Not available");\n', '        if (eStakingPool.earned > 0) {\n', '            _vault.transferToken(moon, _msgSender(),  _getEarned(eRate, eAdapter, eStakingPool));\n', '            eStakingPool.lastRewardTime = block.timestamp;\n', '            eStakingPool.earned = 0;\n', '        }\n', '        if (eStakingPool.staked > 0) {\n', '            _vault.transferFunds(_msgSender(), eStakingPool.staked);\n', '            eStakingPool.staked = 0;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Claim earned Moon.\n', '     */\n', '    function claimMoonInTpool(address token) public whenNotPaused returns (bool) {\n', '        UserSp storage tokenStakingPool = users[_msgSender()].tokenPools[token];\n', '        require(tokenStakingPool.staked > 0 != tokenStakingPool.earned > 0, "Not available");\n', '        Pool storage pool = pools[token];\n', '        _vault.transferToken(moon, _msgSender(), _getEarned(pool.rate, pool.adapter, tokenStakingPool));\n', '        tokenStakingPool.lastRewardTime = block.timestamp;\n', '        tokenStakingPool.earned = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Claim earned Moon.\n', '     */\n', '    function claimMoonInEpool() public whenNotPaused returns (bool) {\n', '        UserSp storage eStakingPool = users[_msgSender()].ePool;\n', '        require(eStakingPool.staked > 0 != eStakingPool.earned > 0, "Not available");\n', '        _vault.transferToken(moon, _msgSender(), _getEarned(eRate, eAdapter, eStakingPool));\n', '        eStakingPool.lastRewardTime = block.timestamp;\n', '        eStakingPool.earned = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Get reserved token.\n', '     */\n', '    function getReserved() public view onlyOwner\n', '        returns (uint256 vaultTokens, uint256 vaultFunds) {\n', '        address vaultAddress = address(_vault);\n', '        vaultTokens = moon.balanceOf(vaultAddress);\n', '        vaultFunds = address(uint160(vaultAddress)).balance;\n', '    }\n', '\n', '    /**\n', '     * @dev Get reserved token by address.\n', '     */\n', '    function getReservedByAddress(IERC20 token) public view onlyOwner returns (uint256) {\n', '        return token.balanceOf(address(_vault));\n', '    }\n', '\n', '    /**\n', '     * @dev Supply token for the vaults.\n', '     * @param amount Supply amount\n', '     */\n', '    function supplyVault(uint256 amount)\n', '        public onlyOwner\n', '        returns (bool) {\n', '        moon.transferFrom(_msgSender(), address(_vault), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev deprive tokens from vaults.\n', '     * @param vault Vault address\n', '     * @param amount The amount\n', '     */\n', '    function depriveToken(address vault, IERC20 token, uint256 amount)\n', '        public onlyOwner returns (bool) {\n', '        _vault.transferToken(token, vault, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev deprive funds from vaults.\n', '     * @param vault Vault address\n', '     * @param amount The amount\n', '     */\n', '    function depriveFunds(address payable vault, uint256 amount)\n', '        public onlyOwner\n', '        returns (bool) {\n', '        _vault.transferFunds(vault, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function\n', '     */\n', '    function () external payable {\n', '        address(uint160((address(_vault)))).transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior\n', '     * @param erc20Token ERC20 Token\n', '     * @param _value Amount contributed\n', '     */\n', '    function _forwardFundsToken(IERC20 erc20Token, uint256 _value) internal {\n', '        erc20Token.transferFrom(_msgSender(), address(_vault), _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Get earned reward.\n', '     */\n', '    function _getEarned(uint256 rate, uint256 adapter, UserSp memory stakingPool) internal view returns (uint256) {\n', '        uint256 moonPerSec = stakingPool.staked.mul(rate).div(adapter);\n', '        return block.timestamp.sub(stakingPool.lastRewardTime).mul(moonPerSec).add(stakingPool.earned);\n', '    }\n', '}']