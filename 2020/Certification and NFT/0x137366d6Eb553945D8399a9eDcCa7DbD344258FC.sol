['// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'contract DSPauseAbstract {\n', '    function delay() public view returns (uint256);\n', '    function plot(address, bytes32, bytes memory, uint256) public;\n', '    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'contract VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '}\n', '\n', '// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\n', 'contract FlipperMomAbstract {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', '// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\n', 'contract IlkRegistryAbstract {\n', '    function list() external view returns (bytes32[] memory);\n', '    function flip(bytes32) external view returns (address);\n', '}\n', '\n', 'contract SpellAction {\n', '    // The contracts in this list should correspond to MCD core contracts, verify\n', '    //  against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\n', '    //\n', '    address constant MCD_VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '\n', '    // Common orders of magnitude needed in spells\n', '    //\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '    uint256 constant RAD = 10**45;\n', '    uint256 constant MLN = 10**6;\n', '    uint256 constant BLN = 10**9;\n', '\n', '    function execute() external {\n', '        require(VatAbstract(MCD_VAT).wards(address(this)) == 1, "no-access");\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract  public pause;\n', '    address          public action;\n', '    bytes32          public tag;\n', '    uint256          public eta;\n', '    bytes            public sig;\n', '    uint256          public expiration;\n', '    bool             public done;\n', '\n', '    address constant MCD_PAUSE    = 0xbE286431454714F511008713973d3B053A2d38f3;\n', '    address constant FLIPPER_MOM  = 0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472;\n', '    address constant ILK_REGISTRY = 0x8b4ce5DCbb01e0e1f0521cd8dCfb31B308E52c24;\n', '\n', '    uint256 constant T2021_02_01_1200UTC = 1612180800;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    string constant public description = "DEFCON-5 Emergency Spell";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        pause = DSPauseAbstract(MCD_PAUSE);\n', '        expiration = T2021_02_01_1200UTC;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + pause.delay();\n', '        pause.plot(action, tag, sig, eta);\n', '\n', '        // Loop over all ilks\n', '        //\n', '        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);\n', '        bytes32[] memory ilks = registry.list();\n', '\n', '        for (uint i = 0; i < ilks.length; i++) {\n', '            // skip the rest of the loop for the following ilks:\n', '            //\n', '            if (ilks[i] == "USDC-A" ||\n', '                ilks[i] == "USDC-B" ||\n', '                ilks[i] == "TUSD-A" ||\n', '                ilks[i] == "PAXUSD-A"\n', '            ) { continue; }\n', '\n', '            // Enable collateral liquidations\n', '            //\n', '            // This change will enable liquidations for collateral types\n', '            // and is colloquially referred to as the "circuit breaker".\n', '            //\n', '            FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));\n', '        }\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']