['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IMultiVaultConverter {\n', '    function token() external returns (address);\n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\n', '    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint _shareAmount);\n', '    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint _outputAmount);\n', '\n', '    function convert(address _input, address _output, uint _inputAmount) external returns (uint _outputAmount);\n', '    function convertAll(uint[] calldata _amounts) external returns (uint _outputAmount);\n', '}\n', '\n', 'interface IValueVaultMaster {\n', '    function bank(address) view external returns (address);\n', '    function isVault(address) view external returns (bool);\n', '    function isController(address) view external returns (bool);\n', '    function isStrategy(address) view external returns (bool);\n', '\n', '    function slippage(address) view external returns (uint);\n', '    function convertSlippage(address _input, address _output) view external returns (uint);\n', '\n', '    function valueToken() view external returns (address);\n', '    function govVault() view external returns (address);\n', '    function insuranceFund() view external returns (address);\n', '    function performanceReward() view external returns (address);\n', '\n', '    function govVaultProfitShareFee() view external returns (uint);\n', '    function gasFee() view external returns (uint);\n', '    function insuranceFee() view external returns (uint);\n', '    function withdrawalProtectionFee() view external returns (uint);\n', '}\n', '\n', '// 0: DAI, 1: USDC, 2: USDT\n', 'interface IStableSwap3Pool {\n', '    function get_virtual_price() external view returns (uint);\n', '    function balances(uint) external view returns (uint);\n', '    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\n', '    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\n', '    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n', '    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n', '    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\n', '}\n', '\n', '// 0: DAI, 1: USDC, 2: USDT, 3: BUSD\n', 'interface IStableSwapBUSD {\n', '    function get_virtual_price() external view returns (uint);\n', '    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\n', '    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\n', '    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\n', '    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\n', '}\n', '\n', '// 0: hUSD, 1: 3Crv\n', 'interface IStableSwapHUSD {\n', '    function get_virtual_price() external view returns (uint);\n', '    function calc_token_amount(uint[2] calldata amounts, bool deposit) external view returns (uint);\n', '    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\n', '    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\n', '    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\n', '    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\n', '    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\n', '    function calc_withdraw_one_coin(uint amount, int128 i) external view returns (uint);\n', '    function remove_liquidity_one_coin(uint amount, int128 i, uint minAmount) external returns (uint);\n', '    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external returns (uint);\n', '}\n', '\n', '// 0: DAI, 1: USDC, 2: USDT, 3: sUSD\n', 'interface IStableSwapSUSD {\n', '    function get_virtual_price() external view returns (uint);\n', '    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\n', '    function get_dy_underlying(int128 i, int128 j, uint dx) external view returns (uint dy);\n', '    function get_dx_underlying(int128 i, int128 j, uint dy) external view returns (uint dx);\n', '    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external;\n', '}\n', '\n', '// Supported Pool Tokens:\n', '// 0. 3pool [DAI, USDC, USDT]\n', '// 1. BUSD [(y)DAI, (y)USDC, (y)USDT, (y)BUSD]\n', '// 2. sUSD [DAI, USDC, USDT, sUSD]\n', '// 3. husd [HUSD, 3pool]\n', '// 4. Compound [(c)DAI, (c)USDC]\n', '// 5. Y [(y)DAI, (y)USDC, (y)USDT, (y)TUSD]\n', '// 6. Swerve [(y)DAI...(y)TUSD]\n', 'contract StableSwap3PoolConverter is IMultiVaultConverter {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20[3] public pool3CrvTokens; // DAI, USDC, USDT\n', '    IERC20 public token3Crv; // 3Crv\n', '\n', '    IERC20 public tokenBUSD; // BUSD\n', '    IERC20 public tokenBCrv; // BCrv (yDAI+yUSDC+yUSDT+yBUSD)\n', '\n', '    IERC20 public tokenSUSD; // sUSD\n', '    IERC20 public tokenSCrv; // sCrv (DAI/USDC/USDT/sUSD)\n', '\n', '    IERC20 public tokenHUSD; // hUSD\n', '    IERC20 public tokenHCrv; // hCrv (HUSD/3Crv)\n', '\n', '    address public governance;\n', '\n', '    IStableSwap3Pool public stableSwap3Pool;\n', '    IStableSwapBUSD public stableSwapBUSD;\n', '    IStableSwapSUSD public stableSwapSUSD;\n', '    IStableSwapHUSD public stableSwapHUSD;\n', '\n', '    IValueVaultMaster public vaultMaster;\n', '\n', '    uint public defaultSlippage = 1; // very small 0.01%\n', '\n', '    constructor (IERC20 _tokenDAI, IERC20 _tokenUSDC, IERC20 _tokenUSDT, IERC20 _token3Crv,\n', '        IERC20 _tokenBUSD, IERC20 _tokenBCrv,\n', '        IERC20 _tokenSUSD, IERC20 _tokenSCrv,\n', '        IERC20 _tokenHUSD, IERC20 _tokenHCrv,\n', '        IStableSwap3Pool _stableSwap3Pool,\n', '        IStableSwapBUSD _stableSwapBUSD,\n', '        IStableSwapSUSD _stableSwapSUSD,\n', '        IStableSwapHUSD _stableSwapHUSD,\n', '        IValueVaultMaster _vaultMaster) public {\n', '        pool3CrvTokens[0] = _tokenDAI;\n', '        pool3CrvTokens[1] = _tokenUSDC;\n', '        pool3CrvTokens[2] = _tokenUSDT;\n', '        token3Crv = _token3Crv;\n', '        tokenBUSD = _tokenBUSD;\n', '        tokenBCrv = _tokenBCrv;\n', '        tokenSUSD = _tokenSUSD;\n', '        tokenSCrv = _tokenSCrv;\n', '        tokenHUSD = _tokenHUSD;\n', '        tokenHCrv = _tokenHCrv;\n', '        stableSwap3Pool = _stableSwap3Pool;\n', '        stableSwapBUSD = _stableSwapBUSD;\n', '        stableSwapSUSD = _stableSwapSUSD;\n', '        stableSwapHUSD = _stableSwapHUSD;\n', '\n', '        pool3CrvTokens[0].safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        pool3CrvTokens[1].safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        pool3CrvTokens[2].safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '        token3Crv.safeApprove(address(stableSwap3Pool), type(uint256).max);\n', '\n', '        pool3CrvTokens[0].safeApprove(address(stableSwapBUSD), type(uint256).max);\n', '        pool3CrvTokens[1].safeApprove(address(stableSwapBUSD), type(uint256).max);\n', '        pool3CrvTokens[2].safeApprove(address(stableSwapBUSD), type(uint256).max);\n', '        tokenBUSD.safeApprove(address(stableSwapBUSD), type(uint256).max);\n', '        tokenBCrv.safeApprove(address(stableSwapBUSD), type(uint256).max);\n', '\n', '        pool3CrvTokens[0].safeApprove(address(stableSwapSUSD), type(uint256).max);\n', '        pool3CrvTokens[1].safeApprove(address(stableSwapSUSD), type(uint256).max);\n', '        pool3CrvTokens[2].safeApprove(address(stableSwapSUSD), type(uint256).max);\n', '        tokenSUSD.safeApprove(address(stableSwapSUSD), type(uint256).max);\n', '        tokenSCrv.safeApprove(address(stableSwapSUSD), type(uint256).max);\n', '\n', '        token3Crv.safeApprove(address(stableSwapHUSD), type(uint256).max);\n', '        tokenHUSD.safeApprove(address(stableSwapHUSD), type(uint256).max);\n', '        tokenHCrv.safeApprove(address(stableSwapHUSD), type(uint256).max);\n', '\n', '        vaultMaster = _vaultMaster;\n', '        governance = msg.sender;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setVaultMaster(IValueVaultMaster _vaultMaster) external {\n', '        require(msg.sender == governance, "!governance");\n', '        vaultMaster = _vaultMaster;\n', '    }\n', '\n', '    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.safeApprove(_spender, _amount);\n', '    }\n', '\n', '    function setDefaultSlippage(uint _defaultSlippage) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_defaultSlippage <= 100, "_defaultSlippage>1%");\n', '        defaultSlippage = _defaultSlippage;\n', '    }\n', '\n', '    function token() external override returns (address) {\n', '        return address(token3Crv);\n', '    }\n', '\n', '    // Average dollar value of pool token\n', '    function get_virtual_price() external override view returns (uint) {\n', '        return stableSwap3Pool.get_virtual_price();\n', '    }\n', '\n', '    function convert_rate(address _input, address _output, uint _inputAmount) public override view returns (uint _outputAmount) {\n', '        if (_inputAmount == 0) return 0;\n', '        if (_output == address(token3Crv)) { // convert to 3Crv\n', '            uint[3] memory _amounts;\n', '            for (uint8 i = 0; i < 3; i++) {\n', '                if (_input == address(pool3CrvTokens[i])) {\n', '                    _amounts[i] = _inputAmount;\n', '                    _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true);\n', '                    return _outputAmount.mul(10000 - defaultSlippage).div(10000);\n', '                }\n', '            }\n', '            if (_input == address(tokenBUSD)) {\n', '                _amounts[1] = stableSwapBUSD.get_dy_underlying(int128(3), int128(1), _inputAmount); // convert to USDC\n', '                _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true); // USDC -> 3Crv\n', '            }\n', '            if (_input == address(tokenSUSD)) {\n', '                _amounts[1] = stableSwapSUSD.get_dy_underlying(int128(3), int128(1), _inputAmount); // convert to USDC\n', '                _outputAmount = stableSwap3Pool.calc_token_amount(_amounts, true); // USDC -> 3Crv\n', '            }\n', '            if (_input == address(tokenHUSD)) {\n', '                _outputAmount = stableSwapHUSD.get_dy(int128(0), int128(1), _inputAmount); // HUSD -> 3Crv\n', '            }\n', '        } else if (_input == address(token3Crv)) { // convert from 3Crv\n', '            for (uint8 i = 0; i < 3; i++) {\n', '                if (_output == address(pool3CrvTokens[i])) {\n', '                    // @dev this is for UI reference only, the actual share price (stable/CRV) will be re-calculated on-chain when we do convert()\n', '                    _outputAmount = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, i);\n', '                    return _outputAmount.mul(10000 - defaultSlippage).div(10000);\n', '                }\n', '            }\n', '            if (_output == address(tokenBUSD)) {\n', '                uint _usdcAmount = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, 1); // 3Crv -> USDC\n', '                _outputAmount = stableSwapBUSD.get_dy_underlying(int128(1), int128(3), _usdcAmount); // USDC -> BUSD\n', '            }\n', '            if (_output == address(tokenSUSD)) {\n', '                uint _usdcAmount = stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, 1); // 3Crv -> USDC\n', '                _outputAmount = stableSwapSUSD.get_dy_underlying(int128(1), int128(3), _usdcAmount); // USDC -> BUSD\n', '            }\n', '            if (_output == address(tokenHUSD)) {\n', '                _outputAmount = stableSwapHUSD.get_dy(int128(1), int128(0), _inputAmount); // 3Crv -> HUSD\n', '            }\n', '        }\n', '        if (_outputAmount > 0) {\n', '            uint _slippage = _outputAmount.mul(vaultMaster.convertSlippage(_input, _output)).div(10000);\n', '            _outputAmount = _outputAmount.sub(_slippage);\n', '        }\n', '    }\n', '\n', '    // 0: DAI, 1: USDC, 2: USDT, 3: 3Crv, 4: BUSD, 5: sUSD, 6: husd\n', '    function calc_token_amount_deposit(uint[] calldata _amounts) external override view returns (uint _shareAmount) {\n', '        _shareAmount = _amounts[3]; // 3Crv amount\n', '        uint[3] memory _3poolAmounts;\n', '        _3poolAmounts[0] = _amounts[0];\n', '        _3poolAmounts[1] = _amounts[1];\n', '        _3poolAmounts[2] = _amounts[2];\n', '        uint _3poolTo3crv = stableSwap3Pool.calc_token_amount(_3poolAmounts, true);\n', '        uint _busdTo3Crv = convert_rate(address(tokenBUSD), address(token3Crv), _amounts[4]);\n', '        uint _susdTo3Crv = convert_rate(address(tokenSUSD), address(token3Crv), _amounts[5]);\n', '        uint _husdTo3Crv = convert_rate(address(tokenHUSD), address(token3Crv), _amounts[6]);\n', '        return _shareAmount.add(_3poolTo3crv).add(_busdTo3Crv).add(_susdTo3Crv).add(_husdTo3Crv);\n', '    }\n', '\n', '    // @dev we use curve function calc_withdraw_one_coin() for UI reference only\n', '    // the actual share price (stable/CRV) will be re-calculated on-chain when we do convert()\n', '    function calc_token_amount_withdraw(uint _shares, address _output) external override view returns (uint _outputAmount) {\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            if (_output == address(pool3CrvTokens[i])) {\n', '                return stableSwap3Pool.calc_withdraw_one_coin(_shares, i);\n', '            }\n', '        }\n', '        if (_output == address(tokenBUSD)) {\n', '            uint _usdcAmount = stableSwap3Pool.calc_withdraw_one_coin(_shares, 1); // 3Crv -> USDC\n', '            _outputAmount = stableSwapBUSD.get_dy_underlying(int128(1), int128(3), _usdcAmount); // USDC -> BUSD\n', '        } else if (_output == address(tokenSUSD)) {\n', '            uint _usdcAmount = stableSwap3Pool.calc_withdraw_one_coin(_shares, 1); // 3Crv -> USDC\n', '            _outputAmount = stableSwapSUSD.get_dy_underlying(int128(1), int128(3), _usdcAmount); // USDC -> SUSD\n', '        } else if (_output == address(tokenHUSD)) {\n', '            _outputAmount = stableSwapHUSD.get_dy(int128(1), int128(0), _shares); // 3Crv -> HUSD\n', '        }\n', '        if (_outputAmount > 0) {\n', '            uint _slippage = _outputAmount.mul(vaultMaster.slippage(_output)).div(10000);\n', '            _outputAmount = _outputAmount.sub(_slippage);\n', '        }\n', '    }\n', '\n', '    function convert(address _input, address _output, uint _inputAmount) external override returns (uint _outputAmount) {\n', '        require(vaultMaster.isVault(msg.sender) || vaultMaster.isController(msg.sender) || msg.sender == governance, "!(governance||vault||controller)");\n', '        if (_inputAmount == 0) return 0;\n', '        if (_output == address(token3Crv)) { // convert to 3Crv\n', '            uint[3] memory amounts;\n', '            for (uint8 i = 0; i < 3; i++) {\n', '                if (_input == address(pool3CrvTokens[i])) {\n', '                    amounts[i] = _inputAmount;\n', '                    uint _before = token3Crv.balanceOf(address(this));\n', '                    stableSwap3Pool.add_liquidity(amounts, 1);\n', '                    uint _after = token3Crv.balanceOf(address(this));\n', '                    _outputAmount = _after.sub(_before);\n', '                    token3Crv.safeTransfer(msg.sender, _outputAmount);\n', '                    return _outputAmount;\n', '                }\n', '            }\n', '            if (_input == address(tokenBUSD)) {\n', '                _outputAmount = _convert_busd_to_shares(_inputAmount);\n', '                token3Crv.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '            if (_input == address(tokenSUSD)) {\n', '                _outputAmount = _convert_susd_to_shares(_inputAmount);\n', '                token3Crv.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '            if (_input == address(tokenHUSD)) {\n', '                _outputAmount = _convert_husd_to_shares(_inputAmount);\n', '                token3Crv.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '        } else if (_input == address(token3Crv)) { // convert from 3Crv\n', '            for (uint8 i = 0; i < 3; i++) {\n', '                if (_output == address(pool3CrvTokens[i])) {\n', '                    uint _before = pool3CrvTokens[i].balanceOf(address(this));\n', '                    stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, i, 1);\n', '                    uint _after = pool3CrvTokens[i].balanceOf(address(this));\n', '                    _outputAmount = _after.sub(_before);\n', '                    pool3CrvTokens[i].safeTransfer(msg.sender, _outputAmount);\n', '                    return _outputAmount;\n', '                }\n', '            }\n', '            if (_output == address(tokenBUSD)) {\n', '                // remove 3Crv to USDC\n', '                uint _before = pool3CrvTokens[1].balanceOf(address(this));\n', '                stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, 1, 1);\n', '                uint _after = pool3CrvTokens[1].balanceOf(address(this));\n', '                _outputAmount = _after.sub(_before);\n', '\n', '                // convert USDC to BUSD\n', '                _before = tokenBUSD.balanceOf(address(this));\n', '                stableSwapBUSD.exchange_underlying(int128(1), int128(3), _outputAmount, 1);\n', '                _after = tokenBUSD.balanceOf(address(this));\n', '                _outputAmount = _after.sub(_before);\n', '\n', '                tokenBUSD.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '            if (_output == address(tokenSUSD)) {\n', '                // remove 3Crv to USDC\n', '                uint _before = pool3CrvTokens[1].balanceOf(address(this));\n', '                stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, 1, 1);\n', '                uint _after = pool3CrvTokens[1].balanceOf(address(this));\n', '                _outputAmount = _after.sub(_before);\n', '\n', '                // convert USDC to SUSD\n', '                _before = tokenSUSD.balanceOf(address(this));\n', '                stableSwapSUSD.exchange_underlying(int128(1), int128(3), _outputAmount, 1);\n', '                _after = tokenSUSD.balanceOf(address(this));\n', '                _outputAmount = _after.sub(_before);\n', '\n', '                tokenSUSD.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '            if (_output == address(tokenHUSD)) {\n', '                _outputAmount = _convert_shares_to_husd(_inputAmount);\n', '                tokenHUSD.safeTransfer(msg.sender, _outputAmount);\n', '                return _outputAmount;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    // @dev convert from BUSD to 3Crv (via USDC)\n', '    function _convert_busd_to_shares(uint _amount) internal returns (uint _shares) {\n', '        // convert to USDC\n', '        uint[3] memory amounts;\n', '        uint _before = pool3CrvTokens[1].balanceOf(address(this));\n', '        stableSwapBUSD.exchange_underlying(int128(3), int128(1), _amount, 1);\n', '        uint _after = pool3CrvTokens[1].balanceOf(address(this));\n', '        amounts[1] = _after.sub(_before);\n', '\n', '        // add USDC to 3pool to get back 3Crv\n', '        _before = token3Crv.balanceOf(address(this));\n', '        stableSwap3Pool.add_liquidity(amounts, 1);\n', '        _after = token3Crv.balanceOf(address(this));\n', '\n', '        _shares = _after.sub(_before);\n', '    }\n', '\n', '    // @dev convert from SUSD to 3Crv (via USDC)\n', '    function _convert_susd_to_shares(uint _amount) internal returns (uint _shares) {\n', '        // convert to USDC\n', '        uint[3] memory amounts;\n', '        uint _before = pool3CrvTokens[1].balanceOf(address(this));\n', '        stableSwapSUSD.exchange_underlying(int128(3), int128(1), _amount, 1);\n', '        uint _after = pool3CrvTokens[1].balanceOf(address(this));\n', '        amounts[1] = _after.sub(_before);\n', '\n', '        // add USDC to 3pool to get back 3Crv\n', '        _before = token3Crv.balanceOf(address(this));\n', '        stableSwap3Pool.add_liquidity(amounts, 1);\n', '        _after = token3Crv.balanceOf(address(this));\n', '\n', '        _shares = _after.sub(_before);\n', '    }\n', '\n', '    // @dev convert from HUSD to 3Crv\n', '    function _convert_husd_to_shares(uint _amount) internal returns (uint _shares) {\n', '        uint _before = token3Crv.balanceOf(address(this));\n', '        stableSwapHUSD.exchange(int128(0), int128(1), _amount, 1);\n', '        uint _after = token3Crv.balanceOf(address(this));\n', '\n', '        _shares = _after.sub(_before);\n', '    }\n', '\n', '    // @dev convert from 3Crv to HUSD\n', '    function _convert_shares_to_husd(uint _amount) internal returns (uint _husd) {\n', '        uint _before = tokenHUSD.balanceOf(address(this));\n', '        stableSwapHUSD.exchange(int128(1), int128(0), _amount, 1);\n', '        uint _after = tokenHUSD.balanceOf(address(this));\n', '\n', '        _husd = _after.sub(_before);\n', '    }\n', '\n', '    function convertAll(uint[] calldata _amounts) external override returns (uint _outputAmount) {\n', '        require(vaultMaster.isVault(msg.sender) || vaultMaster.isController(msg.sender) || msg.sender == governance, "!(governance||vault||controller)");\n', '        uint _before = token3Crv.balanceOf(address(this));\n', '        _before = _before.sub(_amounts[3], "not enough 3Crv");\n', '        if (_amounts[0] > 0 || _amounts[1] > 0 || _amounts[2] > 0) {\n', '            uint[3] memory _3poolAmounts;\n', '            _3poolAmounts[0] = _amounts[0];\n', '            _3poolAmounts[1] = _amounts[1];\n', '            _3poolAmounts[2] = _amounts[2];\n', '            stableSwap3Pool.add_liquidity(_3poolAmounts, 1);\n', '        }\n', '        if (_amounts[4] > 0) { // BUSD\n', '            _convert_busd_to_shares(_amounts[4]);\n', '        }\n', '        if (_amounts[5] > 0) { // sUSD\n', '            _convert_susd_to_shares(_amounts[5]);\n', '        }\n', '        if (_amounts[6] > 0) { // hUSD\n', '            _convert_husd_to_shares(_amounts[6]);\n', '        }\n', '        uint _after = token3Crv.balanceOf(address(this));\n', '        _outputAmount = _after.sub(_before);\n', '        token3Crv.safeTransfer(msg.sender, _outputAmount);\n', '        return _outputAmount;\n', '    }\n', '\n', '    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\n', '        require(msg.sender == governance, "!governance");\n', '        _token.transfer(_to, _amount);\n', '    }\n', '}']