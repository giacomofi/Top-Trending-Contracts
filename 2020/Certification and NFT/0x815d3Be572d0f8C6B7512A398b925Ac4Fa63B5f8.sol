['pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '}\n', '\n', 'interface Vault {\n', '    function deposit(uint) external;\n', '    function withdraw(uint) external;\n', '    function getPricePerFullShare() external view returns (uint);\n', '}\n', '\n', 'interface Aave {\n', '    function borrow(address _reserve, uint _amount, uint _interestRateModel, uint16 _referralCode) external;\n', '    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\n', '    function repay(address _reserve, uint _amount, address payable _onBehalfOf) external payable;\n', '    function getUserAccountData(address _user)\n', '        external\n', '        view\n', '        returns (\n', '            uint totalLiquidityETH,\n', '            uint totalCollateralETH,\n', '            uint totalBorrowsETH,\n', '            uint totalFeesETH,\n', '            uint availableBorrowsETH,\n', '            uint currentLiquidationThreshold,\n', '            uint ltv,\n', '            uint healthFactor\n', '        );\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external\n', '        view\n', '        returns (\n', '            uint currentATokenBalance,\n', '            uint currentBorrowBalance,\n', '            uint principalBorrowBalance,\n', '            uint borrowRateMode,\n', '            uint borrowRate,\n', '            uint liquidityRate,\n', '            uint originationFee,\n', '            uint variableBorrowIndex,\n', '            uint lastUpdateTimestamp,\n', '            bool usageAsCollateralEnabled\n', '        );\n', '}\n', '\n', 'interface LendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '    function getLendingPoolCore() external view returns (address);\n', '    function getPriceOracle() external view returns (address);\n', '}\n', '\n', '/*\n', '\n', ' A strategy must implement the following calls;\n', ' \n', ' - deposit()\n', ' - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\n', ' - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\n', ' - withdrawAll() - Controller | Vault role - withdraw should always return to vault\n', ' - balanceOf()\n', ' \n', ' Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\n', ' \n', '*/\n', '\n', 'contract StrategyVaultUSDT {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    \n', '    address constant public want = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    address constant public vault = address(0x2927071efbC6BdC21B87c27F2923689Cec562FD7);\n', '    \n', '    address public constant aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n', '\n', '    address public governance;\n', '    address public controller;\n', '    \n', '    constructor(address _controller) public {\n', '        governance = msg.sender;\n', '        controller = _controller;\n', '    }\n', '    \n', '    function deposit() external {\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance > 0) {\n', '            IERC20(want).safeApprove(address(vault), 0);\n', '            IERC20(want).safeApprove(address(vault), _balance);\n', '            Vault(vault).deposit(_balance);\n', '        }\n', '    }\n', '    \n', '    function getAave() public view returns (address) {\n', '        return LendingPoolAddressesProvider(aave).getLendingPool();\n', '    }\n', '    \n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyVaultUSDT";\n', '    }\n', '    \n', '    function debt() external view returns (uint) {\n', '        (,uint currentBorrowBalance,,,,,,,,) = Aave(getAave()).getUserReserveData(want, Controller(controller).vaults(address(this)));\n', '        return currentBorrowBalance;\n', '    }\n', '    \n', '    function have() public view returns (uint) {\n', '        uint _have = balanceOf();\n', '        return _have;\n', '    }\n', '    \n', '    function skimmable() public view returns (uint) {\n', '        (,uint currentBorrowBalance,,,,,,,,) = Aave(getAave()).getUserReserveData(want, Controller(controller).vaults(address(this)));\n', '        uint _have = have();\n', '        if (_have > currentBorrowBalance) {\n', '            return _have.sub(currentBorrowBalance);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function skim() external {\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        uint _amount = skimmable();\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        } \n', '        IERC20(want).safeTransfer(controller, _amount);\n', '    }\n', '    \n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(address(_asset) != address(want), "!want");\n', '        require(address(_asset) != address(vault), "!vault");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '    \n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '        address _vault = Controller(controller).vaults(address(this));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, _amount);\n', '    }\n', '    \n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '        balance = IERC20(want).balanceOf(address(this));\n', '        address _vault = Controller(controller).vaults(address(this));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '    \n', '    function _withdrawAll() internal {\n', '        Vault(vault).withdraw(IERC20(vault).balanceOf(address(this)));\n', '    }\n', '    \n', '    function _withdrawSome(uint256 _amount) internal returns (uint) {\n', '        uint _redeem = IERC20(vault).balanceOf(address(this)).mul(_amount).div(balanceSavingsInToken());\n', '        uint _before = IERC20(want).balanceOf(address(this));\n', '        Vault(vault).withdraw(_redeem);\n', '        uint _after = IERC20(want).balanceOf(address(this));\n', '        return _after.sub(_before);\n', '    }\n', '    \n', '    function balanceOf() public view returns (uint) {\n', '        return IERC20(want).balanceOf(address(this))\n', '                .add(balanceSavingsInToken());\n', '    }\n', '    \n', '    function balanceSavingsInToken() public view returns (uint256) {\n', '        return IERC20(vault).balanceOf(address(this)).mul(Vault(vault).getPricePerFullShare()).div(1e18);\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}']