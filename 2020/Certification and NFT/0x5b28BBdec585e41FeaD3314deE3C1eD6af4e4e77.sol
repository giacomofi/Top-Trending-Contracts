['// Dependency file: contracts/interface/IERC20.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interface/ERC2917-Interface.sol\n', '\n', '// pragma solidity >=0.6.6;\n', "// import 'contracts/interface/IERC20.sol';\n", '\n', 'interface IERC2917 is IERC20 {\n', '\n', '    /// @dev This emit when interests amount per block is changed by the owner of the contract.\n', '    /// It emits with the old interests amount and the new interests amount.\n', '    event InterestsPerBlockChanged (uint oldValue, uint newValue);\n', '\n', "    /// @dev This emit when a users' productivity has changed\n", "    /// It emits with the user's address and the the value after the change.\n", '    event ProductivityIncreased (address indexed user, uint value);\n', '\n', "    /// @dev This emit when a users' productivity has changed\n", "    /// It emits with the user's address and the the value after the change.\n", '    event ProductivityDecreased (address indexed user, uint value);\n', '\n', '    \n', "    /// @dev Return the current contract's interests rate per block.\n", '    /// @return The amount of interests currently producing per each block.\n', '    function interestsPerBlock() external view returns (uint);\n', '\n', "    /// @notice Change the current contract's interests rate.\n", "    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\n", '    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestsPerBlockChanged event.\n', '    function changeInterestsPerBlock(uint value) external returns (bool);\n', '\n', '    /// @notice It will get the productivity of given user.\n', '    /// @dev it will return 0 if user has no productivity proved in the contract.\n', "    /// @return user's productivity and overall productivity.\n", '    function getProductivity(address user) external view returns (uint, uint);\n', '\n', "    /// @notice increase a user's productivity.\n", "    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n", '    /// @return true to confirm that the productivity added success.\n', '    function increaseProductivity(address user, uint value) external returns (uint);\n', '\n', "    /// @notice decrease a user's productivity.\n", "    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\n", '    /// @return true to confirm that the productivity removed success.\n', '    function decreaseProductivity(address user, uint value) external returns (uint);\n', '\n', '    /// @notice take() will return the interests that callee will get at current block height.\n', '    /// @dev it will always calculated by block.number, so it will change when block height changes.\n', '    /// @return amount of the interests that user are able to mint() at current block height.\n', '    function take() external view returns (uint);\n', '\n', '    /// @notice similar to take(), but with the block height joined to calculate return.\n', '    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\n', '    /// @return amount of interests and the block height.\n', '    function takeWithBlock() external view returns (uint, uint);\n', '\n', '    /// @notice mint the avaiable interests to callee.\n', "    /// @dev once it mint, the amount of interests will transfer to callee's address.\n", '    /// @return the amount of interests minted.\n', '    function mint(address to) external returns (uint);\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/Upgradable.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '\n', 'contract UpgradableProduct {\n', '    address public impl;\n', '\n', '    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\n', '\n', '    constructor() public {\n', '        impl = msg.sender;\n', '    }\n', '\n', '    modifier requireImpl() {\n', "        require(msg.sender == impl, 'FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function upgradeImpl(address _newImpl) public requireImpl {\n', "        require(_newImpl != address(0), 'INVALID_ADDRESS');\n", "        require(_newImpl != impl, 'NO_CHANGE');\n", '        address lastImpl = impl;\n', '        impl = _newImpl;\n', '        emit ImplChanged(lastImpl, _newImpl);\n', '    }\n', '}\n', '\n', 'contract UpgradableGovernance {\n', '    address public governor;\n', '\n', '    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\n', '\n', '    constructor() public {\n', '        governor = msg.sender;\n', '    }\n', '\n', '    modifier requireGovernor() {\n', "        require(msg.sender == governor, 'FORBIDDEN');\n", '        _;\n', '    }\n', '\n', '    function upgradeGovernance(address _newGovernor) public requireGovernor {\n', "        require(_newGovernor != address(0), 'INVALID_ADDRESS');\n", "        require(_newGovernor != governor, 'NO_CHANGE');\n", '        address lastGovernor = governor;\n', '        governor = _newGovernor;\n', '        emit GovernorChanged(lastGovernor, _newGovernor);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/WasabiToken.sol\n', '\n', '// pragma solidity >=0.6.6;\n', '\n', "// import 'contracts/interface/ERC2917-Interface.sol';\n", "// import 'contracts/libraries/Upgradable.sol';\n", "// import 'contracts/libraries/SafeMath.sol';\n", '\n', '/*\n', "    The Objective of ERC2917 Demo is to implement a decentralized staking mechanism, which calculates users' share\n", '    by accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\n', '\n', '        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\n', '       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\n', '       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\n', '\n', '*/\n', 'contract WasabiToken is IERC2917, UpgradableProduct, UpgradableGovernance {\n', '    using SafeMath for uint;\n', '\n', '    uint public mintCumulation;\n', '    uint public maxMintCumulation;\n', '\n', '    struct Production {\n', '        uint amount;            // how many tokens could be produced on block basis\n', '        uint total;             // total produced tokens\n', '        uint block;             // last updated block number\n', '    }\n', '\n', '    Production internal grossProduct = Production(0, 0, 0);\n', '\n', '    struct Productivity {\n', "        uint product;           // user's productivity\n", '        uint total;             // total productivity\n', "        uint block;             // record's block number\n", '        uint user;              // accumulated products\n', '        uint global;            // global accumulated products\n', '        uint gross;             // global gross products\n', '    }\n', '\n', '    Productivity public global;\n', '    mapping(address => Productivity) public users;\n', '\n', '    uint private unlocked = 1;\n', '\n', '    modifier lock() {\n', "        require(unlocked == 1, 'Locked');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    // implementation of ERC20 interfaces.\n', '    string override public name;\n', '    string override public symbol;\n', '    uint8 override public decimals = 18;\n', '    uint override public totalSupply;\n', '\n', '    mapping(address => uint) override public balanceOf;\n', '    mapping(address => mapping(address => uint)) override public allowance;\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', "        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\n", '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        if (to == address(0)) { // burn\n', '            totalSupply = totalSupply.sub(value);\n', '        }\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external override returns (bool) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external override returns (bool) {\n', "        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\n", '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    // end of implementation of ERC20\n', '\n', '    // creation of the interests token.\n', '    constructor(uint _interestsRate, uint _maxMintCumulation) UpgradableProduct() UpgradableGovernance() public {\n', '        name        = "Wasabi Swap";\n', '        symbol      = "WASABI";\n', '        decimals    = 18;\n', '\n', '        maxMintCumulation = _maxMintCumulation;\n', '        grossProduct.amount = _interestsRate;\n', '        grossProduct.block  = block.number;\n', '    }\n', '\n', '    // When calling _computeBlockProduct() it calculates the area of productivity * time since last time and accumulate it.\n', '    function _computeBlockProduct() private view returns (uint) {\n', '        uint elapsed = block.number.sub(grossProduct.block);\n', '        return grossProduct.amount.mul(elapsed);\n', '    }\n', '\n', '    // compute productivity returns total productivity of a user.\n', '    function _computeProductivity(Productivity memory user) private view returns (uint) {\n', '        uint blocks = block.number.sub(user.block);\n', '        return user.total.mul(blocks);\n', '    }\n', '\n', "    // update users' productivity by value with boolean value indicating increase  or decrease.\n", '    function _updateProductivity(Productivity storage user, uint value, bool increase) private returns (uint productivity) {\n', '        user.product      = user.product.add(_computeProductivity(user));\n', '        global.product    = global.product.add(_computeProductivity(global));\n', '\n', "        require(global.product <= uint(-1), 'GLOBAL_PRODUCT_OVERFLOW');\n", '\n', '        user.block      = block.number;\n', '        global.block    = block.number;\n', '        if(increase) {\n', '            user.total   = user.total.add(value);\n', '            global.total = global.total.add(value);\n', '        }\n', '        else {\n', '            user.total   = user.total.sub(value);\n', '            global.total = global.total.sub(value);\n', '        }\n', '        productivity = user.total;\n', '    }\n', '\n', '    // External function call\n', '    // This function adjust how many token will be produced by each block, eg:\n', '    // changeAmountPerBlock(100)\n', '    // will set the produce rate to 100/block.\n', '    function changeInterestsPerBlock(uint value) external override requireGovernor returns (bool) {\n', '        uint old = grossProduct.amount;\n', "        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\n", '\n', '        uint product                = _computeBlockProduct();\n', '        grossProduct.total          = grossProduct.total.add(product);\n', '        grossProduct.block          = block.number;\n', '        grossProduct.amount         = value;\n', "        require(grossProduct.total <= uint(-1), 'BLOCK_PRODUCT_OVERFLOW');\n", '\n', '        emit InterestsPerBlockChanged(old, value);\n', '        return true;\n', '    }\n', '\n', '    // External function call\n', "    // This function increase user's productivity and updates the global productivity.\n", "    // the users' actual share percentage will calculated by:\n", '    // Formula:     user_productivity / global_productivity\n', '    function increaseProductivity(address user, uint value) external override requireImpl returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', "        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n", '        Productivity storage product        = users[user];\n', '\n', '        if (product.block == 0) {\n', '            product.gross = grossProduct.total.add(_computeBlockProduct());\n', '            product.global = global.product.add(_computeProductivity(global));\n', '        }\n', '        \n', '        uint _productivity = _updateProductivity(product, value, true);\n', '        emit ProductivityIncreased(user, value);\n', '        return _productivity;\n', '    }\n', '\n', '    // External function call \n', "    // This function will decreases user's productivity by value, and updates the global productivity\n", '    // it will record which block this is happenning and accumulates the area of (productivity * time)\n', '    function decreaseProductivity(address user, uint value) external override requireImpl returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '        Productivity storage product = users[user];\n', '\n', "        require(value > 0 && product.total >= value, 'INSUFFICIENT_PRODUCTIVITY');\n", '        \n', '        uint _productivity = _updateProductivity(product, value, false);\n', '        emit ProductivityDecreased(user, value);\n', '        return _productivity;\n', '    }\n', '\n', '\n', '    // External function call\n', '    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n', '    // Also it calculates global token supply from last time the user mint to this time.\n', '    function mint(address to) external override lock returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '\n', '        (uint gp, uint userProduct, uint globalProduct, uint amount) = _computeUserProduct();\n', '\n', '        if(amount == 0)\n', '            return 0;\n', '\n', '        Productivity storage product = users[msg.sender];\n', '        product.gross   = gp;\n', '        product.user    = userProduct;\n', '        product.global  = globalProduct;\n', '\n', '        if (mintCumulation.add(amount) > maxMintCumulation) {\n', '            amount = mintCumulation.add(amount).sub(maxMintCumulation);\n', '        }\n', '        balanceOf[to]   = balanceOf[to].add(amount);\n', '        totalSupply     = totalSupply.add(amount);\n', '        mintCumulation  = mintCumulation.add(amount);\n', '\n', '        emit Transfer(address(0), msg.sender, amount);\n', '        return amount;\n', '    }\n', '\n', '    // Returns how many token he will be able to mint.\n', '    function _computeUserProduct() private view returns (uint gp, uint userProduct, uint globalProduct, uint amount) {\n', '        Productivity memory product    = users[msg.sender];\n', '\n', '        gp              = grossProduct.total.add(_computeBlockProduct());\n', '        userProduct     = product.product.add(_computeProductivity(product));\n', '        globalProduct   = global.product.add(_computeProductivity(global));\n', '\n', '        uint deltaBlockProduct  = gp.sub(product.gross);\n', '        uint numerator          = userProduct.sub(product.user);\n', '        uint denominator        = globalProduct.sub(product.global);\n', '\n', '        if (denominator > 0) {\n', '            amount = deltaBlockProduct.mul(numerator) / denominator;\n', '        }\n', '    }\n', '\n', '    function burnAndReward(uint amountBurn, address rewardToken) public returns (uint amountReward) {\n', '        uint totalReward = IERC20(rewardToken).balanceOf(address(this));\n', '        require(totalReward > 0 && totalSupply > 0, "Invalid.");\n', '        require(IERC20(rewardToken).balanceOf(msg.sender) >= amountBurn, "Insufficient.");\n', '\n', '        amountReward = amountBurn.mul(totalReward).div(totalSupply);\n', '        _transfer(msg.sender, address(0), amountBurn);\n', '        IERC20(rewardToken).transfer(msg.sender, amountReward);\n', '    }\n', '\n', '    // Returns how many productivity a user has and global has.\n', '    function getProductivity(address user) external override view returns (uint, uint) {\n', '        return (users[user].total, global.total);\n', '    }\n', '\n', '    // Returns the current gorss product rate.\n', '    function interestsPerBlock() external override view returns (uint) {\n', '        return grossProduct.amount;\n', '    }\n', '\n', '    // Returns how much a user could earn.\n', '    function take() external override view returns (uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return 0;\n', '        (, , , uint amount) = _computeUserProduct();\n', '        return amount;\n', '    }\n', '\n', '    // Returns how much a user could earn plus the giving block number.\n', '    function takeWithBlock() external override view returns (uint, uint) {\n', '        if(mintCumulation >= maxMintCumulation)\n', '            return (0, block.number);\n', '        (, , , uint amount) = _computeUserProduct();\n', '        return (amount, block.number);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/TransferHelper.sol\n', '\n', '\n', '// pragma solidity >=0.6.0;\n', '\n', 'library SushiHelper {\n', '    function deposit(address masterChef, uint256 pid, uint256 amount) internal {\n', '        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0xe2bbb158, pid, amount));\n', '        require(success && data.length == 0, "SushiHelper: DEPOSIT FAILED");\n', '    }\n', '\n', '    function withdraw(address masterChef, uint256 pid, uint256 amount) internal {\n', '        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x441a3e70, pid, amount));\n', '        require(success && data.length == 0, "SushiHelper: WITHDRAW FAILED");\n', '    }\n', '\n', '    function pendingSushi(address masterChef, uint256 pid, address user) internal returns (uint256 amount) {\n', '        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x195426ec, pid, user));\n', '        require(success && data.length != 0, "SushiHelper: WITHDRAW FAILED");\n', '        amount = abi.decode(data, (uint256));\n', '    }\n', '\n', '    uint public constant _nullID = 0xffffffffffffffffffffffffffffffff;\n', '    function nullID() internal pure returns(uint) {\n', '        return _nullID;\n', '    }\n', '}\n', '\n', '\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interface/IWasabi.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IWasabi {\n', '    function getOffer(address  _lpToken,  uint index) external view returns (address offer);\n', '    function getOfferLength(address _lpToken) external view returns (uint length);\n', '    function pool(address _token) external view returns (uint);\n', '    function increaseProductivity(uint amount) external;\n', '    function decreaseProductivity(uint amount) external;\n', '    function tokenAddress() external view returns(address);\n', '    function addTakerOffer(address _offer, address _user) external returns (uint);\n', '    function getUserOffer(address _user, uint _index) external view returns (address);\n', '    function getUserOffersLength(address _user) external view returns (uint length);\n', '    function getTakerOffer(address _user, uint _index) external view returns (address);\n', '    function getTakerOffersLength(address _user) external view returns (uint length);\n', '    function offerStatus() external view returns(uint amountIn, address masterChef, uint sushiPid);\n', '    function cancel(address _from, address _sushi, uint amountWasabi) external ;\n', '    function take(address taker,uint amountWasabi) external;\n', '    function payback(address _from) external;\n', '    function close(address _from, uint8 _state, address _sushi) external  returns (address tokenToOwner, address tokenToTaker, uint amountToOwner, uint amountToTaker);\n', '    function upgradeGovernance(address _newGovernor) external;\n', '    function acceptToken() external view returns(address);\n', '    function rewardAddress() external view returns(address);\n', '    function getTokensLength() external view returns (uint);\n', '    function tokens(uint _index) external view returns(address);\n', '    function offers(address _offer) external view returns(address tokenIn, address tokenOut, uint amountIn, uint amountOut, uint expire, uint interests, uint duration);\n', '    function getRateForOffer(address _offer) external view returns (uint offerFeeRate, uint offerInterestrate);\n', '}\n', '\n', '\n', '// Dependency file: contracts/WasabiOffer.sol\n', '\n', '// pragma solidity >=0.5.16;\n', '// import "contracts/libraries/SafeMath.sol";\n', '// import "contracts/libraries/TransferHelper.sol";\n', '// import "contracts/interface/IERC20.sol";\n', '// import "contracts/interface/IWasabi.sol";\n', '// import "contracts/WasabiToken.sol";\n', '\n', 'interface IMasterChef {\n', '    function pendingSushi(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function poolLength() external view returns (uint256);\n', '}\n', '\n', 'contract Offer {\n', '    using SafeMath for uint256;\n', '    //\n', '    enum OfferState {Created, Opened, Taken, Paidback, Expired, Closed}\n', '    address public wasabi;\n', '    address public owner;\n', '    address public taker;\n', '    address public sushi;\n', '\n', '    uint8 public state = 0;\n', '\n', '    event StateChange(\n', '        uint256 _prev,\n', '        uint256 _curr,\n', '        address from,\n', '        address to,\n', '        address indexed token,\n', '        uint256 indexed amount\n', '    );\n', '\n', '    constructor() public {\n', '        wasabi = msg.sender;\n', '    }\n', '\n', '    function getState() public view returns (uint256 _state) {\n', '        _state = uint256(state);\n', '    }\n', '\n', '    function transferToken(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    ) external returns (bool) {\n', '        require(msg.sender == wasabi, "WASABI OFFER : TRANSFER PERMISSION DENY");\n', '        TransferHelper.safeTransfer(token, to, amount);\n', '    }\n', '\n', '    function initialize(\n', '        address _owner,\n', '        address _sushi,\n', '        uint256 sushiPid,\n', '        address tokenIn,\n', '        address masterChef,\n', '        uint256 amountIn\n', '    ) external {\n', '        require(msg.sender == wasabi, "WASABI OFFER : INITIALIZE PERMISSION DENY");\n', '        require(state == 0);\n', '        owner = _owner;\n', '        sushi = _sushi;\n', '        state = 1;\n', '        if (sushiPid != SushiHelper.nullID()) {\n', '            TransferHelper.safeApprove(tokenIn, masterChef, amountIn);\n', '            SushiHelper.deposit(masterChef, sushiPid, amountIn);\n', '        }\n', '    }\n', '\n', '    function cancel() public returns (uint256 amount) {\n', '        require(msg.sender == owner, "WASABI OFFER : CANCEL SENDER IS OWNER");\n', '        (uint256 _amount, address _masterChef, uint256 _sushiPid) = IWasabi(\n', '            wasabi\n', '        )\n', '            .offerStatus();\n', '        state = 5;\n', '        if (_sushiPid != SushiHelper.nullID()) {\n', '            SushiHelper.withdraw(_masterChef, _sushiPid, _amount);\n', '        }\n', '        amount = WasabiToken(IWasabi(wasabi).tokenAddress()).mint(address(this));\n', '        IWasabi(wasabi).cancel(msg.sender, sushi, amount);\n', '    }\n', '\n', '    function take() external {\n', '        require(state == 1, "WASABI OFFER : TAKE STATE ERROR");\n', '        require(msg.sender != owner, "WASABI OFFER : TAKE SENDER IS OWNER");\n', '        state = 2;\n', '        address tokenAddress = IWasabi(wasabi).tokenAddress();\n', '        uint256 amountWasabi = WasabiToken(tokenAddress).mint(address(this));\n', '        IWasabi(wasabi).take(msg.sender, amountWasabi);\n', '        taker = msg.sender;\n', '    }\n', '\n', '    function payback() external {\n', '        require(state == 2, "WASABI: payback");\n', '        state = 3;\n', '        IWasabi(wasabi).payback(msg.sender);\n', '\n', '        (uint256 _amount, address _masterChef, uint256 _sushiPid) = IWasabi(\n', '            wasabi\n', '        )\n', '            .offerStatus();\n', '\n', '        if (_sushiPid != SushiHelper.nullID()) {\n', '            SushiHelper.withdraw(_masterChef, _sushiPid, _amount);\n', '        }\n', '        uint8 oldState = state;\n', '        state = 5;\n', '        \n', '        IWasabi(wasabi).close(msg.sender, oldState, sushi);\n', '    }\n', '\n', '    function close()\n', '        external\n', '        returns (\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        require(state != 5, "WASABI OFFER : TAKE STATE ERROR");\n', '        (uint256 _amount, address _masterChef, uint256 _sushiPid) = IWasabi(\n', '            wasabi\n', '        )\n', '            .offerStatus();\n', '        if (_sushiPid != SushiHelper.nullID()) {\n', '            SushiHelper.withdraw(_masterChef, _sushiPid, _amount);\n', '        }\n', '        uint8 oldState = state;\n', '        state = 5;\n', '        return IWasabi(wasabi).close(msg.sender, oldState, sushi);\n', '    }\n', '\n', '    function getEstimatedWasabi() external view returns (uint256 amount) {\n', '        address tokenAddress = IWasabi(wasabi).tokenAddress();\n', '        amount = WasabiToken(tokenAddress).take();\n', '    }\n', '\n', '    function getEstimatedSushi() external view returns (uint256 amount) {\n', '        (, address _masterChef, uint256 _sushiPid) = IWasabi(wasabi)\n', '            .offerStatus();\n', '        if(_sushiPid < IMasterChef(_masterChef).poolLength())\n', '        {\n', '            amount = IMasterChef(_masterChef).pendingSushi(\n', '                _sushiPid,\n', '                address(this)\n', '            );    \n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/Wasabi.sol\n', '\n', 'pragma solidity >=0.5.16;\n', "// import 'contracts/interface/IERC20.sol';\n", "// import 'contracts/WasabiToken.sol';\n", "// import 'contracts/WasabiOffer.sol';\n", "// import 'contracts/libraries/TransferHelper.sol';\n", '\n', 'contract Wasabi is UpgradableGovernance\n', '{\n', '    using SafeMath for uint;\n', '    address public rewardAddress;\n', '    address public tokenAddress;\n', '    address public sushiAddress;\n', '    address public teamAddress;\n', '    address public masterChef;\n', '    address public acceptToken;\n', '    bytes32 public contractCodeHash;\n', '    mapping(address => address[]) public allOffers;\n', '    uint public feeRate;\n', '    uint public interestRate;\n', '    uint public startBlock;\n', '\n', '    struct SushiStruct {\n', '        uint val;\n', '        bool isValid;\n', '    }\n', '    \n', '    mapping(address => uint) public offerStats;\n', '    mapping(address => address[]) public userOffers;\n', '    mapping(address => uint) public pool;\n', '    mapping(address => address[]) public takerOffers;\n', '    mapping(address => SushiStruct) public sushiPids;\n', '    address[] public tokens;\n', '  \n', '    struct OfferStruct {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint amountIn;\n', '        uint amountOut;\n', '        uint expire;\n', '        uint interests;\n', '        uint duration;\n', '        uint feeRate;\n', '        uint interestrate;\n', '        address owner;\n', '        address taker;\n', '        address masterChef;\n', '        uint sushiPid;\n', '        uint productivity;\n', '    }\n', '    \n', '    mapping(address => OfferStruct) public offers;\n', '\n', '    function setPoolShare(address _token, uint _share) requireGovernor public {\n', '        if (pool[_token] == 0) {\n', '            tokens.push(_token);\n', '        }\n', '        pool[_token] = _share;\n', '    }\n', '\n', '    function setTeamAddress(address _newAddress) requireGovernor public {\n', '        teamAddress = _newAddress;\n', '    }\n', '\n', '    function getTokens() external view returns (address[] memory) {\n', '        return tokens;\n', '    }\n', '\n', '    function getTokensLength() external view returns (uint) {\n', '        return tokens.length;\n', '    }\n', '\n', '    function setFeeRate(uint _feeRate) requireGovernor public  {\n', '        feeRate = _feeRate;\n', '    }\n', '\n', '    function setInterestRate(uint _interestRate) requireGovernor public  {\n', '        interestRate = _interestRate;\n', '    }\n', '\n', '    function setStartBlock(uint _startBlock) requireGovernor public  {\n', '        startBlock = _startBlock;\n', '    }\n', '\n', '    function setSushiPid(address _token, uint _pid) requireGovernor public  {\n', '        sushiPids[_token].val = _pid;\n', '        sushiPids[_token].isValid = true;\n', '    }\n', '\n', '    function getRateForOffer(address _offer) external view returns (uint offerFeeRate, uint offerInterestrate) {\n', '        OfferStruct memory offer = offers[_offer];\n', '        offerFeeRate = offer.feeRate;\n', '        offerInterestrate = offer.interestrate;\n', '    }\n', '\n', '    event OfferCreated(address indexed _tokenIn, address indexed _tokenOut, uint _amountIn, uint _amountOut, uint _duration, uint _interests, address indexed _offer);\n', '    event OfferChanged(address indexed _offer, uint _state);\n', '\n', '    constructor(address _rewardAddress, address _wasabiTokenAddress, address _sushiAddress, address _masterChef, address _acceptToken, address _teamAddress) public  {\n', '        rewardAddress = _rewardAddress;\n', '        teamAddress = _teamAddress;\n', '        tokenAddress = _wasabiTokenAddress;\n', '        sushiAddress = _sushiAddress;\n', '        masterChef = _masterChef;\n', '        feeRate = 100;\n', '        interestRate = 1000;\n', '        acceptToken = _acceptToken;\n', '    }\n', '\n', '    function createOffer(\n', '        address[2] memory _addrs,\n', '        uint[4] memory _uints) public returns(address offer, uint productivity) \n', '    {\n', '        require(_addrs[0] != _addrs[1],     "WASABI: INVALID TOKEN IN&OUT");\n', '        require(_uints[3] < _uints[1],      "WASABI: INVALID INTERESTS");\n', '        require(pool[_addrs[0]] > 0,        "WASABI: INVALID TOKEN");\n', '        require(_uints[1] > 0,              "WASABI: INVALID AMOUNT OUT");\n', '        // require(_tokenOut == 0xdAC17F958D2ee523a2206206994597C13D831ec7, "only support USDT by now.");\n', '        require(_addrs[1] == acceptToken, "WASABI: ONLY USDT SUPPORTED");\n', '        require(block.number >= startBlock, "WASABI: NOT READY");\n', '\n', '        bytes memory bytecode = type(Offer).creationCode;\n', '        if (uint(contractCodeHash) == 0) {\n', '            contractCodeHash = keccak256(bytecode);\n', '        }\n', '        bytes32 salt = keccak256(abi.encodePacked(msg.sender, _addrs[0], _addrs[1], _uints[0], _uints[1], _uints[2], _uints[3], block.number));\n', '        assembly {\n', '            offer := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        productivity = pool[_addrs[0]] * _uints[0];\n', '        uint sushiPid = sushiPids[_addrs[0]].isValid ? sushiPids[_addrs[0]].val : SushiHelper.nullID();\n', '\n', '        offers[offer] = OfferStruct({\n', '            productivity:productivity,\n', '            tokenIn: _addrs[0],\n', '            tokenOut: _addrs[1],\n', '            amountIn: _uints[0],\n', '            amountOut :_uints[1],\n', '            expire :0,\n', '            interests:_uints[3],\n', '            duration:_uints[2],\n', '            feeRate:feeRate,\n', '            interestrate:interestRate,\n', '            owner:msg.sender,\n', '            taker:address(0),\n', '            masterChef:masterChef,\n', '            sushiPid:sushiPid\n', '        });\n', '        WasabiToken(tokenAddress).increaseProductivity(offer, productivity);\n', '        TransferHelper.safeTransferFrom(_addrs[0], msg.sender, offer, _uints[0]);\n', '        offerStats[offer] = 1;\n', '        Offer(offer).initialize(msg.sender, sushiAddress, sushiPid, _addrs[0], masterChef, _uints[0]);\n', '        \n', '        allOffers[_addrs[0]].push(offer);\n', '    \n', '        userOffers[msg.sender].push(offer);\n', '\n', '        emit OfferCreated(_addrs[0], _addrs[1], _uints[0], _uints[1], _uints[2], _uints[3], offer);\n', '    }\n', '    \n', '    function cancel(address _from, address sushi, uint amountWasabi) external {\n', '        require(offerStats[msg.sender] != 0, "WASABI: CANCEL OFFER NOT FOUND");\n', '        OfferStruct storage offer = offers[msg.sender];\n', '\n', '        // send mined WASABI to owner.\n', '        if (offer.productivity > 0) {\n', '            WasabiToken(tokenAddress).decreaseProductivity(msg.sender, offer.productivity);\n', '            uint amountWasabiTeam = amountWasabi.mul(1).div(10);\n', '            Offer(msg.sender).transferToken(tokenAddress, teamAddress, amountWasabiTeam);\n', '            Offer(msg.sender).transferToken(tokenAddress, offer.owner, amountWasabi - amountWasabiTeam);\n', '        }\n', '\n', '        // send mined SUSHI to owner.\n', '        if(offer.sushiPid != SushiHelper.nullID()) {\n', '            Offer(msg.sender).transferToken(sushi,_from, IERC20(sushi).balanceOf(msg.sender));\n', '        }\n', '\n', '        // send collateral to owner.\n', '        Offer(msg.sender).transferToken(offer.tokenIn, offer.owner, offer.amountIn);\n', '        \n', '        OfferChanged(msg.sender, Offer(msg.sender).state());\n', '    }\n', '    \n', '    function take(address _from, uint amountWasabi) external {\n', '        require(offerStats[msg.sender] != 0, "WASABI: TAKE OFFER NOT FOUND");\n', '        OfferStruct storage offer = offers[msg.sender];\n', '        offer.taker = _from;\n', '        offer.expire = offer.duration.add(block.number);\n', '\n', '        // send fees to reward address.\n', '        uint platformFee = offer.amountOut.mul(offer.feeRate).div(10000); \n', '        uint feeAmount = platformFee.add(offer.interests.mul(offer.interestrate).div(10000)); \n', '        TransferHelper.safeTransferFrom(offer.tokenOut, _from, rewardAddress, feeAmount);\n', '        \n', '        // send lend money to owner.\n', '        uint amountToOwner = offer.amountOut.sub(offer.interests.add(platformFee));\n', '        TransferHelper.safeTransferFrom(offer.tokenOut, _from, offer.owner, amountToOwner); \n', '        \n', '        // send the rest the the contract.\n', '        TransferHelper.safeTransferFrom(offer.tokenOut, _from, msg.sender, offer.amountOut.sub(amountToOwner).sub(feeAmount));        \n', '\n', '        // mint WASABI to the owner and cut 1/10 to the reward address.\n', '        if (offer.productivity > 0) {\n', '            WasabiToken(tokenAddress).decreaseProductivity(msg.sender, offer.productivity);\n', '            uint amountWasabiTeam = amountWasabi.mul(1).div(10);\n', '            Offer(msg.sender).transferToken(tokenAddress, teamAddress, amountWasabiTeam);\n', '            Offer(msg.sender).transferToken(tokenAddress, offer.owner, amountWasabi - amountWasabiTeam);\n', '        }\n', '        \n', '        addTakerOffer(msg.sender, _from);\n', '        OfferChanged(msg.sender, Offer(msg.sender).state());\n', '    }\n', '    \n', '\n', '    function payback(address _from) external {\n', '        require(offerStats[msg.sender] != 0, "WASABI: PAYBACK OFFER NOT FOUND");\n', '        OfferStruct storage offer = offers[msg.sender];\n', '        TransferHelper.safeTransferFrom(offer.tokenOut, _from, msg.sender, offer.amountOut);\n', '        OfferChanged(msg.sender, Offer(msg.sender).state());\n', '    }\n', '    \n', '    function close(address _from, uint8 _state, address sushi) external returns (address tokenToOwner, address tokenToTaker, uint amountToOwner, uint amountToTaker) {\n', '        require(offerStats[msg.sender] != 0, "WASABI: CLOSE OFFER NOT FOUND");\n', '        OfferStruct storage offer = offers[msg.sender];\n', '        require(_state == 3 || block.number >= offer.expire, "WASABI: INVALID STATE");\n', '        require(_from == offer.owner || _from == offer.taker, "WASABI: INVALID CALLEE");\n', '\n', '        // if paid back.\n', '        if(_state == 3) {\n', '            amountToTaker = offer.amountOut.add(offer.interests.sub(offer.interests.mul(offer.interestrate).div(10000)));\n', '            tokenToTaker = offer.tokenOut;\n', '            Offer(msg.sender).transferToken(tokenToTaker,  offer.taker, amountToTaker);\n', '            amountToOwner = offer.amountIn;\n', '            tokenToOwner = offer.tokenIn;\n', '            Offer(msg.sender).transferToken(tokenToOwner, offer.owner, amountToOwner);\n', '            if(offer.sushiPid != SushiHelper.nullID())\n', '                Offer(msg.sender).transferToken(sushi, offer.owner, IERC20(sushi).balanceOf(msg.sender));\n', '        }\n', '        // deal with if the offer expired.\n', '        else if(block.number >= offer.expire) {\n', '            amountToTaker = offer.amountIn;\n', '            tokenToTaker = offer.tokenIn;\n', '            Offer(msg.sender).transferToken(tokenToTaker, offer.taker, amountToTaker);\n', '\n', '            uint  amountRest = IERC20(offer.tokenOut).balanceOf(msg.sender);\n', '            Offer(msg.sender).transferToken(offer.tokenOut, offer.taker, amountRest);\n', '            if(offer.sushiPid != SushiHelper.nullID())\n', '                Offer(msg.sender).transferToken(sushi, offer.taker, IERC20(sushi).balanceOf(msg.sender));\n', '        }\n', '        OfferChanged(msg.sender, Offer(msg.sender).state());\n', '    }\n', '    \n', '    function offerStatus() external view returns(uint amountIn, address _masterChef, uint sushiPid) {\n', '        OfferStruct storage offer = offers[msg.sender];\n', '        amountIn = offer.amountIn;\n', '        _masterChef = offer.masterChef;\n', '        sushiPid = offer.sushiPid;\n', '    }\n', '    \n', ' \n', '    function  getOffer(address  _lpToken,  uint index) external view returns (address offer) {\n', '        offer = allOffers[_lpToken][index];\n', '    }\n', '\n', '    function getOfferLength(address _lpToken) external view returns (uint length) {\n', '        length = allOffers[_lpToken].length;\n', '    }\n', '\n', '    function getUserOffer(address _user, uint _index) external view returns (address) {\n', '        return userOffers[_user][_index];\n', '    }\n', '\n', '    function getUserOffersLength(address _user) external view returns (uint length) {\n', '        length = userOffers[_user].length;\n', '    }\n', '\n', '    function addTakerOffer(address _offer, address _user) public returns (uint) {\n', "        require(msg.sender == _offer, 'WASABI: FORBIDDEN');\n", '        takerOffers[_user].push(_offer);\n', '        return takerOffers[_user].length;\n', '    }\n', '\n', '    function getTakerOffer(address _user, uint _index) external view returns (address) {\n', '        return takerOffers[_user][_index];\n', '    }\n', '\n', '    function getTakerOffersLength(address _user) external view returns (uint length) {\n', '        length = takerOffers[_user].length;\n', '    }\n', '}']