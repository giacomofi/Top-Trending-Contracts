['/**\n', ' * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "unauthorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return divCeil(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = ((a - 1) / b) + 1;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing loan sets\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n', ' *\n', ' */\n', 'library EnumerableBytes32Set {\n', '\n', '    struct Bytes32Set {\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) index;\n', '        bytes32[] values;\n', '    }\n', '\n', '    /**\n', '     * @dev Add an address value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return addBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!contains(set, value)){\n', '            set.index[value] = set.values.push(value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes an address value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return removeBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (contains(set, value)){\n', '            uint256 toDeleteIndex = set.index[value] - 1;\n', '            uint256 lastIndex = set.values.length - 1;\n', '\n', "            // If the element we're deleting is the last one, we can just remove it without doing a swap\n", '            if (lastIndex != toDeleteIndex) {\n', '                bytes32 lastValue = set.values[lastIndex];\n', '\n', '                // Move the last value to the index where the deleted value is\n', '                set.values[toDeleteIndex] = lastValue;\n', '                // Update the index for the moved value\n', '                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            }\n', '\n', '            // Delete the index entry for the deleted value\n', '            delete set.index[value];\n', '\n', '            // Delete the old entry for the moved value\n', '            set.values.pop();\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function containsAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an array with all values in the set. O(N).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '\n', '     * WARNING: This function may run out of gas on large sets: use {length} and\n', '     * {get} instead in these cases.\n', '     */\n', '    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\n', '        internal\n', '        view\n', '        returns (bytes32[] memory output)\n', '    {\n', '        uint256 end = start + count;\n', '        require(end >= start, "addition overflow");\n', '        end = set.values.length < end ? set.values.length : end;\n', '        if (end == 0 || start >= end) {\n', '            return output;\n', '        }\n', '\n', '        output = new bytes32[](end-start);\n', '        for (uint256 i = start; i < end; i++) {\n', '            output[i-start] = set.values[i];\n', '        }\n', '        return output;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements on the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return set.values.length;\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function get(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return set.values[index];\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function getAddress(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        bytes32 value = set.values[index];\n', '        address addrvalue;\n', '        assembly {\n', '            addrvalue := value\n', '        }\n', '        return addrvalue;\n', '    }\n', '}\n', '\n', 'contract StakingState is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n', '\n', '    uint256 public constant initialCirculatingSupply = 1030000000e18 - 889389933e18;\n', '    address internal constant ZERO_ADDRESS = address(0);\n', '\n', '    address public BZRX;\n', '    address public vBZRX;\n', '    address public LPToken;\n', '\n', '    address public implementation;\n', '\n', '    bool public isInit;\n', '    bool public isActive;\n', '\n', '    mapping(address => uint256) internal _totalSupplyPerToken;                      // token => value\n', '    mapping(address => mapping(address => uint256)) internal _balancesPerToken;     // token => account => value\n', '    mapping(address => mapping(address => uint256)) internal _checkpointPerToken;   // token => account => value\n', '\n', '    mapping(address => address) public delegate;                                    // user => delegate\n', '    mapping(address => mapping(address => uint256)) public repStakedPerToken;       // token => user => value\n', '    mapping(address => bool) public reps;                                           // user => isActive\n', '\n', '    uint256 public rewardPerTokenStored;\n', '    mapping(address => uint256) public userRewardPerTokenPaid;                      // user => value\n', '    mapping(address => uint256) public rewards;                                     // user => value\n', '\n', '    EnumerableBytes32Set.Bytes32Set internal repStakedSet;\n', '\n', '    uint256 public lastUpdateTime;\n', '    uint256 public periodFinish;\n', '    uint256 public rewardRate;\n', '}\n', '\n', 'interface ILoanPool {\n', '    function tokenPrice()\n', '        external\n', '        view\n', '        returns (uint256 price);\n', '\n', '    function borrowInterestRate()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalAssetSupply()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function assetBalanceOf(\n', '        address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract StakingInterim is StakingState {\n', '\n', '    ILoanPool public constant iBZRX = ILoanPool(0x18240BD9C07fA6156Ce3F3f61921cC82b2619157);\n', '\n', '    struct RepStakedTokens {\n', '        address wallet;\n', '        bool isActive;\n', '        uint256 BZRX;\n', '        uint256 vBZRX;\n', '        uint256 LPToken;\n', '    }\n', '\n', '    event Staked(\n', '        address indexed user,\n', '        address indexed token,\n', '        address indexed delegate,\n', '        uint256 amount\n', '    );\n', '\n', '    event DelegateChanged(\n', '        address indexed user,\n', '        address indexed oldDelegate,\n', '        address indexed newDelegate\n', '    );\n', '\n', '    event RewardAdded(\n', '        uint256 indexed reward,\n', '        uint256 duration\n', '    );\n', '\n', '    modifier checkActive() {\n', '        require(isActive, "not active");\n', '        _;\n', '    }\n', ' \n', '    function init(\n', '        address _BZRX,\n', '        address _vBZRX,\n', '        address _LPToken,\n', '        bool _isActive)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(!isInit, "already init");\n', '        \n', '        BZRX = _BZRX;\n', '        vBZRX = _vBZRX;\n', '        LPToken = _LPToken;\n', '\n', '        isActive = _isActive;\n', '\n', '        isInit = true;\n', '    }\n', '\n', '    function setActive(\n', '        bool _isActive)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(isInit, "not init");\n', '        isActive = _isActive;\n', '    }\n', '\n', '    function rescueToken(\n', '        IERC20 token,\n', '        address receiver,\n', '        uint256 amount)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        withdrawAmount = token.balanceOf(address(this));\n', '        if (withdrawAmount > amount) {\n', '            withdrawAmount = amount;\n', '        }\n', '        if (withdrawAmount != 0) {\n', '            token.safeTransfer(\n', '                receiver,\n', '                withdrawAmount\n', '            );\n', '        }\n', '    }\n', '\n', '    function stake(\n', '        address[] memory tokens,\n', '        uint256[] memory values)\n', '        public\n', '    {\n', '        stakeWithDelegate(\n', '            tokens,\n', '            values,\n', '            ZERO_ADDRESS\n', '        );\n', '    }\n', '\n', '    function stakeWithDelegate(\n', '        address[] memory tokens,\n', '        uint256[] memory values,\n', '        address delegateToSet)\n', '        public\n', '        checkActive\n', '        updateReward(msg.sender)\n', '    {\n', '        require(tokens.length == values.length, "count mismatch");\n', '\n', '        address currentDelegate = _setDelegate(delegateToSet);\n', '\n', '        address token;\n', '        uint256 stakeAmount;\n', '        uint256 stakeable;\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            token = tokens[i];\n', '            require(token == BZRX || token == vBZRX || token == LPToken, "invalid token");\n', '\n', '            stakeAmount = values[i];\n', '            stakeable = stakeableByAsset(token, msg.sender);\n', '\n', '            if (stakeAmount == 0 || stakeable == 0) {\n', '                continue;\n', '            }\n', '            if (stakeAmount > stakeable) {\n', '                stakeAmount = stakeable;\n', '            }\n', '\n', '            _balancesPerToken[token][msg.sender] = _balancesPerToken[token][msg.sender].add(stakeAmount);\n', '            _totalSupplyPerToken[token] = _totalSupplyPerToken[token].add(stakeAmount);\n', '\n', '            emit Staked(\n', '                msg.sender,\n', '                token,\n', '                currentDelegate,\n', '                stakeAmount\n', '            );\n', '\n', '            repStakedPerToken[currentDelegate][token] = repStakedPerToken[currentDelegate][token]\n', '                .add(stakeAmount);\n', '        }\n', '    }\n', '\n', '    function setRepActive(\n', '        bool _isActive)\n', '        public\n', '    {\n', '        reps[msg.sender] = _isActive;\n', '        if (_isActive) {\n', '            repStakedSet.addAddress(msg.sender);\n', '        }\n', '    }\n', '\n', '    function getRepVotes(\n', '        uint256 start,\n', '        uint256 count)\n', '        external\n', '        view\n', '        returns (RepStakedTokens[] memory repStakedArr)\n', '    {\n', '        uint256 end = start.add(count).min256(repStakedSet.length());\n', '        if (start >= end) {\n', '            return repStakedArr;\n', '        }\n', '        count = end-start;\n', '\n', '        uint256 idx = count;\n', '        address wallet;\n', '        repStakedArr = new RepStakedTokens[](idx);\n', '        for (uint256 i = --end; i >= start; i--) {\n', '            wallet = repStakedSet.getAddress(i);\n', '            repStakedArr[count-(idx--)] = RepStakedTokens({\n', '                wallet: wallet,\n', '                isActive: reps[wallet],\n', '                BZRX: repStakedPerToken[wallet][BZRX],\n', '                vBZRX: repStakedPerToken[wallet][vBZRX],\n', '                LPToken: repStakedPerToken[wallet][LPToken]\n', '            });\n', '\n', '            if (i == 0) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (idx != 0) {\n', '            count -= idx;\n', '            assembly {\n', '                mstore(repStakedArr, count)\n', '            }\n', '        }\n', '    }\n', '\n', '    function lastTimeRewardApplicable()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return periodFinish\n', '            .min256(_getTimestamp());\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        uint256 _rewardsPerToken = rewardsPerToken();\n', '        rewardPerTokenStored = _rewardsPerToken;\n', '\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '\n', '        if (account != address(0)) {\n', '            rewards[account] = _earned(account, _rewardsPerToken);\n', '            userRewardPerTokenPaid[account] = _rewardsPerToken;\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    function rewardsPerToken()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 totalSupplyBZRX = totalSupplyByAssetNormed(BZRX);\n', '        uint256 totalSupplyVBZRX = totalSupplyByAssetNormed(vBZRX);\n', '        uint256 totalSupplyLPToken = totalSupplyByAssetNormed(LPToken);\n', '\n', '        uint256 totalTokens = totalSupplyBZRX\n', '            .add(totalSupplyVBZRX)\n', '            .add(totalSupplyLPToken);\n', '\n', '        if (totalTokens == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '\n', '        return rewardPerTokenStored.add(\n', '            lastTimeRewardApplicable()\n', '                .sub(lastUpdateTime)\n', '                .mul(rewardRate)\n', '                .mul(1e18)\n', '                .div(totalTokens)\n', '        );\n', '    }\n', '\n', '    function earned(\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _earned(\n', '            account,\n', '            rewardsPerToken()\n', '        );\n', '    }\n', '\n', '    function _earned(\n', '        address account,\n', '        uint256 _rewardsPerToken)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 bzrxBalance = balanceOfByAssetNormed(BZRX, account);\n', '        uint256 vbzrxBalance = balanceOfByAssetNormed(vBZRX, account);\n', '        uint256 lptokenBalance = balanceOfByAssetNormed(LPToken, account);\n', '\n', '        uint256 totalTokens = bzrxBalance\n', '            .add(vbzrxBalance)\n', '            .add(lptokenBalance);\n', '\n', '        return totalTokens\n', '            .mul(_rewardsPerToken.sub(userRewardPerTokenPaid[account]))\n', '            .div(1e18)\n', '            .add(rewards[account]);\n', '    }\n', '\n', '    function notifyRewardAmount(\n', '        uint256 reward,\n', '        uint256 duration)\n', '        external\n', '        onlyOwner\n', '        updateReward(address(0))\n', '    {\n', '        require(isInit, "not init");\n', '\n', '        if (periodFinish != 0) {\n', '            if (_getTimestamp() >= periodFinish) {\n', '                rewardRate = reward\n', '                    .div(duration);\n', '            } else {\n', '                uint256 remaining = periodFinish\n', '                    .sub(_getTimestamp());\n', '                uint256 leftover = remaining\n', '                    .mul(rewardRate);\n', '                rewardRate = reward\n', '                    .add(leftover)\n', '                    .div(duration);\n', '            }\n', '\n', '            lastUpdateTime = _getTimestamp();\n', '            periodFinish = _getTimestamp()\n', '                .add(duration);\n', '        } else {\n', '            rewardRate = reward\n', '                .div(duration);\n', '            lastUpdateTime = _getTimestamp();\n', '            periodFinish = _getTimestamp()\n', '                .add(duration);\n', '        }\n', '\n', '        emit RewardAdded(\n', '            reward,\n', '            duration\n', '        );\n', '    }\n', '\n', '    function stakeableByAsset(\n', '        address token,\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 walletBalance = IERC20(token).balanceOf(account);\n', '\n', '        // excludes staking by way of iBZRX\n', '        uint256 stakedBalance = _balancesPerToken[token][account];\n', '\n', '        return walletBalance > stakedBalance ?\n', '            walletBalance - stakedBalance :\n', '            0;\n', '    }\n', '\n', '    function balanceOfByAssetWalletAware(\n', '        address token,\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        uint256 walletBalance = IERC20(token).balanceOf(account);\n', '\n', '        balance = _balancesPerToken[token][account]\n', '            .min256(walletBalance);\n', '\n', '        if (token == BZRX) {\n', '            balance = balance\n', '                .add(iBZRX.assetBalanceOf(account));\n', '        }\n', '    }\n', '\n', '    function balanceOfByAsset(\n', '        address token,\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        balance = _balancesPerToken[token][account];\n', '        if (token == BZRX) {\n', '            balance = balance\n', '                .add(iBZRX.assetBalanceOf(account));\n', '        }\n', '    }\n', '\n', '    function balanceOfByAssetNormed(\n', '        address token,\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (token == LPToken) {\n', '            // normalizes the LPToken balance\n', '            uint256 lptokenBalance = totalSupplyByAsset(LPToken);\n', '            if (lptokenBalance != 0) {\n', '                return totalSupplyByAssetNormed(LPToken)\n', '                    .mul(balanceOfByAsset(LPToken, account))\n', '                    .div(lptokenBalance);\n', '            }\n', '        } else {\n', '            return balanceOfByAsset(token, account);\n', '        }\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupplyByAsset(BZRX)\n', '            .add(totalSupplyByAsset(vBZRX))\n', '            .add(totalSupplyByAsset(LPToken));\n', '    }\n', '\n', '    function totalSupplyNormed()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupplyByAssetNormed(BZRX)\n', '            .add(totalSupplyByAssetNormed(vBZRX))\n', '            .add(totalSupplyByAssetNormed(LPToken));\n', '    }\n', '\n', '    function totalSupplyByAsset(\n', '        address token)\n', '        public\n', '        view\n', '        returns (uint256 supply)\n', '    {\n', '        supply = _totalSupplyPerToken[token];\n', '        if (token == BZRX) {\n', '            supply = supply\n', '                .add(iBZRX.totalAssetSupply());\n', '        }\n', '    }\n', '\n', '    function totalSupplyByAssetNormed(\n', '        address token)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (token == LPToken) {\n', '            uint256 circulatingSupply = initialCirculatingSupply; // + VBZRX.totalVested();\n', '            \n', '            // staked LP tokens are assumed to represent the total unstaked supply (circulated supply - staked BZRX)\n', '            return totalSupplyByAsset(LPToken) != 0 ?\n', '                circulatingSupply - totalSupplyByAsset(BZRX) :\n', '                0;\n', '        } else {\n', '            return totalSupplyByAsset(token);\n', '        }\n', '    }\n', '\n', '    function _setDelegate(\n', '        address delegateToSet)\n', '        internal\n', '        returns (address currentDelegate)\n', '    {\n', '        currentDelegate = delegate[msg.sender];\n', '        if (currentDelegate != ZERO_ADDRESS) {\n', '            require(delegateToSet == ZERO_ADDRESS || delegateToSet == currentDelegate, "delegate already set");\n', '        } else {\n', '            if (delegateToSet == ZERO_ADDRESS) {\n', '                delegateToSet = msg.sender;\n', '            }\n', '            delegate[msg.sender] = delegateToSet;\n', '\n', '            emit DelegateChanged(\n', '                msg.sender,\n', '                currentDelegate,\n', '                delegateToSet\n', '            );\n', '\n', '            currentDelegate = delegateToSet;\n', '        }\n', '    }\n', '\n', '    function _getTimestamp()\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '}']