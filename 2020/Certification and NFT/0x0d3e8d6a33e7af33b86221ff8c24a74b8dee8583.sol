['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IAdmin {\n', '    function admin() external view returns (address);\n', '}\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '    function decimals() external view returns (uint8);\n', '    function description() external view returns (string memory);\n', '    function version() external view returns (uint256);\n', '\n', '    // getRoundData and latestRoundData should both raise "No data present"\n', '    // if they do not have data to report, instead of returning unset values\n', '    // which could be misinterpreted as actual reported values.\n', '    function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '    function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'contract ChainlinkPriceFeed {\n', '    using SafeMath for uint;\n', '\n', '    AggregatorV3Interface[] internal priceFeed;\n', '    AggregatorV3Interface internal priceFeedETHToUSD;\n', '    IAdmin public admin;\n', '\n', '    constructor(address adminAddress) public {\n', '        priceFeed.push(AggregatorV3Interface(0x773616E4d11A78F511299002da57A0a94577F1f4)); //dai to eth\n', '        priceFeed.push(AggregatorV3Interface(0x986b5E1e1755e3C2440e960477f25201B0a8bbD4)); //usdc to eth\n', '        priceFeed.push(AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46)); //usdt to eth\n', '        priceFeed.push(AggregatorV3Interface(0x3886BA987236181D98F2401c507Fb8BeA7871dF2)); //tusd to eth\n', '        priceFeedETHToUSD = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419); //eth to usd\n', '        admin = IAdmin(adminAddress);\n', '    }\n', '\n', '    function addPriceFeed(address addr) public {\n', '        require(msg.sender == admin.admin(), "Not admin");\n', '        priceFeed.push(AggregatorV3Interface(addr));\n', '    }\n', '\n', '    function getLatestPrice(uint idx) public view returns (uint) {\n', '        require(idx < priceFeed.length, "No price feed");\n', '        (,int priceETH,,uint timeStampETH,) = priceFeed[idx].latestRoundData();\n', '        (,int priceUSD,,uint timeStampUSD,) = priceFeedETHToUSD.latestRoundData();\n', '        require(timeStampETH > 0 && timeStampUSD > 0, "Price feed round not complete");\n', '        return uint(priceETH).mul(uint(priceUSD)).div(1e18);\n', '    }\n', '}']