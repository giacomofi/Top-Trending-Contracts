['pragma solidity 0.5.16;\n', '\n', '\n', 'interface ICurveMetaPool {\n', '    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface ISavingsManager {\n', '\n', '    /** @dev Admin privs */\n', '    function withdrawUnallocatedInterest(address _mAsset, address _recipient) external;\n', '\n', '    /** @dev Liquidator */\n', '    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\n', '\n', '    /** @dev Public privs */\n', '    function collectAndDistributeInterest(address _mAsset) external;\n', '\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract InitializableModuleKeys {\n', '\n', '    // Governance                             // Phases\n', '    bytes32 internal KEY_GOVERNANCE;          // 2.x\n', '    bytes32 internal KEY_STAKING;             // 1.2\n', '    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\n', '\n', '    // mStable\n', '    bytes32 internal KEY_ORACLE_HUB;          // 1.2\n', '    bytes32 internal KEY_MANAGER;             // 1.2\n', '    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\n', '    bytes32 internal KEY_META_TOKEN;          // 1.1\n', '    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\n', '\n', '    /**\n', '     * @dev Initialize function for upgradable proxy contracts. This function should be called\n', '     *      via Proxy to initialize constants in the Proxy contract.\n', '     */\n', '    function _initialize() internal {\n', '        // keccak256() values are evaluated only once at the time of this function call.\n', '        // Hence, no need to assign hard-coded values to these variables.\n', '        KEY_GOVERNANCE = keccak256("Governance");\n', '        KEY_STAKING = keccak256("Staking");\n', '        KEY_PROXY_ADMIN = keccak256("ProxyAdmin");\n', '\n', '        KEY_ORACLE_HUB = keccak256("OracleHub");\n', '        KEY_MANAGER = keccak256("Manager");\n', '        KEY_RECOLLATERALISER = keccak256("Recollateraliser");\n', '        KEY_META_TOKEN = keccak256("MetaToken");\n', '        KEY_SAVINGS_MANAGER = keccak256("SavingsManager");\n', '    }\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '    function cancelProposedModule(bytes32 _key) external;\n', '    function acceptProposedModule(bytes32 _key) external;\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '    function cancelLockModule(bytes32 _key) external;\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'contract InitializableModule is InitializableModuleKeys {\n', '\n', '    INexus public nexus;\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(\n', '            msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    function _initialize(address _nexus) internal {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '        InitializableModuleKeys._initialize();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'contract ILiquidator {\n', '\n', '    function createLiquidation(\n', '        address _integration,\n', '        address _sellToken,\n', '        address _bAsset,\n', '        int128 _curvePosition,\n', '        address[] calldata _uniswapPath,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn\n', '    )\n', '        external;\n', '\n', '    function updateBasset(\n', '        address _integration,\n', '        address _bAsset,\n', '        int128 _curvePosition,\n', '        address[] calldata _uniswapPath,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn\n', '    )\n', '        external;\n', '        \n', '    function deleteLiquidation(address _integration) external;\n', '\n', '    function triggerLiquidation(address _integration) external;\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * @dev bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x.mul(FULL_SCALE);\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x.mul(ratio);\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil.div(RATIO_SCALE);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        uint256 y = x.mul(RATIO_SCALE);\n', '        // return 1e22 / 1e12 = 1e10\n', '        return y.div(ratio);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '\n', '    using StableMath for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferTokens(\n', '        address _sender,\n', '        address _recipient,\n', '        address _basset,\n', '        bool _erc20TransferFeeCharged,\n', '        uint256 _qty\n', '    )\n', '        internal\n', '        returns (uint256 receivedQty)\n', '    {\n', '        receivedQty = _qty;\n', '        if(_erc20TransferFeeCharged) {\n', '            uint256 balBefore = IERC20(_basset).balanceOf(_recipient);\n', '            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\n', '            uint256 balAfter = IERC20(_basset).balanceOf(_recipient);\n', '            receivedQty = StableMath.min(_qty, balAfter.sub(balBefore));\n', '        } else {\n', '            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\n', '        }\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender)\n', '        internal\n', '    {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, uint256(-1));\n', '    }\n', '}\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '/**\n', ' * @title   Liquidator\n', ' * @author  Stability Labs Pty. Ltd.\n', ' * @notice  The Liquidator allows rewards to be swapped for another token\n', ' *          and returned to a calling contract\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2020-10-13\n', ' */\n', 'contract Liquidator is\n', '    ILiquidator,\n', '    Initializable,\n', '    InitializableModule\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event LiquidationModified(address indexed integration);\n', '    event LiquidationEnded(address indexed integration);\n', '    event Liquidated(address indexed sellToken, address mUSD, uint256 mUSDAmount, address buyToken);\n', '\n', '    address public mUSD;\n', '    ICurveMetaPool public curve;\n', '    IUniswapV2Router02 public uniswap;\n', '    uint256 private interval = 7 days;\n', '\n', '    mapping(address => Liquidation) public liquidations;\n', '    mapping(address => uint256) public minReturn;\n', '\n', '    struct Liquidation {\n', '        address sellToken;\n', '\n', '        address bAsset;\n', '        int128 curvePosition;\n', '        address[] uniswapPath;\n', '\n', '        uint256 lastTriggered;\n', '        uint256 trancheAmount;   // The amount of bAsset units to buy each week, with token decimals\n', '    }\n', '\n', '    function initialize(\n', '        address _nexus,\n', '        address _uniswap,\n', '        address _curve,\n', '        address _mUSD\n', '    )\n', '        external\n', '        initializer\n', '    {\n', '        InitializableModule._initialize(_nexus);\n', '\n', '        require(_uniswap != address(0), "Invalid uniswap address");\n', '        uniswap = IUniswapV2Router02(_uniswap);\n', '\n', '        require(_curve != address(0), "Invalid curve address");\n', '        curve = ICurveMetaPool(_curve);\n', '\n', '        require(_mUSD != address(0), "Invalid mUSD address");\n', '        mUSD = _mUSD;\n', '    }\n', '\n', '    /***************************************\n', '                    GOVERNANCE\n', '    ****************************************/\n', '\n', '    /**\n', '    * @dev Create a liquidation\n', '    * @param _integration The integration contract address from which to receive sellToken\n', '    * @param _sellToken Token harvested from the integration contract\n', '    * @param _bAsset The asset to buy on Uniswap\n', '    * @param _curvePosition Position of the bAsset in Curves MetaPool\n', '    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\n', '    * @param _trancheAmount The amount of bAsset units to buy in each weekly tranche\n', '    * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\n', '    */\n', '    function createLiquidation(\n', '        address _integration,\n', '        address _sellToken,\n', '        address _bAsset,\n', '        int128 _curvePosition,\n', '        address[] calldata _uniswapPath,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn\n', '    )\n', '        external\n', '        onlyGovernance\n', '    {\n', '        require(liquidations[_integration].sellToken == address(0), "Liquidation exists for this bAsset");\n', '\n', '        require(\n', '            _integration != address(0) &&\n', '            _sellToken != address(0) &&\n', '            _bAsset != address(0) &&\n', '            _uniswapPath.length >= 2 &&\n', '            _minReturn > 0,\n', '            "Invalid inputs"\n', '        );\n', '        require(_validUniswapPath(_sellToken, _bAsset, _uniswapPath), "Invalid uniswap path");\n', '\n', '        liquidations[_integration] = Liquidation({\n', '            sellToken: _sellToken,\n', '            bAsset: _bAsset,\n', '            curvePosition: _curvePosition,\n', '            uniswapPath: _uniswapPath,\n', '            lastTriggered: 0,\n', '            trancheAmount: _trancheAmount\n', '        });\n', '        minReturn[_integration] = _minReturn;\n', '\n', '        emit LiquidationModified(_integration);\n', '    }\n', '\n', '    /**\n', '    * @dev Update a liquidation\n', '    * @param _integration The integration contract in question\n', '    * @param _bAsset New asset to buy on Uniswap\n', '    * @param _curvePosition Position of the bAsset in Curves MetaPool\n', '    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\n', '    * @param _trancheAmount The amount of bAsset units to buy in each weekly tranche\n', '    * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\n', '    */\n', '    function updateBasset(\n', '        address _integration,\n', '        address _bAsset,\n', '        int128 _curvePosition,\n', '        address[] calldata _uniswapPath,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn\n', '    )\n', '        external\n', '        onlyGovernance\n', '    {\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '\n', '        address oldBasset = liquidation.bAsset;\n', '        require(oldBasset != address(0), "Liquidation does not exist");\n', '\n', '        require(_minReturn > 0, "Must set some minimum value");\n', '        require(_bAsset != address(0), "Invalid bAsset");\n', '        require(_validUniswapPath(liquidation.sellToken, _bAsset, _uniswapPath), "Invalid uniswap path");\n', '\n', '        liquidations[_integration].bAsset = _bAsset;\n', '        liquidations[_integration].curvePosition = _curvePosition;\n', '        liquidations[_integration].uniswapPath = _uniswapPath;\n', '        liquidations[_integration].trancheAmount = _trancheAmount;\n', '        minReturn[_integration] = _minReturn;\n', '\n', '        emit LiquidationModified(_integration);\n', '    }\n', '\n', '    /**\n', '    * @dev Validates a given uniswap path - valid if sellToken at position 0 and bAsset at end\n', '    * @param _sellToken Token harvested from the integration contract\n', '    * @param _bAsset New asset to buy on Uniswap\n', '    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\n', '    */\n', '    function _validUniswapPath(address _sellToken, address _bAsset, address[] memory _uniswapPath)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        uint256 len = _uniswapPath.length;\n', '        return _sellToken == _uniswapPath[0] && _bAsset == _uniswapPath[len-1];\n', '    }\n', '\n', '    /**\n', '    * @dev Delete a liquidation\n', '    */\n', '    function deleteLiquidation(address _integration)\n', '        external\n', '        onlyGovernance\n', '    {\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '        require(liquidation.bAsset != address(0), "Liquidation does not exist");\n', '\n', '        delete liquidations[_integration];\n', '        delete minReturn[_integration];\n', '\n', '        emit LiquidationEnded(_integration);\n', '    }\n', '\n', '    /***************************************\n', '                    LIQUIDATION\n', '    ****************************************/\n', '\n', '    /**\n', '    * @dev Triggers a liquidation, flow (once per week):\n', '    *    - Sells $COMP for $USDC (or other) on Uniswap (up to trancheAmount)\n', '    *    - Sell USDC for mUSD on Curve\n', '    *    - Send to SavingsManager\n', '    * @param _integration Integration for which to trigger liquidation\n', '    */\n', '    function triggerLiquidation(address _integration)\n', '        external\n', '    {\n', '        // solium-disable-next-line security/no-tx-origin\n', '        require(tx.origin == msg.sender, "Must be EOA");\n', '\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '\n', '        address bAsset = liquidation.bAsset;\n', '        require(bAsset != address(0), "Liquidation does not exist");\n', '\n', '        require(block.timestamp > liquidation.lastTriggered.add(interval), "Must wait for interval");\n', '        liquidations[_integration].lastTriggered = block.timestamp;\n', '\n', '        // Cache variables\n', '        address sellToken = liquidation.sellToken;\n', '        address[] memory uniswapPath = liquidation.uniswapPath;\n', '\n', '        // 1. Transfer sellTokens from integration contract if there are some\n', '        //    Assumes infinite approval\n', '        uint256 integrationBal = IERC20(sellToken).balanceOf(_integration);\n', '        if (integrationBal > 0) {\n', '            IERC20(sellToken).safeTransferFrom(_integration, address(this), integrationBal);\n', '        }\n', '\n', '        // 2. Get the amount to sell based on the tranche amount we want to buy\n', '        //    Check contract balance\n', '        uint256 sellTokenBal = IERC20(sellToken).balanceOf(address(this));\n', '        require(sellTokenBal > 0, "No sell tokens to liquidate");\n', '        require(liquidation.trancheAmount > 0, "Liquidation has been paused");\n', '        //    Calc amounts for max tranche\n', '        uint[] memory amountsIn = uniswap.getAmountsIn(liquidation.trancheAmount, uniswapPath);\n', '        uint256 sellAmount = amountsIn[0];\n', '\n', '        if (sellTokenBal < sellAmount) {\n', '            sellAmount = sellTokenBal;\n', '        }\n', '\n', '        // 3. Make the swap\n', '        // 3.1 Approve Uniswap and make the swap\n', '        IERC20(sellToken).safeApprove(address(uniswap), 0);\n', '        IERC20(sellToken).safeApprove(address(uniswap), sellAmount);\n', '        // 3.2. Make the sale > https://uniswap.org/docs/v2/smart-contracts/router02/#swapexacttokensfortokens\n', '\n', '        // min amount out = sellAmount * priceFloor / 1e18\n', '        // e.g. 1e18 * 100e6 / 1e18 = 100e6\n', '        // e.g. 30e8 * 100e6 / 1e8 = 3000e6\n', '        // e.g. 30e18 * 100e18 / 1e18 = 3000e18\n', '        uint256 sellTokenDec = IBasicToken(sellToken).decimals();\n', '        uint256 minOut = sellAmount.mul(minReturn[_integration]).div(10 ** sellTokenDec);\n', '        require(minOut > 0, "Must have some price floor");\n', '        uniswap.swapExactTokensForTokens(\n', '            sellAmount,\n', '            minOut,\n', '            uniswapPath,\n', '            address(this),\n', '            block.timestamp.add(1800)\n', '        );\n', '\n', '        // 3.3. Trade on Curve\n', '        uint256 purchased = _sellOnCrv(bAsset, liquidation.curvePosition);\n', '\n', '        // 4.0. Send to SavingsManager\n', '        address savings = _savingsManager();\n', '        IERC20(mUSD).safeApprove(savings, 0);\n', '        IERC20(mUSD).safeApprove(savings, purchased);\n', '        ISavingsManager(savings).depositLiquidation(mUSD, purchased);\n', '\n', '        emit Liquidated(sellToken, mUSD, purchased, bAsset);\n', '    }\n', '\n', '    function _sellOnCrv(address _bAsset, int128 _curvePosition) internal returns (uint256 purchased) {\n', '        uint256 bAssetBal = IERC20(_bAsset).balanceOf(address(this));\n', '\n', '        IERC20(_bAsset).safeApprove(address(curve), 0);\n', '        IERC20(_bAsset).safeApprove(address(curve), bAssetBal);\n', '        uint256 bAssetDec = IBasicToken(_bAsset).decimals();\n', '        // e.g. 100e6 * 95e16 / 1e6 = 100e18\n', '        uint256 minOutCrv = bAssetBal.mul(95e16).div(10 ** bAssetDec);\n', '        purchased = curve.exchange_underlying(_curvePosition, 0, bAssetBal, minOutCrv);\n', '    }\n', '}']