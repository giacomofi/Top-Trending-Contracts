['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @title VersionedInitializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' *\n', ' * @author Aave, inspired by the OpenZeppelin Initializable contract\n', ' */\n', 'abstract contract VersionedInitializable {\n', '    /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '    uint256 internal lastInitializedRevision = 0;\n', '\n', '   /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '    modifier initializer() {\n', '        uint256 revision = getRevision();\n', '        require(revision > lastInitializedRevision, "Contract instance has already been initialized");\n', '\n', '        lastInitializedRevision = revision;\n', '\n', '        _;\n', '\n', '    }\n', '\n', '    /// @dev returns the revision number of the contract.\n', '    /// Needs to be defined in the inherited class as a constant.\n', '    function getRevision() internal pure virtual returns(uint256);\n', '\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'contract ChainlinkSourcesRegistry is VersionedInitializable {\n', '    /// @dev Mapping of current stored asset => underlying Chainlink aggregator\n', '    mapping (address => address) public aggregatorsOfAssets;\n', '    \n', '    event AggregatorUpdated(address token, address aggregator);\n', '    \n', '    uint256 public constant REVISION = 1;\n', '    \n', '    /**\n', '    * @dev returns the revision of the implementation contract\n', '    */\n', '    function getRevision() internal pure override returns (uint256) {\n', '        return REVISION;\n', '    }\n', '    \n', '    function initialize() external initializer {}\n', '    \n', '    function updateAggregators(address[] memory assets, address[] memory aggregators) external {\n', '        require(isManager(msg.sender), "INVALID_MANAGER");\n', '        \n', '        for(uint256 i = 0; i < assets.length; i++) {\n', '            aggregatorsOfAssets[assets[i]] = aggregators[i];\n', '            emit AggregatorUpdated(assets[i], aggregators[i]);\n', '        }\n', '    }\n', '    \n', '    function isManager(address caller) public pure returns(bool) {\n', '        return (caller == address(0x51F22ac850D29C879367A77D241734AcB276B815) || caller == address(0x49598E2F08D11980E06C5507070F6dd97CE8f0bb));\n', '    }\n', '}']