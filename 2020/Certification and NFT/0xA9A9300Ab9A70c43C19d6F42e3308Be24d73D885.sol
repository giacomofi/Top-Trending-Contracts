['/*\n', '\n', '    /     |  __    / ____|\n', '   /      | |__) | | |\n', '  / /    |  _  /  | |\n', ' / ____   | |    | |____\n', '/_/    _ |_|  _  _____|\n', '\n', '* ARC: staking/StakingRewardsAccrualCapped.sol\n', '*\n', '* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/staking/StakingRewardsAccrualCapped.sol\n', '*\n', '* Contract Dependencies: \n', '*\t- Accrual\n', '*\t- Context\n', '*\t- Ownable\n', '*\t- RewardsDistributionRecipient\n', '*\t- StakingRewards\n', '* Libraries: \n', '*\t- Address\n', '*\t- Decimal\n', '*\t- Math\n', '*\t- SafeERC20\n', '*\t- SafeMath\n', '*\t- TypesV1\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 ARC\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/* ===============================================\n', '* Flattened with Solidifier by Coinage\n', '* \n', '* https://solidifier.coina.ge\n', '* ===============================================\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '// Copied directly from https://github.com/Synthetixio/synthetix/blob/v2.26.3/contracts/RewardsDistributionRecipient.sol\n', '\n', '\n', 'contract RewardsDistributionRecipient is Ownable {\n', '    address public rewardsDistribution;\n', '\n', '    function notifyRewardAmount(uint256 reward) external;\n', '\n', '    modifier onlyRewardsDistribution() {\n', '        require(\n', '            msg.sender == rewardsDistribution,\n', '            "Caller is not RewardsDistribution contract"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setRewardsDistribution(\n', '        address _rewardsDistribution\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        rewardsDistribution = _rewardsDistribution;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '// Copied directly from https://github.com/Synthetixio/synthetix/blob/v2.26.3/contracts/StakingRewards.sol\n', '\n', '\n', 'contract StakingRewards is RewardsDistributionRecipient {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    IERC20 public rewardsToken;\n', '    IERC20 public stakingToken;\n', '\n', '    address public arcDAO;\n', '\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;\n', '    uint256 public rewardsDuration = 7 days;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event RewardsDurationUpdated(uint256 newDuration);\n', '    event Recovered(address token, uint256 amount);\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    modifier updateReward(address account) {\n', '        rewardPerTokenStored = actualRewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '\n', '        if (account != address(0)) {\n', '            rewards[account] = actualEarned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(\n', '        address _arcDAO,\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken\n', '    )\n', '        public\n', '    {\n', '        arcDAO = _arcDAO;\n', '        rewardsToken = IERC20(_rewardsToken);\n', '        stakingToken = IERC20(_stakingToken);\n', '        rewardsDistribution = _rewardsDistribution;\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(\n', '        address account\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _balances[account];\n', '    }\n', '\n', '    function lastTimeRewardApplicable()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n', '    }\n', '\n', '    function actualRewardPerToken()\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(lastUpdateTime)\n', '                    .mul(rewardRate)\n', '                    .mul(1e18)\n', '                    .div(_totalSupply)\n', '            );\n', '    }\n', '\n', '    function rewardPerToken()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(lastUpdateTime)\n', '                    .mul(rewardRate)\n', '                    .mul(1e18)\n', '                    .div(_totalSupply)\n', '                    .mul(2)\n', '                    .div(3)\n', '            );\n', '    }\n', '\n', '    function actualEarned(\n', '        address account\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _balances[account]\n', '            .mul(actualRewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '            .div(1e18)\n', '            .add(rewards[account]);\n', '    }\n', '\n', '    function earned(\n', '        address account\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _balances[account]\n', '            .mul(actualRewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '            .div(1e18)\n', '            .add(rewards[account])\n', '            .mul(2)\n', '            .div(3);\n', '    }\n', '\n', '    function getRewardForDuration()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return rewardRate.mul(rewardsDuration);\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    function _stake(\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        require(\n', '            amount > 0,\n', '            "Cannot stake 0"\n', '        );\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function _withdraw(\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        require(\n', '            amount > 0,\n', '            "Cannot withdraw 0"\n', '        );\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '\n', '        stakingToken.safeTransfer(msg.sender, amount);\n', '\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function _getReward()\n', '        internal\n', '    {\n', '        uint256 reward = rewards[msg.sender];\n', '\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '\n', '            rewardsToken.safeTransfer(msg.sender, reward.mul(2).div(3));\n', '            rewardsToken.safeTransfer(arcDAO, reward.sub(reward.mul(2).div(3)));\n', '\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function _exit() internal {\n', '        _withdraw(_balances[msg.sender]);\n', '        _getReward();\n', '    }\n', '\n', '    /* ========== RESTRICTED FUNCTIONS ========== */\n', '\n', '    function notifyRewardAmount(\n', '        uint256 reward\n', '    )\n', '        external\n', '        onlyRewardsDistribution\n', '        updateReward(address(0))\n', '    {\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = reward.div(rewardsDuration);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = reward.add(leftover).div(rewardsDuration);\n', '        }\n', '\n', '        // Ensure the provided reward amount is not more than the balance in the contract.\n', '        // This keeps the reward rate in the right range, preventing overflows due to\n', '        // very high values of rewardRate in the earned and rewardsPerToken functions;\n', '        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n', '        uint balance = rewardsToken.balanceOf(address(this));\n', '        require(\n', '            rewardRate <= balance.div(rewardsDuration),\n', '            "Provided reward too high"\n', '        );\n', '\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(rewardsDuration);\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    // Added to support recovering LP Rewards from other systems to be distributed to holders\n', '    function recoverERC20(\n', '        address tokenAddress,\n', '        uint256 tokenAmount\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        // Cannot recover the staking token or the rewards token\n', '        require(\n', '            tokenAddress != address(stakingToken) && tokenAddress != address(rewardsToken),\n', '            "Cannot withdraw the staking or rewards tokens"\n', '        );\n', '\n', '        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n', '        emit Recovered(tokenAddress, tokenAmount);\n', '    }\n', '\n', '    function setRewardsDuration(\n', '        uint256 _rewardsDuration\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            periodFinish == 0 || block.timestamp > periodFinish,\n', '            "Prev period must be complete before changing duration for new period"\n', '        );\n', '        rewardsDuration = _rewardsDuration;\n', '        emit RewardsDurationUpdated(rewardsDuration);\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '// Modified from https://github.com/iearn-finance/audit/blob/master/contracts/yGov/YearnGovernanceBPT.sol\n', '\n', '\n', '/**\n', ' * @title Accrual is an abstract contract which allows users of some\n', ' *        distribution to claim a portion of tokens based on their share.\n', ' */\n', 'contract Accrual {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public accrualToken;\n', '\n', '    uint256 public accruedIndex = 0; // previously accumulated index\n', '    uint256 public accruedBalance = 0; // previous calculated balance\n', '\n', '    mapping(address => uint256) public supplyIndex;\n', '\n', '    constructor(\n', '        address _accrualToken\n', '    )\n', '        public\n', '    {\n', '        accrualToken = IERC20(_accrualToken);\n', '    }\n', '\n', '    function getUserBalance(\n', '        address owner\n', '    )\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function getTotalBalance()\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function updateFees()\n', '        public\n', '    {\n', '        if (getTotalBalance() == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 contractBalance = accrualToken.balanceOf(address(this));\n', '\n', '        if (contractBalance == 0) {\n', '            return;\n', '        }\n', '\n', '        // Find the difference since the last balance stored in the contract\n', '        uint256 difference = contractBalance.sub(accruedBalance);\n', '\n', '        if (difference == 0) {\n', '            return;\n', '        }\n', '\n', '        // Use the difference to calculate a ratio\n', '        uint256 ratio = difference.mul(1e18).div(getTotalBalance());\n', '\n', '        if (ratio == 0) {\n', '            return;\n', '        }\n', '\n', '        // Update the index by adding the existing index to the ratio index\n', '        accruedIndex = accruedIndex.add(ratio);\n', '\n', '        // Update the accrued balance\n', '        accruedBalance = contractBalance;\n', '    }\n', '\n', '    function claimFees()\n', '        public\n', '    {\n', '        claimFor(msg.sender);\n', '    }\n', '\n', '    function claimFor(\n', '        address recipient\n', '    )\n', '        public\n', '    {\n', '        updateFees();\n', '\n', '        uint256 userBalance = getUserBalance(recipient);\n', '\n', '        if (userBalance == 0) {\n', '            supplyIndex[recipient] = accruedIndex;\n', '            return;\n', '        }\n', '\n', "        // Store the existing user's index before updating it\n", '        uint256 existingIndex = supplyIndex[recipient];\n', '\n', "        // Update the user's index to the current one\n", '        supplyIndex[recipient] = accruedIndex;\n', '\n', '        // Calculate the difference between the current index and the old one\n', '        // The difference here is what the user will be able to claim against\n', '        uint256 delta = accruedIndex.sub(existingIndex);\n', '\n', '        require(\n', '            delta > 0,\n', '            "TokenAccrual: no tokens available to claim"\n', '        );\n', '\n', "        // Get the user's current balance and multiply with their index delta\n", '        uint256 share = userBalance.mul(delta).div(1e18);\n', '\n', '        // Transfer the tokens to the user\n', '        accrualToken.safeTransfer(recipient, share);\n', '\n', '        // Update the accrued balance\n', '        accruedBalance = accrualToken.balanceOf(address(this));\n', '    }\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface ISyntheticToken {\n', '\n', '    function symbolKey()\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function burn(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function transferCollateral(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IMintableToken {\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function burn(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title Math\n', ' *\n', ' * Library for non-standard Math functions\n', ' */\n', 'library Math {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Library Functions ============\n', '\n', '    /*\n', '     * Return target * (numerator / denominator).\n', '     */\n', '    function getPartial(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return target.mul(numerator).div(denominator);\n', '    }\n', '\n', '    function to128(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint128)\n', '    {\n', '        uint128 result = uint128(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint128"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function to96(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint96)\n', '    {\n', '        uint96 result = uint96(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint96"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function to32(\n', '        uint256 number\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint32)\n', '    {\n', '        uint32 result = uint32(number);\n', '        require(\n', '            result == number,\n', '            "Math: Unsafe cast to uint32"\n', '        );\n', '        return result;\n', '    }\n', '\n', '    function min(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a > b ? a : b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', ' * @title Decimal\n', ' *\n', ' * Library that defines a fixed-point number with 18 decimal places.\n', ' */\n', 'library Decimal {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constants ============\n', '\n', '    uint256 constant BASE = 10**18;\n', '\n', '    // ============ Structs ============\n', '\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function one()\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: BASE });\n', '    }\n', '\n', '    function onePlus(\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.add(BASE) });\n', '    }\n', '\n', '    function mul(\n', '        uint256 target,\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, d.value, BASE);\n', '    }\n', '\n', '    function mul(\n', '        D256 memory d1,\n', '        D256 memory d2\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\n', '    }\n', '\n', '    function div(\n', '        uint256 target,\n', '        D256 memory d\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, BASE, d.value);\n', '    }\n', '\n', '    function add(\n', '        D256 memory d,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.add(amount) });\n', '    }\n', '\n', '    function sub(\n', '        D256 memory d,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        pure\n', '        returns (D256 memory)\n', '    {\n', '        return D256({ value: d.value.sub(amount) });\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IOracle {\n', '\n', '    function fetchCurrentPrice()\n', '        external\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'library TypesV1 {\n', '\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Enums ============\n', '\n', '    enum AssetType {\n', '        Collateral,\n', '        Synthetic\n', '    }\n', '\n', '    // ============ Structs ============\n', '\n', '    struct MarketParams {\n', '        Decimal.D256 collateralRatio;\n', '        Decimal.D256 liquidationUserFee;\n', '        Decimal.D256 liquidationArcFee;\n', '    }\n', '\n', '    struct Position {\n', '        address owner;\n', '        AssetType collateralAsset;\n', '        AssetType borrowedAsset;\n', '        Par collateralAmount;\n', '        Par borrowedAmount;\n', '    }\n', '\n', '    struct RiskParams {\n', '        uint256 collateralLimit;\n', '        uint256 syntheticLimit;\n', '        uint256 positionCollateralMinimum;\n', '    }\n', '\n', '    // ============ AssetAmount ============\n', '\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par  // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ ArcAsset ============\n', '\n', '    function oppositeAsset(\n', '        AssetType assetType\n', '    )\n', '        internal\n', '        pure\n', '        returns (AssetType)\n', '    {\n', '        return assetType == AssetType.Collateral ? AssetType.Synthetic : AssetType.Collateral;\n', '    }\n', '\n', '    // ============ Par (Principal Amount) ============\n', '\n', '    // Individual principal amount for an account\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    function zeroPar()\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: false,\n', '            value: 0\n', '        });\n', '    }\n', '\n', '    function positiveZeroPar()\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: true,\n', '            value: 0\n', '        });\n', '    }\n', '\n', '    function sub(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return add(a, negative(b));\n', '    }\n', '\n', '    function add(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        Par memory result;\n', '        if (a.sign == b.sign) {\n', '            result.sign = a.sign;\n', '            result.value = SafeMath.add(a.value, b.value).to128();\n', '        } else {\n', '            if (a.value >= b.value) {\n', '                result.sign = a.sign;\n', '                result.value = SafeMath.sub(a.value, b.value).to128();\n', '            } else {\n', '                result.sign = b.sign;\n', '                result.value = SafeMath.sub(b.value, a.value).to128();\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function equals(\n', '        Par memory a,\n', '        Par memory b\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        if (a.value == b.value) {\n', '            if (a.value == 0) {\n', '                return true;\n', '            }\n', '            return a.sign == b.sign;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function negative(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (Par memory)\n', '    {\n', '        return Par({\n', '            sign: !a.sign,\n', '            value: a.value\n', '        });\n', '    }\n', '\n', '    function isNegative(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return !a.sign && a.value > 0;\n', '    }\n', '\n', '    function isPositive(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a.sign && a.value > 0;\n', '    }\n', '\n', '    function isZero(\n', '        Par memory a\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a.value == 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IKYFV2 {\n', '\n', '    function checkVerified(\n', '        address _user\n', '    )\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface IStateV1 {\n', '\n', '    function getPosition(\n', '        uint256 id\n', '    )\n', '        external\n', '        view\n', '        returns (TypesV1.Position memory);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'contract StakingRewardsAccrualCapped is StakingRewards, Accrual {\n', '\n', '    /* ========== Variables ========== */\n', '\n', '    IStateV1 public state;\n', '\n', '    uint256 public debtToStake;\n', '\n', '    uint256 public hardCap;\n', '\n', '    bool public tokensClaimable;\n', '\n', '    mapping (address => bool) public kyfInstances;\n', '\n', '    mapping (address => uint256) public stakedPosition;\n', '\n', '    address[] public kyfInstancesArray;\n', '\n', '    /* ========== Events ========== */\n', '\n', '    event HardCapSet(uint256 _cap);\n', '\n', '    event KyfStatusUpdated(address _address, bool _status);\n', '    event PositionStaked(address _address, uint256 _positionId);\n', '\n', '    event ClaimableStatusUpdated(bool _status);\n', '\n', '    event UserSlashed(address _user, address _slasher, uint256 _amount);\n', '\n', '    /* ========== Constructor ========== */\n', '\n', '    constructor(\n', '        address _arcDAO,\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken,\n', '        address _feesToken\n', '    )\n', '        public\n', '        StakingRewards(\n', '            _arcDAO,\n', '            _rewardsDistribution,\n', '            _rewardsToken,\n', '            _stakingToken\n', '        )\n', '        Accrual(\n', '            _feesToken\n', '        )\n', '    { }\n', '\n', '    /* ========== Public View Functions ========== */\n', '\n', '    function getUserBalance(\n', '        address owner\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return balanceOf(owner);\n', '    }\n', '\n', '    function getTotalBalance()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupply();\n', '    }\n', '\n', '    function getApprovedKyfInstancesArray()\n', '        public\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return kyfInstancesArray;\n', '    }\n', '\n', '    function isMinter(\n', '        address _user,\n', '        uint256 _stakeAmount,\n', '        uint256 _positionId\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        TypesV1.Position memory position = state.getPosition(_positionId);\n', '\n', '        if (position.owner != _user) {\n', '            return false;\n', '        }\n', '\n', "        // You've staked 50 and the debtToStake = 10, so you need at least $5 of debt\n", '        uint256 requiredDebt = _stakeAmount.div(debtToStake);\n', '\n', '        return uint256(position.borrowedAmount.value) >= requiredDebt;\n', '    }\n', '\n', '    function isVerified(\n', '        address _user\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < kyfInstancesArray.length; i++) {\n', '            IKYFV2 kyfContract = IKYFV2(kyfInstancesArray[i]);\n', '            if (kyfContract.checkVerified(_user) == true) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /* ========== Admin Functions ========== */\n', '\n', '    function setStakeHardCap(\n', '        uint256 _hardCap\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        hardCap = _hardCap;\n', '\n', '        emit HardCapSet(_hardCap);\n', '    }\n', '\n', '    function setTokensClaimable(\n', '        bool _enabled\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokensClaimable = _enabled;\n', '\n', '        emit ClaimableStatusUpdated(_enabled);\n', '    }\n', '\n', '    function setApprovedKYFInstance(\n', '        address _kyfContract,\n', '        bool _status\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (_status == true) {\n', '            kyfInstancesArray.push(_kyfContract);\n', '            kyfInstances[_kyfContract] = true;\n', '            emit KyfStatusUpdated(_kyfContract, true);\n', '            return;\n', '        }\n', '\n', '        // Remove the kyfContract from the kyfInstancesArray array.\n', '        for (uint i = 0; i < kyfInstancesArray.length; i++) {\n', '            if (address(kyfInstancesArray[i]) == _kyfContract) {\n', '                delete kyfInstancesArray[i];\n', '                kyfInstancesArray[i] = kyfInstancesArray[kyfInstancesArray.length - 1];\n', '\n', '                // Decrease the size of the array by one.\n', '                kyfInstancesArray.length--;\n', '                break;\n', '            }\n', '        }\n', '\n', '        // And remove it from the synths mapping\n', '        delete kyfInstances[_kyfContract];\n', '        emit KyfStatusUpdated(_kyfContract, false);\n', '    }\n', '\n', '    function setDebtToStake(\n', '        uint256 _debtToStake\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        debtToStake = _debtToStake;\n', '    }\n', '\n', '    function setStateContract(\n', '        address _state\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        state = IStateV1(_state);\n', '    }\n', '\n', '    /* ========== Public Functions ========== */\n', '\n', '    function stake(\n', '        uint256 amount,\n', '        uint256 positionId\n', '    )\n', '        external\n', '        updateReward(msg.sender)\n', '    {\n', '        uint256 totalBalance = balanceOf(msg.sender).add(amount);\n', '\n', '        require(\n', '            totalBalance <= hardCap,\n', '            "Cannot stake more than the hard cap"\n', '        );\n', '\n', '        require(\n', '            isVerified(msg.sender) == true,\n', '            "Must be KYF registered to participate"\n', '        );\n', '\n', '        require(\n', '            isMinter(msg.sender, amount, positionId),\n', '            "Must be a valid minter"\n', '        );\n', '\n', '        stakedPosition[msg.sender] = positionId;\n', '\n', '        _stake(amount);\n', '\n', '        emit PositionStaked(msg.sender, positionId);\n', '    }\n', '\n', '    function slash(\n', '        address user\n', '    )\n', '        external\n', '        updateReward(user)\n', '    {\n', '        require(\n', '            isMinter(\n', '                user,\n', '                balanceOf(user),\n', '                stakedPosition[user]\n', '            ) == false,\n', '            "You cant slash a user who has staked"\n', '        );\n', '\n', '        uint256 reward = rewards[user];\n', '        rewards[msg.sender] = rewards[msg.sender].add(reward);\n', '        rewards[user] = 0;\n', '\n', '        emit UserSlashed(user, msg.sender, reward);\n', '    }\n', '\n', '    function getReward()\n', '        external\n', '        updateReward(msg.sender)\n', '    {\n', '        require(\n', '            tokensClaimable == true,\n', '            "Tokens cannnot be claimed yet"\n', '        );\n', '\n', '        _getReward();\n', '    }\n', '\n', '    function withdraw(\n', '        uint256 amount\n', '    )\n', '        external\n', '        updateReward(msg.sender)\n', '    {\n', '        _withdraw(amount);\n', '    }\n', '\n', '    function exit()\n', '        external\n', '        updateReward(msg.sender)\n', '    {\n', '        _exit();\n', '    }\n', '\n', '}']