['pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface BerserkRewards {\n', '    function stakingPower(address account) external view returns (uint256);\n', '}\n', '\n', 'contract BerserkVote {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public constant MAX_VOTERS_PER_ITEM = 50;\n', '\n', '    uint16 public constant MIN_VOTING_VALUE = 50; // 50% (x0.5 times)\n', '    uint16 public constant MAX_VOTING_VALUE = 200; // 200% (x2 times)\n', '\n', '    mapping(address => mapping(uint256 => uint8)) public numVoters; // poolAddress -> votingItem (periodFinish) -> numVoters (the number of voters in this round)\n', '    mapping(address => mapping(uint256 => address[MAX_VOTERS_PER_ITEM])) public voters; // poolAddress -> votingItem (periodFinish) -> voters (array)\n', '    mapping(address => mapping(uint256 => mapping(address => bool))) public isInTopVoters; // poolAddress -> votingItem (periodFinish) -> isInTopVoters (map: voter -> in_top (true/false))\n', '    mapping(address => mapping(uint256 => mapping(address => uint16))) public voter2VotingValue; // poolAddress -> votingItem (periodFinish) -> voter2VotingValue (map: voter -> voting value)\n', '\n', '    event Voted(address poolAddress, address indexed user, uint256 votingItem, uint16 votingValue);\n', '\n', '    function getNumVotes( address poolAddressStake, uint256 valueAmount ) public view returns (uint256){\n', '        return numVoters[poolAddressStake][valueAmount];\n', '    }\n', '\n', '    function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {\n', '        // already voted\n', '        if (voter2VotingValue[poolAddress][votingItem][account] > 0) return false;\n', '\n', '        BerserkRewards rewards = BerserkRewards(poolAddress);\n', "        // hasn't any staking power\n", '        if (rewards.stakingPower(account) == 0) return false;\n', '\n', '        // number of voters is under limit still\n', '        if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) return true;\n', '        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\n', '            if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function averageVotingValue(address poolAddress, uint256 votingItem) public view returns (uint16) {\n', '        if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes\n', '        uint256 totalStakingPower = 0;\n', '        uint256 totalWeightVotingValue = 0;\n', '        BerserkRewards rewards = BerserkRewards(poolAddress);\n', '        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\n', '            address voter = voters[poolAddress][votingItem][i];\n', '            totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));\n', '            totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));\n', '        }\n', '        return (uint16) (totalWeightVotingValue.div(totalStakingPower));\n', '    }\n', '\n', '    function vote(address poolAddress, uint256 votingItem, uint16 votingValue) public {\n', '        require(votingValue >= MIN_VOTING_VALUE, "votingValue is smaller than MIN_VOTING_VALUE");\n', '        require(votingValue <= MAX_VOTING_VALUE, "votingValue is greater than MAX_VOTING_VALUE");\n', '        if (!isInTopVoters[poolAddress][votingItem][msg.sender]) {\n', '            require(isVotable(poolAddress, msg.sender, votingItem), "This account is not votable");\n', '            uint8 voterIndex = MAX_VOTERS_PER_ITEM;\n', '            if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) {\n', '                voterIndex = numVoters[poolAddress][votingItem];\n', '            } else {\n', '                BerserkRewards rewards = BerserkRewards(poolAddress);\n', '                uint256 minStakingPower = rewards.stakingPower(msg.sender);\n', '                for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\n', '                    if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {\n', '                        voterIndex = i;\n', '                        minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);\n', '                    }\n', '                }\n', '            }\n', '            if (voterIndex < MAX_VOTERS_PER_ITEM) {\n', '                if (voterIndex < numVoters[poolAddress][votingItem]) {\n', '                    isInTopVoters[poolAddress][votingItem][voters[poolAddress][votingItem][voterIndex]] = false; // remove lower power previous voter\n', '                } else {\n', '                    ++numVoters[poolAddress][votingItem];\n', '                }\n', '                isInTopVoters[poolAddress][votingItem][msg.sender] = true;\n', '                voters[poolAddress][votingItem][voterIndex] = msg.sender;\n', '            }\n', '        }\n', '        voter2VotingValue[poolAddress][votingItem][msg.sender] = votingValue;\n', '        emit Voted(poolAddress, msg.sender, votingItem, votingValue);\n', '    }\n', '}']