['// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IGeneScience.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', 'interface IGeneScience {\n', '    function isAlpacaGeneScience() external pure returns (bool);\n', '\n', '    /**\n', '     * @dev given genes of alpaca 1 & 2, return a genetic combination\n', '     * @param genes1 genes of matron\n', '     * @param genes2 genes of sire\n', '     * @param generation child generation\n', '     * @param targetBlock target block child is intended to be born\n', '     * @return gene child gene\n', '     * @return energy energy associated with the gene\n', '     * @return generationFactor buffs child energy, higher the generation larger the generationFactor\n', '     *   energy = gene energy * generationFactor\n', '     */\n', '    function mixGenes(\n', '        uint256 genes1,\n', '        uint256 genes2,\n', '        uint256 generation,\n', '        uint256 targetBlock\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 gene,\n', '            uint256 energy,\n', '            uint256 generationFactor\n', '        );\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ICryptoAlpacaEnergyListener.sol\n', '\n', '\n', '// pragma solidity 0.6.12;\n', '\n', '// import "@openzeppelin/contracts/introspection/IERC165.sol";\n', '\n', 'interface ICryptoAlpacaEnergyListener is IERC165 {\n', '    /**\n', '        @dev Handles the Alpaca energy change callback.\n', '        @param id The id of the Alpaca which the energy changed\n', '        @param oldEnergy The ID of the token being transferred\n', '        @param newEnergy The amount of tokens being transferred\n', '    */\n', '    function onCryptoAlpacaEnergyChanged(\n', '        uint256 id,\n', '        uint256 oldEnergy,\n', '        uint256 newEnergy\n', '    ) external;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/EnumerableMap.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Library for managing an enumerable variant of Solidity's\n", ' * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n', ' * type.\n', ' *\n', ' * Maps have the following properties:\n', ' *\n', ' * - Entries are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableMap.UintToAddressMap private myMap;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n', ' * supported.\n', ' */\n', 'library EnumerableMap {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Map type with\n', '    // bytes32 keys and values.\n', '    // The Map implementation uses private functions, and user-facing\n', '    // implementations (such as Uint256ToAddressMap) are just wrappers around\n', '    // the underlying Map.\n', '    // This means that we can only create new EnumerableMaps for types that fit\n', '    // in bytes32.\n', '\n', '    struct MapEntry {\n', '        bytes32 _key;\n', '        bytes32 _value;\n', '    }\n', '\n', '    struct Map {\n', '        // Storage of map keys and values\n', '        MapEntry[] _entries;\n', '\n', '        // Position of the entry defined by a key in the `entries` array, plus 1\n', '        // because index 0 means a key is not in the map.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n', '            map._entries.push(MapEntry({ _key: key, _value: value }));\n', '            // The entry is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            map._indexes[key] = map._entries.length;\n', '            return true;\n', '        } else {\n', '            map._entries[keyIndex - 1]._value = value;\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a key-value pair from a map. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function _remove(Map storage map, bytes32 key) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex != 0) { // Equivalent to contains(map, key)\n', '            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n', "            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = keyIndex - 1;\n', '            uint256 lastIndex = map._entries.length - 1;\n', '\n', '            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            MapEntry storage lastEntry = map._entries[lastIndex];\n', '\n', '            // Move the last entry to the index where the entry to delete is\n', '            map._entries[toDeleteIndex] = lastEntry;\n', '            // Update the index for the moved entry\n', '            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved entry was stored\n', '            map._entries.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete map._indexes[key];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n', '        return map._indexes[key] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of key-value pairs in the map. O(1).\n', '     */\n', '    function _length(Map storage map) private view returns (uint256) {\n', '        return map._entries.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of entries inside the\n', '    * array, and it may change when more entries are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n', '        require(map._entries.length > index, "EnumerableMap: index out of bounds");\n', '\n', '        MapEntry storage entry = map._entries[index];\n', '        return (entry._key, entry._value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n', '        return _get(map, key, "EnumerableMap: nonexistent key");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    // UintToAddressMap\n', '\n', '    struct UintToAddressMap {\n', '        Map _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n', '        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(UintToAddressMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (uint256(key), address(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key))));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '// import "@openzeppelin/contracts/introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '// import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";\n', '\n', '/**\n', ' * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n', ' * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155MetadataURI is IERC1155 {\n', '    /**\n', '     * @dev Returns the URI for token type `id`.\n', '     *\n', '     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n', '     * clients with the actual token type ID.\n', '     */\n', '    function uri(uint256 id) external view returns (string memory);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/introspection/IERC165.sol";\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/introspection/ERC165.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";\n', '// import "@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol";\n', '// import "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol";\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '// import "@openzeppelin/contracts/introspection/ERC165.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' *\n', ' * @dev Implementation of the basic standard multi-token.\n', ' * See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    // Mapping from token ID to account balances\n', '    mapping (uint256 => mapping(address => uint256)) private _balances;\n', '\n', '    // Mapping from account to operator approvals\n', '    mapping (address => mapping(address => bool)) private _operatorApprovals;\n', '\n', '    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n', '    string private _uri;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n", "     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n", "     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n", '     *\n', '     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n', '     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n', '\n', '    /*\n', "     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n', '\n', '    /**\n', '     * @dev See {_setURI}.\n', '     */\n', '    constructor (string memory uri) public {\n', '        _setURI(uri);\n', '\n', '        // register the supported interfaces to conform to ERC1155 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC1155);\n', '\n', '        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155MetadataURI-uri}.\n', '     *\n', '     * This implementation returns the same URI for *all* token types. It relies\n', '     * on the token type ID substitution mechanism\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n', '     *\n', '     * Clients calling this function must replace the `\\{id\\}` substring with the\n', '     * actual token type ID.\n', '     */\n', '    function uri(uint256) external view override returns (string memory) {\n', '        return _uri;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) public view override returns (uint256) {\n', '        require(account != address(0), "ERC1155: balance query for the zero address");\n', '        return _balances[id][account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-balanceOfBatch}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(\n', '        address[] memory accounts,\n', '        uint256[] memory ids\n', '    )\n', '        public\n', '        view\n', '        override\n', '        returns (uint256[] memory)\n', '    {\n', '        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");\n', '\n', '        uint256[] memory batchBalances = new uint256[](accounts.length);\n', '\n', '        for (uint256 i = 0; i < accounts.length; ++i) {\n', '            require(accounts[i] != address(0), "ERC1155: batch balance query for the zero address");\n', '            batchBalances[i] = _balances[ids[i]][accounts[i]];\n', '        }\n', '\n', '        return batchBalances;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(_msgSender() != operator, "ERC1155: setting approval status for self");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[account][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 amount,\n', '        bytes memory data\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '    {\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: caller is not owner nor approved"\n', '        );\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n', '\n', '        _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");\n', '        _balances[id][to] = _balances[id][to].add(amount);\n', '\n', '        emit TransferSingle(operator, from, to, id, amount);\n', '\n', '        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-safeBatchTransferFrom}.\n', '     */\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '    {\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: transfer caller is not owner nor approved"\n', '        );\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n', '\n', '        for (uint256 i = 0; i < ids.length; ++i) {\n', '            uint256 id = ids[i];\n', '            uint256 amount = amounts[i];\n', '\n', '            _balances[id][from] = _balances[id][from].sub(\n', '                amount,\n', '                "ERC1155: insufficient balance for transfer"\n', '            );\n', '            _balances[id][to] = _balances[id][to].add(amount);\n', '        }\n', '\n', '        emit TransferBatch(operator, from, to, ids, amounts);\n', '\n', '        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets a new URI for all token types, by relying on the token type ID\n', '     * substitution mechanism\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n', '     *\n', '     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n', '     * URI or any of the amounts in the JSON file at said URI will be replaced by\n', '     * clients with the token type ID.\n', '     *\n', '     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n', '     * interpreted by clients as\n', '     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n', '     * for token type ID 0x4cce0.\n', '     *\n', '     * See {uri}.\n', '     *\n', '     * Because these URIs cannot be meaningfully represented by the {URI} event,\n', '     * this function emits no events.\n', '     */\n', '    function _setURI(string memory newuri) internal virtual {\n', '        _uri = newuri;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n', '        require(account != address(0), "ERC1155: mint to the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n', '\n', '        _balances[id][account] = _balances[id][account].add(amount);\n', '        emit TransferSingle(operator, address(0), account, id, amount);\n', '\n', '        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n', '    }\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n', '        require(to != address(0), "ERC1155: mint to the zero address");\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n', '\n', '        for (uint i = 0; i < ids.length; i++) {\n', '            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n', '        }\n', '\n', '        emit TransferBatch(operator, address(0), to, ids, amounts);\n', '\n', '        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens of token type `id` from `account`\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens of token type `id`.\n', '     */\n', '    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC1155: burn from the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");\n', '\n', '        _balances[id][account] = _balances[id][account].sub(\n', '            amount,\n', '            "ERC1155: burn amount exceeds balance"\n', '        );\n', '\n', '        emit TransferSingle(operator, account, address(0), id, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     */\n', '    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n', '        require(account != address(0), "ERC1155: burn from the zero address");\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");\n', '\n', '        for (uint i = 0; i < ids.length; i++) {\n', '            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n', '                amounts[i],\n', '                "ERC1155: burn amount exceeds balance"\n', '            );\n', '        }\n', '\n', '        emit TransferBatch(operator, account, address(0), ids, amounts);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning, as well as batched variants.\n', '     *\n', '     * The same hook is called on both single and batched variants. For single\n', '     * transfers, the length of the `id` and `amount` arrays will be 1.\n', '     *\n', '     * Calling conditions (for each `id` and `amount` pair):\n', '     *\n', "     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * of token type `id` will be  transferred to `to`.\n', '     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n', '     * for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n", '     * will be burned.\n', '     * - `from` and `to` are never both zero.\n', '     * - `ids` and `amounts` have the same, non-zero length.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        internal virtual\n', '    { }\n', '\n', '    function _doSafeTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 amount,\n', '        bytes memory data\n', '    )\n', '        private\n', '    {\n', '        if (to.isContract()) {\n', '            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n', '                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _doSafeBatchTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        private\n', '    {\n', '        if (to.isContract()) {\n', '            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n', '                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n', '        uint256[] memory array = new uint256[](1);\n', '        array[0] = element;\n', '\n', '        return array;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/CryptoAlpaca/AlpacaBase.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/utils/EnumerableMap.sol";\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '// import "contracts/interfaces/IGeneScience.sol";\n', '\n', 'contract AlpacaBase is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== ENUM ========== */\n', '\n', '    /**\n', '     * @dev Alpaca can be in one of the two state:\n', '     *\n', '     * EGG - When two alpaca breed with each other, alpaca EGG is created.\n', '     *       `gene` and `energy` are both 0 and will be assigned when egg is cracked\n', '     *\n', '     * GROWN - When egg is cracked and alpaca is born! `gene` and `energy` are determined\n', '     *         in this state.\n', '     */\n', '    enum AlpacaGrowthState {EGG, GROWN}\n', '\n', '    /* ========== PUBLIC STATE VARIABLES ========== */\n', '\n', '    /**\n', "     * @dev payment required to use cracked if it's done automatically\n", '     * assigning to 0 indicate cracking action is not automatic\n', '     */\n', '    uint256 public autoCrackingFee = 0;\n', '\n', '    /**\n', '     * @dev Base breeding ALPA fee\n', '     */\n', '    uint256 public baseHatchingFee = 10e18; // 10 ALPA\n', '\n', '    /**\n', '     * @dev ALPA ERC20 contract address\n', '     */\n', '    IERC20 public alpa;\n', '\n', '    /**\n', '     * @dev 10% of the breeding ALPA fee goes to `devAddress`\n', '     */\n', '    address public devAddress;\n', '\n', '    /**\n', '     * @dev 90% of the breeding ALPA fee goes to `stakingAddress`\n', '     */\n', '    address public stakingAddress;\n', '\n', '    /**\n', '     * @dev number of percentage breeding ALPA fund goes to devAddress\n', '     * dev percentage = devBreedingPercentage / 100\n', '     * staking percentage = (100 - devBreedingPercentage) / 100\n', '     */\n', '    uint256 public devBreedingPercentage = 10;\n', '\n', '    /**\n', '     * @dev An approximation of currently how many seconds are in between blocks.\n', '     */\n', '    uint256 public secondsPerBlock = 15;\n', '\n', '    /**\n', '     * @dev amount of time a new born alpaca needs to wait before participating in breeding activity.\n', '     */\n', '    uint256 public newBornCoolDown = uint256(1 days);\n', '\n', '    /**\n', '     * @dev amount of time an egg needs to wait to be cracked\n', '     */\n', '    uint256 public hatchingDuration = uint256(5 minutes);\n', '\n', '    /**\n', '     * @dev when two alpaca just bred, the breeding multiplier will doubled to control\n', "     * alpaca's population. This is the amount of time each parent must wait for the\n", '     * breeding multiplier to reset back to 1\n', '     */\n', '    uint256 public hatchingMultiplierCoolDown = uint256(6 hours);\n', '\n', '    /**\n', '     * @dev hard cap on the maximum hatching cost multiplier it can reach to\n', '     */\n', '    uint16 public maxHatchCostMultiplier = 16;\n', '\n', '    /**\n', '     * @dev Gen0 generation factor\n', '     */\n', '    uint64 public constant GEN0_GENERATION_FACTOR = 10;\n', '\n', '    /**\n', '     * @dev maximum gen-0 alpaca energy. This is to prevent contract owner from\n', '     * creating arbitrary energy for gen-0 alpaca\n', '     */\n', '    uint32 public constant MAX_GEN0_ENERGY = 3600;\n', '\n', '    /**\n', '     * @dev hatching fee increase with higher alpa generation\n', '     */\n', '    uint256 public generationHatchingFeeMultiplier = 2;\n', '\n', '    /**\n', '     * @dev gene science contract address for genetic combination algorithm.\n', '     */\n', '    IGeneScience public geneScience;\n', '\n', '    /* ========== INTERNAL STATE VARIABLES ========== */\n', '\n', '    /**\n', '     * @dev An array containing the Alpaca struct for all Alpacas in existence. The ID\n', '     * of each alpaca is the index into this array.\n', '     */\n', '    Alpaca[] internal alpacas;\n', '\n', '    /**\n', '     * @dev mapping from AlpacaIDs to an address where alpaca owner approved address to use\n', '     * this alpca for breeding. addrss can breed with this cat multiple times without limit.\n', '     * This will be resetted everytime someone transfered the alpaca.\n', '     */\n', '    EnumerableMap.UintToAddressMap internal alpacaAllowedToAddress;\n', '\n', '    /* ========== ALPACA STRUCT ========== */\n', '\n', '    /**\n', "     * @dev Everything about your alpaca is stored in here. Each alpaca's appearance\n", '     * is determined by the gene. The energy associated with each alpaca is also\n', '     * related to the gene\n', '     */\n', '    struct Alpaca {\n', '        // Theaalpaca genetic code.\n', '        uint256 gene;\n', '        // the alpaca energy level\n', '        uint32 energy;\n', '        // The timestamp from the block when this alpaca came into existence.\n', '        uint64 birthTime;\n', '        // The minimum timestamp alpaca needs to wait to avoid hatching multiplier\n', '        uint64 hatchCostMultiplierEndBlock;\n', '        // hatching cost multiplier\n', '        uint16 hatchingCostMultiplier;\n', '        // The ID of the parents of this alpaca, set to 0 for gen0 alpaca.\n', '        uint32 matronId;\n', '        uint32 sireId;\n', '        // The "generation number" of this alpaca. The generation number of an alpacas\n', '        // is the smaller of the two generation numbers of their parents, plus one.\n', '        uint16 generation;\n', '        // The minimum timestamp new born alpaca needs to wait to hatch egg.\n', '        uint64 cooldownEndBlock;\n', '        // The generation factor buffs alpaca energy level\n', '        uint64 generationFactor;\n', '        // defines current alpaca state\n', '        AlpacaGrowthState state;\n', '    }\n', '\n', '    /* ========== VIEW ========== */\n', '\n', '    function getTotalAlpaca() external view returns (uint256) {\n', '        return alpacas.length;\n', '    }\n', '\n', '    function _getBaseHatchingCost(uint256 _generation)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            baseHatchingFee.add(\n', '                _generation.mul(generationHatchingFeeMultiplier).mul(1e18)\n', '            );\n', '    }\n', '\n', '    /* ========== OWNER MUTATIVE FUNCTION ========== */\n', '\n', '    /**\n', '     * @param _hatchingDuration hatching duration\n', '     */\n', '    function setHatchingDuration(uint256 _hatchingDuration) external onlyOwner {\n', '        hatchingDuration = _hatchingDuration;\n', '    }\n', '\n', '    /**\n', '     * @param _stakingAddress staking address\n', '     */\n', '    function setStakingAddress(address _stakingAddress) external onlyOwner {\n', '        stakingAddress = _stakingAddress;\n', '    }\n', '\n', '    /**\n', '     * @param _devAddress dev address\n', '     */\n', '    function setDevAddress(address _devAddress) external onlyDev {\n', '        devAddress = _devAddress;\n', '    }\n', '\n', '    /**\n', '     * @param _maxHatchCostMultiplier max hatch cost multiplier\n', '     */\n', '    function setMaxHatchCostMultiplier(uint16 _maxHatchCostMultiplier)\n', '        external\n', '        onlyOwner\n', '    {\n', '        maxHatchCostMultiplier = _maxHatchCostMultiplier;\n', '    }\n', '\n', '    /**\n', '     * @param _devBreedingPercentage base generation factor\n', '     */\n', '    function setDevBreedingPercentage(uint256 _devBreedingPercentage)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            devBreedingPercentage <= 100,\n', '            "CryptoAlpaca: invalid breeding percentage - must be between 0 and 100"\n', '        );\n', '        devBreedingPercentage = _devBreedingPercentage;\n', '    }\n', '\n', '    /**\n', '     * @param _generationHatchingFeeMultiplier multiplier\n', '     */\n', '    function setGenerationHatchingFeeMultiplier(\n', '        uint256 _generationHatchingFeeMultiplier\n', '    ) external onlyOwner {\n', '        generationHatchingFeeMultiplier = _generationHatchingFeeMultiplier;\n', '    }\n', '\n', '    /**\n', '     * @param _baseHatchingFee base birthing\n', '     */\n', '    function setBaseHatchingFee(uint256 _baseHatchingFee) external onlyOwner {\n', '        baseHatchingFee = _baseHatchingFee;\n', '    }\n', '\n', '    /**\n', '     * @param _newBornCoolDown new born cool down\n', '     */\n', '    function setNewBornCoolDown(uint256 _newBornCoolDown) external onlyOwner {\n', '        newBornCoolDown = _newBornCoolDown;\n', '    }\n', '\n', '    /**\n', '     * @param _hatchingMultiplierCoolDown base birthing\n', '     */\n', '    function setHatchingMultiplierCoolDown(uint256 _hatchingMultiplierCoolDown)\n', '        external\n', '        onlyOwner\n', '    {\n', '        hatchingMultiplierCoolDown = _hatchingMultiplierCoolDown;\n', '    }\n', '\n', '    /**\n', '     * @dev update how many seconds per blocks are currently observed.\n', '     * @param _secs number of seconds\n', '     */\n', '    function setSecondsPerBlock(uint256 _secs) external onlyOwner {\n', '        secondsPerBlock = _secs;\n', '    }\n', '\n', '    /**\n', '     * @dev only owner can update autoCrackingFee\n', '     */\n', '    function setAutoCrackingFee(uint256 _autoCrackingFee) external onlyOwner {\n', '        autoCrackingFee = _autoCrackingFee;\n', '    }\n', '\n', '    /**\n', '     * @dev owner can upgrading gene science\n', '     */\n', '    function setGeneScience(IGeneScience _geneScience) external onlyOwner {\n', '        require(\n', '            _geneScience.isAlpacaGeneScience(),\n', '            "CryptoAlpaca: invalid gene science contract"\n', '        );\n', '\n', '        // Set the new contract address\n', '        geneScience = _geneScience;\n', '    }\n', '\n', '    /**\n', '     * @dev owner can update ALPA erc20 token location\n', '     */\n', '    function setAlpaContract(IERC20 _alpa) external onlyOwner {\n', '        alpa = _alpa;\n', '    }\n', '\n', '    /* ========== MODIFIER ========== */\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the dev.\n', '     */\n', '    modifier onlyDev() {\n', '        require(\n', '            devAddress == _msgSender(),\n', '            "CryptoAlpaca: caller is not the dev"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/CryptoAlpaca/AlpacaToken.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";\n', '// import "contracts/CryptoAlpaca/AlpacaBase.sol";\n', '\n', 'contract AlpacaToken is AlpacaBase, ERC1155("") {\n', '    /* ========== EVENTS ========== */\n', '\n', '    /**\n', '     * @dev Emitted when single `alpacaId` alpaca with `gene` and `energy` is born\n', '     */\n', '    event BornSingle(uint256 indexed alpacaId, uint256 gene, uint256 energy);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {BornSingle} events\n', '     */\n', '    event BornBatch(uint256[] alpacaIds, uint256[] genes, uint256[] energy);\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    /**\n', '     * @dev Check if `_alpacaId` is owned by `_account`\n', '     */\n', '    function isOwnerOf(address _account, uint256 _alpacaId)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return balanceOf(_account, _alpacaId) == 1;\n', '    }\n', '\n', '    /* ========== OWNER MUTATIVE FUNCTION ========== */\n', '\n', '    /**\n', '     * @dev Allow contract owner to update URI to look up all alpaca metadata\n', '     */\n', '    function setURI(string memory _newuri) external onlyOwner {\n', '        _setURI(_newuri);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow contract owner to create generation 0 alpaca with `_gene`,\n', '     *   `_energy` and transfer to `owner`\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `_energy` must be less than or equal to MAX_GEN0_ENERGY\n', '     */\n', '    function createGen0Alpaca(\n', '        uint256 _gene,\n', '        uint256 _energy,\n', '        address _owner\n', '    ) external onlyOwner {\n', '        address alpacaOwner = _owner;\n', '        if (alpacaOwner == address(0)) {\n', '            alpacaOwner = owner();\n', '        }\n', '\n', '        _createGen0Alpaca(_gene, _energy, alpacaOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {createGen0Alpaca} function\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - all `_energies` must be less than or equal to MAX_GEN0_ENERGY\n', '     */\n', '    function createGen0AlpacaBatch(\n', '        uint256[] memory _genes,\n', '        uint256[] memory _energies,\n', '        address _owner\n', '    ) external onlyOwner {\n', '        address alpacaOwner = _owner;\n', '        if (alpacaOwner == address(0)) {\n', '            alpacaOwner = owner();\n', '        }\n', '\n', '        _createGen0AlpacaBatch(_genes, _energies, _owner);\n', '    }\n', '\n', '    /* ========== INTERNAL ALPA GENERATION ========== */\n', '\n', '    /**\n', "     * @dev Create an alpaca egg. Egg's `gene` and `energy` will assigned to 0\n", "     * initially and won't be determined until egg is cracked.\n", '     */\n', '    function _createEgg(\n', '        uint256 _matronId,\n', '        uint256 _sireId,\n', '        uint256 _generation,\n', '        uint256 _cooldownEndBlock,\n', '        address _owner\n', '    ) internal returns (uint256) {\n', '        require(_matronId == uint256(uint32(_matronId)));\n', '        require(_sireId == uint256(uint32(_sireId)));\n', '        require(_generation == uint256(uint16(_generation)));\n', '\n', '        Alpaca memory _alpaca = Alpaca({\n', '            gene: 0,\n', '            energy: 0,\n', '            birthTime: uint64(now),\n', '            hatchCostMultiplierEndBlock: 0,\n', '            hatchingCostMultiplier: 1,\n', '            matronId: uint32(_matronId),\n', '            sireId: uint32(_sireId),\n', '            cooldownEndBlock: uint64(_cooldownEndBlock),\n', '            generation: uint16(_generation),\n', '            generationFactor: 0,\n', '            state: AlpacaGrowthState.EGG\n', '        });\n', '\n', '        alpacas.push(_alpaca);\n', '        uint256 eggId = alpacas.length - 1;\n', '\n', '        _mint(_owner, eggId, 1, "");\n', '\n', '        return eggId;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal gen-0 alpaca creation function\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `_energy` must be less than or equal to MAX_GEN0_ENERGY\n', '     */\n', '    function _createGen0Alpaca(\n', '        uint256 _gene,\n', '        uint256 _energy,\n', '        address _owner\n', '    ) internal returns (uint256) {\n', '        require(_energy <= MAX_GEN0_ENERGY, "CryptoAlpaca: invalid energy");\n', '\n', '        Alpaca memory _alpaca = Alpaca({\n', '            gene: _gene,\n', '            energy: uint32(_energy),\n', '            birthTime: uint64(now),\n', '            hatchCostMultiplierEndBlock: 0,\n', '            hatchingCostMultiplier: 1,\n', '            matronId: 0,\n', '            sireId: 0,\n', '            cooldownEndBlock: 0,\n', '            generation: 0,\n', '            generationFactor: GEN0_GENERATION_FACTOR,\n', '            state: AlpacaGrowthState.GROWN\n', '        });\n', '\n', '        alpacas.push(_alpaca);\n', '        uint256 newAlpacaID = alpacas.length - 1;\n', '\n', '        _mint(_owner, newAlpacaID, 1, "");\n', '\n', '        // emit the born event\n', '        emit BornSingle(newAlpacaID, _gene, _energy);\n', '\n', '        return newAlpacaID;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal gen-0 alpaca batch creation function\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - all `_energies` must be less than or equal to MAX_GEN0_ENERGY\n', '     */\n', '    function _createGen0AlpacaBatch(\n', '        uint256[] memory _genes,\n', '        uint256[] memory _energies,\n', '        address _owner\n', '    ) internal returns (uint256[] memory) {\n', '        require(\n', '            _genes.length > 0,\n', '            "CryptoAlpaca: must pass at least one genes"\n', '        );\n', '        require(\n', '            _genes.length == _energies.length,\n', '            "CryptoAlpaca: genes and energy length mismatch"\n', '        );\n', '\n', '        uint256 alpacaIdStart = alpacas.length;\n', '        uint256[] memory ids = new uint256[](_genes.length);\n', '        uint256[] memory amount = new uint256[](_genes.length);\n', '\n', '        for (uint256 i = 0; i < _genes.length; i++) {\n', '            require(\n', '                _energies[i] <= MAX_GEN0_ENERGY,\n', '                "CryptoAlpaca: invalid energy"\n', '            );\n', '\n', '            Alpaca memory _alpaca = Alpaca({\n', '                gene: _genes[i],\n', '                energy: uint32(_energies[i]),\n', '                birthTime: uint64(now),\n', '                hatchCostMultiplierEndBlock: 0,\n', '                hatchingCostMultiplier: 1,\n', '                matronId: 0,\n', '                sireId: 0,\n', '                cooldownEndBlock: 0,\n', '                generation: 0,\n', '                generationFactor: GEN0_GENERATION_FACTOR,\n', '                state: AlpacaGrowthState.GROWN\n', '            });\n', '\n', '            alpacas.push(_alpaca);\n', '            ids[i] = alpacaIdStart + i;\n', '            amount[i] = 1;\n', '        }\n', '\n', '        _mintBatch(_owner, ids, amount, "");\n', '\n', '        emit BornBatch(ids, _genes, _energies);\n', '\n', '        return ids;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ICryptoAlpaca.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";\n', '\n', 'interface ICryptoAlpaca is IERC1155 {\n', '    function getAlpaca(uint256 _id)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 id,\n', '            bool isReady,\n', '            uint256 cooldownEndBlock,\n', '            uint256 birthTime,\n', '            uint256 matronId,\n', '            uint256 sireId,\n', '            uint256 hatchingCost,\n', '            uint256 hatchingCostMultiplier,\n', '            uint256 hatchCostMultiplierEndBlock,\n', '            uint256 generation,\n', '            uint256 gene,\n', '            uint256 energy,\n', '            uint256 state\n', '        );\n', '\n', '    function hasPermissionToBreedAsSire(address _addr, uint256 _id)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function grandPermissionToBreed(address _addr, uint256 _sireId) external;\n', '\n', '    function clearPermissionToBreed(uint256 _alpacaId) external;\n', '\n', '    function hatch(uint256 _matronId, uint256 _sireId)\n', '        external\n', '        payable\n', '        returns (uint256);\n', '\n', '    function crack(uint256 _id) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/CryptoAlpaca/AlpacaBreed.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/EnumerableMap.sol";\n', '// import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '// import "@openzeppelin/contracts/utils/Pausable.sol";\n', '\n', '// import "contracts/CryptoAlpaca/AlpacaToken.sol";\n', '// import "contracts/interfaces/ICryptoAlpaca.sol";\n', '\n', 'contract AlpacaBreed is AlpacaToken, ICryptoAlpaca, ReentrancyGuard, Pausable {\n', '    using SafeMath for uint256;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    // The Hatched event is fired when two alpaca successfully hached an egg.\n', '    event Hatched(\n', '        uint256 indexed eggId,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 cooldownEndBlock\n', '    );\n', '\n', "    // The GrantedToBreed event is fired whne an alpaca's owner granted\n", '    // addr account to use alpacaId as sire to breed.\n', '    event GrantedToBreed(uint256 indexed alpacaId, address addr);\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    /**\n', '     * Returns all the relevant information about a specific alpaca.\n', '     * @param _id The ID of the alpaca of interest.\n', '     */\n', '    function getAlpaca(uint256 _id)\n', '        external\n', '        override\n', '        view\n', '        returns (\n', '            uint256 id,\n', '            bool isReady,\n', '            uint256 cooldownEndBlock,\n', '            uint256 birthTime,\n', '            uint256 matronId,\n', '            uint256 sireId,\n', '            uint256 hatchingCost,\n', '            uint256 hatchingCostMultiplier,\n', '            uint256 hatchCostMultiplierEndBlock,\n', '            uint256 generation,\n', '            uint256 gene,\n', '            uint256 energy,\n', '            uint256 state\n', '        )\n', '    {\n', '        Alpaca storage alpaca = alpacas[_id];\n', '\n', '        id = _id;\n', '        isReady = (alpaca.cooldownEndBlock <= block.number);\n', '        cooldownEndBlock = alpaca.cooldownEndBlock;\n', '        birthTime = alpaca.birthTime;\n', '        matronId = alpaca.matronId;\n', '        sireId = alpaca.sireId;\n', '        hatchingCost = _getBaseHatchingCost(alpaca.generation);\n', '        hatchingCostMultiplier = alpaca.hatchingCostMultiplier;\n', '        if (alpaca.hatchCostMultiplierEndBlock <= block.number) {\n', '            hatchingCostMultiplier = 1;\n', '        }\n', '\n', '        hatchCostMultiplierEndBlock = alpaca.hatchCostMultiplierEndBlock;\n', '        generation = alpaca.generation;\n', '        gene = alpaca.gene;\n', '        energy = alpaca.energy;\n', '        state = uint256(alpaca.state);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculating hatching ALPA cost\n', '     */\n', '    function hatchingALPACost(uint256 _matronId, uint256 _sireId)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _hatchingALPACost(_matronId, _sireId, false);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks to see if a given egg passed cooldownEndBlock and ready to crack\n', '     * @param _id alpaca egg ID\n', '     */\n', '\n', '    function isReadyToCrack(uint256 _id) external view returns (bool) {\n', '        Alpaca storage alpaca = alpacas[_id];\n', '        return\n', '            (alpaca.state == AlpacaGrowthState.EGG) &&\n', '            (alpaca.cooldownEndBlock <= uint64(block.number));\n', '    }\n', '\n', '    /* ========== EXTERNAL MUTATIVE FUNCTIONS  ========== */\n', '\n', '    /**\n', '     * Grants permission to another account to sire with one of your alpacas.\n', '     * @param _addr The address that will be able to use sire for breeding.\n', '     * @param _sireId a alpaca _addr will be able to use for breeding as sire.\n', '     */\n', '    function grandPermissionToBreed(address _addr, uint256 _sireId)\n', '        external\n', '        override\n', '    {\n', '        require(\n', '            isOwnerOf(msg.sender, _sireId),\n', '            "CryptoAlpaca: You do not own sire alpaca"\n', '        );\n', '\n', '        alpacaAllowedToAddress.set(_sireId, _addr);\n', '        emit GrantedToBreed(_sireId, _addr);\n', '    }\n', '\n', '    /**\n', '     * check if `_addr` has permission to user alpaca `_id` to breed with as sire.\n', '     */\n', '    function hasPermissionToBreedAsSire(address _addr, uint256 _id)\n', '        external\n', '        override\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (isOwnerOf(_addr, _id)) {\n', '            return true;\n', '        }\n', '\n', '        return alpacaAllowedToAddress.get(_id) == _addr;\n', '    }\n', '\n', '    /**\n', '     * Clear the permission on alpaca for another user to use to breed.\n', '     * @param _alpacaId a alpaca to clear permission .\n', '     */\n', '    function clearPermissionToBreed(uint256 _alpacaId) external override {\n', '        require(\n', '            isOwnerOf(msg.sender, _alpacaId),\n', '            "CryptoAlpaca: You do not own this alpaca"\n', '        );\n', '\n', '        alpacaAllowedToAddress.remove(_alpacaId);\n', '    }\n', '\n', '    /**\n', '     * @dev Hatch an baby alpaca egg with two alpaca you own (_matronId and _sireId).\n', '     * Requires a pre-payment of the fee given out to the first caller of crack()\n', '     * @param _matronId The ID of the Alpaca acting as matron\n', '     * @param _sireId The ID of the Alpaca acting as sire\n', '     * @return The hatched alpaca egg ID\n', '     */\n', '    function hatch(uint256 _matronId, uint256 _sireId)\n', '        external\n', '        override\n', '        payable\n', '        whenNotPaused\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        address msgSender = msg.sender;\n', '\n', '        // Checks for payment.\n', '        require(\n', '            msg.value >= autoCrackingFee,\n', '            "CryptoAlpaca: Required autoCrackingFee not sent"\n', '        );\n', '\n', '        // Checks for ALPA payment\n', '        require(\n', '            alpa.allowance(msgSender, address(this)) >=\n', '                _hatchingALPACost(_matronId, _sireId, true),\n', '            "CryptoAlpaca: Required hetching ALPA fee not sent"\n', '        );\n', '\n', '        // Checks if matron and sire are valid mating pair\n', '        require(\n', '            _ownerPermittedToBreed(msgSender, _matronId, _sireId),\n', '            "CryptoAlpaca: Invalid permission"\n', '        );\n', '\n', '        // Grab a reference to the potential matron\n', '        Alpaca storage matron = alpacas[_matronId];\n', '\n', "        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n", '        require(\n', '            _isReadyToHatch(matron),\n', '            "CryptoAlpaca: Matron is not yet ready to hatch"\n', '        );\n', '\n', '        // Grab a reference to the potential sire\n', '        Alpaca storage sire = alpacas[_sireId];\n', '\n', "        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n", '        require(\n', '            _isReadyToHatch(sire),\n', '            "CryptoAlpaca: Sire is not yet ready to hatch"\n', '        );\n', '\n', '        // Test that matron and sire are a valid mating pair.\n', '        require(\n', '            _isValidMatingPair(matron, _matronId, sire, _sireId),\n', '            "CryptoAlpaca: Matron and Sire are not valid mating pair"\n', '        );\n', '\n', '        // All checks passed, Alpaca gets pregnant!\n', '        return _hatchEgg(_matronId, _sireId);\n', '    }\n', '\n', '    /**\n', '     * @dev egg is ready to crack and give life to baby alpaca!\n', "     * @param _id A Alpaca egg that's ready to crack.\n", '     */\n', '    function crack(uint256 _id) external override nonReentrant {\n', '        // Grab a reference to the egg in storage.\n', '        Alpaca storage egg = alpacas[_id];\n', '\n', '        // Check that the egg is a valid alpaca.\n', '        require(egg.birthTime != 0, "CryptoAlpaca: not valid egg");\n', '        require(\n', '            egg.state == AlpacaGrowthState.EGG,\n', '            "CryptoAlpaca: not a valid egg"\n', '        );\n', '\n', '        // Check that the matron is pregnant, and that its time has come!\n', '        require(_isReadyToCrack(egg), "CryptoAlpaca: egg cant be cracked yet");\n', '\n', '        // Grab a reference to the sire in storage.\n', '        Alpaca storage matron = alpacas[egg.matronId];\n', '        Alpaca storage sire = alpacas[egg.sireId];\n', '\n', '        // Call the sooper-sekret gene mixing operation.\n', '        (\n', '            uint256 childGene,\n', '            uint256 childEnergy,\n', '            uint256 generationFactor\n', '        ) = geneScience.mixGenes(\n', '            matron.gene,\n', '            sire.gene,\n', '            egg.generation,\n', '            uint256(egg.cooldownEndBlock).sub(1)\n', '        );\n', '\n', '        egg.gene = childGene;\n', '        egg.energy = uint32(childEnergy);\n', '        egg.state = AlpacaGrowthState.GROWN;\n', '        egg.cooldownEndBlock = uint64(\n', '            (newBornCoolDown.div(secondsPerBlock)).add(block.number)\n', '        );\n', '        egg.generationFactor = uint64(generationFactor);\n', '\n', '        // Send the balance fee to the person who made birth happen.\n', '        if (autoCrackingFee > 0) {\n', '            msg.sender.transfer(autoCrackingFee);\n', '        }\n', '\n', '        // emit the born event\n', '        emit BornSingle(_id, childGene, childEnergy);\n', '    }\n', '\n', '    /* ========== PRIVATE FUNCTION ========== */\n', '\n', '    /**\n', '     * @dev Recalculate the hatchingCostMultiplier for alpaca after breed.\n', '     * If hatchCostMultiplierEndBlock is less than current block number\n', '     * reset hatchingCostMultiplier back to 2, otherwize multiply hatchingCostMultiplier by 2. Also update\n', '     * hatchCostMultiplierEndBlock.\n', '     */\n', '    function _refreshHatchingMultiplier(Alpaca storage _alpaca) private {\n', '        if (_alpaca.hatchCostMultiplierEndBlock < block.number) {\n', '            _alpaca.hatchingCostMultiplier = 2;\n', '        } else {\n', '            uint16 newMultiplier = _alpaca.hatchingCostMultiplier * 2;\n', '            if (newMultiplier > maxHatchCostMultiplier) {\n', '                newMultiplier = maxHatchCostMultiplier;\n', '            }\n', '\n', '            _alpaca.hatchingCostMultiplier = newMultiplier;\n', '        }\n', '        _alpaca.hatchCostMultiplierEndBlock = uint64(\n', '            (hatchingMultiplierCoolDown.div(secondsPerBlock)).add(block.number)\n', '        );\n', '    }\n', '\n', '    function _ownerPermittedToBreed(\n', '        address _sender,\n', '        uint256 _matronId,\n', '        uint256 _sireId\n', '    ) private view returns (bool) {\n', '        // owner must own matron, othersize not permitted\n', '        if (!isOwnerOf(_sender, _matronId)) {\n', '            return false;\n', '        }\n', '\n', "        // if owner owns sire, it's permitted\n", '        if (isOwnerOf(_sender, _sireId)) {\n', '            return true;\n', '        }\n', '\n', "        // if sire's owner has given permission to _sender to breed,\n", "        // then it's permitted to breed\n", '        if (alpacaAllowedToAddress.contains(_sireId)) {\n', '            return alpacaAllowedToAddress.get(_sireId) == _sender;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks that a given alpaca is able to breed. Requires that the\n', '     * current cooldown is finished (for sires) and also checks that there is\n', '     * no pending pregnancy.\n', '     */\n', '    function _isReadyToHatch(Alpaca storage _alpaca)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return\n', '            (_alpaca.state == AlpacaGrowthState.GROWN) &&\n', '            (_alpaca.cooldownEndBlock < uint64(block.number));\n', '    }\n', '\n', '    /**\n', '     * @dev Checks to see if a given alpaca is pregnant and (if so) if the gestation\n', '     * period has passed.\n', '     */\n', '\n', '    function _isReadyToCrack(Alpaca storage _egg) private view returns (bool) {\n', '        return\n', '            (_egg.state == AlpacaGrowthState.EGG) &&\n', '            (_egg.cooldownEndBlock < uint64(block.number));\n', '    }\n', '\n', '    /**\n', '     * @dev Calculating breeding ALPA cost for internal usage.\n', '     */\n', '    function _hatchingALPACost(\n', '        uint256 _matronId,\n', '        uint256 _sireId,\n', '        bool _strict\n', '    ) private view returns (uint256) {\n', '        uint256 blockNum = block.number;\n', '        if (!_strict) {\n', '            blockNum = blockNum + 1;\n', '        }\n', '\n', '        Alpaca storage sire = alpacas[_sireId];\n', '        uint256 sireHatchingBase = _getBaseHatchingCost(sire.generation);\n', '        uint256 sireMultiplier = sire.hatchingCostMultiplier;\n', '        if (sire.hatchCostMultiplierEndBlock < blockNum) {\n', '            sireMultiplier = 1;\n', '        }\n', '\n', '        Alpaca storage matron = alpacas[_matronId];\n', '        uint256 matronHatchingBase = _getBaseHatchingCost(matron.generation);\n', '        uint256 matronMultiplier = matron.hatchingCostMultiplier;\n', '        if (matron.hatchCostMultiplierEndBlock < blockNum) {\n', '            matronMultiplier = 1;\n', '        }\n', '\n', '        return\n', '            (sireHatchingBase.mul(sireMultiplier)).add(\n', '                matronHatchingBase.mul(matronMultiplier)\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Internal utility function to initiate hatching egg, assumes that all breeding\n', '     *  requirements have been checked.\n', '     */\n', '    function _hatchEgg(uint256 _matronId, uint256 _sireId)\n', '        private\n', '        returns (uint256)\n', '    {\n', '        // Transfer birthing ALPA fee to this contract\n', '        uint256 alpaCost = _hatchingALPACost(_matronId, _sireId, true);\n', '\n', '        uint256 devAmount = alpaCost.mul(devBreedingPercentage).div(100);\n', '        uint256 stakingAmount = alpaCost.mul(100 - devBreedingPercentage).div(\n', '            100\n', '        );\n', '\n', '        assert(alpa.transferFrom(msg.sender, devAddress, devAmount));\n', '        assert(alpa.transferFrom(msg.sender, stakingAddress, stakingAmount));\n', '\n', '        // Grab a reference to the Alpacas from storage.\n', '        Alpaca storage sire = alpacas[_sireId];\n', '        Alpaca storage matron = alpacas[_matronId];\n', '\n', '        // refresh hatching multiplier for both parents.\n', '        _refreshHatchingMultiplier(sire);\n', '        _refreshHatchingMultiplier(matron);\n', '\n', '        // Determine the lower generation number of the two parents\n', '        uint256 parentGen = matron.generation;\n', '        if (sire.generation < matron.generation) {\n', '            parentGen = sire.generation;\n', '        }\n', '\n', '        // child generation will be 1 larger than min of the two parents generation;\n', '        uint256 childGen = parentGen.add(1);\n', '\n', '        // Determine when the egg will be cracked\n', '        uint256 cooldownEndBlock = (hatchingDuration.div(secondsPerBlock)).add(\n', '            block.number\n', '        );\n', '\n', '        uint256 eggID = _createEgg(\n', '            _matronId,\n', '            _sireId,\n', '            childGen,\n', '            cooldownEndBlock,\n', '            msg.sender\n', '        );\n', '\n', '        // Emit the hatched event.\n', '        emit Hatched(eggID, _matronId, _sireId, cooldownEndBlock);\n', '\n', '        return eggID;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal check to see if a given sire and matron are a valid mating pair.\n', '     * @param _matron A reference to the Alpaca struct of the potential matron.\n', "     * @param _matronId The matron's ID.\n", '     * @param _sire A reference to the Alpaca struct of the potential sire.\n', "     * @param _sireId The sire's ID\n", '     */\n', '    function _isValidMatingPair(\n', '        Alpaca storage _matron,\n', '        uint256 _matronId,\n', '        Alpaca storage _sire,\n', '        uint256 _sireId\n', '    ) private view returns (bool) {\n', "        // A Aapaca can't breed with itself\n", '        if (_matronId == _sireId) {\n', '            return false;\n', '        }\n', '\n', "        // Alpaca can't breed with their parents.\n", '        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n', '            return false;\n', '        }\n', '        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev openzeppelin ERC1155 Hook that is called before any token transfer\n', '     * Clear any alpacaAllowedToAddress associated to the alpaca\n', "     * that's been transfered\n", '     */\n', '    function _beforeTokenTransfer(\n', '        address,\n', '        address,\n', '        address,\n', '        uint256[] memory ids,\n', '        uint256[] memory,\n', '        bytes memory\n', '    ) internal virtual override {\n', '        for (uint256 i = 0; i < ids.length; i++) {\n', '            if (alpacaAllowedToAddress.contains(ids[i])) {\n', '                alpacaAllowedToAddress.remove(ids[i]);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/CryptoAlpaca/AlpacaOperator.sol\n', '\n', '\n', '// pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/introspection/IERC165.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '// import "contracts/interfaces/IGeneScience.sol";\n', '// import "contracts/interfaces/ICryptoAlpacaEnergyListener.sol";\n', '// import "contracts/CryptoAlpaca/AlpacaBreed.sol";\n', '\n', 'contract AlpacaOperator is AlpacaBreed {\n', '    using Address for address;\n', '\n', '    address public operator;\n', '\n', '    /*\n', "     * bytes4(keccak256('onCryptoAlpacaEnergyChanged(uint256,uint256,uint256)')) == 0x5a864e1c\n", '     */\n', '    bytes4\n', '        private constant _INTERFACE_ID_CRYPTO_ALPACA_ENERGY_LISTENER = 0x5a864e1c;\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    /**\n', "     * @dev Event for when alpaca's energy changed from `fromEnergy`\n", '     */\n', '    event EnergyChanged(\n', '        uint256 indexed id,\n', '        uint256 oldEnergy,\n', '        uint256 newEnergy\n', '    );\n', '\n', '    /* ========== OPERATOR ONLY FUNCTION ========== */\n', '\n', '    function updateAlpacaEnergy(\n', '        address _owner,\n', '        uint256 _id,\n', '        uint32 _newEnergy\n', '    ) external onlyOperator nonReentrant {\n', '        require(_newEnergy > 0, "CryptoAlpaca: invalid energy");\n', '\n', '        require(\n', '            isOwnerOf(_owner, _id),\n', '            "CryptoAlpaca: alpaca does not belongs to owner"\n', '        );\n', '\n', '        Alpaca storage thisAlpaca = alpacas[_id];\n', '        uint32 oldEnergy = thisAlpaca.energy;\n', '        thisAlpaca.energy = _newEnergy;\n', '\n', '        emit EnergyChanged(_id, oldEnergy, _newEnergy);\n', '        _doSafeEnergyChangedAcceptanceCheck(_owner, _id, oldEnergy, _newEnergy);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers operator role to different address\n', '     * Can only be called by the current operator.\n', '     */\n', '    function transferOperator(address _newOperator) external onlyOperator {\n', '        require(\n', '            _newOperator != address(0),\n', '            "CryptoAlpaca: new operator is the zero address"\n', '        );\n', '        operator = _newOperator;\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than operator.\n', '     */\n', '    modifier onlyOperator() {\n', '        require(\n', '            operator == _msgSender(),\n', '            "CryptoAlpaca: caller is not the operator"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /* =========== PRIVATE ========= */\n', '\n', '    function _doSafeEnergyChangedAcceptanceCheck(\n', '        address _to,\n', '        uint256 _id,\n', '        uint256 _oldEnergy,\n', '        uint256 _newEnergy\n', '    ) private {\n', '        if (_to.isContract()) {\n', '            if (\n', '                IERC165(_to).supportsInterface(\n', '                    _INTERFACE_ID_CRYPTO_ALPACA_ENERGY_LISTENER\n', '                )\n', '            ) {\n', '                ICryptoAlpacaEnergyListener(_to).onCryptoAlpacaEnergyChanged(\n', '                    _id,\n', '                    _oldEnergy,\n', '                    _newEnergy\n', '                );\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/CryptoAlpaca/AlpacaCore.sol\n', '\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "contracts/interfaces/IGeneScience.sol";\n', '// import "contracts/CryptoAlpaca/AlpacaOperator.sol";\n', '\n', 'contract AlpacaCore is AlpacaOperator {\n', '    /**\n', '     * @dev Initializes crypto alpaca contract.\n', '     * @param _alpa ALPA ERC20 contract address\n', '     * @param _devAddress dev address.\n', '     * @param _stakingAddress staking address.\n', '     */\n', '    constructor(\n', '        IERC20 _alpa,\n', '        IGeneScience _geneScience,\n', '        address _operator,\n', '        address _devAddress,\n', '        address _stakingAddress\n', '    ) public {\n', '        alpa = _alpa;\n', '        geneScience = _geneScience;\n', '        operator = _operator;\n', '        devAddress = _devAddress;\n', '        stakingAddress = _stakingAddress;\n', '\n', '        // start with the mythical genesis alpaca\n', '        _createGen0Alpaca(uint256(-1), 0, msg.sender);\n', '    }\n', '\n', '    /* ========== OWNER MUTATIVE FUNCTION ========== */\n', '\n', '    /**\n', '     * @dev Allows owner to withdrawal the balance available to the contract.\n', '     */\n', '    function withdrawBalance(uint256 _amount, address payable _to)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _to.transfer(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev pause crypto alpaca contract stops any further hatching.\n', '     */\n', '    function pause() external onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev unpause crypto alpaca contract.\n', '     */\n', '    function unpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '}']