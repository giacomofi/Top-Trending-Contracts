['pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'FORMS' SALE 1 CONTRACT\n", '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// SafeMath library\n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint a, uint m) internal pure returns (uint r) {\n', '        return (a + m - 1) / m * m;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'interface IFORMS {\n', '    function transfer(address to, uint256 tokens) external returns (bool success);\n', '    function setTokenLock (uint256 lockedTokens, uint256 cliffTime, address purchaser) external;\n', '    function burnTokens(uint256 _amount) external;\n', '    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n', '}\n', '\n', 'contract FORMS_SALE_1{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', "    string public tokenPrice = '0.000128 ether';\n", '    address public FORMS_TOKEN_ADDRESS;\n', '    uint256 public saleEndDate = 0;\n', '    address payable owner = 0xA6a3E445E613FF022a3001091C7bE274B6a409B0;\n', '    modifier onlyOwner {\n', '        require(owner == msg.sender, "UnAuthorized");\n', '        _;\n', '    }\n', '    \n', '    function setTokenAddress(address _tokenAddress) external onlyOwner{\n', '        require(FORMS_TOKEN_ADDRESS == address(0), "TOKEN ADDRESS ALREADY CONFIGURED");\n', '        FORMS_TOKEN_ADDRESS = _tokenAddress;\n', '    }\n', '    \n', '    function startSale() external onlyOwner{\n', '        require(saleEndDate == 0, "SALE ALREADY STARTED");\n', '        saleEndDate = block.timestamp.add(2 days);\n', '    }\n', '    \n', '    receive() external payable{\n', '        // checks if sale is started or not\n', '        require(saleEndDate > 0, "Sale has not started");\n', '        \n', '        // check minimum condition\n', '        require(msg.value >= 0.1 ether, "Not enough investment");\n', '        \n', '        uint256 remainingSaleTokens = IFORMS(FORMS_TOKEN_ADDRESS).balanceOf(address(this));\n', '        \n', '        // check if burning is needed\n', '        if(remainingSaleTokens > 0 && block.timestamp > saleEndDate)\n', '            IFORMS(FORMS_TOKEN_ADDRESS).burnTokens(remainingSaleTokens);\n', '            \n', '        // checks if sale is finished\n', '        require(IFORMS(FORMS_TOKEN_ADDRESS).balanceOf(address(this)) > 0, "Sale is finished");\n', '        \n', '        // receive ethers\n', '        uint tokens = getTokenAmount(msg.value);\n', '        \n', '        // transfer tokens\n', '        IFORMS(FORMS_TOKEN_ADDRESS).transfer(msg.sender, tokens);\n', '        \n', '        // update the locking for this account\n', '        IFORMS(FORMS_TOKEN_ADDRESS).setTokenLock(tokens, saleEndDate.add(24 hours), msg.sender);\n', '        \n', '        // send received funds to the owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function getTokenAmount(uint256 amount) private pure returns(uint256){\n', '        return amount.mul(7812); // 1 ether = 7812 tokens approx\n', '    }\n', '}']